public void test1501() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1501"); float[] floatArray6 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray9 = new float[] { ' ', 10240.0f }; boolean boolean10 = org.apache.commons.math.util.MathUtils.equals(floatArray6, floatArray9); float[] floatArray17 = new float[] { 0, 10240.0f, (byte) 0, (short) 0, ' ', 1.0f }; float[] floatArray24 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray27 = new float[] { ' ', 10240.0f }; boolean boolean28 = org.apache.commons.math.util.MathUtils.equals(floatArray24, floatArray27); boolean boolean29 = org.apache.commons.math.util.MathUtils.equals(floatArray17, floatArray24); boolean boolean30 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray9, floatArray17); float[] floatArray37 = new float[] { 0, 10240.0f, (byte) 0, (short) 0, ' ', 1.0f }; float[] floatArray44 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray47 = new float[] { ' ', 10240.0f }; boolean boolean48 = org.apache.commons.math.util.MathUtils.equals(floatArray44, floatArray47); boolean boolean49 = org.apache.commons.math.util.MathUtils.equals(floatArray37, floatArray44); float[] floatArray56 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray59 = new float[] { ' ', 10240.0f }; boolean boolean60 = org.apache.commons.math.util.MathUtils.equals(floatArray56, floatArray59); float[] floatArray67 = new float[] { 0, 10240.0f, (byte) 0, (short) 0, ' ', 1.0f }; float[] floatArray74 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray77 = new float[] { ' ', 10240.0f }; boolean boolean78 = org.apache.commons.math.util.MathUtils.equals(floatArray74, floatArray77); boolean boolean79 = org.apache.commons.math.util.MathUtils.equals(floatArray67, floatArray74); float[] floatArray86 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray89 = new float[] { ' ', 10240.0f }; boolean boolean90 = org.apache.commons.math.util.MathUtils.equals(floatArray86, floatArray89); boolean boolean91 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray67, floatArray89); boolean boolean92 = org.apache.commons.math.util.MathUtils.equals(floatArray59, floatArray89); boolean boolean93 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray37, floatArray89); boolean boolean94 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray17, floatArray89); org.junit.Assert.assertNotNull(floatArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(floatArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0, 10240.0, 0.0, 0.0, 32.0, 1.0]"); org.junit.Assert.assertNotNull(floatArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(floatArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[0.0, 10240.0, 0.0, 0.0, 32.0, 1.0]"); org.junit.Assert.assertNotNull(floatArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray47), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false); org.junit.Assert.assertNotNull(floatArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); org.junit.Assert.assertNotNull(floatArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray67), "[0.0, 10240.0, 0.0, 0.0, 32.0, 1.0]"); org.junit.Assert.assertNotNull(floatArray74); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray74), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray77), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertNotNull(floatArray86); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray86), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray89); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray89), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); }
public void test1502() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1502"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); double double10 = complex8.getReal(); org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex8); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex13 = complex11.negate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.8414709848078965d + "'", double10 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test1503() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1503"); double double1 = org.apache.commons.math.util.FastMath.asin((-0.9893670168342196d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.424838249476108d) + "'", double1 == (-1.424838249476108d)); }
public void test1504() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1504"); double double1 = org.apache.commons.math.util.FastMath.exp((double) (-817456299)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test1505() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1505"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complex5.add((double) (-680745036L)); org.apache.commons.math.complex.Complex complex8 = complex5.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.divide(31.819002910032918d); org.apache.commons.math.complex.Complex complex11 = complex8.conjugate(); java.lang.Class<?> wildcardClass12 = complex11.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(wildcardClass12); }
public void test1506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1506"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField3 = complex2.getField(); org.apache.commons.math.complex.Complex complex4 = complexField3.getOne(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complexField3); org.junit.Assert.assertNotNull(complex4); }
public void test1507() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1507"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(4.9E-324d, 6880.817293923487d); org.apache.commons.math.complex.Complex complex3 = complex2.acos(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); boolean boolean5 = complex4.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test1508() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1508"); double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(1691563969, 45); org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY); }
public void test1509() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1509"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(1.5761131209498562d); }
public void test1510() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1510"); float float2 = org.apache.commons.math.util.FastMath.scalb((float) 1078034432, 9); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 5.5195363E11f + "'", float2 == 5.5195363E11f); }
public void test1511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1511"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0752640991388877d, (double) 96.00001f); }
public void test1512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1512"); double double1 = org.apache.commons.math.util.FastMath.atanh(1205.0359960014666d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1513() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1513"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 1475346432); }
public void test1514() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1514"); double[] doubleArray0 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray2 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray0, 101); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test1515() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1515"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex3 = complex0.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex6 = complex3.subtract(complex5); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test1516() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1516"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex19.sinh(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex20.pow(complex22); org.apache.commons.math.complex.Complex complex26 = complex22.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.sin(); double double30 = complex29.getArgument(); org.apache.commons.math.complex.Complex complex31 = complex26.multiply(complex29); org.apache.commons.math.complex.Complex complex32 = complex31.tanh(); org.apache.commons.math.complex.Complex complex33 = complex17.add(complex31); org.apache.commons.math.complex.Complex complex34 = complex14.divide(complex33); org.apache.commons.math.complex.Complex complex35 = complex33.acos(); org.apache.commons.math.complex.Complex complex36 = complex35.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); }
public void test1517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1517"); double double2 = org.apache.commons.math.util.FastMath.copySign((-1.7581226324091723d), (double) 5L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.7581226324091723d + "'", double2 == 1.7581226324091723d); }
public void test1518() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1518"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complex5.add((double) (-680745036L)); org.apache.commons.math.complex.Complex complex8 = complex5.tanh(); org.apache.commons.math.complex.Complex complex10 = complex8.divide(31.819002910032918d); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField11 = complex10.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complexField11); }
public void test1519() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1519"); double double2 = org.apache.commons.math.util.FastMath.min((double) 6.0344988E12f, 115.70796326794897d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 115.70796326794897d + "'", double2 == 115.70796326794897d); }
public void test1520() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1520"); long long2 = org.apache.commons.math.util.MathUtils.pow(1078034432L, 1595543182); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test1521() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1521"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-3.141592653589793d), (double) (byte) 1); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField3 = complex2.getField(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex2); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); org.apache.commons.math.complex.Complex complex10 = complex8.exp(); org.apache.commons.math.complex.Complex complex11 = complex6.multiply(complex8); org.apache.commons.math.complex.Complex complex12 = complex2.pow(complex6); org.apache.commons.math.complex.ComplexField complexField13 = complex6.getField(); org.apache.commons.math.complex.Complex complex14 = complexField13.getOne(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complexField3); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complexField13); org.junit.Assert.assertNotNull(complex14); }
public void test1522() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1522"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(1.530112122701651d, (-0.9412825242280061d)); org.junit.Assert.assertNotNull(complex2); }
public void test1523() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1523"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow((double) 20); org.apache.commons.math.complex.Complex complex11 = complex7.exp(); org.apache.commons.math.complex.Complex complex12 = complex0.subtract(complex7); boolean boolean13 = complex7.isNaN(); double double14 = complex7.getReal(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex18 = complex15.pow((double) 20); org.apache.commons.math.complex.Complex complex19 = complex15.tanh(); org.apache.commons.math.complex.Complex complex21 = complex15.add(0.0d); org.apache.commons.math.complex.Complex complex22 = complex7.multiply(complex15); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test1524() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1524"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sin(); double double4 = complex3.getImaginary(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex3); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex6); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex9.sinh(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = complex10.pow(complex12); org.apache.commons.math.complex.Complex complex16 = complex12.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex17 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex18 = complex17.sinh(); org.apache.commons.math.complex.ComplexField complexField19 = complex18.getField(); org.apache.commons.math.complex.Complex complex20 = complexField19.getOne(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complexField19); org.junit.Assert.assertNotNull(complex20); }
public void test1525() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1525"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable4 = null; double[] doubleArray8 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray10 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection11 = null; double[] doubleArray14 = new double[] { 0.0f, 0.0f }; double[] doubleArray17 = new double[] { 0.0f, 0.0f }; double[] doubleArray20 = new double[] { 0.0f, 0.0f }; double[] doubleArray23 = new double[] { 0.0f, 0.0f }; double[] doubleArray26 = new double[] { 0.0f, 0.0f }; double[][] doubleArray27 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23, doubleArray26 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray10, orderDirection11, doubleArray27); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable4, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException30 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) (-1.0f), (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.NullArgumentException nullArgumentException31 = new org.apache.commons.math.exception.NullArgumentException(localizable1, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException32 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray27); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray27); }
public void test1526() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1526"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField9 = complex8.getField(); org.apache.commons.math.complex.Complex complex10 = complexField9.getZero(); java.lang.Class<?> wildcardClass11 = complexField9.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complexField9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(wildcardClass11); }
public void test1527() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1527"); double double1 = org.apache.commons.math.util.MathUtils.indicator(4.950000000000001d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test1528() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1528"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException3 = new org.apache.commons.math.exception.DimensionMismatchException(localizable0, (-1274102657), (-1077739520)); }
public void test1529() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1529"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((-0.9412825242280061d)); org.junit.Assert.assertNotNull(complex1); }
public void test1530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1530"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); double double18 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex15.tanh(); org.apache.commons.math.complex.Complex complex20 = complex15.sin(); org.apache.commons.math.complex.Complex complex21 = complex15.log(); double double22 = complex15.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2.356194490192345d) + "'", double18 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.8414709848078965d) + "'", double22 == (-0.8414709848078965d)); }
public void test1531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1531"); double double1 = org.apache.commons.math.util.MathUtils.cosh((double) (-969464673)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY); }
public void test1532() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1532"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); double double18 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex15.tanh(); org.apache.commons.math.complex.Complex complex20 = complex15.sin(); org.apache.commons.math.complex.Complex complex21 = complex15.log(); org.apache.commons.math.complex.Complex complex23 = complex15.add((-0.9412825644754301d)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2.356194490192345d) + "'", double18 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); }
public void test1533() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1533"); // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.math.util.MathUtils.pow(1595543214, (long) (-680745026)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: exponent (-680,745,026)"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test1534() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1534"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex7.sinh(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex8.pow(complex10); org.apache.commons.math.complex.Complex complex12 = complex1.add(complex8); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex8); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test1535() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1535"); double double1 = org.apache.commons.math.util.FastMath.cbrt(0.9173172759781081d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.9716425480818884d + "'", double1 == 0.9716425480818884d); }
public void test1536() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1536"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex5.pow(complex9); boolean boolean11 = complex9.isInfinite(); org.apache.commons.math.complex.Complex complex12 = complex3.pow(complex9); double double13 = complex12.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); }
public void test1537() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1537"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (-49)); java.lang.Number number2 = notPositiveException1.getMin(); java.lang.Number number3 = notPositiveException1.getArgument(); boolean boolean4 = notPositiveException1.getBoundIsAllowed(); org.junit.Assert.assertEquals("'" + number2 + "' != '" + 0 + "'", number2, 0); org.junit.Assert.assertEquals("'" + number3 + "' != '" + (-49) + "'", number3, (-49)); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); }
public void test1538() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1538"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-0.9999999999999998d), 100.00499987500625d); org.apache.commons.math.complex.ComplexField complexField3 = complex2.getField(); org.apache.commons.math.complex.Complex complex5 = complex2.subtract(0.0d); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.sin(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex9.sinh(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = complex10.pow(complex12); org.apache.commons.math.complex.Complex complex16 = complex12.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex17 = complex16.negate(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.sin(); double double20 = complex19.getArgument(); org.apache.commons.math.complex.Complex complex21 = complex16.multiply(complex19); org.apache.commons.math.complex.Complex complex22 = complex21.tanh(); boolean boolean23 = complex6.equals((java.lang.Object) complex21); org.apache.commons.math.complex.Complex complex24 = complex21.tan(); org.apache.commons.math.complex.Complex complex26 = complex21.pow(1.073741871E9d); org.apache.commons.math.complex.Complex complex27 = complex5.subtract(complex21); org.apache.commons.math.complex.Complex complex29 = new org.apache.commons.math.complex.Complex(0.5496225549463801d); org.apache.commons.math.complex.Complex complex30 = complex27.divide(complex29); org.junit.Assert.assertNotNull(complexField3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex30); }
public void test1539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1539"); long long1 = org.apache.commons.math.util.MathUtils.indicator(702L); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L); }
public void test1540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1540"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex3 = complex0.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); java.util.List<org.apache.commons.math.complex.Complex> complexList6 = complex3.nthRoot((int) (byte) 10); org.apache.commons.math.complex.Complex complex7 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex8 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex9 = complex7.subtract(complex8); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complexList6); org.junit.Assert.assertNotNull(complex7); }
public void test1541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1541"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex15.sqrt(); org.apache.commons.math.complex.Complex complex69 = complex68.tanh(); boolean boolean70 = complex68.isNaN(); org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.valueOf((double) 'a'); org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex74 = complex73.negate(); org.apache.commons.math.complex.Complex complex76 = complex73.pow((double) 20); org.apache.commons.math.complex.Complex complex77 = complex72.multiply(complex73); org.apache.commons.math.complex.Complex complex78 = complex77.log(); org.apache.commons.math.complex.Complex complex79 = complex68.divide(complex78); org.apache.commons.math.complex.Complex complex82 = new org.apache.commons.math.complex.Complex(3.5835190444199174d, 1.8609630616130385E15d); org.apache.commons.math.complex.Complex complex83 = complex78.divide(complex82); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex83); }
public void test1542() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1542"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; java.lang.Object[] objArray5 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException6 = new org.apache.commons.math.exception.MathArithmeticException(localizable3, objArray5); org.apache.commons.math.exception.NullArgumentException nullArgumentException7 = new org.apache.commons.math.exception.NullArgumentException(localizable2, objArray5); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException8 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable0, (java.lang.Number) 4.932424148660941d, objArray5); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) objArray5); org.junit.Assert.assertNotNull(objArray5); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[1.0]"); }
public void test1543() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1543"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex13.exp(); org.apache.commons.math.complex.Complex complex15 = complex13.acos(); java.lang.String str16 = complex13.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(-0.8414709848078965, -0.8414709848078965)" + "'", str16, "(-0.8414709848078965, -0.8414709848078965)"); }
public void test1544() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1544"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complex5.add((double) (-680745036L)); org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z(); org.apache.commons.math.complex.Complex complex9 = complex8.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); }
public void test1545() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1545"); int int3 = org.apache.commons.math.util.MathUtils.compareTo((-1.5707963262806226d), 1.411639114625758E14d, (double) (-9.2233715E18f)); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test1546() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1546"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(Double.POSITIVE_INFINITY); org.apache.commons.math.complex.Complex complex2 = complex1.exp(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test1547() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1547"); double double1 = org.apache.commons.math.util.FastMath.asin(1752.9649067029816d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1548() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1548"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex0.sinh(); java.lang.Object obj18 = complex17.readResolve(); org.apache.commons.math.complex.Complex complex20 = complex17.pow(4.312315229512479d); boolean boolean22 = complex17.equals((java.lang.Object) 12.566370614359172d); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf((-3.141592653589793d), (double) (byte) 1); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField26 = complex25.getField(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex25); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex31 = complex30.sin(); double double32 = complex31.getImaginary(); org.apache.commons.math.complex.Complex complex33 = complex31.exp(); org.apache.commons.math.complex.Complex complex34 = complex29.multiply(complex31); org.apache.commons.math.complex.Complex complex35 = complex25.pow(complex29); java.lang.Object obj36 = complex29.readResolve(); org.apache.commons.math.complex.Complex complex37 = complex17.divide(complex29); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(obj18); org.junit.Assert.assertEquals(obj18.toString(), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complexField26); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(obj36); org.junit.Assert.assertEquals(obj36.toString(), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertNotNull(complex37); }
public void test1549() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1549"); double double1 = org.apache.commons.math.util.MathUtils.cosh(0.004921566601151844d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0000121109333504d + "'", double1 == 1.0000121109333504d); }
public void test1550() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1550"); double double1 = org.apache.commons.math.util.MathUtils.sinh(1.0780344320000002E9d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY); }
public void test1551() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1551"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex4.tan(); org.apache.commons.math.complex.Complex complex8 = complex4.pow(0.0d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); }
public void test1552() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1552"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException4 = new org.apache.commons.math.exception.NumberIsTooLargeException(localizable0, (java.lang.Number) 6.80745026E8d, (java.lang.Number) 1.6475223632841045d, false); }
public void test1553() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1553"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex19.sinh(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex20.pow(complex22); org.apache.commons.math.complex.Complex complex26 = complex22.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.sin(); double double30 = complex29.getArgument(); org.apache.commons.math.complex.Complex complex31 = complex26.multiply(complex29); org.apache.commons.math.complex.Complex complex32 = complex31.tanh(); org.apache.commons.math.complex.Complex complex33 = complex17.add(complex31); org.apache.commons.math.complex.Complex complex34 = complex14.divide(complex33); org.apache.commons.math.complex.Complex complex35 = complex14.log(); org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex37 = complex36.sin(); org.apache.commons.math.complex.Complex complex38 = complex36.sinh(); org.apache.commons.math.complex.Complex complex39 = complex14.subtract(complex38); org.apache.commons.math.complex.Complex complex40 = complex39.exp(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); }
public void test1554() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1554"); double[] doubleArray0 = null; double[] doubleArray1 = null; double[] doubleArray5 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, (int) (short) 0); boolean boolean8 = org.apache.commons.math.util.MathUtils.equals(doubleArray1, doubleArray5); double[] doubleArray9 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5); double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); double[] doubleArray18 = new double[] { (-1), (byte) 100 }; double double19 = org.apache.commons.math.util.MathUtils.distance1(doubleArray15, doubleArray18); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray18, 100); boolean boolean22 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray21); double[] doubleArray26 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray28 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray26, (int) (short) 0); double[] doubleArray30 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray28, 0); boolean boolean31 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray30); double[] doubleArray35 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray37 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray35, (int) (short) 0); double double38 = org.apache.commons.math.util.MathUtils.distance(doubleArray30, doubleArray35); double double39 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray30); double[] doubleArray40 = null; double[] doubleArray44 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray46 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray44, (int) (short) 0); boolean boolean47 = org.apache.commons.math.util.MathUtils.equals(doubleArray40, doubleArray44); double[] doubleArray48 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray44); double[] doubleArray52 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray54 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray52, (int) (short) 0); double[] doubleArray57 = new double[] { (-1), (byte) 100 }; double double58 = org.apache.commons.math.util.MathUtils.distance1(doubleArray54, doubleArray57); boolean boolean59 = org.apache.commons.math.util.MathUtils.equals(doubleArray48, doubleArray54); double[] doubleArray60 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray48); double double61 = org.apache.commons.math.util.MathUtils.distance1(doubleArray30, doubleArray60); double[] doubleArray62 = null; double[] doubleArray66 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray68 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray66, (int) (short) 0); boolean boolean69 = org.apache.commons.math.util.MathUtils.equals(doubleArray62, doubleArray66); double[] doubleArray70 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray66); double[] doubleArray72 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray66, 26091.090931580457d); boolean boolean73 = org.apache.commons.math.util.MathUtils.equals(doubleArray30, doubleArray72); boolean boolean74 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray0, doubleArray30); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]"); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]"); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(doubleArray66); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray68); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[]"); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertNotNull(doubleArray70); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[26623.5621750821, -266.235621750821, -266.235621750821]"); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); }
public void test1555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1555"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField3 = complex1.getField(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.sqrt(); org.apache.commons.math.complex.Complex complex6 = complex4.log(); org.apache.commons.math.complex.Complex complex7 = complex1.add(complex4); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex11 = complex8.pow((double) 20); org.apache.commons.math.complex.Complex complex12 = complex8.exp(); org.apache.commons.math.complex.Complex complex13 = complex1.subtract(complex8); boolean boolean14 = complex8.isNaN(); double double15 = complex8.getReal(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf(6880.817293923487d, 4.795790545596741d); org.apache.commons.math.complex.Complex complex19 = complex8.multiply(complex18); org.apache.commons.math.complex.Complex complex20 = complex0.divide(complex19); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex24 = complex22.divide((double) 1079574528); org.apache.commons.math.complex.Complex complex25 = complex0.add(complex22); java.lang.String str26 = complex22.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complexField3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(1.401298464324817E-45, 0.0)" + "'", str26, "(1.401298464324817E-45, 0.0)"); }
public void test1556() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1556"); long long2 = org.apache.commons.math.util.MathUtils.binomialCoefficient(1219337025, 0); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L); }
public void test1557() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1557"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); org.apache.commons.math.complex.Complex complex4 = complex0.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.cos(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex9 = complex6.pow((double) 20); org.apache.commons.math.complex.Complex complex10 = complex6.tanh(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); double double12 = complex11.getReal(); java.lang.Object obj13 = complex11.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.5800256583859741d + "'", double12 == 0.5800256583859741d); org.junit.Assert.assertNotNull(obj13); org.junit.Assert.assertEquals(obj13.toString(), "(0.5800256583859741, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "(0.5800256583859741, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "(0.5800256583859741, 0.0)"); }
public void test1558() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1558"); float float1 = org.apache.commons.math.util.FastMath.signum(60.999996f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test1559() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1559"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.cosh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); }
public void test1560() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1560"); double double2 = org.apache.commons.math.util.FastMath.pow((double) (-1.04221274E9f), 27.289917197127753d); org.junit.Assert.assertTrue(Double.isNaN(double2)); }
public void test1561() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1561"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sin(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex5.pow(complex9); boolean boolean12 = complex10.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex13 = complex3.divide(complex10); org.apache.commons.math.complex.Complex complex14 = complex3.sinh(); org.apache.commons.math.complex.Complex complex15 = complex3.atan(); org.apache.commons.math.complex.Complex complex16 = complex15.sqrt1z(); double double17 = complex16.getReal(); double double18 = complex16.getImaginary(); double double19 = complex16.getReal(); org.apache.commons.math.exception.util.Localizable localizable20 = null; org.apache.commons.math.exception.util.Localizable localizable21 = null; org.apache.commons.math.exception.util.Localizable localizable23 = null; double[] doubleArray27 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray29 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray27, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection30 = null; double[] doubleArray33 = new double[] { 0.0f, 0.0f }; double[] doubleArray36 = new double[] { 0.0f, 0.0f }; double[] doubleArray39 = new double[] { 0.0f, 0.0f }; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[][] doubleArray46 = new double[][] { doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray29, orderDirection30, doubleArray46); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable23, (java.lang.Object[]) doubleArray46); org.apache.commons.math.exception.NullArgumentException nullArgumentException49 = new org.apache.commons.math.exception.NullArgumentException(localizable21, (java.lang.Object[]) doubleArray46); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex16, localizable20, (java.lang.Object[]) doubleArray46); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException51 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable0, (java.lang.Number) 963415027, (java.lang.Object[]) doubleArray46); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.7146114112494588d + "'", double17 == 0.7146114112494588d); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 5.4338975249603854E-17d + "'", double18 == 5.4338975249603854E-17d); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.7146114112494588d + "'", double19 == 0.7146114112494588d); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray46); }
public void test1562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1562"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (-1.008102374268694d)); }
public void test1563() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1563"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex13.conjugate(); org.apache.commons.math.complex.Complex complex15 = complex14.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField16 = complex15.getField(); org.apache.commons.math.complex.Complex complex17 = complexField16.getOne(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complexField16); org.junit.Assert.assertNotNull(complex17); }
public void test1564() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1564"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sin(); double double4 = complex3.getImaginary(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex3); org.apache.commons.math.complex.Complex complex8 = complex3.subtract((double) (-22L)); org.apache.commons.math.complex.Complex complex9 = complex8.sin(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); }
public void test1565() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1565"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complex5.add((double) (-680745036L)); org.apache.commons.math.complex.Complex complex8 = complex7.sinh(); org.apache.commons.math.complex.Complex complex9 = complex7.sinh(); double double10 = complex7.getArgument(); org.apache.commons.math.complex.Complex complex11 = complex7.sqrt(); boolean boolean12 = complex11.isNaN(); org.apache.commons.math.complex.Complex complex13 = complex11.tan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 3.141592653589793d + "'", double10 == 3.141592653589793d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(complex13); }
public void test1566() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1566"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException3 = new org.apache.commons.math.exception.DimensionMismatchException(localizable0, 52, (int) (short) 0); java.lang.Throwable throwable4 = dimensionMismatchException3.getException(); java.lang.Throwable[] throwableArray5 = dimensionMismatchException3.getSuppressed(); org.junit.Assert.assertNotNull(throwable4); org.junit.Assert.assertNotNull(throwableArray5); }
public void test1567() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1567"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(314.0184740351108d, 0.0d); }
public void test1568() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1568"); double double1 = org.apache.commons.math.util.FastMath.log10(0.022100829566607083d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.6555914245303571d) + "'", double1 == (-1.6555914245303571d)); }
public void test1569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1569"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test1570() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1570"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex11 = complex8.pow((double) 20); org.apache.commons.math.complex.Complex complex12 = complex11.sin(); org.apache.commons.math.complex.Complex complex13 = complex11.exp(); org.apache.commons.math.complex.Complex complex14 = complex7.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.divide(0.0d); org.apache.commons.math.complex.Complex complex17 = complex16.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); }
public void test1571() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1571"); double double1 = org.apache.commons.math.util.FastMath.tan((-0.5753317730799099d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.6485167014106271d) + "'", double1 == (-0.6485167014106271d)); }
public void test1572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1572"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex5.pow(complex9); boolean boolean11 = complex9.isInfinite(); org.apache.commons.math.complex.Complex complex12 = complex3.pow(complex9); double double13 = complex9.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-3.141592653589793d) + "'", double13 == (-3.141592653589793d)); }
public void test1573() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1573"); double double1 = org.apache.commons.math.util.FastMath.log1p((-6.807450129999999E8d)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1574() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1574"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(3.268740393997734E7d); org.junit.Assert.assertNotNull(complex1); }
public void test1575() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1575"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable4 = null; double[] doubleArray8 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray10 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection11 = null; double[] doubleArray14 = new double[] { 0.0f, 0.0f }; double[] doubleArray17 = new double[] { 0.0f, 0.0f }; double[] doubleArray20 = new double[] { 0.0f, 0.0f }; double[] doubleArray23 = new double[] { 0.0f, 0.0f }; double[] doubleArray26 = new double[] { 0.0f, 0.0f }; double[][] doubleArray27 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23, doubleArray26 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray10, orderDirection11, doubleArray27); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable4, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException30 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable1, (java.lang.Number) 10240.0f, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException31 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.util.ExceptionContext exceptionContext32 = mathArithmeticException31.getContext(); java.lang.Throwable throwable33 = mathArithmeticException31.getException(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext34 = mathArithmeticException31.getContext(); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertNotNull(exceptionContext32); org.junit.Assert.assertNotNull(throwable33); org.junit.Assert.assertNotNull(exceptionContext34); }
public void test1576() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1576"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = complex1.tanh(); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex6.sinh(); org.apache.commons.math.complex.Complex complex8 = complex7.atan(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex3.subtract(complex7); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test1577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1577"); float float2 = org.apache.commons.math.util.FastMath.min((float) 680745192, 0.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test1578() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1578"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply(1.410065408E11d); org.apache.commons.math.complex.Complex complex7 = complex3.log(); org.apache.commons.math.complex.Complex complex8 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex9 = complex3.pow(complex8); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test1579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1579"); int int1 = org.apache.commons.math.util.MathUtils.hash(7.699647460482345E44d); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-876899257) + "'", int1 == (-876899257)); }
public void test1580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1580"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); org.apache.commons.math.complex.Complex complex4 = complex3.sin(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); boolean boolean7 = complex5.equals((java.lang.Object) 1); org.apache.commons.math.complex.Complex complex9 = complex5.subtract(Double.NEGATIVE_INFINITY); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(complex9); }
public void test1581() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1581"); double double8 = org.apache.commons.math.util.MathUtils.linearCombination(69.35408138262233d, 52.05640491875589d, (double) 1.78670666E12f, (-66.01993676325971d), 135.00000000000003d, (-0.7177230234682443d), 1.4753464320000136E9d, Double.NaN); org.junit.Assert.assertTrue(Double.isNaN(double8)); }
public void test1582() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1582"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 0L); org.apache.commons.math.complex.Complex complex3 = complex1.subtract((double) (-5737967348795625471L)); org.apache.commons.math.complex.Complex complex4 = complex1.conjugate(); org.apache.commons.math.complex.Complex complex5 = complex1.exp(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test1583() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1583"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex20 = complex18.subtract((double) (byte) 10); org.apache.commons.math.complex.Complex complex21 = complex16.multiply(complex20); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I; boolean boolean23 = complex16.equals((java.lang.Object) complex22); org.apache.commons.math.complex.Complex complex24 = complex22.log(); org.apache.commons.math.complex.Complex complex25 = complex15.add(complex24); org.apache.commons.math.complex.Complex complex26 = complex0.subtract(complex15); org.apache.commons.math.complex.Complex complex28 = complex26.subtract(0.0d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); }
public void test1584() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1584"); // The following exception was thrown during execution in test generation try { double double3 = org.apache.commons.math.util.MathUtils.round(4.950000000000001d, 1246823687, (-680745023)); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test1585() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1585"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; double double1 = complex0.getImaginary(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test1586() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1586"); long long2 = org.apache.commons.math.util.MathUtils.subAndCheck(15100L, 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 15100L + "'", long2 == 15100L); }
public void test1587() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1587"); int int2 = org.apache.commons.math.util.MathUtils.subAndCheck(152, 1475306912); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1475306760) + "'", int2 == (-1475306760)); }
public void test1588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1588"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex12.subtract(66.97680939587865d); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex18 = complex16.divide((double) 1079574528); java.lang.String str19 = complex18.toString(); org.apache.commons.math.complex.Complex complex20 = complex14.divide(complex18); org.apache.commons.math.complex.Complex complex21 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex22 = complex14.divide(complex21); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(1.2980099363041076E-54, 0.0)" + "'", str19, "(1.2980099363041076E-54, 0.0)"); org.junit.Assert.assertNotNull(complex20); }
public void test1589() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1589"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0406729815760345d, 1.5430806348152437d); org.apache.commons.math.complex.Complex complex3 = complex2.sin(); org.junit.Assert.assertNotNull(complex3); }
public void test1590() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1590"); long long2 = org.apache.commons.math.util.MathUtils.pow(11881242L, 11881242L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test1591() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1591"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); double double5 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.tan(); org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex(35.159870523697315d, 1.401298464324817E-45d); org.apache.commons.math.complex.Complex complex10 = complex3.multiply(complex9); org.apache.commons.math.complex.Complex complex12 = complex9.pow(0.0d); org.apache.commons.math.complex.Complex complex14 = complex12.pow(0.0d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.14168768474935d + "'", double5 == 2.14168768474935d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); }
public void test1592() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1592"); float float2 = org.apache.commons.math.util.FastMath.copySign((float) (-52L), 1.07803443E9f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 52.0f + "'", float2 == 52.0f); }
public void test1593() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1593"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 6.591783E31f); org.apache.commons.math.complex.Complex complex2 = complex1.asin(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.sqrt(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex7 = complex6.exp(); org.apache.commons.math.complex.Complex complex8 = complex7.asin(); org.apache.commons.math.complex.Complex complex9 = complex7.log(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = complex12.sinh(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex13.pow(complex15); org.apache.commons.math.complex.Complex complex19 = complex15.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex20 = complex19.negate(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.sin(); double double23 = complex22.getArgument(); org.apache.commons.math.complex.Complex complex24 = complex19.multiply(complex22); org.apache.commons.math.complex.Complex complex25 = complex22.sin(); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex27 = complex25.add(complex26); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex30 = complex29.negate(); org.apache.commons.math.complex.Complex complex31 = complex30.sinh(); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex33 = complex32.negate(); org.apache.commons.math.complex.Complex complex34 = complex31.pow(complex33); org.apache.commons.math.complex.Complex complex37 = complex33.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex38 = complex37.negate(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex40 = complex39.sin(); double double41 = complex40.getArgument(); org.apache.commons.math.complex.Complex complex42 = complex37.multiply(complex40); org.apache.commons.math.complex.Complex complex43 = complex42.tanh(); org.apache.commons.math.complex.Complex complex44 = complex28.add(complex42); org.apache.commons.math.complex.Complex complex45 = complex25.divide(complex44); org.apache.commons.math.complex.Complex complex46 = complex44.acos(); org.apache.commons.math.complex.Complex complex47 = complex10.multiply(complex44); org.apache.commons.math.complex.Complex complex48 = complex10.negate(); org.apache.commons.math.complex.Complex complex49 = complex3.subtract(complex48); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); }
public void test1594() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1594"); double double2 = org.apache.commons.math.util.FastMath.max(1182.9318774044227d, (-7375842.384752037d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1182.9318774044227d + "'", double2 == 1182.9318774044227d); }
public void test1595() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1595"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex3 = complex2.conjugate(); org.apache.commons.math.complex.Complex complex4 = complex3.acos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test1596() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1596"); float float2 = org.apache.commons.math.util.MathUtils.round((float) 1475346432, 1246823687); org.junit.Assert.assertTrue(Float.isNaN(float2)); }
public void test1597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1597"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex3 = complex2.atan(); org.apache.commons.math.complex.Complex complex5 = complex2.multiply((-1.226409130967562d)); double double6 = complex2.getImaginary(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test1598() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1598"); double double1 = org.apache.commons.math.util.FastMath.atan((-2521.014298575622d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.5703996610766113d) + "'", double1 == (-1.5703996610766113d)); }
public void test1599() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1599"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex15.sqrt(); org.apache.commons.math.complex.Complex complex69 = complex15.tanh(); org.apache.commons.math.complex.ComplexField complexField70 = complex15.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complexField70); }
public void test1600() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1600"); int int1 = org.apache.commons.math.util.MathUtils.sign((int) (short) 100); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test1601() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1601"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex0); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); }
public void test1602() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1602"); double double1 = org.apache.commons.math.util.FastMath.asin((double) 528005166L); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1603() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1603"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(0.10429267740956091d); org.junit.Assert.assertNotNull(complex1); }
public void test1604() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1604"); org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException2 = new org.apache.commons.math.exception.DimensionMismatchException(101, 0); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf(6.80745024E8d); org.apache.commons.math.exception.util.Localizable localizable5 = null; java.lang.Number number7 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException9 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable5, (java.lang.Number) (-100L), number7, false); java.lang.Throwable throwable10 = numberIsTooSmallException9.getException(); boolean boolean11 = complex4.equals((java.lang.Object) throwable10); dimensionMismatchException2.addSuppressed(throwable10); java.lang.String str13 = dimensionMismatchException2.toString(); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(throwable10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math.exception.DimensionMismatchException: 101 != 0" + "'", str13, "org.apache.commons.math.exception.DimensionMismatchException: 101 != 0"); }
public void test1605() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1605"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex5.sqrt(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex8.sinh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex9.pow(complex11); org.apache.commons.math.complex.Complex complex15 = complex11.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sin(); double double19 = complex18.getArgument(); org.apache.commons.math.complex.Complex complex20 = complex15.multiply(complex18); org.apache.commons.math.complex.Complex complex21 = complex18.sin(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex23 = complex21.add(complex22); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex26 = complex25.negate(); org.apache.commons.math.complex.Complex complex27 = complex26.sinh(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.negate(); org.apache.commons.math.complex.Complex complex30 = complex27.pow(complex29); org.apache.commons.math.complex.Complex complex33 = complex29.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex34 = complex33.negate(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex36 = complex35.sin(); double double37 = complex36.getArgument(); org.apache.commons.math.complex.Complex complex38 = complex33.multiply(complex36); org.apache.commons.math.complex.Complex complex39 = complex38.tanh(); org.apache.commons.math.complex.Complex complex40 = complex24.add(complex38); org.apache.commons.math.complex.Complex complex41 = complex21.divide(complex40); org.apache.commons.math.complex.Complex complex42 = complex40.acos(); org.apache.commons.math.complex.Complex complex43 = complex6.multiply(complex40); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex45 = complex44.sqrt(); org.apache.commons.math.complex.Complex complex46 = complex44.tanh(); org.apache.commons.math.complex.Complex complex47 = complex46.exp(); org.apache.commons.math.complex.Complex complex48 = complex47.asin(); org.apache.commons.math.complex.Complex complex49 = complex47.log(); org.apache.commons.math.complex.Complex complex50 = complex49.sqrt(); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex52 = complex51.negate(); org.apache.commons.math.complex.Complex complex53 = complex52.sinh(); org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex55 = complex54.negate(); org.apache.commons.math.complex.Complex complex56 = complex53.pow(complex55); org.apache.commons.math.complex.Complex complex59 = complex55.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex60 = complex59.negate(); org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex62 = complex61.sin(); double double63 = complex62.getArgument(); org.apache.commons.math.complex.Complex complex64 = complex59.multiply(complex62); org.apache.commons.math.complex.Complex complex65 = complex62.sin(); org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex67 = complex65.add(complex66); org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex70 = complex69.negate(); org.apache.commons.math.complex.Complex complex71 = complex70.sinh(); org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex73 = complex72.negate(); org.apache.commons.math.complex.Complex complex74 = complex71.pow(complex73); org.apache.commons.math.complex.Complex complex77 = complex73.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex78 = complex77.negate(); org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex80 = complex79.sin(); double double81 = complex80.getArgument(); org.apache.commons.math.complex.Complex complex82 = complex77.multiply(complex80); org.apache.commons.math.complex.Complex complex83 = complex82.tanh(); org.apache.commons.math.complex.Complex complex84 = complex68.add(complex82); org.apache.commons.math.complex.Complex complex85 = complex65.divide(complex84); org.apache.commons.math.complex.Complex complex86 = complex84.acos(); org.apache.commons.math.complex.Complex complex87 = complex50.multiply(complex84); org.apache.commons.math.complex.Complex complex88 = complex50.asin(); org.apache.commons.math.complex.Complex complex89 = complex43.multiply(complex88); org.apache.commons.math.complex.Complex complex90 = complex88.log(); org.apache.commons.math.complex.Complex complex92 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex94 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex95 = complex92.subtract(complex94); org.apache.commons.math.complex.Complex complex96 = complex88.multiply(complex95); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex80); org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertNotNull(complex84); org.junit.Assert.assertNotNull(complex85); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex89); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertNotNull(complex92); org.junit.Assert.assertNotNull(complex94); org.junit.Assert.assertNotNull(complex95); org.junit.Assert.assertNotNull(complex96); }
public void test1606() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1606"); double double4 = org.apache.commons.math.util.MathUtils.linearCombination((-1.08346095703372595E18d), 0.7575041613250926d, 73.26596177457596d, 142.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-8.2072618358630438E17d) + "'", double4 == (-8.2072618358630438E17d)); }
public void test1607() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1607"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) (-1475346380L)); }
public void test1608() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1608"); float float1 = org.apache.commons.math.util.MathUtils.sign(3628800.0f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test1609() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1609"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex3 = complex1.divide((double) 1079574528); org.apache.commons.math.complex.Complex complex5 = complex1.pow(0.0d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); }
public void test1610() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1610"); // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.math.util.MathUtils.pow(680745237, (-3850565377750111653L)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: exponent (-3,850,565,377,750,111,653)"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test1611() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1611"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 4L); double double2 = complex1.abs(); org.apache.commons.math.exception.NotPositiveException notPositiveException4 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (-49)); java.lang.Number number5 = notPositiveException4.getMin(); boolean boolean6 = complex1.equals((java.lang.Object) number5); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 4.0d + "'", double2 == 4.0d); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 0 + "'", number5, 0); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test1612() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1612"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex3 = complex2.atan(); org.apache.commons.math.complex.Complex complex5 = complex2.multiply((-1.226409130967562d)); org.apache.commons.math.complex.Complex complex6 = complex5.atan(); double double7 = complex6.getArgument(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 3.141592653589793d + "'", double7 == 3.141592653589793d); }
public void test1613() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1613"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray12 = new int[] { (byte) 100, 10 }; int[] intArray18 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double19 = org.apache.commons.math.util.MathUtils.distance(intArray12, intArray18); double double20 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray18); int[] intArray21 = org.apache.commons.math.util.MathUtils.copyOf(intArray8); int[] intArray24 = new int[] { (byte) 100, 10 }; int[] intArray30 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double31 = org.apache.commons.math.util.MathUtils.distance(intArray24, intArray30); int[] intArray34 = new int[] { (byte) 100, 10 }; int[] intArray40 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double41 = org.apache.commons.math.util.MathUtils.distance(intArray34, intArray40); double double42 = org.apache.commons.math.util.MathUtils.distance(intArray30, intArray40); int[] intArray43 = org.apache.commons.math.util.MathUtils.copyOf(intArray30); double double44 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray43); int[] intArray45 = org.apache.commons.math.util.MathUtils.copyOf(intArray43); int[] intArray47 = org.apache.commons.math.util.MathUtils.copyOf(intArray45, 470); int[] intArray50 = new int[] { (byte) 100, 10 }; int[] intArray56 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double57 = org.apache.commons.math.util.MathUtils.distance(intArray50, intArray56); int[] intArray60 = new int[] { (byte) 100, 10 }; int[] intArray66 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double67 = org.apache.commons.math.util.MathUtils.distance(intArray60, intArray66); double double68 = org.apache.commons.math.util.MathUtils.distance(intArray56, intArray66); int[] intArray69 = org.apache.commons.math.util.MathUtils.copyOf(intArray56); int[] intArray72 = new int[] { (byte) 100, 10 }; int[] intArray78 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double79 = org.apache.commons.math.util.MathUtils.distance(intArray72, intArray78); int[] intArray82 = new int[] { (byte) 100, 10 }; int[] intArray88 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double89 = org.apache.commons.math.util.MathUtils.distance(intArray82, intArray88); double double90 = org.apache.commons.math.util.MathUtils.distance(intArray78, intArray88); int[] intArray91 = org.apache.commons.math.util.MathUtils.copyOf(intArray78); int int92 = org.apache.commons.math.util.MathUtils.distance1(intArray56, intArray78); int int93 = org.apache.commons.math.util.MathUtils.distance1(intArray45, intArray78); org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10]"); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 104.04806581575652d + "'", double19 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(intArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 10]"); org.junit.Assert.assertNotNull(intArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 104.04806581575652d + "'", double31 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[100, 10]"); org.junit.Assert.assertNotNull(intArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 104.04806581575652d + "'", double41 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(intArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertNotNull(intArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[100, 10]"); org.junit.Assert.assertNotNull(intArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 104.04806581575652d + "'", double57 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[100, 10]"); org.junit.Assert.assertNotNull(intArray66); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 104.04806581575652d + "'", double67 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertNotNull(intArray69); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[100, 10]"); org.junit.Assert.assertNotNull(intArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 104.04806581575652d + "'", double79 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[100, 10]"); org.junit.Assert.assertNotNull(intArray88); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 104.04806581575652d + "'", double89 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertNotNull(intArray91); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0); org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0); }
public void test1614() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1614"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 96.00001f, 0.6190337262278893d); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sin(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex6.sinh(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow(complex9); org.apache.commons.math.complex.Complex complex13 = complex9.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex14 = complex13.negate(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.sin(); double double17 = complex16.getArgument(); org.apache.commons.math.complex.Complex complex18 = complex13.multiply(complex16); org.apache.commons.math.complex.Complex complex19 = complex18.tanh(); boolean boolean20 = complex3.equals((java.lang.Object) complex18); org.apache.commons.math.exception.util.Localizable localizable21 = null; double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); double[] doubleArray30 = new double[] { (-1), (byte) 100 }; double double31 = org.apache.commons.math.util.MathUtils.distance1(doubleArray27, doubleArray30); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection32 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean35 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray30, orderDirection32, false, true); double[] doubleArray39 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray41 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray39, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection42 = null; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[] doubleArray57 = new double[] { 0.0f, 0.0f }; double[][] doubleArray58 = new double[][] { doubleArray45, doubleArray48, doubleArray51, doubleArray54, doubleArray57 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray41, orderDirection42, doubleArray58); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray30, doubleArray58); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException61 = new org.apache.commons.math.exception.MathArithmeticException(localizable21, (java.lang.Object[]) doubleArray58); boolean boolean62 = complex18.equals((java.lang.Object) mathArithmeticException61); org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex64 = complex63.negate(); org.apache.commons.math.complex.Complex complex66 = complex64.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex68 = complex67.negate(); org.apache.commons.math.complex.Complex complex69 = complex64.pow(complex68); org.apache.commons.math.complex.Complex complex70 = complex18.divide(complex68); org.apache.commons.math.complex.Complex complex71 = complex18.sqrt(); org.apache.commons.math.complex.Complex complex72 = complex18.tanh(); org.apache.commons.math.complex.Complex complex73 = complex2.add(complex18); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection32 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection32.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); }
public void test1615() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1615"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); java.util.List<org.apache.commons.math.complex.Complex> complexList8 = complex5.nthRoot(52); org.apache.commons.math.complex.Complex complex9 = complex5.sin(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex13 = complex10.pow((double) 20); java.lang.String str14 = complex13.toString(); double double15 = complex13.getReal(); org.apache.commons.math.complex.Complex complex16 = complex13.tan(); org.apache.commons.math.complex.Complex complex19 = complex13.createComplex((double) 35.000004f, 2.1513092806481256E16d); org.apache.commons.math.complex.Complex complex20 = complex19.asin(); org.apache.commons.math.complex.Complex complex21 = complex9.subtract(complex19); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex23 = complex22.negate(); org.apache.commons.math.complex.Complex complex24 = complex22.sqrt1z(); boolean boolean25 = complex22.isNaN(); org.apache.commons.math.complex.Complex complex27 = complex22.add((double) 6.591783E31f); org.apache.commons.math.complex.Complex complex28 = complex21.subtract(complex22); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex30 = complex29.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField31 = complex29.getField(); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex33 = complex32.sqrt(); org.apache.commons.math.complex.Complex complex34 = complex32.log(); org.apache.commons.math.complex.Complex complex35 = complex29.add(complex32); org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex37 = complex36.negate(); org.apache.commons.math.complex.Complex complex38 = complex37.sinh(); org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex40 = complex39.negate(); org.apache.commons.math.complex.Complex complex41 = complex38.pow(complex40); org.apache.commons.math.complex.Complex complex44 = complex40.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex45 = complex44.negate(); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex47 = complex46.sin(); double double48 = complex47.getArgument(); org.apache.commons.math.complex.Complex complex49 = complex44.multiply(complex47); org.apache.commons.math.complex.Complex complex50 = complex47.sin(); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex52 = complex50.add(complex51); org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex54 = complex53.sqrt(); org.apache.commons.math.complex.Complex complex55 = complex54.sin(); org.apache.commons.math.complex.Complex complex57 = complex55.pow((double) 1L); org.apache.commons.math.complex.Complex complex58 = complex52.pow(complex55); org.apache.commons.math.complex.Complex complex59 = complex32.divide(complex55); org.apache.commons.math.complex.Complex complex60 = complex21.add(complex59); org.apache.commons.math.complex.Complex complex62 = complex60.pow((-100.0d)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complexList8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(1.0, 0.0)" + "'", str14, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complexField31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex62); }
public void test1616() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1616"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray14); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8); double[] doubleArray21 = new double[] {}; double[] doubleArray22 = null; double[] doubleArray26 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray28 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray26, (int) (short) 0); boolean boolean29 = org.apache.commons.math.util.MathUtils.equals(doubleArray22, doubleArray26); double[] doubleArray30 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray26); double[] doubleArray34 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray36 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray34, (int) (short) 0); double[] doubleArray39 = new double[] { (-1), (byte) 100 }; double double40 = org.apache.commons.math.util.MathUtils.distance1(doubleArray36, doubleArray39); boolean boolean41 = org.apache.commons.math.util.MathUtils.equals(doubleArray30, doubleArray36); double[] doubleArray42 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray30); double[] doubleArray43 = null; boolean boolean44 = org.apache.commons.math.util.MathUtils.equals(doubleArray30, doubleArray43); double double45 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray21, doubleArray30); double[] doubleArray46 = null; double[] doubleArray50 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray52 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray50, (int) (short) 0); boolean boolean53 = org.apache.commons.math.util.MathUtils.equals(doubleArray46, doubleArray50); double[] doubleArray54 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray50); double[] doubleArray58 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray60 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray58, (int) (short) 0); double[] doubleArray63 = new double[] { (-1), (byte) 100 }; double double64 = org.apache.commons.math.util.MathUtils.distance1(doubleArray60, doubleArray63); double[] doubleArray66 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray63, 100); boolean boolean67 = org.apache.commons.math.util.MathUtils.equals(doubleArray54, doubleArray66); double[] doubleArray71 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray73 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray71, (int) (short) 0); double[] doubleArray75 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray73, 0); boolean boolean76 = org.apache.commons.math.util.MathUtils.equals(doubleArray54, doubleArray75); double double77 = org.apache.commons.math.util.MathUtils.distance(doubleArray30, doubleArray54); boolean boolean78 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray30); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray30); double[] doubleArray81 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray30, 2.6915523984292716E14d); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]"); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]"); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertNotNull(doubleArray66); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray73); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]"); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]"); org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false); org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.0d + "'", double77 == 0.0d); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true); org.junit.Assert.assertNotNull(doubleArray81); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[2.7464820392135425E14, -2.7464820392135425E12, -2.7464820392135425E12]"); }
public void test1617() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1617"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex7.sinh(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex8.pow(complex10); org.apache.commons.math.complex.Complex complex12 = complex1.add(complex8); org.apache.commons.math.complex.Complex complex13 = complex12.acos(); double double14 = complex13.getArgument(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex13); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue(Double.isNaN(double14)); }
public void test1618() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1618"); double[] doubleArray0 = new double[] {}; double[] doubleArray1 = null; double[] doubleArray5 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, (int) (short) 0); boolean boolean8 = org.apache.commons.math.util.MathUtils.equals(doubleArray1, doubleArray5); double[] doubleArray9 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5); double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); double[] doubleArray18 = new double[] { (-1), (byte) 100 }; double double19 = org.apache.commons.math.util.MathUtils.distance1(doubleArray15, doubleArray18); boolean boolean20 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray15); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray9); double[] doubleArray22 = null; boolean boolean23 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray22); double double24 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray0, doubleArray9); double[] doubleArray25 = null; double[] doubleArray29 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray31 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray29, (int) (short) 0); boolean boolean32 = org.apache.commons.math.util.MathUtils.equals(doubleArray25, doubleArray29); double[] doubleArray33 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray29); double[] doubleArray37 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray39 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray37, (int) (short) 0); double[] doubleArray42 = new double[] { (-1), (byte) 100 }; double double43 = org.apache.commons.math.util.MathUtils.distance1(doubleArray39, doubleArray42); double[] doubleArray45 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray42, 100); boolean boolean46 = org.apache.commons.math.util.MathUtils.equals(doubleArray33, doubleArray45); double[] doubleArray50 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray52 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray50, (int) (short) 0); double[] doubleArray54 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray52, 0); boolean boolean55 = org.apache.commons.math.util.MathUtils.equals(doubleArray33, doubleArray54); double[] doubleArray59 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray61 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray59, (int) (short) 0); double double62 = org.apache.commons.math.util.MathUtils.distance(doubleArray54, doubleArray59); double[] doubleArray63 = null; double[] doubleArray67 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray69 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray67, (int) (short) 0); boolean boolean70 = org.apache.commons.math.util.MathUtils.equals(doubleArray63, doubleArray67); double[] doubleArray71 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray67); double[] doubleArray72 = null; double[] doubleArray76 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray78 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray76, (int) (short) 0); boolean boolean79 = org.apache.commons.math.util.MathUtils.equals(doubleArray72, doubleArray76); double[] doubleArray80 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray76); double[] doubleArray84 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray86 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray84, (int) (short) 0); double[] doubleArray89 = new double[] { (-1), (byte) 100 }; double double90 = org.apache.commons.math.util.MathUtils.distance1(doubleArray86, doubleArray89); boolean boolean91 = org.apache.commons.math.util.MathUtils.equals(doubleArray80, doubleArray86); double[] doubleArray93 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray80, 101); double double94 = org.apache.commons.math.util.MathUtils.distance(doubleArray71, doubleArray93); boolean boolean95 = org.apache.commons.math.util.MathUtils.equals(doubleArray54, doubleArray93); double double96 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray93); double double97 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray9, doubleArray93); org.junit.Assert.assertNotNull(doubleArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]"); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]"); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray69); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]"); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[]"); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertNotNull(doubleArray80); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray84); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray86); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[]"); org.junit.Assert.assertNotNull(doubleArray89); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double90 + "' != '" + 0.0d + "'", double90 == 0.0d); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false); org.junit.Assert.assertNotNull(doubleArray93); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 0.0d + "'", double94 == 0.0d); org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false); org.junit.Assert.assertTrue("'" + double96 + "' != '" + 100.00999950005d + "'", double96 == 100.00999950005d); org.junit.Assert.assertTrue("'" + double97 + "' != '" + 0.0d + "'", double97 == 0.0d); }
public void test1619() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1619"); int[] intArray4 = new int[] { 52, 6, 'a', 680745024 }; int[] intArray7 = new int[] { (byte) 100, 10 }; int[] intArray13 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double14 = org.apache.commons.math.util.MathUtils.distance(intArray7, intArray13); int[] intArray16 = org.apache.commons.math.util.MathUtils.copyOf(intArray13, (int) (byte) 10); int int17 = org.apache.commons.math.util.MathUtils.distanceInf(intArray4, intArray16); int[] intArray18 = org.apache.commons.math.util.MathUtils.copyOf(intArray4); int[] intArray23 = new int[] { 52, 6, 'a', 680745024 }; int[] intArray26 = new int[] { (byte) 100, 10 }; int[] intArray32 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double33 = org.apache.commons.math.util.MathUtils.distance(intArray26, intArray32); int[] intArray35 = org.apache.commons.math.util.MathUtils.copyOf(intArray32, (int) (byte) 10); int int36 = org.apache.commons.math.util.MathUtils.distanceInf(intArray23, intArray35); int int37 = org.apache.commons.math.util.MathUtils.distanceInf(intArray18, intArray35); org.junit.Assert.assertNotNull(intArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 6, 97, 680745024]"); org.junit.Assert.assertNotNull(intArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100, 10]"); org.junit.Assert.assertNotNull(intArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 104.04806581575652d + "'", double14 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 680745023 + "'", int17 == 680745023); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[52, 6, 97, 680745024]"); org.junit.Assert.assertNotNull(intArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[52, 6, 97, 680745024]"); org.junit.Assert.assertNotNull(intArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[100, 10]"); org.junit.Assert.assertNotNull(intArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 104.04806581575652d + "'", double33 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int36 + "' != '" + 680745023 + "'", int36 == 680745023); org.junit.Assert.assertTrue("'" + int37 + "' != '" + 680745023 + "'", int37 == 680745023); }
public void test1620() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1620"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex4 = complex1.pow(35.0d); org.apache.commons.math.complex.Complex complex5 = complex4.tan(); org.apache.commons.math.complex.Complex complex6 = complex4.tan(); org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex(0.0d); org.apache.commons.math.complex.Complex complex9 = complex4.subtract(complex8); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf(101.00495037373169d); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField12 = complex11.getField(); org.apache.commons.math.complex.Complex complex13 = complexField12.getZero(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex16 = complex15.log(); org.apache.commons.math.complex.Complex complex18 = complex15.pow(35.0d); org.apache.commons.math.complex.Complex complex19 = complex18.tan(); org.apache.commons.math.complex.Complex complex20 = complex13.add(complex18); org.apache.commons.math.complex.Complex complex21 = complex4.multiply(complex18); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complexField12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); }
public void test1621() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1621"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 16.05130976411669d, (java.lang.Number) 95.99999999999999d, false); }
public void test1622() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1622"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply(1.410065408E11d); org.apache.commons.math.complex.Complex complex7 = complex3.log(); java.lang.String str8 = complex3.toString(); org.apache.commons.math.complex.Complex complex9 = complex3.exp(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex13.sinh(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex14.pow(complex16); org.apache.commons.math.complex.Complex complex20 = complex16.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex21 = complex20.negate(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex23 = complex22.sin(); double double24 = complex23.getArgument(); org.apache.commons.math.complex.Complex complex25 = complex20.multiply(complex23); org.apache.commons.math.complex.Complex complex26 = complex25.tanh(); boolean boolean27 = complex10.equals((java.lang.Object) complex25); org.apache.commons.math.exception.util.Localizable localizable28 = null; double[] doubleArray32 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray34 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray32, (int) (short) 0); double[] doubleArray37 = new double[] { (-1), (byte) 100 }; double double38 = org.apache.commons.math.util.MathUtils.distance1(doubleArray34, doubleArray37); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean42 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray37, orderDirection39, false, true); double[] doubleArray46 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray48 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray46, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection49 = null; double[] doubleArray52 = new double[] { 0.0f, 0.0f }; double[] doubleArray55 = new double[] { 0.0f, 0.0f }; double[] doubleArray58 = new double[] { 0.0f, 0.0f }; double[] doubleArray61 = new double[] { 0.0f, 0.0f }; double[] doubleArray64 = new double[] { 0.0f, 0.0f }; double[][] doubleArray65 = new double[][] { doubleArray52, doubleArray55, doubleArray58, doubleArray61, doubleArray64 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray48, orderDirection49, doubleArray65); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray37, doubleArray65); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException68 = new org.apache.commons.math.exception.MathArithmeticException(localizable28, (java.lang.Object[]) doubleArray65); boolean boolean69 = complex25.equals((java.lang.Object) mathArithmeticException68); org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex71 = complex70.negate(); org.apache.commons.math.complex.Complex complex73 = complex71.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex75 = complex74.negate(); org.apache.commons.math.complex.Complex complex76 = complex71.pow(complex75); org.apache.commons.math.complex.Complex complex77 = complex25.divide(complex75); org.apache.commons.math.complex.Complex complex78 = complex9.subtract(complex25); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.0, 0.0)" + "'", str8, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection39 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection39.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); }
public void test1623() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1623"); double double1 = org.apache.commons.math.util.FastMath.ulp(0.9043318529835167d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.1102230246251565E-16d + "'", double1 == 1.1102230246251565E-16d); }
public void test1624() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1624"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); java.util.List<org.apache.commons.math.complex.Complex> complexList16 = complex11.nthRoot(126); org.apache.commons.math.complex.Complex complex17 = complex11.exp(); org.apache.commons.math.complex.Complex complex18 = complex11.sinh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complexList16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); }
public void test1625() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1625"); int int1 = org.apache.commons.math.util.FastMath.getExponent(10240.0f); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 13 + "'", int1 == 13); }
public void test1626() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1626"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = complex3.divide(26091.090931580457d); org.apache.commons.math.complex.Complex complex8 = complex3.divide((double) (-422604543)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); }
public void test1627() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1627"); float float1 = org.apache.commons.math.util.MathUtils.sign((float) 1595543182L); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test1628() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1628"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex8.sinh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex9.pow(complex11); org.apache.commons.math.complex.Complex complex15 = complex11.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sin(); double double19 = complex18.getArgument(); org.apache.commons.math.complex.Complex complex20 = complex15.multiply(complex18); org.apache.commons.math.complex.Complex complex21 = complex18.sin(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex23 = complex21.add(complex22); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = complex24.sqrt(); org.apache.commons.math.complex.Complex complex26 = complex25.sin(); org.apache.commons.math.complex.Complex complex28 = complex26.pow((double) 1L); org.apache.commons.math.complex.Complex complex29 = complex23.pow(complex26); org.apache.commons.math.complex.Complex complex30 = complex3.divide(complex26); org.apache.commons.math.complex.Complex complex31 = complex30.sin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); }
public void test1629() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1629"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex11 = complex8.pow((double) 20); org.apache.commons.math.complex.Complex complex12 = complex11.sin(); org.apache.commons.math.complex.Complex complex13 = complex11.exp(); org.apache.commons.math.complex.Complex complex14 = complex7.multiply(complex13); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField15 = complex14.getField(); org.apache.commons.math.complex.Complex complex16 = complexField15.getZero(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complexField15); org.junit.Assert.assertNotNull(complex16); }
public void test1630() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1630"); float float1 = org.apache.commons.math.util.MathUtils.sign((float) 6034498936725L); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test1631() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1631"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex2.createComplex((-0.942869904304318d), (double) (byte) 100); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex9 = complex7.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex10 = complex9.asin(); org.apache.commons.math.complex.Complex complex11 = complex2.divide(complex10); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.negate(); org.apache.commons.math.complex.Complex complex19 = complex16.pow(complex18); org.apache.commons.math.complex.Complex complex22 = complex18.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex23 = complex22.negate(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = complex24.sin(); double double26 = complex25.getArgument(); org.apache.commons.math.complex.Complex complex27 = complex22.multiply(complex25); org.apache.commons.math.complex.Complex complex28 = complex27.tanh(); boolean boolean29 = complex12.equals((java.lang.Object) complex27); org.apache.commons.math.complex.Complex complex30 = complex27.exp(); org.apache.commons.math.complex.Complex complex31 = complex30.acos(); org.apache.commons.math.complex.Complex complex32 = complex11.pow(complex31); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); }
public void test1632() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1632"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); java.util.List<org.apache.commons.math.complex.Complex> complexList8 = complex5.nthRoot(52); org.apache.commons.math.complex.Complex complex9 = complex5.sin(); org.apache.commons.math.complex.Complex complex10 = complex5.asin(); org.apache.commons.math.complex.Complex complex12 = complex10.divide(7.930097512430751E14d); org.apache.commons.math.complex.Complex complex13 = complex12.exp(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complexList8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test1633() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1633"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray12 = new int[] { (byte) 100, 10 }; int[] intArray18 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double19 = org.apache.commons.math.util.MathUtils.distance(intArray12, intArray18); int int20 = org.apache.commons.math.util.MathUtils.distance1(intArray2, intArray12); int[] intArray21 = org.apache.commons.math.util.MathUtils.copyOf(intArray12); int[] intArray22 = org.apache.commons.math.util.MathUtils.copyOf(intArray12); int[] intArray23 = org.apache.commons.math.util.MathUtils.copyOf(intArray12); org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10]"); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 104.04806581575652d + "'", double19 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(intArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100, 10]"); org.junit.Assert.assertNotNull(intArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 10]"); org.junit.Assert.assertNotNull(intArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, 10]"); }
public void test1634() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1634"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = complex0.atan(); org.apache.commons.math.complex.Complex complex9 = complex7.add(115.45293904539368d); org.apache.commons.math.complex.Complex complex10 = complex9.sin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test1635() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1635"); double double1 = org.apache.commons.math.util.FastMath.asin(1262023.5276316951d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1636() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1636"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(202.0d); }
public void test1637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1637"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray9 = null; double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); boolean boolean16 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray13); double[] doubleArray17 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13); double[] doubleArray21 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray23 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray21, (int) (short) 0); double[] doubleArray26 = new double[] { (-1), (byte) 100 }; double double27 = org.apache.commons.math.util.MathUtils.distance1(doubleArray23, doubleArray26); boolean boolean28 = org.apache.commons.math.util.MathUtils.equals(doubleArray17, doubleArray23); double[] doubleArray30 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 101); boolean boolean31 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray8, doubleArray17); double[] doubleArray32 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection36 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException38 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 5, (java.lang.Number) 100.0f, (-1), orderDirection36, true); java.lang.Number number39 = nonMonotonousSequenceException38.getPrevious(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext40 = nonMonotonousSequenceException38.getContext(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection41 = nonMonotonousSequenceException38.getDirection(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection42 = nonMonotonousSequenceException38.getDirection(); boolean boolean45 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray32, orderDirection42, false, false); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection52 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException54 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 5, (java.lang.Number) 100.0f, (-1), orderDirection52, true); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException56 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (-0.6276125002048193d), (java.lang.Number) 74.61303542254257d, 520, orderDirection52, true); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection57 = nonMonotonousSequenceException56.getDirection(); boolean boolean60 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray32, orderDirection57, true, false); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertEquals("'" + number39 + "' != '" + 100.0f + "'", number39, 100.0f); org.junit.Assert.assertNotNull(exceptionContext40); org.junit.Assert.assertTrue("'" + orderDirection41 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection41.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection42.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertTrue("'" + orderDirection52 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection52.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + orderDirection57 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection57.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false); }
public void test1638() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1638"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex4.acos(); org.apache.commons.math.complex.ComplexField complexField6 = complex5.getField(); boolean boolean7 = complex5.isNaN(); org.apache.commons.math.complex.Complex complex8 = complex5.conjugate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complexField6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(complex8); }
public void test1639() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1639"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.log(); org.apache.commons.math.complex.Complex complex3 = complex0.atan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test1640() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1640"); long long2 = org.apache.commons.math.util.MathUtils.subAndCheck(15100L, 1786706422498L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1786706407398L) + "'", long2 == (-1786706407398L)); }
public void test1641() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1641"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); org.apache.commons.math.complex.Complex complex7 = complex5.cos(); org.apache.commons.math.complex.Complex complex9 = complex5.add(6.807450230000169E8d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); }
public void test1642() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1642"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); org.apache.commons.math.complex.Complex complex4 = complex0.multiply((double) 8.671307E-30f); double double5 = complex4.abs(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 8.671306981609091E-30d + "'", double5 == 8.671306981609091E-30d); }
public void test1643() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1643"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((-5.3690505934197095d)); java.lang.String str2 = complex1.toString(); org.apache.commons.math.complex.Complex complex4 = complex1.pow((double) 60.999996f); org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(-5.3690505934197095, 0.0)" + "'", str2, "(-5.3690505934197095, 0.0)"); org.junit.Assert.assertNotNull(complex4); }
public void test1644() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1644"); org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; org.apache.commons.math.exception.util.Localizable localizable4 = null; double[] doubleArray8 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray10 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, (int) (short) 0); double[] doubleArray13 = new double[] { (-1), (byte) 100 }; double double14 = org.apache.commons.math.util.MathUtils.distance1(doubleArray10, doubleArray13); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection15 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean18 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray13, orderDirection15, false, true); double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection25 = null; double[] doubleArray28 = new double[] { 0.0f, 0.0f }; double[] doubleArray31 = new double[] { 0.0f, 0.0f }; double[] doubleArray34 = new double[] { 0.0f, 0.0f }; double[] doubleArray37 = new double[] { 0.0f, 0.0f }; double[] doubleArray40 = new double[] { 0.0f, 0.0f }; double[][] doubleArray41 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray24, orderDirection25, doubleArray41); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray13, doubleArray41); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException44 = new org.apache.commons.math.exception.MathArithmeticException(localizable4, (java.lang.Object[]) doubleArray41); org.apache.commons.math.exception.NullArgumentException nullArgumentException45 = new org.apache.commons.math.exception.NullArgumentException(localizable3, (java.lang.Object[]) doubleArray41); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException46 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable2, (java.lang.Object[]) doubleArray41); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException47 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) 1.83579396E8d, (java.lang.Object[]) doubleArray41); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException48 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) (-8.852076447880833E9d), (java.lang.Object[]) doubleArray41); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection15 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection15.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray41); }
public void test1645() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1645"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex67.exp(); org.apache.commons.math.complex.Complex complex69 = complex68.tan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); }
public void test1646() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1646"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(0.0f, (float) 1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test1647() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1647"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(5.480656284001007d); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex3 = complex2.atan(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex4.acos(); org.apache.commons.math.complex.Complex complex7 = complex3.divide(complex6); org.apache.commons.math.complex.Complex complex10 = complex7.createComplex((double) (-86L), 0.9919317346815598d); org.apache.commons.math.complex.Complex complex12 = complex10.pow(3.5553480614894135d); boolean boolean13 = complex1.equals((java.lang.Object) complex10); org.apache.commons.math.complex.Complex complex14 = complex10.atan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(complex14); }
public void test1648() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1648"); float float1 = org.apache.commons.math.util.FastMath.signum((float) 1475306912L); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test1649() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1649"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sin(); double double4 = complex3.getImaginary(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex3); org.apache.commons.math.complex.Complex complex9 = complex3.createComplex(6.80745014E8d, 1.7453292519943295d); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex12 = complex11.log(); org.apache.commons.math.complex.Complex complex13 = complex12.atan(); org.apache.commons.math.complex.Complex complex14 = complex13.tan(); org.apache.commons.math.complex.Complex complex15 = complex9.add(complex14); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); }
public void test1650() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1650"); double double1 = org.apache.commons.math.util.FastMath.acosh(2.220446049250313E-16d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1651() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1651"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(2.3410801532628067d, 6.591783121186793E31d); org.junit.Assert.assertNotNull(complex2); }
public void test1652() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1652"); double double1 = org.apache.commons.math.util.FastMath.abs((double) 2432902008176640000L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.43290200817664E18d + "'", double1 == 2.43290200817664E18d); }
public void test1653() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1653"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.complex.Complex complex18 = complex15.exp(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex20 = complex19.negate(); org.apache.commons.math.complex.Complex complex22 = complex19.pow((double) 20); java.lang.String str23 = complex22.toString(); double double24 = complex22.getReal(); org.apache.commons.math.complex.Complex complex25 = complex22.tan(); org.apache.commons.math.complex.Complex complex28 = complex22.createComplex((double) 35.000004f, 2.1513092806481256E16d); org.apache.commons.math.complex.Complex complex29 = complex28.asin(); org.apache.commons.math.complex.Complex complex30 = complex18.multiply(complex28); double double31 = complex18.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(1.0, 0.0)" + "'", str23, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-0.8414709848078965d) + "'", double31 == (-0.8414709848078965d)); }
public void test1654() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1654"); int int1 = org.apache.commons.math.util.FastMath.getExponent((float) 60); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5); }
public void test1655() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1655"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow((double) 20); org.apache.commons.math.complex.Complex complex11 = complex7.exp(); org.apache.commons.math.complex.Complex complex12 = complex0.subtract(complex7); boolean boolean13 = complex7.isNaN(); double double14 = complex7.getReal(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf(6880.817293923487d, 4.795790545596741d); org.apache.commons.math.complex.Complex complex18 = complex7.multiply(complex17); org.apache.commons.math.complex.Complex complex19 = complex17.acos(); double double20 = complex17.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 6880.817293923487d + "'", double20 == 6880.817293923487d); }
public void test1656() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1656"); double double2 = org.apache.commons.math.util.FastMath.hypot(0.0340712836412701d, 1.557407724654902d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.5577803674407131d + "'", double2 == 1.5577803674407131d); }
public void test1657() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1657"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex12.subtract(66.97680939587865d); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.sin(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.negate(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex18.pow(complex22); boolean boolean25 = complex23.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex26 = complex16.divide(complex23); org.apache.commons.math.complex.Complex complex27 = complex16.sinh(); org.apache.commons.math.complex.Complex complex28 = complex16.atan(); org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z(); double double30 = complex29.getReal(); org.apache.commons.math.complex.Complex complex31 = complex29.tanh(); double double32 = complex31.abs(); double double33 = complex31.abs(); org.apache.commons.math.complex.Complex complex34 = complex12.divide(complex31); org.apache.commons.math.complex.Complex complex35 = complex34.conjugate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.7146114112494588d + "'", double30 == 0.7146114112494588d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.6135603872539619d + "'", double32 == 0.6135603872539619d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.6135603872539619d + "'", double33 == 0.6135603872539619d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); }
public void test1658() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1658"); double double1 = org.apache.commons.math.util.FastMath.cos((double) (-680745023L)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.7926744838926685d) + "'", double1 == (-0.7926744838926685d)); }
public void test1659() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1659"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.complex.Complex complex18 = complex15.exp(); org.apache.commons.math.complex.Complex complex19 = complex18.acos(); org.apache.commons.math.complex.Complex complex20 = complex19.acos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); }
public void test1660() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1660"); double double1 = org.apache.commons.math.util.FastMath.acos(6.0063592261824565d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1661() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1661"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); double double4 = complex3.getArgument(); org.apache.commons.math.complex.Complex complex5 = complex3.sin(); org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex8.sinh(); org.apache.commons.math.complex.Complex complex10 = complex9.atan(); org.apache.commons.math.complex.Complex complex11 = complex5.divide(complex10); double double12 = complex10.abs(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.8657694832396586d + "'", double12 == 0.8657694832396586d); }
public void test1662() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1662"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); boolean boolean12 = complex8.isNaN(); org.apache.commons.math.complex.Complex complex14 = complex8.subtract(0.6190337262278893d); org.apache.commons.math.complex.Complex complex16 = complex8.pow((double) 2042235078); org.apache.commons.math.complex.Complex complex17 = complex8.atan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); }
public void test1663() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1663"); double double2 = org.apache.commons.math.util.MathUtils.log(1.5860134523134298E15d, (-6.80745014E8d)); org.junit.Assert.assertTrue(Double.isNaN(double2)); }
public void test1664() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1664"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sqrt(); org.apache.commons.math.complex.Complex complex19 = complex18.sin(); org.apache.commons.math.complex.Complex complex21 = complex19.pow((double) 1L); org.apache.commons.math.complex.Complex complex22 = complex16.pow(complex19); boolean boolean24 = complex19.equals((java.lang.Object) "(1.0, 0.0)"); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex26 = complex25.sin(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex28 = complex27.negate(); org.apache.commons.math.complex.Complex complex30 = complex28.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex32 = complex31.negate(); org.apache.commons.math.complex.Complex complex33 = complex28.pow(complex32); boolean boolean35 = complex33.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex36 = complex26.divide(complex33); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex38 = complex37.negate(); org.apache.commons.math.complex.Complex complex39 = complex38.sinh(); double double40 = complex39.getArgument(); org.apache.commons.math.complex.Complex complex41 = complex26.add(complex39); org.apache.commons.math.complex.Complex complex42 = complex39.acos(); org.apache.commons.math.complex.Complex complex43 = complex19.multiply(complex42); org.apache.commons.math.complex.ComplexField complexField44 = complex42.getField(); org.apache.commons.math.complex.Complex complex45 = complex42.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-3.141592653589793d) + "'", double40 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complexField44); org.junit.Assert.assertNotNull(complex45); }
public void test1665() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1665"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); org.apache.commons.math.complex.Complex complex4 = complex0.multiply((double) 5); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex6.sinh(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow(complex9); org.apache.commons.math.complex.Complex complex13 = complex9.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex14 = complex13.negate(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.sin(); double double17 = complex16.getArgument(); org.apache.commons.math.complex.Complex complex18 = complex13.multiply(complex16); org.apache.commons.math.complex.Complex complex19 = complex16.sin(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex21 = complex19.add(complex20); org.apache.commons.math.complex.Complex complex22 = complex20.asin(); org.apache.commons.math.complex.Complex complex23 = complex4.pow(complex22); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); }
public void test1666() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1666"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray14); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 101); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); double[] doubleArray30 = new double[] { (-1), (byte) 100 }; double double31 = org.apache.commons.math.util.MathUtils.distance1(doubleArray27, doubleArray30); double[] doubleArray33 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray30, 100); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray33); double double35 = org.apache.commons.math.util.MathUtils.distance(doubleArray8, doubleArray33); double[] doubleArray37 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray33, (-96.1585290151921d)); double[] doubleArray39 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray33, 30); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection46 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException48 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 5, (java.lang.Number) 100.0f, (-1), orderDirection46, true); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException50 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (-0.6276125002048193d), (java.lang.Number) 74.61303542254257d, 520, orderDirection46, true); boolean boolean53 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray39, orderDirection46, false, false); double double54 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray39); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 142.83907028540895d + "'", double35 == 142.83907028540895d); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.9712982728807283, -97.12982728807283, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + orderDirection46 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection46.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.00499987500625d + "'", double54 == 100.00499987500625d); }
public void test1667() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1667"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex3 = complex1.divide((double) 1079574528); org.apache.commons.math.complex.Complex complex4 = complex3.cosh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex8 = complex5.subtract((double) (-1L)); org.apache.commons.math.complex.Complex complex9 = complex8.conjugate(); org.apache.commons.math.complex.Complex complex10 = complex4.add(complex8); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test1668() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1668"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex15.sqrt(); org.apache.commons.math.complex.Complex complex69 = complex15.tanh(); boolean boolean70 = complex15.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); }
public void test1669() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1669"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) ' '); org.apache.commons.math.complex.Complex complex3 = complex1.multiply(0.0d); org.junit.Assert.assertNotNull(complex3); }
public void test1670() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1670"); long long2 = org.apache.commons.math.util.MathUtils.pow(751914127L, (long) 680745023); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-7168074154368346513L) + "'", long2 == (-7168074154368346513L)); }
public void test1671() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1671"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); org.apache.commons.math.complex.Complex complex7 = complex5.cos(); java.lang.String str8 = complex5.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(-1.0, -0.0)" + "'", str8, "(-1.0, -0.0)"); }
public void test1672() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1672"); org.apache.commons.math.exception.util.Localizable localizable0 = null; double[] doubleArray4 = new double[] { 2.718281828459045d, '#' }; int int5 = org.apache.commons.math.util.MathUtils.hash(doubleArray4); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection6 = org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING; org.apache.commons.math.exception.util.Localizable localizable7 = null; double[] doubleArray15 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray15); double[] doubleArray18 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray15, 6); double[][] doubleArray19 = new double[][] {}; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray15, doubleArray19); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException21 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable7, (java.lang.Number) 1.07957453E9f, (java.lang.Object[]) doubleArray19); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray4, orderDirection6, doubleArray19); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException23 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) 95.99999999999999d, (java.lang.Object[]) doubleArray19); org.apache.commons.math.exception.NullArgumentException nullArgumentException24 = new org.apache.commons.math.exception.NullArgumentException(localizable0, (java.lang.Object[]) doubleArray19); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[35.0, 2.718281828459045]"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-680745026) + "'", int5 == (-680745026)); org.junit.Assert.assertTrue("'" + orderDirection6 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING + "'", orderDirection6.equals(org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING)); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 1.0, 32.0, 35.0, 100.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray19); }
public void test1673() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1673"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex2 = complex0.subtract((double) 1.0f); org.apache.commons.math.complex.Complex complex3 = complex0.log(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test1674() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1674"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); org.apache.commons.math.complex.Complex complex4 = complex0.tanh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex7.sinh(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex8.pow(complex10); org.apache.commons.math.complex.Complex complex14 = complex10.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex17 = complex16.sin(); double double18 = complex17.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex14.multiply(complex17); org.apache.commons.math.complex.Complex complex20 = complex19.tanh(); org.apache.commons.math.complex.Complex complex21 = complex5.add(complex19); org.apache.commons.math.complex.Complex complex22 = complex5.sqrt(); org.apache.commons.math.complex.Complex complex24 = complex22.add(2.961927181208049E174d); org.apache.commons.math.complex.Complex complex25 = complex0.add(complex24); org.apache.commons.math.complex.ComplexField complexField26 = complex0.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complexField26); }
public void test1675() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1675"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(101.00495037373169d); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex1.getField(); org.apache.commons.math.complex.Complex complex3 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex4 = complexField2.getOne(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sin(); org.apache.commons.math.complex.Complex complex11 = complex9.pow((double) 1L); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getImaginary(); org.apache.commons.math.complex.Complex complex15 = complex13.sqrt(); org.apache.commons.math.complex.Complex complex16 = complex15.sqrt1z(); org.apache.commons.math.complex.Complex complex17 = complex16.negate(); org.apache.commons.math.complex.Complex complex18 = complex11.multiply(complex17); org.apache.commons.math.complex.Complex complex19 = complex6.subtract(complex17); double double20 = complex17.abs(); org.apache.commons.math.complex.Complex complex21 = complex4.divide(complex17); java.util.List<org.apache.commons.math.complex.Complex> complexList23 = complex4.nthRoot(10); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.3981570232861697d + "'", double20 == 0.3981570232861697d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complexList23); }
public void test1676() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1676"); double double1 = org.apache.commons.math.util.FastMath.rint((double) 1.78670653E12f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.786706526208E12d + "'", double1 == 1.786706526208E12d); }
public void test1677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1677"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex4.acos(); org.apache.commons.math.complex.Complex complex6 = complex4.acos(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex12 = complex10.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex14 = complex13.negate(); org.apache.commons.math.complex.Complex complex15 = complex10.pow(complex14); boolean boolean17 = complex15.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex18 = complex8.divide(complex15); org.apache.commons.math.complex.Complex complex19 = complex15.sqrt(); org.apache.commons.math.complex.Complex complex20 = complex6.multiply(complex19); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); }
public void test1678() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1678"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException4 = new org.apache.commons.math.exception.NumberIsTooLargeException(localizable0, (java.lang.Number) 6, (java.lang.Number) 10.000000000000002d, false); java.lang.Number number5 = numberIsTooLargeException4.getMax(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooLargeException4.getContext(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 10.000000000000002d + "'", number5, 10.000000000000002d); org.junit.Assert.assertNotNull(exceptionContext6); }
public void test1679() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1679"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); double double18 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex15.tanh(); org.apache.commons.math.complex.Complex complex20 = complex15.sin(); org.apache.commons.math.complex.Complex complex21 = complex15.log(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex23 = complex22.negate(); org.apache.commons.math.complex.Complex complex24 = complex23.sinh(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex26 = complex25.negate(); org.apache.commons.math.complex.Complex complex27 = complex24.pow(complex26); org.apache.commons.math.complex.Complex complex30 = complex26.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex31 = complex30.negate(); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex33 = complex32.sin(); double double34 = complex33.getArgument(); org.apache.commons.math.complex.Complex complex35 = complex30.multiply(complex33); org.apache.commons.math.complex.Complex complex36 = complex35.conjugate(); org.apache.commons.math.complex.Complex complex38 = complex36.pow((double) (-680745013L)); org.apache.commons.math.complex.Complex complex39 = complex15.add(complex36); org.apache.commons.math.complex.Complex complex40 = complex39.log(); org.apache.commons.math.complex.Complex complex42 = complex39.pow(103.77599757368887d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2.356194490192345d) + "'", double18 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex42); }
public void test1680() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1680"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 104.04806581575652d, (java.lang.Number) 35.0d, true); boolean boolean5 = numberIsTooSmallException4.getBoundIsAllowed(); java.lang.Number number6 = numberIsTooSmallException4.getArgument(); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 104.04806581575652d + "'", number6, 104.04806581575652d); }
public void test1681() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1681"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex4.acos(); org.apache.commons.math.complex.Complex complex6 = complex4.acos(); org.apache.commons.math.complex.Complex complex7 = complex4.asin(); org.apache.commons.math.complex.Complex complex9 = complex4.subtract(0.0d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); }
public void test1682() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1682"); int int2 = org.apache.commons.math.util.MathUtils.gcd((-1067892736), (int) ' '); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32); }
public void test1683() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1683"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); java.util.List<org.apache.commons.math.complex.Complex> complexList8 = complex5.nthRoot(52); org.apache.commons.math.complex.Complex complex9 = complex5.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex13.sinh(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex14.pow(complex16); org.apache.commons.math.complex.Complex complex20 = complex16.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex21 = complex20.negate(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex23 = complex22.sin(); double double24 = complex23.getArgument(); org.apache.commons.math.complex.Complex complex25 = complex20.multiply(complex23); org.apache.commons.math.complex.Complex complex26 = complex25.tanh(); boolean boolean27 = complex10.equals((java.lang.Object) complex25); double double28 = complex25.getArgument(); org.apache.commons.math.complex.Complex complex29 = complex25.tanh(); org.apache.commons.math.complex.Complex complex30 = complex25.sin(); org.apache.commons.math.complex.Complex complex31 = complex9.pow(complex30); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex33 = complex32.negate(); org.apache.commons.math.complex.Complex complex34 = complex33.sinh(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex36 = complex35.negate(); org.apache.commons.math.complex.Complex complex37 = complex34.pow(complex36); org.apache.commons.math.complex.Complex complex38 = complex34.tan(); org.apache.commons.math.complex.Complex complex40 = complex38.subtract(1.1488462128956858d); org.apache.commons.math.complex.Complex complex41 = complex30.divide(complex38); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complexList8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-2.356194490192345d) + "'", double28 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); }
public void test1684() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1684"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex4.cosh(); org.apache.commons.math.complex.Complex complex6 = complex4.sinh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex13 = complex10.pow((double) 20); java.lang.String str14 = complex13.toString(); org.apache.commons.math.complex.Complex complex15 = complex8.add(complex13); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField16 = complex15.getField(); org.apache.commons.math.complex.Complex complex17 = complex15.asin(); org.apache.commons.math.complex.Complex complex18 = complex6.subtract(complex17); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(1.0, 0.0)" + "'", str14, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complexField16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); }
public void test1685() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1685"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray14); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8); double[] doubleArray21 = null; boolean boolean22 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray21); double double23 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray8); org.apache.commons.math.exception.util.Localizable localizable24 = null; double[] doubleArray32 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray32); double[] doubleArray35 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray32, 6); double[][] doubleArray36 = new double[][] {}; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray32, doubleArray36); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException38 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable24, (java.lang.Number) 1.07957453E9f, (java.lang.Object[]) doubleArray36); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray8, doubleArray36); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, -1.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.00999950005d + "'", double23 == 100.00999950005d); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 1.0, 32.0, 35.0, 100.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray36); }
public void test1686() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1686"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex0.sinh(); double double18 = complex0.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d); }
public void test1687() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1687"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray10 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray4, 26091.090931580457d); double[] doubleArray12 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray10, 22025.465794806718d); double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray10, 260); double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray10); double[] doubleArray16 = null; double[] doubleArray20 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray22 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray20, (int) (short) 0); boolean boolean23 = org.apache.commons.math.util.MathUtils.equals(doubleArray16, doubleArray20); double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray20); double[] doubleArray28 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray30 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray28, (int) (short) 0); double[] doubleArray33 = new double[] { (-1), (byte) 100 }; double double34 = org.apache.commons.math.util.MathUtils.distance1(doubleArray30, doubleArray33); boolean boolean35 = org.apache.commons.math.util.MathUtils.equals(doubleArray24, doubleArray30); double[] doubleArray37 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray24, 101); double[] doubleArray41 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray43 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray41, (int) (short) 0); double[] doubleArray46 = new double[] { (-1), (byte) 100 }; double double47 = org.apache.commons.math.util.MathUtils.distance1(doubleArray43, doubleArray46); double[] doubleArray49 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray46, 100); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray49); double double51 = org.apache.commons.math.util.MathUtils.distance(doubleArray24, doubleArray49); double[] doubleArray55 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray57 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray55, (int) (short) 0); double[] doubleArray60 = new double[] { (-1), (byte) 100 }; double double61 = org.apache.commons.math.util.MathUtils.distance1(doubleArray57, doubleArray60); double[] doubleArray63 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray60, 100); double[] doubleArray65 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray60, 100); boolean boolean66 = org.apache.commons.math.util.MathUtils.equals(doubleArray49, doubleArray65); // The following exception was thrown during execution in test generation try { double double67 = org.apache.commons.math.util.MathUtils.linearCombination(doubleArray10, doubleArray65); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 3 != 100"); } catch (org.apache.commons.math.exception.DimensionMismatchException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[26623.5621750821, -266.235621750821, -266.235621750821]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[22474.965096741547, -224.74965096741548, -224.74965096741548]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[26623.5621750821, -266.235621750821, -266.235621750821, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[26623.5621750821, -266.235621750821, -266.235621750821]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 142.83907028540895d + "'", double51 == 142.83907028540895d); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true); }
public void test1688() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1688"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex20 = complex18.subtract((double) (byte) 10); org.apache.commons.math.complex.Complex complex21 = complex16.multiply(complex20); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.I; boolean boolean23 = complex16.equals((java.lang.Object) complex22); org.apache.commons.math.complex.Complex complex24 = complex22.log(); org.apache.commons.math.complex.Complex complex25 = complex15.add(complex24); org.apache.commons.math.complex.Complex complex26 = complex0.subtract(complex15); boolean boolean27 = complex0.isNaN(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); }
public void test1689() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1689"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); org.apache.commons.math.complex.Complex complex6 = complex5.conjugate(); org.apache.commons.math.complex.Complex complex7 = complex5.log(); java.lang.Object obj8 = complex5.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(obj8); org.junit.Assert.assertEquals(obj8.toString(), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "(NaN, NaN)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "(NaN, NaN)"); }
public void test1690() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1690"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); double double4 = complex3.getArgument(); org.apache.commons.math.complex.Complex complex5 = complex3.sin(); org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf(4.9E-324d, 6880.817293923487d); org.apache.commons.math.complex.Complex complex10 = complex9.acos(); org.apache.commons.math.complex.Complex complex11 = complex5.subtract(complex10); org.apache.commons.math.complex.Complex complex12 = complex5.sinh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test1691() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1691"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex3 = complex1.divide((-100.0d)); org.apache.commons.math.complex.Complex complex4 = complex1.atan(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField7 = complex5.getField(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex10 = complex8.log(); org.apache.commons.math.complex.Complex complex11 = complex5.add(complex8); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex15 = complex12.pow((double) 20); org.apache.commons.math.complex.Complex complex16 = complex12.exp(); org.apache.commons.math.complex.Complex complex17 = complex5.subtract(complex12); boolean boolean18 = complex12.isNaN(); double double19 = complex12.getReal(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf(6880.817293923487d, 4.795790545596741d); org.apache.commons.math.complex.Complex complex23 = complex12.multiply(complex22); org.apache.commons.math.complex.Complex complex24 = complex22.acos(); org.apache.commons.math.complex.Complex complex25 = complex4.multiply(complex24); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complexField7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); }
public void test1692() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1692"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 100); boolean boolean21 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray20); double double22 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray20); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray20); double[] doubleArray27 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray29 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray27, (int) (short) 0); double[] doubleArray31 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray29, 0); double[] doubleArray38 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray38); double[] doubleArray41 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray38, 6); double[][] doubleArray42 = new double[][] {}; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, doubleArray42); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray31, doubleArray42); double[] doubleArray48 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray50 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray48, (int) (short) 0); double[] doubleArray52 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray50, 0); double[] doubleArray54 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray50, 1028); boolean boolean55 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray31, doubleArray50); double[] doubleArray56 = null; boolean boolean57 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray31, doubleArray56); // The following exception was thrown during execution in test generation try { double double58 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray20, doubleArray56); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.00499987500625d + "'", double22 == 100.00499987500625d); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 1.0, 32.0, 35.0, 100.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false); }
public void test1693() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1693"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(0.0d, 0.0d); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex4.sin(); org.apache.commons.math.complex.Complex complex7 = complex5.pow((double) 1L); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.sin(); double double10 = complex9.getImaginary(); org.apache.commons.math.complex.Complex complex11 = complex9.sqrt(); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex7.multiply(complex13); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex15.sqrt1z(); org.apache.commons.math.complex.Complex complex18 = complex7.add(complex17); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex20 = complex19.sin(); double double21 = complex20.getImaginary(); org.apache.commons.math.complex.Complex complex22 = complex20.sqrt(); org.apache.commons.math.complex.Complex complex23 = complex22.sqrt1z(); org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex23.tan(); org.apache.commons.math.complex.Complex complex26 = complex17.divide(complex25); org.apache.commons.math.complex.Complex complex27 = complex2.multiply(complex17); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); }
public void test1694() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1694"); java.lang.Number number0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException(number0, (java.lang.Number) 21.031845735274818d, false); java.lang.Throwable throwable4 = numberIsTooSmallException3.getException(); org.junit.Assert.assertNotNull(throwable4); org.junit.Assert.assertEquals(throwable4.getLocalizedMessage(), "null is smaller than, or equal to, the minimum (21.032)"); org.junit.Assert.assertEquals(throwable4.getMessage(), "null is smaller than, or equal to, the minimum (21.032)"); org.junit.Assert.assertEquals(throwable4.toString(), "org.apache.commons.math.exception.NumberIsTooSmallException: null is smaller than, or equal to, the minimum (21.032)"); }
public void test1695() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1695"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = complexField2.getZero(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); }
public void test1696() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1696"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField3 = complex2.getField(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.sqrt(); org.apache.commons.math.complex.Complex complex6 = complex5.sin(); org.apache.commons.math.complex.Complex complex8 = complex6.pow((double) 1L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.sin(); double double11 = complex10.getImaginary(); org.apache.commons.math.complex.Complex complex12 = complex10.sqrt(); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex13.negate(); org.apache.commons.math.complex.Complex complex15 = complex8.multiply(complex14); org.apache.commons.math.complex.Complex complex16 = complex15.sqrt1z(); org.apache.commons.math.complex.Complex complex18 = complex16.subtract(66.97680939587865d); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex20 = complex19.sin(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex24 = complex22.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex26 = complex25.negate(); org.apache.commons.math.complex.Complex complex27 = complex22.pow(complex26); boolean boolean29 = complex27.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex30 = complex20.divide(complex27); org.apache.commons.math.complex.Complex complex31 = complex20.sinh(); org.apache.commons.math.complex.Complex complex32 = complex20.atan(); org.apache.commons.math.complex.Complex complex33 = complex32.sqrt1z(); double double34 = complex33.getReal(); org.apache.commons.math.complex.Complex complex35 = complex33.tanh(); double double36 = complex35.abs(); double double37 = complex35.abs(); org.apache.commons.math.complex.Complex complex38 = complex16.divide(complex35); org.apache.commons.math.complex.Complex complex39 = complex35.asin(); org.apache.commons.math.complex.Complex complex40 = complex39.asin(); org.apache.commons.math.complex.Complex complex41 = complex2.multiply(complex40); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complexField3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.7146114112494588d + "'", double34 == 0.7146114112494588d); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.6135603872539619d + "'", double36 == 0.6135603872539619d); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.6135603872539619d + "'", double37 == 0.6135603872539619d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); }
public void test1697() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1697"); double[] doubleArray1 = new double[] {}; double[] doubleArray2 = null; double[] doubleArray6 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray6, (int) (short) 0); boolean boolean9 = org.apache.commons.math.util.MathUtils.equals(doubleArray2, doubleArray6); double[] doubleArray10 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray6); double[] doubleArray14 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray16 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray14, (int) (short) 0); double[] doubleArray19 = new double[] { (-1), (byte) 100 }; double double20 = org.apache.commons.math.util.MathUtils.distance1(doubleArray16, doubleArray19); boolean boolean21 = org.apache.commons.math.util.MathUtils.equals(doubleArray10, doubleArray16); double[] doubleArray22 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray10); double[] doubleArray23 = null; boolean boolean24 = org.apache.commons.math.util.MathUtils.equals(doubleArray10, doubleArray23); double double25 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray1, doubleArray10); double[] doubleArray26 = null; double[] doubleArray30 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray32 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray30, (int) (short) 0); boolean boolean33 = org.apache.commons.math.util.MathUtils.equals(doubleArray26, doubleArray30); double[] doubleArray34 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray30); double[] doubleArray38 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray40 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray38, (int) (short) 0); double[] doubleArray43 = new double[] { (-1), (byte) 100 }; double double44 = org.apache.commons.math.util.MathUtils.distance1(doubleArray40, doubleArray43); double[] doubleArray46 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray43, 100); boolean boolean47 = org.apache.commons.math.util.MathUtils.equals(doubleArray34, doubleArray46); double[] doubleArray51 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray53 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray51, (int) (short) 0); double[] doubleArray55 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray53, 0); boolean boolean56 = org.apache.commons.math.util.MathUtils.equals(doubleArray34, doubleArray55); double double57 = org.apache.commons.math.util.MathUtils.distance(doubleArray10, doubleArray34); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection61 = org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException63 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 1.4E-45f, (java.lang.Number) 10.000000000000002d, 5, orderDirection61, false); boolean boolean66 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray34, orderDirection61, true, false); double[] doubleArray69 = new double[] { 2.718281828459045d, '#' }; int int70 = org.apache.commons.math.util.MathUtils.hash(doubleArray69); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection71 = org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING; org.apache.commons.math.exception.util.Localizable localizable72 = null; double[] doubleArray80 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray80); double[] doubleArray83 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray80, 6); double[][] doubleArray84 = new double[][] {}; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray80, doubleArray84); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException86 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable72, (java.lang.Number) 1.07957453E9f, (java.lang.Object[]) doubleArray84); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray69, orderDirection71, doubleArray84); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray34, doubleArray84); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException89 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) 1327058.4456092664d, (java.lang.Object[]) doubleArray84); org.junit.Assert.assertNotNull(doubleArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]"); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]"); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection61 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING + "'", orderDirection61.equals(org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING)); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertNotNull(doubleArray69); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[35.0, 2.718281828459045]"); org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-680745026) + "'", int70 == (-680745026)); org.junit.Assert.assertTrue("'" + orderDirection71 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING + "'", orderDirection71.equals(org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING)); org.junit.Assert.assertNotNull(doubleArray80); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 1.0, 32.0, 35.0, 100.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray83); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray84); }
public void test1698() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1698"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex2.acos(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex7.sinh(); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex2.divide(complex8); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = complex12.sinh(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex13.pow(complex15); org.apache.commons.math.complex.Complex complex17 = complex13.tan(); org.apache.commons.math.complex.Complex complex19 = complex17.subtract(1.1488462128956858d); org.apache.commons.math.complex.Complex complex20 = complex10.multiply(complex19); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-3.141592653589793d) + "'", double9 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); }
public void test1699() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1699"); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 1.07803443E9f); }
public void test1700() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1700"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex19 = complex17.add(2.961927181208049E174d); org.apache.commons.math.complex.Complex complex20 = complex17.tan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); }
public void test1701() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1701"); long long2 = org.apache.commons.math.util.MathUtils.subAndCheck(3894766459364266241L, (long) 5); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 3894766459364266236L + "'", long2 == 3894766459364266236L); }
public void test1702() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1702"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-0.9999999999999998d), 100.00499987500625d); org.apache.commons.math.complex.Complex complex3 = complex2.cosh(); org.junit.Assert.assertNotNull(complex3); }
public void test1703() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1703"); java.lang.Number number0 = null; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException(number0, (java.lang.Number) 20.0f, 29); int int4 = nonMonotonousSequenceException3.getIndex(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 29 + "'", int4 == 29); }
public void test1704() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1704"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow((double) 20); org.apache.commons.math.complex.Complex complex11 = complex7.exp(); org.apache.commons.math.complex.Complex complex12 = complex0.subtract(complex7); boolean boolean13 = complex7.isNaN(); double double14 = complex7.getReal(); org.apache.commons.math.complex.ComplexField complexField15 = complex7.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertNotNull(complexField15); }
public void test1705() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1705"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.divide(0.0d); java.lang.Object obj4 = complex3.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(obj4); org.junit.Assert.assertEquals(obj4.toString(), "(Infinity, Infinity)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "(Infinity, Infinity)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "(Infinity, Infinity)"); }
public void test1706() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1706"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 35.000004f, (java.lang.Number) 1.07957453E9f, true); java.lang.Throwable throwable4 = numberIsTooSmallException3.getException(); java.lang.Number number5 = numberIsTooSmallException3.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooSmallException3.getContext(); org.junit.Assert.assertNotNull(throwable4); org.junit.Assert.assertEquals(throwable4.getLocalizedMessage(), "35 is smaller than the minimum (1,079,574,528)"); org.junit.Assert.assertEquals(throwable4.getMessage(), "35 is smaller than the minimum (1,079,574,528)"); org.junit.Assert.assertEquals(throwable4.toString(), "org.apache.commons.math.exception.NumberIsTooSmallException: 35 is smaller than the minimum (1,079,574,528)"); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 1.07957453E9f + "'", number5, 1.07957453E9f); org.junit.Assert.assertNotNull(exceptionContext6); }
public void test1707() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1707"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow((double) 20); org.apache.commons.math.complex.Complex complex11 = complex7.exp(); org.apache.commons.math.complex.Complex complex12 = complex0.subtract(complex7); boolean boolean13 = complex7.isNaN(); double double14 = complex7.getReal(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf(6880.817293923487d, 4.795790545596741d); org.apache.commons.math.complex.Complex complex18 = complex7.multiply(complex17); org.apache.commons.math.complex.Complex complex19 = complex17.acos(); org.apache.commons.math.complex.Complex complex20 = complex19.negate(); java.lang.String str21 = complex19.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(6.969796776773922E-4, -9.529640134763516)" + "'", str21, "(6.969796776773922E-4, -9.529640134763516)"); }
public void test1708() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1708"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex7 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex8 = complexField4.getOne(); double double9 = complex8.getImaginary(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test1709() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1709"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((float) '4', 3.18997184E8f, (float) 52865L); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test1710() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1710"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex13.sinh(); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex1.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.acos(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex19.sinh(); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex20.cos(); org.apache.commons.math.complex.Complex complex23 = complex22.acos(); org.apache.commons.math.complex.Complex complex24 = complex22.acos(); org.apache.commons.math.complex.Complex complex25 = complex22.asin(); org.apache.commons.math.complex.Complex complex26 = complex17.pow(complex25); org.apache.commons.math.complex.ComplexField complexField27 = complex17.getField(); org.apache.commons.math.complex.Complex complex28 = complexField27.getZero(); org.apache.commons.math.complex.Complex complex29 = complexField27.getZero(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-3.141592653589793d) + "'", double15 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-3.141592653589793d) + "'", double21 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complexField27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); }
public void test1711() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1711"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection7 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.checkOrder(doubleArray6, orderDirection7, false); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); }
public void test1712() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1712"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.divide(0.0d); boolean boolean4 = complex3.isNaN(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply(2.4516735496323845E236d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertNotNull(complex6); }
public void test1713() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1713"); double double3 = org.apache.commons.math.util.MathUtils.reduce(1.5761131209498562d, (double) 35.000004f, (double) 15.0f); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 21.57611693564712d + "'", double3 == 21.57611693564712d); }
public void test1714() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1714"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); org.apache.commons.math.complex.Complex complex6 = complex5.conjugate(); org.apache.commons.math.complex.Complex complex7 = complex5.negate(); org.apache.commons.math.complex.Complex complex8 = complex7.cosh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test1715() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1715"); org.apache.commons.math.exception.util.Localizable localizable0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); double[] doubleArray9 = new double[] { (-1), (byte) 100 }; double double10 = org.apache.commons.math.util.MathUtils.distance1(doubleArray6, doubleArray9); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection11 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean14 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray9, orderDirection11, false, true); double[] doubleArray18 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray18, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection21 = null; double[] doubleArray24 = new double[] { 0.0f, 0.0f }; double[] doubleArray27 = new double[] { 0.0f, 0.0f }; double[] doubleArray30 = new double[] { 0.0f, 0.0f }; double[] doubleArray33 = new double[] { 0.0f, 0.0f }; double[] doubleArray36 = new double[] { 0.0f, 0.0f }; double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray20, orderDirection21, doubleArray37); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray9, doubleArray37); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException40 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray37); org.apache.commons.math.exception.util.ExceptionContext exceptionContext41 = mathArithmeticException40.getContext(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext42 = mathArithmeticException40.getContext(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext43 = mathArithmeticException40.getContext(); java.lang.Throwable throwable44 = mathArithmeticException40.getException(); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertNotNull(exceptionContext41); org.junit.Assert.assertNotNull(exceptionContext42); org.junit.Assert.assertNotNull(exceptionContext43); org.junit.Assert.assertNotNull(throwable44); }
public void test1716() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1716"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex7 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex8 = complexField4.getZero(); java.lang.Class<?> wildcardClass9 = complex8.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test1717() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1717"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); boolean boolean8 = complex6.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex10 = complex9.atan(); org.apache.commons.math.complex.Complex complex11 = complex6.pow(complex9); double double12 = complex11.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue(Double.isNaN(double12)); }
public void test1718() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1718"); org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException2 = new org.apache.commons.math.exception.DimensionMismatchException((int) (short) 0, (-992304248)); }
public void test1719() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1719"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sin(); double double4 = complex3.getImaginary(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex10 = complex7.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z(); org.apache.commons.math.complex.Complex complex12 = complex6.divide(complex10); org.apache.commons.math.complex.Complex complex14 = complex12.divide((double) (-1042212720)); boolean boolean15 = complex12.isNaN(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test1720() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1720"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(5.480656284001007d); org.apache.commons.math.complex.Complex complex2 = complex1.atan(); org.apache.commons.math.complex.Complex complex3 = complex2.cos(); java.lang.String str4 = complex2.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(1.3903217135931651, 0.0)" + "'", str4, "(1.3903217135931651, 0.0)"); }
public void test1721() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1721"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(2.2002552408466745d, (double) 183579396L); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test1722() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1722"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex4 = complex2.subtract((double) (byte) 10); org.apache.commons.math.complex.Complex complex5 = complex0.multiply(complex4); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I; boolean boolean7 = complex0.equals((java.lang.Object) complex6); org.apache.commons.math.complex.Complex complex8 = complex6.log(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList10 = complex6.nthRoot(0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: 0"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(complex8); }
public void test1723() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1723"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(0.8815685068348507d, 152.00001525878903d); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); double double6 = complex5.abs(); org.apache.commons.math.complex.Complex complex7 = complex5.tanh(); org.apache.commons.math.complex.Complex complex8 = complex2.subtract(complex7); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test1724() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1724"); double double4 = org.apache.commons.math.util.MathUtils.linearCombination((double) 11L, 0.0d, (double) '4', (double) 10240L); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 532480.0d + "'", double4 == 532480.0d); }
public void test1725() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1725"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-0.9999999999999998d), 100.00499987500625d); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf(1.475346432E9d); org.apache.commons.math.complex.Complex complex5 = complex2.multiply(complex4); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test1726() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1726"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow((double) 20); org.apache.commons.math.complex.Complex complex11 = complex7.exp(); org.apache.commons.math.complex.Complex complex12 = complex0.subtract(complex7); boolean boolean13 = complex7.isNaN(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.sin(); org.apache.commons.math.complex.Complex complex16 = complex14.sinh(); org.apache.commons.math.complex.Complex complex19 = complex16.createComplex(52.009614495783374d, 0.0d); org.apache.commons.math.complex.Complex complex20 = complex19.acos(); org.apache.commons.math.complex.Complex complex21 = complex20.tan(); boolean boolean22 = complex7.equals((java.lang.Object) complex20); org.apache.commons.math.complex.Complex complex23 = complex20.acos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertNotNull(complex23); }
public void test1727() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1727"); double double2 = org.apache.commons.math.util.MathUtils.normalizeAngle(0.022100829566607083d, 0.7945982305639963d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.022100829566607083d + "'", double2 == 0.022100829566607083d); }
public void test1728() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1728"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); org.apache.commons.math.complex.Complex complex5 = complex2.createComplex(52.009614495783374d, 0.0d); org.apache.commons.math.complex.Complex complex6 = complex5.acos(); org.apache.commons.math.complex.Complex complex7 = complex6.tan(); org.apache.commons.math.complex.Complex complex8 = complex7.sin(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex10 = complex9.exp(); org.apache.commons.math.complex.Complex complex11 = complex8.subtract(complex10); org.apache.commons.math.complex.Complex complex12 = complex8.tan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test1729() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1729"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.cosh(); java.lang.Object obj4 = complex2.readResolve(); double double5 = complex2.abs(); org.apache.commons.math.complex.Complex complex7 = complex2.pow(Double.NEGATIVE_INFINITY); org.apache.commons.math.complex.Complex complex9 = complex2.pow((double) 10); java.lang.Object obj10 = complex9.readResolve(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(obj4); org.junit.Assert.assertEquals(obj4.toString(), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "(-10.0, -0.0)"); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(obj10); org.junit.Assert.assertEquals(obj10.toString(), "(1.000000000000004E10, 1.224646799147358E-5)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "(1.000000000000004E10, 1.224646799147358E-5)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "(1.000000000000004E10, 1.224646799147358E-5)"); }
public void test1730() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1730"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals(5.286736904891208E-7d, (double) 796732387, (double) 318997151L); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test1731() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1731"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex2.sqrt1z(); double double6 = complex2.getReal(); org.apache.commons.math.complex.Complex complex7 = complex2.log(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.1752011936438014d) + "'", double6 == (-1.1752011936438014d)); org.junit.Assert.assertNotNull(complex7); }
public void test1732() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1732"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex2.sin(); org.apache.commons.math.complex.ComplexField complexField6 = complex2.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complexField6); }
public void test1733() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1733"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 3.9999998f, 101.53096491487338d); org.apache.commons.math.complex.ComplexField complexField3 = complex2.getField(); org.junit.Assert.assertNotNull(complexField3); }
public void test1734() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1734"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals(5.062554972936762d, (-0.9999999999999999d), (double) (-680745036L)); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test1735() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1735"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply(1.410065408E11d); org.apache.commons.math.complex.Complex complex7 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex10 = complex8.tanh(); org.apache.commons.math.complex.Complex complex11 = complex10.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField12 = complex11.getField(); org.apache.commons.math.complex.Complex complex13 = complexField12.getOne(); org.apache.commons.math.complex.Complex complex14 = complex7.divide(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.subtract(1.1364211033963854d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complexField12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); }
public void test1736() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1736"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex7 = complex6.tan(); double double8 = complex7.getReal(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex12 = complex9.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); java.util.List<org.apache.commons.math.complex.Complex> complexList15 = complex12.nthRoot((int) (byte) 10); org.apache.commons.math.complex.Complex complex16 = complex12.sqrt(); org.apache.commons.math.complex.Complex complex17 = complex7.multiply(complex16); java.lang.String str18 = complex16.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.557407724654902d + "'", double8 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complexList15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(1.0955482020694598, 0.45639251568804917)" + "'", str18, "(1.0955482020694598, 0.45639251568804917)"); }
public void test1737() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1737"); double double1 = org.apache.commons.math.util.FastMath.toRadians((double) 3.9999998f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.06981316591858398d + "'", double1 == 0.06981316591858398d); }
public void test1738() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1738"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex1.atan(); org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply(62.67332405660377d); org.apache.commons.math.complex.Complex complex17 = complex16.acos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); }
public void test1739() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1739"); long long2 = org.apache.commons.math.util.MathUtils.pow((-113167671777951743L), 35L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-2720265576691138559L) + "'", long2 == (-2720265576691138559L)); }
public void test1740() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1740"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex3 = complex2.conjugate(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.sin(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex7.sinh(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex8.pow(complex10); org.apache.commons.math.complex.Complex complex14 = complex10.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex17 = complex16.sin(); double double18 = complex17.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex14.multiply(complex17); org.apache.commons.math.complex.Complex complex20 = complex19.tanh(); boolean boolean21 = complex4.equals((java.lang.Object) complex19); org.apache.commons.math.exception.util.Localizable localizable22 = null; double[] doubleArray26 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray28 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray26, (int) (short) 0); double[] doubleArray31 = new double[] { (-1), (byte) 100 }; double double32 = org.apache.commons.math.util.MathUtils.distance1(doubleArray28, doubleArray31); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection33 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean36 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray31, orderDirection33, false, true); double[] doubleArray40 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray42 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray40, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection43 = null; double[] doubleArray46 = new double[] { 0.0f, 0.0f }; double[] doubleArray49 = new double[] { 0.0f, 0.0f }; double[] doubleArray52 = new double[] { 0.0f, 0.0f }; double[] doubleArray55 = new double[] { 0.0f, 0.0f }; double[] doubleArray58 = new double[] { 0.0f, 0.0f }; double[][] doubleArray59 = new double[][] { doubleArray46, doubleArray49, doubleArray52, doubleArray55, doubleArray58 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray42, orderDirection43, doubleArray59); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray31, doubleArray59); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException62 = new org.apache.commons.math.exception.MathArithmeticException(localizable22, (java.lang.Object[]) doubleArray59); boolean boolean63 = complex19.equals((java.lang.Object) mathArithmeticException62); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex67 = complex65.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex69 = complex68.negate(); org.apache.commons.math.complex.Complex complex70 = complex65.pow(complex69); org.apache.commons.math.complex.Complex complex71 = complex19.divide(complex69); org.apache.commons.math.complex.Complex complex72 = complex19.sqrt(); org.apache.commons.math.complex.Complex complex73 = complex19.tanh(); org.apache.commons.math.complex.Complex complex74 = complex3.divide(complex73); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection33 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection33.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); }
public void test1741() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1741"); double double6 = org.apache.commons.math.util.MathUtils.linearCombination((-0.8813735870195429d), (-3.141592653589793d), 0.3981570232861697d, 34432.65253429616d, (double) 1786706422498L, 1.079574528E9d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.928882742742847E21d + "'", double6 == 1.928882742742847E21d); }
public void test1742() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1742"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex3 = complex1.subtract((double) 5.28005152E8f); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); }
public void test1743() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1743"); double double2 = org.apache.commons.math.util.FastMath.pow(135.00000000000003d, (double) 422604639L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY); }
public void test1744() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1744"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); org.apache.commons.math.complex.Complex complex4 = complex3.sin(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.complex.Complex complex6 = complex3.cosh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); }
public void test1745() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1745"); double double1 = org.apache.commons.math.util.FastMath.sin((double) 1L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.8414709848078965d + "'", double1 == 0.8414709848078965d); }
public void test1746() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1746"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex19.sinh(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex20.pow(complex22); org.apache.commons.math.complex.Complex complex26 = complex22.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.sin(); double double30 = complex29.getArgument(); org.apache.commons.math.complex.Complex complex31 = complex26.multiply(complex29); org.apache.commons.math.complex.Complex complex32 = complex31.tanh(); org.apache.commons.math.complex.Complex complex33 = complex17.add(complex31); org.apache.commons.math.complex.Complex complex34 = complex14.divide(complex33); org.apache.commons.math.complex.Complex complex35 = complex33.acos(); org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex37 = complex36.atan(); org.apache.commons.math.complex.Complex complex38 = complex33.multiply(complex37); org.apache.commons.math.complex.Complex complex39 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex40 = complex38.subtract(complex39); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); }
public void test1747() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1747"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-3.141592653589793d), (double) (byte) 1); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField3 = complex2.getField(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex2); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); org.apache.commons.math.complex.Complex complex10 = complex8.exp(); org.apache.commons.math.complex.Complex complex11 = complex6.multiply(complex8); org.apache.commons.math.complex.Complex complex12 = complex2.pow(complex6); org.apache.commons.math.complex.ComplexField complexField13 = complex6.getField(); java.lang.Object obj14 = complex6.readResolve(); org.apache.commons.math.complex.Complex complex15 = complex6.sqrt1z(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complexField3); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complexField13); org.junit.Assert.assertNotNull(obj14); org.junit.Assert.assertEquals(obj14.toString(), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertNotNull(complex15); }
public void test1748() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1748"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) 21.760048611623624d); }
public void test1749() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1749"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.divide(0.0d); org.apache.commons.math.complex.Complex complex4 = complex0.cos(); java.lang.String str5 = complex4.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(0.5403023058681398, -0.0)" + "'", str5, "(0.5403023058681398, -0.0)"); }
public void test1750() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1750"); float[] floatArray6 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray9 = new float[] { ' ', 10240.0f }; boolean boolean10 = org.apache.commons.math.util.MathUtils.equals(floatArray6, floatArray9); float[] floatArray17 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray20 = new float[] { ' ', 10240.0f }; boolean boolean21 = org.apache.commons.math.util.MathUtils.equals(floatArray17, floatArray20); float[] floatArray28 = new float[] { 0, 10240.0f, (byte) 0, (short) 0, ' ', 1.0f }; float[] floatArray35 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray38 = new float[] { ' ', 10240.0f }; boolean boolean39 = org.apache.commons.math.util.MathUtils.equals(floatArray35, floatArray38); boolean boolean40 = org.apache.commons.math.util.MathUtils.equals(floatArray28, floatArray35); boolean boolean41 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray20, floatArray28); boolean boolean42 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray6, floatArray28); org.junit.Assert.assertNotNull(floatArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(floatArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(floatArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[0.0, 10240.0, 0.0, 0.0, 32.0, 1.0]"); org.junit.Assert.assertNotNull(floatArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); }
public void test1751() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1751"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(4.9E-324d, 6880.817293923487d); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex5 = complex3.pow(152.0d); boolean boolean6 = complex5.isNaN(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test1752() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1752"); long long2 = org.apache.commons.math.util.MathUtils.pow(1073741871L, 751914122); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 266113411311434529L + "'", long2 == 266113411311434529L); }
public void test1753() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1753"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); double double3 = complex1.getReal(); org.apache.commons.math.complex.Complex complex5 = complex1.add(0.9234560495448352d); java.lang.Object obj6 = complex5.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.8414709848078965d + "'", double3 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(obj6); org.junit.Assert.assertEquals(obj6.toString(), "(1.7649270343527317, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "(1.7649270343527317, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "(1.7649270343527317, 0.0)"); }
public void test1754() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1754"); float float2 = org.apache.commons.math.util.FastMath.nextAfter(1.65530944E9f, 0.0d); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.65530931E9f + "'", float2 == 1.65530931E9f); }
public void test1755() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1755"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(5.739164196290217d); }
public void test1756() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1756"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-0.9999999999999998d), 100.00499987500625d); org.apache.commons.math.complex.ComplexField complexField3 = complex2.getField(); org.apache.commons.math.complex.Complex complex5 = complex2.subtract(0.0d); org.apache.commons.math.complex.Complex complex7 = complex5.divide(0.0d); org.junit.Assert.assertNotNull(complexField3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); }
public void test1757() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1757"); double double2 = org.apache.commons.math.util.FastMath.pow((-1023.9999996821085d), 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d); }
public void test1758() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1758"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); boolean boolean3 = complex0.isNaN(); org.apache.commons.math.complex.Complex complex5 = complex0.add((double) 6.591783E31f); org.apache.commons.math.complex.Complex complex6 = complex5.sin(); org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex((double) Float.NaN, 1.079574528E9d); org.apache.commons.math.complex.Complex complex10 = complex5.subtract(complex9); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex10); }
public void test1759() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1759"); int[] intArray4 = new int[] { 52, 6, 'a', 680745024 }; int[] intArray7 = new int[] { (byte) 100, 10 }; int[] intArray13 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double14 = org.apache.commons.math.util.MathUtils.distance(intArray7, intArray13); int[] intArray16 = org.apache.commons.math.util.MathUtils.copyOf(intArray13, (int) (byte) 10); int int17 = org.apache.commons.math.util.MathUtils.distanceInf(intArray4, intArray16); int[] intArray18 = org.apache.commons.math.util.MathUtils.copyOf(intArray4); int[] intArray21 = new int[] { (byte) 100, 10 }; int[] intArray27 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double28 = org.apache.commons.math.util.MathUtils.distance(intArray21, intArray27); int[] intArray31 = new int[] { (byte) 100, 10 }; int[] intArray37 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double38 = org.apache.commons.math.util.MathUtils.distance(intArray31, intArray37); double double39 = org.apache.commons.math.util.MathUtils.distance(intArray27, intArray37); int[] intArray40 = org.apache.commons.math.util.MathUtils.copyOf(intArray27); int[] intArray43 = new int[] { (byte) 100, 10 }; int[] intArray49 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double50 = org.apache.commons.math.util.MathUtils.distance(intArray43, intArray49); int[] intArray53 = new int[] { (byte) 100, 10 }; int[] intArray59 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double60 = org.apache.commons.math.util.MathUtils.distance(intArray53, intArray59); double double61 = org.apache.commons.math.util.MathUtils.distance(intArray49, intArray59); int[] intArray62 = org.apache.commons.math.util.MathUtils.copyOf(intArray49); double double63 = org.apache.commons.math.util.MathUtils.distance(intArray27, intArray62); int[] intArray64 = org.apache.commons.math.util.MathUtils.copyOf(intArray62); int[] intArray65 = org.apache.commons.math.util.MathUtils.copyOf(intArray62); int int66 = org.apache.commons.math.util.MathUtils.distanceInf(intArray18, intArray62); int[] intArray67 = null; // The following exception was thrown during execution in test generation try { int int68 = org.apache.commons.math.util.MathUtils.distanceInf(intArray62, intArray67); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(intArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 6, 97, 680745024]"); org.junit.Assert.assertNotNull(intArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100, 10]"); org.junit.Assert.assertNotNull(intArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 104.04806581575652d + "'", double14 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 680745023 + "'", int17 == 680745023); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[52, 6, 97, 680745024]"); org.junit.Assert.assertNotNull(intArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100, 10]"); org.junit.Assert.assertNotNull(intArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 104.04806581575652d + "'", double28 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, 10]"); org.junit.Assert.assertNotNull(intArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 104.04806581575652d + "'", double38 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertNotNull(intArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[100, 10]"); org.junit.Assert.assertNotNull(intArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 104.04806581575652d + "'", double50 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[100, 10]"); org.junit.Assert.assertNotNull(intArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 104.04806581575652d + "'", double60 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(intArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(intArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + int66 + "' != '" + 680745023 + "'", int66 == 680745023); }
public void test1760() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1760"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex4 = complex2.subtract((double) (byte) 10); org.apache.commons.math.complex.Complex complex5 = complex0.multiply(complex4); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I; boolean boolean7 = complex0.equals((java.lang.Object) complex6); org.apache.commons.math.complex.Complex complex8 = complex6.log(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField9 = complex8.getField(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex8); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complexField9); }
public void test1761() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1761"); // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.math.util.MathUtils.pow(7311616, (-969464673)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: exponent (-969,464,673)"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test1762() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1762"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow((double) 20); org.apache.commons.math.complex.Complex complex11 = complex7.exp(); org.apache.commons.math.complex.Complex complex12 = complex0.subtract(complex7); boolean boolean13 = complex7.isNaN(); double double14 = complex7.getReal(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf(6880.817293923487d, 4.795790545596741d); org.apache.commons.math.complex.Complex complex18 = complex7.multiply(complex17); boolean boolean19 = complex17.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test1763() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1763"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex3 = complex2.cosh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test1764() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1764"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; double[] doubleArray7 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray9 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray7, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection10 = null; double[] doubleArray13 = new double[] { 0.0f, 0.0f }; double[] doubleArray16 = new double[] { 0.0f, 0.0f }; double[] doubleArray19 = new double[] { 0.0f, 0.0f }; double[] doubleArray22 = new double[] { 0.0f, 0.0f }; double[] doubleArray25 = new double[] { 0.0f, 0.0f }; double[][] doubleArray26 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray9, orderDirection10, doubleArray26); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable3, (java.lang.Object[]) doubleArray26); org.apache.commons.math.exception.NullArgumentException nullArgumentException29 = new org.apache.commons.math.exception.NullArgumentException(localizable1, (java.lang.Object[]) doubleArray26); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException30 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray26); java.lang.Throwable throwable31 = mathArithmeticException30.getException(); java.lang.Throwable throwable32 = mathArithmeticException30.getException(); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertNotNull(throwable31); org.junit.Assert.assertNotNull(throwable32); }
public void test1765() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1765"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); double double18 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex15.tanh(); org.apache.commons.math.complex.Complex complex20 = complex15.sin(); org.apache.commons.math.complex.Complex complex21 = complex20.sqrt1z(); org.apache.commons.math.complex.Complex complex22 = complex21.sqrt(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2.356194490192345d) + "'", double18 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test1766() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1766"); int int1 = org.apache.commons.math.util.FastMath.abs((-1758779498)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1758779498 + "'", int1 == 1758779498); }
public void test1767() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1767"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); java.lang.String str4 = complex3.toString(); double double5 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.tan(); org.apache.commons.math.complex.Complex complex7 = complex3.tanh(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex11 = complex9.divide((double) 1079574528); org.apache.commons.math.complex.Complex complex13 = complex9.divide((double) (-680745024)); boolean boolean14 = complex13.isInfinite(); org.apache.commons.math.complex.Complex complex15 = complex7.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.exp(); org.apache.commons.math.exception.util.Localizable localizable17 = null; org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException20 = new org.apache.commons.math.exception.DimensionMismatchException(20, (int) (byte) -1); java.lang.Throwable[] throwableArray21 = dimensionMismatchException20.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException22 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable17, (java.lang.Object[]) throwableArray21); boolean boolean23 = complex15.equals((java.lang.Object) throwableArray21); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(1.0, 0.0)" + "'", str4, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(throwableArray21); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); }
public void test1768() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1768"); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection6 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException8 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (-3.141592653589793d), (java.lang.Number) 2.271483493251976E220d, (int) '4', orderDirection6, false); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException10 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 1.7453292519943295d, (java.lang.Number) Float.NEGATIVE_INFINITY, 96, orderDirection6, false); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection11 = nonMonotonousSequenceException10.getDirection(); boolean boolean12 = nonMonotonousSequenceException10.getStrict(); org.junit.Assert.assertTrue("'" + orderDirection6 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection6.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test1769() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1769"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); org.apache.commons.math.complex.Complex complex4 = complex2.pow(2.820129412E9d); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField5 = complex4.getField(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex8 = complex7.sin(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex12 = complex9.pow((double) 20); java.lang.String str13 = complex12.toString(); double double14 = complex12.getReal(); org.apache.commons.math.complex.Complex complex15 = complex12.tan(); org.apache.commons.math.complex.Complex complex16 = complex8.multiply(complex15); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sin(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex20 = complex19.negate(); org.apache.commons.math.complex.Complex complex22 = complex20.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex20.pow(complex24); boolean boolean27 = complex25.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex28 = complex18.divide(complex25); org.apache.commons.math.complex.Complex complex29 = complex18.sinh(); org.apache.commons.math.complex.Complex complex30 = complex18.atan(); org.apache.commons.math.complex.Complex complex31 = complex30.sqrt1z(); double double32 = complex31.getReal(); double double33 = complex31.getImaginary(); double double34 = complex31.getArgument(); org.apache.commons.math.complex.Complex complex35 = complex15.add(complex31); org.apache.commons.math.complex.Complex complex36 = complex4.multiply(complex31); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complexField5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(1.0, 0.0)" + "'", str13, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.7146114112494588d + "'", double32 == 0.7146114112494588d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 5.4338975249603854E-17d + "'", double33 == 5.4338975249603854E-17d); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 7.603989300226138E-17d + "'", double34 == 7.603989300226138E-17d); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); }
public void test1770() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1770"); long long2 = org.apache.commons.math.util.MathUtils.pow(0L, 1475346432); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test1771() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1771"); double double8 = org.apache.commons.math.util.MathUtils.linearCombination((double) (-876899257), 0.0752640991388877d, (-0.15987052369731242d), 3.3131096352074194d, 34432.65253429616d, (-0.014686439244896978d), (double) (-1475346380), (-85.0d)); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.253384427611636E11d + "'", double8 == 1.253384427611636E11d); }
public void test1772() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1772"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex7 = complex6.tan(); org.apache.commons.math.complex.Complex complex8 = complex7.conjugate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test1773() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1773"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((float) 2046L, (float) (-2644339127462754156L), (float) (-876899257)); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test1774() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1774"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0406729815760345d, 1.5430806348152437d); org.apache.commons.math.complex.Complex complex4 = complex2.multiply(1327058.4456092664d); org.junit.Assert.assertNotNull(complex4); }
public void test1775() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1775"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; java.lang.Number number2 = null; double[] doubleArray3 = new double[] {}; org.apache.commons.math.exception.util.Localizable localizable6 = null; double[] doubleArray10 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray12 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray10, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection13 = null; double[] doubleArray16 = new double[] { 0.0f, 0.0f }; double[] doubleArray19 = new double[] { 0.0f, 0.0f }; double[] doubleArray22 = new double[] { 0.0f, 0.0f }; double[] doubleArray25 = new double[] { 0.0f, 0.0f }; double[] doubleArray28 = new double[] { 0.0f, 0.0f }; double[][] doubleArray29 = new double[][] { doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray12, orderDirection13, doubleArray29); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable6, (java.lang.Object[]) doubleArray29); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException32 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) (-1.0f), (java.lang.Object[]) doubleArray29); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray3, doubleArray29); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException34 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable1, number2, (java.lang.Object[]) doubleArray29); java.lang.Throwable[] throwableArray35 = notFiniteNumberException34.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException36 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray35); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertNotNull(throwableArray35); }
public void test1776() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1776"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sin(); org.apache.commons.math.complex.Complex complex6 = complex4.pow((double) 1L); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); org.apache.commons.math.complex.Complex complex10 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z(); org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = complex6.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex1.subtract(complex12); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex18 = complex15.pow((double) 20); java.lang.String str19 = complex18.toString(); double double20 = complex18.getReal(); org.apache.commons.math.complex.Complex complex21 = complex18.tan(); org.apache.commons.math.complex.Complex complex24 = complex18.createComplex((double) 35.000004f, 2.1513092806481256E16d); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.valueOf(1.475346432E9d); org.apache.commons.math.complex.Complex complex27 = complex18.divide(complex26); org.apache.commons.math.complex.Complex complex29 = complex27.pow((double) 4.611686E18f); org.apache.commons.math.complex.Complex complex30 = complex12.pow(complex27); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(1.0, 0.0)" + "'", str19, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); }
public void test1777() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1777"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (-1475306760)); java.lang.Throwable[] throwableArray2 = notPositiveException1.getSuppressed(); org.junit.Assert.assertNotNull(throwableArray2); }
public void test1778() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1778"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.sin(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex18 = complex16.add(complex17); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex21 = complex20.negate(); org.apache.commons.math.complex.Complex complex22 = complex21.sinh(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex22.pow(complex24); org.apache.commons.math.complex.Complex complex28 = complex24.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex29 = complex28.negate(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex31 = complex30.sin(); double double32 = complex31.getArgument(); org.apache.commons.math.complex.Complex complex33 = complex28.multiply(complex31); org.apache.commons.math.complex.Complex complex34 = complex33.tanh(); org.apache.commons.math.complex.Complex complex35 = complex19.add(complex33); org.apache.commons.math.complex.Complex complex36 = complex16.divide(complex35); org.apache.commons.math.complex.Complex complex37 = complex16.log(); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex39 = complex38.sin(); org.apache.commons.math.complex.Complex complex40 = complex38.sinh(); org.apache.commons.math.complex.Complex complex41 = complex16.subtract(complex40); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField42 = complex41.getField(); org.apache.commons.math.complex.Complex complex43 = complex1.add(complex41); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complexField42); org.junit.Assert.assertNotNull(complex43); }
public void test1779() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1779"); int int1 = org.apache.commons.math.util.FastMath.round((float) (short) 10); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 10 + "'", int1 == 10); }
public void test1780() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1780"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = complex0.sinh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); }
public void test1781() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1781"); long long2 = org.apache.commons.math.util.FastMath.min((long) 3, (-44L)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-44L) + "'", long2 == (-44L)); }
public void test1782() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1782"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); double double18 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex15.tanh(); org.apache.commons.math.complex.Complex complex20 = complex15.sin(); org.apache.commons.math.complex.Complex complex21 = complex15.log(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex23 = complex22.negate(); org.apache.commons.math.complex.Complex complex24 = complex23.sinh(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex26 = complex25.negate(); org.apache.commons.math.complex.Complex complex27 = complex24.pow(complex26); org.apache.commons.math.complex.Complex complex30 = complex26.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex31 = complex30.negate(); org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex33 = complex32.sin(); double double34 = complex33.getArgument(); org.apache.commons.math.complex.Complex complex35 = complex30.multiply(complex33); org.apache.commons.math.complex.Complex complex36 = complex35.conjugate(); org.apache.commons.math.complex.Complex complex38 = complex36.pow((double) (-680745013L)); org.apache.commons.math.complex.Complex complex39 = complex15.add(complex36); org.apache.commons.math.exception.util.Localizable localizable40 = null; java.lang.Object[] objArray41 = null; org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex39, localizable40, objArray41); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2.356194490192345d) + "'", double18 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); }
public void test1783() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1783"); double double1 = org.apache.commons.math.util.MathUtils.sign((double) 9.536743E-7f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test1784() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest3.test1784"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sin(); org.apache.commons.math.complex.Complex complex16 = complex15.acos(); org.apache.commons.math.complex.Complex complex17 = complex16.exp(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); }
public void test0501() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0501"); double double1 = org.apache.commons.math.util.FastMath.rint(2.2250738585072014E-308d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0502() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0502"); int int2 = org.apache.commons.math.util.MathUtils.lcm(30, (int) (short) 10); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 30 + "'", int2 == 30); }
public void test0503() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0503"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex2.acos(); org.apache.commons.math.complex.Complex complex6 = complex5.cosh(); org.apache.commons.math.complex.ComplexField complexField7 = complex6.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complexField7); }
public void test0504() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0504"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray12 = new int[] { (byte) 100, 10 }; int[] intArray18 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double19 = org.apache.commons.math.util.MathUtils.distance(intArray12, intArray18); double double20 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray18); int[] intArray23 = new int[] { (byte) 100, 10 }; int[] intArray29 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double30 = org.apache.commons.math.util.MathUtils.distance(intArray23, intArray29); int[] intArray33 = new int[] { (byte) 100, 10 }; int[] intArray39 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double40 = org.apache.commons.math.util.MathUtils.distance(intArray33, intArray39); double double41 = org.apache.commons.math.util.MathUtils.distance(intArray29, intArray39); double double42 = org.apache.commons.math.util.MathUtils.distance(intArray18, intArray39); int[] intArray43 = org.apache.commons.math.util.MathUtils.copyOf(intArray39); org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10]"); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 104.04806581575652d + "'", double19 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(intArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, 10]"); org.junit.Assert.assertNotNull(intArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 104.04806581575652d + "'", double30 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, 10]"); org.junit.Assert.assertNotNull(intArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 104.04806581575652d + "'", double40 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(intArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 35, 0, 1, 0]"); }
public void test0505() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0505"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complex5.add((double) (-680745036L)); org.apache.commons.math.complex.Complex complex8 = complex5.tanh(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex12 = complex9.pow((double) 20); org.apache.commons.math.complex.Complex complex13 = complex5.subtract(complex9); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test0506() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0506"); int int1 = org.apache.commons.math.util.FastMath.round((float) 1225); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1225 + "'", int1 == 1225); }
public void test0507() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0507"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex4 = complex2.subtract((double) (byte) 10); org.apache.commons.math.complex.Complex complex5 = complex0.multiply(complex4); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.I; boolean boolean7 = complex0.equals((java.lang.Object) complex6); org.apache.commons.math.complex.Complex complex8 = complex6.log(); org.apache.commons.math.complex.Complex complex9 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex10 = complex8.divide(complex9); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(complex8); }
public void test0508() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0508"); short short1 = org.apache.commons.math.util.MathUtils.indicator((short) (byte) 0); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 1 + "'", short1 == (short) 1); }
public void test0509() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0509"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); boolean boolean70 = complex15.equals((java.lang.Object) (short) 10); org.apache.commons.math.complex.Complex complex71 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex72 = complex15.multiply(complex71); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); }
public void test0510() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0510"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(101.00495037373169d); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex1.getField(); org.apache.commons.math.complex.Complex complex3 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex5.pow(complex9); org.apache.commons.math.complex.Complex complex11 = complex9.acos(); org.apache.commons.math.complex.Complex complex12 = complex9.sinh(); org.apache.commons.math.complex.Complex complex13 = complex3.pow(complex12); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test0511() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0511"); double double1 = org.apache.commons.math.util.FastMath.exp((double) (short) 10); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 22026.465794806718d + "'", double1 == 22026.465794806718d); }
public void test0512() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0512"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex0.tanh(); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test0513() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0513"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 52.009614495783374d, (java.lang.Number) 52.00961449578337d, 0); }
public void test0514() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0514"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); java.lang.String str5 = complex2.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(-1.1752011936438014, -0.0)" + "'", str5, "(-1.1752011936438014, -0.0)"); }
public void test0515() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0515"); double double1 = org.apache.commons.math.util.FastMath.atanh((double) (-422604639)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0516() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0516"); long long2 = org.apache.commons.math.util.MathUtils.subAndCheck((long) (-422604638), 680745143L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1103349781L) + "'", long2 == (-1103349781L)); }
public void test0517() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0517"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex7 = complexField4.getOne(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField8 = complex7.getField(); org.apache.commons.math.complex.Complex complex9 = complexField8.getZero(); org.apache.commons.math.complex.ComplexField complexField10 = complex9.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complexField8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complexField10); }
public void test0518() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0518"); int int2 = org.apache.commons.math.util.MathUtils.subAndCheck(52, 1475346432); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1475346380) + "'", int2 == (-1475346380)); }
public void test0519() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0519"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); java.util.List<org.apache.commons.math.complex.Complex> complexList8 = complex6.nthRoot(6); org.apache.commons.math.complex.Complex complex9 = complex6.cos(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.valueOf(101.00495037373169d); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField12 = complex11.getField(); org.apache.commons.math.complex.Complex complex13 = complexField12.getZero(); boolean boolean14 = complex6.equals((java.lang.Object) complex13); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complexList8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complexField12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test0520() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0520"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.log(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test0521() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0521"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) Double.POSITIVE_INFINITY, (java.lang.Number) 10.0d, (int) ' '); java.lang.Number number4 = nonMonotonousSequenceException3.getPrevious(); boolean boolean5 = nonMonotonousSequenceException3.getStrict(); java.lang.Number number6 = nonMonotonousSequenceException3.getPrevious(); boolean boolean7 = nonMonotonousSequenceException3.getStrict(); org.junit.Assert.assertEquals("'" + number4 + "' != '" + 10.0d + "'", number4, 10.0d); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 10.0d + "'", number6, 10.0d); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); }
public void test0522() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0522"); int int2 = org.apache.commons.math.util.MathUtils.pow(30, (long) 126); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test0523() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0523"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-0.5872139151569291d), 2.027768088553906d); }
public void test0524() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0524"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(1.1881242017914694E7d, 0.01725928106740481d); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0525() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0525"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(5.480656284001007d); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex3 = complex2.atan(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex4.acos(); org.apache.commons.math.complex.Complex complex7 = complex3.divide(complex6); org.apache.commons.math.complex.Complex complex10 = complex7.createComplex((double) (-86L), 0.9919317346815598d); org.apache.commons.math.complex.Complex complex12 = complex10.pow(3.5553480614894135d); boolean boolean13 = complex1.equals((java.lang.Object) complex10); org.apache.commons.math.complex.Complex complex14 = complex10.acos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(complex14); }
public void test0526() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0526"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((float) 52, (float) 1079574528, 63); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0527() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0527"); int int2 = org.apache.commons.math.util.MathUtils.subAndCheck((int) (short) 1, 1073741824); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1073741823) + "'", int2 == (-1073741823)); }
public void test0528() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0528"); float[] floatArray0 = null; float[] floatArray7 = new float[] { 0, 10240.0f, (byte) 0, (short) 0, ' ', 1.0f }; float[] floatArray14 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray17 = new float[] { ' ', 10240.0f }; boolean boolean18 = org.apache.commons.math.util.MathUtils.equals(floatArray14, floatArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(floatArray7, floatArray14); float[] floatArray26 = new float[] { 101, 0, 10.0f, (short) 10, 10240.0f, (short) 1 }; boolean boolean27 = org.apache.commons.math.util.MathUtils.equals(floatArray7, floatArray26); boolean boolean28 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray0, floatArray7); float[] floatArray29 = null; boolean boolean30 = org.apache.commons.math.util.MathUtils.equals(floatArray7, floatArray29); org.junit.Assert.assertNotNull(floatArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[0.0, 10240.0, 0.0, 0.0, 32.0, 1.0]"); org.junit.Assert.assertNotNull(floatArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(floatArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[101.0, 0.0, 10.0, 10.0, 10240.0, 1.0]"); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); }
public void test0529() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0529"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); double double4 = complex3.getArgument(); double double5 = complex3.getImaginary(); double double6 = complex3.getArgument(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex3); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test0530() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0530"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); int int9 = org.apache.commons.math.util.MathUtils.hash(doubleArray4); double[] doubleArray10 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double double11 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray10); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1944488865) + "'", int9 == (-1944488865)); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.00999950005d + "'", double11 == 100.00999950005d); }
public void test0531() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0531"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); double double5 = complex3.getReal(); double double6 = complex3.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.14168768474935d + "'", double5 == 2.14168768474935d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 2.14168768474935d + "'", double6 == 2.14168768474935d); }
public void test0532() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0532"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex4 = complex2.subtract((double) (byte) 10); org.apache.commons.math.complex.Complex complex5 = complex0.multiply(complex4); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); double double7 = complex6.abs(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); }
public void test0533() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0533"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.cos(); double double5 = complex4.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + (-0.0d) + "'", double5 == (-0.0d)); }
public void test0534() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0534"); // The following exception was thrown during execution in test generation try { float float3 = org.apache.commons.math.util.MathUtils.round((float) 1073741824, 1475346432, 1073741824); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: invalid rounding method 1,073,741,824, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)"); } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) { // Expected exception. } }
public void test0535() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0535"); double double1 = org.apache.commons.math.util.FastMath.sin((double) (-1143)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.5139008801272689d + "'", double1 == 0.5139008801272689d); }
public void test0536() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0536"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex1.atan(); org.apache.commons.math.complex.Complex complex14 = complex13.tan(); java.lang.Class<?> wildcardClass15 = complex13.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(wildcardClass15); }
public void test0537() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0537"); double double2 = org.apache.commons.math.util.MathUtils.normalizeAngle((double) 151L, 1.079574528E9d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0795745309222884E9d + "'", double2 == 1.0795745309222884E9d); }
public void test0538() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0538"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.cosh(); double double4 = complex3.getArgument(); boolean boolean5 = complex3.isNaN(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test0539() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0539"); org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; org.apache.commons.math.exception.util.Localizable localizable4 = null; org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException8 = new org.apache.commons.math.exception.DimensionMismatchException(localizable5, 0, (int) (short) -1); org.apache.commons.math.exception.util.Localizable localizable9 = null; org.apache.commons.math.exception.util.Localizable localizable10 = null; org.apache.commons.math.exception.util.Localizable localizable11 = null; java.lang.Object[] objArray13 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException14 = new org.apache.commons.math.exception.MathArithmeticException(localizable11, objArray13); org.apache.commons.math.exception.NullArgumentException nullArgumentException15 = new org.apache.commons.math.exception.NullArgumentException(localizable10, objArray13); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) (short) -1, localizable9, objArray13); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException17 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable4, objArray13); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException18 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable3, objArray13); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException19 = new org.apache.commons.math.exception.MathArithmeticException(localizable2, objArray13); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 4.22604638E8d, localizable1, objArray13); org.junit.Assert.assertNotNull(objArray13); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[1.0]"); }
public void test0540() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0540"); int int3 = org.apache.commons.math.util.MathUtils.compareTo(0.0d, 6.807450230000097E8d, (-680745024)); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test0541() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0541"); int int1 = org.apache.commons.math.util.MathUtils.indicator((int) (short) 0); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0542() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0542"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray8 = new double[] { (-1), (byte) 100 }; double double9 = org.apache.commons.math.util.MathUtils.distance1(doubleArray5, doubleArray8); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection10 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean13 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray8, orderDirection10, false, true); double[] doubleArray17 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray19 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection20 = null; double[] doubleArray23 = new double[] { 0.0f, 0.0f }; double[] doubleArray26 = new double[] { 0.0f, 0.0f }; double[] doubleArray29 = new double[] { 0.0f, 0.0f }; double[] doubleArray32 = new double[] { 0.0f, 0.0f }; double[] doubleArray35 = new double[] { 0.0f, 0.0f }; double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray19, orderDirection20, doubleArray36); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray8, doubleArray36); double[] doubleArray40 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 152); org.apache.commons.math.exception.util.Localizable localizable43 = null; double[] doubleArray47 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray49 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray47, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection50 = null; double[] doubleArray53 = new double[] { 0.0f, 0.0f }; double[] doubleArray56 = new double[] { 0.0f, 0.0f }; double[] doubleArray59 = new double[] { 0.0f, 0.0f }; double[] doubleArray62 = new double[] { 0.0f, 0.0f }; double[] doubleArray65 = new double[] { 0.0f, 0.0f }; double[][] doubleArray66 = new double[][] { doubleArray53, doubleArray56, doubleArray59, doubleArray62, doubleArray65 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray49, orderDirection50, doubleArray66); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable43, (java.lang.Object[]) doubleArray66); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException69 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) 680745023, (java.lang.Object[]) doubleArray66); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray40, doubleArray66); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 2 != 152"); } catch (org.apache.commons.math.exception.DimensionMismatchException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection10.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]"); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray66); }
public void test0543() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0543"); double double1 = org.apache.commons.math.util.FastMath.atan(6.807450230000095E8d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5707963253259178d + "'", double1 == 1.5707963253259178d); }
public void test0544() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0544"); float float2 = org.apache.commons.math.util.FastMath.copySign(1.5f, (-1024.0f)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-1.5f) + "'", float2 == (-1.5f)); }
public void test0545() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0545"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 100.0f, (double) 6); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex4.sinh(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex5.pow(complex7); org.apache.commons.math.complex.Complex complex11 = complex7.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex14 = complex13.sin(); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex11.multiply(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.sin(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex19 = complex17.add(complex18); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex22.sinh(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = complex24.negate(); org.apache.commons.math.complex.Complex complex26 = complex23.pow(complex25); org.apache.commons.math.complex.Complex complex29 = complex25.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex30 = complex29.negate(); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex32 = complex31.sin(); double double33 = complex32.getArgument(); org.apache.commons.math.complex.Complex complex34 = complex29.multiply(complex32); org.apache.commons.math.complex.Complex complex35 = complex34.tanh(); org.apache.commons.math.complex.Complex complex36 = complex20.add(complex34); org.apache.commons.math.complex.Complex complex37 = complex17.divide(complex36); org.apache.commons.math.complex.Complex complex38 = complex17.log(); org.apache.commons.math.complex.Complex complex39 = complex2.multiply(complex38); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); }
public void test0546() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0546"); double double1 = org.apache.commons.math.util.FastMath.nextUp(6.807450230000097E8d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.807450230000098E8d + "'", double1 == 6.807450230000098E8d); }
public void test0547() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0547"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex5.pow(complex9); boolean boolean11 = complex9.isInfinite(); org.apache.commons.math.complex.Complex complex12 = complex3.pow(complex9); java.lang.String str13 = complex12.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(1.0901353612181017, 0.0)" + "'", str13, "(1.0901353612181017, 0.0)"); }
public void test0548() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0548"); long long1 = org.apache.commons.math.util.FastMath.round((double) 30L); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 30L + "'", long1 == 30L); }
public void test0549() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0549"); long long2 = org.apache.commons.math.util.MathUtils.mulAndCheck((long) 3, 27360L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 82080L + "'", long2 == 82080L); }
public void test0550() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0550"); double double2 = org.apache.commons.math.util.FastMath.nextAfter(0.0d, (double) (-422604639)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-4.9E-324d) + "'", double2 == (-4.9E-324d)); }
public void test0551() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0551"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) (-680745013)); }
public void test0552() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0552"); float[] floatArray0 = null; float[] floatArray1 = null; float[] floatArray8 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray11 = new float[] { ' ', 10240.0f }; boolean boolean12 = org.apache.commons.math.util.MathUtils.equals(floatArray8, floatArray11); float[] floatArray19 = new float[] { 0, 10240.0f, (byte) 0, (short) 0, ' ', 1.0f }; float[] floatArray26 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray29 = new float[] { ' ', 10240.0f }; boolean boolean30 = org.apache.commons.math.util.MathUtils.equals(floatArray26, floatArray29); boolean boolean31 = org.apache.commons.math.util.MathUtils.equals(floatArray19, floatArray26); float[] floatArray38 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray41 = new float[] { ' ', 10240.0f }; boolean boolean42 = org.apache.commons.math.util.MathUtils.equals(floatArray38, floatArray41); boolean boolean43 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray19, floatArray41); boolean boolean44 = org.apache.commons.math.util.MathUtils.equals(floatArray11, floatArray41); boolean boolean45 = org.apache.commons.math.util.MathUtils.equals(floatArray1, floatArray41); float[] floatArray52 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray55 = new float[] { ' ', 10240.0f }; boolean boolean56 = org.apache.commons.math.util.MathUtils.equals(floatArray52, floatArray55); float[] floatArray63 = new float[] { 0, 10240.0f, (byte) 0, (short) 0, ' ', 1.0f }; float[] floatArray70 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray73 = new float[] { ' ', 10240.0f }; boolean boolean74 = org.apache.commons.math.util.MathUtils.equals(floatArray70, floatArray73); boolean boolean75 = org.apache.commons.math.util.MathUtils.equals(floatArray63, floatArray70); float[] floatArray82 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray85 = new float[] { ' ', 10240.0f }; boolean boolean86 = org.apache.commons.math.util.MathUtils.equals(floatArray82, floatArray85); boolean boolean87 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray63, floatArray85); boolean boolean88 = org.apache.commons.math.util.MathUtils.equals(floatArray55, floatArray85); float[] floatArray91 = new float[] { (short) 10, 'a' }; boolean boolean92 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray55, floatArray91); boolean boolean93 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray41, floatArray91); boolean boolean94 = org.apache.commons.math.util.MathUtils.equals(floatArray0, floatArray41); org.junit.Assert.assertNotNull(floatArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(floatArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[0.0, 10240.0, 0.0, 0.0, 32.0, 1.0]"); org.junit.Assert.assertNotNull(floatArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(floatArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertNotNull(floatArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertNotNull(floatArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[0.0, 10240.0, 0.0, 0.0, 32.0, 1.0]"); org.junit.Assert.assertNotNull(floatArray70); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray70), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray73); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false); org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false); org.junit.Assert.assertNotNull(floatArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray82), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray85); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray85), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false); org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true); org.junit.Assert.assertNotNull(floatArray91); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray91), "[10.0, 97.0]"); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false); org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); }
public void test0553() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0553"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sin(); double double4 = complex3.getImaginary(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex8.sinh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex9.pow(complex11); org.apache.commons.math.complex.Complex complex15 = complex11.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sin(); double double19 = complex18.getArgument(); org.apache.commons.math.complex.Complex complex20 = complex15.multiply(complex18); org.apache.commons.math.complex.Complex complex21 = complex18.sin(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex23 = complex21.add(complex22); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex26 = complex25.negate(); org.apache.commons.math.complex.Complex complex27 = complex26.sinh(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.negate(); org.apache.commons.math.complex.Complex complex30 = complex27.pow(complex29); org.apache.commons.math.complex.Complex complex33 = complex29.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex34 = complex33.negate(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex36 = complex35.sin(); double double37 = complex36.getArgument(); org.apache.commons.math.complex.Complex complex38 = complex33.multiply(complex36); org.apache.commons.math.complex.Complex complex39 = complex38.tanh(); org.apache.commons.math.complex.Complex complex40 = complex24.add(complex38); org.apache.commons.math.complex.Complex complex41 = complex21.divide(complex40); org.apache.commons.math.complex.Complex complex42 = complex21.conjugate(); boolean boolean43 = complex1.equals((java.lang.Object) complex42); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); }
public void test0554() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0554"); int int3 = org.apache.commons.math.util.MathUtils.compareTo((double) (byte) -1, 0.0d, 0.988883962592342d); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test0555() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0555"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getArgument(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow((double) 20); java.lang.String str7 = complex6.toString(); org.apache.commons.math.complex.Complex complex8 = complex1.add(complex6); org.apache.commons.math.complex.Complex complex9 = complex8.conjugate(); java.lang.Class<?> wildcardClass10 = complex9.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(1.0, 0.0)" + "'", str7, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(wildcardClass10); }
public void test0556() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0556"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0d, (double) (-1.4753463E9f)); }
public void test0557() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0557"); double double3 = org.apache.commons.math.util.MathUtils.reduce((-2.0452919197856156E14d), 0.0d, (double) (-1944488865)); org.junit.Assert.assertTrue(Double.isNaN(double3)); }
public void test0558() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0558"); double[] doubleArray2 = new double[] { 2.718281828459045d, '#' }; int int3 = org.apache.commons.math.util.MathUtils.hash(doubleArray2); double[] doubleArray4 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray2); int int5 = org.apache.commons.math.util.MathUtils.hash(doubleArray2); org.apache.commons.math.util.MathUtils.checkOrder(doubleArray2); int int7 = org.apache.commons.math.util.MathUtils.hash(doubleArray2); org.junit.Assert.assertNotNull(doubleArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[2.718281828459045, 35.0]"); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-680745026) + "'", int3 == (-680745026)); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[2.718281828459045, 35.0]"); org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-680745026) + "'", int5 == (-680745026)); org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-680745026) + "'", int7 == (-680745026)); }
public void test0559() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0559"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); double double5 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.tan(); org.apache.commons.math.complex.Complex complex7 = complex3.sinh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.14168768474935d + "'", double5 == 2.14168768474935d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test0560() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0560"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(152.0d, 6.8074502500001E8d, 1.7117213862158724d); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0561() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0561"); // The following exception was thrown during execution in test generation try { double double3 = org.apache.commons.math.util.MathUtils.round((-23.51232007245213d), (int) (short) 1, 32); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0562() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0562"); double double1 = org.apache.commons.math.util.FastMath.expm1(6.283185307179586d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 534.4916555247646d + "'", double1 == 534.4916555247646d); }
public void test0563() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0563"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((-3.141592653589793d), (double) (byte) 1); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField9 = complex8.getField(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex8); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex14 = complex13.sin(); double double15 = complex14.getImaginary(); org.apache.commons.math.complex.Complex complex16 = complex14.exp(); org.apache.commons.math.complex.Complex complex17 = complex12.multiply(complex14); org.apache.commons.math.complex.Complex complex18 = complex8.pow(complex12); java.lang.Object obj19 = complex12.readResolve(); org.apache.commons.math.complex.Complex complex20 = complex12.conjugate(); org.apache.commons.math.complex.Complex complex21 = complex4.add(complex20); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complexField9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(obj19); org.junit.Assert.assertEquals(obj19.toString(), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); }
public void test0564() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0564"); double double8 = org.apache.commons.math.util.MathUtils.linearCombination(0.5063656411097562d, (double) 32L, (double) 152.00002f, (double) 35.0f, 3.58351893845611d, (double) 1655309493, 3.7134519488162506E113d, (double) (-422604638)); org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.569322016559886E122d) + "'", double8 == (-1.569322016559886E122d)); }
public void test0565() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0565"); long long2 = org.apache.commons.math.util.MathUtils.pow((long) (short) 0, 52L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test0566() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0566"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex4.log(); org.apache.commons.math.complex.Complex complex12 = complex4.createComplex((-0.014112307511333414d), 142.0d); org.apache.commons.math.complex.Complex complex13 = complex12.exp(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test0567() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0567"); long long2 = org.apache.commons.math.util.FastMath.min(1410064706L, (long) 32); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 32L + "'", long2 == 32L); }
public void test0568() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0568"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.exception.util.Localizable localizable12 = null; java.lang.Object[] objArray13 = null; org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex10, localizable12, objArray13); org.apache.commons.math.complex.Complex complex16 = complex10.add(4.9E-324d); org.apache.commons.math.complex.Complex complex17 = complex10.atan(); org.apache.commons.math.complex.Complex complex20 = complex17.createComplex((-0.9999999999999999d), 0.9234560495448352d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); }
public void test0569() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0569"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getArgument(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow((double) 20); java.lang.String str7 = complex6.toString(); org.apache.commons.math.complex.Complex complex8 = complex1.add(complex6); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField9 = complex8.getField(); org.apache.commons.math.complex.Complex complex10 = complexField9.getZero(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(1.0, 0.0)" + "'", str7, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complexField9); org.junit.Assert.assertNotNull(complex10); }
public void test0570() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0570"); double double1 = org.apache.commons.math.util.FastMath.acos(0.9991725119165937d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.040684204093244615d + "'", double1 == 0.040684204093244615d); }
public void test0571() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0571"); double double3 = org.apache.commons.math.util.MathUtils.round(0.9696933989557338d, 9, 0); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.969693399d + "'", double3 == 0.969693399d); }
public void test0572() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0572"); float float1 = org.apache.commons.math.util.MathUtils.sign(10240.0f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0573() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0573"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; java.lang.Object[] objArray3 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException4 = new org.apache.commons.math.exception.MathArithmeticException(localizable1, objArray3); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException5 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, objArray3); org.apache.commons.math.exception.NullArgumentException nullArgumentException6 = new org.apache.commons.math.exception.NullArgumentException(); org.apache.commons.math.exception.util.Localizable localizable7 = null; org.apache.commons.math.exception.util.Localizable localizable8 = null; java.lang.Object[] objArray10 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException11 = new org.apache.commons.math.exception.MathArithmeticException(localizable8, objArray10); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException12 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable7, objArray10); java.lang.Throwable throwable13 = mathIllegalArgumentException12.getException(); nullArgumentException6.addSuppressed((java.lang.Throwable) mathIllegalArgumentException12); mathIllegalArgumentException5.addSuppressed((java.lang.Throwable) mathIllegalArgumentException12); org.junit.Assert.assertNotNull(objArray3); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[1.0]"); org.junit.Assert.assertNotNull(objArray10); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[1.0]"); org.junit.Assert.assertNotNull(throwable13); }
public void test0574() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0574"); int[] intArray0 = null; // The following exception was thrown during execution in test generation try { int[] intArray2 = org.apache.commons.math.util.MathUtils.copyOf(intArray0, 0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test0575() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0575"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sin(); org.apache.commons.math.complex.Complex complex6 = complex4.pow((double) 1L); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); org.apache.commons.math.complex.Complex complex10 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z(); org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = complex6.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex1.subtract(complex12); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField15 = complex12.getField(); org.apache.commons.math.complex.Complex complex16 = complex12.cosh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complexField15); org.junit.Assert.assertNotNull(complex16); }
public void test0576() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0576"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (byte) 100); boolean boolean2 = notPositiveException1.getBoundIsAllowed(); java.lang.Throwable throwable3 = null; // The following exception was thrown during execution in test generation try { notPositiveException1.addSuppressed(throwable3); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception."); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test0577() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0577"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(52.0d, 1.7720496304913849d); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex5 = complex2.divide(complex4); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.03406469512736676d + "'", double3 == 0.03406469512736676d); }
public void test0578() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0578"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 'a'); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow((double) 20); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex2); org.apache.commons.math.complex.Complex complex7 = complex6.sinh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test0579() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0579"); long long2 = org.apache.commons.math.util.FastMath.max(692626318L, (long) 0); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 692626318L + "'", long2 == 692626318L); }
public void test0580() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0580"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(0.03406469512736676d, (double) 680745024L, 1.5707963267948966d); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0581() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0581"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray9 = null; double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); boolean boolean16 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray13); double[] doubleArray17 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13); double[] doubleArray21 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray23 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray21, (int) (short) 0); double[] doubleArray26 = new double[] { (-1), (byte) 100 }; double double27 = org.apache.commons.math.util.MathUtils.distance1(doubleArray23, doubleArray26); boolean boolean28 = org.apache.commons.math.util.MathUtils.equals(doubleArray17, doubleArray23); double[] doubleArray30 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 101); boolean boolean31 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray8, doubleArray17); double[] doubleArray32 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17); double[] doubleArray33 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray32); double double34 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray33); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.00999950005d + "'", double34 == 100.00999950005d); }
public void test0582() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0582"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex4.acos(); org.apache.commons.math.complex.ComplexField complexField6 = complex5.getField(); org.apache.commons.math.complex.Complex complex7 = complex5.exp(); org.apache.commons.math.complex.Complex complex8 = complex5.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complexField6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test0583() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0583"); double double1 = org.apache.commons.math.util.FastMath.asinh(1.000275677244996d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.8815685068348507d + "'", double1 == 0.8815685068348507d); }
public void test0584() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0584"); double double1 = org.apache.commons.math.util.MathUtils.sign(4.22604638E8d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0585() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0585"); double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientLog((int) ' ', 6); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 13.717006483102935d + "'", double2 == 13.717006483102935d); }
public void test0586() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0586"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(6.046900376997055E-14d); }
public void test0587() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0587"); double[] doubleArray0 = null; org.apache.commons.math.util.MathUtils.OrderDirection orderDirection7 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException9 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 5, (java.lang.Number) 100.0f, (-1), orderDirection7, true); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException11 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (-0.6276125002048193d), (java.lang.Number) 74.61303542254257d, 520, orderDirection7, true); double[] doubleArray15 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray17 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray15, (int) (short) 0); double[] doubleArray20 = new double[] { (-1), (byte) 100 }; double double21 = org.apache.commons.math.util.MathUtils.distance1(doubleArray17, doubleArray20); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection22 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean25 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray20, orderDirection22, false, true); double[] doubleArray29 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray31 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray29, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection32 = null; double[] doubleArray35 = new double[] { 0.0f, 0.0f }; double[] doubleArray38 = new double[] { 0.0f, 0.0f }; double[] doubleArray41 = new double[] { 0.0f, 0.0f }; double[] doubleArray44 = new double[] { 0.0f, 0.0f }; double[] doubleArray47 = new double[] { 0.0f, 0.0f }; double[][] doubleArray48 = new double[][] { doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray31, orderDirection32, doubleArray48); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray20, doubleArray48); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray0, orderDirection7, doubleArray48); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection7.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection22 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection22.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); }
public void test0588() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0588"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); org.apache.commons.math.complex.Complex complex4 = complex0.exp(); org.apache.commons.math.complex.Complex complex5 = complex0.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test0589() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0589"); double double2 = org.apache.commons.math.util.MathUtils.round((double) 680745023, 702); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 6.80745023E8d + "'", double2 == 6.80745023E8d); }
public void test0590() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0590"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-96.96651530265808d), (double) (-680745036L)); }
public void test0591() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0591"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(1.07957453E9f, (float) 47000); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0592() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0592"); double double1 = org.apache.commons.math.util.FastMath.cosh(52.00000000000001d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.915504000358302E22d + "'", double1 == 1.915504000358302E22d); }
public void test0593() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0593"); double double1 = org.apache.commons.math.util.MathUtils.factorialDouble((int) 'a'); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 9.619275968248924E151d + "'", double1 == 9.619275968248924E151d); }
public void test0594() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0594"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder(0.7945982305639963d, 17.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.7945982305639963d + "'", double2 == 0.7945982305639963d); }
public void test0595() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0595"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 'a'); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow((double) 20); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex2); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex9 = complex7.pow((double) 6.591783E31f); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex14 = complex13.negate(); org.apache.commons.math.complex.Complex complex16 = complex13.pow((double) 20); java.lang.String str17 = complex16.toString(); org.apache.commons.math.complex.Complex complex18 = complex11.add(complex16); boolean boolean19 = complex9.equals((java.lang.Object) complex11); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(1.0, 0.0)" + "'", str17, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test0596() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0596"); int int2 = org.apache.commons.math.util.MathUtils.subAndCheck((-680745026), 63); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-680745089) + "'", int2 == (-680745089)); }
public void test0597() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0597"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex3 = complex2.conjugate(); org.apache.commons.math.complex.Complex complex4 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test0598() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0598"); float float1 = org.apache.commons.math.util.FastMath.abs(760.0f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 760.0f + "'", float1 == 760.0f); }
public void test0599() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0599"); long long1 = org.apache.commons.math.util.FastMath.abs(5L); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 5L + "'", long1 == 5L); }
public void test0600() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0600"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex3 = complex2.atan(); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test0601() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0601"); double double1 = org.apache.commons.math.util.FastMath.ulp(0.5496225549463801d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.1102230246251565E-16d + "'", double1 == 1.1102230246251565E-16d); }
public void test0602() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0602"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex3 = complex1.divide((double) 1079574528); org.apache.commons.math.complex.Complex complex5 = complex1.divide((double) (-680745024)); org.apache.commons.math.complex.Complex complex7 = complex5.pow(12.0d); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.sin(); org.apache.commons.math.complex.Complex complex10 = complex8.sinh(); org.apache.commons.math.complex.Complex complex13 = complex10.createComplex(52.009614495783374d, 0.0d); org.apache.commons.math.complex.Complex complex14 = complex13.acos(); org.apache.commons.math.complex.Complex complex15 = complex14.tan(); org.apache.commons.math.complex.Complex complex16 = complex7.divide(complex14); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); }
public void test0603() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0603"); int int3 = org.apache.commons.math.util.MathUtils.compareTo((double) (-680745036L), 1.5637759922702318E-209d, 1475346432); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test0604() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0604"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex5.sqrt(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex8.sinh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex9.pow(complex11); org.apache.commons.math.complex.Complex complex15 = complex11.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sin(); double double19 = complex18.getArgument(); org.apache.commons.math.complex.Complex complex20 = complex15.multiply(complex18); org.apache.commons.math.complex.Complex complex21 = complex18.sin(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex23 = complex21.add(complex22); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex26 = complex25.negate(); org.apache.commons.math.complex.Complex complex27 = complex26.sinh(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.negate(); org.apache.commons.math.complex.Complex complex30 = complex27.pow(complex29); org.apache.commons.math.complex.Complex complex33 = complex29.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex34 = complex33.negate(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex36 = complex35.sin(); double double37 = complex36.getArgument(); org.apache.commons.math.complex.Complex complex38 = complex33.multiply(complex36); org.apache.commons.math.complex.Complex complex39 = complex38.tanh(); org.apache.commons.math.complex.Complex complex40 = complex24.add(complex38); org.apache.commons.math.complex.Complex complex41 = complex21.divide(complex40); org.apache.commons.math.complex.Complex complex42 = complex40.acos(); org.apache.commons.math.complex.Complex complex43 = complex6.multiply(complex40); org.apache.commons.math.complex.Complex complex44 = complex6.asin(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex46 = complex45.sin(); double double47 = complex46.getArgument(); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex49 = complex48.negate(); org.apache.commons.math.complex.Complex complex51 = complex48.pow((double) 20); java.lang.String str52 = complex51.toString(); org.apache.commons.math.complex.Complex complex53 = complex46.add(complex51); org.apache.commons.math.complex.Complex complex54 = complex53.conjugate(); org.apache.commons.math.complex.Complex complex55 = complex6.subtract(complex54); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertTrue("'" + double47 + "' != '" + 0.0d + "'", double47 == 0.0d); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(1.0, 0.0)" + "'", str52, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); }
public void test0605() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0605"); long long2 = org.apache.commons.math.util.MathUtils.pow(1786706395136L, 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L); }
public void test0606() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0606"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray9 = null; boolean boolean10 = org.apache.commons.math.util.MathUtils.equals(doubleArray4, doubleArray9); double[] doubleArray11 = null; double[] doubleArray15 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray17 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray15, (int) (short) 0); boolean boolean18 = org.apache.commons.math.util.MathUtils.equals(doubleArray11, doubleArray15); double[] doubleArray19 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray15); double[] doubleArray20 = null; double[] doubleArray24 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray26 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray24, (int) (short) 0); boolean boolean27 = org.apache.commons.math.util.MathUtils.equals(doubleArray20, doubleArray24); double[] doubleArray28 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray24); double[] doubleArray32 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray34 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray32, (int) (short) 0); double[] doubleArray37 = new double[] { (-1), (byte) 100 }; double double38 = org.apache.commons.math.util.MathUtils.distance1(doubleArray34, doubleArray37); boolean boolean39 = org.apache.commons.math.util.MathUtils.equals(doubleArray28, doubleArray34); double[] doubleArray41 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray28, 101); boolean boolean42 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray19, doubleArray28); double[] doubleArray43 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray28); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection47 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException49 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 5, (java.lang.Number) 100.0f, (-1), orderDirection47, true); java.lang.Number number50 = nonMonotonousSequenceException49.getPrevious(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext51 = nonMonotonousSequenceException49.getContext(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection52 = nonMonotonousSequenceException49.getDirection(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection53 = nonMonotonousSequenceException49.getDirection(); boolean boolean56 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray43, orderDirection53, false, false); double double57 = org.apache.commons.math.util.MathUtils.distance(doubleArray4, doubleArray43); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]"); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]"); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + orderDirection47 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection47.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertEquals("'" + number50 + "' != '" + 100.0f + "'", number50, 100.0f); org.junit.Assert.assertNotNull(exceptionContext51); org.junit.Assert.assertTrue("'" + orderDirection52 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection52.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + orderDirection53 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection53.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); }
public void test0607() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0607"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(142.83907028540895d, 22025.465794806718d); }
public void test0608() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0608"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray9 = null; double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); boolean boolean16 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray13); double[] doubleArray17 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13); double[] doubleArray21 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray23 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray21, (int) (short) 0); double[] doubleArray26 = new double[] { (-1), (byte) 100 }; double double27 = org.apache.commons.math.util.MathUtils.distance1(doubleArray23, doubleArray26); boolean boolean28 = org.apache.commons.math.util.MathUtils.equals(doubleArray17, doubleArray23); double[] doubleArray30 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 101); double double31 = org.apache.commons.math.util.MathUtils.distance(doubleArray8, doubleArray30); double[] doubleArray32 = null; double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); boolean boolean39 = org.apache.commons.math.util.MathUtils.equals(doubleArray32, doubleArray36); double[] doubleArray40 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36); double[] doubleArray44 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray46 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray44, (int) (short) 0); double[] doubleArray49 = new double[] { (-1), (byte) 100 }; double double50 = org.apache.commons.math.util.MathUtils.distance1(doubleArray46, doubleArray49); boolean boolean51 = org.apache.commons.math.util.MathUtils.equals(doubleArray40, doubleArray46); boolean boolean52 = org.apache.commons.math.util.MathUtils.equals(doubleArray30, doubleArray46); org.apache.commons.math.exception.util.Localizable localizable53 = null; org.apache.commons.math.exception.util.Localizable localizable54 = null; org.apache.commons.math.exception.util.Localizable localizable55 = null; org.apache.commons.math.exception.util.Localizable localizable57 = null; double[] doubleArray61 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray63 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray61, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection64 = null; double[] doubleArray67 = new double[] { 0.0f, 0.0f }; double[] doubleArray70 = new double[] { 0.0f, 0.0f }; double[] doubleArray73 = new double[] { 0.0f, 0.0f }; double[] doubleArray76 = new double[] { 0.0f, 0.0f }; double[] doubleArray79 = new double[] { 0.0f, 0.0f }; double[][] doubleArray80 = new double[][] { doubleArray67, doubleArray70, doubleArray73, doubleArray76, doubleArray79 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray63, orderDirection64, doubleArray80); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable57, (java.lang.Object[]) doubleArray80); org.apache.commons.math.exception.NullArgumentException nullArgumentException83 = new org.apache.commons.math.exception.NullArgumentException(localizable55, (java.lang.Object[]) doubleArray80); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException84 = new org.apache.commons.math.exception.MathArithmeticException(localizable54, (java.lang.Object[]) doubleArray80); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException85 = new org.apache.commons.math.exception.MathArithmeticException(localizable53, (java.lang.Object[]) doubleArray80); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray30, doubleArray80); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 2 != 101"); } catch (org.apache.commons.math.exception.DimensionMismatchException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray70); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray73); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray80); }
public void test0609() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0609"); double[] doubleArray0 = null; double[] doubleArray1 = null; // The following exception was thrown during execution in test generation try { double double2 = org.apache.commons.math.util.MathUtils.linearCombination(doubleArray0, doubleArray1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test0610() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0610"); double double4 = org.apache.commons.math.util.MathUtils.linearCombination((double) 1028, 5.142740179855262E-10d, 9.429343653260479E35d, 0.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 5.286736904891208E-7d + "'", double4 == 5.286736904891208E-7d); }
public void test0611() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0611"); double double1 = org.apache.commons.math.util.FastMath.sqrt(5.480656284001007d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.3410801532628067d + "'", double1 == 2.3410801532628067d); }
public void test0612() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0612"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex14 = complex13.negate(); org.apache.commons.math.complex.Complex complex15 = complex14.cosh(); java.lang.Object obj16 = complex14.readResolve(); double double17 = complex14.abs(); org.apache.commons.math.complex.Complex complex19 = complex14.pow(Double.NEGATIVE_INFINITY); org.apache.commons.math.complex.Complex complex20 = complex11.pow(complex19); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField21 = complex20.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(obj16); org.junit.Assert.assertEquals(obj16.toString(), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "(-10.0, -0.0)"); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complexField21); }
public void test0613() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0613"); java.lang.Number number1 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException3 = new org.apache.commons.math.exception.NumberIsTooLargeException((java.lang.Number) (short) 10, number1, true); }
public void test0614() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0614"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray8 = new double[] { (-1), (byte) 100 }; double double9 = org.apache.commons.math.util.MathUtils.distance1(doubleArray5, doubleArray8); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection10 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean13 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray8, orderDirection10, false, true); double[] doubleArray17 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray19 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection20 = null; double[] doubleArray23 = new double[] { 0.0f, 0.0f }; double[] doubleArray26 = new double[] { 0.0f, 0.0f }; double[] doubleArray29 = new double[] { 0.0f, 0.0f }; double[] doubleArray32 = new double[] { 0.0f, 0.0f }; double[] doubleArray35 = new double[] { 0.0f, 0.0f }; double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray19, orderDirection20, doubleArray36); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray8, doubleArray36); double[] doubleArray40 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 152); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.checkOrder(doubleArray40); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NonMonotonousSequenceException; message: points 1 and 2 are not strictly increasing (100 >= 0)"); } catch (org.apache.commons.math.exception.NonMonotonousSequenceException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection10.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); }
public void test0615() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0615"); long long2 = org.apache.commons.math.util.FastMath.max((long) 6, (long) (-1073741823)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 6L + "'", long2 == 6L); }
public void test0616() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0616"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex2.acos(); org.apache.commons.math.complex.Complex complex6 = complex5.cosh(); double double7 = complex6.abs(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 11.5788478635759d + "'", double7 == 11.5788478635759d); }
public void test0617() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0617"); org.apache.commons.math.exception.util.Localizable localizable0 = null; java.lang.Number number1 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException4 = new org.apache.commons.math.exception.NumberIsTooLargeException(localizable0, number1, (java.lang.Number) (-1475346380), true); }
public void test0618() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0618"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complex5.asin(); double double7 = complex6.abs(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); }
public void test0619() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0619"); int int2 = org.apache.commons.math.util.MathUtils.lcm(100, (int) (byte) 1); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100); }
public void test0620() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0620"); float float1 = org.apache.commons.math.util.MathUtils.sign(545.00006f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0621() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0621"); int int1 = org.apache.commons.math.util.MathUtils.hash(37.31321895318116d); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-817456299) + "'", int1 == (-817456299)); }
public void test0622() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0622"); double double1 = org.apache.commons.math.util.MathUtils.cosh(21.031845735274818d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.807451430000002E8d + "'", double1 == 6.807451430000002E8d); }
public void test0623() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0623"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) (short) -1, (java.lang.Number) (-10.0d), true); }
public void test0624() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0624"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; double[] doubleArray5 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection8 = null; double[] doubleArray11 = new double[] { 0.0f, 0.0f }; double[] doubleArray14 = new double[] { 0.0f, 0.0f }; double[] doubleArray17 = new double[] { 0.0f, 0.0f }; double[] doubleArray20 = new double[] { 0.0f, 0.0f }; double[] doubleArray23 = new double[] { 0.0f, 0.0f }; double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray14, doubleArray17, doubleArray20, doubleArray23 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray7, orderDirection8, doubleArray24); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException26 = new org.apache.commons.math.exception.MathArithmeticException(localizable1, (java.lang.Object[]) doubleArray24); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException27 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) doubleArray24); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray24); }
public void test0625() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0625"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex3 = complex2.conjugate(); org.apache.commons.math.complex.Complex complex4 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.sin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test0626() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0626"); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection6 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException8 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 5, (java.lang.Number) 100.0f, (-1), orderDirection6, true); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException10 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (-0.6276125002048193d), (java.lang.Number) 74.61303542254257d, 520, orderDirection6, true); int int11 = nonMonotonousSequenceException10.getIndex(); org.junit.Assert.assertTrue("'" + orderDirection6 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection6.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + int11 + "' != '" + 520 + "'", int11 == 520); }
public void test0627() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0627"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex13.tanh(); org.apache.commons.math.complex.Complex complex15 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex16 = complex14.multiply(complex15); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); }
public void test0628() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0628"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex4 = complex1.pow(35.0d); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.sin(); org.apache.commons.math.complex.Complex complex7 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex8 = complex6.subtract(complex7); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); }
public void test0629() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0629"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder(10002.0d, (double) 35L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-8.0d) + "'", double2 == (-8.0d)); }
public void test0630() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0630"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); java.lang.String str9 = complex4.toString(); org.apache.commons.math.complex.Complex complex10 = complex4.atan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1.0, -0.0)" + "'", str9, "(-1.0, -0.0)"); org.junit.Assert.assertNotNull(complex10); }
public void test0631() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0631"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, 0); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray7); // The following exception was thrown during execution in test generation try { double[] doubleArray10 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray7, 0.0d); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: array sums to zero"); } catch (org.apache.commons.math.exception.MathArithmeticException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); }
public void test0632() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0632"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((-4.9E-324d)); org.junit.Assert.assertNotNull(complex1); }
public void test0633() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0633"); int int2 = org.apache.commons.math.util.MathUtils.lcm((-680745026), 6); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2042235078 + "'", int2 == 2042235078); }
public void test0634() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0634"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); int[] intArray6 = new int[] { 52, 6, 'a', 680745024 }; int[] intArray9 = new int[] { (byte) 100, 10 }; int[] intArray15 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double16 = org.apache.commons.math.util.MathUtils.distance(intArray9, intArray15); int[] intArray18 = org.apache.commons.math.util.MathUtils.copyOf(intArray15, (int) (byte) 10); int int19 = org.apache.commons.math.util.MathUtils.distanceInf(intArray6, intArray18); int[] intArray22 = new int[] { (byte) 100, 10 }; int[] intArray28 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double29 = org.apache.commons.math.util.MathUtils.distance(intArray22, intArray28); int[] intArray32 = new int[] { (byte) 100, 10 }; int[] intArray38 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double39 = org.apache.commons.math.util.MathUtils.distance(intArray32, intArray38); int int40 = org.apache.commons.math.util.MathUtils.distanceInf(intArray22, intArray38); double double41 = org.apache.commons.math.util.MathUtils.distance(intArray6, intArray38); int[] intArray44 = new int[] { (byte) 100, 10 }; int[] intArray50 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double51 = org.apache.commons.math.util.MathUtils.distance(intArray44, intArray50); int[] intArray54 = new int[] { (byte) 100, 10 }; int[] intArray60 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double61 = org.apache.commons.math.util.MathUtils.distance(intArray54, intArray60); double double62 = org.apache.commons.math.util.MathUtils.distance(intArray50, intArray60); int[] intArray63 = org.apache.commons.math.util.MathUtils.copyOf(intArray50); int[] intArray66 = new int[] { (byte) 100, 10 }; int[] intArray72 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double73 = org.apache.commons.math.util.MathUtils.distance(intArray66, intArray72); int[] intArray76 = new int[] { (byte) 100, 10 }; int[] intArray82 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double83 = org.apache.commons.math.util.MathUtils.distance(intArray76, intArray82); double double84 = org.apache.commons.math.util.MathUtils.distance(intArray72, intArray82); int[] intArray85 = org.apache.commons.math.util.MathUtils.copyOf(intArray72); double double86 = org.apache.commons.math.util.MathUtils.distance(intArray50, intArray85); int[] intArray87 = org.apache.commons.math.util.MathUtils.copyOf(intArray85); int[] intArray88 = org.apache.commons.math.util.MathUtils.copyOf(intArray85); int[] intArray90 = org.apache.commons.math.util.MathUtils.copyOf(intArray88, 126); double double91 = org.apache.commons.math.util.MathUtils.distance(intArray6, intArray88); int[] intArray93 = org.apache.commons.math.util.MathUtils.copyOf(intArray88, 0); boolean boolean94 = complex1.equals((java.lang.Object) 0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(intArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[52, 6, 97, 680745024]"); org.junit.Assert.assertNotNull(intArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[100, 10]"); org.junit.Assert.assertNotNull(intArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 104.04806581575652d + "'", double16 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 680745023 + "'", int19 == 680745023); org.junit.Assert.assertNotNull(intArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[100, 10]"); org.junit.Assert.assertNotNull(intArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 104.04806581575652d + "'", double29 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[100, 10]"); org.junit.Assert.assertNotNull(intArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 104.04806581575652d + "'", double39 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int40 + "' != '" + 101 + "'", int40 == 101); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 6.807450230000095E8d + "'", double41 == 6.807450230000095E8d); org.junit.Assert.assertNotNull(intArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[100, 10]"); org.junit.Assert.assertNotNull(intArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 104.04806581575652d + "'", double51 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[100, 10]"); org.junit.Assert.assertNotNull(intArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 104.04806581575652d + "'", double61 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertNotNull(intArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray66); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[100, 10]"); org.junit.Assert.assertNotNull(intArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double73 + "' != '" + 104.04806581575652d + "'", double73 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[100, 10]"); org.junit.Assert.assertNotNull(intArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 104.04806581575652d + "'", double83 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d); org.junit.Assert.assertNotNull(intArray85); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(intArray87); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray88); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray90); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray90), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 6.807450230000095E8d + "'", double91 == 6.807450230000095E8d); org.junit.Assert.assertNotNull(intArray93); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[]"); org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false); }
public void test0635() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0635"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals(1.0f, (float) 5, (float) 10240); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); }
public void test0636() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0636"); double double1 = org.apache.commons.math.util.FastMath.asin((-100.0d)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0637() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0637"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.cosh(); java.lang.Object obj4 = complex2.readResolve(); org.apache.commons.math.complex.Complex complex6 = complex2.divide((double) 1079574528L); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(obj4); org.junit.Assert.assertEquals(obj4.toString(), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "(-10.0, -0.0)"); org.junit.Assert.assertNotNull(complex6); }
public void test0638() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0638"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray8 = new double[] { (-1), (byte) 100 }; double double9 = org.apache.commons.math.util.MathUtils.distance1(doubleArray5, doubleArray8); double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); double[] doubleArray18 = new double[] { (-1), (byte) 100 }; double double19 = org.apache.commons.math.util.MathUtils.distance1(doubleArray15, doubleArray18); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection20 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean23 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray18, orderDirection20, false, true); double[] doubleArray27 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray29 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray27, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection30 = null; double[] doubleArray33 = new double[] { 0.0f, 0.0f }; double[] doubleArray36 = new double[] { 0.0f, 0.0f }; double[] doubleArray39 = new double[] { 0.0f, 0.0f }; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[][] doubleArray46 = new double[][] { doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray29, orderDirection30, doubleArray46); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray18, doubleArray46); boolean boolean49 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray18); double[] doubleArray53 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray55 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray53, (int) (short) 0); double[] doubleArray58 = new double[] { (-1), (byte) 100 }; double double59 = org.apache.commons.math.util.MathUtils.distance1(doubleArray55, doubleArray58); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection60 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean63 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray58, orderDirection60, false, true); double[] doubleArray67 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray69 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray67, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection70 = null; double[] doubleArray73 = new double[] { 0.0f, 0.0f }; double[] doubleArray76 = new double[] { 0.0f, 0.0f }; double[] doubleArray79 = new double[] { 0.0f, 0.0f }; double[] doubleArray82 = new double[] { 0.0f, 0.0f }; double[] doubleArray85 = new double[] { 0.0f, 0.0f }; double[][] doubleArray86 = new double[][] { doubleArray73, doubleArray76, doubleArray79, doubleArray82, doubleArray85 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray69, orderDirection70, doubleArray86); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray58, doubleArray86); double[] doubleArray90 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray58, 152); double[] doubleArray91 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray90); boolean boolean92 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray18, doubleArray90); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection20 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection20.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection60 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection60.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray69); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[]"); org.junit.Assert.assertNotNull(doubleArray73); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray85); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray86); org.junit.Assert.assertNotNull(doubleArray90); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray91); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false); }
public void test0639() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0639"); double double1 = org.apache.commons.math.util.FastMath.expm1(1.2034990072150236d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.331754383710714d + "'", double1 == 2.331754383710714d); }
public void test0640() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0640"); double double1 = org.apache.commons.math.util.FastMath.rint((double) 135); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 135.0d + "'", double1 == 135.0d); }
public void test0641() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0641"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex8.sinh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex9.pow(complex11); org.apache.commons.math.complex.Complex complex15 = complex11.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sin(); double double19 = complex18.getArgument(); org.apache.commons.math.complex.Complex complex20 = complex15.multiply(complex18); org.apache.commons.math.complex.Complex complex21 = complex18.sin(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex23 = complex21.add(complex22); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = complex24.sqrt(); org.apache.commons.math.complex.Complex complex26 = complex25.sin(); org.apache.commons.math.complex.Complex complex28 = complex26.pow((double) 1L); org.apache.commons.math.complex.Complex complex29 = complex23.pow(complex26); org.apache.commons.math.complex.Complex complex30 = complex3.divide(complex26); boolean boolean31 = complex3.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); }
public void test0642() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0642"); double double2 = org.apache.commons.math.util.FastMath.hypot((double) (-680745013), 1.073741871E9d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.2713517917016325E9d + "'", double2 == 1.2713517917016325E9d); }
public void test0643() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0643"); double double1 = org.apache.commons.math.util.FastMath.acos((double) 36.000004f); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0644() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0644"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex3 = complex1.divide((double) 1079574528); org.apache.commons.math.complex.Complex complex5 = complex1.divide((double) (-680745024)); java.lang.Object obj6 = complex1.readResolve(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(obj6); org.junit.Assert.assertEquals(obj6.toString(), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "(1.401298464324817E-45, 0.0)"); }
public void test0645() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0645"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (short) -1, (-0.8414709848078965d)); org.junit.Assert.assertNotNull(complex2); }
public void test0646() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0646"); int int2 = org.apache.commons.math.util.MathUtils.pow((-1475346432), (long) 1410064706); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test0647() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0647"); double double2 = org.apache.commons.math.util.FastMath.max(0.0d, (double) 388L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 388.0d + "'", double2 == 388.0d); }
public void test0648() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0648"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex4 = complex1.subtract(complex3); org.apache.commons.math.complex.Complex complex5 = complex4.sinh(); java.lang.String str6 = complex5.toString(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(0.0, 0.0)" + "'", str6, "(0.0, 0.0)"); }
public void test0649() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0649"); double double1 = org.apache.commons.math.util.FastMath.abs(202.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 202.0d + "'", double1 == 202.0d); }
public void test0650() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0650"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(0.999953813823498d, (double) 0); org.junit.Assert.assertNotNull(complex2); }
public void test0651() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0651"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); org.apache.commons.math.complex.Complex complex4 = complex0.tanh(); org.apache.commons.math.complex.Complex complex5 = complex0.sin(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.sin(); org.apache.commons.math.complex.Complex complex9 = complex7.subtract(1.0d); org.apache.commons.math.complex.Complex complex11 = complex9.subtract((double) 96); org.apache.commons.math.complex.Complex complex12 = complex0.pow(complex9); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test0652() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0652"); // The following exception was thrown during execution in test generation try { double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientLog(29, (int) ' '); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: must have n >= k for binomial coefficient (n, k), got k = 32, n = 29"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } }
public void test0653() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0653"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((float) ' ', 0.0f, 1073741824); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0654() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0654"); int int2 = org.apache.commons.math.util.MathUtils.gcd((-422604638), (-1475346380)); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2); }
public void test0655() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0655"); int int1 = org.apache.commons.math.util.FastMath.getExponent((float) (-1475346432)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 30 + "'", int1 == 30); }
public void test0656() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0656"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.sin(); double double6 = complex5.getImaginary(); double double7 = complex5.getReal(); org.apache.commons.math.complex.Complex complex8 = complex3.multiply(complex5); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex11.sinh(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex14 = complex13.negate(); org.apache.commons.math.complex.Complex complex15 = complex12.pow(complex14); org.apache.commons.math.complex.Complex complex18 = complex14.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex21 = complex20.sin(); double double22 = complex21.getArgument(); org.apache.commons.math.complex.Complex complex23 = complex18.multiply(complex21); org.apache.commons.math.complex.Complex complex24 = complex23.tanh(); org.apache.commons.math.complex.Complex complex25 = complex9.add(complex23); org.apache.commons.math.complex.Complex complex26 = complex9.sinh(); org.apache.commons.math.complex.Complex complex27 = complex8.subtract(complex9); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField30 = complex28.getField(); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex32 = complex31.sqrt(); org.apache.commons.math.complex.Complex complex33 = complex31.log(); org.apache.commons.math.complex.Complex complex34 = complex28.add(complex31); org.apache.commons.math.complex.Complex complex35 = complex27.add(complex28); org.apache.commons.math.complex.Complex complex36 = complex27.log(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.8414709848078965d + "'", double7 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complexField30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); }
public void test0657() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0657"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.util.Localizable localizable4 = null; double[] doubleArray8 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray10 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection11 = null; double[] doubleArray14 = new double[] { 0.0f, 0.0f }; double[] doubleArray17 = new double[] { 0.0f, 0.0f }; double[] doubleArray20 = new double[] { 0.0f, 0.0f }; double[] doubleArray23 = new double[] { 0.0f, 0.0f }; double[] doubleArray26 = new double[] { 0.0f, 0.0f }; double[][] doubleArray27 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23, doubleArray26 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray10, orderDirection11, doubleArray27); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable4, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.NullArgumentException nullArgumentException30 = new org.apache.commons.math.exception.NullArgumentException(localizable2, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException31 = new org.apache.commons.math.exception.MathArithmeticException(localizable1, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException32 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray27); java.lang.Throwable throwable33 = mathArithmeticException32.getException(); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertNotNull(throwable33); }
public void test0658() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0658"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((double) 1.0f, 5.142740179855262E-10d, 29); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0659() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0659"); float[] floatArray6 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray9 = new float[] { ' ', 10240.0f }; boolean boolean10 = org.apache.commons.math.util.MathUtils.equals(floatArray6, floatArray9); float[] floatArray17 = new float[] { 0, 10240.0f, (byte) 0, (short) 0, ' ', 1.0f }; float[] floatArray24 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray27 = new float[] { ' ', 10240.0f }; boolean boolean28 = org.apache.commons.math.util.MathUtils.equals(floatArray24, floatArray27); boolean boolean29 = org.apache.commons.math.util.MathUtils.equals(floatArray17, floatArray24); float[] floatArray36 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray39 = new float[] { ' ', 10240.0f }; boolean boolean40 = org.apache.commons.math.util.MathUtils.equals(floatArray36, floatArray39); boolean boolean41 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray17, floatArray39); float[] floatArray48 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray51 = new float[] { ' ', 10240.0f }; boolean boolean52 = org.apache.commons.math.util.MathUtils.equals(floatArray48, floatArray51); float[] floatArray59 = new float[] { 0, 10240.0f, (byte) 0, (short) 0, ' ', 1.0f }; float[] floatArray66 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray69 = new float[] { ' ', 10240.0f }; boolean boolean70 = org.apache.commons.math.util.MathUtils.equals(floatArray66, floatArray69); boolean boolean71 = org.apache.commons.math.util.MathUtils.equals(floatArray59, floatArray66); float[] floatArray78 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray81 = new float[] { ' ', 10240.0f }; boolean boolean82 = org.apache.commons.math.util.MathUtils.equals(floatArray78, floatArray81); boolean boolean83 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray59, floatArray81); boolean boolean84 = org.apache.commons.math.util.MathUtils.equals(floatArray51, floatArray81); boolean boolean85 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray39, floatArray51); boolean boolean86 = org.apache.commons.math.util.MathUtils.equals(floatArray9, floatArray51); float[] floatArray87 = null; boolean boolean88 = org.apache.commons.math.util.MathUtils.equals(floatArray51, floatArray87); org.junit.Assert.assertNotNull(floatArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(floatArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0, 10240.0, 0.0, 0.0, 32.0, 1.0]"); org.junit.Assert.assertNotNull(floatArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(floatArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(floatArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(floatArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[0.0, 10240.0, 0.0, 0.0, 32.0, 1.0]"); org.junit.Assert.assertNotNull(floatArray66); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray66), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray69); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray69), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertNotNull(floatArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray78), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray81); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray81), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true); org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true); org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false); }
public void test0660() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0660"); java.lang.Number number1 = null; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 66.97680939587865d, number1, 123725); }
public void test0661() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0661"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((float) 1655309493L, (float) (byte) 100, (float) 135); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0662() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0662"); org.apache.commons.math.exception.util.Localizable localizable0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); double[] doubleArray9 = new double[] { (-1), (byte) 100 }; double double10 = org.apache.commons.math.util.MathUtils.distance1(doubleArray6, doubleArray9); double[] doubleArray12 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray9, 100); org.apache.commons.math.exception.util.Localizable localizable13 = null; org.apache.commons.math.exception.util.Localizable localizable14 = null; org.apache.commons.math.exception.util.Localizable localizable15 = null; java.lang.Object[] objArray17 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException18 = new org.apache.commons.math.exception.MathArithmeticException(localizable15, objArray17); org.apache.commons.math.exception.NullArgumentException nullArgumentException19 = new org.apache.commons.math.exception.NullArgumentException(localizable14, objArray17); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 100, localizable13, objArray17); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException21 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, objArray17); java.lang.Throwable[] throwableArray22 = mathArithmeticException21.getSuppressed(); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(objArray17); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[1.0]"); org.junit.Assert.assertNotNull(throwableArray22); }
public void test0663() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0663"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex3 = complex2.conjugate(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); boolean boolean5 = complex2.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test0664() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0664"); long long1 = org.apache.commons.math.util.MathUtils.sign(52L); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L); }
public void test0665() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0665"); double double6 = org.apache.commons.math.util.MathUtils.linearCombination(2.995732273553991d, (double) 1079574528, 31226.199834629864d, 1.5860195024861502E15d, 0.0d, (double) 96.00001f); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 4.952536192948688E19d + "'", double6 == 4.952536192948688E19d); }
public void test0666() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0666"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); boolean boolean3 = complex1.isInfinite(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((-3.141592653589793d), (double) (byte) 1); org.apache.commons.math.complex.Complex complex7 = complex1.multiply(complex6); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test0667() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0667"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(1.9073486E-6f, 10.000001f); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0668() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0668"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex7 = complex6.tan(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf(4.9E-324d, 6880.817293923487d); org.apache.commons.math.complex.Complex complex11 = complex10.exp(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply((double) (-1.0f)); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex15.sin(); org.apache.commons.math.complex.Complex complex18 = complex17.negate(); org.apache.commons.math.complex.Complex complex19 = complex10.subtract(complex18); org.apache.commons.math.complex.Complex complex20 = complex7.subtract(complex19); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); }
public void test0669() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0669"); int int2 = org.apache.commons.math.util.MathUtils.gcd(135, (-1810677121)); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0670() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0670"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex4.cosh(); java.lang.Object obj6 = complex5.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(obj6); org.junit.Assert.assertEquals(obj6.toString(), "(1.080317200404131, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "(1.080317200404131, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "(1.080317200404131, 0.0)"); }
public void test0671() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0671"); double double3 = org.apache.commons.math.util.MathUtils.reduce(4.22604639E8d, (double) 702, (double) 1073741871L); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 60.0d + "'", double3 == 60.0d); }
public void test0672() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0672"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.valueOf((-3.141592653589793d), (double) (byte) 1); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField16 = complex15.getField(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex15); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex21 = complex20.sin(); double double22 = complex21.getImaginary(); org.apache.commons.math.complex.Complex complex23 = complex21.exp(); org.apache.commons.math.complex.Complex complex24 = complex19.multiply(complex21); org.apache.commons.math.complex.Complex complex25 = complex15.pow(complex19); org.apache.commons.math.complex.ComplexField complexField26 = complex19.getField(); org.apache.commons.math.complex.Complex complex27 = complex11.divide(complex19); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complexField16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complexField26); org.junit.Assert.assertNotNull(complex27); }
public void test0673() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0673"); float float2 = org.apache.commons.math.util.FastMath.scalb((float) 35L, 1225); org.junit.Assert.assertTrue("'" + float2 + "' != '" + Float.POSITIVE_INFINITY + "'", float2 == Float.POSITIVE_INFINITY); }
public void test0674() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0674"); double double1 = org.apache.commons.math.util.FastMath.atanh(0.8746197065066091d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.3524048139812734d + "'", double1 == 1.3524048139812734d); }
public void test0675() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0675"); float float1 = org.apache.commons.math.util.MathUtils.indicator((float) 6861411028438308063L); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0676() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0676"); double double1 = org.apache.commons.math.util.FastMath.sinh(1.5640924119953337d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.284529170796882d + "'", double1 == 2.284529170796882d); }
public void test0677() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0677"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; org.apache.commons.math.exception.util.Localizable localizable5 = null; double[] doubleArray9 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray11 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray9, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection12 = null; double[] doubleArray15 = new double[] { 0.0f, 0.0f }; double[] doubleArray18 = new double[] { 0.0f, 0.0f }; double[] doubleArray21 = new double[] { 0.0f, 0.0f }; double[] doubleArray24 = new double[] { 0.0f, 0.0f }; double[] doubleArray27 = new double[] { 0.0f, 0.0f }; double[][] doubleArray28 = new double[][] { doubleArray15, doubleArray18, doubleArray21, doubleArray24, doubleArray27 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray11, orderDirection12, doubleArray28); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable5, (java.lang.Object[]) doubleArray28); org.apache.commons.math.exception.NullArgumentException nullArgumentException31 = new org.apache.commons.math.exception.NullArgumentException(localizable3, (java.lang.Object[]) doubleArray28); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException32 = new org.apache.commons.math.exception.MathArithmeticException(localizable2, (java.lang.Object[]) doubleArray28); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException33 = new org.apache.commons.math.exception.MathArithmeticException(localizable1, (java.lang.Object[]) doubleArray28); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException34 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray28); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) mathArithmeticException34); java.lang.Throwable throwable36 = mathArithmeticException34.getException(); // The following exception was thrown during execution in test generation try { java.lang.String str37 = mathArithmeticException34.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertNotNull(throwable36); }
public void test0678() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0678"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (byte) 100); boolean boolean2 = notPositiveException1.getBoundIsAllowed(); java.lang.Number number3 = notPositiveException1.getMin(); java.lang.Number number4 = notPositiveException1.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext5 = notPositiveException1.getContext(); boolean boolean6 = notPositiveException1.getBoundIsAllowed(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertEquals("'" + number3 + "' != '" + 0 + "'", number3, 0); org.junit.Assert.assertEquals("'" + number4 + "' != '" + 0 + "'", number4, 0); org.junit.Assert.assertNotNull(exceptionContext5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); }
public void test0679() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0679"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray9 = null; double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); boolean boolean16 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray13); double[] doubleArray17 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13); double[] doubleArray21 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray23 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray21, (int) (short) 0); double[] doubleArray26 = new double[] { (-1), (byte) 100 }; double double27 = org.apache.commons.math.util.MathUtils.distance1(doubleArray23, doubleArray26); boolean boolean28 = org.apache.commons.math.util.MathUtils.equals(doubleArray17, doubleArray23); double[] doubleArray30 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 101); double double31 = org.apache.commons.math.util.MathUtils.distance(doubleArray8, doubleArray30); double double32 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray8); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.00999950005d + "'", double32 == 100.00999950005d); }
public void test0680() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0680"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex15.sqrt(); org.apache.commons.math.complex.Complex complex69 = complex68.tanh(); boolean boolean70 = complex68.isNaN(); org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.valueOf((double) 'a'); org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex74 = complex73.negate(); org.apache.commons.math.complex.Complex complex76 = complex73.pow((double) 20); org.apache.commons.math.complex.Complex complex77 = complex72.multiply(complex73); org.apache.commons.math.complex.Complex complex78 = complex77.log(); org.apache.commons.math.complex.Complex complex79 = complex68.divide(complex78); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList81 = complex68.nthRoot((-680745024)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -680,745,024"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); }
public void test0681() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0681"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.sin(); double double6 = complex5.getImaginary(); double double7 = complex5.getReal(); org.apache.commons.math.complex.Complex complex8 = complex3.multiply(complex5); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.sin(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex12.pow(complex16); boolean boolean19 = complex17.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex20 = complex10.divide(complex17); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex22.sinh(); double double24 = complex23.getArgument(); org.apache.commons.math.complex.Complex complex25 = complex10.add(complex23); org.apache.commons.math.complex.Complex complex26 = complex3.divide(complex25); org.apache.commons.math.complex.Complex complex28 = complex3.subtract(1.2333506720864293d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.8414709848078965d + "'", double7 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-3.141592653589793d) + "'", double24 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); }
public void test0682() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0682"); org.apache.commons.math.exception.NullArgumentException nullArgumentException0 = new org.apache.commons.math.exception.NullArgumentException(); java.lang.Throwable throwable1 = nullArgumentException0.getException(); java.lang.Throwable throwable2 = nullArgumentException0.getException(); org.junit.Assert.assertNotNull(throwable1); org.junit.Assert.assertEquals(throwable1.getLocalizedMessage(), "null is not allowed"); org.junit.Assert.assertEquals(throwable1.getMessage(), "null is not allowed"); org.junit.Assert.assertEquals(throwable1.toString(), "org.apache.commons.math.exception.NullArgumentException: null is not allowed"); org.junit.Assert.assertNotNull(throwable2); org.junit.Assert.assertEquals(throwable2.getLocalizedMessage(), "null is not allowed"); org.junit.Assert.assertEquals(throwable2.getMessage(), "null is not allowed"); org.junit.Assert.assertEquals(throwable2.toString(), "org.apache.commons.math.exception.NullArgumentException: null is not allowed"); }
public void test0683() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0683"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 1225, (java.lang.Number) 0.9104437791700886d, false); java.lang.Number number5 = numberIsTooSmallException4.getMin(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection9 = org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException11 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 1.4E-45f, (java.lang.Number) 10.000000000000002d, 5, orderDirection9, false); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection12 = nonMonotonousSequenceException11.getDirection(); boolean boolean13 = nonMonotonousSequenceException11.getStrict(); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) nonMonotonousSequenceException11); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 0.9104437791700886d + "'", number5, 0.9104437791700886d); org.junit.Assert.assertTrue("'" + orderDirection9 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING + "'", orderDirection9.equals(org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING)); org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING + "'", orderDirection12.equals(org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING)); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test0684() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0684"); // The following exception was thrown during execution in test generation try { double double3 = org.apache.commons.math.util.MathUtils.round(6.807450230000098E8d, 0, 1015); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0685() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0685"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 6.591783E31f); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.acos(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test0686() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0686"); double double1 = org.apache.commons.math.util.FastMath.signum(1.3292538725897318E24d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0687() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0687"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(0.4768006186402438d); }
public void test0688() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0688"); int int1 = org.apache.commons.math.util.MathUtils.hash((double) '#'); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1078034432 + "'", int1 == 1078034432); }
public void test0689() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0689"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); org.apache.commons.math.complex.Complex complex4 = complex2.pow(2.820129412E9d); org.apache.commons.math.complex.Complex complex5 = complex2.acos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test0690() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0690"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 388.0d); }
public void test0691() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0691"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex5.createComplex(2.776641869012396E30d, 34432.65253429616d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); }
public void test0692() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0692"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException3 = new org.apache.commons.math.exception.DimensionMismatchException(localizable0, 52, (int) (short) 0); int int4 = dimensionMismatchException3.getDimension(); java.lang.Throwable[] throwableArray5 = dimensionMismatchException3.getSuppressed(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0); org.junit.Assert.assertNotNull(throwableArray5); }
public void test0693() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0693"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (-1143), 0.0d); org.junit.Assert.assertNotNull(complex2); }
public void test0694() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0694"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex7 = complex6.tan(); double double8 = complex7.getReal(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex12 = complex9.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z(); java.util.List<org.apache.commons.math.complex.Complex> complexList15 = complex12.nthRoot((int) (byte) 10); org.apache.commons.math.complex.Complex complex16 = complex12.sqrt(); org.apache.commons.math.complex.Complex complex17 = complex7.multiply(complex16); org.apache.commons.math.complex.ComplexField complexField18 = complex16.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.557407724654902d + "'", double8 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complexList15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complexField18); }
public void test0695() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0695"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) 101.00495037373169d); java.lang.Number number3 = notPositiveException2.getMin(); org.junit.Assert.assertEquals("'" + number3 + "' != '" + 0 + "'", number3, 0); }
public void test0696() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0696"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sin(); org.apache.commons.math.complex.Complex complex6 = complex4.pow((double) 1L); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); org.apache.commons.math.complex.Complex complex10 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z(); org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = complex6.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex1.subtract(complex12); org.apache.commons.math.complex.Complex complex15 = complex1.atan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); }
public void test0697() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0697"); double double1 = org.apache.commons.math.util.FastMath.log((double) 6.591783E31f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 73.26596177457596d + "'", double1 == 73.26596177457596d); }
public void test0698() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0698"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); org.apache.commons.math.complex.Complex complex7 = complex5.acos(); org.apache.commons.math.complex.Complex complex8 = complex5.sinh(); org.apache.commons.math.complex.Complex complex9 = complex5.conjugate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); }
public void test0699() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0699"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex4.acos(); org.apache.commons.math.complex.Complex complex6 = complex4.acos(); org.apache.commons.math.complex.Complex complex7 = complex4.asin(); double double8 = complex7.getArgument(); org.apache.commons.math.complex.Complex complex9 = complex7.cosh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 2.806462798927087E-16d + "'", double8 == 2.806462798927087E-16d); org.junit.Assert.assertNotNull(complex9); }
public void test0700() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0700"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 6034498936725L, (double) 1L); org.junit.Assert.assertNotNull(complex2); }
public void test0701() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0701"); double double1 = org.apache.commons.math.util.MathUtils.sign(1.0795745309222884E9d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0702() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0702"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex10 = complex8.subtract((double) (byte) 10); org.apache.commons.math.complex.Complex complex11 = complex6.multiply(complex10); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.I; boolean boolean13 = complex6.equals((java.lang.Object) complex12); org.apache.commons.math.complex.Complex complex14 = complex5.subtract(complex12); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(complex14); }
public void test0703() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0703"); double double1 = org.apache.commons.math.util.FastMath.asinh(0.7855359830222064d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.721333871840397d + "'", double1 == 0.721333871840397d); }
public void test0704() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0704"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex5.pow(complex9); boolean boolean11 = complex9.isInfinite(); org.apache.commons.math.complex.Complex complex12 = complex3.pow(complex9); org.apache.commons.math.complex.Complex complex13 = complex9.atan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test0705() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0705"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); java.util.List<org.apache.commons.math.complex.Complex> complexList16 = complex11.nthRoot(126); double double17 = complex11.abs(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complexList16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.8414709848078965d + "'", double17 == 0.8414709848078965d); }
public void test0706() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0706"); int int2 = org.apache.commons.math.util.FastMath.max(2120811457, 123725); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2120811457 + "'", int2 == 2120811457); }
public void test0707() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0707"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray8 = new double[] { (-1), (byte) 100 }; double double9 = org.apache.commons.math.util.MathUtils.distance1(doubleArray5, doubleArray8); double[] doubleArray11 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 100); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray11); double[] doubleArray13 = null; double[] doubleArray17 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray19 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, (int) (short) 0); boolean boolean20 = org.apache.commons.math.util.MathUtils.equals(doubleArray13, doubleArray17); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); double[] doubleArray30 = new double[] { (-1), (byte) 100 }; double double31 = org.apache.commons.math.util.MathUtils.distance1(doubleArray27, doubleArray30); boolean boolean32 = org.apache.commons.math.util.MathUtils.equals(doubleArray21, doubleArray27); double[] doubleArray34 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray21, 101); double[] doubleArray36 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray21, 152.0d); double[] doubleArray37 = null; double[] doubleArray41 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray43 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray41, (int) (short) 0); boolean boolean44 = org.apache.commons.math.util.MathUtils.equals(doubleArray37, doubleArray41); double[] doubleArray45 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray41); double[] doubleArray46 = null; double[] doubleArray50 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray52 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray50, (int) (short) 0); boolean boolean53 = org.apache.commons.math.util.MathUtils.equals(doubleArray46, doubleArray50); double[] doubleArray54 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray50); double[] doubleArray58 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray60 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray58, (int) (short) 0); double[] doubleArray63 = new double[] { (-1), (byte) 100 }; double double64 = org.apache.commons.math.util.MathUtils.distance1(doubleArray60, doubleArray63); boolean boolean65 = org.apache.commons.math.util.MathUtils.equals(doubleArray54, doubleArray60); double[] doubleArray67 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray54, 101); boolean boolean68 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray45, doubleArray54); double double69 = org.apache.commons.math.util.MathUtils.linearCombination(doubleArray21, doubleArray45); boolean boolean70 = org.apache.commons.math.util.MathUtils.equals(doubleArray11, doubleArray21); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray11); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[155.10204081632654, -1.5510204081632653, -1.5510204081632653]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]"); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]"); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10002.0d + "'", double69 == 10002.0d); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); }
public void test0708() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0708"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(101.00495037373169d); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex1.getField(); org.apache.commons.math.complex.Complex complex3 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex8 = complex5.pow(35.0d); org.apache.commons.math.complex.Complex complex9 = complex8.tan(); org.apache.commons.math.complex.Complex complex10 = complex3.add(complex8); org.apache.commons.math.complex.Complex complex11 = complex8.sin(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); }
public void test0709() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0709"); org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException3 = new org.apache.commons.math.exception.NumberIsTooLargeException((java.lang.Number) 69.35408138262233d, (java.lang.Number) 52.000004f, true); }
public void test0710() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0710"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex19.sinh(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex20.pow(complex22); org.apache.commons.math.complex.Complex complex26 = complex22.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.sin(); double double30 = complex29.getArgument(); org.apache.commons.math.complex.Complex complex31 = complex26.multiply(complex29); org.apache.commons.math.complex.Complex complex32 = complex31.tanh(); org.apache.commons.math.complex.Complex complex33 = complex17.add(complex31); org.apache.commons.math.complex.Complex complex34 = complex14.divide(complex33); org.apache.commons.math.complex.Complex complex35 = complex14.conjugate(); org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); }
public void test0711() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0711"); // The following exception was thrown during execution in test generation try { long long2 = org.apache.commons.math.util.MathUtils.binomialCoefficient(1219337025, 47); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: arithmetic exception"); } catch (org.apache.commons.math.exception.MathArithmeticException e) { // Expected exception. } }
public void test0712() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0712"); int int3 = org.apache.commons.math.util.MathUtils.compareTo(3.141592653589793d, (double) 6034498936725L, 47); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test0713() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0713"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((-85.99999999999999d), 1.1920928955078068E-7d, (double) 20L); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0714() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0714"); double double1 = org.apache.commons.math.util.FastMath.log10(15100.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.17897694729317d + "'", double1 == 4.17897694729317d); }
public void test0715() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0715"); float float2 = org.apache.commons.math.util.FastMath.nextAfter((float) 10L, (double) (-86L)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 9.999999f + "'", float2 == 9.999999f); }
public void test0716() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0716"); double double2 = org.apache.commons.math.util.MathUtils.round(1.079574528E9d, 0); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.079574528E9d + "'", double2 == 1.079574528E9d); }
public void test0717() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0717"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex8 = complex7.log(); org.apache.commons.math.complex.Complex complex10 = complex7.pow(35.0d); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.apache.commons.math.complex.Complex complex12 = complex5.divide(complex11); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test0718() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0718"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; double[] doubleArray7 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray9 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray7, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection10 = null; double[] doubleArray13 = new double[] { 0.0f, 0.0f }; double[] doubleArray16 = new double[] { 0.0f, 0.0f }; double[] doubleArray19 = new double[] { 0.0f, 0.0f }; double[] doubleArray22 = new double[] { 0.0f, 0.0f }; double[] doubleArray25 = new double[] { 0.0f, 0.0f }; double[][] doubleArray26 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray9, orderDirection10, doubleArray26); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable3, (java.lang.Object[]) doubleArray26); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException29 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable0, (java.lang.Number) 10240.0f, (java.lang.Object[]) doubleArray26); java.lang.Number number30 = notFiniteNumberException29.getArgument(); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals("'" + number30 + "' != '" + 10240.0f + "'", number30, 10240.0f); }
public void test0719() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0719"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 'a'); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow((double) 20); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex2); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex12 = complex9.pow(35.0d); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex6.multiply(complex12); boolean boolean15 = complex12.isInfinite(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); }
public void test0720() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0720"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, 0); double[] doubleArray14 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray14); double[] doubleArray17 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray14, 6); double[] doubleArray19 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray17, (-0.41036740004704136d)); double double20 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray7, doubleArray17); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-0.053592757468830035, -0.04899909254293031, -0.0015312216419665723, -0.15312216419665722, -0.0, -0.15312216419665722]"); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); }
public void test0721() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0721"); float float2 = org.apache.commons.math.util.FastMath.min(200.0f, (float) 47000); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 200.0f + "'", float2 == 200.0f); }
public void test0722() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0722"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex5.sqrt(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex8.sinh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex9.pow(complex11); org.apache.commons.math.complex.Complex complex15 = complex11.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sin(); double double19 = complex18.getArgument(); org.apache.commons.math.complex.Complex complex20 = complex15.multiply(complex18); org.apache.commons.math.complex.Complex complex21 = complex18.sin(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex23 = complex21.add(complex22); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex26 = complex25.negate(); org.apache.commons.math.complex.Complex complex27 = complex26.sinh(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.negate(); org.apache.commons.math.complex.Complex complex30 = complex27.pow(complex29); org.apache.commons.math.complex.Complex complex33 = complex29.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex34 = complex33.negate(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex36 = complex35.sin(); double double37 = complex36.getArgument(); org.apache.commons.math.complex.Complex complex38 = complex33.multiply(complex36); org.apache.commons.math.complex.Complex complex39 = complex38.tanh(); org.apache.commons.math.complex.Complex complex40 = complex24.add(complex38); org.apache.commons.math.complex.Complex complex41 = complex21.divide(complex40); org.apache.commons.math.complex.Complex complex42 = complex40.acos(); org.apache.commons.math.complex.Complex complex43 = complex6.multiply(complex40); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex45 = complex44.sqrt(); org.apache.commons.math.complex.Complex complex46 = complex44.tanh(); org.apache.commons.math.complex.Complex complex47 = complex46.exp(); org.apache.commons.math.complex.Complex complex48 = complex47.asin(); org.apache.commons.math.complex.Complex complex49 = complex47.log(); org.apache.commons.math.complex.Complex complex50 = complex49.sqrt(); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex52 = complex51.negate(); org.apache.commons.math.complex.Complex complex53 = complex52.sinh(); org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex55 = complex54.negate(); org.apache.commons.math.complex.Complex complex56 = complex53.pow(complex55); org.apache.commons.math.complex.Complex complex59 = complex55.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex60 = complex59.negate(); org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex62 = complex61.sin(); double double63 = complex62.getArgument(); org.apache.commons.math.complex.Complex complex64 = complex59.multiply(complex62); org.apache.commons.math.complex.Complex complex65 = complex62.sin(); org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex67 = complex65.add(complex66); org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex70 = complex69.negate(); org.apache.commons.math.complex.Complex complex71 = complex70.sinh(); org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex73 = complex72.negate(); org.apache.commons.math.complex.Complex complex74 = complex71.pow(complex73); org.apache.commons.math.complex.Complex complex77 = complex73.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex78 = complex77.negate(); org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex80 = complex79.sin(); double double81 = complex80.getArgument(); org.apache.commons.math.complex.Complex complex82 = complex77.multiply(complex80); org.apache.commons.math.complex.Complex complex83 = complex82.tanh(); org.apache.commons.math.complex.Complex complex84 = complex68.add(complex82); org.apache.commons.math.complex.Complex complex85 = complex65.divide(complex84); org.apache.commons.math.complex.Complex complex86 = complex84.acos(); org.apache.commons.math.complex.Complex complex87 = complex50.multiply(complex84); org.apache.commons.math.complex.Complex complex88 = complex50.asin(); org.apache.commons.math.complex.Complex complex89 = complex43.multiply(complex88); org.apache.commons.math.complex.Complex complex90 = complex88.log(); org.apache.commons.math.complex.Complex complex92 = complex90.multiply((-0.9412825644754301d)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex80); org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertNotNull(complex84); org.junit.Assert.assertNotNull(complex85); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex89); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertNotNull(complex92); }
public void test0723() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0723"); double double1 = org.apache.commons.math.util.FastMath.log(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.NEGATIVE_INFINITY + "'", double1 == Double.NEGATIVE_INFINITY); }
public void test0724() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0724"); double double1 = org.apache.commons.math.util.MathUtils.factorialDouble(135); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.690472707318279E230d + "'", double1 == 2.690472707318279E230d); }
public void test0725() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0725"); float float1 = org.apache.commons.math.util.FastMath.ulp((float) 9); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 9.536743E-7f + "'", float1 == 9.536743E-7f); }
public void test0726() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0726"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.ComplexField complexField4 = complex2.getField(); org.apache.commons.math.complex.Complex complex5 = complex2.cosh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); }
public void test0727() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0727"); double double1 = org.apache.commons.math.util.FastMath.sin(345.3794070622669d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.19453643341030355d) + "'", double1 == (-0.19453643341030355d)); }
public void test0728() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0728"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray12 = new int[] { (byte) 100, 10 }; int[] intArray18 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double19 = org.apache.commons.math.util.MathUtils.distance(intArray12, intArray18); double double20 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray18); int[] intArray21 = org.apache.commons.math.util.MathUtils.copyOf(intArray8); int[] intArray24 = new int[] { (byte) 100, 10 }; int[] intArray30 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double31 = org.apache.commons.math.util.MathUtils.distance(intArray24, intArray30); int[] intArray34 = new int[] { (byte) 100, 10 }; int[] intArray40 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double41 = org.apache.commons.math.util.MathUtils.distance(intArray34, intArray40); double double42 = org.apache.commons.math.util.MathUtils.distance(intArray30, intArray40); int[] intArray43 = org.apache.commons.math.util.MathUtils.copyOf(intArray30); int[] intArray46 = new int[] { (byte) 100, 10 }; int[] intArray52 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double53 = org.apache.commons.math.util.MathUtils.distance(intArray46, intArray52); int[] intArray56 = new int[] { (byte) 100, 10 }; int[] intArray62 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double63 = org.apache.commons.math.util.MathUtils.distance(intArray56, intArray62); double double64 = org.apache.commons.math.util.MathUtils.distance(intArray52, intArray62); int[] intArray65 = org.apache.commons.math.util.MathUtils.copyOf(intArray52); double double66 = org.apache.commons.math.util.MathUtils.distance(intArray30, intArray65); int[] intArray67 = org.apache.commons.math.util.MathUtils.copyOf(intArray65); double double68 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray67); int[] intArray70 = org.apache.commons.math.util.MathUtils.copyOf(intArray8, 126); org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10]"); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 104.04806581575652d + "'", double19 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(intArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 10]"); org.junit.Assert.assertNotNull(intArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 104.04806581575652d + "'", double31 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[100, 10]"); org.junit.Assert.assertNotNull(intArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 104.04806581575652d + "'", double41 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(intArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[100, 10]"); org.junit.Assert.assertNotNull(intArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 104.04806581575652d + "'", double53 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[100, 10]"); org.junit.Assert.assertNotNull(intArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 104.04806581575652d + "'", double63 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertNotNull(intArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertNotNull(intArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertNotNull(intArray70); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); }
public void test0729() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0729"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); org.apache.commons.math.complex.Complex complex17 = complex15.sinh(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex19.asin(); org.apache.commons.math.complex.Complex complex21 = complex15.pow(complex20); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); }
public void test0730() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0730"); double double1 = org.apache.commons.math.util.MathUtils.indicator(9.529639902433791d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0731() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0731"); double double1 = org.apache.commons.math.util.FastMath.acos((double) 32.000004f); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0732() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0732"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow((double) 20); org.apache.commons.math.complex.Complex complex11 = complex7.exp(); org.apache.commons.math.complex.Complex complex12 = complex0.subtract(complex7); boolean boolean13 = complex7.isNaN(); double double14 = complex7.getReal(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf(6880.817293923487d, 4.795790545596741d); org.apache.commons.math.complex.Complex complex18 = complex7.multiply(complex17); org.apache.commons.math.complex.Complex complex19 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex20 = complex17.multiply(complex19); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); }
public void test0733() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0733"); double double1 = org.apache.commons.math.util.FastMath.atan((-0.3475105776468365d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.33445535205259874d) + "'", double1 == (-0.33445535205259874d)); }
public void test0734() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0734"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex1.atan(); org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z(); org.apache.commons.math.complex.Complex complex16 = complex14.divide((-0.6099212984507736d)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); }
public void test0735() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0735"); double double1 = org.apache.commons.math.util.FastMath.toDegrees((double) 545.00006f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 31226.20333168672d + "'", double1 == 31226.20333168672d); }
public void test0736() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0736"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex3 = complex0.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); java.util.List<org.apache.commons.math.complex.Complex> complexList6 = complex3.nthRoot((int) (byte) 10); org.apache.commons.math.complex.Complex complex7 = complex3.sqrt(); java.lang.Object obj8 = complex3.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complexList6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(obj8); org.junit.Assert.assertEquals(obj8.toString(), "(0.9919317346815598, 1.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "(0.9919317346815598, 1.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "(0.9919317346815598, 1.0)"); }
public void test0737() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0737"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); double double18 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex15.tanh(); org.apache.commons.math.complex.Complex complex20 = complex15.sin(); org.apache.commons.math.complex.Complex complex21 = complex15.log(); org.apache.commons.math.complex.Complex complex22 = complex15.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2.356194490192345d) + "'", double18 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test0738() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0738"); double[] doubleArray0 = new double[] {}; double[] doubleArray1 = null; double[] doubleArray5 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, (int) (short) 0); boolean boolean8 = org.apache.commons.math.util.MathUtils.equals(doubleArray1, doubleArray5); double[] doubleArray9 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5); double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); double[] doubleArray18 = new double[] { (-1), (byte) 100 }; double double19 = org.apache.commons.math.util.MathUtils.distance1(doubleArray15, doubleArray18); boolean boolean20 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray15); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray9); double[] doubleArray22 = null; boolean boolean23 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray22); double double24 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray0, doubleArray9); double[] doubleArray25 = null; double[] doubleArray29 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray31 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray29, (int) (short) 0); boolean boolean32 = org.apache.commons.math.util.MathUtils.equals(doubleArray25, doubleArray29); double[] doubleArray33 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray29); double[] doubleArray37 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray39 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray37, (int) (short) 0); double[] doubleArray42 = new double[] { (-1), (byte) 100 }; double double43 = org.apache.commons.math.util.MathUtils.distance1(doubleArray39, doubleArray42); double[] doubleArray45 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray42, 100); boolean boolean46 = org.apache.commons.math.util.MathUtils.equals(doubleArray33, doubleArray45); double[] doubleArray50 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray52 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray50, (int) (short) 0); double[] doubleArray54 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray52, 0); boolean boolean55 = org.apache.commons.math.util.MathUtils.equals(doubleArray33, doubleArray54); double double56 = org.apache.commons.math.util.MathUtils.distance(doubleArray9, doubleArray33); double[] doubleArray57 = null; double[] doubleArray61 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray63 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray61, (int) (short) 0); boolean boolean64 = org.apache.commons.math.util.MathUtils.equals(doubleArray57, doubleArray61); double[] doubleArray65 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray61); double[] doubleArray66 = null; boolean boolean67 = org.apache.commons.math.util.MathUtils.equals(doubleArray61, doubleArray66); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection71 = org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException73 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 1.4E-45f, (java.lang.Number) 10.000000000000002d, 5, orderDirection71, false); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection74 = nonMonotonousSequenceException73.getDirection(); org.apache.commons.math.util.MathUtils.checkOrder(doubleArray61, orderDirection74, false); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.checkOrder(doubleArray33, orderDirection74, true); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NonMonotonousSequenceException; message: points 1 and 2 are not strictly decreasing (-1 <= -1)"); } catch (org.apache.commons.math.exception.NonMonotonousSequenceException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]"); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[]"); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); org.junit.Assert.assertTrue("'" + orderDirection71 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING + "'", orderDirection71.equals(org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING)); org.junit.Assert.assertTrue("'" + orderDirection74 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING + "'", orderDirection74.equals(org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING)); }
public void test0739() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0739"); int int1 = org.apache.commons.math.util.FastMath.getExponent((double) (-1023)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 9 + "'", int1 == 9); }
public void test0740() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0740"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); }
public void test0741() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0741"); // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.math.util.MathUtils.pow((-1475346380), (long) (-680745024)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: exponent (-680,745,024)"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test0742() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0742"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(9.425947759839367E159d, 73.61303542254248d); }
public void test0743() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0743"); float float1 = org.apache.commons.math.util.FastMath.signum((float) 135); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0744() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0744"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.complex.Complex complex18 = complex15.tan(); org.apache.commons.math.complex.Complex complex20 = complex18.add(0.7936037226407198d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); }
public void test0745() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0745"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((double) 1225.0001f, 26091.932402565264d, 0.0d); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0746() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0746"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 32); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.sin(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex18 = complex16.add(complex17); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex21 = complex20.negate(); org.apache.commons.math.complex.Complex complex22 = complex21.sinh(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex22.pow(complex24); org.apache.commons.math.complex.Complex complex28 = complex24.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex29 = complex28.negate(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex31 = complex30.sin(); double double32 = complex31.getArgument(); org.apache.commons.math.complex.Complex complex33 = complex28.multiply(complex31); org.apache.commons.math.complex.Complex complex34 = complex33.tanh(); org.apache.commons.math.complex.Complex complex35 = complex19.add(complex33); org.apache.commons.math.complex.Complex complex36 = complex16.divide(complex35); org.apache.commons.math.complex.Complex complex37 = complex35.acos(); org.apache.commons.math.complex.Complex complex38 = complex1.subtract(complex37); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); }
public void test0747() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0747"); double double1 = org.apache.commons.math.util.FastMath.acosh((-1.3843148717569957d)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0748() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0748"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray14); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray8); double[] doubleArray22 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 126); double[] doubleArray23 = null; double[] doubleArray27 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray29 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray27, (int) (short) 0); boolean boolean30 = org.apache.commons.math.util.MathUtils.equals(doubleArray23, doubleArray27); boolean boolean31 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray8, doubleArray27); int int32 = org.apache.commons.math.util.MathUtils.hash(doubleArray27); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1944488865) + "'", int32 == (-1944488865)); }
public void test0749() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0749"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(3.831022614880196E22d, (double) 5L, 2.167912933842592d); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0750() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0750"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex12.subtract(66.97680939587865d); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.sin(); double double17 = complex16.getImaginary(); org.apache.commons.math.complex.Complex complex18 = complex16.sqrt(); org.apache.commons.math.complex.Complex complex19 = complex18.sqrt1z(); org.apache.commons.math.complex.Complex complex20 = complex12.divide(complex19); org.apache.commons.math.complex.Complex complex21 = complex19.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); }
public void test0751() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0751"); org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException2 = new org.apache.commons.math.exception.DimensionMismatchException(0, (int) (byte) -1); }
public void test0752() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0752"); // The following exception was thrown during execution in test generation try { float float3 = org.apache.commons.math.util.MathUtils.round((float) 100L, 0, 318997151); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: invalid rounding method 318,997,151, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)"); } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) { // Expected exception. } }
public void test0753() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0753"); double double1 = org.apache.commons.math.util.FastMath.sin(1.1881242017914694E7d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.6018148898074864d + "'", double1 == 0.6018148898074864d); }
public void test0754() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0754"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); double double4 = complex3.getArgument(); org.apache.commons.math.complex.Complex complex5 = complex3.sin(); org.apache.commons.math.complex.Complex complex6 = complex3.atan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); }
public void test0755() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0755"); long long2 = org.apache.commons.math.util.FastMath.max((-2644339127462754205L), (long) 680745024); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 680745024L + "'", long2 == 680745024L); }
public void test0756() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0756"); double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(1410065408, (int) (short) -1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d); }
public void test0757() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0757"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((float) 100, (float) 96, (float) (-1)); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0758() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0758"); double double4 = org.apache.commons.math.util.MathUtils.linearCombination((double) 1.0000001f, 0.7146114112494588d, (double) 1.78670653E12f, 21.031845735274818d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 3.7577736033416125E13d + "'", double4 == 3.7577736033416125E13d); }
public void test0759() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0759"); int int2 = org.apache.commons.math.util.MathUtils.pow(20, (long) 1078034432); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test0760() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0760"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); boolean boolean18 = complex0.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test0761() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0761"); double[] doubleArray0 = null; double[] doubleArray10 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray12 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray10, (int) (short) 0); double[] doubleArray15 = new double[] { (-1), (byte) 100 }; double double16 = org.apache.commons.math.util.MathUtils.distance1(doubleArray12, doubleArray15); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection17 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean20 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray15, orderDirection17, false, true); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException22 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (-0.942869904304318d), (java.lang.Number) 0.7893750108307105d, (int) '#', orderDirection17, false); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException24 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 3.671661169604123E43d, (java.lang.Number) 6.8074502500001E8d, 0, orderDirection17, false); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.checkOrder(doubleArray0, orderDirection17, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection17 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection17.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); }
public void test0762() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0762"); long long1 = org.apache.commons.math.util.FastMath.round((double) 49); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 49L + "'", long1 == 49L); }
public void test0763() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0763"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex13.tanh(); org.apache.commons.math.complex.Complex complex15 = complex14.sin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); }
public void test0764() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0764"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); java.util.List<org.apache.commons.math.complex.Complex> complexList8 = complex5.nthRoot(52); org.apache.commons.math.complex.Complex complex9 = complex5.sin(); org.apache.commons.math.complex.Complex complex10 = complex5.sqrt(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complexList8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test0765() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0765"); double double1 = org.apache.commons.math.util.FastMath.asinh(0.3490658503988659d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.34233972184792205d + "'", double1 == 0.34233972184792205d); }
public void test0766() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0766"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(1.5163019408528369d); }
public void test0767() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0767"); int int2 = org.apache.commons.math.util.FastMath.max((int) (byte) 100, (int) (short) 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 100 + "'", int2 == 100); }
public void test0768() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0768"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sin(); double double4 = complex3.getImaginary(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex3); org.apache.commons.math.complex.Complex complex8 = complex3.subtract((double) (-22L)); java.lang.Object obj9 = complex3.readResolve(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(obj9); org.junit.Assert.assertEquals(obj9.toString(), "(0.8414709848078965, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "(0.8414709848078965, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "(0.8414709848078965, 0.0)"); }
public void test0769() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0769"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex4.acos(); org.apache.commons.math.complex.Complex complex6 = complex4.acos(); org.apache.commons.math.complex.Complex complex8 = complex4.subtract((double) (byte) 10); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); }
public void test0770() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0770"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException4 = new org.apache.commons.math.exception.NumberIsTooLargeException(localizable0, (java.lang.Number) 200.66100604148377d, (java.lang.Number) 0.6135603872539619d, true); }
public void test0771() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0771"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); double double10 = complex8.getReal(); org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex8); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.ComplexField complexField13 = complex12.getField(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.sin(); double double16 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex17 = complex15.sqrt(); org.apache.commons.math.complex.Complex complex18 = complex17.sqrt1z(); org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex18.tan(); org.apache.commons.math.complex.Complex complex21 = complex12.add(complex20); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.8414709848078965d + "'", double10 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complexField13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); }
public void test0772() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0772"); int int2 = org.apache.commons.math.util.FastMath.min((int) ' ', (int) (byte) 100); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32); }
public void test0773() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0773"); double double1 = org.apache.commons.math.util.MathUtils.cosh((-1.0d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5430806348152437d + "'", double1 == 1.5430806348152437d); }
public void test0774() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0774"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getArgument(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow((double) 20); java.lang.String str7 = complex6.toString(); org.apache.commons.math.complex.Complex complex8 = complex1.add(complex6); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField9 = complex8.getField(); org.apache.commons.math.complex.Complex complex10 = complex8.asin(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex14 = complex13.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.negate(); org.apache.commons.math.complex.Complex complex19 = complex14.pow(complex18); boolean boolean21 = complex19.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex22 = complex12.divide(complex19); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex24.sinh(); double double26 = complex25.getArgument(); org.apache.commons.math.complex.Complex complex27 = complex12.add(complex25); org.apache.commons.math.complex.Complex complex28 = complex25.acos(); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex30 = complex29.sin(); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex32 = complex31.negate(); org.apache.commons.math.complex.Complex complex33 = complex32.sinh(); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex35 = complex34.negate(); org.apache.commons.math.complex.Complex complex36 = complex33.pow(complex35); org.apache.commons.math.complex.Complex complex39 = complex35.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex40 = complex39.negate(); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex42 = complex41.sin(); double double43 = complex42.getArgument(); org.apache.commons.math.complex.Complex complex44 = complex39.multiply(complex42); org.apache.commons.math.complex.Complex complex45 = complex44.tanh(); boolean boolean46 = complex29.equals((java.lang.Object) complex44); org.apache.commons.math.complex.Complex complex47 = complex44.exp(); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex49 = complex48.negate(); org.apache.commons.math.complex.Complex complex51 = complex48.pow((double) 20); java.lang.String str52 = complex51.toString(); double double53 = complex51.getReal(); org.apache.commons.math.complex.Complex complex54 = complex51.tan(); org.apache.commons.math.complex.Complex complex57 = complex51.createComplex((double) 35.000004f, 2.1513092806481256E16d); org.apache.commons.math.complex.Complex complex58 = complex57.asin(); org.apache.commons.math.complex.Complex complex59 = complex47.multiply(complex57); org.apache.commons.math.complex.Complex complex60 = complex25.subtract(complex57); org.apache.commons.math.complex.Complex complex61 = complex10.multiply(complex57); org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex63 = complex62.negate(); org.apache.commons.math.complex.Complex complex65 = complex63.multiply((double) (-1.0f)); double double66 = complex65.getArgument(); org.apache.commons.math.complex.Complex complex67 = complex65.sin(); org.apache.commons.math.complex.Complex complex68 = complex67.negate(); org.apache.commons.math.complex.Complex complex69 = complex61.divide(complex67); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(1.0, 0.0)" + "'", str7, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complexField9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-3.141592653589793d) + "'", double26 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(1.0, 0.0)" + "'", str52, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); }
public void test0775() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0775"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); boolean boolean6 = complex1.isNaN(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true); }
public void test0776() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0776"); long long2 = org.apache.commons.math.util.MathUtils.addAndCheck(5L, (long) 1219337025); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1219337030L + "'", long2 == 1219337030L); }
public void test0777() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0777"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sin(); double double4 = complex3.getImaginary(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex3); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex6); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex9.sinh(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = complex10.pow(complex12); org.apache.commons.math.complex.Complex complex16 = complex12.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex17 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex18 = complex17.sinh(); org.apache.commons.math.complex.Complex complex20 = complex17.divide((double) 100L); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); }
public void test0778() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0778"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((float) 197600, (float) (byte) 1, (float) 545L); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0779() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0779"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex4 = complex1.pow(35.0d); org.apache.commons.math.complex.Complex complex5 = complex4.tan(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt1z(); org.apache.commons.math.complex.Complex complex11 = complex8.createComplex((double) (byte) 10, (double) (short) 100); org.apache.commons.math.complex.Complex complex12 = complex5.pow(complex11); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test0780() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0780"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equals((float) 2, (float) 30L); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0781() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0781"); // The following exception was thrown during execution in test generation try { long long1 = org.apache.commons.math.util.MathUtils.factorial(318997151); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: arithmetic exception"); } catch (org.apache.commons.math.exception.MathArithmeticException e) { // Expected exception. } }
public void test0782() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0782"); double double3 = org.apache.commons.math.util.MathUtils.reduce(1.1488462128956858d, (-1.5707963262806226d), 9.429343653260479E35d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test0783() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0783"); double double1 = org.apache.commons.math.util.FastMath.toDegrees((-0.942869904304318d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-54.022466146541234d) + "'", double1 == (-54.022466146541234d)); }
public void test0784() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0784"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); double double5 = complex4.getReal(); org.apache.commons.math.complex.Complex complex7 = complex4.divide(1.1176233018673575E37d); org.apache.commons.math.complex.Complex complex8 = complex4.log(); org.apache.commons.math.complex.Complex complex9 = complex4.atan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.5707963267948966d + "'", double5 == 1.5707963267948966d); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); }
public void test0785() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0785"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(1121.3633233419064d); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.junit.Assert.assertNotNull(complex2); }
public void test0786() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0786"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((float) 45, (float) (short) 100, (float) 123725); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); }
public void test0787() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0787"); // The following exception was thrown during execution in test generation try { long long2 = org.apache.commons.math.util.MathUtils.binomialCoefficient((-1475346380), (-680745026)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: must have n >= k for binomial coefficient (n, k), got k = -680,745,026, n = -1,475,346,380"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } }
public void test0788() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0788"); long long1 = org.apache.commons.math.util.FastMath.abs(760L); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 760L + "'", long1 == 760L); }
public void test0789() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0789"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sqrt(); org.apache.commons.math.complex.Complex complex19 = complex18.sin(); org.apache.commons.math.complex.Complex complex21 = complex19.pow((double) 1L); org.apache.commons.math.complex.Complex complex22 = complex16.pow(complex19); double double23 = complex16.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.7853981633974483d + "'", double23 == 0.7853981633974483d); }
public void test0790() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0790"); org.apache.commons.math.util.MathUtils.checkFinite((double) (-1143)); }
public void test0791() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0791"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); java.lang.String str9 = complex4.toString(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(8.83298443465792d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(-1.0, -0.0)" + "'", str9, "(-1.0, -0.0)"); org.junit.Assert.assertNotNull(complex11); }
public void test0792() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0792"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); int int9 = org.apache.commons.math.util.MathUtils.hash(doubleArray4); double double10 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray4); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1944488865) + "'", int9 == (-1944488865)); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.00999950005d + "'", double10 == 100.00999950005d); }
public void test0793() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0793"); // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.math.util.MathUtils.lcm(126, 1090401488); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: arithmetic exception"); } catch (org.apache.commons.math.exception.MathArithmeticException e) { // Expected exception. } }
public void test0794() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0794"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) 5); java.lang.Throwable throwable3 = notPositiveException2.getException(); boolean boolean4 = notPositiveException2.getBoundIsAllowed(); org.junit.Assert.assertNotNull(throwable3); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); }
public void test0795() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0795"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); org.apache.commons.math.complex.Complex complex7 = complex6.cos(); org.apache.commons.math.complex.Complex complex9 = complex7.multiply((double) 152L); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test0796() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0796"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray14); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray20); double[] doubleArray28 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray28); double double30 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray28); double double31 = org.apache.commons.math.util.MathUtils.distance1(doubleArray20, doubleArray28); double double32 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray28); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 149.164338901763d + "'", double30 == 149.164338901763d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 149.164338901763d + "'", double32 == 149.164338901763d); }
public void test0797() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0797"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; double double1 = complex0.getReal(); double double2 = complex0.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY); org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY); }
public void test0798() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0798"); double[] doubleArray0 = new double[] {}; double[] doubleArray1 = null; double[] doubleArray5 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, (int) (short) 0); boolean boolean8 = org.apache.commons.math.util.MathUtils.equals(doubleArray1, doubleArray5); double[] doubleArray9 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5); double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); double[] doubleArray18 = new double[] { (-1), (byte) 100 }; double double19 = org.apache.commons.math.util.MathUtils.distance1(doubleArray15, doubleArray18); boolean boolean20 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray15); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray9); double[] doubleArray22 = null; boolean boolean23 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray22); double double24 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray0, doubleArray9); double[] doubleArray25 = null; double[] doubleArray29 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray31 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray29, (int) (short) 0); boolean boolean32 = org.apache.commons.math.util.MathUtils.equals(doubleArray25, doubleArray29); double[] doubleArray33 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray29); double[] doubleArray34 = null; double[] doubleArray38 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray40 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray38, (int) (short) 0); boolean boolean41 = org.apache.commons.math.util.MathUtils.equals(doubleArray34, doubleArray38); double[] doubleArray42 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray38); double[] doubleArray46 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray48 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray46, (int) (short) 0); double[] doubleArray51 = new double[] { (-1), (byte) 100 }; double double52 = org.apache.commons.math.util.MathUtils.distance1(doubleArray48, doubleArray51); boolean boolean53 = org.apache.commons.math.util.MathUtils.equals(doubleArray42, doubleArray48); double[] doubleArray55 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray42, 101); double double56 = org.apache.commons.math.util.MathUtils.distance(doubleArray33, doubleArray55); double double57 = org.apache.commons.math.util.MathUtils.distance(doubleArray0, doubleArray33); org.junit.Assert.assertNotNull(doubleArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]"); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]"); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d); org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); }
public void test0799() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0799"); double double1 = org.apache.commons.math.util.FastMath.cos(31226.199834629864d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.3331611375253213d + "'", double1 == 0.3331611375253213d); }
public void test0800() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0800"); float float2 = org.apache.commons.math.util.FastMath.max(10.000001f, (-1.94448883E9f)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 10.000001f + "'", float2 == 10.000001f); }
public void test0801() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0801"); double double2 = org.apache.commons.math.util.FastMath.scalb(0.9537526527594719d, 29); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 5.12042056509397E8d + "'", double2 == 5.12042056509397E8d); }
public void test0802() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0802"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 10.000001f); org.junit.Assert.assertNotNull(complex1); }
public void test0803() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0803"); double double1 = org.apache.commons.math.util.FastMath.log((double) 760L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.633318433280377d + "'", double1 == 6.633318433280377d); }
public void test0804() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0804"); double double4 = org.apache.commons.math.util.MathUtils.linearCombination(1.3292538725897318E24d, 2.1416876847493502d, 2.2002552408466745d, (-0.9412825644754301d)); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 2.8468466488308105E24d + "'", double4 == 2.8468466488308105E24d); }
public void test0805() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0805"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(3.831008000716577E22d, 0.6506783754890694d); }
public void test0806() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0806"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex7 = complex4.multiply(10.000000000000002d); double double8 = complex4.getArgument(); org.apache.commons.math.complex.Complex complex9 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex10 = complex4.add(complex9); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-3.141592653589793d) + "'", double8 == (-3.141592653589793d)); }
public void test0807() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0807"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(6880.817293923487d, 4.795790545596741d); boolean boolean4 = complex2.equals((java.lang.Object) 1225.0f); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test0808() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0808"); double double2 = org.apache.commons.math.util.MathUtils.log((double) 1073741824, 1.5718627165643309d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.021749174030558482d + "'", double2 == 0.021749174030558482d); }
public void test0809() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0809"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); double double3 = complex1.getReal(); org.apache.commons.math.complex.Complex complex4 = complex1.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.8414709848078965d + "'", double3 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex4); }
public void test0810() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0810"); double[] doubleArray3 = new double[] { 100L, 69.35408138262233d, 0.6135603872539619d }; double[] doubleArray7 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray9 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray7, (int) (short) 0); double[] doubleArray12 = new double[] { (-1), (byte) 100 }; double double13 = org.apache.commons.math.util.MathUtils.distance1(doubleArray9, doubleArray12); double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, 100); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray15); boolean boolean17 = org.apache.commons.math.util.MathUtils.equals(doubleArray3, doubleArray15); double[] doubleArray19 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 10); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray19, 702); int int22 = org.apache.commons.math.util.MathUtils.hash(doubleArray21); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 69.35408138262233, 0.6135603872539619]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 69.35408138262233, 0.6135603872539619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 69.35408138262233, 0.6135603872539619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1792857041 + "'", int22 == 1792857041); }
public void test0811() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0811"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField9 = complex8.getField(); boolean boolean10 = complex8.isNaN(); org.apache.commons.math.complex.Complex complex11 = complex8.acos(); org.apache.commons.math.complex.Complex complex12 = complex11.sinh(); boolean boolean13 = complex12.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complexField9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); }
public void test0812() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0812"); double double1 = org.apache.commons.math.util.FastMath.asin((double) (-8281846956971016881L)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0813() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0813"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray12 = new int[] { (byte) 100, 10 }; int[] intArray18 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double19 = org.apache.commons.math.util.MathUtils.distance(intArray12, intArray18); int int20 = org.apache.commons.math.util.MathUtils.distance1(intArray2, intArray12); int[] intArray21 = org.apache.commons.math.util.MathUtils.copyOf(intArray12); int[] intArray24 = new int[] { (byte) 100, 10 }; int[] intArray30 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double31 = org.apache.commons.math.util.MathUtils.distance(intArray24, intArray30); int[] intArray34 = new int[] { (byte) 100, 10 }; int[] intArray40 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double41 = org.apache.commons.math.util.MathUtils.distance(intArray34, intArray40); int int42 = org.apache.commons.math.util.MathUtils.distance1(intArray24, intArray34); int[] intArray43 = org.apache.commons.math.util.MathUtils.copyOf(intArray34); int int44 = org.apache.commons.math.util.MathUtils.distance1(intArray12, intArray34); int[] intArray46 = org.apache.commons.math.util.MathUtils.copyOf(intArray34, 52); int[] intArray48 = org.apache.commons.math.util.MathUtils.copyOf(intArray46, 9); org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10]"); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 104.04806581575652d + "'", double19 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(intArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100, 10]"); org.junit.Assert.assertNotNull(intArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 10]"); org.junit.Assert.assertNotNull(intArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 104.04806581575652d + "'", double31 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[100, 10]"); org.junit.Assert.assertNotNull(intArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 104.04806581575652d + "'", double41 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0); org.junit.Assert.assertNotNull(intArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[100, 10]"); org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0); org.junit.Assert.assertNotNull(intArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[100, 10, 0, 0, 0, 0, 0, 0, 0]"); }
public void test0814() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0814"); long long1 = org.apache.commons.math.util.MathUtils.indicator(6034498936725L); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L); }
public void test0815() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0815"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); org.apache.commons.math.complex.Complex complex5 = complex2.createComplex(52.009614495783374d, 0.0d); org.apache.commons.math.complex.Complex complex6 = complex5.acos(); org.apache.commons.math.complex.Complex complex7 = complex5.log(); org.apache.commons.math.complex.Complex complex8 = complex5.cosh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test0816() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0816"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex3 = complex2.log(); org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField7 = complex5.getField(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex10 = complex8.log(); org.apache.commons.math.complex.Complex complex11 = complex5.add(complex8); org.apache.commons.math.complex.Complex complex12 = complex5.atan(); org.apache.commons.math.complex.Complex complex13 = complex3.divide(complex12); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complexField7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test0817() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0817"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray8 = new double[] { (-1), (byte) 100 }; double double9 = org.apache.commons.math.util.MathUtils.distance1(doubleArray5, doubleArray8); double[] doubleArray11 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 100); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray11); double[] doubleArray13 = null; double[] doubleArray17 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray19 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, (int) (short) 0); boolean boolean20 = org.apache.commons.math.util.MathUtils.equals(doubleArray13, doubleArray17); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); double[] doubleArray30 = new double[] { (-1), (byte) 100 }; double double31 = org.apache.commons.math.util.MathUtils.distance1(doubleArray27, doubleArray30); double[] doubleArray33 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray30, 100); boolean boolean34 = org.apache.commons.math.util.MathUtils.equals(doubleArray21, doubleArray33); double[] doubleArray38 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray40 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray38, (int) (short) 0); double[] doubleArray42 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray40, 0); boolean boolean43 = org.apache.commons.math.util.MathUtils.equals(doubleArray21, doubleArray42); double[] doubleArray47 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray49 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray47, (int) (short) 0); double double50 = org.apache.commons.math.util.MathUtils.distance(doubleArray42, doubleArray47); double[] doubleArray51 = null; double[] doubleArray55 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray57 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray55, (int) (short) 0); boolean boolean58 = org.apache.commons.math.util.MathUtils.equals(doubleArray51, doubleArray55); double[] doubleArray59 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray55); double[] doubleArray60 = null; double[] doubleArray64 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray66 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray64, (int) (short) 0); boolean boolean67 = org.apache.commons.math.util.MathUtils.equals(doubleArray60, doubleArray64); double[] doubleArray68 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray64); double[] doubleArray72 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray74 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray72, (int) (short) 0); double[] doubleArray77 = new double[] { (-1), (byte) 100 }; double double78 = org.apache.commons.math.util.MathUtils.distance1(doubleArray74, doubleArray77); boolean boolean79 = org.apache.commons.math.util.MathUtils.equals(doubleArray68, doubleArray74); double[] doubleArray81 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray68, 101); double double82 = org.apache.commons.math.util.MathUtils.distance(doubleArray59, doubleArray81); boolean boolean83 = org.apache.commons.math.util.MathUtils.equals(doubleArray42, doubleArray81); double double84 = org.apache.commons.math.util.MathUtils.distance1(doubleArray11, doubleArray81); double[] doubleArray86 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray11, (int) (short) 1); int int87 = org.apache.commons.math.util.MathUtils.hash(doubleArray86); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]"); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]"); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]"); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray66); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]"); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); org.junit.Assert.assertNotNull(doubleArray68); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray74); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]"); org.junit.Assert.assertNotNull(doubleArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertNotNull(doubleArray81); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 203.0d + "'", double84 == 203.0d); org.junit.Assert.assertNotNull(doubleArray86); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0]"); org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1074790369) + "'", int87 == (-1074790369)); }
public void test0818() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0818"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex1.atan(); boolean boolean14 = complex13.isInfinite(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = complex15.add((double) (-751914122)); double double18 = complex15.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.6104048481741295d + "'", double18 == 0.6104048481741295d); }
public void test0819() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0819"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex15.sqrt(); org.apache.commons.math.complex.Complex complex69 = complex68.tanh(); boolean boolean70 = complex68.isNaN(); org.apache.commons.math.complex.Complex complex72 = complex68.pow(0.3331611375253213d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertNotNull(complex72); }
public void test0820() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0820"); double double1 = org.apache.commons.math.util.FastMath.log((-0.35907242107165305d)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0821() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0821"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.8746197065066093d, 4.22604638E8d); }
public void test0822() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0822"); // The following exception was thrown during execution in test generation try { double double1 = org.apache.commons.math.util.MathUtils.factorialDouble((-1475346432)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: must have n >= 0 for n!, got n = -1,475,346,432"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test0823() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0823"); double double1 = org.apache.commons.math.util.FastMath.sqrt((-0.14237721783593948d)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0824() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0824"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); org.apache.commons.math.complex.Complex complex4 = complex0.multiply((double) 5); org.apache.commons.math.complex.Complex complex5 = complex0.cos(); double double6 = complex0.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); }
public void test0825() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0825"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); boolean boolean5 = complex3.equals((java.lang.Object) 5.062554972936762d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test0826() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0826"); double double6 = org.apache.commons.math.util.MathUtils.linearCombination(0.0d, (double) (-52L), (double) 5459025742952136705L, 0.0d, 0.3694162832070161d, (-1.5574077246549023d)); org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.5753317730799099d) + "'", double6 == (-0.5753317730799099d)); }
public void test0827() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0827"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(0.0d); org.junit.Assert.assertNotNull(complex1); }
public void test0828() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0828"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex7 = complex4.multiply(10.000000000000002d); double double8 = complex4.getArgument(); org.apache.commons.math.complex.Complex complex9 = complex4.negate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-3.141592653589793d) + "'", double8 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex9); }
public void test0829() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0829"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 1.5301121227016508d, (java.lang.Number) 6.591783121186793E31d, 0); boolean boolean4 = nonMonotonousSequenceException3.getStrict(); org.apache.commons.math.exception.NotPositiveException notPositiveException6 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 0.0d); nonMonotonousSequenceException3.addSuppressed((java.lang.Throwable) notPositiveException6); java.lang.Number number8 = nonMonotonousSequenceException3.getPrevious(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection12 = null; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException14 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (byte) 100, (java.lang.Number) 2.718281828459045d, (int) '4', orderDirection12, true); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection15 = nonMonotonousSequenceException14.getDirection(); boolean boolean16 = nonMonotonousSequenceException14.getStrict(); java.lang.Number number17 = nonMonotonousSequenceException14.getPrevious(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection18 = nonMonotonousSequenceException14.getDirection(); nonMonotonousSequenceException3.addSuppressed((java.lang.Throwable) nonMonotonousSequenceException14); boolean boolean20 = nonMonotonousSequenceException3.getStrict(); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertEquals("'" + number8 + "' != '" + 6.591783121186793E31d + "'", number8, 6.591783121186793E31d); org.junit.Assert.assertNull(orderDirection15); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertEquals("'" + number17 + "' != '" + 2.718281828459045d + "'", number17, 2.718281828459045d); org.junit.Assert.assertNull(orderDirection18); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true); }
public void test0830() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0830"); org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException3 = new org.apache.commons.math.exception.NumberIsTooLargeException((java.lang.Number) 1.6475223632841045d, (java.lang.Number) (-0.5440211108893698d), true); }
public void test0831() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0831"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.log(); org.apache.commons.math.complex.Complex complex3 = complex2.cosh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test0832() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0832"); int int2 = org.apache.commons.math.util.FastMath.min((int) 'a', (-1475346432)); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1475346432) + "'", int2 == (-1475346432)); }
public void test0833() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0833"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex13 = complex12.sin(); org.apache.commons.math.complex.Complex complex14 = complex13.log(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); }
public void test0834() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0834"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equals(0.0d, 8708.958485988513d); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0835() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0835"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex67.exp(); org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex70 = complex69.negate(); org.apache.commons.math.complex.Complex complex72 = complex70.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex74 = complex73.negate(); org.apache.commons.math.complex.Complex complex75 = complex70.pow(complex74); boolean boolean77 = complex75.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex79 = complex78.atan(); org.apache.commons.math.complex.Complex complex80 = complex75.pow(complex78); double double81 = complex75.getReal(); org.apache.commons.math.complex.Complex complex82 = complex68.multiply(complex75); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex80); org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-1.0d) + "'", double81 == (-1.0d)); org.junit.Assert.assertNotNull(complex82); }
public void test0836() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0836"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex1.atan(); org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z(); double double15 = complex14.getReal(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex17 = complex14.sqrt1z(); org.apache.commons.math.complex.Complex complex18 = complex14.asin(); org.apache.commons.math.complex.Complex complex19 = complex14.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7146114112494588d + "'", double15 == 0.7146114112494588d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); }
public void test0837() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0837"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex4 = complex1.pow(35.0d); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.atan(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); }
public void test0838() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0838"); double double1 = org.apache.commons.math.util.FastMath.cos(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0839() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0839"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(1.530112122701651d); org.apache.commons.math.complex.Complex complex9 = complex7.multiply(152.00001525878903d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); }
public void test0840() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0840"); double double1 = org.apache.commons.math.util.FastMath.toDegrees(17.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 974.0282517223994d + "'", double1 == 974.0282517223994d); }
public void test0841() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0841"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sin(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); double double4 = complex2.getImaginary(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); }
public void test0842() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0842"); long long2 = org.apache.commons.math.util.MathUtils.addAndCheck(0L, (long) 1); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L); }
public void test0843() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0843"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); java.lang.String str4 = complex3.toString(); double double5 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.tan(); org.apache.commons.math.complex.Complex complex9 = complex3.createComplex((double) 35.000004f, 2.1513092806481256E16d); double double10 = complex9.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(1.0, 0.0)" + "'", str4, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.000003814697266d + "'", double10 == 35.000003814697266d); }
public void test0844() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0844"); org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException8 = new org.apache.commons.math.exception.DimensionMismatchException(localizable5, 0, (int) (short) -1); org.apache.commons.math.exception.util.Localizable localizable9 = null; org.apache.commons.math.exception.util.Localizable localizable10 = null; org.apache.commons.math.exception.util.Localizable localizable11 = null; java.lang.Object[] objArray13 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException14 = new org.apache.commons.math.exception.MathArithmeticException(localizable11, objArray13); org.apache.commons.math.exception.NullArgumentException nullArgumentException15 = new org.apache.commons.math.exception.NullArgumentException(localizable10, objArray13); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) (short) -1, localizable9, objArray13); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException17 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable3, (java.lang.Number) (short) -1, objArray13); org.apache.commons.math.exception.NullArgumentException nullArgumentException18 = new org.apache.commons.math.exception.NullArgumentException(localizable2, objArray13); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 39520, localizable1, objArray13); org.junit.Assert.assertNotNull(objArray13); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[1.0]"); }
public void test0845() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0845"); long long2 = org.apache.commons.math.util.MathUtils.pow((long) 52, 0); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L); }
public void test0846() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0846"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); java.lang.Throwable[] throwableArray60 = mathArithmeticException58.getSuppressed(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(throwableArray60); }
public void test0847() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0847"); long long2 = org.apache.commons.math.util.MathUtils.pow((long) 52, 1090401488); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test0848() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0848"); double double1 = org.apache.commons.math.util.MathUtils.factorialLog((int) (short) 100); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 363.7393755555636d + "'", double1 == 363.7393755555636d); }
public void test0849() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0849"); int int2 = org.apache.commons.math.util.MathUtils.pow(0, 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0850() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0850"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.cos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); }
public void test0851() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0851"); double[] doubleArray0 = null; double[] doubleArray3 = new double[] { 2.718281828459045d, '#' }; int int4 = org.apache.commons.math.util.MathUtils.hash(doubleArray3); double[] doubleArray11 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray11); double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray11, 6); double double15 = org.apache.commons.math.util.MathUtils.distance(doubleArray3, doubleArray14); // The following exception was thrown during execution in test generation try { double double16 = org.apache.commons.math.util.MathUtils.distance(doubleArray0, doubleArray3); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[2.718281828459045, 35.0]"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-680745026) + "'", int4 == (-680745026)); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 32.420816277613945d + "'", double15 == 32.420816277613945d); }
public void test0852() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0852"); double double2 = org.apache.commons.math.util.FastMath.hypot(6.283185307179586d, 37.31321895318116d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 37.83853493797554d + "'", double2 == 37.83853493797554d); }
public void test0853() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0853"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); double double5 = complex4.getReal(); org.apache.commons.math.complex.Complex complex7 = complex4.divide(1.1176233018673575E37d); org.apache.commons.math.complex.Complex complex9 = complex7.subtract((double) (-3850565377750111653L)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.5707963267948966d + "'", double5 == 1.5707963267948966d); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); }
public void test0854() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0854"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; double[] doubleArray7 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray9 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray7, (int) (short) 0); double[] doubleArray12 = new double[] { (-1), (byte) 100 }; double double13 = org.apache.commons.math.util.MathUtils.distance1(doubleArray9, doubleArray12); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection14 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean17 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray12, orderDirection14, false, true); double[] doubleArray21 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray23 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray21, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection24 = null; double[] doubleArray27 = new double[] { 0.0f, 0.0f }; double[] doubleArray30 = new double[] { 0.0f, 0.0f }; double[] doubleArray33 = new double[] { 0.0f, 0.0f }; double[] doubleArray36 = new double[] { 0.0f, 0.0f }; double[] doubleArray39 = new double[] { 0.0f, 0.0f }; double[][] doubleArray40 = new double[][] { doubleArray27, doubleArray30, doubleArray33, doubleArray36, doubleArray39 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray23, orderDirection24, doubleArray40); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray12, doubleArray40); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException43 = new org.apache.commons.math.exception.MathArithmeticException(localizable3, (java.lang.Object[]) doubleArray40); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException44 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) 7.307059979368067E43d, (java.lang.Object[]) doubleArray40); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException45 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) doubleArray40); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException46 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray40); org.apache.commons.math.exception.util.ExceptionContext exceptionContext47 = mathArithmeticException46.getContext(); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection14 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection14.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertNotNull(exceptionContext47); }
public void test0855() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0855"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sin(); org.apache.commons.math.complex.Complex complex6 = complex4.pow((double) 1L); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); org.apache.commons.math.complex.Complex complex10 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z(); org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = complex6.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex1.subtract(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); }
public void test0856() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0856"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((double) 6.8074496E8f, 1.0795745309222884E9d); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0857() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0857"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.cosh(); java.lang.Object obj4 = complex2.readResolve(); double double5 = complex2.abs(); org.apache.commons.math.complex.Complex complex7 = complex2.pow(Double.NEGATIVE_INFINITY); org.apache.commons.math.complex.ComplexField complexField8 = complex7.getField(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(obj4); org.junit.Assert.assertEquals(obj4.toString(), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "(-10.0, -0.0)"); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complexField8); }
public void test0858() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0858"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException3 = new org.apache.commons.math.exception.DimensionMismatchException(localizable0, 30, 1090401488); }
public void test0859() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0859"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(4.9E-324d, 6880.817293923487d); org.apache.commons.math.complex.Complex complex3 = complex2.tan(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test0860() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0860"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; java.lang.Object[] objArray3 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException4 = new org.apache.commons.math.exception.MathArithmeticException(localizable1, objArray3); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException5 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, objArray3); org.junit.Assert.assertNotNull(objArray3); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[1.0]"); }
public void test0861() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0861"); float float1 = org.apache.commons.math.util.FastMath.signum((float) 680745024L); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0862() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0862"); double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble((int) ' ', 0); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d); }
public void test0863() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0863"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((double) 35L, 2.2737367544323206E-13d, (int) (short) 100); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0864() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0864"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); org.apache.commons.math.complex.Complex complex5 = complex2.createComplex(52.009614495783374d, 0.0d); org.apache.commons.math.complex.Complex complex6 = complex5.acos(); org.apache.commons.math.complex.Complex complex7 = complex6.tan(); java.lang.Class<?> wildcardClass8 = complex6.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test0865() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0865"); double double1 = org.apache.commons.math.util.FastMath.abs(1.7182818284590453d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.7182818284590453d + "'", double1 == 1.7182818284590453d); }
public void test0866() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0866"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(69.35408138262233d); org.apache.commons.math.complex.Complex complex2 = complex1.exp(); java.lang.Object obj3 = complex2.readResolve(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(obj3); org.junit.Assert.assertEquals(obj3.toString(), "(1.3185446530635922E30, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "(1.3185446530635922E30, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "(1.3185446530635922E30, 0.0)"); }
public void test0867() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0867"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray14); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 101); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); double[] doubleArray30 = new double[] { (-1), (byte) 100 }; double double31 = org.apache.commons.math.util.MathUtils.distance1(doubleArray27, doubleArray30); double[] doubleArray33 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray30, 100); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray33); double double35 = org.apache.commons.math.util.MathUtils.distance(doubleArray8, doubleArray33); double[] doubleArray36 = null; double[] doubleArray40 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray42 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray40, (int) (short) 0); boolean boolean43 = org.apache.commons.math.util.MathUtils.equals(doubleArray36, doubleArray40); double[] doubleArray44 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray40); double[] doubleArray48 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray50 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray48, (int) (short) 0); double[] doubleArray53 = new double[] { (-1), (byte) 100 }; double double54 = org.apache.commons.math.util.MathUtils.distance1(doubleArray50, doubleArray53); boolean boolean55 = org.apache.commons.math.util.MathUtils.equals(doubleArray44, doubleArray50); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray44); double[] doubleArray58 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray44, 0.0d); double double59 = org.apache.commons.math.util.MathUtils.linearCombination(doubleArray8, doubleArray58); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.checkOrder(doubleArray58); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NonMonotonousSequenceException; message: points 0 and 1 are not strictly increasing (0 >= -0)"); } catch (org.apache.commons.math.exception.NonMonotonousSequenceException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 142.83907028540895d + "'", double35 == 142.83907028540895d); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]"); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[]"); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, -0.0, -0.0]"); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); }
public void test0868() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0868"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex4 = complex1.subtract(complex3); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.util.Localizable localizable7 = null; org.apache.commons.math.exception.util.Localizable localizable8 = null; java.lang.Object[] objArray10 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException11 = new org.apache.commons.math.exception.MathArithmeticException(localizable8, objArray10); org.apache.commons.math.exception.NullArgumentException nullArgumentException12 = new org.apache.commons.math.exception.NullArgumentException(localizable7, objArray10); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException13 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) 4L, objArray10); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex4, localizable5, objArray10); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(objArray10); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[1.0]"); }
public void test0869() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0869"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) Double.POSITIVE_INFINITY, (java.lang.Number) 10.0d, (int) ' '); java.lang.Number number4 = nonMonotonousSequenceException3.getPrevious(); boolean boolean5 = nonMonotonousSequenceException3.getStrict(); org.apache.commons.math.exception.util.Localizable localizable6 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException8 = new org.apache.commons.math.exception.NotPositiveException(localizable6, (java.lang.Number) 104.04806581575652d); nonMonotonousSequenceException3.addSuppressed((java.lang.Throwable) notPositiveException8); boolean boolean10 = nonMonotonousSequenceException3.getStrict(); org.apache.commons.math.exception.NotPositiveException notPositiveException12 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 35.000004f); org.apache.commons.math.exception.util.Localizable localizable13 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException15 = new org.apache.commons.math.exception.NotPositiveException(localizable13, (java.lang.Number) 104.04806581575652d); notPositiveException12.addSuppressed((java.lang.Throwable) notPositiveException15); nonMonotonousSequenceException3.addSuppressed((java.lang.Throwable) notPositiveException12); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection18 = nonMonotonousSequenceException3.getDirection(); org.junit.Assert.assertEquals("'" + number4 + "' != '" + 10.0d + "'", number4, 10.0d); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertTrue("'" + orderDirection18 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection18.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); }
public void test0870() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0870"); int[] intArray4 = new int[] { 52, 6, 'a', 680745024 }; int[] intArray7 = new int[] { (byte) 100, 10 }; int[] intArray13 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double14 = org.apache.commons.math.util.MathUtils.distance(intArray7, intArray13); int[] intArray16 = org.apache.commons.math.util.MathUtils.copyOf(intArray13, (int) (byte) 10); int int17 = org.apache.commons.math.util.MathUtils.distanceInf(intArray4, intArray16); int[] intArray20 = new int[] { (byte) 100, 10 }; int[] intArray26 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double27 = org.apache.commons.math.util.MathUtils.distance(intArray20, intArray26); int[] intArray30 = new int[] { (byte) 100, 10 }; int[] intArray36 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double37 = org.apache.commons.math.util.MathUtils.distance(intArray30, intArray36); int int38 = org.apache.commons.math.util.MathUtils.distanceInf(intArray20, intArray36); double double39 = org.apache.commons.math.util.MathUtils.distance(intArray4, intArray36); int[] intArray41 = org.apache.commons.math.util.MathUtils.copyOf(intArray36, 260); int[] intArray44 = new int[] { (byte) 100, 10 }; int[] intArray50 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double51 = org.apache.commons.math.util.MathUtils.distance(intArray44, intArray50); int[] intArray54 = new int[] { (byte) 100, 10 }; int[] intArray60 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double61 = org.apache.commons.math.util.MathUtils.distance(intArray54, intArray60); int int62 = org.apache.commons.math.util.MathUtils.distance1(intArray44, intArray54); // The following exception was thrown during execution in test generation try { int int63 = org.apache.commons.math.util.MathUtils.distance1(intArray36, intArray54); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(intArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 6, 97, 680745024]"); org.junit.Assert.assertNotNull(intArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100, 10]"); org.junit.Assert.assertNotNull(intArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 104.04806581575652d + "'", double14 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 680745023 + "'", int17 == 680745023); org.junit.Assert.assertNotNull(intArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100, 10]"); org.junit.Assert.assertNotNull(intArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 104.04806581575652d + "'", double27 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, 10]"); org.junit.Assert.assertNotNull(intArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 104.04806581575652d + "'", double37 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 101 + "'", int38 == 101); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 6.807450230000095E8d + "'", double39 == 6.807450230000095E8d); org.junit.Assert.assertNotNull(intArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[100, 10]"); org.junit.Assert.assertNotNull(intArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 104.04806581575652d + "'", double51 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[100, 10]"); org.junit.Assert.assertNotNull(intArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 104.04806581575652d + "'", double61 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0); }
public void test0871() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0871"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex6 = complex4.subtract(0.0d); org.apache.commons.math.complex.Complex complex8 = complex4.multiply((double) 10.0f); org.apache.commons.math.complex.Complex complex10 = complex8.pow((double) 96); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); }
public void test0872() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0872"); long long2 = org.apache.commons.math.util.FastMath.max((long) (-127), 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test0873() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0873"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); double double3 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex8 = complex6.subtract((double) (byte) 10); org.apache.commons.math.complex.Complex complex9 = complex4.multiply(complex8); org.apache.commons.math.complex.Complex complex10 = complex1.subtract(complex8); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test0874() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0874"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 1.5301121227016508d, (java.lang.Number) 6.591783121186793E31d, 0); boolean boolean4 = nonMonotonousSequenceException3.getStrict(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) boolean4); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); }
public void test0875() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0875"); // The following exception was thrown during execution in test generation try { long long2 = org.apache.commons.math.util.MathUtils.pow((long) 71680, (-680745013L)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: exponent (-680,745,013)"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test0876() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0876"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.conjugate(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex5.sinh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex6.pow(complex8); org.apache.commons.math.complex.Complex complex12 = complex8.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.sin(); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex12.multiply(complex15); org.apache.commons.math.complex.Complex complex18 = complex17.tanh(); org.apache.commons.math.complex.Complex complex19 = complex3.add(complex17); org.apache.commons.math.complex.Complex complex20 = complex3.sinh(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.sin(); double double23 = complex22.getImaginary(); org.apache.commons.math.complex.Complex complex24 = complex22.exp(); org.apache.commons.math.complex.Complex complex25 = complex3.add(complex22); org.apache.commons.math.complex.Complex complex26 = complex2.multiply(complex25); java.util.List<org.apache.commons.math.complex.Complex> complexList28 = complex2.nthRoot(39520); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complexList28); }
public void test0877() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0877"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1.04221274E9f), (-3.9999961853027344d)); }
public void test0878() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0878"); // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.math.util.MathUtils.lcm(123725, 1475346432); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: arithmetic exception"); } catch (org.apache.commons.math.exception.MathArithmeticException e) { // Expected exception. } }
public void test0879() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0879"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) Double.POSITIVE_INFINITY, (java.lang.Number) 10.0d, (int) ' '); java.lang.Number number4 = nonMonotonousSequenceException3.getPrevious(); boolean boolean5 = nonMonotonousSequenceException3.getStrict(); org.apache.commons.math.exception.util.Localizable localizable6 = null; org.apache.commons.math.exception.util.Localizable localizable7 = null; java.lang.Object[] objArray9 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException10 = new org.apache.commons.math.exception.MathArithmeticException(localizable7, objArray9); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable6, objArray9); java.lang.Throwable throwable12 = mathIllegalArgumentException11.getException(); nonMonotonousSequenceException3.addSuppressed(throwable12); org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException16 = new org.apache.commons.math.exception.DimensionMismatchException((int) (byte) 1, (int) (short) 100); java.lang.Throwable throwable17 = dimensionMismatchException16.getException(); throwable12.addSuppressed((java.lang.Throwable) dimensionMismatchException16); org.junit.Assert.assertEquals("'" + number4 + "' != '" + 10.0d + "'", number4, 10.0d); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(objArray9); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[1.0]"); org.junit.Assert.assertNotNull(throwable12); org.junit.Assert.assertNotNull(throwable17); org.junit.Assert.assertEquals(throwable17.getLocalizedMessage(), "1 != 100"); org.junit.Assert.assertEquals(throwable17.getMessage(), "1 != 100"); org.junit.Assert.assertEquals(throwable17.toString(), "org.apache.commons.math.exception.DimensionMismatchException: 1 != 100"); }
public void test0880() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0880"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray8 = new double[] { (-1), (byte) 100 }; double double9 = org.apache.commons.math.util.MathUtils.distance1(doubleArray5, doubleArray8); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection10 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean13 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray8, orderDirection10, false, true); double[] doubleArray17 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray19 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection20 = null; double[] doubleArray23 = new double[] { 0.0f, 0.0f }; double[] doubleArray26 = new double[] { 0.0f, 0.0f }; double[] doubleArray29 = new double[] { 0.0f, 0.0f }; double[] doubleArray32 = new double[] { 0.0f, 0.0f }; double[] doubleArray35 = new double[] { 0.0f, 0.0f }; double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray19, orderDirection20, doubleArray36); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray8, doubleArray36); double[] doubleArray40 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 152); double[] doubleArray41 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray40); double[] doubleArray43 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray40, 152); double[] doubleArray47 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray49 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray47, (int) (short) 0); double[] doubleArray52 = new double[] { (-1), (byte) 100 }; double double53 = org.apache.commons.math.util.MathUtils.distance1(doubleArray49, doubleArray52); double[] doubleArray55 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray52, 100); double[] doubleArray57 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray52, 100); boolean boolean58 = org.apache.commons.math.util.MathUtils.equals(doubleArray43, doubleArray52); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection10.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); }
public void test0881() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0881"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); boolean boolean3 = complex2.isInfinite(); org.apache.commons.math.complex.Complex complex6 = complex2.createComplex((double) (-1.0f), 0.0d); org.apache.commons.math.complex.Complex complex7 = complex2.atan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test0882() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0882"); int int1 = org.apache.commons.math.util.FastMath.abs((-751914122)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 751914122 + "'", int1 == 751914122); }
public void test0883() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0883"); float float2 = org.apache.commons.math.util.MathUtils.round((float) 6L, 1078034432); org.junit.Assert.assertTrue(Float.isNaN(float2)); }
public void test0884() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0884"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, 0); double[] doubleArray14 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray14); double[] doubleArray17 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray14, 6); double[][] doubleArray18 = new double[][] {}; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray14, doubleArray18); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray7, doubleArray18); // The following exception was thrown during execution in test generation try { double[] doubleArray22 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray7, (double) 27360L); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: array sums to zero"); } catch (org.apache.commons.math.exception.MathArithmeticException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 1.0, 32.0, 35.0, 100.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray18); }
public void test0885() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0885"); float float2 = org.apache.commons.math.util.MathUtils.round((float) 1655309493L, (-1023)); org.junit.Assert.assertTrue(Float.isNaN(float2)); }
public void test0886() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0886"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.acos(); org.apache.commons.math.complex.Complex complex3 = complex2.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test0887() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0887"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex1.atan(); org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z(); double double15 = complex14.getReal(); org.apache.commons.math.complex.Complex complex16 = complex14.exp(); org.apache.commons.math.complex.Complex complex17 = complex14.cos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7146114112494588d + "'", double15 == 0.7146114112494588d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); }
public void test0888() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0888"); double[] doubleArray0 = null; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException4 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) Double.POSITIVE_INFINITY, (java.lang.Number) 10.0d, (int) ' '); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection5 = nonMonotonousSequenceException4.getDirection(); // The following exception was thrown during execution in test generation try { boolean boolean8 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray0, orderDirection5, false, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + orderDirection5 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection5.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); }
public void test0889() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0889"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; java.lang.Object[] objArray5 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException6 = new org.apache.commons.math.exception.MathArithmeticException(localizable3, objArray5); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException7 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable2, objArray5); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException8 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable0, (java.lang.Number) 95.99999999999999d, objArray5); org.apache.commons.math.exception.util.Localizable localizable9 = null; org.apache.commons.math.exception.util.Localizable localizable10 = null; org.apache.commons.math.exception.util.Localizable localizable11 = null; org.apache.commons.math.exception.util.Localizable localizable12 = null; org.apache.commons.math.exception.util.Localizable localizable14 = null; double[] doubleArray18 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray18, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection21 = null; double[] doubleArray24 = new double[] { 0.0f, 0.0f }; double[] doubleArray27 = new double[] { 0.0f, 0.0f }; double[] doubleArray30 = new double[] { 0.0f, 0.0f }; double[] doubleArray33 = new double[] { 0.0f, 0.0f }; double[] doubleArray36 = new double[] { 0.0f, 0.0f }; double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray20, orderDirection21, doubleArray37); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable14, (java.lang.Object[]) doubleArray37); org.apache.commons.math.exception.NullArgumentException nullArgumentException40 = new org.apache.commons.math.exception.NullArgumentException(localizable12, (java.lang.Object[]) doubleArray37); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException41 = new org.apache.commons.math.exception.MathArithmeticException(localizable11, (java.lang.Object[]) doubleArray37); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException42 = new org.apache.commons.math.exception.MathArithmeticException(localizable10, (java.lang.Object[]) doubleArray37); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException43 = new org.apache.commons.math.exception.MathArithmeticException(localizable9, (java.lang.Object[]) doubleArray37); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) mathArithmeticException43); java.lang.Throwable throwable45 = mathArithmeticException43.getException(); org.apache.commons.math.exception.util.Localizable localizable46 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException50 = new org.apache.commons.math.exception.NumberIsTooLargeException(localizable46, (java.lang.Number) 10L, (java.lang.Number) 100L, false); org.apache.commons.math.exception.util.ExceptionContext exceptionContext51 = numberIsTooLargeException50.getContext(); boolean boolean52 = numberIsTooLargeException50.getBoundIsAllowed(); throwable45.addSuppressed((java.lang.Throwable) numberIsTooLargeException50); notFiniteNumberException8.addSuppressed(throwable45); org.junit.Assert.assertNotNull(objArray5); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[1.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertNotNull(throwable45); org.junit.Assert.assertNotNull(exceptionContext51); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); }
public void test0890() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0890"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex0.sinh(); java.lang.Object obj18 = complex17.readResolve(); org.apache.commons.math.complex.Complex complex20 = complex17.pow(4.312315229512479d); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.sqrt(); org.apache.commons.math.complex.Complex complex23 = complex21.tanh(); org.apache.commons.math.complex.Complex complex24 = complex23.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField25 = complex24.getField(); org.apache.commons.math.complex.Complex complex26 = complexField25.getZero(); org.apache.commons.math.complex.Complex complex27 = complexField25.getZero(); org.apache.commons.math.complex.Complex complex28 = complexField25.getOne(); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex30 = complex29.negate(); org.apache.commons.math.complex.Complex complex32 = complex29.pow((double) 20); org.apache.commons.math.complex.Complex complex33 = complex32.sin(); org.apache.commons.math.complex.Complex complex34 = complex32.exp(); org.apache.commons.math.complex.Complex complex35 = complex28.multiply(complex34); org.apache.commons.math.complex.Complex complex36 = complex28.cos(); org.apache.commons.math.complex.Complex complex37 = complex17.add(complex36); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(obj18); org.junit.Assert.assertEquals(obj18.toString(), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complexField25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); }
public void test0891() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0891"); int int1 = org.apache.commons.math.util.FastMath.getExponent((float) (-3850565377750111653L)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 61 + "'", int1 == 61); }
public void test0892() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0892"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray9 = null; double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); boolean boolean16 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray13); double[] doubleArray17 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13); double[] doubleArray21 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray23 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray21, (int) (short) 0); double[] doubleArray26 = new double[] { (-1), (byte) 100 }; double double27 = org.apache.commons.math.util.MathUtils.distance1(doubleArray23, doubleArray26); boolean boolean28 = org.apache.commons.math.util.MathUtils.equals(doubleArray17, doubleArray23); double[] doubleArray30 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 101); boolean boolean31 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray8, doubleArray17); double[] doubleArray32 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection36 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException38 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 5, (java.lang.Number) 100.0f, (-1), orderDirection36, true); java.lang.Number number39 = nonMonotonousSequenceException38.getPrevious(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext40 = nonMonotonousSequenceException38.getContext(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection41 = nonMonotonousSequenceException38.getDirection(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection42 = nonMonotonousSequenceException38.getDirection(); boolean boolean45 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray32, orderDirection42, false, false); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection49 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException51 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 5, (java.lang.Number) 100.0f, (-1), orderDirection49, true); java.lang.Number number52 = nonMonotonousSequenceException51.getPrevious(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext53 = nonMonotonousSequenceException51.getContext(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection54 = nonMonotonousSequenceException51.getDirection(); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.checkOrder(doubleArray32, orderDirection54, true); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NonMonotonousSequenceException; message: points 0 and 1 are not strictly increasing (100 >= -1)"); } catch (org.apache.commons.math.exception.NonMonotonousSequenceException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertEquals("'" + number39 + "' != '" + 100.0f + "'", number39, 100.0f); org.junit.Assert.assertNotNull(exceptionContext40); org.junit.Assert.assertTrue("'" + orderDirection41 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection41.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection42.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertTrue("'" + orderDirection49 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection49.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertEquals("'" + number52 + "' != '" + 100.0f + "'", number52, 100.0f); org.junit.Assert.assertNotNull(exceptionContext53); org.junit.Assert.assertTrue("'" + orderDirection54 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection54.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); }
public void test0893() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0893"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); java.util.List<org.apache.commons.math.complex.Complex> complexList8 = complex5.nthRoot(52); org.apache.commons.math.complex.Complex complex9 = complex5.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex13.sinh(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex14.pow(complex16); org.apache.commons.math.complex.Complex complex20 = complex16.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex21 = complex20.negate(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex23 = complex22.sin(); double double24 = complex23.getArgument(); org.apache.commons.math.complex.Complex complex25 = complex20.multiply(complex23); org.apache.commons.math.complex.Complex complex26 = complex25.tanh(); boolean boolean27 = complex10.equals((java.lang.Object) complex25); double double28 = complex25.getArgument(); org.apache.commons.math.complex.Complex complex29 = complex25.tanh(); org.apache.commons.math.complex.Complex complex30 = complex25.sin(); org.apache.commons.math.complex.Complex complex31 = complex9.pow(complex30); org.apache.commons.math.complex.Complex complex32 = complex31.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complexList8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-2.356194490192345d) + "'", double28 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); }
public void test0894() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0894"); org.apache.commons.math.exception.util.Localizable localizable1 = null; java.lang.Object[] objArray2 = null; org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 5.480656284001007d, localizable1, objArray2); }
public void test0895() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0895"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; double[] doubleArray5 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection8 = null; double[] doubleArray11 = new double[] { 0.0f, 0.0f }; double[] doubleArray14 = new double[] { 0.0f, 0.0f }; double[] doubleArray17 = new double[] { 0.0f, 0.0f }; double[] doubleArray20 = new double[] { 0.0f, 0.0f }; double[] doubleArray23 = new double[] { 0.0f, 0.0f }; double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray14, doubleArray17, doubleArray20, doubleArray23 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray7, orderDirection8, doubleArray24); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException26 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) doubleArray24); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException27 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) doubleArray24); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray24); }
public void test0896() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0896"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex3 = complex0.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); java.util.List<org.apache.commons.math.complex.Complex> complexList6 = complex3.nthRoot((int) (byte) 10); org.apache.commons.math.complex.Complex complex7 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex8 = complex3.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complexList6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test0897() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0897"); int int2 = org.apache.commons.math.util.MathUtils.pow(71680, 528005166); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test0898() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0898"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sin(); double double4 = complex3.getImaginary(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex10 = complex7.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z(); org.apache.commons.math.complex.Complex complex12 = complex6.divide(complex10); org.apache.commons.math.complex.Complex complex13 = complex6.acos(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test0899() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0899"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals(35.000008f, 0.0f, 0); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0900() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0900"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sin(); double double4 = complex3.getImaginary(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex3); org.apache.commons.math.complex.Complex complex9 = complex3.createComplex(6.80745014E8d, 1.7453292519943295d); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test0901() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0901"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.sin(); double double6 = complex5.getImaginary(); double double7 = complex5.getReal(); org.apache.commons.math.complex.Complex complex8 = complex3.multiply(complex5); org.apache.commons.math.complex.Complex complex9 = complex8.tan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.8414709848078965d + "'", double7 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); }
public void test0902() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0902"); double double2 = org.apache.commons.math.util.FastMath.hypot((double) 1368L, 1000.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1694.5276628016434d + "'", double2 == 1694.5276628016434d); }
public void test0903() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0903"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.exception.util.Localizable localizable12 = null; java.lang.Object[] objArray13 = null; org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex10, localizable12, objArray13); org.apache.commons.math.complex.Complex complex16 = complex10.add(4.9E-324d); org.apache.commons.math.complex.Complex complex17 = complex10.atan(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.sin(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex21 = complex20.negate(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = complex24.negate(); org.apache.commons.math.complex.Complex complex26 = complex21.pow(complex25); boolean boolean28 = complex26.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex29 = complex19.divide(complex26); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex32 = complex31.negate(); org.apache.commons.math.complex.Complex complex33 = complex32.cosh(); java.lang.Object obj34 = complex32.readResolve(); double double35 = complex32.abs(); org.apache.commons.math.complex.Complex complex37 = complex32.pow(Double.NEGATIVE_INFINITY); org.apache.commons.math.complex.Complex complex38 = complex29.pow(complex37); org.apache.commons.math.complex.ComplexField complexField39 = complex38.getField(); org.apache.commons.math.complex.Complex complex40 = complex10.divide(complex38); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(obj34); org.junit.Assert.assertEquals(obj34.toString(), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "(-10.0, -0.0)"); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complexField39); org.junit.Assert.assertNotNull(complex40); }
public void test0904() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0904"); double double1 = org.apache.commons.math.util.FastMath.acos(2.14168768474935d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0905() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0905"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) (-1.4753463E9f)); }
public void test0906() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0906"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sin(); double double4 = complex3.getImaginary(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex3); org.apache.commons.math.complex.Complex complex7 = complex3.tan(); org.apache.commons.math.complex.Complex complex8 = complex3.tan(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test0907() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0907"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder(4.950000000000001d, (double) 35.000004f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 4.950000000000001d + "'", double2 == 4.950000000000001d); }
public void test0908() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0908"); java.math.BigInteger bigInteger0 = null; // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger2 = org.apache.commons.math.util.MathUtils.pow(bigInteger0, (long) 'a'); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test0909() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0909"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex13.conjugate(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((double) 6.1035156E-5f); double double17 = complex14.abs(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.190019679058772d + "'", double17 == 1.190019679058772d); }
public void test0910() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0910"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.acos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); }
public void test0911() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0911"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1090401488); org.junit.Assert.assertNotNull(complex1); }
public void test0912() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0912"); float float1 = org.apache.commons.math.util.FastMath.nextUp((-0.99999994f)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + (-0.9999999f) + "'", float1 == (-0.9999999f)); }
public void test0913() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0913"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.cos(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex11.sinh(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex12.cos(); org.apache.commons.math.complex.Complex complex15 = complex8.add(complex12); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-3.141592653589793d) + "'", double13 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); }
public void test0914() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0914"); // The following exception was thrown during execution in test generation try { long long2 = org.apache.commons.math.util.MathUtils.binomialCoefficient((int) (byte) 1, 1028); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: must have n >= k for binomial coefficient (n, k), got k = 1,028, n = 1"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } }
public void test0915() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0915"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.cosh(); org.apache.commons.math.complex.Complex complex5 = complex3.divide(1.7720496304913849d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); }
public void test0916() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0916"); double double2 = org.apache.commons.math.util.FastMath.hypot((double) 1475346432, 200.66100604148377d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.4753464320000136E9d + "'", double2 == 1.4753464320000136E9d); }
public void test0917() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0917"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); double double17 = complex14.abs(); java.util.List<org.apache.commons.math.complex.Complex> complexList19 = complex14.nthRoot((int) (short) 1); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField20 = complex14.getField(); org.apache.commons.math.complex.Complex complex21 = complexField20.getOne(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.7456241416655579d + "'", double17 == 0.7456241416655579d); org.junit.Assert.assertNotNull(complexList19); org.junit.Assert.assertNotNull(complexField20); org.junit.Assert.assertNotNull(complex21); }
public void test0918() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0918"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray14); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 101); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); boolean boolean28 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray8, doubleArray25); double[] doubleArray29 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8); double[] doubleArray33 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray35 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray33, (int) (short) 0); double[] doubleArray37 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray35, 0); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray37); double[] doubleArray39 = new double[] {}; double[] doubleArray40 = null; double[] doubleArray44 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray46 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray44, (int) (short) 0); boolean boolean47 = org.apache.commons.math.util.MathUtils.equals(doubleArray40, doubleArray44); double[] doubleArray48 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray44); double[] doubleArray52 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray54 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray52, (int) (short) 0); double[] doubleArray57 = new double[] { (-1), (byte) 100 }; double double58 = org.apache.commons.math.util.MathUtils.distance1(doubleArray54, doubleArray57); boolean boolean59 = org.apache.commons.math.util.MathUtils.equals(doubleArray48, doubleArray54); double[] doubleArray60 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray48); double[] doubleArray61 = null; boolean boolean62 = org.apache.commons.math.util.MathUtils.equals(doubleArray48, doubleArray61); double double63 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray39, doubleArray48); double double64 = org.apache.commons.math.util.MathUtils.distance1(doubleArray37, doubleArray48); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray37); boolean boolean66 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray8, doubleArray37); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]"); org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double58 + "' != '" + 0.0d + "'", double58 == 0.0d); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.0d + "'", double64 == 0.0d); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); }
public void test0919() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0919"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex19.sinh(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex20.pow(complex22); org.apache.commons.math.complex.Complex complex26 = complex22.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.sin(); double double30 = complex29.getArgument(); org.apache.commons.math.complex.Complex complex31 = complex26.multiply(complex29); org.apache.commons.math.complex.Complex complex32 = complex31.tanh(); org.apache.commons.math.complex.Complex complex33 = complex17.add(complex31); org.apache.commons.math.complex.Complex complex34 = complex14.divide(complex33); org.apache.commons.math.complex.Complex complex35 = complex14.conjugate(); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex39 = complex37.pow(0.3490658503988659d); org.apache.commons.math.complex.Complex complex40 = complex35.subtract(complex37); org.apache.commons.math.complex.Complex complex41 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex42 = complex37.add(complex41); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); }
public void test0920() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0920"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(0.0d); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.junit.Assert.assertNotNull(complex2); }
public void test0921() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0921"); int[] intArray0 = null; int[] intArray3 = new int[] { (byte) 100, 10 }; int[] intArray9 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double10 = org.apache.commons.math.util.MathUtils.distance(intArray3, intArray9); int[] intArray12 = org.apache.commons.math.util.MathUtils.copyOf(intArray9, (int) (byte) 10); int[] intArray15 = new int[] { (byte) 100, 10 }; int[] intArray21 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double22 = org.apache.commons.math.util.MathUtils.distance(intArray15, intArray21); int[] intArray25 = new int[] { (byte) 100, 10 }; int[] intArray31 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double32 = org.apache.commons.math.util.MathUtils.distance(intArray25, intArray31); double double33 = org.apache.commons.math.util.MathUtils.distance(intArray21, intArray31); int[] intArray34 = org.apache.commons.math.util.MathUtils.copyOf(intArray21); double double35 = org.apache.commons.math.util.MathUtils.distance(intArray9, intArray34); int[] intArray36 = org.apache.commons.math.util.MathUtils.copyOf(intArray34); // The following exception was thrown during execution in test generation try { int int37 = org.apache.commons.math.util.MathUtils.distanceInf(intArray0, intArray36); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(intArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10]"); org.junit.Assert.assertNotNull(intArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 104.04806581575652d + "'", double10 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[100, 10]"); org.junit.Assert.assertNotNull(intArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 104.04806581575652d + "'", double22 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[100, 10]"); org.junit.Assert.assertNotNull(intArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 104.04806581575652d + "'", double32 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertNotNull(intArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertNotNull(intArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 35, 0, 1, 0]"); }
public void test0922() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0922"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); java.lang.String str4 = complex3.toString(); double double5 = complex3.getImaginary(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(1.0, 0.0)" + "'", str4, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); }
public void test0923() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0923"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, 0); double[] doubleArray11 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray13 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray11, (int) (short) 0); double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, 0); double double16 = org.apache.commons.math.util.MathUtils.distance(doubleArray5, doubleArray13); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray13); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); }
public void test0924() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0924"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); double double3 = complex1.getReal(); org.apache.commons.math.complex.Complex complex5 = complex1.add(0.9234560495448352d); org.apache.commons.math.complex.Complex complex7 = complex1.pow((double) 1044974034490875315L); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.8414709848078965d + "'", double3 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); }
public void test0925() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0925"); float float1 = org.apache.commons.math.util.FastMath.signum(8.671307E-30f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0926() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0926"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex0.sinh(); java.lang.Object obj18 = complex17.readResolve(); org.apache.commons.math.complex.Complex complex20 = complex17.pow(4.312315229512479d); boolean boolean21 = complex17.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(obj18); org.junit.Assert.assertEquals(obj18.toString(), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); }
public void test0927() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0927"); double double4 = org.apache.commons.math.util.MathUtils.linearCombination(201.00931639928152d, 2.331754383710714d, (double) 520, 2.1513092806481256E16d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.1186808259370254E19d + "'", double4 == 1.1186808259370254E19d); }
public void test0928() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0928"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex4 = complex1.subtract(complex3); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex8 = complex5.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.cosh(); org.apache.commons.math.complex.Complex complex11 = complex3.pow(complex9); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); }
public void test0929() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0929"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex5.sqrt(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex8.sinh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex9.pow(complex11); org.apache.commons.math.complex.Complex complex15 = complex11.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sin(); double double19 = complex18.getArgument(); org.apache.commons.math.complex.Complex complex20 = complex15.multiply(complex18); org.apache.commons.math.complex.Complex complex21 = complex18.sin(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex23 = complex21.add(complex22); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex26 = complex25.negate(); org.apache.commons.math.complex.Complex complex27 = complex26.sinh(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.negate(); org.apache.commons.math.complex.Complex complex30 = complex27.pow(complex29); org.apache.commons.math.complex.Complex complex33 = complex29.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex34 = complex33.negate(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex36 = complex35.sin(); double double37 = complex36.getArgument(); org.apache.commons.math.complex.Complex complex38 = complex33.multiply(complex36); org.apache.commons.math.complex.Complex complex39 = complex38.tanh(); org.apache.commons.math.complex.Complex complex40 = complex24.add(complex38); org.apache.commons.math.complex.Complex complex41 = complex21.divide(complex40); org.apache.commons.math.complex.Complex complex42 = complex40.acos(); org.apache.commons.math.complex.Complex complex43 = complex6.multiply(complex40); org.apache.commons.math.complex.Complex complex44 = complex6.negate(); org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex46 = complex45.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField47 = complex45.getField(); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex49 = complex48.sqrt(); org.apache.commons.math.complex.Complex complex50 = complex48.log(); org.apache.commons.math.complex.Complex complex51 = complex45.add(complex48); org.apache.commons.math.complex.Complex complex52 = complex44.subtract(complex45); org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex54 = complex53.sin(); org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex56 = complex55.negate(); org.apache.commons.math.complex.Complex complex57 = complex56.sinh(); org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex59 = complex58.negate(); org.apache.commons.math.complex.Complex complex60 = complex57.pow(complex59); org.apache.commons.math.complex.Complex complex63 = complex59.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex64 = complex63.negate(); org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex66 = complex65.sin(); double double67 = complex66.getArgument(); org.apache.commons.math.complex.Complex complex68 = complex63.multiply(complex66); org.apache.commons.math.complex.Complex complex69 = complex68.tanh(); boolean boolean70 = complex53.equals((java.lang.Object) complex68); org.apache.commons.math.complex.Complex complex71 = complex68.tan(); org.apache.commons.math.complex.Complex complex73 = complex71.subtract((double) 1.0f); org.apache.commons.math.complex.Complex complex74 = complex44.subtract(complex73); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complexField47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); }
public void test0930() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0930"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray9 = null; double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); boolean boolean16 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray13); double[] doubleArray17 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13); double[] doubleArray21 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray23 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray21, (int) (short) 0); double[] doubleArray26 = new double[] { (-1), (byte) 100 }; double double27 = org.apache.commons.math.util.MathUtils.distance1(doubleArray23, doubleArray26); boolean boolean28 = org.apache.commons.math.util.MathUtils.equals(doubleArray17, doubleArray23); double[] doubleArray30 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 101); double double31 = org.apache.commons.math.util.MathUtils.distance(doubleArray8, doubleArray30); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray30); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); }
public void test0931() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0931"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex2.sqrt1z(); java.lang.String str6 = complex5.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertEquals("'" + str6 + "' != '" + "(0.0, 0.6173312283870106)" + "'", str6, "(0.0, 0.6173312283870106)"); }
public void test0932() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0932"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (byte) 100); boolean boolean2 = notPositiveException1.getBoundIsAllowed(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext3 = notPositiveException1.getContext(); java.lang.Number number4 = notPositiveException1.getMin(); java.lang.Number number5 = notPositiveException1.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = notPositiveException1.getContext(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertNotNull(exceptionContext3); org.junit.Assert.assertEquals("'" + number4 + "' != '" + 0 + "'", number4, 0); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 0 + "'", number5, 0); org.junit.Assert.assertNotNull(exceptionContext6); }
public void test0933() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0933"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 32); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.exp(); org.apache.commons.math.complex.Complex complex17 = complex1.multiply(complex16); org.apache.commons.math.complex.Complex complex18 = complex16.sinh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); }
public void test0934() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0934"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex0.tanh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.sqrt(); org.apache.commons.math.complex.Complex complex6 = complex4.tanh(); org.apache.commons.math.complex.Complex complex7 = complex6.exp(); org.apache.commons.math.complex.Complex complex8 = complex3.multiply(complex7); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test0935() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0935"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 100); boolean boolean21 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray20); double double22 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray20); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray20); double[] doubleArray27 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray29 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray27, (int) (short) 0); double[] doubleArray32 = new double[] { (-1), (byte) 100 }; double double33 = org.apache.commons.math.util.MathUtils.distance1(doubleArray29, doubleArray32); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection34 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean37 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray32, orderDirection34, false, true); double[] doubleArray41 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray43 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray41, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection44 = null; double[] doubleArray47 = new double[] { 0.0f, 0.0f }; double[] doubleArray50 = new double[] { 0.0f, 0.0f }; double[] doubleArray53 = new double[] { 0.0f, 0.0f }; double[] doubleArray56 = new double[] { 0.0f, 0.0f }; double[] doubleArray59 = new double[] { 0.0f, 0.0f }; double[][] doubleArray60 = new double[][] { doubleArray47, doubleArray50, doubleArray53, doubleArray56, doubleArray59 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray43, orderDirection44, doubleArray60); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray32, doubleArray60); double[] doubleArray64 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray32, 152); double[] doubleArray65 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray64); double[] doubleArray66 = null; double[] doubleArray70 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray72 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray70, (int) (short) 0); boolean boolean73 = org.apache.commons.math.util.MathUtils.equals(doubleArray66, doubleArray70); double[] doubleArray74 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray70); double[] doubleArray76 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray70, 26091.090931580457d); boolean boolean77 = org.apache.commons.math.util.MathUtils.equals(doubleArray64, doubleArray70); double double78 = org.apache.commons.math.util.MathUtils.distance1(doubleArray20, doubleArray64); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.00499987500625d + "'", double22 == 100.00499987500625d); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection34 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection34.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray70); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[]"); org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false); org.junit.Assert.assertNotNull(doubleArray74); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[26623.5621750821, -266.235621750821, -266.235621750821]"); org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); }
public void test0936() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0936"); long long2 = org.apache.commons.math.util.MathUtils.addAndCheck(0L, 1219337030L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1219337030L + "'", long2 == 1219337030L); }
public void test0937() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0937"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply(1.410065408E11d); org.apache.commons.math.complex.Complex complex7 = complex3.log(); org.apache.commons.math.complex.Complex complex8 = complex7.acos(); boolean boolean9 = complex7.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test0938() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0938"); long long2 = org.apache.commons.math.util.FastMath.max(25L, (long) 1219337025); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1219337025L + "'", long2 == 1219337025L); }
public void test0939() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0939"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex3 = complex0.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex4.cosh(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex7.sinh(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex8.pow(complex10); org.apache.commons.math.complex.Complex complex14 = complex10.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex17 = complex16.sin(); double double18 = complex17.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex14.multiply(complex17); org.apache.commons.math.complex.Complex complex20 = complex17.sin(); org.apache.commons.math.complex.Complex complex21 = complex17.sin(); org.apache.commons.math.complex.Complex complex22 = complex4.subtract(complex21); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test0940() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0940"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((float) 1368L, 520.0f, (-1475346432)); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0941() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0941"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); org.apache.commons.math.complex.Complex complex4 = complex0.multiply((double) 5); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException8 = new org.apache.commons.math.exception.DimensionMismatchException(20, (int) (byte) -1); java.lang.Throwable[] throwableArray9 = dimensionMismatchException8.getSuppressed(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 5, localizable5, (java.lang.Object[]) throwableArray9); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(throwableArray9); }
public void test0942() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0942"); int int1 = org.apache.commons.math.util.FastMath.getExponent((-1.98363951E18f)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 60 + "'", int1 == 60); }
public void test0943() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0943"); double double2 = org.apache.commons.math.util.FastMath.hypot(2.718156284313958d, (-0.014112307511333414d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.7181929186830645d + "'", double2 == 2.7181929186830645d); }
public void test0944() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0944"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex3 = complex0.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex4.exp(); org.apache.commons.math.complex.ComplexField complexField6 = complex4.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complexField6); }
public void test0945() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0945"); double double1 = org.apache.commons.math.util.MathUtils.sinh((-0.6099212984507736d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.6484464631832303d) + "'", double1 == (-0.6484464631832303d)); }
public void test0946() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0946"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1410065408, (double) 36.000004f); }
public void test0947() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0947"); // The following exception was thrown during execution in test generation try { long long2 = org.apache.commons.math.util.MathUtils.pow((long) 5, (-9223372036854775808L)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: exponent (-9,223,372,036,854,775,808)"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test0948() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0948"); double double1 = org.apache.commons.math.util.FastMath.rint(1.3280741448105455d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0949() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0949"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex6 = complex3.divide(26091.090931580457d); org.apache.commons.math.complex.Complex complex8 = complex3.multiply(32856.879462298304d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); }
public void test0950() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0950"); float float1 = org.apache.commons.math.util.FastMath.abs((float) 1655309493L); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.65530944E9f + "'", float1 == 1.65530944E9f); }
public void test0951() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0951"); float float2 = org.apache.commons.math.util.FastMath.nextAfter((-0.99999994f), (double) 1786706395138L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-0.9999999f) + "'", float2 == (-0.9999999f)); }
public void test0952() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0952"); double double1 = org.apache.commons.math.util.FastMath.toRadians(6.537792819726184d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.114106010517466d + "'", double1 == 0.114106010517466d); }
public void test0953() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0953"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); org.apache.commons.math.complex.Complex complex4 = complex0.tanh(); org.apache.commons.math.complex.Complex complex6 = complex0.add(0.0d); double double7 = complex0.getArgument(); org.apache.commons.math.complex.Complex complex8 = complex0.cos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); }
public void test0954() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0954"); double double1 = org.apache.commons.math.util.FastMath.sqrt(Double.NEGATIVE_INFINITY); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0955() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0955"); java.lang.Number number1 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 31226.20333168672d, number1, false); }
public void test0956() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0956"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex15.sqrt(); org.apache.commons.math.complex.Complex complex69 = complex68.tanh(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField70 = complex69.getField(); org.apache.commons.math.complex.Complex complex71 = complexField70.getOne(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complexField70); org.junit.Assert.assertNotNull(complex71); }
public void test0957() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0957"); double double8 = org.apache.commons.math.util.MathUtils.linearCombination((double) 1079574528, 2.302585092994046d, (double) 5459025742952136705L, (double) 61, 104.04806581575652d, (-1.5707963267948966d), (double) (-1944488865), 0.017453292519943295d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.3300057032253224E20d + "'", double8 == 3.3300057032253224E20d); }
public void test0958() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0958"); org.apache.commons.math.exception.util.Localizable localizable0 = null; java.lang.Object[] objArray2 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException3 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, objArray2); java.lang.Throwable throwable4 = mathArithmeticException3.getException(); java.lang.Throwable throwable5 = mathArithmeticException3.getException(); java.lang.Throwable throwable6 = mathArithmeticException3.getException(); org.junit.Assert.assertNotNull(objArray2); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[1.0]"); org.junit.Assert.assertNotNull(throwable4); org.junit.Assert.assertNotNull(throwable5); org.junit.Assert.assertNotNull(throwable6); }
public void test0959() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0959"); double double2 = org.apache.commons.math.util.FastMath.min((double) 71680, (double) 1.7867064E12f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 71680.0d + "'", double2 == 71680.0d); }
public void test0960() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0960"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.exp(); org.apache.commons.math.complex.Complex complex5 = complex3.add((-107.32715686847266d)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); }
public void test0961() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0961"); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection3 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException5 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (-3.141592653589793d), (java.lang.Number) 2.271483493251976E220d, (int) '4', orderDirection3, false); java.lang.Number number6 = nonMonotonousSequenceException5.getArgument(); org.junit.Assert.assertTrue("'" + orderDirection3 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection3.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertEquals("'" + number6 + "' != '" + (-3.141592653589793d) + "'", number6, (-3.141592653589793d)); }
public void test0962() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0962"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sin(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); }
public void test0963() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0963"); org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable4 = null; double[] doubleArray8 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray10 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection11 = null; double[] doubleArray14 = new double[] { 0.0f, 0.0f }; double[] doubleArray17 = new double[] { 0.0f, 0.0f }; double[] doubleArray20 = new double[] { 0.0f, 0.0f }; double[] doubleArray23 = new double[] { 0.0f, 0.0f }; double[] doubleArray26 = new double[] { 0.0f, 0.0f }; double[][] doubleArray27 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23, doubleArray26 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray10, orderDirection11, doubleArray27); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable4, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException30 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) (-1.0f), (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.NullArgumentException nullArgumentException31 = new org.apache.commons.math.exception.NullArgumentException(localizable1, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException32 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) 0.4391033456703824d, (java.lang.Object[]) doubleArray27); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray27); }
public void test0964() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0964"); int int1 = org.apache.commons.math.util.FastMath.abs((int) '#'); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 35 + "'", int1 == 35); }
public void test0965() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0965"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complex5.add((double) (-680745036L)); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex7); org.apache.commons.math.complex.Complex complex9 = complex7.conjugate(); org.apache.commons.math.complex.ComplexField complexField10 = complex9.getField(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sqrt(); boolean boolean13 = complex12.isInfinite(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complexField10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(complex14); }
public void test0966() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0966"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; org.apache.commons.math.exception.util.Localizable localizable4 = null; org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException7 = new org.apache.commons.math.exception.DimensionMismatchException(localizable4, 0, (int) (short) -1); org.apache.commons.math.exception.util.Localizable localizable8 = null; org.apache.commons.math.exception.util.Localizable localizable9 = null; org.apache.commons.math.exception.util.Localizable localizable10 = null; java.lang.Object[] objArray12 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException13 = new org.apache.commons.math.exception.MathArithmeticException(localizable10, objArray12); org.apache.commons.math.exception.NullArgumentException nullArgumentException14 = new org.apache.commons.math.exception.NullArgumentException(localizable9, objArray12); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) (short) -1, localizable8, objArray12); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException16 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable3, objArray12); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException17 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable2, objArray12); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException18 = new org.apache.commons.math.exception.MathArithmeticException(localizable1, objArray12); org.apache.commons.math.exception.NullArgumentException nullArgumentException19 = new org.apache.commons.math.exception.NullArgumentException(localizable0, objArray12); org.junit.Assert.assertNotNull(objArray12); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[1.0]"); }
public void test0967() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0967"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); org.apache.commons.math.complex.Complex complex8 = complex5.createComplex((double) (-86L), 0.9919317346815598d); org.apache.commons.math.complex.Complex complex10 = complex8.pow(3.5553480614894135d); java.lang.Object obj11 = null; boolean boolean12 = complex8.equals(obj11); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test0968() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0968"); // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.math.util.MathUtils.mulAndCheck(1077477376, 20); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: arithmetic exception"); } catch (org.apache.commons.math.exception.MathArithmeticException e) { // Expected exception. } }
public void test0969() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0969"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(5.480656284001007d); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex3 = complex2.atan(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex4.acos(); org.apache.commons.math.complex.Complex complex7 = complex3.divide(complex6); org.apache.commons.math.complex.Complex complex10 = complex7.createComplex((double) (-86L), 0.9919317346815598d); org.apache.commons.math.complex.Complex complex12 = complex10.pow(3.5553480614894135d); boolean boolean13 = complex1.equals((java.lang.Object) complex10); org.apache.commons.math.complex.ComplexField complexField14 = complex10.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(complexField14); }
public void test0970() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0970"); float float1 = org.apache.commons.math.util.FastMath.abs((float) 2); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 2.0f + "'", float1 == 2.0f); }
public void test0971() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0971"); double double1 = org.apache.commons.math.util.FastMath.cos(0.969693399d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.5655524153707299d + "'", double1 == 0.5655524153707299d); }
public void test0972() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0972"); long long2 = org.apache.commons.math.util.FastMath.min(15201L, (long) 260); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 260L + "'", long2 == 260L); }
public void test0973() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0973"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex3 = complex1.asin(); org.apache.commons.math.complex.Complex complex4 = complex1.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex1.log(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test0974() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0974"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(2.2002552408466745d, 0.0d, (double) 1475346432); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); }
public void test0975() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0975"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(1.5301121227016508d); org.junit.Assert.assertNotNull(complex1); }
public void test0976() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0976"); double double8 = org.apache.commons.math.util.MathUtils.linearCombination(12.566370614359172d, 0.0d, 73.26596177457596d, 2.1416876847493502d, 0.7936037226407198d, (double) 388.0f, (double) 6.591783E31f, 0.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 464.83105242852525d + "'", double8 == 464.83105242852525d); }
public void test0977() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0977"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex4 = complex2.subtract((double) (byte) 10); org.apache.commons.math.complex.Complex complex5 = complex0.multiply(complex4); org.apache.commons.math.complex.Complex complex6 = complex0.cos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); }
public void test0978() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0978"); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection3 = null; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException5 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (-2.356194490192345d), (java.lang.Number) 4.932424148660941d, 1219337025, orderDirection3, false); java.lang.Number number6 = nonMonotonousSequenceException5.getPrevious(); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 4.932424148660941d + "'", number6, 4.932424148660941d); }
public void test0979() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0979"); int int3 = org.apache.commons.math.util.MathUtils.compareTo(1.7669158577947987E48d, 0.0d, (-0.5440211108893698d)); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); }
public void test0980() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0980"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex12.acos(); org.apache.commons.math.complex.ComplexField complexField14 = complex13.getField(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = complex15.subtract((double) 152.00002f); org.apache.commons.math.complex.Complex complex18 = complex17.conjugate(); boolean boolean19 = complex17.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complexField14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test0981() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0981"); double double1 = org.apache.commons.math.util.MathUtils.cosh(1.6427602067171463d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.6814319286598596d + "'", double1 == 2.6814319286598596d); }
public void test0982() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0982"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(101.00495037373169d); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex1.getField(); org.apache.commons.math.complex.Complex complex3 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex4 = complexField2.getZero(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test0983() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0983"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 100); boolean boolean21 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray20); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); double[] doubleArray29 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray27, 0); boolean boolean30 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray29); double[] doubleArray34 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray36 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray34, (int) (short) 0); double double37 = org.apache.commons.math.util.MathUtils.distance(doubleArray29, doubleArray34); double[] doubleArray38 = null; double[] doubleArray42 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray44 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray42, (int) (short) 0); boolean boolean45 = org.apache.commons.math.util.MathUtils.equals(doubleArray38, doubleArray42); double[] doubleArray46 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray42); double[] doubleArray47 = null; double[] doubleArray51 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray53 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray51, (int) (short) 0); boolean boolean54 = org.apache.commons.math.util.MathUtils.equals(doubleArray47, doubleArray51); double[] doubleArray55 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray51); double[] doubleArray59 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray61 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray59, (int) (short) 0); double[] doubleArray64 = new double[] { (-1), (byte) 100 }; double double65 = org.apache.commons.math.util.MathUtils.distance1(doubleArray61, doubleArray64); boolean boolean66 = org.apache.commons.math.util.MathUtils.equals(doubleArray55, doubleArray61); double[] doubleArray68 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray55, 101); double double69 = org.apache.commons.math.util.MathUtils.distance(doubleArray46, doubleArray68); boolean boolean70 = org.apache.commons.math.util.MathUtils.equals(doubleArray29, doubleArray68); double[] doubleArray71 = null; double[] doubleArray75 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray77 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray75, (int) (short) 0); boolean boolean78 = org.apache.commons.math.util.MathUtils.equals(doubleArray71, doubleArray75); double[] doubleArray79 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray75); double[] doubleArray83 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray85 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray83, (int) (short) 0); double[] doubleArray88 = new double[] { (-1), (byte) 100 }; double double89 = org.apache.commons.math.util.MathUtils.distance1(doubleArray85, doubleArray88); boolean boolean90 = org.apache.commons.math.util.MathUtils.equals(doubleArray79, doubleArray85); boolean boolean91 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray68, doubleArray85); double[] doubleArray92 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray85); double[] doubleArray94 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray92, 100); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]"); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]"); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]"); org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); org.junit.Assert.assertNotNull(doubleArray68); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]"); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertNotNull(doubleArray79); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray83); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray85); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[]"); org.junit.Assert.assertNotNull(doubleArray88); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false); org.junit.Assert.assertNotNull(doubleArray92); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[]"); org.junit.Assert.assertNotNull(doubleArray94); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); }
public void test0984() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0984"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); org.apache.commons.math.complex.Complex complex6 = complex4.sinh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex10 = complex7.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex11 = complex4.add(complex7); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); }
public void test0985() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0985"); float float1 = org.apache.commons.math.util.FastMath.ulp((float) (-1103349781L)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 128.0f + "'", float1 == 128.0f); }
public void test0986() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0986"); double double1 = org.apache.commons.math.util.FastMath.log1p((double) 680745023L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 20.33869837990641d + "'", double1 == 20.33869837990641d); }
public void test0987() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0987"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complex5.add((double) (-680745036L)); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex7); org.apache.commons.math.complex.Complex complex9 = complex7.sinh(); org.apache.commons.math.complex.Complex complex12 = complex7.createComplex(1.0d, (double) (-1083460991393464320L)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); }
public void test0988() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0988"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder((-1.569322016559886E122d), 9.536732862475499E20d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.2663530308796678E19d) + "'", double2 == (-1.2663530308796678E19d)); }
public void test0989() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0989"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-3.141592653589793d), (double) (byte) 1); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField3 = complex2.getField(); org.apache.commons.math.complex.Complex complex4 = complexField3.getZero(); double double5 = complex4.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complexField3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); }
public void test0990() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0990"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((double) (byte) 1, (-2.874558791402608d), 200.0d); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); }
public void test0991() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0991"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex13.sinh(); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex1.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.acos(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex19.sinh(); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex20.cos(); org.apache.commons.math.complex.Complex complex23 = complex22.acos(); org.apache.commons.math.complex.Complex complex24 = complex22.acos(); org.apache.commons.math.complex.Complex complex25 = complex22.asin(); org.apache.commons.math.complex.Complex complex26 = complex17.pow(complex25); boolean boolean27 = complex17.isNaN(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-3.141592653589793d) + "'", double15 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-3.141592653589793d) + "'", double21 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); }
public void test0992() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0992"); double double6 = org.apache.commons.math.util.MathUtils.linearCombination((double) (-50L), 1.810677121E9d, 4.22604638E8d, 0.23039475304609325d, 3.7632429002127764E77d, (-6.807450239999999E8d)); org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-2.5618088784231755E86d) + "'", double6 == (-2.5618088784231755E86d)); }
public void test0993() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0993"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); double double5 = complex2.getImaginary(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); }
public void test0994() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0994"); double[] doubleArray6 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray6, (int) (short) 0); double[] doubleArray11 = new double[] { (-1), (byte) 100 }; double double12 = org.apache.commons.math.util.MathUtils.distance1(doubleArray8, doubleArray11); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection13 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean16 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray11, orderDirection13, false, true); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException18 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 545L, (java.lang.Number) 8.419054960283078E15d, (int) (short) 100, orderDirection13, false); int int19 = nonMonotonousSequenceException18.getIndex(); int int20 = nonMonotonousSequenceException18.getIndex(); java.lang.Number number21 = nonMonotonousSequenceException18.getPrevious(); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection13.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100); org.junit.Assert.assertEquals("'" + number21 + "' != '" + 8.419054960283078E15d + "'", number21, 8.419054960283078E15d); }
public void test0995() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0995"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 0L); org.apache.commons.math.complex.Complex complex3 = complex1.subtract((double) (-5737967348795625471L)); org.apache.commons.math.complex.Complex complex4 = complex1.conjugate(); org.apache.commons.math.complex.Complex complex5 = complex1.tanh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test0996() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0996"); double double1 = org.apache.commons.math.util.MathUtils.sinh(0.03406469512736676d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0340712836412701d + "'", double1 == 0.0340712836412701d); }
public void test0997() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0997"); double double1 = org.apache.commons.math.util.FastMath.log1p(3.4965076770633603d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5033010237129882d + "'", double1 == 1.5033010237129882d); }
public void test0998() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0998"); // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.math.util.MathUtils.lcm(528005166, 1410065408); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: arithmetic exception"); } catch (org.apache.commons.math.exception.MathArithmeticException e) { // Expected exception. } }
public void test0999() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test0999"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.sin(); double double6 = complex5.getImaginary(); double double7 = complex5.getReal(); org.apache.commons.math.complex.Complex complex8 = complex3.multiply(complex5); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.sin(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex12.pow(complex16); boolean boolean19 = complex17.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex20 = complex10.divide(complex17); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex22.sinh(); double double24 = complex23.getArgument(); org.apache.commons.math.complex.Complex complex25 = complex10.add(complex23); org.apache.commons.math.complex.Complex complex26 = complex3.divide(complex25); double double27 = complex3.abs(); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex30 = complex29.log(); org.apache.commons.math.complex.Complex complex31 = complex30.atan(); org.apache.commons.math.complex.Complex complex32 = complex3.divide(complex31); org.apache.commons.math.complex.Complex complex33 = complex3.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.8414709848078965d + "'", double7 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-3.141592653589793d) + "'", double24 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0d + "'", double27 == 1.0d); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); }
public void test1000() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest1.test1000"); double double8 = org.apache.commons.math.util.MathUtils.linearCombination(6.520904391968161E51d, (double) 152, (double) (-1.4753463E9f), 5.062554972936762d, 0.10447926981699533d, 2.0452919197856156E14d, (double) 2120811457, (double) 1792857041); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 9.911774675791605E53d + "'", double8 == 9.911774675791605E53d); }
public void test1001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1001"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); boolean boolean3 = complex0.isNaN(); org.apache.commons.math.complex.Complex complex5 = complex0.add((double) 6.591783E31f); org.apache.commons.math.exception.util.Localizable localizable6 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException10 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable6, (java.lang.Number) 50.0f, (java.lang.Number) (short) 100, true); java.lang.Number number11 = numberIsTooSmallException10.getMin(); boolean boolean12 = complex5.equals((java.lang.Object) number11); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertEquals("'" + number11 + "' != '" + (short) 100 + "'", number11, (short) 100); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test1002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1002"); float float2 = org.apache.commons.math.util.FastMath.nextAfter((float) 1655309493, (double) 10240.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.65530931E9f + "'", float2 == 1.65530931E9f); }
public void test1003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1003"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow((double) 20); org.apache.commons.math.complex.Complex complex11 = complex7.exp(); org.apache.commons.math.complex.Complex complex12 = complex0.subtract(complex7); org.apache.commons.math.complex.Complex complex13 = complex12.asin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test1004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1004"); int int2 = org.apache.commons.math.util.FastMath.max(1792857041, 329309483); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1792857041 + "'", int2 == 1792857041); }
public void test1005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1005"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1410064706L); org.junit.Assert.assertNotNull(complex1); }
public void test1006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1006"); double double1 = org.apache.commons.math.util.FastMath.log1p((double) 10); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.3978952727983707d + "'", double1 == 2.3978952727983707d); }
public void test1007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1007"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex1.atan(); org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z(); double double15 = complex14.getReal(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex17 = complex14.sqrt1z(); org.apache.commons.math.complex.Complex complex18 = complex14.asin(); double double19 = complex14.getImaginary(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7146114112494588d + "'", double15 == 0.7146114112494588d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 5.4338975249603854E-17d + "'", double19 == 5.4338975249603854E-17d); }
public void test1008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1008"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(101.00495037373169d); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex1.getField(); org.apache.commons.math.complex.Complex complex3 = complexField2.getZero(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex6 = complex5.log(); org.apache.commons.math.complex.Complex complex8 = complex5.pow(35.0d); org.apache.commons.math.complex.Complex complex9 = complex8.tan(); org.apache.commons.math.complex.Complex complex10 = complex3.add(complex8); org.apache.commons.math.complex.ComplexField complexField11 = complex10.getField(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complexField11); }
public void test1009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1009"); long long1 = org.apache.commons.math.util.FastMath.round(96.77970271788699d); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 97L + "'", long1 == 97L); }
public void test1010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1010"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex5 = complex3.add(1.2034990072150236d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); }
public void test1011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1011"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); java.lang.String str4 = complex3.toString(); double double5 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.tan(); org.apache.commons.math.complex.Complex complex7 = complex6.sqrt(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(1.0, 0.0)" + "'", str4, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test1012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1012"); double double2 = org.apache.commons.math.util.MathUtils.normalizeAngle(6.807450211154935E8d, 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.6014734506607056d + "'", double2 == 0.6014734506607056d); }
public void test1013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1013"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); double double10 = complex8.getReal(); org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex8); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex13 = complex12.atan(); org.apache.commons.math.complex.Complex complex14 = complex13.cos(); java.lang.String str15 = complex13.toString(); double double16 = complex13.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.8414709848078965d + "'", double10 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertEquals("'" + str15 + "' != '" + "(0.7790351761001425, 0.0)" + "'", str15, "(0.7790351761001425, 0.0)"); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.7790351761001425d + "'", double16 == 0.7790351761001425d); }
public void test1014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1014"); int int2 = org.apache.commons.math.util.MathUtils.gcd(0, 470); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 470 + "'", int2 == 470); }
public void test1015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1015"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complex5.add((double) (-680745036L)); org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z(); double double9 = complex7.abs(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 6.80745036E8d + "'", double9 == 6.80745036E8d); }
public void test1016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1016"); double double2 = org.apache.commons.math.util.FastMath.copySign(66.97680939587865d, (double) (-1944488868L)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-66.97680939587865d) + "'", double2 == (-66.97680939587865d)); }
public void test1017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1017"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); double double5 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.tan(); org.apache.commons.math.complex.Complex complex9 = new org.apache.commons.math.complex.Complex(35.159870523697315d, 1.401298464324817E-45d); org.apache.commons.math.complex.Complex complex10 = complex3.multiply(complex9); boolean boolean11 = complex3.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.14168768474935d + "'", double5 == 2.14168768474935d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test1018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1018"); int[] intArray4 = new int[] { 52, 6, 'a', 680745024 }; int[] intArray7 = new int[] { (byte) 100, 10 }; int[] intArray13 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double14 = org.apache.commons.math.util.MathUtils.distance(intArray7, intArray13); int[] intArray16 = org.apache.commons.math.util.MathUtils.copyOf(intArray13, (int) (byte) 10); int int17 = org.apache.commons.math.util.MathUtils.distanceInf(intArray4, intArray16); int[] intArray20 = new int[] { (byte) 100, 10 }; int[] intArray26 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double27 = org.apache.commons.math.util.MathUtils.distance(intArray20, intArray26); int[] intArray30 = new int[] { (byte) 100, 10 }; int[] intArray36 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double37 = org.apache.commons.math.util.MathUtils.distance(intArray30, intArray36); int int38 = org.apache.commons.math.util.MathUtils.distanceInf(intArray20, intArray36); double double39 = org.apache.commons.math.util.MathUtils.distance(intArray4, intArray36); int[] intArray41 = org.apache.commons.math.util.MathUtils.copyOf(intArray36, 260); int[] intArray44 = new int[] { (byte) 100, 10 }; int[] intArray50 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double51 = org.apache.commons.math.util.MathUtils.distance(intArray44, intArray50); int[] intArray54 = new int[] { (byte) 100, 10 }; int[] intArray60 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double61 = org.apache.commons.math.util.MathUtils.distance(intArray54, intArray60); double double62 = org.apache.commons.math.util.MathUtils.distance(intArray50, intArray60); int[] intArray63 = org.apache.commons.math.util.MathUtils.copyOf(intArray50); int[] intArray66 = new int[] { (byte) 100, 10 }; int[] intArray72 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double73 = org.apache.commons.math.util.MathUtils.distance(intArray66, intArray72); int[] intArray76 = new int[] { (byte) 100, 10 }; int[] intArray82 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double83 = org.apache.commons.math.util.MathUtils.distance(intArray76, intArray82); double double84 = org.apache.commons.math.util.MathUtils.distance(intArray72, intArray82); int[] intArray85 = org.apache.commons.math.util.MathUtils.copyOf(intArray72); double double86 = org.apache.commons.math.util.MathUtils.distance(intArray50, intArray85); int[] intArray87 = org.apache.commons.math.util.MathUtils.copyOf(intArray85); int[] intArray88 = org.apache.commons.math.util.MathUtils.copyOf(intArray85); double double89 = org.apache.commons.math.util.MathUtils.distance(intArray36, intArray88); // The following exception was thrown during execution in test generation try { int[] intArray91 = org.apache.commons.math.util.MathUtils.copyOf(intArray36, (-680745089)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { // Expected exception. } org.junit.Assert.assertNotNull(intArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 6, 97, 680745024]"); org.junit.Assert.assertNotNull(intArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100, 10]"); org.junit.Assert.assertNotNull(intArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 104.04806581575652d + "'", double14 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 680745023 + "'", int17 == 680745023); org.junit.Assert.assertNotNull(intArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100, 10]"); org.junit.Assert.assertNotNull(intArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 104.04806581575652d + "'", double27 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, 10]"); org.junit.Assert.assertNotNull(intArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 104.04806581575652d + "'", double37 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 101 + "'", int38 == 101); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 6.807450230000095E8d + "'", double39 == 6.807450230000095E8d); org.junit.Assert.assertNotNull(intArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[100, 10]"); org.junit.Assert.assertNotNull(intArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 104.04806581575652d + "'", double51 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[100, 10]"); org.junit.Assert.assertNotNull(intArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 104.04806581575652d + "'", double61 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.0d + "'", double62 == 0.0d); org.junit.Assert.assertNotNull(intArray63); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray66); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[100, 10]"); org.junit.Assert.assertNotNull(intArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double73 + "' != '" + 104.04806581575652d + "'", double73 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[100, 10]"); org.junit.Assert.assertNotNull(intArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 104.04806581575652d + "'", double83 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 0.0d + "'", double84 == 0.0d); org.junit.Assert.assertNotNull(intArray85); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double86 + "' != '" + 0.0d + "'", double86 == 0.0d); org.junit.Assert.assertNotNull(intArray87); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray88); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 0.0d + "'", double89 == 0.0d); }
public void test1019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1019"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(1.530112122701651d); java.lang.Class<?> wildcardClass8 = complex7.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(wildcardClass8); }
public void test1020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1020"); long long2 = org.apache.commons.math.util.MathUtils.pow((long) 1077477376, 1655309493); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test1021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1021"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 720.0d, (java.lang.Number) (-1073741824), 528005166); }
public void test1022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1022"); double double2 = org.apache.commons.math.util.FastMath.hypot((double) 260L, 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 260.0d + "'", double2 == 260.0d); }
public void test1023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1023"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(4.9E-324d, 6880.817293923487d); org.apache.commons.math.complex.Complex complex3 = complex2.conjugate(); double double4 = complex2.getReal(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4.9E-324d + "'", double4 == 4.9E-324d); }
public void test1024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1024"); float float2 = org.apache.commons.math.util.FastMath.max((float) 97L, (float) (-22L)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 97.0f + "'", float2 == 97.0f); }
public void test1025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1025"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((double) (-680745024), 1.5574077246549023d, (-1475306912)); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test1026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1026"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow((double) 20); org.apache.commons.math.complex.Complex complex11 = complex7.exp(); org.apache.commons.math.complex.Complex complex12 = complex0.subtract(complex7); boolean boolean13 = complex7.isNaN(); double double14 = complex7.getReal(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf(6880.817293923487d, 4.795790545596741d); org.apache.commons.math.complex.Complex complex18 = complex7.multiply(complex17); org.apache.commons.math.complex.Complex complex19 = complex17.acos(); org.apache.commons.math.complex.Complex complex21 = complex19.pow((double) (-0.9999999f)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); }
public void test1027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1027"); double double2 = org.apache.commons.math.util.FastMath.nextAfter((-0.9999999999999998d), 1694.5276628016434d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-0.9999999999999997d) + "'", double2 == (-0.9999999999999997d)); }
public void test1028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1028"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 26091.090931580457d, (java.lang.Number) 0.6104048481741295d, (-1475346432)); }
public void test1029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1029"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(544.656365691809d, 0.0d); org.apache.commons.math.complex.Complex complex4 = complex2.subtract((double) 15100L); org.junit.Assert.assertNotNull(complex4); }
public void test1030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1030"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(1.5761131209498562d); org.junit.Assert.assertNotNull(complex1); }
public void test1031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1031"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); org.apache.commons.math.complex.Complex complex8 = complex5.createComplex((double) (-86L), 0.9919317346815598d); org.apache.commons.math.complex.Complex complex10 = complex8.pow(3.5553480614894135d); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex12.pow(complex16); boolean boolean19 = complex17.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex21 = complex20.atan(); org.apache.commons.math.complex.Complex complex22 = complex17.pow(complex20); org.apache.commons.math.complex.Complex complex23 = complex8.divide(complex17); org.apache.commons.math.complex.ComplexField complexField24 = complex17.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complexField24); }
public void test1032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1032"); double double1 = org.apache.commons.math.util.FastMath.cbrt((double) (-86L)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-4.414004962442104d) + "'", double1 == (-4.414004962442104d)); }
public void test1033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1033"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException4 = new org.apache.commons.math.exception.NumberIsTooLargeException(localizable0, (java.lang.Number) 10L, (java.lang.Number) 100L, false); org.apache.commons.math.exception.util.ExceptionContext exceptionContext5 = numberIsTooLargeException4.getContext(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooLargeException4.getContext(); org.junit.Assert.assertNotNull(exceptionContext5); org.junit.Assert.assertNotNull(exceptionContext6); }
public void test1034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1034"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); boolean boolean3 = complex0.isNaN(); org.apache.commons.math.complex.Complex complex5 = complex0.add((double) 6.591783E31f); org.apache.commons.math.complex.Complex complex6 = complex5.acos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); }
public void test1035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1035"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) Double.POSITIVE_INFINITY, (java.lang.Number) 10.0d, (int) ' '); java.lang.Number number4 = nonMonotonousSequenceException3.getPrevious(); boolean boolean5 = nonMonotonousSequenceException3.getStrict(); org.apache.commons.math.exception.util.Localizable localizable6 = null; org.apache.commons.math.exception.util.Localizable localizable7 = null; java.lang.Object[] objArray9 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException10 = new org.apache.commons.math.exception.MathArithmeticException(localizable7, objArray9); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable6, objArray9); java.lang.Throwable throwable12 = mathIllegalArgumentException11.getException(); nonMonotonousSequenceException3.addSuppressed(throwable12); boolean boolean14 = nonMonotonousSequenceException3.getStrict(); org.junit.Assert.assertEquals("'" + number4 + "' != '" + 10.0d + "'", number4, 10.0d); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true); org.junit.Assert.assertNotNull(objArray9); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[1.0]"); org.junit.Assert.assertNotNull(throwable12); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); }
public void test1036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1036"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getArgument(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow((double) 20); java.lang.String str7 = complex6.toString(); org.apache.commons.math.complex.Complex complex8 = complex1.add(complex6); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField9 = complex8.getField(); org.apache.commons.math.complex.Complex complex10 = complex8.asin(); java.lang.Object obj11 = complex8.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(1.0, 0.0)" + "'", str7, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complexField9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(obj11); org.junit.Assert.assertEquals(obj11.toString(), "(1.8414709848078965, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "(1.8414709848078965, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "(1.8414709848078965, 0.0)"); }
public void test1037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1037"); double double1 = org.apache.commons.math.util.FastMath.cosh(201.00931639928152d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 9.913041577022099E86d + "'", double1 == 9.913041577022099E86d); }
public void test1038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1038"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); boolean boolean12 = complex8.isNaN(); org.apache.commons.math.complex.Complex complex13 = complex8.tan(); boolean boolean14 = complex13.isNaN(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test1039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1039"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equals(0.25317452022512854d, 104.42058852478411d); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test1040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1040"); int int2 = org.apache.commons.math.util.MathUtils.pow(3, (int) (short) 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test1041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1041"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex5.sqrt(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex8.sinh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex9.pow(complex11); org.apache.commons.math.complex.Complex complex15 = complex11.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sin(); double double19 = complex18.getArgument(); org.apache.commons.math.complex.Complex complex20 = complex15.multiply(complex18); org.apache.commons.math.complex.Complex complex21 = complex18.sin(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex23 = complex21.add(complex22); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex26 = complex25.negate(); org.apache.commons.math.complex.Complex complex27 = complex26.sinh(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.negate(); org.apache.commons.math.complex.Complex complex30 = complex27.pow(complex29); org.apache.commons.math.complex.Complex complex33 = complex29.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex34 = complex33.negate(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex36 = complex35.sin(); double double37 = complex36.getArgument(); org.apache.commons.math.complex.Complex complex38 = complex33.multiply(complex36); org.apache.commons.math.complex.Complex complex39 = complex38.tanh(); org.apache.commons.math.complex.Complex complex40 = complex24.add(complex38); org.apache.commons.math.complex.Complex complex41 = complex21.divide(complex40); org.apache.commons.math.complex.Complex complex42 = complex40.acos(); org.apache.commons.math.complex.Complex complex43 = complex6.multiply(complex40); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex45 = complex44.sqrt(); org.apache.commons.math.complex.Complex complex46 = complex44.tanh(); org.apache.commons.math.complex.Complex complex47 = complex46.exp(); org.apache.commons.math.complex.Complex complex48 = complex47.asin(); org.apache.commons.math.complex.Complex complex49 = complex47.log(); org.apache.commons.math.complex.Complex complex50 = complex49.sqrt(); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex52 = complex51.negate(); org.apache.commons.math.complex.Complex complex53 = complex52.sinh(); org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex55 = complex54.negate(); org.apache.commons.math.complex.Complex complex56 = complex53.pow(complex55); org.apache.commons.math.complex.Complex complex59 = complex55.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex60 = complex59.negate(); org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex62 = complex61.sin(); double double63 = complex62.getArgument(); org.apache.commons.math.complex.Complex complex64 = complex59.multiply(complex62); org.apache.commons.math.complex.Complex complex65 = complex62.sin(); org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex67 = complex65.add(complex66); org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex70 = complex69.negate(); org.apache.commons.math.complex.Complex complex71 = complex70.sinh(); org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex73 = complex72.negate(); org.apache.commons.math.complex.Complex complex74 = complex71.pow(complex73); org.apache.commons.math.complex.Complex complex77 = complex73.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex78 = complex77.negate(); org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex80 = complex79.sin(); double double81 = complex80.getArgument(); org.apache.commons.math.complex.Complex complex82 = complex77.multiply(complex80); org.apache.commons.math.complex.Complex complex83 = complex82.tanh(); org.apache.commons.math.complex.Complex complex84 = complex68.add(complex82); org.apache.commons.math.complex.Complex complex85 = complex65.divide(complex84); org.apache.commons.math.complex.Complex complex86 = complex84.acos(); org.apache.commons.math.complex.Complex complex87 = complex50.multiply(complex84); org.apache.commons.math.complex.Complex complex88 = complex50.asin(); org.apache.commons.math.complex.Complex complex89 = complex43.multiply(complex88); org.apache.commons.math.complex.Complex complex90 = complex88.log(); org.apache.commons.math.complex.Complex complex91 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex92 = complex91.sin(); double double93 = complex92.getImaginary(); org.apache.commons.math.complex.Complex complex94 = complex92.exp(); org.apache.commons.math.complex.Complex complex95 = complex90.add(complex92); org.apache.commons.math.complex.Complex complex97 = complex92.multiply((double) 680745023); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex80); org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertNotNull(complex84); org.junit.Assert.assertNotNull(complex85); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex89); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertNotNull(complex91); org.junit.Assert.assertNotNull(complex92); org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d); org.junit.Assert.assertNotNull(complex94); org.junit.Assert.assertNotNull(complex95); org.junit.Assert.assertNotNull(complex97); }
public void test1042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1042"); double double1 = org.apache.commons.math.util.FastMath.ceil((-3.6338013156151414E9d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-3.633801315E9d) + "'", double1 == (-3.633801315E9d)); }
public void test1043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1043"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (-1.04221274E9f), (-6.4694178154970808E18d)); }
public void test1044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1044"); long long2 = org.apache.commons.math.util.MathUtils.subAndCheck((-5832657L), (long) (-1475306912)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1469474255L + "'", long2 == 1469474255L); }
public void test1045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1045"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); org.apache.commons.math.complex.Complex complex4 = complex0.multiply((double) 5); org.apache.commons.math.complex.Complex complex5 = complex0.cos(); org.apache.commons.math.complex.Complex complex6 = complex0.cos(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList8 = complex0.nthRoot((-680745023)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -680,745,023"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); }
public void test1046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1046"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex3 = complex1.subtract(1.0d); org.apache.commons.math.complex.Complex complex5 = complex3.subtract((double) 96); double double6 = complex5.getReal(); java.lang.String str7 = complex5.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-96.1585290151921d) + "'", double6 == (-96.1585290151921d)); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(-96.1585290151921, 0.0)" + "'", str7, "(-96.1585290151921, 0.0)"); }
public void test1047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1047"); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection3 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException5 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 5, (java.lang.Number) 100.0f, (-1), orderDirection3, true); java.lang.Number number6 = nonMonotonousSequenceException5.getPrevious(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext7 = nonMonotonousSequenceException5.getContext(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection8 = nonMonotonousSequenceException5.getDirection(); java.lang.Number number9 = nonMonotonousSequenceException5.getPrevious(); java.lang.Throwable throwable10 = nonMonotonousSequenceException5.getException(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext11 = nonMonotonousSequenceException5.getContext(); org.junit.Assert.assertTrue("'" + orderDirection3 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection3.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 100.0f + "'", number6, 100.0f); org.junit.Assert.assertNotNull(exceptionContext7); org.junit.Assert.assertTrue("'" + orderDirection8 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection8.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertEquals("'" + number9 + "' != '" + 100.0f + "'", number9, 100.0f); org.junit.Assert.assertNotNull(throwable10); org.junit.Assert.assertEquals(throwable10.getLocalizedMessage(), "points -2 and -1 are not strictly increasing (100 >= 5)"); org.junit.Assert.assertEquals(throwable10.getMessage(), "points -2 and -1 are not strictly increasing (100 >= 5)"); org.junit.Assert.assertEquals(throwable10.toString(), "org.apache.commons.math.exception.NonMonotonousSequenceException: points -2 and -1 are not strictly increasing (100 >= 5)"); org.junit.Assert.assertNotNull(exceptionContext11); }
public void test1048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1048"); float float2 = org.apache.commons.math.util.FastMath.max((float) 10L, (float) (-1983639665607471487L)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 10.0f + "'", float2 == 10.0f); }
public void test1049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1049"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(52.0d, 1.7720496304913849d); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.sinh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.03406469512736676d + "'", double3 == 0.03406469512736676d); org.junit.Assert.assertNotNull(complex4); }
public void test1050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1050"); long long1 = org.apache.commons.math.util.FastMath.round(1.6755160819145565d); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 2L + "'", long1 == 2L); }
public void test1051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1051"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.exp(); org.apache.commons.math.complex.Complex complex4 = complex1.asin(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test1052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1052"); long long1 = org.apache.commons.math.util.FastMath.round(0.7893750108307105d); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L); }
public void test1053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1053"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex3 = complex0.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex4.exp(); org.apache.commons.math.complex.Complex complex6 = complex5.cos(); org.apache.commons.math.complex.Complex complex8 = complex6.subtract(3.637978807091713E-12d); boolean boolean9 = complex8.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test1054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1054"); double double1 = org.apache.commons.math.util.FastMath.cosh(1.6427602067171463d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.6814319286598596d + "'", double1 == 2.6814319286598596d); }
public void test1055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1055"); float float1 = org.apache.commons.math.util.FastMath.signum(35.000004f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test1056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1056"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(3.58351893845611d); org.junit.Assert.assertNotNull(complex1); }
public void test1057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1057"); long long2 = org.apache.commons.math.util.MathUtils.lcm((long) 60, 19444888650L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 38889777300L + "'", long2 == 38889777300L); }
public void test1058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1058"); double double6 = org.apache.commons.math.util.MathUtils.linearCombination(0.0d, (double) 9.223372E18f, 4.17897694729317d, (double) 470, (double) 6L, (double) (-1475346402L)); org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-8.852076447880835E9d) + "'", double6 == (-8.852076447880835E9d)); }
public void test1059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1059"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(6880.817293923487d, 4.795790545596741d); org.apache.commons.math.complex.Complex complex3 = complex2.sqrt(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test1060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1060"); float float1 = org.apache.commons.math.util.FastMath.ulp((float) 47000); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.00390625f + "'", float1 == 0.00390625f); }
public void test1061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1061"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex5.sqrt(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex11 = complex10.asin(); org.apache.commons.math.complex.Complex complex13 = complex10.multiply(1.410065408E11d); org.apache.commons.math.complex.Complex complex14 = complex5.divide(complex13); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); }
public void test1062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1062"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException6 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 52.009614495783374d, (java.lang.Number) 52.00961449578337d, 0); int int7 = nonMonotonousSequenceException6.getIndex(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection8 = nonMonotonousSequenceException6.getDirection(); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException10 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (-6L), (java.lang.Number) Float.POSITIVE_INFINITY, 1410065408, orderDirection8, false); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection11 = nonMonotonousSequenceException10.getDirection(); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0); org.junit.Assert.assertTrue("'" + orderDirection8 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection8.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); }
public void test1063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1063"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.negate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); }
public void test1064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1064"); float float2 = org.apache.commons.math.util.FastMath.max(1024.0f, (float) 1225L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1225.0f + "'", float2 == 1225.0f); }
public void test1065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1065"); double double1 = org.apache.commons.math.util.FastMath.signum(1.5301121227016508d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test1066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1066"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex12.subtract(66.97680939587865d); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.sin(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.negate(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex18.pow(complex22); boolean boolean25 = complex23.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex26 = complex16.divide(complex23); org.apache.commons.math.complex.Complex complex27 = complex16.sinh(); org.apache.commons.math.complex.Complex complex28 = complex16.atan(); org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z(); double double30 = complex29.getReal(); org.apache.commons.math.complex.Complex complex31 = complex29.tanh(); double double32 = complex31.abs(); double double33 = complex31.abs(); org.apache.commons.math.complex.Complex complex34 = complex12.divide(complex31); org.apache.commons.math.complex.Complex complex35 = complex31.asin(); org.apache.commons.math.complex.Complex complex36 = complex35.asin(); org.apache.commons.math.complex.Complex complex38 = complex36.pow((-1.4753464319999998E9d)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.7146114112494588d + "'", double30 == 0.7146114112494588d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.6135603872539619d + "'", double32 == 0.6135603872539619d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.6135603872539619d + "'", double33 == 0.6135603872539619d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); }
public void test1067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1067"); double double1 = org.apache.commons.math.util.FastMath.abs((double) 470); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 470.0d + "'", double1 == 470.0d); }
public void test1068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1068"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); java.lang.String str4 = complex3.toString(); double double5 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.tan(); org.apache.commons.math.complex.Complex complex9 = complex3.createComplex((double) 35.000004f, 2.1513092806481256E16d); org.apache.commons.math.exception.util.Localizable localizable10 = null; java.lang.Object[] objArray11 = null; org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex3, localizable10, objArray11); org.apache.commons.math.complex.Complex complex13 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex14 = complex3.subtract(complex13); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(1.0, 0.0)" + "'", str4, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); }
public void test1069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1069"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.sin(); double double6 = complex5.getImaginary(); double double7 = complex5.getReal(); org.apache.commons.math.complex.Complex complex8 = complex3.multiply(complex5); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex11.sinh(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex14 = complex13.negate(); org.apache.commons.math.complex.Complex complex15 = complex12.pow(complex14); org.apache.commons.math.complex.Complex complex18 = complex14.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex21 = complex20.sin(); double double22 = complex21.getArgument(); org.apache.commons.math.complex.Complex complex23 = complex18.multiply(complex21); org.apache.commons.math.complex.Complex complex24 = complex23.tanh(); org.apache.commons.math.complex.Complex complex25 = complex9.add(complex23); org.apache.commons.math.complex.Complex complex26 = complex9.sinh(); org.apache.commons.math.complex.Complex complex27 = complex8.subtract(complex9); java.lang.Object obj28 = null; boolean boolean29 = complex8.equals(obj28); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.8414709848078965d + "'", double7 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); }
public void test1070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1070"); double double2 = org.apache.commons.math.util.MathUtils.round((-2.5353012004564588E32d), 52); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-2.5353012004564588E32d) + "'", double2 == (-2.5353012004564588E32d)); }
public void test1071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1071"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 1655309493L, 4.17897694729317d); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex2); org.junit.Assert.assertNotNull(complex2); }
public void test1072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1072"); long long1 = org.apache.commons.math.util.MathUtils.indicator((long) 702); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L); }
public void test1073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1073"); float float1 = org.apache.commons.math.util.FastMath.signum((float) '#'); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test1074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1074"); double double1 = org.apache.commons.math.util.FastMath.signum((double) 100.0f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test1075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1075"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt1z(); org.apache.commons.math.complex.Complex complex9 = complex4.multiply(complex8); org.apache.commons.math.complex.Complex complex10 = complex8.acos(); org.apache.commons.math.complex.Complex complex11 = complex8.cosh(); org.apache.commons.math.complex.Complex complex12 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex13 = complex11.subtract(complex12); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); }
public void test1076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1076"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sin(); double double19 = complex18.getImaginary(); org.apache.commons.math.complex.Complex complex20 = complex18.exp(); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex20.acos(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf(4.9E-324d, 6880.817293923487d); org.apache.commons.math.complex.Complex complex26 = complex25.exp(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex28 = complex27.negate(); org.apache.commons.math.complex.Complex complex30 = complex28.multiply((double) (-1.0f)); double double31 = complex30.getArgument(); org.apache.commons.math.complex.Complex complex32 = complex30.sin(); org.apache.commons.math.complex.Complex complex33 = complex32.negate(); org.apache.commons.math.complex.Complex complex34 = complex25.subtract(complex33); org.apache.commons.math.complex.Complex complex35 = complex22.pow(complex33); org.apache.commons.math.complex.Complex complex36 = complex14.divide(complex35); org.apache.commons.math.complex.Complex complex37 = complex14.sqrt(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); }
public void test1077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1077"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) Double.POSITIVE_INFINITY, (java.lang.Number) 10.0d, (int) ' '); java.lang.Number number4 = nonMonotonousSequenceException3.getPrevious(); java.lang.Number number5 = nonMonotonousSequenceException3.getPrevious(); java.lang.Number number6 = nonMonotonousSequenceException3.getPrevious(); int int7 = nonMonotonousSequenceException3.getIndex(); int int8 = nonMonotonousSequenceException3.getIndex(); org.junit.Assert.assertEquals("'" + number4 + "' != '" + 10.0d + "'", number4, 10.0d); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 10.0d + "'", number5, 10.0d); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 10.0d + "'", number6, 10.0d); org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 32 + "'", int8 == 32); }
public void test1078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1078"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); double double5 = complex4.getReal(); org.apache.commons.math.complex.Complex complex7 = complex4.divide(1.1176233018673575E37d); org.apache.commons.math.complex.Complex complex8 = complex4.log(); org.apache.commons.math.complex.ComplexField complexField9 = complex8.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.5707963267948966d + "'", double5 == 1.5707963267948966d); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complexField9); }
public void test1079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1079"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray14); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray8); double[] doubleArray22 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 126); double[] doubleArray23 = null; double[] doubleArray27 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray29 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray27, (int) (short) 0); boolean boolean30 = org.apache.commons.math.util.MathUtils.equals(doubleArray23, doubleArray27); boolean boolean31 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray8, doubleArray27); int int32 = org.apache.commons.math.util.MathUtils.hash(doubleArray8); double double33 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray8); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1944488865) + "'", int32 == (-1944488865)); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.00999950005d + "'", double33 == 100.00999950005d); }
public void test1080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1080"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.cosh(); java.lang.Object obj4 = complex2.readResolve(); double double5 = complex2.abs(); org.apache.commons.math.complex.Complex complex6 = complex2.conjugate(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(obj4); org.junit.Assert.assertEquals(obj4.toString(), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "(-10.0, -0.0)"); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d); org.junit.Assert.assertNotNull(complex6); }
public void test1081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1081"); double double8 = org.apache.commons.math.util.MathUtils.linearCombination((double) (-1103349781L), 4.952536192948688E19d, 1.565553277755247d, (-0.33445535205259874d), 539.7667225022875d, 10.0d, (-2.5618088784231755E86d), (double) 470L); org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-1.2040501728588925E89d) + "'", double8 == (-1.2040501728588925E89d)); }
public void test1082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1082"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex7 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex8 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex10 = complex8.multiply((double) 692626318L); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); }
public void test1083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1083"); int[] intArray4 = new int[] { 52, 6, 'a', 680745024 }; int[] intArray7 = new int[] { (byte) 100, 10 }; int[] intArray13 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double14 = org.apache.commons.math.util.MathUtils.distance(intArray7, intArray13); int[] intArray16 = org.apache.commons.math.util.MathUtils.copyOf(intArray13, (int) (byte) 10); int int17 = org.apache.commons.math.util.MathUtils.distanceInf(intArray4, intArray16); int[] intArray20 = new int[] { (byte) 100, 10 }; int[] intArray26 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double27 = org.apache.commons.math.util.MathUtils.distance(intArray20, intArray26); int[] intArray30 = new int[] { (byte) 100, 10 }; int[] intArray36 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double37 = org.apache.commons.math.util.MathUtils.distance(intArray30, intArray36); int int38 = org.apache.commons.math.util.MathUtils.distanceInf(intArray20, intArray36); double double39 = org.apache.commons.math.util.MathUtils.distance(intArray4, intArray36); int[] intArray41 = org.apache.commons.math.util.MathUtils.copyOf(intArray36, 1225); org.junit.Assert.assertNotNull(intArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 6, 97, 680745024]"); org.junit.Assert.assertNotNull(intArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100, 10]"); org.junit.Assert.assertNotNull(intArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 104.04806581575652d + "'", double14 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 680745023 + "'", int17 == 680745023); org.junit.Assert.assertNotNull(intArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100, 10]"); org.junit.Assert.assertNotNull(intArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 104.04806581575652d + "'", double27 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, 10]"); org.junit.Assert.assertNotNull(intArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 104.04806581575652d + "'", double37 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 101 + "'", int38 == 101); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 6.807450230000095E8d + "'", double39 == 6.807450230000095E8d); org.junit.Assert.assertNotNull(intArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); }
public void test1084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1084"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex3 = complex1.conjugate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply(1.9826083154044198E87d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); }
public void test1085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1085"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((-6.053272382792838d), 0.0d, 3.276850496588286E13d); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); }
public void test1086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1086"); long long1 = org.apache.commons.math.util.MathUtils.sign((long) 1487413801); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L); }
public void test1087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1087"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); double double4 = complex3.getArgument(); double double5 = complex3.getImaginary(); double double6 = complex3.getArgument(); org.apache.commons.math.complex.Complex complex7 = complex3.exp(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf(6.80745024E8d); org.apache.commons.math.complex.Complex complex10 = complex9.sin(); org.apache.commons.math.complex.Complex complex11 = complex7.add(complex10); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); }
public void test1088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1088"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex5 = complex4.cos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test1089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1089"); double double1 = org.apache.commons.math.util.FastMath.rint((double) 50.0f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 50.0d + "'", double1 == 50.0d); }
public void test1090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1090"); long long1 = org.apache.commons.math.util.FastMath.abs(101L); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 101L + "'", long1 == 101L); }
public void test1091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1091"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(37.31321895318116d); org.junit.Assert.assertNotNull(complex1); }
public void test1092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1092"); double double2 = org.apache.commons.math.util.FastMath.copySign(4.248291206950246d, (double) 29); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 4.248291206950246d + "'", double2 == 4.248291206950246d); }
public void test1093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1093"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 9.999999f, 0.8746197065066093d); }
public void test1094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1094"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray8 = new double[] { (-1), (byte) 100 }; double double9 = org.apache.commons.math.util.MathUtils.distance1(doubleArray5, doubleArray8); double[] doubleArray11 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 100); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray11); double[] doubleArray13 = null; double[] doubleArray17 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray19 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, (int) (short) 0); boolean boolean20 = org.apache.commons.math.util.MathUtils.equals(doubleArray13, doubleArray17); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); double[] doubleArray30 = new double[] { (-1), (byte) 100 }; double double31 = org.apache.commons.math.util.MathUtils.distance1(doubleArray27, doubleArray30); double[] doubleArray33 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray30, 100); boolean boolean34 = org.apache.commons.math.util.MathUtils.equals(doubleArray21, doubleArray33); double[] doubleArray38 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray40 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray38, (int) (short) 0); double[] doubleArray42 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray40, 0); boolean boolean43 = org.apache.commons.math.util.MathUtils.equals(doubleArray21, doubleArray42); double[] doubleArray47 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray49 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray47, (int) (short) 0); double double50 = org.apache.commons.math.util.MathUtils.distance(doubleArray42, doubleArray47); double[] doubleArray51 = null; double[] doubleArray55 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray57 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray55, (int) (short) 0); boolean boolean58 = org.apache.commons.math.util.MathUtils.equals(doubleArray51, doubleArray55); double[] doubleArray59 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray55); double[] doubleArray60 = null; double[] doubleArray64 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray66 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray64, (int) (short) 0); boolean boolean67 = org.apache.commons.math.util.MathUtils.equals(doubleArray60, doubleArray64); double[] doubleArray68 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray64); double[] doubleArray72 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray74 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray72, (int) (short) 0); double[] doubleArray77 = new double[] { (-1), (byte) 100 }; double double78 = org.apache.commons.math.util.MathUtils.distance1(doubleArray74, doubleArray77); boolean boolean79 = org.apache.commons.math.util.MathUtils.equals(doubleArray68, doubleArray74); double[] doubleArray81 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray68, 101); double double82 = org.apache.commons.math.util.MathUtils.distance(doubleArray59, doubleArray81); boolean boolean83 = org.apache.commons.math.util.MathUtils.equals(doubleArray42, doubleArray81); double double84 = org.apache.commons.math.util.MathUtils.distance1(doubleArray11, doubleArray81); double[] doubleArray86 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray11, (int) (short) 1); org.apache.commons.math.util.MathUtils.checkOrder(doubleArray86); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) doubleArray86); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[]"); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[]"); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]"); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray66); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]"); org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false); org.junit.Assert.assertNotNull(doubleArray68); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray74); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[]"); org.junit.Assert.assertNotNull(doubleArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double78 + "' != '" + 0.0d + "'", double78 == 0.0d); org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false); org.junit.Assert.assertNotNull(doubleArray81); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 0.0d + "'", double82 == 0.0d); org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 203.0d + "'", double84 == 203.0d); org.junit.Assert.assertNotNull(doubleArray86); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[-1.0]"); }
public void test1095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1095"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex12.acos(); org.apache.commons.math.complex.ComplexField complexField14 = complex13.getField(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = complex15.subtract((double) 152.00002f); org.apache.commons.math.complex.Complex complex18 = complex15.exp(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complexField14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); }
public void test1096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1096"); int int2 = org.apache.commons.math.util.MathUtils.gcd(6, 1487413801); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test1097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1097"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex7 = complex5.subtract(2.5382964395839602d); double double8 = complex5.abs(); double double9 = complex5.getImaginary(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.7615941559557649d + "'", double8 == 0.7615941559557649d); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test1098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1098"); // The following exception was thrown during execution in test generation try { double double3 = org.apache.commons.math.util.MathUtils.round(7.896296018268067E13d, 47, 47); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test1099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1099"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(4.9E-324d, 6880.817293923487d); org.apache.commons.math.complex.Complex complex3 = complex2.acos(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex2.cosh(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test1100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1100"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 0L); org.apache.commons.math.complex.Complex complex3 = complex1.subtract((double) (-5737967348795625471L)); org.apache.commons.math.complex.Complex complex4 = complex1.conjugate(); org.apache.commons.math.complex.Complex complex6 = complex4.add((double) Float.POSITIVE_INFINITY); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); }
public void test1101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1101"); double double1 = org.apache.commons.math.util.MathUtils.cosh((double) 2L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.7621956910836314d + "'", double1 == 3.7621956910836314d); }
public void test1102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1102"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex12.subtract(66.97680939587865d); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.sin(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.negate(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex18.pow(complex22); boolean boolean25 = complex23.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex26 = complex16.divide(complex23); org.apache.commons.math.complex.Complex complex27 = complex16.sinh(); org.apache.commons.math.complex.Complex complex28 = complex16.atan(); org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z(); double double30 = complex29.getReal(); org.apache.commons.math.complex.Complex complex31 = complex29.tanh(); double double32 = complex31.abs(); double double33 = complex31.abs(); org.apache.commons.math.complex.Complex complex34 = complex12.divide(complex31); org.apache.commons.math.complex.Complex complex35 = complex31.log(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.7146114112494588d + "'", double30 == 0.7146114112494588d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.6135603872539619d + "'", double32 == 0.6135603872539619d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.6135603872539619d + "'", double33 == 0.6135603872539619d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); }
public void test1103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1103"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex4.tan(); org.apache.commons.math.complex.Complex complex7 = complex6.sin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test1104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1104"); double double2 = org.apache.commons.math.util.MathUtils.log((double) 6.926263E8f, (-0.5712556729872575d)); org.junit.Assert.assertTrue(Double.isNaN(double2)); }
public void test1105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1105"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.complex.Complex complex18 = complex15.tan(); double double19 = complex15.getArgument(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField20 = complex15.getField(); org.apache.commons.math.complex.Complex complex21 = complexField20.getOne(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-2.356194490192345d) + "'", double19 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complexField20); org.junit.Assert.assertNotNull(complex21); }
public void test1106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1106"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 100); boolean boolean21 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray20); double double22 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray20); double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray20, 1015); double[] doubleArray27 = new double[] { 2.718281828459045d, '#' }; int int28 = org.apache.commons.math.util.MathUtils.hash(doubleArray27); double[] doubleArray35 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray35); double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray35, 6); double double39 = org.apache.commons.math.util.MathUtils.distance(doubleArray27, doubleArray38); // The following exception was thrown during execution in test generation try { double double40 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray24, doubleArray38); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 6"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.00499987500625d + "'", double22 == 100.00499987500625d); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[2.718281828459045, 35.0]"); org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-680745026) + "'", int28 == (-680745026)); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 32.420816277613945d + "'", double39 == 32.420816277613945d); }
public void test1107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1107"); int int2 = org.apache.commons.math.util.MathUtils.mulAndCheck(49, (int) '#'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1715 + "'", int2 == 1715); }
public void test1108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1108"); long long1 = org.apache.commons.math.util.MathUtils.indicator((long) 71680); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L); }
public void test1109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1109"); double double1 = org.apache.commons.math.util.FastMath.acosh((double) 1.9073486E-6f); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1110"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.410065408E11d, 66.97680939587865d); }
public void test1111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1111"); double double6 = org.apache.commons.math.util.MathUtils.linearCombination(0.8815685068348507d, (double) 1.07374182E9f, 9.983082744786361E25d, (-5.3690505934197095d), 5.865608931718212E44d, 244.41531426499594d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4336446504014739E47d + "'", double6 == 1.4336446504014739E47d); }
public void test1112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1112"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField68 = complex67.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complexField68); }
public void test1113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1113"); double double8 = org.apache.commons.math.util.MathUtils.linearCombination((double) (-422604639), 0.0d, 0.0d, 6.807450211154935E8d, 0.0d, (-2.5353012004564588E32d), 0.0d, (double) 10240L); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d); }
public void test1114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1114"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-3.141592653589793d), (double) (byte) 1); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField3 = complex2.getField(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complexField3); org.junit.Assert.assertNotNull(complex4); }
public void test1115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1115"); double double1 = org.apache.commons.math.util.FastMath.ulp(1.5860134523134298E15d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.25d + "'", double1 == 0.25d); }
public void test1116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1116"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(5.480656284001007d); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex3 = complex2.atan(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex4.acos(); org.apache.commons.math.complex.Complex complex7 = complex3.divide(complex6); org.apache.commons.math.complex.Complex complex10 = complex7.createComplex((double) (-86L), 0.9919317346815598d); org.apache.commons.math.complex.Complex complex12 = complex10.pow(3.5553480614894135d); boolean boolean13 = complex1.equals((java.lang.Object) complex10); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.sqrt(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex17 = complex16.exp(); org.apache.commons.math.complex.Complex complex18 = complex17.asin(); org.apache.commons.math.complex.Complex complex19 = complex17.log(); org.apache.commons.math.complex.Complex complex20 = complex19.sqrt(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex22.sinh(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = complex24.negate(); org.apache.commons.math.complex.Complex complex26 = complex23.pow(complex25); org.apache.commons.math.complex.Complex complex29 = complex25.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex30 = complex29.negate(); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex32 = complex31.sin(); double double33 = complex32.getArgument(); org.apache.commons.math.complex.Complex complex34 = complex29.multiply(complex32); org.apache.commons.math.complex.Complex complex35 = complex32.sin(); org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex37 = complex35.add(complex36); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex40 = complex39.negate(); org.apache.commons.math.complex.Complex complex41 = complex40.sinh(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex43 = complex42.negate(); org.apache.commons.math.complex.Complex complex44 = complex41.pow(complex43); org.apache.commons.math.complex.Complex complex47 = complex43.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex48 = complex47.negate(); org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex50 = complex49.sin(); double double51 = complex50.getArgument(); org.apache.commons.math.complex.Complex complex52 = complex47.multiply(complex50); org.apache.commons.math.complex.Complex complex53 = complex52.tanh(); org.apache.commons.math.complex.Complex complex54 = complex38.add(complex52); org.apache.commons.math.complex.Complex complex55 = complex35.divide(complex54); org.apache.commons.math.complex.Complex complex56 = complex54.acos(); org.apache.commons.math.complex.Complex complex57 = complex20.multiply(complex54); org.apache.commons.math.complex.Complex complex58 = complex20.asin(); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.valueOf((-107.32715686847266d)); org.apache.commons.math.complex.Complex complex61 = complex58.pow(complex60); org.apache.commons.math.complex.Complex complex62 = complex1.add(complex61); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); }
public void test1117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1117"); double double2 = org.apache.commons.math.util.MathUtils.normalizeAngle(4.746501045726147d, 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-1.5366842614534395d) + "'", double2 == (-1.5366842614534395d)); }
public void test1118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1118"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex3 = complex1.asin(); org.apache.commons.math.complex.Complex complex4 = complex1.sqrt1z(); boolean boolean5 = complex4.isInfinite(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false); }
public void test1119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1119"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); boolean boolean12 = complex8.isNaN(); org.apache.commons.math.complex.Complex complex14 = complex8.subtract(0.6190337262278893d); org.apache.commons.math.complex.Complex complex16 = complex14.pow(2.6814319286598596d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); }
public void test1120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1120"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(30879.9058341788d, (double) 680745024L); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test1121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1121"); double double1 = org.apache.commons.math.util.FastMath.acos(101.00495037373169d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1122"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); boolean boolean3 = complex2.isInfinite(); org.apache.commons.math.complex.Complex complex6 = complex2.createComplex((double) (-1.0f), 0.0d); double double7 = complex2.abs(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.1752011936438014d + "'", double7 == 1.1752011936438014d); }
public void test1123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1123"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.exception.util.Localizable localizable12 = null; java.lang.Object[] objArray13 = null; org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex10, localizable12, objArray13); java.lang.Object obj15 = complex10.readResolve(); double double16 = complex10.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(obj15); org.junit.Assert.assertEquals(obj15.toString(), "(-0.3981570232861697, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "(-0.3981570232861697, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "(-0.3981570232861697, -0.0)"); org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-3.141592653589793d) + "'", double16 == (-3.141592653589793d)); }
public void test1124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1124"); int int2 = org.apache.commons.math.util.FastMath.min(61, (-817456299)); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-817456299) + "'", int2 == (-817456299)); }
public void test1125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1125"); long long1 = org.apache.commons.math.util.FastMath.abs((long) 1487413801); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1487413801L + "'", long1 == 1487413801L); }
public void test1126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1126"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, 0); double[] doubleArray9 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, 1028); double[] doubleArray10 = null; // The following exception was thrown during execution in test generation try { double double11 = org.apache.commons.math.util.MathUtils.linearCombination(doubleArray5, doubleArray10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertNotNull(doubleArray9); }
public void test1127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1127"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex1.atan(); boolean boolean14 = complex13.isInfinite(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.sin(); double double20 = complex19.getImaginary(); org.apache.commons.math.complex.Complex complex21 = complex19.exp(); org.apache.commons.math.complex.Complex complex22 = complex17.multiply(complex19); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex26 = complex23.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex27 = complex26.sqrt1z(); org.apache.commons.math.complex.Complex complex28 = complex22.divide(complex26); org.apache.commons.math.complex.Complex complex30 = complex28.divide((double) (-1042212720)); org.apache.commons.math.complex.Complex complex31 = complex15.add(complex28); java.lang.Class<?> wildcardClass32 = complex28.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(wildcardClass32); }
public void test1128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1128"); double double1 = org.apache.commons.math.util.FastMath.sinh((double) 64.0f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 3.1175745404058084E27d + "'", double1 == 3.1175745404058084E27d); }
public void test1129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1129"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 100); boolean boolean21 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray20); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); double[] doubleArray29 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray27, 0); boolean boolean30 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray29); double[] doubleArray34 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray36 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray34, (int) (short) 0); double double37 = org.apache.commons.math.util.MathUtils.distance(doubleArray29, doubleArray34); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray29); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection42 = org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException44 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 1.4E-45f, (java.lang.Number) 10.000000000000002d, 5, orderDirection42, false); // The following exception was thrown during execution in test generation try { boolean boolean47 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray29, orderDirection42, false, false); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]"); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection42 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING + "'", orderDirection42.equals(org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING)); }
public void test1130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1130"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 'a'); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow((double) 20); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex2); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex8.sinh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex9.pow(complex11); org.apache.commons.math.complex.Complex complex15 = complex11.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sin(); double double19 = complex18.getArgument(); org.apache.commons.math.complex.Complex complex20 = complex15.multiply(complex18); org.apache.commons.math.complex.Complex complex21 = complex20.tanh(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex23 = complex22.negate(); org.apache.commons.math.complex.Complex complex24 = complex23.sinh(); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex24.cos(); org.apache.commons.math.complex.Complex complex27 = complex24.acos(); org.apache.commons.math.complex.Complex complex28 = complex21.add(complex24); org.apache.commons.math.complex.Complex complex29 = complex1.subtract(complex24); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-3.141592653589793d) + "'", double25 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); }
public void test1131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1131"); float float2 = org.apache.commons.math.util.FastMath.min((float) 760L, (float) 680745023L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 760.0f + "'", float2 == 760.0f); }
public void test1132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1132"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex19.sinh(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex20.pow(complex22); org.apache.commons.math.complex.Complex complex26 = complex22.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.sin(); double double30 = complex29.getArgument(); org.apache.commons.math.complex.Complex complex31 = complex26.multiply(complex29); org.apache.commons.math.complex.Complex complex32 = complex31.tanh(); org.apache.commons.math.complex.Complex complex33 = complex17.add(complex31); org.apache.commons.math.complex.Complex complex34 = complex14.divide(complex33); java.lang.Object obj35 = complex14.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(obj35); org.junit.Assert.assertEquals(obj35.toString(), "(0.7456241416655579, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "(0.7456241416655579, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "(0.7456241416655579, 0.0)"); }
public void test1133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1133"); long long1 = org.apache.commons.math.util.MathUtils.indicator(11562462923040L); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L); }
public void test1134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1134"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex11 = complex8.pow((double) 20); org.apache.commons.math.complex.Complex complex12 = complex11.sin(); org.apache.commons.math.complex.Complex complex13 = complex11.exp(); org.apache.commons.math.complex.Complex complex14 = complex7.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex18 = complex16.asin(); org.apache.commons.math.complex.Complex complex19 = complex16.sqrt1z(); org.apache.commons.math.complex.Complex complex20 = complex14.add(complex19); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf(2.2737367544323206E-13d); org.apache.commons.math.complex.Complex complex23 = complex22.tanh(); boolean boolean24 = complex20.equals((java.lang.Object) complex22); org.apache.commons.math.complex.Complex complex25 = complex20.sqrt(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false); org.junit.Assert.assertNotNull(complex25); }
public void test1135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1135"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((float) 29, (float) (byte) -1, (float) 260); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); }
public void test1136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1136"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); double double4 = complex3.getArgument(); double double5 = complex3.getImaginary(); double double6 = complex3.getArgument(); org.apache.commons.math.complex.Complex complex7 = complex3.exp(); java.lang.String str8 = complex3.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "(1.0, 0.0)" + "'", str8, "(1.0, 0.0)"); }
public void test1137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1137"); double[] doubleArray0 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray2 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray0, (-127)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { // Expected exception. } }
public void test1138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1138"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex7.sinh(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex8.pow(complex10); org.apache.commons.math.complex.Complex complex12 = complex1.add(complex8); org.apache.commons.math.complex.Complex complex13 = complex12.acos(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex13.sinh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue(Double.isNaN(double14)); org.junit.Assert.assertNotNull(complex15); }
public void test1139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1139"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex7 = complex5.subtract(2.5382964395839602d); double double8 = complex5.abs(); org.apache.commons.math.exception.util.Localizable localizable9 = null; org.apache.commons.math.exception.util.Localizable localizable10 = null; org.apache.commons.math.exception.util.Localizable localizable12 = null; double[] doubleArray16 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray18 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray16, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection19 = null; double[] doubleArray22 = new double[] { 0.0f, 0.0f }; double[] doubleArray25 = new double[] { 0.0f, 0.0f }; double[] doubleArray28 = new double[] { 0.0f, 0.0f }; double[] doubleArray31 = new double[] { 0.0f, 0.0f }; double[] doubleArray34 = new double[] { 0.0f, 0.0f }; double[][] doubleArray35 = new double[][] { doubleArray22, doubleArray25, doubleArray28, doubleArray31, doubleArray34 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray18, orderDirection19, doubleArray35); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable12, (java.lang.Object[]) doubleArray35); org.apache.commons.math.exception.NullArgumentException nullArgumentException38 = new org.apache.commons.math.exception.NullArgumentException(localizable10, (java.lang.Object[]) doubleArray35); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) double8, localizable9, (java.lang.Object[]) doubleArray35); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.7615941559557649d + "'", double8 == 0.7615941559557649d); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray35); }
public void test1140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1140"); float float2 = org.apache.commons.math.util.FastMath.max(0.0f, (float) 45); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 45.0f + "'", float2 == 45.0f); }
public void test1141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1141"); double double2 = org.apache.commons.math.util.FastMath.nextAfter(135.0d, 201.00931639928152d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 135.00000000000003d + "'", double2 == 135.00000000000003d); }
public void test1142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1142"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex4 = complex1.pow(35.0d); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex6.sinh(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow(complex9); org.apache.commons.math.complex.Complex complex12 = complex9.multiply(10.000000000000002d); org.apache.commons.math.complex.Complex complex13 = complex4.subtract(complex9); org.apache.commons.math.complex.Complex complex14 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex15 = complex4.multiply(complex14); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test1143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1143"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-1.5574077246549023d), (-100.0d)); }
public void test1144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1144"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(0.9696933989557338d, 100.00999950005d); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test1145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1145"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sin(); double double19 = complex18.getImaginary(); org.apache.commons.math.complex.Complex complex20 = complex18.exp(); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex20.acos(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf(4.9E-324d, 6880.817293923487d); org.apache.commons.math.complex.Complex complex26 = complex25.exp(); org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex28 = complex27.negate(); org.apache.commons.math.complex.Complex complex30 = complex28.multiply((double) (-1.0f)); double double31 = complex30.getArgument(); org.apache.commons.math.complex.Complex complex32 = complex30.sin(); org.apache.commons.math.complex.Complex complex33 = complex32.negate(); org.apache.commons.math.complex.Complex complex34 = complex25.subtract(complex33); org.apache.commons.math.complex.Complex complex35 = complex22.pow(complex33); org.apache.commons.math.complex.Complex complex36 = complex14.divide(complex35); org.apache.commons.math.complex.Complex complex37 = complex35.sqrt(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); }
public void test1146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1146"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex13.sinh(); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex1.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.acos(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.sin(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex21 = complex20.negate(); org.apache.commons.math.complex.Complex complex22 = complex21.sinh(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex22.pow(complex24); org.apache.commons.math.complex.Complex complex28 = complex24.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex29 = complex28.negate(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex31 = complex30.sin(); double double32 = complex31.getArgument(); org.apache.commons.math.complex.Complex complex33 = complex28.multiply(complex31); org.apache.commons.math.complex.Complex complex34 = complex33.tanh(); boolean boolean35 = complex18.equals((java.lang.Object) complex33); org.apache.commons.math.complex.Complex complex36 = complex33.exp(); org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex38 = complex37.negate(); org.apache.commons.math.complex.Complex complex40 = complex37.pow((double) 20); java.lang.String str41 = complex40.toString(); double double42 = complex40.getReal(); org.apache.commons.math.complex.Complex complex43 = complex40.tan(); org.apache.commons.math.complex.Complex complex46 = complex40.createComplex((double) 35.000004f, 2.1513092806481256E16d); org.apache.commons.math.complex.Complex complex47 = complex46.asin(); org.apache.commons.math.complex.Complex complex48 = complex36.multiply(complex46); org.apache.commons.math.complex.Complex complex49 = complex14.subtract(complex46); boolean boolean50 = complex46.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-3.141592653589793d) + "'", double15 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(1.0, 0.0)" + "'", str41, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0d + "'", double42 == 1.0d); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false); }
public void test1147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1147"); float float1 = org.apache.commons.math.util.FastMath.ulp((float) (-1983639665607471487L)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.37438953E11f + "'", float1 == 1.37438953E11f); }
public void test1148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1148"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex67.exp(); org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex70 = complex69.negate(); org.apache.commons.math.complex.Complex complex71 = complex70.sinh(); double double72 = complex71.getArgument(); org.apache.commons.math.complex.Complex complex73 = complex68.subtract(complex71); org.apache.commons.math.complex.Complex complex75 = complex68.divide(0.8623188722876839d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-3.141592653589793d) + "'", double72 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex75); }
public void test1149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1149"); double double1 = org.apache.commons.math.util.FastMath.cosh((double) (-99.99999f)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.3440483165940743E43d + "'", double1 == 1.3440483165940743E43d); }
public void test1150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1150"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); org.apache.commons.math.complex.Complex complex7 = complex5.acos(); org.apache.commons.math.complex.Complex complex8 = complex5.sinh(); org.apache.commons.math.complex.Complex complex10 = complex5.pow(6.807450239999999E8d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); }
public void test1151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1151"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException3 = new org.apache.commons.math.exception.DimensionMismatchException(localizable0, (-55), 1487413801); org.apache.commons.math.exception.util.Localizable localizable4 = null; org.apache.commons.math.exception.util.Localizable localizable6 = null; double[] doubleArray10 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray12 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray10, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection13 = null; double[] doubleArray16 = new double[] { 0.0f, 0.0f }; double[] doubleArray19 = new double[] { 0.0f, 0.0f }; double[] doubleArray22 = new double[] { 0.0f, 0.0f }; double[] doubleArray25 = new double[] { 0.0f, 0.0f }; double[] doubleArray28 = new double[] { 0.0f, 0.0f }; double[][] doubleArray29 = new double[][] { doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray12, orderDirection13, doubleArray29); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable6, (java.lang.Object[]) doubleArray29); org.apache.commons.math.exception.NullArgumentException nullArgumentException32 = new org.apache.commons.math.exception.NullArgumentException(localizable4, (java.lang.Object[]) doubleArray29); java.lang.Throwable throwable33 = nullArgumentException32.getException(); dimensionMismatchException3.addSuppressed((java.lang.Throwable) nullArgumentException32); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertNotNull(throwable33); }
public void test1152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1152"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex3 = complex1.subtract(1.0d); org.apache.commons.math.complex.Complex complex5 = complex3.subtract((double) 96); org.apache.commons.math.complex.ComplexField complexField6 = complex3.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complexField6); }
public void test1153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1153"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); double double18 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex15.cos(); org.apache.commons.math.complex.Complex complex20 = complex19.asin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2.356194490192345d) + "'", double18 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); }
public void test1154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1154"); double double1 = org.apache.commons.math.util.FastMath.cosh((-10.0d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 11013.232920103323d + "'", double1 == 11013.232920103323d); }
public void test1155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1155"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField9 = complex8.getField(); boolean boolean10 = complex8.isNaN(); org.apache.commons.math.complex.Complex complex11 = complex8.acos(); org.apache.commons.math.complex.Complex complex12 = complex8.sin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complexField9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test1156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1156"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField3 = complex1.getField(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.sqrt(); org.apache.commons.math.complex.Complex complex6 = complex4.log(); org.apache.commons.math.complex.Complex complex7 = complex1.add(complex4); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex11 = complex8.pow((double) 20); org.apache.commons.math.complex.Complex complex12 = complex8.exp(); org.apache.commons.math.complex.Complex complex13 = complex1.subtract(complex8); boolean boolean14 = complex8.isNaN(); double double15 = complex8.getReal(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf(6880.817293923487d, 4.795790545596741d); org.apache.commons.math.complex.Complex complex19 = complex8.multiply(complex18); org.apache.commons.math.complex.Complex complex20 = complex0.divide(complex19); org.apache.commons.math.complex.Complex complex21 = complex20.log(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complexField3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); }
public void test1157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1157"); int int1 = org.apache.commons.math.util.FastMath.abs((-1595543182)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1595543182 + "'", int1 == 1595543182); }
public void test1158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1158"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex1 = complex0.exp(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList3 = complex1.nthRoot(0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: 0"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); }
public void test1159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1159"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.83579396E8d, (double) 1258035214680L); }
public void test1160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1160"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((-0.9999999f), 0.0f, 96); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test1161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1161"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(52.00961449578337d); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); }
public void test1162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1162"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 100.00499987500625d); boolean boolean2 = notPositiveException1.getBoundIsAllowed(); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test1163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1163"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); double double18 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex15.cos(); org.apache.commons.math.complex.Complex complex21 = complex19.subtract(10002.0d); org.apache.commons.math.complex.Complex complex22 = complex19.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2.356194490192345d) + "'", double18 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test1164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1164"); double double2 = org.apache.commons.math.util.FastMath.nextAfter((-8.852076447880835E9d), (double) 528005166); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-8.852076447880833E9d) + "'", double2 == (-8.852076447880833E9d)); }
public void test1165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1165"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complex5.add((double) (-680745036L)); org.apache.commons.math.complex.Complex complex8 = complex7.sinh(); org.apache.commons.math.complex.Complex complex9 = complex7.sinh(); double double10 = complex7.abs(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 6.80745036E8d + "'", double10 == 6.80745036E8d); }
public void test1166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1166"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray12 = new int[] { (byte) 100, 10 }; int[] intArray18 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double19 = org.apache.commons.math.util.MathUtils.distance(intArray12, intArray18); int int20 = org.apache.commons.math.util.MathUtils.distance1(intArray2, intArray12); int[] intArray21 = org.apache.commons.math.util.MathUtils.copyOf(intArray12); int[] intArray23 = org.apache.commons.math.util.MathUtils.copyOf(intArray21, 260); int[] intArray26 = new int[] { (byte) 100, 10 }; int[] intArray32 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double33 = org.apache.commons.math.util.MathUtils.distance(intArray26, intArray32); int[] intArray35 = org.apache.commons.math.util.MathUtils.copyOf(intArray32, (int) (byte) 10); int[] intArray37 = org.apache.commons.math.util.MathUtils.copyOf(intArray35, 96); int int38 = org.apache.commons.math.util.MathUtils.distanceInf(intArray21, intArray37); org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10]"); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 104.04806581575652d + "'", double19 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(intArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100, 10]"); org.junit.Assert.assertNotNull(intArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[100, 10]"); org.junit.Assert.assertNotNull(intArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 104.04806581575652d + "'", double33 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int38 + "' != '" + 101 + "'", int38 == 101); }
public void test1167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1167"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex5.pow(complex9); boolean boolean11 = complex9.isInfinite(); org.apache.commons.math.complex.Complex complex12 = complex3.pow(complex9); org.apache.commons.math.complex.Complex complex13 = complex3.acos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test1168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1168"); java.lang.Number number1 = null; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 20.33869837990641d, number1, (int) (short) 100); }
public void test1169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1169"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 1078591489, 1.5860195024861502E15d); org.junit.Assert.assertNotNull(complex2); }
public void test1170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1170"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); org.apache.commons.math.complex.Complex complex7 = complex6.cos(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex6); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test1171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1171"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; org.apache.commons.math.exception.util.Localizable localizable4 = null; double[] doubleArray8 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray10 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, (int) (short) 0); double[] doubleArray13 = new double[] { (-1), (byte) 100 }; double double14 = org.apache.commons.math.util.MathUtils.distance1(doubleArray10, doubleArray13); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection15 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean18 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray13, orderDirection15, false, true); double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection25 = null; double[] doubleArray28 = new double[] { 0.0f, 0.0f }; double[] doubleArray31 = new double[] { 0.0f, 0.0f }; double[] doubleArray34 = new double[] { 0.0f, 0.0f }; double[] doubleArray37 = new double[] { 0.0f, 0.0f }; double[] doubleArray40 = new double[] { 0.0f, 0.0f }; double[][] doubleArray41 = new double[][] { doubleArray28, doubleArray31, doubleArray34, doubleArray37, doubleArray40 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray24, orderDirection25, doubleArray41); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray13, doubleArray41); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException44 = new org.apache.commons.math.exception.MathArithmeticException(localizable4, (java.lang.Object[]) doubleArray41); org.apache.commons.math.exception.NullArgumentException nullArgumentException45 = new org.apache.commons.math.exception.NullArgumentException(localizable3, (java.lang.Object[]) doubleArray41); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException46 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) (-0.9999999999999999d), (java.lang.Object[]) doubleArray41); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException47 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable0, (java.lang.Number) 4.312315229512479d, (java.lang.Object[]) doubleArray41); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection15 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection15.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray41); }
public void test1172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1172"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); double double10 = complex8.getReal(); org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex8); org.apache.commons.math.complex.Complex complex13 = complex11.divide(52.0d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.8414709848078965d + "'", double10 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); }
public void test1173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1173"); // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.math.util.MathUtils.mulAndCheck((int) (byte) 100, (-1073741823)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: arithmetic exception"); } catch (org.apache.commons.math.exception.MathArithmeticException e) { // Expected exception. } }
public void test1174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1174"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.sin(); double double6 = complex5.getImaginary(); double double7 = complex5.getReal(); org.apache.commons.math.complex.Complex complex8 = complex3.multiply(complex5); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.sin(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex12.pow(complex16); boolean boolean19 = complex17.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex20 = complex10.divide(complex17); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex22.sinh(); double double24 = complex23.getArgument(); org.apache.commons.math.complex.Complex complex25 = complex10.add(complex23); org.apache.commons.math.complex.Complex complex26 = complex3.divide(complex25); org.apache.commons.math.complex.Complex complex27 = complex25.atan(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.sin(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex31 = complex30.negate(); org.apache.commons.math.complex.Complex complex33 = complex31.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex35 = complex34.negate(); org.apache.commons.math.complex.Complex complex36 = complex31.pow(complex35); boolean boolean38 = complex36.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex39 = complex29.divide(complex36); org.apache.commons.math.complex.Complex complex40 = complex29.sinh(); org.apache.commons.math.complex.Complex complex41 = complex40.acos(); java.util.List<org.apache.commons.math.complex.Complex> complexList43 = complex41.nthRoot(702); boolean boolean44 = complex25.equals((java.lang.Object) 702); org.apache.commons.math.exception.util.Localizable localizable45 = null; java.lang.Object[] objArray46 = null; org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex25, localizable45, objArray46); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.8414709848078965d + "'", double7 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-3.141592653589793d) + "'", double24 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complexList43); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); }
public void test1175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1175"); int int2 = org.apache.commons.math.util.MathUtils.gcd((int) (short) 100, 63); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test1176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1176"); double double1 = org.apache.commons.math.util.FastMath.tanh(0.053062302219383836d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.05301255736403164d + "'", double1 == 0.05301255736403164d); }
public void test1177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1177"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(260.00000000000006d); org.junit.Assert.assertNotNull(complex1); }
public void test1178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1178"); double[] doubleArray0 = null; double[] doubleArray3 = new double[] { 2.718281828459045d, '#' }; int int4 = org.apache.commons.math.util.MathUtils.hash(doubleArray3); double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3); // The following exception was thrown during execution in test generation try { double double6 = org.apache.commons.math.util.MathUtils.distance(doubleArray0, doubleArray3); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[2.718281828459045, 35.0]"); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-680745026) + "'", int4 == (-680745026)); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[2.718281828459045, 35.0]"); }
public void test1179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1179"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex19.sinh(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex20.pow(complex22); org.apache.commons.math.complex.Complex complex26 = complex22.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.sin(); double double30 = complex29.getArgument(); org.apache.commons.math.complex.Complex complex31 = complex26.multiply(complex29); org.apache.commons.math.complex.Complex complex32 = complex31.tanh(); org.apache.commons.math.complex.Complex complex33 = complex17.add(complex31); org.apache.commons.math.complex.Complex complex34 = complex14.divide(complex33); org.apache.commons.math.complex.Complex complex35 = complex14.log(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex14); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); }
public void test1180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1180"); float[] floatArray6 = new float[] { 0, 10240.0f, (byte) 0, (short) 0, ' ', 1.0f }; float[] floatArray13 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray16 = new float[] { ' ', 10240.0f }; boolean boolean17 = org.apache.commons.math.util.MathUtils.equals(floatArray13, floatArray16); boolean boolean18 = org.apache.commons.math.util.MathUtils.equals(floatArray6, floatArray13); float[] floatArray19 = null; boolean boolean20 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray6, floatArray19); float[] floatArray21 = null; boolean boolean22 = org.apache.commons.math.util.MathUtils.equals(floatArray19, floatArray21); org.junit.Assert.assertNotNull(floatArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[0.0, 10240.0, 0.0, 0.0, 32.0, 1.0]"); org.junit.Assert.assertNotNull(floatArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true); }
public void test1181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1181"); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection3 = null; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException5 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (byte) 100, (java.lang.Number) 2.718281828459045d, (int) '4', orderDirection3, true); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = nonMonotonousSequenceException5.getContext(); java.lang.Number number7 = nonMonotonousSequenceException5.getPrevious(); java.lang.Throwable throwable8 = nonMonotonousSequenceException5.getException(); org.junit.Assert.assertNotNull(exceptionContext6); org.junit.Assert.assertEquals("'" + number7 + "' != '" + 2.718281828459045d + "'", number7, 2.718281828459045d); org.junit.Assert.assertNotNull(throwable8); org.junit.Assert.assertEquals(throwable8.getLocalizedMessage(), "points 51 and 52 are not strictly decreasing (2.718 <= 100)"); org.junit.Assert.assertEquals(throwable8.getMessage(), "points 51 and 52 are not strictly decreasing (2.718 <= 100)"); org.junit.Assert.assertEquals(throwable8.toString(), "org.apache.commons.math.exception.NonMonotonousSequenceException: points 51 and 52 are not strictly decreasing (2.718 <= 100)"); }
public void test1182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1182"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex3 = complex2.atan(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex2.getField(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); }
public void test1183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1183"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex7 = complex5.subtract(2.5382964395839602d); double double8 = complex5.abs(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.sqrt(); org.apache.commons.math.complex.Complex complex11 = complex10.sin(); org.apache.commons.math.complex.Complex complex13 = complex11.pow((double) 1L); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.sin(); double double16 = complex15.getImaginary(); org.apache.commons.math.complex.Complex complex17 = complex15.sqrt(); org.apache.commons.math.complex.Complex complex18 = complex17.sqrt1z(); org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex13.multiply(complex19); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex21.sqrt1z(); org.apache.commons.math.complex.Complex complex24 = complex13.add(complex23); org.apache.commons.math.complex.Complex complex25 = complex13.cosh(); org.apache.commons.math.complex.Complex complex26 = complex5.add(complex13); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.7615941559557649d + "'", double8 == 0.7615941559557649d); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); }
public void test1184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1184"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equals(1.148846212895686d, 2.3978952727983707d); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test1185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1185"); float float1 = org.apache.commons.math.util.FastMath.abs((-0.0f)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test1186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1186"); double double1 = org.apache.commons.math.util.FastMath.floor((-0.4631400514267494d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.0d) + "'", double1 == (-1.0d)); }
public void test1187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1187"); int int2 = org.apache.commons.math.util.FastMath.min(1073741824, (-1475306912)); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1475306912) + "'", int2 == (-1475306912)); }
public void test1188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1188"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex4.acos(); org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z(); java.lang.Class<?> wildcardClass7 = complex6.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(wildcardClass7); }
public void test1189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1189"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equals(4.7683716E-7f, (float) 692626318L); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test1190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1190"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField15 = complex13.getField(); org.apache.commons.math.complex.Complex complex16 = complexField15.getZero(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complexField15); org.junit.Assert.assertNotNull(complex16); }
public void test1191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1191"); long long2 = org.apache.commons.math.util.FastMath.max((long) 123725, (long) (-1274102657)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 123725L + "'", long2 == 123725L); }
public void test1192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1192"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sin(); org.apache.commons.math.complex.Complex complex6 = complex4.pow((double) 1L); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); org.apache.commons.math.complex.Complex complex10 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z(); org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = complex6.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex1.subtract(complex12); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField15 = complex12.getField(); org.apache.commons.math.complex.Complex complex16 = complexField15.getOne(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complexField15); org.junit.Assert.assertNotNull(complex16); }
public void test1193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1193"); float float2 = org.apache.commons.math.util.FastMath.min(3.9999998f, (float) (-5832657L)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-5832657.0f) + "'", float2 == (-5832657.0f)); }
public void test1194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1194"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(538.9560295122262d, 6.807450230000169E8d); org.junit.Assert.assertNotNull(complex2); }
public void test1195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1195"); java.math.BigInteger bigInteger0 = null; // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger2 = org.apache.commons.math.util.MathUtils.pow(bigInteger0, 47000); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test1196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1196"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complexField4.getOne(); boolean boolean8 = complex7.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test1197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1197"); double double1 = org.apache.commons.math.util.FastMath.ceil((-85.99999999999999d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-85.0d) + "'", double1 == (-85.0d)); }
public void test1198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1198"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex67.exp(); org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex70 = complex69.negate(); org.apache.commons.math.complex.Complex complex71 = complex70.sinh(); double double72 = complex71.getArgument(); org.apache.commons.math.complex.Complex complex73 = complex68.subtract(complex71); org.apache.commons.math.complex.Complex complex74 = complex68.acos(); org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex76 = complex75.negate(); org.apache.commons.math.complex.Complex complex77 = complex75.sqrt1z(); boolean boolean78 = complex75.isNaN(); org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex80 = complex79.negate(); org.apache.commons.math.complex.Complex complex81 = complex80.sinh(); org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex83 = complex82.negate(); org.apache.commons.math.complex.Complex complex84 = complex81.pow(complex83); org.apache.commons.math.complex.Complex complex87 = complex83.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex88 = complex87.negate(); org.apache.commons.math.complex.Complex complex89 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex90 = complex89.sin(); double double91 = complex90.getArgument(); org.apache.commons.math.complex.Complex complex92 = complex87.multiply(complex90); org.apache.commons.math.complex.Complex complex93 = complex75.multiply(complex87); org.apache.commons.math.complex.Complex complex94 = complex93.tanh(); org.apache.commons.math.complex.Complex complex95 = complex93.sqrt1z(); org.apache.commons.math.complex.Complex complex96 = complex95.sqrt(); org.apache.commons.math.complex.Complex complex97 = complex68.divide(complex96); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-3.141592653589793d) + "'", double72 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex80); org.junit.Assert.assertNotNull(complex81); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertNotNull(complex84); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex89); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d); org.junit.Assert.assertNotNull(complex92); org.junit.Assert.assertNotNull(complex93); org.junit.Assert.assertNotNull(complex94); org.junit.Assert.assertNotNull(complex95); org.junit.Assert.assertNotNull(complex96); org.junit.Assert.assertNotNull(complex97); }
public void test1199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1199"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); boolean boolean8 = complex6.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex9 = complex6.sqrt(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(complex9); }
public void test1200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1200"); double double1 = org.apache.commons.math.util.FastMath.toDegrees((-0.9412825644754301d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-53.93151827369294d) + "'", double1 == (-53.93151827369294d)); }
public void test1201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1201"); long long1 = org.apache.commons.math.util.FastMath.round(1.461474936109151d); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L); }
public void test1202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1202"); float float1 = org.apache.commons.math.util.FastMath.signum((float) (-5832657L)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + (-1.0f) + "'", float1 == (-1.0f)); }
public void test1203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1203"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); org.apache.commons.math.complex.Complex complex4 = complex3.sin(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); boolean boolean7 = complex5.equals((java.lang.Object) 1); org.apache.commons.math.complex.ComplexField complexField8 = complex5.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(complexField8); }
public void test1204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1204"); double double1 = org.apache.commons.math.util.FastMath.toRadians(4.312315229512478d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0752640991388877d + "'", double1 == 0.0752640991388877d); }
public void test1205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1205"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); java.util.List<org.apache.commons.math.complex.Complex> complexList8 = complex5.nthRoot(52); org.apache.commons.math.complex.Complex complex9 = complex5.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex13.sinh(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex14.pow(complex16); org.apache.commons.math.complex.Complex complex20 = complex16.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex21 = complex20.negate(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex23 = complex22.sin(); double double24 = complex23.getArgument(); org.apache.commons.math.complex.Complex complex25 = complex20.multiply(complex23); org.apache.commons.math.complex.Complex complex26 = complex25.tanh(); boolean boolean27 = complex10.equals((java.lang.Object) complex25); double double28 = complex25.getArgument(); org.apache.commons.math.complex.Complex complex29 = complex25.tanh(); org.apache.commons.math.complex.Complex complex30 = complex25.sin(); org.apache.commons.math.complex.Complex complex31 = complex9.pow(complex30); org.apache.commons.math.complex.ComplexField complexField32 = complex9.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complexList8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false); org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-2.356194490192345d) + "'", double28 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complexField32); }
public void test1206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1206"); int int1 = org.apache.commons.math.util.MathUtils.hash(73.26596177457596d); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-992304248) + "'", int1 == (-992304248)); }
public void test1207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1207"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getArgument(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow((double) 20); java.lang.String str7 = complex6.toString(); org.apache.commons.math.complex.Complex complex8 = complex1.add(complex6); double double9 = complex8.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(1.0, 0.0)" + "'", str7, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test1208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1208"); double double1 = org.apache.commons.math.util.MathUtils.sinh((double) 817456299); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY); }
public void test1209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1209"); double double1 = org.apache.commons.math.util.FastMath.ulp(0.3694162832070161d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 5.551115123125783E-17d + "'", double1 == 5.551115123125783E-17d); }
public void test1210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1210"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 4L); double double2 = complex1.abs(); org.apache.commons.math.complex.Complex complex3 = complex1.sinh(); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 4.0d + "'", double2 == 4.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test1211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1211"); double double2 = org.apache.commons.math.util.MathUtils.log((double) (-3850565377750111653L), (double) 15100L); org.junit.Assert.assertTrue(Double.isNaN(double2)); }
public void test1212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1212"); double double1 = org.apache.commons.math.util.FastMath.rint(1000000.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1000000.0d + "'", double1 == 1000000.0d); }
public void test1213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1213"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); double double18 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex15.cos(); org.apache.commons.math.complex.Complex complex21 = complex19.subtract(10002.0d); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((-1.2037041877095892E9d)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2.356194490192345d) + "'", double18 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); }
public void test1214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1214"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder((double) 1690418172, (-0.9999999999999997d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 5.630223527397504E-7d + "'", double2 == 5.630223527397504E-7d); }
public void test1215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1215"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex4.acos(); org.apache.commons.math.complex.Complex complex6 = complex4.acos(); org.apache.commons.math.complex.Complex complex7 = complex4.asin(); org.apache.commons.math.complex.Complex complex8 = complex4.sin(); org.apache.commons.math.complex.Complex complex9 = complex8.log(); double double10 = complex8.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); }
public void test1216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1216"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray10 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray4, 26091.090931580457d); double[] doubleArray12 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray10, 22025.465794806718d); double[] doubleArray19 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray19, (int) (short) 0); double[] doubleArray24 = new double[] { (-1), (byte) 100 }; double double25 = org.apache.commons.math.util.MathUtils.distance1(doubleArray21, doubleArray24); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection26 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean29 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray24, orderDirection26, false, true); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException31 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 545L, (java.lang.Number) 8.419054960283078E15d, (int) (short) 100, orderDirection26, false); org.apache.commons.math.exception.util.Localizable localizable32 = null; org.apache.commons.math.exception.util.Localizable localizable34 = null; org.apache.commons.math.exception.util.Localizable localizable35 = null; org.apache.commons.math.exception.util.Localizable localizable37 = null; org.apache.commons.math.exception.util.Localizable localizable40 = null; double[] doubleArray44 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray46 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray44, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection47 = null; double[] doubleArray50 = new double[] { 0.0f, 0.0f }; double[] doubleArray53 = new double[] { 0.0f, 0.0f }; double[] doubleArray56 = new double[] { 0.0f, 0.0f }; double[] doubleArray59 = new double[] { 0.0f, 0.0f }; double[] doubleArray62 = new double[] { 0.0f, 0.0f }; double[][] doubleArray63 = new double[][] { doubleArray50, doubleArray53, doubleArray56, doubleArray59, doubleArray62 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray46, orderDirection47, doubleArray63); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable40, (java.lang.Object[]) doubleArray63); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException66 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable37, (java.lang.Number) 10240.0f, (java.lang.Object[]) doubleArray63); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException67 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable35, (java.lang.Number) (-0.9999999999999999d), (java.lang.Object[]) doubleArray63); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException68 = new org.apache.commons.math.exception.MathArithmeticException(localizable34, (java.lang.Object[]) doubleArray63); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException69 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable32, (java.lang.Number) (-1.4753463E9f), (java.lang.Object[]) doubleArray63); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray12, orderDirection26, doubleArray63); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 2 != 3"); } catch (org.apache.commons.math.exception.DimensionMismatchException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[26623.5621750821, -266.235621750821, -266.235621750821]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[22474.965096741547, -224.74965096741548, -224.74965096741548]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection26 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection26.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]"); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray63); }
public void test1217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1217"); float float2 = org.apache.commons.math.util.FastMath.scalb((float) 5722119602100502529L, (-1475346432)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test1218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1218"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(5.480656284001007d); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex3 = complex2.atan(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex4.acos(); org.apache.commons.math.complex.Complex complex7 = complex3.divide(complex6); org.apache.commons.math.complex.Complex complex10 = complex7.createComplex((double) (-86L), 0.9919317346815598d); org.apache.commons.math.complex.Complex complex12 = complex10.pow(3.5553480614894135d); boolean boolean13 = complex1.equals((java.lang.Object) complex10); org.apache.commons.math.complex.Complex complex15 = complex10.subtract((-1.5574077246549023d)); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(complex15); }
public void test1219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1219"); java.lang.Object[] objArray1 = null; org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException2 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) (-22.0f), objArray1); }
public void test1220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1220"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); org.apache.commons.math.complex.Complex complex4 = complex0.tanh(); org.apache.commons.math.complex.ComplexField complexField5 = complex0.getField(); org.apache.commons.math.complex.Complex complex6 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex7 = complex0.multiply(complex6); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complexField5); }
public void test1221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1221"); float float2 = org.apache.commons.math.util.FastMath.scalb(0.0f, (-1595543182)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test1222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1222"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = complex0.conjugate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); }
public void test1223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1223"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 52L, (java.lang.Number) (-44.986972797111d), false); }
public void test1224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1224"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex3 = complex2.atan(); org.apache.commons.math.complex.Complex complex5 = complex2.multiply((-1.226409130967562d)); double double6 = complex2.abs(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 20.799832844906106d + "'", double6 == 20.799832844906106d); }
public void test1225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1225"); float float2 = org.apache.commons.math.util.FastMath.copySign(1.048576E8f, 1.1562463E13f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.048576E8f + "'", float2 == 1.048576E8f); }
public void test1226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1226"); float[] floatArray0 = null; float[] floatArray1 = null; float[] floatArray8 = new float[] { 0, 10240.0f, (byte) 0, (short) 0, ' ', 1.0f }; float[] floatArray15 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray18 = new float[] { ' ', 10240.0f }; boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(floatArray15, floatArray18); boolean boolean20 = org.apache.commons.math.util.MathUtils.equals(floatArray8, floatArray15); float[] floatArray27 = new float[] { 101, 0, 10.0f, (short) 10, 10240.0f, (short) 1 }; boolean boolean28 = org.apache.commons.math.util.MathUtils.equals(floatArray8, floatArray27); boolean boolean29 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray1, floatArray8); float[] floatArray30 = null; boolean boolean31 = org.apache.commons.math.util.MathUtils.equals(floatArray8, floatArray30); boolean boolean32 = org.apache.commons.math.util.MathUtils.equals(floatArray0, floatArray8); float[] floatArray39 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray42 = new float[] { ' ', 10240.0f }; boolean boolean43 = org.apache.commons.math.util.MathUtils.equals(floatArray39, floatArray42); float[] floatArray50 = new float[] { 0, 10240.0f, (byte) 0, (short) 0, ' ', 1.0f }; float[] floatArray57 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray60 = new float[] { ' ', 10240.0f }; boolean boolean61 = org.apache.commons.math.util.MathUtils.equals(floatArray57, floatArray60); boolean boolean62 = org.apache.commons.math.util.MathUtils.equals(floatArray50, floatArray57); boolean boolean63 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray42, floatArray50); boolean boolean64 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray8, floatArray50); float[] floatArray65 = null; boolean boolean66 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray50, floatArray65); org.junit.Assert.assertNotNull(floatArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[0.0, 10240.0, 0.0, 0.0, 32.0, 1.0]"); org.junit.Assert.assertNotNull(floatArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(floatArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[101.0, 0.0, 10.0, 10.0, 10240.0, 1.0]"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); org.junit.Assert.assertNotNull(floatArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false); org.junit.Assert.assertNotNull(floatArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[0.0, 10240.0, 0.0, 0.0, 32.0, 1.0]"); org.junit.Assert.assertNotNull(floatArray57); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray60), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false); org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false); org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true); org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false); }
public void test1227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1227"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow((double) 20); org.apache.commons.math.complex.Complex complex11 = complex7.exp(); org.apache.commons.math.complex.Complex complex12 = complex0.subtract(complex7); boolean boolean13 = complex7.isNaN(); double double14 = complex7.getReal(); org.apache.commons.math.complex.Complex complex15 = complex7.cos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertNotNull(complex15); }
public void test1228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1228"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex5.sqrt(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex8.sinh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex9.pow(complex11); org.apache.commons.math.complex.Complex complex15 = complex11.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sin(); double double19 = complex18.getArgument(); org.apache.commons.math.complex.Complex complex20 = complex15.multiply(complex18); org.apache.commons.math.complex.Complex complex21 = complex18.sin(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex23 = complex21.add(complex22); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex26 = complex25.negate(); org.apache.commons.math.complex.Complex complex27 = complex26.sinh(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.negate(); org.apache.commons.math.complex.Complex complex30 = complex27.pow(complex29); org.apache.commons.math.complex.Complex complex33 = complex29.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex34 = complex33.negate(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex36 = complex35.sin(); double double37 = complex36.getArgument(); org.apache.commons.math.complex.Complex complex38 = complex33.multiply(complex36); org.apache.commons.math.complex.Complex complex39 = complex38.tanh(); org.apache.commons.math.complex.Complex complex40 = complex24.add(complex38); org.apache.commons.math.complex.Complex complex41 = complex21.divide(complex40); org.apache.commons.math.complex.Complex complex42 = complex40.acos(); org.apache.commons.math.complex.Complex complex43 = complex6.multiply(complex40); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex45 = complex44.sqrt(); org.apache.commons.math.complex.Complex complex46 = complex44.tanh(); org.apache.commons.math.complex.Complex complex47 = complex46.exp(); org.apache.commons.math.complex.Complex complex48 = complex47.asin(); org.apache.commons.math.complex.Complex complex49 = complex47.log(); org.apache.commons.math.complex.Complex complex50 = complex49.sqrt(); org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex52 = complex51.negate(); org.apache.commons.math.complex.Complex complex53 = complex52.sinh(); org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex55 = complex54.negate(); org.apache.commons.math.complex.Complex complex56 = complex53.pow(complex55); org.apache.commons.math.complex.Complex complex59 = complex55.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex60 = complex59.negate(); org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex62 = complex61.sin(); double double63 = complex62.getArgument(); org.apache.commons.math.complex.Complex complex64 = complex59.multiply(complex62); org.apache.commons.math.complex.Complex complex65 = complex62.sin(); org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex67 = complex65.add(complex66); org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex70 = complex69.negate(); org.apache.commons.math.complex.Complex complex71 = complex70.sinh(); org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex73 = complex72.negate(); org.apache.commons.math.complex.Complex complex74 = complex71.pow(complex73); org.apache.commons.math.complex.Complex complex77 = complex73.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex78 = complex77.negate(); org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex80 = complex79.sin(); double double81 = complex80.getArgument(); org.apache.commons.math.complex.Complex complex82 = complex77.multiply(complex80); org.apache.commons.math.complex.Complex complex83 = complex82.tanh(); org.apache.commons.math.complex.Complex complex84 = complex68.add(complex82); org.apache.commons.math.complex.Complex complex85 = complex65.divide(complex84); org.apache.commons.math.complex.Complex complex86 = complex84.acos(); org.apache.commons.math.complex.Complex complex87 = complex50.multiply(complex84); org.apache.commons.math.complex.Complex complex88 = complex50.asin(); org.apache.commons.math.complex.Complex complex89 = complex43.multiply(complex88); org.apache.commons.math.complex.Complex complex90 = complex88.log(); org.apache.commons.math.complex.Complex complex91 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex92 = complex91.sin(); double double93 = complex92.getImaginary(); org.apache.commons.math.complex.Complex complex94 = complex92.exp(); org.apache.commons.math.complex.Complex complex95 = complex90.add(complex92); org.apache.commons.math.complex.Complex complex96 = complex92.sinh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complex52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex62); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertNotNull(complex72); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complex78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex80); org.junit.Assert.assertTrue("'" + double81 + "' != '" + 0.0d + "'", double81 == 0.0d); org.junit.Assert.assertNotNull(complex82); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertNotNull(complex84); org.junit.Assert.assertNotNull(complex85); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complex88); org.junit.Assert.assertNotNull(complex89); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertNotNull(complex91); org.junit.Assert.assertNotNull(complex92); org.junit.Assert.assertTrue("'" + double93 + "' != '" + 0.0d + "'", double93 == 0.0d); org.junit.Assert.assertNotNull(complex94); org.junit.Assert.assertNotNull(complex95); org.junit.Assert.assertNotNull(complex96); }
public void test1229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1229"); double double1 = org.apache.commons.math.util.FastMath.toDegrees(100.00499987500625d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 5729.864423044183d + "'", double1 == 5729.864423044183d); }
public void test1230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1230"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex3 = complex0.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex4.exp(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex7 = complex4.multiply(complex6); org.apache.commons.math.complex.Complex complex8 = complex4.acos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test1231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1231"); float float1 = org.apache.commons.math.util.FastMath.ulp((float) 1469474255L); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 128.0f + "'", float1 == 128.0f); }
public void test1232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1232"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.complex.Complex complex18 = complex0.log(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(complex18); }
public void test1233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1233"); float float2 = org.apache.commons.math.util.FastMath.nextAfter(152.0f, (double) 4.39129173E17f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 152.00002f + "'", float2 == 152.00002f); }
public void test1234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1234"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); double double4 = complex3.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.9173172759781081d + "'", double4 == 0.9173172759781081d); }
public void test1235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1235"); int int2 = org.apache.commons.math.util.MathUtils.pow(1073788823, 25); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-335318313) + "'", int2 == (-335318313)); }
public void test1236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1236"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex18 = complex14.add(complex17); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); }
public void test1237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1237"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex14 = complex13.negate(); org.apache.commons.math.complex.Complex complex15 = complex14.cosh(); java.lang.Object obj16 = complex14.readResolve(); double double17 = complex14.abs(); org.apache.commons.math.complex.Complex complex19 = complex14.pow(Double.NEGATIVE_INFINITY); org.apache.commons.math.complex.Complex complex20 = complex11.pow(complex19); org.apache.commons.math.complex.Complex complex21 = complex20.tan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(obj16); org.junit.Assert.assertEquals(obj16.toString(), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "(-10.0, -0.0)"); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); }
public void test1238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1238"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex0.sinh(); double double18 = complex17.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); }
public void test1239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1239"); java.lang.Number number0 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException3 = new org.apache.commons.math.exception.NumberIsTooLargeException(number0, (java.lang.Number) 1.0008272597497694d, false); boolean boolean4 = numberIsTooLargeException3.getBoundIsAllowed(); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); }
public void test1240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1240"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex11 = complex8.pow((double) 20); org.apache.commons.math.complex.Complex complex12 = complex11.sin(); org.apache.commons.math.complex.Complex complex13 = complex11.exp(); org.apache.commons.math.complex.Complex complex14 = complex7.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex13.divide(0.0d); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList18 = complex13.nthRoot(0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: 0"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); }
public void test1241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1241"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(1.7182818284590453d); }
public void test1242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1242"); long long2 = org.apache.commons.math.util.MathUtils.lcm(0L, (long) (-55)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test1243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1243"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex12.subtract(66.97680939587865d); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.sin(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.negate(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex18.pow(complex22); boolean boolean25 = complex23.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex26 = complex16.divide(complex23); org.apache.commons.math.complex.Complex complex27 = complex16.sinh(); org.apache.commons.math.complex.Complex complex28 = complex16.atan(); org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z(); double double30 = complex29.getReal(); org.apache.commons.math.complex.Complex complex31 = complex29.tanh(); double double32 = complex31.abs(); double double33 = complex31.abs(); org.apache.commons.math.complex.Complex complex34 = complex12.divide(complex31); boolean boolean35 = complex12.isNaN(); org.apache.commons.math.complex.Complex complex36 = complex12.sqrt(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.7146114112494588d + "'", double30 == 0.7146114112494588d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.6135603872539619d + "'", double32 == 0.6135603872539619d); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.6135603872539619d + "'", double33 == 0.6135603872539619d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertNotNull(complex36); }
public void test1244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1244"); long long1 = org.apache.commons.math.util.MathUtils.indicator((long) 10240); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L); }
public void test1245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1245"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.exp(); double double4 = complex3.getArgument(); org.apache.commons.math.complex.Complex complex5 = complex3.acos(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex7.conjugate(); org.apache.commons.math.complex.Complex complex9 = complex5.multiply(complex8); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); }
public void test1246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1246"); double double1 = org.apache.commons.math.util.FastMath.exp((double) 680745192); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY); }
public void test1247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1247"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); org.apache.commons.math.complex.Complex complex4 = complex0.tanh(); org.apache.commons.math.complex.Complex complex6 = complex0.add(0.0d); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 100.0f, (double) 6); org.apache.commons.math.complex.Complex complex10 = complex0.pow(complex9); java.lang.Class<?> wildcardClass11 = complex10.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(wildcardClass11); }
public void test1248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1248"); float float1 = org.apache.commons.math.util.FastMath.ulp((float) 10240); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 9.765625E-4f + "'", float1 == 9.765625E-4f); }
public void test1249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1249"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex3 = complex0.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField6 = complex3.getField(); org.apache.commons.math.complex.Complex complex9 = complex3.createComplex((double) (short) 10, 5.560681631015528d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complexField6); org.junit.Assert.assertNotNull(complex9); }
public void test1250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1250"); float float2 = org.apache.commons.math.util.FastMath.nextAfter(0.0f, 1.9826083154044198E87d); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.4E-45f + "'", float2 == 1.4E-45f); }
public void test1251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1251"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complex5.add((double) (-680745036L)); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex7); org.apache.commons.math.complex.Complex complex9 = complex7.conjugate(); org.apache.commons.math.complex.ComplexField complexField10 = complex9.getField(); double double11 = complex9.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complexField10); org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-6.80745036E8d) + "'", double11 == (-6.80745036E8d)); }
public void test1252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1252"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex12.acos(); java.lang.String str14 = complex13.toString(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField15 = complex13.getField(); org.apache.commons.math.complex.Complex complex17 = complex13.add(2.324894703019253d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(0.3351820637427305, 1.1102230246251565E-16)" + "'", str14, "(0.3351820637427305, 1.1102230246251565E-16)"); org.junit.Assert.assertNotNull(complexField15); org.junit.Assert.assertNotNull(complex17); }
public void test1253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1253"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((-3.6338013156151414E9d), 0.0d, 9.797959360468614d); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test1254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1254"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex7 = complexField4.getOne(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField8 = complex7.getField(); org.apache.commons.math.complex.Complex complex9 = complexField8.getOne(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complexField8); org.junit.Assert.assertNotNull(complex9); }
public void test1255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1255"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; double[] doubleArray7 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray9 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray7, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection10 = null; double[] doubleArray13 = new double[] { 0.0f, 0.0f }; double[] doubleArray16 = new double[] { 0.0f, 0.0f }; double[] doubleArray19 = new double[] { 0.0f, 0.0f }; double[] doubleArray22 = new double[] { 0.0f, 0.0f }; double[] doubleArray25 = new double[] { 0.0f, 0.0f }; double[][] doubleArray26 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray9, orderDirection10, doubleArray26); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable3, (java.lang.Object[]) doubleArray26); org.apache.commons.math.exception.NullArgumentException nullArgumentException29 = new org.apache.commons.math.exception.NullArgumentException(localizable1, (java.lang.Object[]) doubleArray26); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException30 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray26); java.lang.Throwable throwable31 = mathArithmeticException30.getException(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext32 = mathArithmeticException30.getContext(); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertNotNull(throwable31); org.junit.Assert.assertNotNull(exceptionContext32); }
public void test1256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1256"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); double double10 = complex8.getReal(); org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex8); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex13 = complex12.atan(); org.apache.commons.math.complex.Complex complex14 = complex12.log(); org.apache.commons.math.complex.Complex complex17 = complex14.createComplex(84322.27861671781d, 0.0d); org.apache.commons.math.complex.Complex complex18 = complex14.negate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.8414709848078965d + "'", double10 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); }
public void test1257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1257"); double double1 = org.apache.commons.math.util.FastMath.rint(1.5860134523134298E15d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.58601345231343E15d + "'", double1 == 1.58601345231343E15d); }
public void test1258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1258"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex3 = complex1.subtract(1.0d); org.apache.commons.math.complex.Complex complex5 = complex3.subtract((double) 96); org.apache.commons.math.complex.Complex complex6 = complex3.cos(); double double7 = complex3.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + (-0.1585290151921035d) + "'", double7 == (-0.1585290151921035d)); }
public void test1259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1259"); double double1 = org.apache.commons.math.util.FastMath.acosh((double) 1.41006477E9f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 21.760048655593238d + "'", double1 == 21.760048655593238d); }
public void test1260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1260"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sin(); org.apache.commons.math.complex.Complex complex16 = complex11.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); }
public void test1261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1261"); double double1 = org.apache.commons.math.util.FastMath.acosh((double) 101); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 5.308243189099001d + "'", double1 == 5.308243189099001d); }
public void test1262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1262"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex7 = complex5.multiply(1.530112122701651d); org.apache.commons.math.complex.Complex complex10 = complex5.createComplex(2.3721732428803253E211d, 615.061266207085d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); }
public void test1263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1263"); double[] doubleArray3 = new double[] { 100L, 69.35408138262233d, 0.6135603872539619d }; double[] doubleArray7 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray9 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray7, (int) (short) 0); double[] doubleArray12 = new double[] { (-1), (byte) 100 }; double double13 = org.apache.commons.math.util.MathUtils.distance1(doubleArray9, doubleArray12); double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, 100); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray15); boolean boolean17 = org.apache.commons.math.util.MathUtils.equals(doubleArray3, doubleArray15); double[] doubleArray19 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 10); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray19); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 69.35408138262233, 0.6135603872539619]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 69.35408138262233, 0.6135603872539619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 69.35408138262233, 0.6135603872539619, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); }
public void test1264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1264"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex5.sqrt(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex8.sinh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex9.pow(complex11); org.apache.commons.math.complex.Complex complex15 = complex11.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sin(); double double19 = complex18.getArgument(); org.apache.commons.math.complex.Complex complex20 = complex15.multiply(complex18); org.apache.commons.math.complex.Complex complex21 = complex18.sin(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex23 = complex21.add(complex22); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex26 = complex25.negate(); org.apache.commons.math.complex.Complex complex27 = complex26.sinh(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.negate(); org.apache.commons.math.complex.Complex complex30 = complex27.pow(complex29); org.apache.commons.math.complex.Complex complex33 = complex29.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex34 = complex33.negate(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex36 = complex35.sin(); double double37 = complex36.getArgument(); org.apache.commons.math.complex.Complex complex38 = complex33.multiply(complex36); org.apache.commons.math.complex.Complex complex39 = complex38.tanh(); org.apache.commons.math.complex.Complex complex40 = complex24.add(complex38); org.apache.commons.math.complex.Complex complex41 = complex21.divide(complex40); org.apache.commons.math.complex.Complex complex42 = complex40.acos(); org.apache.commons.math.complex.Complex complex43 = complex6.multiply(complex40); org.apache.commons.math.complex.Complex complex44 = complex6.asin(); java.lang.String str45 = complex6.toString(); java.lang.Object obj46 = complex6.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(0.8726936208978296, 0.0)" + "'", str45, "(0.8726936208978296, 0.0)"); org.junit.Assert.assertNotNull(obj46); org.junit.Assert.assertEquals(obj46.toString(), "(0.8726936208978296, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "(0.8726936208978296, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "(0.8726936208978296, 0.0)"); }
public void test1265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1265"); float float2 = org.apache.commons.math.util.FastMath.min(0.0f, (float) 1073741871L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f); }
public void test1266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1266"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (-49)); java.lang.Number number2 = notPositiveException1.getMin(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext3 = notPositiveException1.getContext(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext4 = notPositiveException1.getContext(); org.junit.Assert.assertEquals("'" + number2 + "' != '" + 0 + "'", number2, 0); org.junit.Assert.assertNotNull(exceptionContext3); org.junit.Assert.assertNotNull(exceptionContext4); }
public void test1267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1267"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.exception.util.Localizable localizable12 = null; java.lang.Object[] objArray13 = null; org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex10, localizable12, objArray13); java.lang.Object obj15 = complex10.readResolve(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.valueOf((double) 1225, (double) 0); org.apache.commons.math.complex.Complex complex19 = complex10.pow(complex18); org.apache.commons.math.complex.Complex complex21 = complex10.multiply(2.0933705972275205E15d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(obj15); org.junit.Assert.assertEquals(obj15.toString(), "(-0.3981570232861697, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "(-0.3981570232861697, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "(-0.3981570232861697, -0.0)"); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex21); }
public void test1268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1268"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); org.apache.commons.math.complex.Complex complex3 = complex0.cosh(); org.apache.commons.math.complex.Complex complex4 = complex3.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test1269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1269"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(0.5496225549463801d); org.apache.commons.math.complex.Complex complex2 = complex1.conjugate(); org.junit.Assert.assertNotNull(complex2); }
public void test1270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1270"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); double double18 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex15.cos(); org.apache.commons.math.complex.Complex complex20 = complex15.exp(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2.356194490192345d) + "'", double18 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); }
public void test1271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1271"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray12 = new int[] { (byte) 100, 10 }; int[] intArray18 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double19 = org.apache.commons.math.util.MathUtils.distance(intArray12, intArray18); int int20 = org.apache.commons.math.util.MathUtils.distance1(intArray2, intArray12); int[] intArray23 = new int[] { (byte) 100, 10 }; int[] intArray29 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double30 = org.apache.commons.math.util.MathUtils.distance(intArray23, intArray29); int[] intArray33 = new int[] { (byte) 100, 10 }; int[] intArray39 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double40 = org.apache.commons.math.util.MathUtils.distance(intArray33, intArray39); double double41 = org.apache.commons.math.util.MathUtils.distance(intArray29, intArray39); int int42 = org.apache.commons.math.util.MathUtils.distance1(intArray2, intArray29); int[] intArray43 = org.apache.commons.math.util.MathUtils.copyOf(intArray29); int[] intArray45 = org.apache.commons.math.util.MathUtils.copyOf(intArray29, 135); org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10]"); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 104.04806581575652d + "'", double19 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(intArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, 10]"); org.junit.Assert.assertNotNull(intArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 104.04806581575652d + "'", double30 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, 10]"); org.junit.Assert.assertNotNull(intArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 104.04806581575652d + "'", double40 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 126 + "'", int42 == 126); org.junit.Assert.assertNotNull(intArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); }
public void test1272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1272"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); boolean boolean3 = complex0.isNaN(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex5.sinh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex6.pow(complex8); org.apache.commons.math.complex.Complex complex12 = complex8.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.sin(); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex12.multiply(complex15); org.apache.commons.math.complex.Complex complex18 = complex0.multiply(complex12); org.apache.commons.math.complex.Complex complex19 = complex18.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.sqrt1z(); org.apache.commons.math.complex.Complex complex21 = complex20.sqrt(); org.apache.commons.math.complex.Complex complex22 = complex21.atan(); org.apache.commons.math.complex.Complex complex23 = complex22.asin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); }
public void test1273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1273"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 534.4916555247646d, (java.lang.Number) 5.865608931718212E44d, (-127)); java.lang.Number number4 = nonMonotonousSequenceException3.getPrevious(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection8 = org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException10 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 1.4E-45f, (java.lang.Number) 10.000000000000002d, 5, orderDirection8, false); boolean boolean11 = nonMonotonousSequenceException10.getStrict(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection12 = nonMonotonousSequenceException10.getDirection(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection13 = nonMonotonousSequenceException10.getDirection(); nonMonotonousSequenceException3.addSuppressed((java.lang.Throwable) nonMonotonousSequenceException10); org.junit.Assert.assertEquals("'" + number4 + "' != '" + 5.865608931718212E44d + "'", number4, 5.865608931718212E44d); org.junit.Assert.assertTrue("'" + orderDirection8 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING + "'", orderDirection8.equals(org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING)); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING + "'", orderDirection12.equals(org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING)); org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING + "'", orderDirection13.equals(org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING)); }
public void test1274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1274"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); double double3 = complex0.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test1275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1275"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray12 = new int[] { (byte) 100, 10 }; int[] intArray18 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double19 = org.apache.commons.math.util.MathUtils.distance(intArray12, intArray18); double double20 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray18); int[] intArray21 = org.apache.commons.math.util.MathUtils.copyOf(intArray8); int[] intArray24 = new int[] { (byte) 100, 10 }; int[] intArray30 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double31 = org.apache.commons.math.util.MathUtils.distance(intArray24, intArray30); int[] intArray34 = new int[] { (byte) 100, 10 }; int[] intArray40 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double41 = org.apache.commons.math.util.MathUtils.distance(intArray34, intArray40); double double42 = org.apache.commons.math.util.MathUtils.distance(intArray30, intArray40); int[] intArray43 = org.apache.commons.math.util.MathUtils.copyOf(intArray30); double double44 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray43); int[] intArray45 = org.apache.commons.math.util.MathUtils.copyOf(intArray43); int[] intArray50 = new int[] { 52, 6, 'a', 680745024 }; int[] intArray53 = new int[] { (byte) 100, 10 }; int[] intArray59 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double60 = org.apache.commons.math.util.MathUtils.distance(intArray53, intArray59); int[] intArray62 = org.apache.commons.math.util.MathUtils.copyOf(intArray59, (int) (byte) 10); int int63 = org.apache.commons.math.util.MathUtils.distanceInf(intArray50, intArray62); int[] intArray66 = new int[] { (byte) 100, 10 }; int[] intArray72 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double73 = org.apache.commons.math.util.MathUtils.distance(intArray66, intArray72); int[] intArray76 = new int[] { (byte) 100, 10 }; int[] intArray82 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double83 = org.apache.commons.math.util.MathUtils.distance(intArray76, intArray82); int int84 = org.apache.commons.math.util.MathUtils.distanceInf(intArray66, intArray82); int[] intArray87 = new int[] { (byte) 100, 10 }; int[] intArray93 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double94 = org.apache.commons.math.util.MathUtils.distance(intArray87, intArray93); int[] intArray96 = org.apache.commons.math.util.MathUtils.copyOf(intArray93, (int) (byte) 10); int int97 = org.apache.commons.math.util.MathUtils.distance1(intArray82, intArray93); double double98 = org.apache.commons.math.util.MathUtils.distance(intArray50, intArray93); // The following exception was thrown during execution in test generation try { int int99 = org.apache.commons.math.util.MathUtils.distanceInf(intArray45, intArray50); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10]"); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 104.04806581575652d + "'", double19 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(intArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 10]"); org.junit.Assert.assertNotNull(intArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 104.04806581575652d + "'", double31 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[100, 10]"); org.junit.Assert.assertNotNull(intArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 104.04806581575652d + "'", double41 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(intArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertNotNull(intArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[52, 6, 97, 680745024]"); org.junit.Assert.assertNotNull(intArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[100, 10]"); org.junit.Assert.assertNotNull(intArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 104.04806581575652d + "'", double60 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int63 + "' != '" + 680745023 + "'", int63 == 680745023); org.junit.Assert.assertNotNull(intArray66); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[100, 10]"); org.junit.Assert.assertNotNull(intArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double73 + "' != '" + 104.04806581575652d + "'", double73 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[100, 10]"); org.junit.Assert.assertNotNull(intArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 104.04806581575652d + "'", double83 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int84 + "' != '" + 101 + "'", int84 == 101); org.junit.Assert.assertNotNull(intArray87); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[100, 10]"); org.junit.Assert.assertNotNull(intArray93); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double94 + "' != '" + 104.04806581575652d + "'", double94 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray96); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0); org.junit.Assert.assertTrue("'" + double98 + "' != '" + 6.807450230000095E8d + "'", double98 == 6.807450230000095E8d); }
public void test1276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1276"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(3.0881360887005513d, (double) (-99.99999f)); org.junit.Assert.assertNotNull(complex2); }
public void test1277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1277"); double double2 = org.apache.commons.math.util.FastMath.min((double) 1.37438953E11f, 1168.520100807081d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1168.520100807081d + "'", double2 == 1168.520100807081d); }
public void test1278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1278"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); boolean boolean3 = complex0.isNaN(); org.apache.commons.math.complex.Complex complex5 = complex0.add((double) 6.591783E31f); org.apache.commons.math.complex.Complex complex6 = complex5.exp(); double double7 = complex6.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + Double.POSITIVE_INFINITY + "'", double7 == Double.POSITIVE_INFINITY); }
public void test1279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1279"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; double[] doubleArray6 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray6, (int) (short) 0); double[] doubleArray11 = new double[] { (-1), (byte) 100 }; double double12 = org.apache.commons.math.util.MathUtils.distance1(doubleArray8, doubleArray11); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection13 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean16 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray11, orderDirection13, false, true); double[] doubleArray20 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray22 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray20, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection23 = null; double[] doubleArray26 = new double[] { 0.0f, 0.0f }; double[] doubleArray29 = new double[] { 0.0f, 0.0f }; double[] doubleArray32 = new double[] { 0.0f, 0.0f }; double[] doubleArray35 = new double[] { 0.0f, 0.0f }; double[] doubleArray38 = new double[] { 0.0f, 0.0f }; double[][] doubleArray39 = new double[][] { doubleArray26, doubleArray29, doubleArray32, doubleArray35, doubleArray38 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray22, orderDirection23, doubleArray39); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray11, doubleArray39); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException42 = new org.apache.commons.math.exception.MathArithmeticException(localizable2, (java.lang.Object[]) doubleArray39); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException43 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) 7.307059979368067E43d, (java.lang.Object[]) doubleArray39); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException44 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) doubleArray39); org.apache.commons.math.exception.util.ExceptionContext exceptionContext45 = mathIllegalArgumentException44.getContext(); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection13 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection13.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertNotNull(exceptionContext45); }
public void test1280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1280"); double double1 = org.apache.commons.math.util.FastMath.atanh((-2.2085588309729804E71d)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1281"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.subtract((double) (-1L)); org.apache.commons.math.complex.Complex complex5 = complex0.divide((double) 49); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); }
public void test1282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1282"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 534.4916555247646d, (java.lang.Number) 6.281756272996838E42d, (-1638385820)); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection4 = nonMonotonousSequenceException3.getDirection(); org.junit.Assert.assertTrue("'" + orderDirection4 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection4.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); }
public void test1283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1283"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex4.sqrt1z(); boolean boolean7 = complex4.isNaN(); org.apache.commons.math.complex.Complex complex9 = complex4.add((double) 6.591783E31f); org.apache.commons.math.complex.Complex complex10 = complex9.sin(); org.apache.commons.math.complex.Complex complex11 = complex10.sinh(); org.apache.commons.math.complex.Complex complex12 = complex3.multiply(complex10); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test1284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1284"); long long2 = org.apache.commons.math.util.FastMath.max(0L, 10L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L); }
public void test1285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1285"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(1.1920928955078125E-7d, 1.401298464324817E-45d); org.junit.Assert.assertNotNull(complex2); }
public void test1286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1286"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException3 = new org.apache.commons.math.exception.NotPositiveException(localizable1, (java.lang.Number) 5); java.lang.Throwable throwable4 = notPositiveException3.getException(); java.lang.Throwable[] throwableArray5 = notPositiveException3.getSuppressed(); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) throwableArray5); org.junit.Assert.assertNotNull(throwable4); org.junit.Assert.assertNotNull(throwableArray5); }
public void test1287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1287"); float float1 = org.apache.commons.math.util.MathUtils.indicator((float) (-1595543182)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + (-1.0f) + "'", float1 == (-1.0f)); }
public void test1288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1288"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex12.acos(); java.lang.String str14 = complex13.toString(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField15 = complex13.getField(); org.apache.commons.math.complex.Complex complex17 = complex13.multiply((double) (-1079574528L)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertEquals("'" + str14 + "' != '" + "(0.3351820637427305, 1.1102230246251565E-16)" + "'", str14, "(0.3351820637427305, 1.1102230246251565E-16)"); org.junit.Assert.assertNotNull(complexField15); org.junit.Assert.assertNotNull(complex17); }
public void test1289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1289"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test1290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1290"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equals((float) 120L, (float) 1L); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test1291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1291"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-3.141592653589793d), (double) (byte) 1); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField3 = complex2.getField(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex2); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); org.apache.commons.math.complex.Complex complex10 = complex8.exp(); org.apache.commons.math.complex.Complex complex11 = complex6.multiply(complex8); org.apache.commons.math.complex.Complex complex12 = complex2.pow(complex6); java.lang.Object obj13 = complex6.readResolve(); org.apache.commons.math.complex.Complex complex14 = complex6.conjugate(); double double15 = complex14.getArgument(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField16 = complex14.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complexField3); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(obj13); org.junit.Assert.assertEquals(obj13.toString(), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.0d) + "'", double15 == (-0.0d)); org.junit.Assert.assertNotNull(complexField16); }
public void test1292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1292"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; org.apache.commons.math.exception.util.Localizable localizable5 = null; double[] doubleArray9 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray11 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray9, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection12 = null; double[] doubleArray15 = new double[] { 0.0f, 0.0f }; double[] doubleArray18 = new double[] { 0.0f, 0.0f }; double[] doubleArray21 = new double[] { 0.0f, 0.0f }; double[] doubleArray24 = new double[] { 0.0f, 0.0f }; double[] doubleArray27 = new double[] { 0.0f, 0.0f }; double[][] doubleArray28 = new double[][] { doubleArray15, doubleArray18, doubleArray21, doubleArray24, doubleArray27 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray11, orderDirection12, doubleArray28); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable5, (java.lang.Object[]) doubleArray28); org.apache.commons.math.exception.NullArgumentException nullArgumentException31 = new org.apache.commons.math.exception.NullArgumentException(localizable3, (java.lang.Object[]) doubleArray28); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException32 = new org.apache.commons.math.exception.MathArithmeticException(localizable2, (java.lang.Object[]) doubleArray28); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException33 = new org.apache.commons.math.exception.MathArithmeticException(localizable1, (java.lang.Object[]) doubleArray28); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException34 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray28); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) mathArithmeticException34); org.apache.commons.math.exception.util.Localizable localizable36 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException40 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable36, (java.lang.Number) (byte) 100, (java.lang.Number) (-100L), false); org.apache.commons.math.exception.util.ExceptionContext exceptionContext41 = numberIsTooSmallException40.getContext(); mathArithmeticException34.addSuppressed((java.lang.Throwable) numberIsTooSmallException40); org.apache.commons.math.exception.util.ExceptionContext exceptionContext43 = numberIsTooSmallException40.getContext(); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertNotNull(exceptionContext41); org.junit.Assert.assertNotNull(exceptionContext43); }
public void test1293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1293"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex0.sinh(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.sin(); double double20 = complex19.getImaginary(); org.apache.commons.math.complex.Complex complex21 = complex19.exp(); org.apache.commons.math.complex.Complex complex22 = complex0.add(complex19); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField23 = complex19.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complexField23); }
public void test1294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1294"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex6 = complex3.multiply(1.410065408E11d); org.apache.commons.math.complex.Complex complex7 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex10 = complex8.tanh(); org.apache.commons.math.complex.Complex complex11 = complex10.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField12 = complex11.getField(); org.apache.commons.math.complex.Complex complex13 = complexField12.getOne(); org.apache.commons.math.complex.Complex complex14 = complex7.divide(complex13); org.apache.commons.math.complex.Complex complex15 = complex13.asin(); org.apache.commons.math.complex.Complex complex16 = complex15.atan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complexField12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); }
public void test1295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1295"); double double1 = org.apache.commons.math.util.FastMath.abs(345.3794070622669d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 345.3794070622669d + "'", double1 == 345.3794070622669d); }
public void test1296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1296"); double double2 = org.apache.commons.math.util.FastMath.pow((-0.358680746883423d), 52.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 6.995510325579128E-24d + "'", double2 == 6.995510325579128E-24d); }
public void test1297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1297"); double double1 = org.apache.commons.math.util.MathUtils.sinh((double) (-680745013L)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.NEGATIVE_INFINITY + "'", double1 == Double.NEGATIVE_INFINITY); }
public void test1298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1298"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(7.256878146283763E87d, (-0.8813735870195429d)); }
public void test1299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1299"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex3 = complex1.pow(0.3490658503988659d); org.apache.commons.math.complex.Complex complex5 = complex1.subtract(544.656365691809d); org.apache.commons.math.complex.Complex complex7 = complex5.subtract((double) 318997151L); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); }
public void test1300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1300"); double double2 = org.apache.commons.math.util.MathUtils.log((double) 1015, 52.00961449578337d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.5707976110840879d + "'", double2 == 0.5707976110840879d); }
public void test1301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1301"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex19.sinh(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex20.pow(complex22); org.apache.commons.math.complex.Complex complex26 = complex22.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.sin(); double double30 = complex29.getArgument(); org.apache.commons.math.complex.Complex complex31 = complex26.multiply(complex29); org.apache.commons.math.complex.Complex complex32 = complex31.tanh(); org.apache.commons.math.complex.Complex complex33 = complex17.add(complex31); org.apache.commons.math.complex.Complex complex34 = complex14.divide(complex33); org.apache.commons.math.complex.Complex complex35 = complex33.acos(); org.apache.commons.math.complex.Complex complex36 = complex35.sin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); }
public void test1302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1302"); int int3 = org.apache.commons.math.util.MathUtils.compareTo(24.54312712315068d, 1.565553277755247d, 1078034484); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); }
public void test1303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1303"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex4 = complex1.pow((double) 20); java.lang.String str5 = complex4.toString(); double double6 = complex4.getReal(); org.apache.commons.math.complex.Complex complex7 = complex4.tan(); org.apache.commons.math.complex.Complex complex8 = complex4.tanh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex12 = complex10.divide((double) 1079574528); org.apache.commons.math.complex.Complex complex14 = complex10.divide((double) (-680745024)); boolean boolean15 = complex14.isInfinite(); org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex14); org.apache.commons.math.exception.util.Localizable localizable17 = null; org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray21 = new double[] { 2.718281828459045d, '#' }; int int22 = org.apache.commons.math.util.MathUtils.hash(doubleArray21); org.apache.commons.math.exception.util.Localizable localizable24 = null; org.apache.commons.math.exception.util.Localizable localizable25 = null; double[] doubleArray29 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray31 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray29, (int) (short) 0); double[] doubleArray34 = new double[] { (-1), (byte) 100 }; double double35 = org.apache.commons.math.util.MathUtils.distance1(doubleArray31, doubleArray34); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection36 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean39 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray34, orderDirection36, false, true); double[] doubleArray43 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray45 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray43, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection46 = null; double[] doubleArray49 = new double[] { 0.0f, 0.0f }; double[] doubleArray52 = new double[] { 0.0f, 0.0f }; double[] doubleArray55 = new double[] { 0.0f, 0.0f }; double[] doubleArray58 = new double[] { 0.0f, 0.0f }; double[] doubleArray61 = new double[] { 0.0f, 0.0f }; double[][] doubleArray62 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray45, orderDirection46, doubleArray62); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray34, doubleArray62); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException65 = new org.apache.commons.math.exception.MathArithmeticException(localizable25, (java.lang.Object[]) doubleArray62); org.apache.commons.math.exception.NullArgumentException nullArgumentException66 = new org.apache.commons.math.exception.NullArgumentException(localizable24, (java.lang.Object[]) doubleArray62); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException67 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) (-0.9999999999999999d), (java.lang.Object[]) doubleArray62); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray21, doubleArray62); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException69 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable18, (java.lang.Object[]) doubleArray62); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex16, localizable17, (java.lang.Object[]) doubleArray62); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException71 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) 5.4338975249603854E-17d, (java.lang.Object[]) doubleArray62); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(1.0, 0.0)" + "'", str5, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[2.718281828459045, 35.0]"); org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-680745026) + "'", int22 == (-680745026)); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray62); }
public void test1304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1304"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.cosh(); double double4 = complex3.getArgument(); org.apache.commons.math.complex.Complex complex5 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex6 = complex3.add(complex5); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); }
public void test1305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1305"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex15.sqrt(); org.apache.commons.math.complex.Complex complex69 = complex68.tanh(); boolean boolean70 = complex68.isNaN(); org.apache.commons.math.complex.Complex complex71 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex72 = complex68.multiply(complex71); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); }
public void test1306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1306"); // The following exception was thrown during execution in test generation try { double double3 = org.apache.commons.math.util.MathUtils.round((double) 7.9673242E8f, 1079574528, (int) ' '); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test1307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1307"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex67.exp(); org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex70 = complex69.negate(); org.apache.commons.math.complex.Complex complex71 = complex70.sinh(); double double72 = complex71.getArgument(); org.apache.commons.math.complex.Complex complex73 = complex68.subtract(complex71); org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex75 = complex74.sqrt(); org.apache.commons.math.complex.Complex complex76 = complex74.tanh(); org.apache.commons.math.complex.Complex complex77 = complex76.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField78 = complex77.getField(); org.apache.commons.math.complex.Complex complex79 = complexField78.getZero(); org.apache.commons.math.complex.Complex complex80 = complexField78.getOne(); org.apache.commons.math.complex.Complex complex81 = complex80.tan(); double double82 = complex81.getReal(); org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex86 = complex83.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex87 = complex86.sqrt1z(); java.util.List<org.apache.commons.math.complex.Complex> complexList89 = complex86.nthRoot((int) (byte) 10); org.apache.commons.math.complex.Complex complex90 = complex86.sqrt(); org.apache.commons.math.complex.Complex complex91 = complex81.multiply(complex90); org.apache.commons.math.complex.Complex complex92 = complex68.subtract(complex91); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-3.141592653589793d) + "'", double72 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex75); org.junit.Assert.assertNotNull(complex76); org.junit.Assert.assertNotNull(complex77); org.junit.Assert.assertNotNull(complexField78); org.junit.Assert.assertNotNull(complex79); org.junit.Assert.assertNotNull(complex80); org.junit.Assert.assertNotNull(complex81); org.junit.Assert.assertTrue("'" + double82 + "' != '" + 1.557407724654902d + "'", double82 == 1.557407724654902d); org.junit.Assert.assertNotNull(complex83); org.junit.Assert.assertNotNull(complex86); org.junit.Assert.assertNotNull(complex87); org.junit.Assert.assertNotNull(complexList89); org.junit.Assert.assertNotNull(complex90); org.junit.Assert.assertNotNull(complex91); org.junit.Assert.assertNotNull(complex92); }
public void test1308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1308"); int int1 = org.apache.commons.math.util.MathUtils.hash(1.7720496304913849d); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1990079166) + "'", int1 == (-1990079166)); }
public void test1309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1309"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test1310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1310"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 329309483, 1.1488462128956858d); org.junit.Assert.assertNotNull(complex2); }
public void test1311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1311"); double double2 = org.apache.commons.math.util.MathUtils.log(2.2737367544323206E-13d, (-1.3843148717569957d)); org.junit.Assert.assertTrue(Double.isNaN(double2)); }
public void test1312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1312"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 'a'); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow((double) 20); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex2); org.apache.commons.math.complex.Complex complex7 = complex6.log(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex10 = complex9.log(); org.apache.commons.math.complex.Complex complex12 = complex9.pow(35.0d); org.apache.commons.math.complex.Complex complex13 = complex12.log(); org.apache.commons.math.complex.Complex complex14 = complex6.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex6.cosh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); }
public void test1313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1313"); int int1 = org.apache.commons.math.util.FastMath.round((float) 6861411028438308063L); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2147483647 + "'", int1 == 2147483647); }
public void test1314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1314"); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException0 = new org.apache.commons.math.exception.MathArithmeticException(); java.lang.Throwable throwable1 = mathArithmeticException0.getException(); java.lang.Throwable throwable2 = mathArithmeticException0.getException(); org.junit.Assert.assertNotNull(throwable1); org.junit.Assert.assertEquals(throwable1.getLocalizedMessage(), "arithmetic exception"); org.junit.Assert.assertEquals(throwable1.getMessage(), "arithmetic exception"); org.junit.Assert.assertEquals(throwable1.toString(), "org.apache.commons.math.exception.MathArithmeticException: arithmetic exception"); org.junit.Assert.assertNotNull(throwable2); org.junit.Assert.assertEquals(throwable2.getLocalizedMessage(), "arithmetic exception"); org.junit.Assert.assertEquals(throwable2.getMessage(), "arithmetic exception"); org.junit.Assert.assertEquals(throwable2.toString(), "org.apache.commons.math.exception.MathArithmeticException: arithmetic exception"); }
public void test1315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1315"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex4.acos(); org.apache.commons.math.complex.ComplexField complexField6 = complex5.getField(); boolean boolean7 = complex5.isNaN(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex13 = complex10.createComplex((double) (byte) 10, (double) (short) 100); org.apache.commons.math.complex.Complex complex14 = complex5.subtract(complex13); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.apache.commons.math.complex.Complex complex19 = complex16.pow(35.0d); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex21 = complex20.negate(); org.apache.commons.math.complex.Complex complex22 = complex21.sinh(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex22.pow(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.multiply(10.000000000000002d); org.apache.commons.math.complex.Complex complex28 = complex19.subtract(complex24); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex30 = complex29.negate(); org.apache.commons.math.complex.Complex complex32 = complex30.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex34 = complex33.negate(); org.apache.commons.math.complex.Complex complex35 = complex30.pow(complex34); org.apache.commons.math.complex.Complex complex36 = complex35.cos(); org.apache.commons.math.complex.Complex complex38 = complex36.multiply((double) 152L); org.apache.commons.math.complex.Complex complex39 = complex19.subtract(complex36); org.apache.commons.math.complex.Complex complex40 = complex14.multiply(complex36); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complexField6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); }
public void test1316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1316"); org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException3 = new org.apache.commons.math.exception.NumberIsTooLargeException((java.lang.Number) 4.416506244707459d, (java.lang.Number) 151L, false); java.lang.Throwable[] throwableArray4 = numberIsTooLargeException3.getSuppressed(); org.junit.Assert.assertNotNull(throwableArray4); }
public void test1317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1317"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(4.0d); org.apache.commons.math.complex.Complex complex2 = complex1.exp(); org.junit.Assert.assertNotNull(complex2); }
public void test1318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1318"); double double1 = org.apache.commons.math.util.FastMath.acos((double) (-335318313)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1319"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); org.apache.commons.math.complex.Complex complex6 = complex5.conjugate(); org.apache.commons.math.complex.Complex complex7 = complex6.acos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test1320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1320"); float float2 = org.apache.commons.math.util.FastMath.scalb((float) 1077739520, 680745192); org.junit.Assert.assertTrue("'" + float2 + "' != '" + Float.POSITIVE_INFINITY + "'", float2 == Float.POSITIVE_INFINITY); }
public void test1321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1321"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); boolean boolean3 = complex0.isNaN(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex5.sinh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex6.pow(complex8); org.apache.commons.math.complex.Complex complex12 = complex8.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.sin(); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex12.multiply(complex15); org.apache.commons.math.complex.Complex complex18 = complex0.multiply(complex12); org.apache.commons.math.complex.Complex complex19 = complex18.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.sqrt1z(); org.apache.commons.math.complex.Complex complex21 = complex20.sqrt(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField22 = complex21.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complexField22); }
public void test1322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1322"); // The following exception was thrown during execution in test generation try { long long2 = org.apache.commons.math.util.MathUtils.binomialCoefficient((-1810677121), 61); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: must have n >= k for binomial coefficient (n, k), got k = 61, n = -1,810,677,121"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } }
public void test1323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1323"); double double1 = org.apache.commons.math.util.MathUtils.sinh((-0.3360163647973221d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.34237525682418735d) + "'", double1 == (-0.34237525682418735d)); }
public void test1324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1324"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = complex11.sin(); org.apache.commons.math.complex.Complex complex16 = complex15.acos(); double double17 = complex16.abs(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.729325341987d + "'", double17 == 0.729325341987d); }
public void test1325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1325"); java.lang.Number number1 = null; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException9 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (-1), (java.lang.Number) 1.810677121E9d, (-1944488865)); boolean boolean10 = nonMonotonousSequenceException9.getStrict(); boolean boolean11 = nonMonotonousSequenceException9.getStrict(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection12 = nonMonotonousSequenceException9.getDirection(); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException14 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 0.6506783754890694d, (java.lang.Number) 2046L, (-1810677121), orderDirection12, false); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException16 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 5.865608931718212E44d, number1, (-1042212720), orderDirection12, false); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true); org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); }
public void test1326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1326"); int[] intArray4 = new int[] { 52, 6, 'a', 680745024 }; int[] intArray7 = new int[] { (byte) 100, 10 }; int[] intArray13 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double14 = org.apache.commons.math.util.MathUtils.distance(intArray7, intArray13); int[] intArray16 = org.apache.commons.math.util.MathUtils.copyOf(intArray13, (int) (byte) 10); int int17 = org.apache.commons.math.util.MathUtils.distanceInf(intArray4, intArray16); int[] intArray18 = org.apache.commons.math.util.MathUtils.copyOf(intArray4); int[] intArray21 = new int[] { (byte) 100, 10 }; int[] intArray27 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double28 = org.apache.commons.math.util.MathUtils.distance(intArray21, intArray27); int[] intArray31 = new int[] { (byte) 100, 10 }; int[] intArray37 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double38 = org.apache.commons.math.util.MathUtils.distance(intArray31, intArray37); double double39 = org.apache.commons.math.util.MathUtils.distance(intArray27, intArray37); int[] intArray40 = org.apache.commons.math.util.MathUtils.copyOf(intArray27); int[] intArray43 = new int[] { (byte) 100, 10 }; int[] intArray49 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double50 = org.apache.commons.math.util.MathUtils.distance(intArray43, intArray49); int[] intArray53 = new int[] { (byte) 100, 10 }; int[] intArray59 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double60 = org.apache.commons.math.util.MathUtils.distance(intArray53, intArray59); double double61 = org.apache.commons.math.util.MathUtils.distance(intArray49, intArray59); int[] intArray62 = org.apache.commons.math.util.MathUtils.copyOf(intArray49); double double63 = org.apache.commons.math.util.MathUtils.distance(intArray27, intArray62); int[] intArray64 = org.apache.commons.math.util.MathUtils.copyOf(intArray62); int[] intArray65 = org.apache.commons.math.util.MathUtils.copyOf(intArray62); int int66 = org.apache.commons.math.util.MathUtils.distanceInf(intArray18, intArray62); int[] intArray67 = org.apache.commons.math.util.MathUtils.copyOf(intArray18); org.junit.Assert.assertNotNull(intArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[52, 6, 97, 680745024]"); org.junit.Assert.assertNotNull(intArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[100, 10]"); org.junit.Assert.assertNotNull(intArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 104.04806581575652d + "'", double14 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 680745023 + "'", int17 == 680745023); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[52, 6, 97, 680745024]"); org.junit.Assert.assertNotNull(intArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100, 10]"); org.junit.Assert.assertNotNull(intArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 104.04806581575652d + "'", double28 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, 10]"); org.junit.Assert.assertNotNull(intArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 104.04806581575652d + "'", double38 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d); org.junit.Assert.assertNotNull(intArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[100, 10]"); org.junit.Assert.assertNotNull(intArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double50 + "' != '" + 104.04806581575652d + "'", double50 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[100, 10]"); org.junit.Assert.assertNotNull(intArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 104.04806581575652d + "'", double60 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.0d + "'", double61 == 0.0d); org.junit.Assert.assertNotNull(intArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(intArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + int66 + "' != '" + 680745023 + "'", int66 == 680745023); org.junit.Assert.assertNotNull(intArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[52, 6, 97, 680745024]"); }
public void test1327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1327"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex7 = complex6.asin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test1328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1328"); float float2 = org.apache.commons.math.util.FastMath.nextAfter((float) (-1103349781L), (double) (-1103349781L)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-1.10334989E9f) + "'", float2 == (-1.10334989E9f)); }
public void test1329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1329"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.exp(); double double4 = complex1.getReal(); org.apache.commons.math.complex.Complex complex5 = complex1.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.8414709848078965d + "'", double4 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex5); }
public void test1330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1330"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 24.54312712315068d, (java.lang.Number) 2.284529170796882d, true); java.lang.Number number4 = numberIsTooSmallException3.getMin(); org.junit.Assert.assertEquals("'" + number4 + "' != '" + 2.284529170796882d + "'", number4, 2.284529170796882d); }
public void test1331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1331"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex3 = complex1.divide((-100.0d)); org.apache.commons.math.complex.Complex complex4 = complex3.tanh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test1332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1332"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) Double.POSITIVE_INFINITY, (java.lang.Number) 10.0d, (int) ' '); int int4 = nonMonotonousSequenceException3.getIndex(); java.lang.Throwable throwable5 = nonMonotonousSequenceException3.getException(); java.lang.Number number6 = nonMonotonousSequenceException3.getPrevious(); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection7 = nonMonotonousSequenceException3.getDirection(); java.lang.Throwable[] throwableArray8 = nonMonotonousSequenceException3.getSuppressed(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32); org.junit.Assert.assertNotNull(throwable5); // flaky:     org.junit.Assert.assertEquals(throwable5.getLocalizedMessage(), "\u221e)"); // flaky:     org.junit.Assert.assertEquals(throwable5.getMessage(), "\u221e)"); // flaky:     org.junit.Assert.assertEquals(throwable5.toString(), "\u221e)"); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 10.0d + "'", number6, 10.0d); org.junit.Assert.assertTrue("'" + orderDirection7 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection7.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertNotNull(throwableArray8); }
public void test1333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1333"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.exp(); double double4 = complex3.getArgument(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); }
public void test1334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1334"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException4 = new org.apache.commons.math.exception.NumberIsTooLargeException(localizable0, (java.lang.Number) 0.45643598791285667d, (java.lang.Number) 95.99999999999999d, false); }
public void test1335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1335"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); double double6 = complex2.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-3.141592653589793d) + "'", double6 == (-3.141592653589793d)); }
public void test1336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1336"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.exp(); double double4 = complex3.getArgument(); org.apache.commons.math.complex.Complex complex5 = complex3.acos(); org.apache.commons.math.complex.Complex complex7 = complex5.divide(8.272729129790584E26d); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex11 = complex9.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex9.pow(complex13); java.util.List<org.apache.commons.math.complex.Complex> complexList16 = complex13.nthRoot(52); org.apache.commons.math.complex.Complex complex17 = complex13.sqrt1z(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.sin(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex21 = complex20.negate(); org.apache.commons.math.complex.Complex complex22 = complex21.sinh(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex22.pow(complex24); org.apache.commons.math.complex.Complex complex28 = complex24.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex29 = complex28.negate(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex31 = complex30.sin(); double double32 = complex31.getArgument(); org.apache.commons.math.complex.Complex complex33 = complex28.multiply(complex31); org.apache.commons.math.complex.Complex complex34 = complex33.tanh(); boolean boolean35 = complex18.equals((java.lang.Object) complex33); double double36 = complex33.getArgument(); org.apache.commons.math.complex.Complex complex37 = complex33.tanh(); org.apache.commons.math.complex.Complex complex38 = complex33.sin(); org.apache.commons.math.complex.Complex complex39 = complex17.pow(complex38); org.apache.commons.math.complex.Complex complex40 = complex5.pow(complex38); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complexList16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false); org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-2.356194490192345d) + "'", double36 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); }
public void test1337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1337"); float float1 = org.apache.commons.math.util.FastMath.abs(1.0f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test1338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1338"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1595543182); org.junit.Assert.assertNotNull(complex1); }
public void test1339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1339"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); boolean boolean3 = complex0.isNaN(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex5.sinh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex6.pow(complex8); org.apache.commons.math.complex.Complex complex12 = complex8.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.sin(); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex12.multiply(complex15); org.apache.commons.math.complex.Complex complex18 = complex0.multiply(complex12); org.apache.commons.math.complex.Complex complex19 = complex18.tanh(); org.apache.commons.math.complex.Complex complex20 = complex19.acos(); org.apache.commons.math.complex.Complex complex21 = complex19.cos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); }
public void test1340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1340"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable4 = null; double[] doubleArray8 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray10 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection11 = null; double[] doubleArray14 = new double[] { 0.0f, 0.0f }; double[] doubleArray17 = new double[] { 0.0f, 0.0f }; double[] doubleArray20 = new double[] { 0.0f, 0.0f }; double[] doubleArray23 = new double[] { 0.0f, 0.0f }; double[] doubleArray26 = new double[] { 0.0f, 0.0f }; double[][] doubleArray27 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23, doubleArray26 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray10, orderDirection11, doubleArray27); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable4, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException30 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) (-1.0f), (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException31 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException32 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) doubleArray27); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray27); }
public void test1341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1341"); double double1 = org.apache.commons.math.util.FastMath.atanh(1.7453292519943295d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test1342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1342"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = complex0.conjugate(); org.apache.commons.math.complex.Complex complex4 = complex0.cosh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test1343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1343"); double double6 = org.apache.commons.math.util.MathUtils.linearCombination((double) (-422604632L), 0.0d, 6.807451430000002E8d, 0.0d, 52.05640491875589d, (double) 11562462923040L); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 6.01900251779872E14d + "'", double6 == 6.01900251779872E14d); }
public void test1344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1344"); float float2 = org.apache.commons.math.util.FastMath.copySign((-1.5f), 0.0f); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.5f + "'", float2 == 1.5f); }
public void test1345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1345"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex2.cos(); org.apache.commons.math.complex.Complex complex8 = complex5.createComplex(1.3280741448105455d, (double) 702); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); }
public void test1346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1346"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray12 = new int[] { (byte) 100, 10 }; int[] intArray18 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double19 = org.apache.commons.math.util.MathUtils.distance(intArray12, intArray18); double double20 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray18); int[] intArray21 = org.apache.commons.math.util.MathUtils.copyOf(intArray8); int[] intArray24 = new int[] { (byte) 100, 10 }; int[] intArray30 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double31 = org.apache.commons.math.util.MathUtils.distance(intArray24, intArray30); int[] intArray34 = new int[] { (byte) 100, 10 }; int[] intArray40 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double41 = org.apache.commons.math.util.MathUtils.distance(intArray34, intArray40); double double42 = org.apache.commons.math.util.MathUtils.distance(intArray30, intArray40); int[] intArray43 = org.apache.commons.math.util.MathUtils.copyOf(intArray30); double double44 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray43); int[] intArray46 = org.apache.commons.math.util.MathUtils.copyOf(intArray8, 0); org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10]"); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 104.04806581575652d + "'", double19 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(intArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 10]"); org.junit.Assert.assertNotNull(intArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 104.04806581575652d + "'", double31 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[100, 10]"); org.junit.Assert.assertNotNull(intArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 104.04806581575652d + "'", double41 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(intArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertNotNull(intArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[]"); }
public void test1347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1347"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex67.exp(); org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex70 = complex69.negate(); org.apache.commons.math.complex.Complex complex71 = complex70.sinh(); double double72 = complex71.getArgument(); org.apache.commons.math.complex.Complex complex73 = complex68.subtract(complex71); org.apache.commons.math.complex.Complex complex74 = complex68.acos(); org.apache.commons.math.complex.Complex complex76 = new org.apache.commons.math.complex.Complex((double) 32); org.apache.commons.math.complex.Complex complex77 = complex74.add(complex76); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertNotNull(complex70); org.junit.Assert.assertNotNull(complex71); org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-3.141592653589793d) + "'", double72 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex73); org.junit.Assert.assertNotNull(complex74); org.junit.Assert.assertNotNull(complex77); }
public void test1348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1348"); // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.math.util.MathUtils.mulAndCheck(1655309493, (-680745013)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: arithmetic exception"); } catch (org.apache.commons.math.exception.MathArithmeticException e) { // Expected exception. } }
public void test1349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1349"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sin(); org.apache.commons.math.complex.Complex complex6 = complex4.pow((double) 1L); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); org.apache.commons.math.complex.Complex complex10 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z(); org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = complex6.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.sqrt1z(); org.apache.commons.math.complex.Complex complex17 = complex6.add(complex16); org.apache.commons.math.complex.Complex complex19 = complex17.pow(1.5707963267948966d); org.apache.commons.math.complex.Complex complex20 = complex1.pow(complex19); double double21 = complex1.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d); }
public void test1350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1350"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(35.159870523697315d, 1.401298464324817E-45d); org.apache.commons.math.complex.Complex complex4 = complex2.subtract((-0.8813735870195429d)); org.junit.Assert.assertNotNull(complex4); }
public void test1351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1351"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 4.440892098500626E-16d, (java.lang.Number) (-1.08346096E18f), false); }
public void test1352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1352"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow((double) 20); org.apache.commons.math.complex.Complex complex11 = complex7.exp(); org.apache.commons.math.complex.Complex complex12 = complex0.subtract(complex7); boolean boolean13 = complex7.isNaN(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.sin(); org.apache.commons.math.complex.Complex complex16 = complex14.sinh(); org.apache.commons.math.complex.Complex complex19 = complex16.createComplex(52.009614495783374d, 0.0d); org.apache.commons.math.complex.Complex complex20 = complex19.acos(); org.apache.commons.math.complex.Complex complex21 = complex20.tan(); boolean boolean22 = complex7.equals((java.lang.Object) complex20); double double23 = complex7.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d); }
public void test1353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1353"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex15.sqrt(); org.apache.commons.math.complex.Complex complex69 = complex68.tanh(); boolean boolean70 = complex68.isNaN(); boolean boolean71 = complex68.isInfinite(); org.apache.commons.math.complex.Complex complex72 = complex68.conjugate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex69); org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false); org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false); org.junit.Assert.assertNotNull(complex72); }
public void test1354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1354"); float float1 = org.apache.commons.math.util.MathUtils.indicator(6.8074502E8f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test1355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1355"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) (-50L)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); }
public void test1356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1356"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((float) 45, 5.0f, 470); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test1357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1357"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(4.9E-324d, 6880.817293923487d); org.apache.commons.math.complex.Complex complex3 = complex2.acos(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex2.getField(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); }
public void test1358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1358"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 702); org.junit.Assert.assertNotNull(complex1); }
public void test1359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1359"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sin(); double double4 = complex3.getImaginary(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex3); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex6); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex9.sinh(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = complex10.pow(complex12); org.apache.commons.math.complex.Complex complex16 = complex12.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex17 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex18 = complex17.sinh(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex20 = complex19.negate(); org.apache.commons.math.complex.Complex complex21 = complex20.sinh(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex23 = complex22.negate(); org.apache.commons.math.complex.Complex complex24 = complex21.pow(complex23); org.apache.commons.math.complex.Complex complex27 = complex23.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex28 = complex27.negate(); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex30 = complex29.sin(); double double31 = complex30.getArgument(); org.apache.commons.math.complex.Complex complex32 = complex27.multiply(complex30); org.apache.commons.math.complex.Complex complex33 = complex32.sqrt1z(); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex38 = complex36.subtract((double) (byte) 10); org.apache.commons.math.complex.Complex complex39 = complex34.multiply(complex38); org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.I; boolean boolean41 = complex34.equals((java.lang.Object) complex40); org.apache.commons.math.complex.Complex complex42 = complex40.log(); org.apache.commons.math.complex.Complex complex43 = complex33.add(complex42); org.apache.commons.math.complex.Complex complex44 = complex18.add(complex42); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); }
public void test1360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1360"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((float) 60, 0.0f, 1090401488); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test1361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1361"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); org.apache.commons.math.complex.Complex complex4 = complex0.tanh(); org.apache.commons.math.complex.Complex complex5 = complex4.cos(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex9 = complex6.pow((double) 20); org.apache.commons.math.complex.Complex complex10 = complex6.tanh(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test1362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1362"); long long1 = org.apache.commons.math.util.FastMath.round(7.930097512430751E14d); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 793009751243075L + "'", long1 == 793009751243075L); }
public void test1363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1363"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.complex.Complex complex18 = complex15.tan(); org.apache.commons.math.complex.Complex complex19 = complex15.cos(); org.apache.commons.math.complex.Complex complex20 = complex15.negate(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex22.sinh(); double double24 = complex23.getArgument(); org.apache.commons.math.complex.Complex complex25 = complex23.cos(); org.apache.commons.math.complex.Complex complex26 = complex23.sin(); org.apache.commons.math.complex.Complex complex27 = complex23.cos(); org.apache.commons.math.complex.Complex complex28 = complex15.add(complex23); org.apache.commons.math.complex.Complex complex29 = complex23.sin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-3.141592653589793d) + "'", double24 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); }
public void test1364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1364"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray14); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 101); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); double[] doubleArray30 = new double[] { (-1), (byte) 100 }; double double31 = org.apache.commons.math.util.MathUtils.distance1(doubleArray27, doubleArray30); double[] doubleArray33 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray30, 100); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray33); double double35 = org.apache.commons.math.util.MathUtils.distance(doubleArray8, doubleArray33); double[] doubleArray37 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray33, (-96.1585290151921d)); double[] doubleArray39 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray33, 30); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray33); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 142.83907028540895d + "'", double35 == 142.83907028540895d); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.9712982728807283, -97.12982728807283, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); }
public void test1365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1365"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complex5.add((double) (-680745036L)); org.apache.commons.math.complex.Complex complex8 = complex7.sinh(); org.apache.commons.math.complex.Complex complex9 = complex7.sinh(); org.apache.commons.math.complex.Complex complex10 = complex7.sin(); org.apache.commons.math.complex.Complex complex11 = complex10.log(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); }
public void test1366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1366"); long long2 = org.apache.commons.math.util.MathUtils.addAndCheck((long) 470, 52L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 522L + "'", long2 == 522L); }
public void test1367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1367"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sin(); org.apache.commons.math.complex.Complex complex6 = complex4.pow((double) 1L); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); org.apache.commons.math.complex.Complex complex10 = complex8.sqrt(); org.apache.commons.math.complex.Complex complex11 = complex10.sqrt1z(); org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = complex6.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex1.subtract(complex12); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField15 = complex12.getField(); org.apache.commons.math.complex.Complex complex16 = complexField15.getZero(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complexField15); org.junit.Assert.assertNotNull(complex16); }
public void test1368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1368"); double double1 = org.apache.commons.math.util.FastMath.exp((-96.1585290151921d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.7333308263086248E-42d + "'", double1 == 1.7333308263086248E-42d); }
public void test1369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1369"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); double double10 = complex8.getReal(); org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex8); boolean boolean12 = complex8.isNaN(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.8414709848078965d + "'", double10 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); }
public void test1370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1370"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 100); boolean boolean21 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray20); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); double[] doubleArray29 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray27, 0); boolean boolean30 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray29); double[] doubleArray34 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray36 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray34, (int) (short) 0); double double37 = org.apache.commons.math.util.MathUtils.distance(doubleArray29, doubleArray34); org.apache.commons.math.exception.util.Localizable localizable38 = null; org.apache.commons.math.exception.util.Localizable localizable40 = null; double[] doubleArray43 = new double[] { 2.718281828459045d, '#' }; int int44 = org.apache.commons.math.util.MathUtils.hash(doubleArray43); org.apache.commons.math.exception.util.Localizable localizable46 = null; org.apache.commons.math.exception.util.Localizable localizable47 = null; double[] doubleArray51 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray53 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray51, (int) (short) 0); double[] doubleArray56 = new double[] { (-1), (byte) 100 }; double double57 = org.apache.commons.math.util.MathUtils.distance1(doubleArray53, doubleArray56); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection58 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean61 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray56, orderDirection58, false, true); double[] doubleArray65 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray67 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray65, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection68 = null; double[] doubleArray71 = new double[] { 0.0f, 0.0f }; double[] doubleArray74 = new double[] { 0.0f, 0.0f }; double[] doubleArray77 = new double[] { 0.0f, 0.0f }; double[] doubleArray80 = new double[] { 0.0f, 0.0f }; double[] doubleArray83 = new double[] { 0.0f, 0.0f }; double[][] doubleArray84 = new double[][] { doubleArray71, doubleArray74, doubleArray77, doubleArray80, doubleArray83 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray67, orderDirection68, doubleArray84); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray56, doubleArray84); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException87 = new org.apache.commons.math.exception.MathArithmeticException(localizable47, (java.lang.Object[]) doubleArray84); org.apache.commons.math.exception.NullArgumentException nullArgumentException88 = new org.apache.commons.math.exception.NullArgumentException(localizable46, (java.lang.Object[]) doubleArray84); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException89 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) (-0.9999999999999999d), (java.lang.Object[]) doubleArray84); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray43, doubleArray84); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 1.07374182E9f, localizable40, (java.lang.Object[]) doubleArray84); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException92 = new org.apache.commons.math.exception.MathArithmeticException(localizable38, (java.lang.Object[]) doubleArray84); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray34, doubleArray84); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 2 != 3"); } catch (org.apache.commons.math.exception.DimensionMismatchException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]"); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[2.718281828459045, 35.0]"); org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-680745026) + "'", int44 == (-680745026)); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]"); org.junit.Assert.assertNotNull(doubleArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection58 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection58.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]"); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray74); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray80); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray83); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray84); }
public void test1371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1371"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex7.sinh(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex8.pow(complex10); org.apache.commons.math.complex.Complex complex12 = complex1.add(complex8); org.apache.commons.math.complex.Complex complex13 = complex12.acos(); org.apache.commons.math.complex.Complex complex14 = complex12.log(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); }
public void test1372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1372"); float[] floatArray0 = null; float[] floatArray1 = null; boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray0, floatArray1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test1373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1373"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex5.sqrt(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex8.sinh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = complex9.pow(complex11); org.apache.commons.math.complex.Complex complex15 = complex11.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.sin(); double double19 = complex18.getArgument(); org.apache.commons.math.complex.Complex complex20 = complex15.multiply(complex18); org.apache.commons.math.complex.Complex complex21 = complex18.sin(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex23 = complex21.add(complex22); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex26 = complex25.negate(); org.apache.commons.math.complex.Complex complex27 = complex26.sinh(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.negate(); org.apache.commons.math.complex.Complex complex30 = complex27.pow(complex29); org.apache.commons.math.complex.Complex complex33 = complex29.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex34 = complex33.negate(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex36 = complex35.sin(); double double37 = complex36.getArgument(); org.apache.commons.math.complex.Complex complex38 = complex33.multiply(complex36); org.apache.commons.math.complex.Complex complex39 = complex38.tanh(); org.apache.commons.math.complex.Complex complex40 = complex24.add(complex38); org.apache.commons.math.complex.Complex complex41 = complex21.divide(complex40); org.apache.commons.math.complex.Complex complex42 = complex40.acos(); org.apache.commons.math.complex.Complex complex43 = complex6.multiply(complex40); org.apache.commons.math.complex.Complex complex44 = complex6.asin(); org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.valueOf(6.80745024E8d); org.apache.commons.math.complex.Complex complex47 = complex46.sin(); org.apache.commons.math.complex.Complex complex48 = complex44.divide(complex47); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); }
public void test1374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1374"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray12 = new int[] { (byte) 100, 10 }; int[] intArray18 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double19 = org.apache.commons.math.util.MathUtils.distance(intArray12, intArray18); double double20 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray18); int[] intArray23 = new int[] { (byte) 100, 10 }; int[] intArray29 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double30 = org.apache.commons.math.util.MathUtils.distance(intArray23, intArray29); int[] intArray33 = new int[] { (byte) 100, 10 }; int[] intArray39 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double40 = org.apache.commons.math.util.MathUtils.distance(intArray33, intArray39); double double41 = org.apache.commons.math.util.MathUtils.distance(intArray29, intArray39); double double42 = org.apache.commons.math.util.MathUtils.distance(intArray18, intArray39); int[] intArray45 = new int[] { (byte) 100, 10 }; int[] intArray51 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double52 = org.apache.commons.math.util.MathUtils.distance(intArray45, intArray51); int[] intArray55 = new int[] { (byte) 100, 10 }; int[] intArray61 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double62 = org.apache.commons.math.util.MathUtils.distance(intArray55, intArray61); double double63 = org.apache.commons.math.util.MathUtils.distance(intArray51, intArray61); int[] intArray64 = org.apache.commons.math.util.MathUtils.copyOf(intArray51); int[] intArray67 = new int[] { (byte) 100, 10 }; int[] intArray73 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double74 = org.apache.commons.math.util.MathUtils.distance(intArray67, intArray73); int[] intArray77 = new int[] { (byte) 100, 10 }; int[] intArray83 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double84 = org.apache.commons.math.util.MathUtils.distance(intArray77, intArray83); double double85 = org.apache.commons.math.util.MathUtils.distance(intArray73, intArray83); int[] intArray86 = org.apache.commons.math.util.MathUtils.copyOf(intArray73); int int87 = org.apache.commons.math.util.MathUtils.distance1(intArray51, intArray73); int int88 = org.apache.commons.math.util.MathUtils.distanceInf(intArray39, intArray51); org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10]"); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 104.04806581575652d + "'", double19 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(intArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, 10]"); org.junit.Assert.assertNotNull(intArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 104.04806581575652d + "'", double30 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, 10]"); org.junit.Assert.assertNotNull(intArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 104.04806581575652d + "'", double40 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(intArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[100, 10]"); org.junit.Assert.assertNotNull(intArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 104.04806581575652d + "'", double52 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[100, 10]"); org.junit.Assert.assertNotNull(intArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 104.04806581575652d + "'", double62 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(intArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[100, 10]"); org.junit.Assert.assertNotNull(intArray73); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 104.04806581575652d + "'", double74 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[100, 10]"); org.junit.Assert.assertNotNull(intArray83); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 104.04806581575652d + "'", double84 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertNotNull(intArray86); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0); org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0); }
public void test1375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1375"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex4.sin(); org.apache.commons.math.complex.Complex complex7 = complex5.pow((double) 1L); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.sin(); double double10 = complex9.getImaginary(); org.apache.commons.math.complex.Complex complex11 = complex9.sqrt(); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex7.multiply(complex13); org.apache.commons.math.complex.Complex complex15 = complex14.sqrt1z(); org.apache.commons.math.complex.Complex complex17 = complex15.subtract(66.97680939587865d); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.sin(); double double20 = complex19.getImaginary(); org.apache.commons.math.complex.Complex complex21 = complex19.sqrt(); org.apache.commons.math.complex.Complex complex22 = complex21.sqrt1z(); org.apache.commons.math.complex.Complex complex23 = complex15.divide(complex22); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = complex24.negate(); org.apache.commons.math.complex.Complex complex27 = complex25.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.sin(); double double30 = complex29.getImaginary(); double double31 = complex29.getReal(); org.apache.commons.math.complex.Complex complex32 = complex27.multiply(complex29); org.apache.commons.math.complex.Complex complex33 = complex23.multiply(complex27); org.apache.commons.math.complex.Complex complex34 = complex1.multiply(complex27); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.8414709848078965d + "'", double31 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); }
public void test1376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1376"); org.apache.commons.math.util.MathUtils.checkFinite((double) 6.8074515E8f); }
public void test1377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1377"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex12.acos(); org.apache.commons.math.complex.Complex complex15 = complex13.multiply(6.931471805599453d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex15); }
public void test1378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1378"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((double) (-422604639), 4.312315229512478d); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test1379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1379"); double double2 = org.apache.commons.math.util.FastMath.pow(0.08726646259971647d, 103.77599757368887d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.2172490349785216E-110d + "'", double2 == 1.2172490349785216E-110d); }
public void test1380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1380"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getArgument(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow((double) 20); java.lang.String str7 = complex6.toString(); org.apache.commons.math.complex.Complex complex8 = complex1.add(complex6); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField9 = complex8.getField(); org.apache.commons.math.complex.Complex complex10 = complex8.asin(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex14 = complex13.negate(); org.apache.commons.math.complex.Complex complex16 = complex14.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.negate(); org.apache.commons.math.complex.Complex complex19 = complex14.pow(complex18); boolean boolean21 = complex19.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex22 = complex12.divide(complex19); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex24.sinh(); double double26 = complex25.getArgument(); org.apache.commons.math.complex.Complex complex27 = complex12.add(complex25); org.apache.commons.math.complex.Complex complex28 = complex25.acos(); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex30 = complex29.sin(); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex32 = complex31.negate(); org.apache.commons.math.complex.Complex complex33 = complex32.sinh(); org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex35 = complex34.negate(); org.apache.commons.math.complex.Complex complex36 = complex33.pow(complex35); org.apache.commons.math.complex.Complex complex39 = complex35.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex40 = complex39.negate(); org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex42 = complex41.sin(); double double43 = complex42.getArgument(); org.apache.commons.math.complex.Complex complex44 = complex39.multiply(complex42); org.apache.commons.math.complex.Complex complex45 = complex44.tanh(); boolean boolean46 = complex29.equals((java.lang.Object) complex44); org.apache.commons.math.complex.Complex complex47 = complex44.exp(); org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex49 = complex48.negate(); org.apache.commons.math.complex.Complex complex51 = complex48.pow((double) 20); java.lang.String str52 = complex51.toString(); double double53 = complex51.getReal(); org.apache.commons.math.complex.Complex complex54 = complex51.tan(); org.apache.commons.math.complex.Complex complex57 = complex51.createComplex((double) 35.000004f, 2.1513092806481256E16d); org.apache.commons.math.complex.Complex complex58 = complex57.asin(); org.apache.commons.math.complex.Complex complex59 = complex47.multiply(complex57); org.apache.commons.math.complex.Complex complex60 = complex25.subtract(complex57); org.apache.commons.math.complex.Complex complex61 = complex10.multiply(complex57); org.apache.commons.math.complex.Complex complex63 = complex57.subtract(3.3370113203410188E22d); org.apache.commons.math.complex.Complex complex64 = complex57.atan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(1.0, 0.0)" + "'", str7, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complexField9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-3.141592653589793d) + "'", double26 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(1.0, 0.0)" + "'", str52, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); org.junit.Assert.assertNotNull(complex59); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); }
public void test1381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1381"); double double2 = org.apache.commons.math.util.FastMath.scalb(8.079079671579246E12d, 2); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 3.2316318686316984E13d + "'", double2 == 3.2316318686316984E13d); }
public void test1382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1382"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); double double10 = complex8.getReal(); org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex8); org.apache.commons.math.complex.ComplexField complexField12 = complex8.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.8414709848078965d + "'", double10 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complexField12); }
public void test1383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1383"); float float2 = org.apache.commons.math.util.FastMath.copySign((float) 15, (float) 1079574528); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 15.0f + "'", float2 == 15.0f); }
public void test1384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1384"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); double double5 = complex4.getReal(); org.apache.commons.math.complex.Complex complex7 = complex4.divide(1.1176233018673575E37d); org.apache.commons.math.complex.Complex complex8 = complex4.asin(); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.sin(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex12.pow(complex16); boolean boolean19 = complex17.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex20 = complex10.divide(complex17); org.apache.commons.math.complex.Complex complex21 = complex10.sinh(); org.apache.commons.math.complex.Complex complex22 = complex10.atan(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.valueOf(0.0d, (double) 200.0f); org.apache.commons.math.complex.Complex complex26 = complex10.multiply(complex25); org.apache.commons.math.complex.Complex complex27 = complex4.add(complex26); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.5707963267948966d + "'", double5 == 1.5707963267948966d); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); }
public void test1385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1385"); float float1 = org.apache.commons.math.util.FastMath.ulp((float) 1077739520); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 128.0f + "'", float1 == 128.0f); }
public void test1386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1386"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); org.apache.commons.math.complex.Complex complex8 = complex5.createComplex((double) (-86L), 0.9919317346815598d); org.apache.commons.math.complex.Complex complex10 = complex8.pow(3.5553480614894135d); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex12.pow(complex16); boolean boolean19 = complex17.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex21 = complex20.atan(); org.apache.commons.math.complex.Complex complex22 = complex17.pow(complex20); org.apache.commons.math.complex.Complex complex23 = complex8.divide(complex17); org.apache.commons.math.complex.Complex complex24 = complex23.asin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); }
public void test1387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1387"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getArgument(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow((double) 20); java.lang.String str7 = complex6.toString(); org.apache.commons.math.complex.Complex complex8 = complex1.add(complex6); boolean boolean9 = complex1.isNaN(); double double10 = complex1.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(1.0, 0.0)" + "'", str7, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.8414709848078965d + "'", double10 == 0.8414709848078965d); }
public void test1388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1388"); long long1 = org.apache.commons.math.util.FastMath.round((double) 50L); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 50L + "'", long1 == 50L); }
public void test1389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1389"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(6.80745024E8d); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex3 = complex2.sin(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test1390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1390"); double double1 = org.apache.commons.math.util.FastMath.tan(6.931471805599453d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.7575041613250926d + "'", double1 == 0.7575041613250926d); }
public void test1391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1391"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.conjugate(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 10240.0f); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); }
public void test1392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1392"); double[] doubleArray2 = new double[] { 2.718281828459045d, '#' }; int int3 = org.apache.commons.math.util.MathUtils.hash(doubleArray2); double[] doubleArray10 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray10); double[] doubleArray13 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray10, 6); double[] doubleArray15 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray13, (-0.41036740004704136d)); boolean boolean16 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray2, doubleArray15); double double17 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray15); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray15); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.checkOrder(doubleArray15); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NonMonotonousSequenceException; message: points 2 and 3 are not strictly increasing (-0.002 >= -0.153)"); } catch (org.apache.commons.math.exception.NonMonotonousSequenceException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[2.718281828459045, 35.0]"); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-680745026) + "'", int3 == (-680745026)); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-0.053592757468830035, -0.04899909254293031, -0.0015312216419665723, -0.15312216419665722, -0.0, -0.15312216419665722]"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.22840366393601574d + "'", double17 == 0.22840366393601574d); }
public void test1393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1393"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((-0.4848096213879144d)); }
public void test1394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1394"); double double2 = org.apache.commons.math.util.FastMath.IEEEremainder(0.6081327619606964d, 0.10162629976008035d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-0.001625036599785662d) + "'", double2 == (-0.001625036599785662d)); }
public void test1395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1395"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex6 = complex4.subtract((double) 1.0f); org.apache.commons.math.complex.Complex complex7 = complex1.divide(complex6); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex8.sqrt1z(); boolean boolean11 = complex8.isNaN(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex13.sinh(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex14.pow(complex16); org.apache.commons.math.complex.Complex complex20 = complex16.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex21 = complex20.negate(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex23 = complex22.sin(); double double24 = complex23.getArgument(); org.apache.commons.math.complex.Complex complex25 = complex20.multiply(complex23); org.apache.commons.math.complex.Complex complex26 = complex8.multiply(complex20); org.apache.commons.math.complex.Complex complex27 = complex1.multiply(complex26); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); }
public void test1396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1396"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray12 = new int[] { (byte) 100, 10 }; int[] intArray18 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double19 = org.apache.commons.math.util.MathUtils.distance(intArray12, intArray18); int int20 = org.apache.commons.math.util.MathUtils.distance1(intArray2, intArray12); int[] intArray21 = org.apache.commons.math.util.MathUtils.copyOf(intArray12); int[] intArray23 = org.apache.commons.math.util.MathUtils.copyOf(intArray21, 260); int[] intArray28 = new int[] { 52, 6, 'a', 680745024 }; int[] intArray31 = new int[] { (byte) 100, 10 }; int[] intArray37 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double38 = org.apache.commons.math.util.MathUtils.distance(intArray31, intArray37); int[] intArray40 = org.apache.commons.math.util.MathUtils.copyOf(intArray37, (int) (byte) 10); int int41 = org.apache.commons.math.util.MathUtils.distanceInf(intArray28, intArray40); int[] intArray42 = org.apache.commons.math.util.MathUtils.copyOf(intArray28); int[] intArray45 = new int[] { (byte) 100, 10 }; int[] intArray51 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double52 = org.apache.commons.math.util.MathUtils.distance(intArray45, intArray51); int[] intArray55 = new int[] { (byte) 100, 10 }; int[] intArray61 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double62 = org.apache.commons.math.util.MathUtils.distance(intArray55, intArray61); double double63 = org.apache.commons.math.util.MathUtils.distance(intArray51, intArray61); int[] intArray64 = org.apache.commons.math.util.MathUtils.copyOf(intArray51); int[] intArray67 = new int[] { (byte) 100, 10 }; int[] intArray73 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double74 = org.apache.commons.math.util.MathUtils.distance(intArray67, intArray73); int[] intArray77 = new int[] { (byte) 100, 10 }; int[] intArray83 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double84 = org.apache.commons.math.util.MathUtils.distance(intArray77, intArray83); double double85 = org.apache.commons.math.util.MathUtils.distance(intArray73, intArray83); int[] intArray86 = org.apache.commons.math.util.MathUtils.copyOf(intArray73); double double87 = org.apache.commons.math.util.MathUtils.distance(intArray51, intArray86); int[] intArray88 = org.apache.commons.math.util.MathUtils.copyOf(intArray86); int[] intArray89 = org.apache.commons.math.util.MathUtils.copyOf(intArray86); int int90 = org.apache.commons.math.util.MathUtils.distanceInf(intArray42, intArray86); int int91 = org.apache.commons.math.util.MathUtils.distanceInf(intArray21, intArray86); org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10]"); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 104.04806581575652d + "'", double19 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(intArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100, 10]"); org.junit.Assert.assertNotNull(intArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[52, 6, 97, 680745024]"); org.junit.Assert.assertNotNull(intArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[100, 10]"); org.junit.Assert.assertNotNull(intArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 104.04806581575652d + "'", double38 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int41 + "' != '" + 680745023 + "'", int41 == 680745023); org.junit.Assert.assertNotNull(intArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[52, 6, 97, 680745024]"); org.junit.Assert.assertNotNull(intArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[100, 10]"); org.junit.Assert.assertNotNull(intArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double52 + "' != '" + 104.04806581575652d + "'", double52 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[100, 10]"); org.junit.Assert.assertNotNull(intArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double62 + "' != '" + 104.04806581575652d + "'", double62 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double63 + "' != '" + 0.0d + "'", double63 == 0.0d); org.junit.Assert.assertNotNull(intArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[100, 10]"); org.junit.Assert.assertNotNull(intArray73); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double74 + "' != '" + 104.04806581575652d + "'", double74 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[100, 10]"); org.junit.Assert.assertNotNull(intArray83); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double84 + "' != '" + 104.04806581575652d + "'", double84 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double85 + "' != '" + 0.0d + "'", double85 == 0.0d); org.junit.Assert.assertNotNull(intArray86); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.0d + "'", double87 == 0.0d); org.junit.Assert.assertNotNull(intArray88); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray89); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + int90 + "' != '" + 680745023 + "'", int90 == 680745023); org.junit.Assert.assertTrue("'" + int91 + "' != '" + 101 + "'", int91 == 101); }
public void test1397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1397"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex4.acos(); org.apache.commons.math.complex.Complex complex6 = complex5.sqrt1z(); org.apache.commons.math.complex.ComplexField complexField7 = complex6.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complexField7); }
public void test1398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1398"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); org.apache.commons.math.complex.Complex complex5 = complex2.createComplex(52.009614495783374d, 0.0d); org.apache.commons.math.complex.Complex complex6 = complex5.acos(); org.apache.commons.math.complex.ComplexField complexField7 = complex5.getField(); org.apache.commons.math.complex.Complex complex8 = complexField7.getZero(); org.apache.commons.math.complex.Complex complex9 = complexField7.getZero(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complexField7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); }
public void test1399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1399"); float float1 = org.apache.commons.math.util.FastMath.signum((-0.99999994f)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + (-1.0f) + "'", float1 == (-1.0f)); }
public void test1400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1400"); float float2 = org.apache.commons.math.util.FastMath.copySign(35.000004f, (float) 126); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 35.000004f + "'", float2 == 35.000004f); }
public void test1401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1401"); double double2 = org.apache.commons.math.util.MathUtils.log((-0.386920842645329d), 1.1557864799754072d); org.junit.Assert.assertTrue(Double.isNaN(double2)); }
public void test1402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1402"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.complex.Complex complex18 = complex15.exp(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex20 = complex19.negate(); org.apache.commons.math.complex.Complex complex22 = complex19.pow((double) 20); java.lang.String str23 = complex22.toString(); double double24 = complex22.getReal(); org.apache.commons.math.complex.Complex complex25 = complex22.tan(); org.apache.commons.math.complex.Complex complex28 = complex22.createComplex((double) 35.000004f, 2.1513092806481256E16d); org.apache.commons.math.complex.Complex complex29 = complex28.asin(); org.apache.commons.math.complex.Complex complex30 = complex18.multiply(complex28); org.apache.commons.math.complex.Complex complex31 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex32 = complex28.divide(complex31); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(1.0, 0.0)" + "'", str23, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0d + "'", double24 == 1.0d); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); }
public void test1403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1403"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); double double10 = complex8.getReal(); org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex8); org.apache.commons.math.complex.Complex complex12 = complex0.conjugate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.8414709848078965d + "'", double10 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test1404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1404"); double double1 = org.apache.commons.math.util.FastMath.log(103.77599757368887d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.642234706744635d + "'", double1 == 4.642234706744635d); }
public void test1405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1405"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); double double5 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.tan(); org.apache.commons.math.complex.Complex complex7 = complex6.tan(); org.apache.commons.math.complex.Complex complex9 = complex7.pow(0.8414709848078965d); org.apache.commons.math.complex.Complex complex10 = complex7.asin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.14168768474935d + "'", double5 == 2.14168768474935d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test1406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1406"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(101.00495037373169d); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex1.getField(); org.apache.commons.math.complex.Complex complex5 = complex1.createComplex((double) 29.000002f, (double) 680745118L); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex5); }
public void test1407() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1407"); int int3 = org.apache.commons.math.util.MathUtils.compareTo((-0.2353039286520994d), 3.141592653589793d, 202.0d); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0); }
public void test1408() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1408"); float float2 = org.apache.commons.math.util.FastMath.max((-1.98363951E18f), (float) 13L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 13.0f + "'", float2 == 13.0f); }
public void test1409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1409"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.cosh(); java.lang.Object obj4 = complex2.readResolve(); double double5 = complex2.abs(); org.apache.commons.math.complex.Complex complex7 = complex2.pow(Double.NEGATIVE_INFINITY); org.apache.commons.math.complex.Complex complex8 = complex2.exp(); double double9 = complex8.getArgument(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(obj4); org.junit.Assert.assertEquals(obj4.toString(), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "(-10.0, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "(-10.0, -0.0)"); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-0.0d) + "'", double9 == (-0.0d)); }
public void test1410() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1410"); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection3 = null; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException5 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (-2.356194490192345d), (java.lang.Number) 4.932424148660941d, 1219337025, orderDirection3, false); boolean boolean6 = nonMonotonousSequenceException5.getStrict(); java.lang.Number number7 = nonMonotonousSequenceException5.getArgument(); java.lang.Throwable[] throwableArray8 = nonMonotonousSequenceException5.getSuppressed(); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertEquals("'" + number7 + "' != '" + (-2.356194490192345d) + "'", number7, (-2.356194490192345d)); org.junit.Assert.assertNotNull(throwableArray8); }
public void test1411() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1411"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex7 = complex4.subtract(complex6); org.apache.commons.math.exception.util.Localizable localizable8 = null; double[] doubleArray15 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray15); double[] doubleArray18 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray15, 6); double[][] doubleArray19 = new double[][] {}; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray15, doubleArray19); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex7, localizable8, (java.lang.Object[]) doubleArray19); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException22 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable1, (java.lang.Number) (-1.00438794200020915E18d), (java.lang.Object[]) doubleArray19); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException23 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray19); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 1.0, 32.0, 35.0, 100.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray19); }
public void test1412() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1412"); int int2 = org.apache.commons.math.util.MathUtils.addAndCheck(751914122, 806668788); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1558582910 + "'", int2 == 1558582910); }
public void test1413() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1413"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex6 = complex4.subtract(0.0d); org.apache.commons.math.complex.Complex complex8 = complex4.multiply((double) 10.0f); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField9 = complex8.getField(); org.apache.commons.math.complex.Complex complex10 = complexField9.getZero(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complexField9); org.junit.Assert.assertNotNull(complex10); }
public void test1414() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1414"); double double1 = org.apache.commons.math.util.FastMath.toDegrees((double) (-1944488865)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.114110052746837E11d) + "'", double1 == (-1.114110052746837E11d)); }
public void test1415() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1415"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex4 = complex1.pow(35.0d); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex6.sinh(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow(complex9); org.apache.commons.math.complex.Complex complex12 = complex9.multiply(10.000000000000002d); org.apache.commons.math.complex.Complex complex13 = complex4.subtract(complex9); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex17 = complex15.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex15.pow(complex19); org.apache.commons.math.complex.Complex complex21 = complex20.cos(); org.apache.commons.math.complex.Complex complex23 = complex21.multiply((double) 152L); org.apache.commons.math.complex.Complex complex24 = complex4.subtract(complex21); org.apache.commons.math.exception.util.Localizable localizable25 = null; org.apache.commons.math.exception.util.Localizable localizable26 = null; double[] doubleArray30 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray32 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray30, (int) (short) 0); double[] doubleArray34 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray32, 0); double[] doubleArray41 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray41); double[] doubleArray44 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray41, 6); double[][] doubleArray45 = new double[][] {}; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray41, doubleArray45); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray34, doubleArray45); org.apache.commons.math.exception.NullArgumentException nullArgumentException48 = new org.apache.commons.math.exception.NullArgumentException(localizable26, (java.lang.Object[]) doubleArray45); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex4, localizable25, (java.lang.Object[]) doubleArray45); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 1.0, 32.0, 35.0, 100.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray45); }
public void test1416() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1416"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; org.apache.commons.math.exception.util.Localizable localizable6 = null; double[] doubleArray10 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray12 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray10, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection13 = null; double[] doubleArray16 = new double[] { 0.0f, 0.0f }; double[] doubleArray19 = new double[] { 0.0f, 0.0f }; double[] doubleArray22 = new double[] { 0.0f, 0.0f }; double[] doubleArray25 = new double[] { 0.0f, 0.0f }; double[] doubleArray28 = new double[] { 0.0f, 0.0f }; double[][] doubleArray29 = new double[][] { doubleArray16, doubleArray19, doubleArray22, doubleArray25, doubleArray28 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray12, orderDirection13, doubleArray29); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable6, (java.lang.Object[]) doubleArray29); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException32 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable3, (java.lang.Number) 10240.0f, (java.lang.Object[]) doubleArray29); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException33 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable1, (java.lang.Number) (-0.9999999999999999d), (java.lang.Object[]) doubleArray29); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException34 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray29); org.apache.commons.math.exception.util.Localizable localizable35 = null; java.lang.Number number37 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException39 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable35, (java.lang.Number) 318997151, number37, false); mathArithmeticException34.addSuppressed((java.lang.Throwable) numberIsTooSmallException39); java.lang.Number number41 = numberIsTooSmallException39.getArgument(); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals("'" + number41 + "' != '" + 318997151 + "'", number41, 318997151); }
public void test1417() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1417"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex3 = complex2.atan(); org.apache.commons.math.complex.Complex complex5 = complex2.multiply((-1.226409130967562d)); org.apache.commons.math.complex.Complex complex8 = complex5.createComplex((double) 1.044974E18f, 0.0d); org.apache.commons.math.complex.Complex complex9 = complex8.log(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); }
public void test1418() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1418"); long long2 = org.apache.commons.math.util.MathUtils.mulAndCheck((long) 7311616, (long) 1715); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 12539421440L + "'", long2 == 12539421440L); }
public void test1419() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1419"); java.math.BigInteger bigInteger0 = null; // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger2 = org.apache.commons.math.util.MathUtils.pow(bigInteger0, 680745023); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test1420() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1420"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray12 = new int[] { (byte) 100, 10 }; int[] intArray18 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double19 = org.apache.commons.math.util.MathUtils.distance(intArray12, intArray18); double double20 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray18); int[] intArray21 = org.apache.commons.math.util.MathUtils.copyOf(intArray8); int[] intArray24 = new int[] { (byte) 100, 10 }; int[] intArray30 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double31 = org.apache.commons.math.util.MathUtils.distance(intArray24, intArray30); int[] intArray34 = new int[] { (byte) 100, 10 }; int[] intArray40 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double41 = org.apache.commons.math.util.MathUtils.distance(intArray34, intArray40); double double42 = org.apache.commons.math.util.MathUtils.distance(intArray30, intArray40); int[] intArray43 = org.apache.commons.math.util.MathUtils.copyOf(intArray30); double double44 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray43); int[] intArray45 = org.apache.commons.math.util.MathUtils.copyOf(intArray43); int[] intArray46 = org.apache.commons.math.util.MathUtils.copyOf(intArray43); // The following exception was thrown during execution in test generation try { int[] intArray48 = org.apache.commons.math.util.MathUtils.copyOf(intArray46, (-680745023)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { // Expected exception. } org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10]"); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 104.04806581575652d + "'", double19 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(intArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 10]"); org.junit.Assert.assertNotNull(intArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 104.04806581575652d + "'", double31 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[100, 10]"); org.junit.Assert.assertNotNull(intArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 104.04806581575652d + "'", double41 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(intArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertNotNull(intArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[-1, 35, 0, 1, 0]"); }
public void test1421() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1421"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-1.5366842614534395d), 3.5553480614894135d); }
public void test1422() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1422"); double double2 = org.apache.commons.math.util.FastMath.max(1.9155040003582885E22d, 0.936739795201828d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.9155040003582885E22d + "'", double2 == 1.9155040003582885E22d); }
public void test1423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1423"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 1655309493L, 4.17897694729317d); java.lang.String str3 = complex2.toString(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(1.655309493E9, 4.17897694729317)" + "'", str3, "(1.655309493E9, 4.17897694729317)"); }
public void test1424() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1424"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); double double18 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex15.cos(); double double20 = complex19.abs(); java.lang.Class<?> wildcardClass21 = complex19.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2.356194490192345d) + "'", double18 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.155786479975407d + "'", double20 == 1.155786479975407d); org.junit.Assert.assertNotNull(wildcardClass21); }
public void test1425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1425"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray9 = null; double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); boolean boolean16 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray13); double[] doubleArray17 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13); double[] doubleArray21 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray23 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray21, (int) (short) 0); double[] doubleArray26 = new double[] { (-1), (byte) 100 }; double double27 = org.apache.commons.math.util.MathUtils.distance1(doubleArray23, doubleArray26); boolean boolean28 = org.apache.commons.math.util.MathUtils.equals(doubleArray17, doubleArray23); double[] doubleArray30 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 101); boolean boolean31 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray8, doubleArray17); double[] doubleArray33 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray17, 1.1488462128956858d); double[] doubleArray35 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray33, 6880.817293923487d); double[] doubleArray39 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray41 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray39, (int) (short) 0); double[] doubleArray44 = new double[] { (-1), (byte) 100 }; double double45 = org.apache.commons.math.util.MathUtils.distance1(doubleArray41, doubleArray44); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection46 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean49 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray44, orderDirection46, false, true); double[] doubleArray53 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray55 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray53, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection56 = null; double[] doubleArray59 = new double[] { 0.0f, 0.0f }; double[] doubleArray62 = new double[] { 0.0f, 0.0f }; double[] doubleArray65 = new double[] { 0.0f, 0.0f }; double[] doubleArray68 = new double[] { 0.0f, 0.0f }; double[] doubleArray71 = new double[] { 0.0f, 0.0f }; double[][] doubleArray72 = new double[][] { doubleArray59, doubleArray62, doubleArray65, doubleArray68, doubleArray71 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray55, orderDirection56, doubleArray72); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray44, doubleArray72); double[] doubleArray76 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray44, 152); double[] doubleArray77 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray76); double[] doubleArray78 = null; double[] doubleArray82 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray84 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray82, (int) (short) 0); boolean boolean85 = org.apache.commons.math.util.MathUtils.equals(doubleArray78, doubleArray82); double[] doubleArray86 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray82); double[] doubleArray88 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray82, 26091.090931580457d); boolean boolean89 = org.apache.commons.math.util.MathUtils.equals(doubleArray76, doubleArray82); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray76); boolean boolean91 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray35, doubleArray76); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.1722920539751895, -0.011722920539751895, -0.011722920539751895]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[7021.242136656621, -70.2124213665662, -70.2124213665662]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection46 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection46.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]"); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray68); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray71); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray72); org.junit.Assert.assertNotNull(doubleArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray77); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray84); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]"); org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false); org.junit.Assert.assertNotNull(doubleArray86); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray88); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[26623.5621750821, -266.235621750821, -266.235621750821]"); org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false); org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false); }
public void test1426() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1426"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 0.0d); java.lang.Number number2 = notPositiveException1.getArgument(); java.lang.Throwable throwable3 = notPositiveException1.getException(); org.junit.Assert.assertEquals("'" + number2 + "' != '" + 0.0d + "'", number2, 0.0d); org.junit.Assert.assertNotNull(throwable3); org.junit.Assert.assertEquals(throwable3.getLocalizedMessage(), "0 is smaller than the minimum (0)"); org.junit.Assert.assertEquals(throwable3.getMessage(), "0 is smaller than the minimum (0)"); org.junit.Assert.assertEquals(throwable3.toString(), "org.apache.commons.math.exception.NotPositiveException: 0 is smaller than the minimum (0)"); }
public void test1427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1427"); double double3 = org.apache.commons.math.util.MathUtils.reduce(37.83853493797554d, (double) (-422604639L), 345.3794070622669d); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 4.226043314591279E8d + "'", double3 == 4.226043314591279E8d); }
public void test1428() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1428"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); org.apache.commons.math.complex.Complex complex5 = complex2.createComplex(52.009614495783374d, 0.0d); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.sin(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex11 = complex9.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex9.pow(complex13); boolean boolean16 = complex14.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex17 = complex7.divide(complex14); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex19.sinh(); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex7.add(complex20); org.apache.commons.math.complex.Complex complex23 = complex20.acos(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = complex24.negate(); org.apache.commons.math.complex.Complex complex26 = complex25.sinh(); double double27 = complex26.getArgument(); org.apache.commons.math.complex.Complex complex28 = complex26.cos(); org.apache.commons.math.complex.Complex complex29 = complex28.acos(); org.apache.commons.math.complex.Complex complex30 = complex28.acos(); org.apache.commons.math.complex.Complex complex31 = complex28.asin(); org.apache.commons.math.complex.Complex complex32 = complex23.pow(complex31); org.apache.commons.math.complex.Complex complex33 = complex32.acos(); org.apache.commons.math.complex.Complex complex34 = complex2.divide(complex33); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-3.141592653589793d) + "'", double21 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-3.141592653589793d) + "'", double27 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); }
public void test1429() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1429"); double double8 = org.apache.commons.math.util.MathUtils.linearCombination(4.952536192948688E19d, (double) 1225.0f, (double) 2120811457L, 702.0d, (double) 1.4E-45f, 1.83579396E8d, 0.0d, 0.0d); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 6.066856836511023E22d + "'", double8 == 6.066856836511023E22d); }
public void test1430() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1430"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(0.0d, (double) 200.0f); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex5.sinh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex6.pow(complex8); org.apache.commons.math.complex.Complex complex12 = complex8.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.sin(); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex12.multiply(complex15); org.apache.commons.math.complex.Complex complex18 = complex17.tanh(); org.apache.commons.math.complex.Complex complex19 = complex3.add(complex17); org.apache.commons.math.complex.Complex complex20 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex21 = complex20.sin(); org.apache.commons.math.complex.Complex complex22 = complex2.subtract(complex20); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test1431() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1431"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complex5.add((double) (-680745036L)); org.apache.commons.math.complex.Complex complex8 = complex5.log(); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); }
public void test1432() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1432"); float float2 = org.apache.commons.math.util.MathUtils.round(50.0f, 0); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 50.0f + "'", float2 == 50.0f); }
public void test1433() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1433"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex3 = complex0.pow(1.7669158577947987E48d); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.sin(); org.apache.commons.math.complex.Complex complex6 = complex4.sinh(); org.apache.commons.math.complex.Complex complex8 = complex6.pow(2.820129412E9d); org.apache.commons.math.complex.Complex complex9 = complex3.divide(complex8); org.apache.commons.math.complex.Complex complex11 = complex3.multiply(244.41531426499594d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); }
public void test1434() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1434"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals(95.99999999999999d, (double) 11881242L, 817456299); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test1435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1435"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); double double18 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex15.tanh(); org.apache.commons.math.complex.Complex complex20 = complex15.sin(); org.apache.commons.math.complex.Complex complex21 = complex15.conjugate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2.356194490192345d) + "'", double18 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); }
public void test1436() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1436"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 1.048576E8f, (java.lang.Number) 60.999996f, false); }
public void test1437() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1437"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex3 = complex2.conjugate(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex2.atan(); boolean boolean6 = complex2.isNaN(); org.apache.commons.math.complex.Complex complex9 = complex2.createComplex(4.642234706744635d, (-0.5144017162404242d)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(complex9); }
public void test1438() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1438"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); double double18 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex15.tanh(); org.apache.commons.math.complex.Complex complex20 = complex15.sin(); org.apache.commons.math.complex.Complex complex21 = complex20.sqrt1z(); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex23 = complex22.negate(); org.apache.commons.math.complex.Complex complex25 = complex23.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex27 = complex26.sin(); double double28 = complex27.getImaginary(); double double29 = complex27.getReal(); org.apache.commons.math.complex.Complex complex30 = complex25.multiply(complex27); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex33 = complex32.negate(); org.apache.commons.math.complex.Complex complex34 = complex33.sinh(); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex36 = complex35.negate(); org.apache.commons.math.complex.Complex complex37 = complex34.pow(complex36); org.apache.commons.math.complex.Complex complex40 = complex36.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex41 = complex40.negate(); org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex43 = complex42.sin(); double double44 = complex43.getArgument(); org.apache.commons.math.complex.Complex complex45 = complex40.multiply(complex43); org.apache.commons.math.complex.Complex complex46 = complex45.tanh(); org.apache.commons.math.complex.Complex complex47 = complex31.add(complex45); org.apache.commons.math.complex.Complex complex48 = complex31.sinh(); org.apache.commons.math.complex.Complex complex49 = complex30.subtract(complex31); org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex51 = complex50.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField52 = complex50.getField(); org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex54 = complex53.sqrt(); org.apache.commons.math.complex.Complex complex55 = complex53.log(); org.apache.commons.math.complex.Complex complex56 = complex50.add(complex53); org.apache.commons.math.complex.Complex complex57 = complex49.add(complex50); org.apache.commons.math.complex.Complex complex58 = complex21.subtract(complex49); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2.356194490192345d) + "'", double18 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.8414709848078965d + "'", double29 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex46); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertNotNull(complex51); org.junit.Assert.assertNotNull(complexField52); org.junit.Assert.assertNotNull(complex53); org.junit.Assert.assertNotNull(complex54); org.junit.Assert.assertNotNull(complex55); org.junit.Assert.assertNotNull(complex56); org.junit.Assert.assertNotNull(complex57); org.junit.Assert.assertNotNull(complex58); }
public void test1439() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1439"); double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientLog(126, (-335318313)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test1440() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1440"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(2.806462798927087E-16d, 2.3721732428803258E211d); org.junit.Assert.assertNotNull(complex2); }
public void test1441() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1441"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.complex.Complex complex18 = complex15.tan(); org.apache.commons.math.complex.Complex complex20 = complex18.subtract((double) 1.0f); boolean boolean21 = complex20.isNaN(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); }
public void test1442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1442"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException5 = new org.apache.commons.math.exception.NumberIsTooLargeException((java.lang.Number) (-86L), (java.lang.Number) 22025.465794806718d, true); java.lang.Throwable[] throwableArray6 = numberIsTooLargeException5.getSuppressed(); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException7 = new org.apache.commons.math.exception.MathArithmeticException(localizable1, (java.lang.Object[]) throwableArray6); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException8 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) throwableArray6); org.junit.Assert.assertNotNull(throwableArray6); }
public void test1443() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1443"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); double double18 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex19 = complex15.sqrt1z(); org.apache.commons.math.complex.Complex complex20 = complex15.acos(); org.apache.commons.math.complex.Complex complex22 = complex15.add((double) 152.0f); org.apache.commons.math.complex.Complex complex25 = complex15.createComplex((-0.34237525682418735d), (double) 4); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-2.356194490192345d) + "'", double18 == (-2.356194490192345d)); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex25); }
public void test1444() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1444"); double double1 = org.apache.commons.math.util.MathUtils.sinh(Double.NEGATIVE_INFINITY); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.NEGATIVE_INFINITY + "'", double1 == Double.NEGATIVE_INFINITY); }
public void test1445() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1445"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((-5.3690505934197095d)); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex2.tanh(); double double5 = complex4.abs(); org.apache.commons.math.complex.Complex complex6 = complex1.add(complex4); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.761594155955765d + "'", double5 == 0.761594155955765d); org.junit.Assert.assertNotNull(complex6); }
public void test1446() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1446"); double double2 = org.apache.commons.math.util.MathUtils.round((double) (-0.9999999f), 49); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-0.9999998807907104d) + "'", double2 == (-0.9999998807907104d)); }
public void test1447() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1447"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(0.9811373878275512d); org.junit.Assert.assertNotNull(complex1); }
public void test1448() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1448"); long long2 = org.apache.commons.math.util.MathUtils.pow(50L, (long) 318997151); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test1449() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1449"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(74.61303542254257d); }
public void test1450() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1450"); // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.math.util.MathUtils.lcm(680745024, (-817456299)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: arithmetic exception"); } catch (org.apache.commons.math.exception.MathArithmeticException e) { // Expected exception. } }
public void test1451() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1451"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField9 = complex8.getField(); org.apache.commons.math.complex.Complex complex10 = complexField9.getZero(); org.apache.commons.math.complex.Complex complex11 = complexField9.getOne(); org.apache.commons.math.complex.Complex complex12 = complexField9.getZero(); org.apache.commons.math.complex.Complex complex13 = complexField9.getZero(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complexField9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test1452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1452"); long long2 = org.apache.commons.math.util.MathUtils.mulAndCheck((-1944488868L), (long) (-1274102657)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 2477478433225722276L + "'", long2 == 2477478433225722276L); }
public void test1453() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1453"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.valueOf((double) '4'); org.apache.commons.math.complex.Complex complex5 = complex0.add(complex4); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test1454() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1454"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complex5.asin(); org.apache.commons.math.complex.Complex complex7 = complex6.cos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test1455() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1455"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex4 = complex1.pow((double) 20); java.lang.String str5 = complex4.toString(); double double6 = complex4.getReal(); org.apache.commons.math.complex.Complex complex7 = complex4.tan(); org.apache.commons.math.complex.Complex complex8 = complex4.tanh(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex12 = complex10.divide((double) 1079574528); org.apache.commons.math.complex.Complex complex14 = complex10.divide((double) (-680745024)); boolean boolean15 = complex14.isInfinite(); org.apache.commons.math.complex.Complex complex16 = complex8.subtract(complex14); org.apache.commons.math.exception.util.Localizable localizable17 = null; org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray21 = new double[] { 2.718281828459045d, '#' }; int int22 = org.apache.commons.math.util.MathUtils.hash(doubleArray21); org.apache.commons.math.exception.util.Localizable localizable24 = null; org.apache.commons.math.exception.util.Localizable localizable25 = null; double[] doubleArray29 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray31 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray29, (int) (short) 0); double[] doubleArray34 = new double[] { (-1), (byte) 100 }; double double35 = org.apache.commons.math.util.MathUtils.distance1(doubleArray31, doubleArray34); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection36 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean39 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray34, orderDirection36, false, true); double[] doubleArray43 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray45 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray43, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection46 = null; double[] doubleArray49 = new double[] { 0.0f, 0.0f }; double[] doubleArray52 = new double[] { 0.0f, 0.0f }; double[] doubleArray55 = new double[] { 0.0f, 0.0f }; double[] doubleArray58 = new double[] { 0.0f, 0.0f }; double[] doubleArray61 = new double[] { 0.0f, 0.0f }; double[][] doubleArray62 = new double[][] { doubleArray49, doubleArray52, doubleArray55, doubleArray58, doubleArray61 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray45, orderDirection46, doubleArray62); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray34, doubleArray62); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException65 = new org.apache.commons.math.exception.MathArithmeticException(localizable25, (java.lang.Object[]) doubleArray62); org.apache.commons.math.exception.NullArgumentException nullArgumentException66 = new org.apache.commons.math.exception.NullArgumentException(localizable24, (java.lang.Object[]) doubleArray62); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException67 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) (-0.9999999999999999d), (java.lang.Object[]) doubleArray62); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray21, doubleArray62); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException69 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable18, (java.lang.Object[]) doubleArray62); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex16, localizable17, (java.lang.Object[]) doubleArray62); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException71 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) doubleArray62); java.lang.Throwable[] throwableArray72 = mathIllegalArgumentException71.getSuppressed(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(1.0, 0.0)" + "'", str5, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[2.718281828459045, 35.0]"); org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-680745026) + "'", int22 == (-680745026)); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection36 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection36.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]"); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray62); org.junit.Assert.assertNotNull(throwableArray72); }
public void test1456() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1456"); double double1 = org.apache.commons.math.util.FastMath.atan((double) 1015); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.569811105438792d + "'", double1 == 1.569811105438792d); }
public void test1457() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1457"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.sin(); double double6 = complex5.getImaginary(); double double7 = complex5.getReal(); org.apache.commons.math.complex.Complex complex8 = complex3.multiply(complex5); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.sin(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex12.pow(complex16); boolean boolean19 = complex17.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex20 = complex10.divide(complex17); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex22.sinh(); double double24 = complex23.getArgument(); org.apache.commons.math.complex.Complex complex25 = complex10.add(complex23); org.apache.commons.math.complex.Complex complex26 = complex3.divide(complex25); org.apache.commons.math.complex.Complex complex27 = complex25.atan(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.sin(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex31 = complex30.sqrt(); org.apache.commons.math.complex.Complex complex32 = complex31.sin(); org.apache.commons.math.complex.Complex complex34 = complex32.pow((double) 1L); org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex36 = complex35.sin(); double double37 = complex36.getImaginary(); org.apache.commons.math.complex.Complex complex38 = complex36.sqrt(); org.apache.commons.math.complex.Complex complex39 = complex38.sqrt1z(); org.apache.commons.math.complex.Complex complex40 = complex39.negate(); org.apache.commons.math.complex.Complex complex41 = complex34.multiply(complex40); org.apache.commons.math.complex.Complex complex42 = complex29.subtract(complex40); org.apache.commons.math.complex.Complex complex43 = complex27.multiply(complex40); org.apache.commons.math.complex.Complex complex45 = complex40.subtract(95.99999999999999d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.8414709848078965d + "'", double7 == 0.8414709848078965d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-3.141592653589793d) + "'", double24 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex45); }
public void test1458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1458"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) (-2.2085588309729804E71d), (java.lang.Number) 0.017453292519943295d, true); }
public void test1459() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1459"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 9.223372E18f, (double) (-50L)); }
public void test1460() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1460"); // The following exception was thrown during execution in test generation try { double double1 = org.apache.commons.math.util.MathUtils.factorialDouble((-335318313)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: must have n >= 0 for n!, got n = -335,318,313"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test1461() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1461"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(0.988883962592342d); }
public void test1462() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1462"); double double2 = org.apache.commons.math.util.MathUtils.normalizeAngle(0.45643598791285667d, 0.9234560495448352d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.45643598791285667d + "'", double2 == 0.45643598791285667d); }
public void test1463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1463"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex8 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex9 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex10 = complexField4.getOne(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test1464() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1464"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, 0); double[] doubleArray11 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray13 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray11, (int) (short) 0); double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, 0); double double16 = org.apache.commons.math.util.MathUtils.distance(doubleArray5, doubleArray13); int int17 = org.apache.commons.math.util.MathUtils.hash(doubleArray13); double[] doubleArray21 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray23 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray21, (int) (short) 0); double[] doubleArray25 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray23, 0); double[] doubleArray32 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray32); double[] doubleArray35 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray32, 6); double[][] doubleArray36 = new double[][] {}; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray32, doubleArray36); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray25, doubleArray36); double[] doubleArray42 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray44 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray42, (int) (short) 0); double[] doubleArray46 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray44, 0); double[] doubleArray48 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray44, 1028); boolean boolean49 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray25, doubleArray44); // The following exception was thrown during execution in test generation try { double double50 = org.apache.commons.math.util.MathUtils.linearCombination(doubleArray13, doubleArray44); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 1.0, 32.0, 35.0, 100.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true); }
public void test1465() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1465"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sin(); double double4 = complex3.getImaginary(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex3); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex6); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex10 = complex6.multiply(complex9); org.apache.commons.math.complex.Complex complex11 = complex6.sqrt1z(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply(2.806462798927087E-16d); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); }
public void test1466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1466"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) (-2.0452919197856156E14d)); }
public void test1467() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1467"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex19 = complex17.add(2.961927181208049E174d); org.apache.commons.math.complex.ComplexField complexField20 = complex19.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complexField20); }
public void test1468() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1468"); double double1 = org.apache.commons.math.util.MathUtils.indicator((double) 1368L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test1469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1469"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex12.acos(); org.apache.commons.math.complex.ComplexField complexField14 = complex13.getField(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complexField14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); }
public void test1470() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1470"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex3 = complex0.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex4.atan(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList7 = complex4.nthRoot((-1990079166)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -1,990,079,166"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test1471() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1471"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.exp(); double double4 = complex3.getArgument(); org.apache.commons.math.complex.Complex complex5 = complex3.acos(); org.apache.commons.math.complex.Complex complex7 = complex5.divide(8.272729129790584E26d); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex12 = complex10.subtract((double) (byte) 10); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex12); org.apache.commons.math.complex.Complex complex14 = complex12.acos(); org.apache.commons.math.complex.Complex complex16 = complex14.divide(7.182116123887851E10d); org.apache.commons.math.complex.Complex complex17 = complex7.multiply(complex16); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); }
public void test1472() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1472"); org.apache.commons.math.exception.util.Localizable localizable0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); double[] doubleArray9 = new double[] { (-1), (byte) 100 }; double double10 = org.apache.commons.math.util.MathUtils.distance1(doubleArray6, doubleArray9); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection11 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean14 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray9, orderDirection11, false, true); double[] doubleArray18 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray18, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection21 = null; double[] doubleArray24 = new double[] { 0.0f, 0.0f }; double[] doubleArray27 = new double[] { 0.0f, 0.0f }; double[] doubleArray30 = new double[] { 0.0f, 0.0f }; double[] doubleArray33 = new double[] { 0.0f, 0.0f }; double[] doubleArray36 = new double[] { 0.0f, 0.0f }; double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray20, orderDirection21, doubleArray37); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray9, doubleArray37); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException40 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray37); org.apache.commons.math.exception.util.ExceptionContext exceptionContext41 = mathArithmeticException40.getContext(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext42 = mathArithmeticException40.getContext(); java.lang.Throwable[] throwableArray43 = mathArithmeticException40.getSuppressed(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext44 = mathArithmeticException40.getContext(); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertNotNull(exceptionContext41); org.junit.Assert.assertNotNull(exceptionContext42); org.junit.Assert.assertNotNull(throwableArray43); org.junit.Assert.assertNotNull(exceptionContext44); }
public void test1473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1473"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); org.apache.commons.math.complex.Complex complex8 = complex5.createComplex((double) (-86L), 0.9919317346815598d); org.apache.commons.math.complex.Complex complex10 = complex8.pow(3.5553480614894135d); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex12.pow(complex16); boolean boolean19 = complex17.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex21 = complex20.atan(); org.apache.commons.math.complex.Complex complex22 = complex17.pow(complex20); org.apache.commons.math.complex.Complex complex23 = complex8.divide(complex17); org.apache.commons.math.complex.Complex complex24 = complex8.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); }
public void test1474() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1474"); double double2 = org.apache.commons.math.util.FastMath.atan2((-1.5574077246549023d), (-96.96651530265808d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-3.125532740314209d) + "'", double2 == (-3.125532740314209d)); }
public void test1475() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1475"); // The following exception was thrown during execution in test generation try { double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(11, 96); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: must have n >= k for binomial coefficient (n, k), got k = 96, n = 11"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } }
public void test1476() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1476"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex11 = complex8.pow((double) 20); org.apache.commons.math.complex.Complex complex12 = complex11.sin(); org.apache.commons.math.complex.Complex complex13 = complex11.exp(); org.apache.commons.math.complex.Complex complex14 = complex7.multiply(complex13); org.apache.commons.math.complex.Complex complex15 = complex7.cos(); org.apache.commons.math.complex.Complex complex16 = complex15.sinh(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.negate(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex18.pow(complex22); java.util.List<org.apache.commons.math.complex.Complex> complexList25 = complex22.nthRoot(52); org.apache.commons.math.complex.Complex complex26 = complex22.sin(); org.apache.commons.math.complex.Complex complex28 = complex26.pow(1.530112122701651d); org.apache.commons.math.complex.Complex complex29 = complex26.tan(); org.apache.commons.math.complex.Complex complex30 = complex15.subtract(complex26); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complexList25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); }
public void test1477() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1477"); double double1 = org.apache.commons.math.util.FastMath.tanh((double) '#'); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test1478() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1478"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex12.subtract(66.97680939587865d); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex18 = complex16.divide((double) 1079574528); java.lang.String str19 = complex18.toString(); org.apache.commons.math.complex.Complex complex20 = complex14.divide(complex18); org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex23 = complex22.negate(); org.apache.commons.math.complex.Complex complex24 = complex22.exp(); double double25 = complex22.getReal(); org.apache.commons.math.complex.Complex complex26 = complex14.multiply(complex22); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(1.2980099363041076E-54, 0.0)" + "'", str19, "(1.2980099363041076E-54, 0.0)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d); org.junit.Assert.assertNotNull(complex26); }
public void test1479() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1479"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex4 = complex1.pow(35.0d); org.apache.commons.math.complex.Complex complex5 = complex4.tan(); org.apache.commons.math.complex.Complex complex6 = complex4.tan(); org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex(0.0d); org.apache.commons.math.complex.Complex complex9 = complex4.subtract(complex8); org.apache.commons.math.complex.Complex complex10 = complex4.cosh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test1480() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1480"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(6.8074502500001E8d, 152.0d); java.lang.Class<?> wildcardClass3 = complex2.getClass(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(wildcardClass3); }
public void test1481() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1481"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex3 = complex0.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex4.cosh(); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.sin(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex11 = complex9.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex9.pow(complex13); boolean boolean16 = complex14.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex17 = complex7.divide(complex14); org.apache.commons.math.complex.Complex complex18 = complex7.sinh(); org.apache.commons.math.complex.Complex complex19 = complex7.atan(); org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z(); org.apache.commons.math.complex.Complex complex21 = complex20.sqrt(); org.apache.commons.math.complex.Complex complex22 = complex4.subtract(complex20); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); }
public void test1482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1482"); double[] doubleArray0 = null; double[] doubleArray1 = null; double[] doubleArray5 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, (int) (short) 0); boolean boolean8 = org.apache.commons.math.util.MathUtils.equals(doubleArray1, doubleArray5); double[] doubleArray9 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5); int int10 = org.apache.commons.math.util.MathUtils.hash(doubleArray5); double[] doubleArray11 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5); boolean boolean12 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray5); double[] doubleArray16 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray18 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray16, (int) (short) 0); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray18, 0); // The following exception was thrown during execution in test generation try { double double21 = org.apache.commons.math.util.MathUtils.linearCombination(doubleArray0, doubleArray20); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1944488865) + "'", int10 == (-1944488865)); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]"); }
public void test1483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1483"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-2.0452919197856156E14d), 2.0933705972275205E15d); }
public void test1484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1484"); double double1 = org.apache.commons.math.util.FastMath.ulp(1.2277040115054336d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.220446049250313E-16d + "'", double1 == 2.220446049250313E-16d); }
public void test1485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1485"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex4 = complex1.pow(35.0d); org.apache.commons.math.complex.Complex complex5 = complex4.log(); boolean boolean6 = complex5.isInfinite(); java.lang.Class<?> wildcardClass7 = complex5.getClass(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertNotNull(wildcardClass7); }
public void test1486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1486"); double double2 = org.apache.commons.math.util.FastMath.scalb(1.073741824E9d, (-680745024)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test1487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1487"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); java.lang.String str17 = complex16.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(0.1585290151921035, -0.8414709848078965)" + "'", str17, "(0.1585290151921035, -0.8414709848078965)"); }
public void test1488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1488"); double double1 = org.apache.commons.math.util.FastMath.sinh((-96.96651530265808d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-6.471314842950629E41d) + "'", double1 == (-6.471314842950629E41d)); }
public void test1489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1489"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex13.sinh(); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex1.add(complex14); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.negate(); org.apache.commons.math.complex.Complex complex19 = complex17.sqrt1z(); boolean boolean20 = complex17.isNaN(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex22.sinh(); org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex25 = complex24.negate(); org.apache.commons.math.complex.Complex complex26 = complex23.pow(complex25); org.apache.commons.math.complex.Complex complex29 = complex25.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex30 = complex29.negate(); org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex32 = complex31.sin(); double double33 = complex32.getArgument(); org.apache.commons.math.complex.Complex complex34 = complex29.multiply(complex32); org.apache.commons.math.complex.Complex complex35 = complex17.multiply(complex29); org.apache.commons.math.complex.Complex complex37 = complex35.divide(100.00999950005d); org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex39 = complex38.negate(); org.apache.commons.math.complex.Complex complex41 = complex38.pow((double) 20); org.apache.commons.math.complex.Complex complex42 = complex38.tanh(); org.apache.commons.math.complex.Complex complex43 = complex42.cos(); org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex45 = complex44.negate(); org.apache.commons.math.complex.Complex complex47 = complex44.pow((double) 20); org.apache.commons.math.complex.Complex complex48 = complex44.tanh(); org.apache.commons.math.complex.Complex complex49 = complex42.multiply(complex48); org.apache.commons.math.complex.Complex complex50 = complex35.divide(complex49); double double51 = complex49.getArgument(); org.apache.commons.math.complex.Complex complex52 = complex16.divide(complex49); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-3.141592653589793d) + "'", double15 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); org.junit.Assert.assertNotNull(complex44); org.junit.Assert.assertNotNull(complex45); org.junit.Assert.assertNotNull(complex47); org.junit.Assert.assertNotNull(complex48); org.junit.Assert.assertNotNull(complex49); org.junit.Assert.assertNotNull(complex50); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertNotNull(complex52); }
public void test1490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1490"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((double) 1.65530944E9f, 66.97680939587865d, (-1475346432)); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test1491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1491"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex6 = complex4.subtract((double) 1.0f); org.apache.commons.math.complex.Complex complex7 = complex1.divide(complex6); boolean boolean9 = complex1.equals((java.lang.Object) 5.8241834716274006E20d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test1492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1492"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.util.Localizable localizable4 = null; double[] doubleArray8 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray10 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection11 = null; double[] doubleArray14 = new double[] { 0.0f, 0.0f }; double[] doubleArray17 = new double[] { 0.0f, 0.0f }; double[] doubleArray20 = new double[] { 0.0f, 0.0f }; double[] doubleArray23 = new double[] { 0.0f, 0.0f }; double[] doubleArray26 = new double[] { 0.0f, 0.0f }; double[][] doubleArray27 = new double[][] { doubleArray14, doubleArray17, doubleArray20, doubleArray23, doubleArray26 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray10, orderDirection11, doubleArray27); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable4, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.NullArgumentException nullArgumentException30 = new org.apache.commons.math.exception.NullArgumentException(localizable2, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException31 = new org.apache.commons.math.exception.MathArithmeticException(localizable1, (java.lang.Object[]) doubleArray27); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException32 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray27); // The following exception was thrown during execution in test generation try { java.lang.String str33 = mathArithmeticException32.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray27); }
public void test1493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1493"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); }
public void test1494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1494"); org.apache.commons.math.exception.util.Localizable localizable0 = null; java.lang.Number number2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 0.3490658503988659d, number2, false); org.apache.commons.math.exception.util.ExceptionContext exceptionContext5 = numberIsTooSmallException4.getContext(); org.junit.Assert.assertNotNull(exceptionContext5); }
public void test1495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1495"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); java.lang.Throwable throwable60 = mathArithmeticException58.getException(); java.lang.Class<?> wildcardClass61 = throwable60.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(throwable60); org.junit.Assert.assertNotNull(wildcardClass61); }
public void test1496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1496"); double double1 = org.apache.commons.math.util.FastMath.sin(1262023.5276316951d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.9789404648990809d + "'", double1 == 0.9789404648990809d); }
public void test1497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1497"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex6 = complex4.subtract((double) 1.0f); org.apache.commons.math.complex.Complex complex7 = complex1.divide(complex6); boolean boolean8 = complex1.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); }
public void test1498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1498"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray14); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 101); double[] doubleArray23 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray8, (-0.19453643341030355d)); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-0.19850656470439138, 0.001985065647043914, 0.001985065647043914]"); }
public void test1499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1499"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-3.141592653589793d), (double) (byte) 1); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField3 = complex2.getField(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex2); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); org.apache.commons.math.complex.Complex complex10 = complex8.exp(); org.apache.commons.math.complex.Complex complex11 = complex6.multiply(complex8); org.apache.commons.math.complex.Complex complex12 = complex2.pow(complex6); org.apache.commons.math.complex.ComplexField complexField13 = complex6.getField(); double double14 = complex6.abs(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complexField3); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complexField13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.401298464324817E-45d + "'", double14 == 1.401298464324817E-45d); }
public void test1500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest2.test1500"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); boolean boolean3 = complex0.isNaN(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex5.sinh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex6.pow(complex8); org.apache.commons.math.complex.Complex complex12 = complex8.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.sin(); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex12.multiply(complex15); org.apache.commons.math.complex.Complex complex18 = complex0.multiply(complex12); org.apache.commons.math.complex.Complex complex19 = complex18.tanh(); org.apache.commons.math.complex.Complex complex20 = complex18.sqrt1z(); org.apache.commons.math.complex.Complex complex21 = complex20.sqrt(); org.apache.commons.math.complex.Complex complex22 = complex21.atan(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex24 = complex23.sin(); org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex26 = complex25.negate(); org.apache.commons.math.complex.Complex complex28 = complex26.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex30 = complex29.negate(); org.apache.commons.math.complex.Complex complex31 = complex26.pow(complex30); boolean boolean33 = complex31.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex34 = complex24.divide(complex31); org.apache.commons.math.complex.Complex complex35 = complex24.sinh(); org.apache.commons.math.complex.Complex complex36 = complex24.atan(); org.apache.commons.math.complex.Complex complex37 = complex36.sqrt1z(); org.apache.commons.math.complex.Complex complex39 = complex36.pow((-3.141592653589793d)); org.apache.commons.math.complex.Complex complex40 = complex36.tan(); org.apache.commons.math.complex.Complex complex41 = complex36.sin(); org.apache.commons.math.complex.Complex complex42 = complex21.multiply(complex36); org.apache.commons.math.complex.Complex complex43 = complex21.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex39); org.junit.Assert.assertNotNull(complex40); org.junit.Assert.assertNotNull(complex41); org.junit.Assert.assertNotNull(complex42); org.junit.Assert.assertNotNull(complex43); }
public void test0001() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0001"); double double1 = org.apache.commons.math.util.FastMath.atanh(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0002() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0002"); short short1 = org.apache.commons.math.util.MathUtils.indicator((short) 10); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 1 + "'", short1 == (short) 1); }
public void test0003() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0003"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList2 = complex0.nthRoot((int) (short) 0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: 0"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); }
public void test0004() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0004"); int int2 = org.apache.commons.math.util.FastMath.max(0, (int) (short) 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test0005() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0005"); double double2 = org.apache.commons.math.util.FastMath.max((double) '#', (double) (-1)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 35.0d + "'", double2 == 35.0d); }
public void test0006() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0006"); double double1 = org.apache.commons.math.util.FastMath.rint((double) (byte) 10); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 10.0d + "'", double1 == 10.0d); }
public void test0007() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0007"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray8 = new double[] { (-1), (byte) 100 }; double double9 = org.apache.commons.math.util.MathUtils.distance1(doubleArray5, doubleArray8); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection10 = null; // The following exception was thrown during execution in test generation try { boolean boolean13 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray8, orderDirection10, false, true); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test0008() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0008"); java.math.BigInteger bigInteger0 = null; // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger2 = org.apache.commons.math.util.MathUtils.pow(bigInteger0, (long) '4'); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test0009() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0009"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; java.lang.Object[] objArray3 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException4 = new org.apache.commons.math.exception.MathArithmeticException(localizable1, objArray3); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException5 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, objArray3); java.lang.Throwable throwable6 = mathIllegalArgumentException5.getException(); org.junit.Assert.assertNotNull(objArray3); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[1.0]"); org.junit.Assert.assertNotNull(throwable6); }
public void test0010() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0010"); double double1 = org.apache.commons.math.util.FastMath.acosh((double) (-1)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0011() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0011"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); }
public void test0012() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0012"); int int1 = org.apache.commons.math.util.MathUtils.hash((double) (byte) 100); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1079574528 + "'", int1 == 1079574528); }
public void test0013() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0013"); // The following exception was thrown during execution in test generation try { float float3 = org.apache.commons.math.util.MathUtils.round((float) 1L, (int) (byte) 1, (int) '4'); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: invalid rounding method 52, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)"); } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) { // Expected exception. } }
public void test0014() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0014"); double double1 = org.apache.commons.math.util.FastMath.log10((double) (-1.0f)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0015() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0015"); double double1 = org.apache.commons.math.util.FastMath.nextUp((double) 10.0f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 10.000000000000002d + "'", double1 == 10.000000000000002d); }
public void test0016() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0016"); double double1 = org.apache.commons.math.util.FastMath.cbrt(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0017() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0017"); int int1 = org.apache.commons.math.util.FastMath.getExponent((float) 1); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test0018() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0018"); double double1 = org.apache.commons.math.util.FastMath.atanh((double) (short) 1); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY); }
public void test0019() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0019"); short short1 = org.apache.commons.math.util.MathUtils.indicator((short) (byte) 1); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 1 + "'", short1 == (short) 1); }
public void test0020() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0020"); int int2 = org.apache.commons.math.util.MathUtils.pow((int) (short) -1, (int) (short) 100); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0021() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0021"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) Double.POSITIVE_INFINITY, (java.lang.Number) 10.0d, (int) ' '); }
public void test0022() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0022"); double double1 = org.apache.commons.math.util.FastMath.exp((double) 101); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 7.307059979368067E43d + "'", double1 == 7.307059979368067E43d); }
public void test0023() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0023"); long long2 = org.apache.commons.math.util.MathUtils.mulAndCheck((long) 100, (-1L)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-100L) + "'", long2 == (-100L)); }
public void test0024() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0024"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt1z(); org.apache.commons.math.complex.Complex complex9 = complex4.multiply(complex8); double double10 = complex8.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); }
public void test0025() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0025"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray14); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test0026() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0026"); double double0 = org.apache.commons.math.util.MathUtils.TWO_PI; org.junit.Assert.assertTrue("'" + double0 + "' != '" + 6.283185307179586d + "'", double0 == 6.283185307179586d); }
public void test0027() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0027"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((float) (short) 100, (float) (short) 100); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test0028() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0028"); double double2 = org.apache.commons.math.util.MathUtils.normalizeAngle((double) (short) 1, 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d); }
public void test0029() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0029"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt1z(); org.apache.commons.math.complex.Complex complex9 = complex4.multiply(complex8); org.apache.commons.math.complex.Complex complex10 = complex8.tanh(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList12 = complex10.nthRoot((-1)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -1"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test0030() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0030"); double double1 = org.apache.commons.math.util.FastMath.atanh((double) (short) -1); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.NEGATIVE_INFINITY + "'", double1 == Double.NEGATIVE_INFINITY); }
public void test0031() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0031"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); org.apache.commons.math.complex.Complex complex7 = complex6.cos(); org.apache.commons.math.complex.Complex complex8 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex9 = complex6.divide(complex8); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test0032() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0032"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((double) (-680745026), (double) 0L, (-1.0d)); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0033() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0033"); float float2 = org.apache.commons.math.util.MathUtils.round((float) '#', (int) (short) 0); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 35.0f + "'", float2 == 35.0f); }
public void test0034() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0034"); double double0 = org.apache.commons.math.util.MathUtils.SAFE_MIN; org.junit.Assert.assertTrue("'" + double0 + "' != '" + 2.2250738585072014E-308d + "'", double0 == 2.2250738585072014E-308d); }
public void test0035() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0035"); int int1 = org.apache.commons.math.util.FastMath.round((float) 6); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6); }
public void test0036() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0036"); float[] floatArray6 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray9 = new float[] { ' ', 10240.0f }; boolean boolean10 = org.apache.commons.math.util.MathUtils.equals(floatArray6, floatArray9); float[] floatArray17 = new float[] { 0, 10240.0f, (byte) 0, (short) 0, ' ', 1.0f }; float[] floatArray24 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray27 = new float[] { ' ', 10240.0f }; boolean boolean28 = org.apache.commons.math.util.MathUtils.equals(floatArray24, floatArray27); boolean boolean29 = org.apache.commons.math.util.MathUtils.equals(floatArray17, floatArray24); float[] floatArray36 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray39 = new float[] { ' ', 10240.0f }; boolean boolean40 = org.apache.commons.math.util.MathUtils.equals(floatArray36, floatArray39); boolean boolean41 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray17, floatArray39); boolean boolean42 = org.apache.commons.math.util.MathUtils.equals(floatArray9, floatArray39); float[] floatArray45 = new float[] { (short) 10, 'a' }; boolean boolean46 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(floatArray9, floatArray45); org.junit.Assert.assertNotNull(floatArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(floatArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[0.0, 10240.0, 0.0, 0.0, 32.0, 1.0]"); org.junit.Assert.assertNotNull(floatArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false); org.junit.Assert.assertNotNull(floatArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false); org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true); org.junit.Assert.assertNotNull(floatArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[10.0, 97.0]"); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); }
public void test0037() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0037"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((double) (byte) -1, (double) (short) 1); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0038() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0038"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); org.apache.commons.math.complex.Complex complex3 = complex2.acos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test0039() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0039"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((double) 101, 1.5707963267948966d); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0040() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0040"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) 104.04806581575652d); }
public void test0041() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0041"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 100); boolean boolean21 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray20); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); }
public void test0042() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0042"); byte byte1 = org.apache.commons.math.util.MathUtils.sign((byte) 10); org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 1 + "'", byte1 == (byte) 1); }
public void test0043() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0043"); long long1 = org.apache.commons.math.util.MathUtils.indicator((long) (short) 100); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L); }
public void test0044() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0044"); double double2 = org.apache.commons.math.util.FastMath.max(10.000000000000002d, (double) 10240.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 10240.0d + "'", double2 == 10240.0d); }
public void test0045() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0045"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(10.0f, 1.4E-45f, (float) 1079574528); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); }
public void test0046() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0046"); long long2 = org.apache.commons.math.util.MathUtils.subAndCheck((long) 10, (long) 96); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-86L) + "'", long2 == (-86L)); }
public void test0047() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0047"); double double1 = org.apache.commons.math.util.FastMath.sin((double) (-1.0f)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.8414709848078965d) + "'", double1 == (-0.8414709848078965d)); }
public void test0048() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0048"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); double double3 = complex0.getImaginary(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test0049() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0049"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equals((double) (-680745026), (double) (short) 10); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0050() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0050"); double double1 = org.apache.commons.math.util.FastMath.cosh((double) (-86L)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.1176233018673575E37d + "'", double1 == 1.1176233018673575E37d); }
public void test0051() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0051"); org.apache.commons.math.exception.util.Localizable localizable0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); double[] doubleArray9 = new double[] { (-1), (byte) 100 }; double double10 = org.apache.commons.math.util.MathUtils.distance1(doubleArray6, doubleArray9); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection11 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean14 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray9, orderDirection11, false, true); double[] doubleArray18 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray18, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection21 = null; double[] doubleArray24 = new double[] { 0.0f, 0.0f }; double[] doubleArray27 = new double[] { 0.0f, 0.0f }; double[] doubleArray30 = new double[] { 0.0f, 0.0f }; double[] doubleArray33 = new double[] { 0.0f, 0.0f }; double[] doubleArray36 = new double[] { 0.0f, 0.0f }; double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray20, orderDirection21, doubleArray37); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray9, doubleArray37); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException40 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray37); org.apache.commons.math.exception.util.ExceptionContext exceptionContext41 = mathArithmeticException40.getContext(); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertNotNull(exceptionContext41); }
public void test0052() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0052"); org.apache.commons.math.exception.util.Localizable localizable1 = null; double[] doubleArray5 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, (int) (short) 0); double[] doubleArray10 = new double[] { (-1), (byte) 100 }; double double11 = org.apache.commons.math.util.MathUtils.distance1(doubleArray7, doubleArray10); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection12 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean15 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray10, orderDirection12, false, true); double[] doubleArray19 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray19, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection22 = null; double[] doubleArray25 = new double[] { 0.0f, 0.0f }; double[] doubleArray28 = new double[] { 0.0f, 0.0f }; double[] doubleArray31 = new double[] { 0.0f, 0.0f }; double[] doubleArray34 = new double[] { 0.0f, 0.0f }; double[] doubleArray37 = new double[] { 0.0f, 0.0f }; double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray21, orderDirection22, doubleArray38); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray10, doubleArray38); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException41 = new org.apache.commons.math.exception.MathArithmeticException(localizable1, (java.lang.Object[]) doubleArray38); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException42 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) 7.307059979368067E43d, (java.lang.Object[]) doubleArray38); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray38); }
public void test0053() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0053"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.acos(); double double3 = complex2.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test0054() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0054"); // The following exception was thrown during execution in test generation try { long long2 = org.apache.commons.math.util.MathUtils.pow((-86L), (-1)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: exponent (-1)"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test0055() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0055"); float float1 = org.apache.commons.math.util.FastMath.nextUp((float) ' '); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 32.000004f + "'", float1 == 32.000004f); }
public void test0056() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0056"); double double2 = org.apache.commons.math.util.FastMath.copySign((double) 10.0f, (-0.8414709848078965d)); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-10.0d) + "'", double2 == (-10.0d)); }
public void test0057() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0057"); long long1 = org.apache.commons.math.util.FastMath.abs((long) (short) 0); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test0058() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0058"); double double1 = org.apache.commons.math.util.FastMath.asin(1.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5707963267948966d + "'", double1 == 1.5707963267948966d); }
public void test0059() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0059"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(1.1176233018673575E37d, 10240.0d, (int) (byte) 0); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0060() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0060"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); java.lang.Class<?> wildcardClass6 = complex5.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(wildcardClass6); }
public void test0061() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0061"); org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException2 = new org.apache.commons.math.exception.DimensionMismatchException((int) (byte) 1, (int) (short) 100); }
public void test0062() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0062"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((float) 152L, (float) 1L, (float) (-680745026)); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0063() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0063"); double double0 = org.apache.commons.math.util.FastMath.PI; org.junit.Assert.assertTrue("'" + double0 + "' != '" + 3.141592653589793d + "'", double0 == 3.141592653589793d); }
public void test0064() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0064"); double double1 = org.apache.commons.math.util.FastMath.nextUp(1.5301121227016508d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.530112122701651d + "'", double1 == 1.530112122701651d); }
public void test0065() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0065"); double double1 = org.apache.commons.math.util.FastMath.log10((double) (-86L)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0066() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0066"); float float2 = org.apache.commons.math.util.MathUtils.round(1.07957453E9f, (int) '4'); org.junit.Assert.assertTrue(Float.isNaN(float2)); }
public void test0067() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0067"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex4 = complex0.add(complex3); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); }
public void test0068() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0068"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.exp(); org.apache.commons.math.complex.Complex complex4 = complex1.exp(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test0069() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0069"); double double1 = org.apache.commons.math.util.FastMath.sqrt((double) 35.000004f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 5.916080105500369d + "'", double1 == 5.916080105500369d); }
public void test0070() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0070"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.conjugate(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sin(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex6.pow(complex10); boolean boolean13 = complex11.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex14 = complex4.divide(complex11); org.apache.commons.math.complex.Complex complex15 = complex4.sinh(); org.apache.commons.math.complex.Complex complex16 = complex2.add(complex4); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); }
public void test0071() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0071"); double double2 = org.apache.commons.math.util.FastMath.scalb(5.30829220390157d, (int) ' '); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.2798941413369007E10d + "'", double2 == 2.2798941413369007E10d); }
public void test0072() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0072"); float float1 = org.apache.commons.math.util.FastMath.signum((float) (byte) 0); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f); }
public void test0073() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0073"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex1.atan(); org.apache.commons.math.complex.Complex complex14 = complex13.exp(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); }
public void test0074() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0074"); double double2 = org.apache.commons.math.util.FastMath.copySign((double) 6.591783E31f, 62.67332405660377d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 6.591783121186793E31d + "'", double2 == 6.591783121186793E31d); }
public void test0075() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0075"); java.math.BigInteger bigInteger0 = null; // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger2 = org.apache.commons.math.util.MathUtils.pow(bigInteger0, (int) '#'); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test0076() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0076"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.acos(); boolean boolean4 = complex0.equals((java.lang.Object) 6); double double5 = complex0.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d); }
public void test0077() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0077"); double double1 = org.apache.commons.math.util.FastMath.signum(22025.465794806754d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0078() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0078"); double double1 = org.apache.commons.math.util.MathUtils.sign((-33.64487900984524d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.0d) + "'", double1 == (-1.0d)); }
public void test0079() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0079"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); boolean boolean3 = complex0.isNaN(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex5.sinh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex6.pow(complex8); org.apache.commons.math.complex.Complex complex12 = complex8.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.sin(); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex12.multiply(complex15); org.apache.commons.math.complex.Complex complex18 = complex0.multiply(complex12); boolean boolean19 = complex12.isNaN(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); }
public void test0080() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0080"); java.math.BigInteger bigInteger0 = null; java.math.BigInteger bigInteger1 = null; // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger2 = org.apache.commons.math.util.MathUtils.pow(bigInteger0, bigInteger1); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test0081() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0081"); double double1 = org.apache.commons.math.util.FastMath.nextUp((double) (-1.0f)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.9999999999999999d) + "'", double1 == (-0.9999999999999999d)); }
public void test0082() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0082"); short short1 = org.apache.commons.math.util.MathUtils.indicator((short) 100); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 1 + "'", short1 == (short) 1); }
public void test0083() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0083"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException4 = new org.apache.commons.math.exception.NumberIsTooLargeException(localizable0, (java.lang.Number) 100.0d, (java.lang.Number) 1079574528, false); }
public void test0084() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0084"); int int1 = org.apache.commons.math.util.FastMath.round((float) 152L); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 152 + "'", int1 == 152); }
public void test0085() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0085"); // The following exception was thrown during execution in test generation try { double double3 = org.apache.commons.math.util.MathUtils.round((double) ' ', (-1), 96); org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode"); } catch (java.lang.IllegalArgumentException e) { // Expected exception. } }
public void test0086() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0086"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; java.lang.Object[] objArray3 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException4 = new org.apache.commons.math.exception.MathArithmeticException(localizable1, objArray3); org.apache.commons.math.exception.NullArgumentException nullArgumentException5 = new org.apache.commons.math.exception.NullArgumentException(localizable0, objArray3); java.lang.Throwable throwable6 = nullArgumentException5.getException(); org.junit.Assert.assertNotNull(objArray3); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[1.0]"); org.junit.Assert.assertNotNull(throwable6); }
public void test0087() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0087"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex1.atan(); org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z(); java.lang.Class<?> wildcardClass15 = complex13.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(wildcardClass15); }
public void test0088() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0088"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(20.0f, (float) (short) 0, (int) (short) -1); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0089() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0089"); double double1 = org.apache.commons.math.util.FastMath.ulp((-0.0d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.9E-324d + "'", double1 == 4.9E-324d); }
public void test0090() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0090"); // The following exception was thrown during execution in test generation try { double double1 = org.apache.commons.math.util.MathUtils.factorialDouble((int) (short) -1); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: must have n >= 0 for n!, got n = -1"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test0091() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0091"); org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException2 = new org.apache.commons.math.exception.DimensionMismatchException(20, 0); java.lang.Throwable throwable3 = dimensionMismatchException2.getException(); org.junit.Assert.assertNotNull(throwable3); org.junit.Assert.assertEquals(throwable3.getLocalizedMessage(), "20 != 0"); org.junit.Assert.assertEquals(throwable3.getMessage(), "20 != 0"); org.junit.Assert.assertEquals(throwable3.toString(), "org.apache.commons.math.exception.DimensionMismatchException: 20 != 0"); }
public void test0092() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0092"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex16.log(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); }
public void test0093() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0093"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (-1.0f)); }
public void test0094() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0094"); // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.math.util.MathUtils.pow((int) '#', (long) (byte) -1); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: exponent (-1)"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test0095() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0095"); int int3 = org.apache.commons.math.util.MathUtils.compareTo(7.307059979368067E43d, (double) 200.0f, 1.6755160819145565d); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); }
public void test0096() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0096"); double double2 = org.apache.commons.math.util.FastMath.max(6.283185307179586d, 1.5301121227016508d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 6.283185307179586d + "'", double2 == 6.283185307179586d); }
public void test0097() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0097"); double double6 = org.apache.commons.math.util.MathUtils.linearCombination(101.53096491487338d, 5.30829220390157d, (double) 0, (double) (short) -1, 0.0d, 0.9919317346815598d); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 538.9560295122262d + "'", double6 == 538.9560295122262d); }
public void test0098() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0098"); double double1 = org.apache.commons.math.util.FastMath.log1p(3.5553480614894135d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5163019408528369d + "'", double1 == 1.5163019408528369d); }
public void test0099() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0099"); double double1 = org.apache.commons.math.util.FastMath.signum(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0100() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0100"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 35.000004f); }
public void test0101() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0101"); java.math.BigInteger bigInteger0 = null; // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger2 = org.apache.commons.math.util.MathUtils.pow(bigInteger0, (int) (short) -1); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: exponent (-1)"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test0102() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0102"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex3 = complex1.subtract((double) (byte) 10); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); }
public void test0103() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0103"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals(2.2250738585072014E-308d, (double) 4L, 0); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0104() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0104"); double double1 = org.apache.commons.math.util.FastMath.acosh((-3.141592653589793d)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0105() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0105"); double double1 = org.apache.commons.math.util.FastMath.log10((double) 100.0f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.0d + "'", double1 == 2.0d); }
public void test0106() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0106"); double double1 = org.apache.commons.math.util.FastMath.atanh((-1.5574077246549023d)); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0107() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0107"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((-2.356194490192345d), 6.80745026E8d, 101); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0108() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0108"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 100); boolean boolean21 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray20); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); double[] doubleArray29 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray27, 0); boolean boolean30 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray29); double[] doubleArray34 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray36 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray34, (int) (short) 0); double double37 = org.apache.commons.math.util.MathUtils.distance(doubleArray29, doubleArray34); double double38 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray29); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]"); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); }
public void test0109() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0109"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex13.sinh(); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex1.add(complex14); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex1); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-3.141592653589793d) + "'", double15 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex16); }
public void test0110() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0110"); double double6 = org.apache.commons.math.util.MathUtils.linearCombination((double) 20L, 0.0d, (double) Float.NaN, (-0.5872139151569291d), (double) 1.07957453E9f, 0.0d); org.junit.Assert.assertTrue(Double.isNaN(double6)); }
public void test0111() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0111"); float float1 = org.apache.commons.math.util.FastMath.abs(20.0f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 20.0f + "'", float1 == 20.0f); }
public void test0112() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0112"); double[] doubleArray0 = new double[] {}; double[] doubleArray1 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray0); double[] doubleArray5 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, (int) (short) 0); double[] doubleArray10 = new double[] { (-1), (byte) 100 }; double double11 = org.apache.commons.math.util.MathUtils.distance1(doubleArray7, doubleArray10); double[] doubleArray13 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray10, 100); boolean boolean14 = org.apache.commons.math.util.MathUtils.equals(doubleArray1, doubleArray13); org.junit.Assert.assertNotNull(doubleArray0); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]"); org.junit.Assert.assertNotNull(doubleArray1); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); }
public void test0113() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0113"); float float1 = org.apache.commons.math.util.FastMath.abs((float) 10L); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 10.0f + "'", float1 == 10.0f); }
public void test0114() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0114"); float float2 = org.apache.commons.math.util.FastMath.copySign((float) (byte) 1, (float) 152L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f); }
public void test0115() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0115"); float float1 = org.apache.commons.math.util.MathUtils.indicator((float) (-680745036L)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + (-1.0f) + "'", float1 == (-1.0f)); }
public void test0116() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0116"); double double1 = org.apache.commons.math.util.MathUtils.factorialLog(1); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0117() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0117"); long long2 = org.apache.commons.math.util.FastMath.max((long) 52, 100L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 100L + "'", long2 == 100L); }
public void test0118() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0118"); org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException2 = new org.apache.commons.math.exception.DimensionMismatchException((int) ' ', 0); org.apache.commons.math.exception.util.ExceptionContext exceptionContext3 = dimensionMismatchException2.getContext(); org.junit.Assert.assertNotNull(exceptionContext3); }
public void test0119() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0119"); short short1 = org.apache.commons.math.util.MathUtils.sign((short) -1); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) -1 + "'", short1 == (short) -1); }
public void test0120() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0120"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex4 = complex2.subtract((double) (byte) 10); org.apache.commons.math.complex.Complex complex5 = complex0.multiply(complex4); boolean boolean6 = complex0.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test0121() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0121"); float float2 = org.apache.commons.math.util.FastMath.min((float) (byte) 1, (float) (-1)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-1.0f) + "'", float2 == (-1.0f)); }
public void test0122() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0122"); float float1 = org.apache.commons.math.util.FastMath.abs((float) (byte) 100); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 100.0f + "'", float1 == 100.0f); }
public void test0123() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0123"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); boolean boolean3 = complex0.isNaN(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex5.sinh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex6.pow(complex8); org.apache.commons.math.complex.Complex complex12 = complex8.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.sin(); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex12.multiply(complex15); org.apache.commons.math.complex.Complex complex18 = complex0.multiply(complex12); org.apache.commons.math.complex.ComplexField complexField19 = complex18.getField(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complexField19); }
public void test0124() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0124"); double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble((int) (short) 0, 0); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d); }
public void test0125() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0125"); double double3 = org.apache.commons.math.util.MathUtils.reduce(26091.090931580457d, 3.7632429002127764E77d, (-0.8414709848078965d)); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 26091.932402565264d + "'", double3 == 26091.932402565264d); }
public void test0126() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0126"); double double1 = org.apache.commons.math.util.FastMath.atanh(0.6610060414837631d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.7945982305639963d + "'", double1 == 0.7945982305639963d); }
public void test0127() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0127"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((double) (short) 10, (double) 1219337025, 1.530112122701651d); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0128() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0128"); double double1 = org.apache.commons.math.util.FastMath.asinh((double) 35.000004f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.248699370183246d + "'", double1 == 4.248699370183246d); }
public void test0129() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0129"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equals((float) '#', (float) 1079574528); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0130() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0130"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(544.656365691809d); }
public void test0131() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0131"); long long1 = org.apache.commons.math.util.FastMath.round((double) (-100L)); org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-100L) + "'", long1 == (-100L)); }
public void test0132() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0132"); double double2 = org.apache.commons.math.util.MathUtils.normalizeAngle(0.7945982305639963d, (double) 100L); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 101.32556314543737d + "'", double2 == 101.32556314543737d); }
public void test0133() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0133"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex1.atan(); java.lang.Class<?> wildcardClass14 = complex1.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(wildcardClass14); }
public void test0134() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0134"); double double1 = org.apache.commons.math.util.FastMath.asinh((double) Float.NaN); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0135() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0135"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 35.000004f, (java.lang.Number) 1.07957453E9f, true); }
public void test0136() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0136"); double double8 = org.apache.commons.math.util.MathUtils.linearCombination((double) 6L, 0.0d, 0.0d, (double) (short) 0, (double) (-680745026), 0.0d, (double) (-1L), (double) (short) 100); org.junit.Assert.assertTrue("'" + double8 + "' != '" + (-100.0d) + "'", double8 == (-100.0d)); }
public void test0137() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0137"); double double1 = org.apache.commons.math.util.FastMath.exp(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0138() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0138"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException3 = new org.apache.commons.math.exception.DimensionMismatchException(localizable0, 0, (int) (short) -1); java.lang.Throwable throwable4 = dimensionMismatchException3.getException(); org.junit.Assert.assertNotNull(throwable4); }
public void test0139() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0139"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) (byte) 0, (java.lang.Number) 6.283185307179586d, false); }
public void test0140() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0140"); double[] doubleArray0 = null; org.apache.commons.math.util.MathUtils.OrderDirection orderDirection4 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException6 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 5, (java.lang.Number) 100.0f, (-1), orderDirection4, true); org.apache.commons.math.exception.util.Localizable localizable7 = null; double[] doubleArray11 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray13 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray11, (int) (short) 0); double[] doubleArray16 = new double[] { (-1), (byte) 100 }; double double17 = org.apache.commons.math.util.MathUtils.distance1(doubleArray13, doubleArray16); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection18 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean21 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray16, orderDirection18, false, true); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection28 = null; double[] doubleArray31 = new double[] { 0.0f, 0.0f }; double[] doubleArray34 = new double[] { 0.0f, 0.0f }; double[] doubleArray37 = new double[] { 0.0f, 0.0f }; double[] doubleArray40 = new double[] { 0.0f, 0.0f }; double[] doubleArray43 = new double[] { 0.0f, 0.0f }; double[][] doubleArray44 = new double[][] { doubleArray31, doubleArray34, doubleArray37, doubleArray40, doubleArray43 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, orderDirection28, doubleArray44); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray16, doubleArray44); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException47 = new org.apache.commons.math.exception.MathArithmeticException(localizable7, (java.lang.Object[]) doubleArray44); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray0, orderDirection4, doubleArray44); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertTrue("'" + orderDirection4 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection4.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection18 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection18.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray44); }
public void test0141() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0141"); int int1 = org.apache.commons.math.util.FastMath.round((float) (-680745026)); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-680745024) + "'", int1 == (-680745024)); }
public void test0142() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0142"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex4.acos(); java.lang.Object obj6 = complex4.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(obj6); org.junit.Assert.assertEquals(obj6.toString(), "(0.38535742648327137, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "(0.38535742648327137, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "(0.38535742648327137, 0.0)"); }
public void test0143() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0143"); double double1 = org.apache.commons.math.util.FastMath.expm1((double) 1219337025); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY); }
public void test0144() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0144"); java.math.BigInteger bigInteger0 = null; // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger2 = org.apache.commons.math.util.MathUtils.pow(bigInteger0, 96); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test0145() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0145"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((float) 126, (float) (byte) 100, (int) (byte) 1); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0146() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0146"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex0.sinh(); java.lang.Object obj18 = complex17.readResolve(); org.apache.commons.math.util.MathUtils.checkNotNull(obj18); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(obj18); org.junit.Assert.assertEquals(obj18.toString(), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "(1.1752011936438014, 0.0)"); }
public void test0147() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0147"); java.lang.Object obj0 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.checkNotNull(obj0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } }
public void test0148() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0148"); org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException3 = new org.apache.commons.math.exception.NumberIsTooLargeException((java.lang.Number) (-86L), (java.lang.Number) 22025.465794806718d, true); java.lang.Throwable[] throwableArray4 = numberIsTooLargeException3.getSuppressed(); java.lang.Number number5 = numberIsTooLargeException3.getArgument(); java.lang.Number number6 = numberIsTooLargeException3.getArgument(); org.junit.Assert.assertNotNull(throwableArray4); org.junit.Assert.assertEquals("'" + number5 + "' != '" + (-86L) + "'", number5, (-86L)); org.junit.Assert.assertEquals("'" + number6 + "' != '" + (-86L) + "'", number6, (-86L)); }
public void test0149() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0149"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equals((float) (byte) 0, (float) 0); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); }
public void test0150() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0150"); double double1 = org.apache.commons.math.util.FastMath.signum(101.00495037373169d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0151() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0151"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException4 = new org.apache.commons.math.exception.NumberIsTooLargeException(localizable0, (java.lang.Number) 8.065817517094494E67d, (java.lang.Number) 1.7720496304913849d, false); }
public void test0152() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0152"); int int3 = org.apache.commons.math.util.MathUtils.compareTo(4.932424148660941d, 0.6610060414837631d, (int) (short) 10); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1); }
public void test0153() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0153"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; double[] doubleArray7 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray9 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray7, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection10 = null; double[] doubleArray13 = new double[] { 0.0f, 0.0f }; double[] doubleArray16 = new double[] { 0.0f, 0.0f }; double[] doubleArray19 = new double[] { 0.0f, 0.0f }; double[] doubleArray22 = new double[] { 0.0f, 0.0f }; double[] doubleArray25 = new double[] { 0.0f, 0.0f }; double[][] doubleArray26 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray9, orderDirection10, doubleArray26); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable3, (java.lang.Object[]) doubleArray26); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException29 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable0, (java.lang.Number) 3.7632429002127764E77d, (java.lang.Object[]) doubleArray26); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray26); }
public void test0154() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0154"); // The following exception was thrown during execution in test generation try { int int2 = org.apache.commons.math.util.MathUtils.pow((int) (byte) 0, (long) (-680745024)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: exponent (-680,745,024)"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test0155() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0155"); double double1 = org.apache.commons.math.util.FastMath.log((double) 20); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.995732273553991d + "'", double1 == 2.995732273553991d); }
public void test0156() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0156"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray8 = new double[] { (-1), (byte) 100 }; double double9 = org.apache.commons.math.util.MathUtils.distance1(doubleArray5, doubleArray8); double[] doubleArray11 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 100); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray11); double[] doubleArray13 = null; double[] doubleArray17 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray19 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, (int) (short) 0); boolean boolean20 = org.apache.commons.math.util.MathUtils.equals(doubleArray13, doubleArray17); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); double[] doubleArray30 = new double[] { (-1), (byte) 100 }; double double31 = org.apache.commons.math.util.MathUtils.distance1(doubleArray27, doubleArray30); boolean boolean32 = org.apache.commons.math.util.MathUtils.equals(doubleArray21, doubleArray27); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray21); // The following exception was thrown during execution in test generation try { double double34 = org.apache.commons.math.util.MathUtils.distance1(doubleArray11, doubleArray21); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]"); org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false); }
public void test0157() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0157"); int int2 = org.apache.commons.math.util.FastMath.min((int) (byte) 0, (int) '4'); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test0158() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0158"); int int2 = org.apache.commons.math.util.MathUtils.pow(152, (long) (short) 100); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test0159() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0159"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); double double13 = complex12.getImaginary(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); }
public void test0160() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0160"); int int2 = org.apache.commons.math.util.MathUtils.pow(20, (int) (byte) 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0161() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0161"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException4 = new org.apache.commons.math.exception.NumberIsTooLargeException((java.lang.Number) (-86L), (java.lang.Number) 22025.465794806718d, true); java.lang.Throwable[] throwableArray5 = numberIsTooLargeException4.getSuppressed(); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException6 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) throwableArray5); org.apache.commons.math.exception.util.ExceptionContext exceptionContext7 = mathArithmeticException6.getContext(); org.junit.Assert.assertNotNull(throwableArray5); org.junit.Assert.assertNotNull(exceptionContext7); }
public void test0162() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0162"); long long1 = org.apache.commons.math.util.FastMath.round(1.1176233018673575E37d); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 9223372036854775807L + "'", long1 == 9223372036854775807L); }
public void test0163() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0163"); double double1 = org.apache.commons.math.util.FastMath.abs(2.718281828459045d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.718281828459045d + "'", double1 == 2.718281828459045d); }
public void test0164() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0164"); int int2 = org.apache.commons.math.util.FastMath.max((-680745026), 6); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6); }
public void test0165() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0165"); org.apache.commons.math.exception.util.Localizable localizable0 = null; java.lang.Number number2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) (-100L), number2, false); }
public void test0166() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0166"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); double double6 = complex4.getImaginary(); org.apache.commons.math.complex.Complex complex7 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex8 = complex4.multiply(complex7); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-0.0d) + "'", double6 == (-0.0d)); }
public void test0167() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0167"); int int2 = org.apache.commons.math.util.MathUtils.subAndCheck(10, 680745024); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-680745014) + "'", int2 == (-680745014)); }
public void test0168() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0168"); double double1 = org.apache.commons.math.util.FastMath.acosh(104.04806581575652d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 5.337977050883507d + "'", double1 == 5.337977050883507d); }
public void test0169() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0169"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); // The following exception was thrown during execution in test generation try { java.lang.String str60 = mathArithmeticException58.toString(); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); }
public void test0170() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0170"); org.apache.commons.math.exception.NullArgumentException nullArgumentException0 = new org.apache.commons.math.exception.NullArgumentException(); org.apache.commons.math.exception.util.Localizable localizable1 = null; org.apache.commons.math.exception.util.Localizable localizable2 = null; java.lang.Object[] objArray4 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException5 = new org.apache.commons.math.exception.MathArithmeticException(localizable2, objArray4); org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable1, objArray4); java.lang.Throwable throwable7 = mathIllegalArgumentException6.getException(); nullArgumentException0.addSuppressed((java.lang.Throwable) mathIllegalArgumentException6); java.lang.Throwable throwable9 = nullArgumentException0.getException(); org.junit.Assert.assertNotNull(objArray4); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[1.0]"); org.junit.Assert.assertNotNull(throwable7); org.junit.Assert.assertNotNull(throwable9); org.junit.Assert.assertEquals(throwable9.getLocalizedMessage(), "null is not allowed"); org.junit.Assert.assertEquals(throwable9.getMessage(), "null is not allowed"); org.junit.Assert.assertEquals(throwable9.toString(), "org.apache.commons.math.exception.NullArgumentException: null is not allowed"); }
public void test0171() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0171"); int int2 = org.apache.commons.math.util.MathUtils.pow((-680745026), (long) 20); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1475346432) + "'", int2 == (-1475346432)); }
public void test0172() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0172"); // The following exception was thrown during execution in test generation try { double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble((int) (short) -1, (int) (short) 0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: must have n >= k for binomial coefficient (n, k), got k = 0, n = -1"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } }
public void test0173() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0173"); int int2 = org.apache.commons.math.util.FastMath.max((int) (byte) -1, 1219337025); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1219337025 + "'", int2 == 1219337025); }
public void test0174() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0174"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.conjugate(); org.apache.commons.math.complex.Complex complex3 = complex2.cosh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test0175() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0175"); org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException3 = new org.apache.commons.math.exception.NumberIsTooLargeException((java.lang.Number) 1, (java.lang.Number) 1L, true); java.lang.Number number4 = numberIsTooLargeException3.getMax(); org.junit.Assert.assertEquals("'" + number4 + "' != '" + 1L + "'", number4, 1L); }
public void test0176() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0176"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex0.sinh(); org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.sin(); double double20 = complex19.getImaginary(); org.apache.commons.math.complex.Complex complex21 = complex19.exp(); org.apache.commons.math.complex.Complex complex22 = complex0.add(complex19); java.lang.String str23 = complex22.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(1.8414709848078965, 0.0)" + "'", str23, "(1.8414709848078965, 0.0)"); }
public void test0177() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0177"); java.math.BigInteger bigInteger0 = null; // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger2 = org.apache.commons.math.util.MathUtils.pow(bigInteger0, 1219337025); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test0178() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0178"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex1.atan(); org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z(); double double15 = complex14.getReal(); org.apache.commons.math.complex.Complex complex16 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex17 = complex14.multiply(complex16); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7146114112494588d + "'", double15 == 0.7146114112494588d); }
public void test0179() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0179"); double double1 = org.apache.commons.math.util.FastMath.acos(3.671661169604123E43d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0180() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0180"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex4 = complex2.subtract((double) (byte) 10); org.apache.commons.math.complex.Complex complex5 = complex0.multiply(complex4); double double6 = complex5.abs(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test0181() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0181"); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 318997151L); }
public void test0182() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0182"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray12 = new int[] { (byte) 100, 10 }; int[] intArray18 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double19 = org.apache.commons.math.util.MathUtils.distance(intArray12, intArray18); int int20 = org.apache.commons.math.util.MathUtils.distanceInf(intArray2, intArray18); int[] intArray23 = new int[] { (byte) 100, 10 }; int[] intArray29 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double30 = org.apache.commons.math.util.MathUtils.distance(intArray23, intArray29); int[] intArray32 = org.apache.commons.math.util.MathUtils.copyOf(intArray29, (int) (byte) 10); int int33 = org.apache.commons.math.util.MathUtils.distance1(intArray18, intArray29); int[] intArray36 = new int[] { (byte) 100, 10 }; int[] intArray42 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double43 = org.apache.commons.math.util.MathUtils.distance(intArray36, intArray42); int[] intArray46 = new int[] { (byte) 100, 10 }; int[] intArray52 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double53 = org.apache.commons.math.util.MathUtils.distance(intArray46, intArray52); int int54 = org.apache.commons.math.util.MathUtils.distanceInf(intArray36, intArray52); int int55 = org.apache.commons.math.util.MathUtils.distanceInf(intArray29, intArray52); org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10]"); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 104.04806581575652d + "'", double19 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 101 + "'", int20 == 101); org.junit.Assert.assertNotNull(intArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, 10]"); org.junit.Assert.assertNotNull(intArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 104.04806581575652d + "'", double30 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0); org.junit.Assert.assertNotNull(intArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[100, 10]"); org.junit.Assert.assertNotNull(intArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double43 + "' != '" + 104.04806581575652d + "'", double43 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[100, 10]"); org.junit.Assert.assertNotNull(intArray52); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double53 + "' != '" + 104.04806581575652d + "'", double53 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int54 + "' != '" + 101 + "'", int54 == 101); org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0); }
public void test0183() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0183"); int int1 = org.apache.commons.math.util.FastMath.round((float) '4'); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 52 + "'", int1 == 52); }
public void test0184() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0184"); double double1 = org.apache.commons.math.util.FastMath.sin(142.83907028540895d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-0.9946594505166131d) + "'", double1 == (-0.9946594505166131d)); }
public void test0185() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0185"); double double2 = org.apache.commons.math.util.FastMath.scalb((double) 318997151L, 0); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 3.18997151E8d + "'", double2 == 3.18997151E8d); }
public void test0186() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0186"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((float) 120L, (float) '#', 0); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0187() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0187"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getArgument(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow((double) 20); java.lang.String str7 = complex6.toString(); org.apache.commons.math.complex.Complex complex8 = complex1.add(complex6); java.lang.Class<?> wildcardClass9 = complex6.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(1.0, 0.0)" + "'", str7, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(wildcardClass9); }
public void test0188() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0188"); // The following exception was thrown during execution in test generation try { float float3 = org.apache.commons.math.util.MathUtils.round((float) ' ', 152, 152); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: invalid rounding method 152, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)"); } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) { // Expected exception. } }
public void test0189() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0189"); double double2 = org.apache.commons.math.util.FastMath.nextAfter((double) (-680745024), (double) '#'); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-6.807450239999999E8d) + "'", double2 == (-6.807450239999999E8d)); }
public void test0190() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0190"); org.apache.commons.math.exception.util.Localizable localizable2 = null; double[] doubleArray6 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray6, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection9 = null; double[] doubleArray12 = new double[] { 0.0f, 0.0f }; double[] doubleArray15 = new double[] { 0.0f, 0.0f }; double[] doubleArray18 = new double[] { 0.0f, 0.0f }; double[] doubleArray21 = new double[] { 0.0f, 0.0f }; double[] doubleArray24 = new double[] { 0.0f, 0.0f }; double[][] doubleArray25 = new double[][] { doubleArray12, doubleArray15, doubleArray18, doubleArray21, doubleArray24 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray8, orderDirection9, doubleArray25); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable2, (java.lang.Object[]) doubleArray25); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException28 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) (-1.0f), (java.lang.Object[]) doubleArray25); org.apache.commons.math.exception.util.ExceptionContext exceptionContext29 = notFiniteNumberException28.getContext(); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertNotNull(exceptionContext29); }
public void test0191() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0191"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex3 = complex1.subtract((double) (byte) 10); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) (byte) 10); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); }
public void test0192() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0192"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((float) (-1475346432), 0.0f, (int) (byte) -1); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0193() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0193"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray9 = null; double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); boolean boolean16 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray13); double[] doubleArray17 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13); double[] doubleArray21 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray23 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray21, (int) (short) 0); double[] doubleArray26 = new double[] { (-1), (byte) 100 }; double double27 = org.apache.commons.math.util.MathUtils.distance1(doubleArray23, doubleArray26); boolean boolean28 = org.apache.commons.math.util.MathUtils.equals(doubleArray17, doubleArray23); double[] doubleArray30 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 101); double double31 = org.apache.commons.math.util.MathUtils.distance(doubleArray8, doubleArray30); double[] doubleArray32 = null; // The following exception was thrown during execution in test generation try { double double33 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray8, doubleArray32); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d); }
public void test0194() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0194"); float float1 = org.apache.commons.math.util.MathUtils.sign((float) 680745143); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0195() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0195"); long long2 = org.apache.commons.math.util.FastMath.max(6L, 36L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 36L + "'", long2 == 36L); }
public void test0196() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0196"); int int3 = org.apache.commons.math.util.MathUtils.compareTo((double) (-1.4753463E9f), (double) 6.8074502E8f, (-1475346432)); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test0197() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0197"); double double2 = org.apache.commons.math.util.FastMath.pow(6.591783121186793E31d, 1.5163019408528369d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.7669158577947987E48d + "'", double2 == 1.7669158577947987E48d); }
public void test0198() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0198"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-3.141592653589793d), (double) (byte) 1); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField3 = complex2.getField(); org.apache.commons.math.complex.Complex complex4 = complexField3.getOne(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complexField3); org.junit.Assert.assertNotNull(complex4); }
public void test0199() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0199"); int int3 = org.apache.commons.math.util.MathUtils.compareTo(5.4338975249603854E-17d, 4.248699370183246d, 0.9234560495448352d); org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1)); }
public void test0200() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0200"); float float2 = org.apache.commons.math.util.MathUtils.round((float) '4', (-1)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 50.0f + "'", float2 == 50.0f); }
public void test0201() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0201"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex1.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex1.pow(complex5); boolean boolean8 = complex6.equals((java.lang.Object) 10L); double double9 = complex6.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false); org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.0d) + "'", double9 == (-1.0d)); }
public void test0202() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0202"); long long2 = org.apache.commons.math.util.FastMath.max(10L, (long) 5); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 10L + "'", long2 == 10L); }
public void test0203() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0203"); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection3 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException5 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 5, (java.lang.Number) 100.0f, (-1), orderDirection3, true); java.lang.Number number6 = nonMonotonousSequenceException5.getPrevious(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext7 = nonMonotonousSequenceException5.getContext(); java.lang.String str8 = nonMonotonousSequenceException5.toString(); org.junit.Assert.assertTrue("'" + orderDirection3 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection3.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 100.0f + "'", number6, 100.0f); org.junit.Assert.assertNotNull(exceptionContext7); org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.apache.commons.math.exception.NonMonotonousSequenceException: points -2 and -1 are not strictly increasing (100 >= 5)" + "'", str8, "org.apache.commons.math.exception.NonMonotonousSequenceException: points -2 and -1 are not strictly increasing (100 >= 5)"); }
public void test0204() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0204"); float float2 = org.apache.commons.math.util.FastMath.min((float) 1410065408, (-1.4753463E9f)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + (-1.4753463E9f) + "'", float2 == (-1.4753463E9f)); }
public void test0205() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0205"); double double1 = org.apache.commons.math.util.MathUtils.indicator(11013.243377745777d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0206() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0206"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex15.sqrt(); org.apache.commons.math.complex.Complex complex70 = complex15.add((double) (short) 0); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertNotNull(complex70); }
public void test0207() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0207"); org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException3 = new org.apache.commons.math.exception.NumberIsTooLargeException((java.lang.Number) 0.0f, (java.lang.Number) 2.3721732428803253E211d, false); }
public void test0208() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0208"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(2.0d, 200.0d); org.junit.Assert.assertNotNull(complex2); }
public void test0209() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0209"); double double1 = org.apache.commons.math.util.FastMath.asin((double) 1.4E-45f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.401298464324817E-45d + "'", double1 == 1.401298464324817E-45d); }
public void test0210() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0210"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); org.apache.commons.math.complex.Complex complex4 = complex0.exp(); double double5 = complex0.abs(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); }
public void test0211() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0211"); double double1 = org.apache.commons.math.util.FastMath.sqrt((double) 30L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 5.477225575051661d + "'", double1 == 5.477225575051661d); }
public void test0212() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0212"); long long2 = org.apache.commons.math.util.MathUtils.mulAndCheck((long) 'a', (long) (short) 0); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test0213() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0213"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 100); boolean boolean21 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray20); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); double[] doubleArray29 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray27, 0); boolean boolean30 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray29); double[] doubleArray31 = null; double[] doubleArray35 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray37 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray35, (int) (short) 0); boolean boolean38 = org.apache.commons.math.util.MathUtils.equals(doubleArray31, doubleArray35); double[] doubleArray39 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray35); double[] doubleArray43 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray45 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray43, (int) (short) 0); double[] doubleArray48 = new double[] { (-1), (byte) 100 }; double double49 = org.apache.commons.math.util.MathUtils.distance1(doubleArray45, doubleArray48); double[] doubleArray51 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray48, 100); boolean boolean52 = org.apache.commons.math.util.MathUtils.equals(doubleArray39, doubleArray51); double[] doubleArray56 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray58 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray56, (int) (short) 0); double[] doubleArray60 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray58, 0); boolean boolean61 = org.apache.commons.math.util.MathUtils.equals(doubleArray39, doubleArray60); double[] doubleArray65 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray67 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray65, (int) (short) 0); double double68 = org.apache.commons.math.util.MathUtils.distance(doubleArray60, doubleArray65); double double69 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray8, doubleArray65); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection73 = org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException75 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 1.4E-45f, (java.lang.Number) 10.000000000000002d, 5, orderDirection73, false); boolean boolean78 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray8, orderDirection73, true, false); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]"); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(doubleArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]"); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]"); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection73 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING + "'", orderDirection73.equals(org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING)); org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false); }
public void test0214() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0214"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); org.apache.commons.math.complex.Complex complex4 = complex0.tanh(); org.apache.commons.math.complex.Complex complex5 = complex0.sin(); java.lang.Object obj6 = complex0.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(obj6); org.junit.Assert.assertEquals(obj6.toString(), "(1.0, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "(1.0, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "(1.0, 0.0)"); }
public void test0215() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0215"); short short1 = org.apache.commons.math.util.MathUtils.sign((short) (byte) 0); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test0216() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0216"); double double1 = org.apache.commons.math.util.FastMath.rint((double) 1079574528); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.079574528E9d + "'", double1 == 1.079574528E9d); }
public void test0217() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0217"); int int2 = org.apache.commons.math.util.FastMath.max((int) (byte) -1, 680745024); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 680745024 + "'", int2 == 680745024); }
public void test0218() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0218"); double double1 = org.apache.commons.math.util.FastMath.exp(5.916080105500369d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 370.95475667220734d + "'", double1 == 370.95475667220734d); }
public void test0219() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0219"); double double8 = org.apache.commons.math.util.MathUtils.linearCombination((double) 318997151L, 0.6610060414837632d, 2.2798941413369007E10d, 1.1176233018673575E37d, 2.3721732428803253E211d, 1.530112122701651d, Double.NEGATIVE_INFINITY, (double) 35L); org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.NEGATIVE_INFINITY + "'", double8 == Double.NEGATIVE_INFINITY); }
public void test0220() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0220"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(0.0f, 0.0f, (int) (short) 1); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true); }
public void test0221() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0221"); java.math.BigInteger bigInteger0 = null; // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger2 = org.apache.commons.math.util.MathUtils.pow(bigInteger0, (-680745024)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: exponent (-680,745,024)"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test0222() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0222"); float float1 = org.apache.commons.math.util.FastMath.nextUp((float) (-1L)); org.junit.Assert.assertTrue("'" + float1 + "' != '" + (-0.99999994f) + "'", float1 == (-0.99999994f)); }
public void test0223() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0223"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex61 = complex60.negate(); org.apache.commons.math.complex.Complex complex63 = complex61.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex65 = complex64.negate(); org.apache.commons.math.complex.Complex complex66 = complex61.pow(complex65); org.apache.commons.math.complex.Complex complex67 = complex15.divide(complex65); org.apache.commons.math.complex.Complex complex68 = complex15.sqrt(); boolean boolean69 = complex68.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(complex60); org.junit.Assert.assertNotNull(complex61); org.junit.Assert.assertNotNull(complex63); org.junit.Assert.assertNotNull(complex64); org.junit.Assert.assertNotNull(complex65); org.junit.Assert.assertNotNull(complex66); org.junit.Assert.assertNotNull(complex67); org.junit.Assert.assertNotNull(complex68); org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false); }
public void test0224() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0224"); double double1 = org.apache.commons.math.util.MathUtils.sign(4.932424148660941d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0225() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0225"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray14); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8); double[] doubleArray21 = null; boolean boolean22 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray21); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection23 = org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING; org.apache.commons.math.exception.util.Localizable localizable25 = null; double[] doubleArray29 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray31 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray29, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection32 = null; double[] doubleArray35 = new double[] { 0.0f, 0.0f }; double[] doubleArray38 = new double[] { 0.0f, 0.0f }; double[] doubleArray41 = new double[] { 0.0f, 0.0f }; double[] doubleArray44 = new double[] { 0.0f, 0.0f }; double[] doubleArray47 = new double[] { 0.0f, 0.0f }; double[][] doubleArray48 = new double[][] { doubleArray35, doubleArray38, doubleArray41, doubleArray44, doubleArray47 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray31, orderDirection32, doubleArray48); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable25, (java.lang.Object[]) doubleArray48); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray8, orderDirection23, doubleArray48); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 2 != 3"); } catch (org.apache.commons.math.exception.DimensionMismatchException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false); org.junit.Assert.assertTrue("'" + orderDirection23 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING + "'", orderDirection23.equals(org.apache.commons.math.util.MathUtils.OrderDirection.DECREASING)); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray44); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); }
public void test0226() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0226"); int int1 = org.apache.commons.math.util.FastMath.getExponent(2.0452919197856156E14d); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 47 + "'", int1 == 47); }
public void test0227() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0227"); double double6 = org.apache.commons.math.util.MathUtils.linearCombination(3.671661169604123E43d, 0.9925470042066498d, (double) Float.NaN, (double) 760L, (double) 'a', 0.999953813823498d); org.junit.Assert.assertTrue(Double.isNaN(double6)); }
public void test0228() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0228"); double double1 = org.apache.commons.math.util.MathUtils.sinh((double) 35.000004f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 7.930097512430751E14d + "'", double1 == 7.930097512430751E14d); }
public void test0229() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0229"); long long2 = org.apache.commons.math.util.MathUtils.pow((long) (byte) -1, 152L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L); }
public void test0230() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0230"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex4.cosh(); java.lang.Object obj6 = complex4.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(obj6); org.junit.Assert.assertEquals(obj6.toString(), "(0.3981570232861697, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "(0.3981570232861697, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "(0.3981570232861697, 0.0)"); }
public void test0231() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0231"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sin(); double double4 = complex3.getImaginary(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex3); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex6); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex9.sinh(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = complex10.pow(complex12); org.apache.commons.math.complex.Complex complex16 = complex12.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex17 = complex6.divide(complex12); org.apache.commons.math.complex.Complex complex18 = complex17.sinh(); java.lang.String str19 = complex18.toString(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(0.0, -0.0)" + "'", str19, "(0.0, -0.0)"); }
public void test0232() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0232"); long long1 = org.apache.commons.math.util.MathUtils.sign((-86L)); org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L)); }
public void test0233() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0233"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); java.lang.Class<?> wildcardClass13 = complex11.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(wildcardClass13); }
public void test0234() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0234"); double double1 = org.apache.commons.math.util.MathUtils.cosh((double) (byte) 1); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.5430806348152437d + "'", double1 == 1.5430806348152437d); }
public void test0235() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0235"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) 318997151, (double) 520); org.junit.Assert.assertNotNull(complex2); }
public void test0236() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0236"); double[] doubleArray0 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray2 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray0, (-1944488865)); org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null"); } catch (java.lang.NegativeArraySizeException e) { // Expected exception. } }
public void test0237() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0237"); double[] doubleArray6 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray6); double double8 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray6); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 149.164338901763d + "'", double8 == 149.164338901763d); }
public void test0238() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0238"); // The following exception was thrown during execution in test generation try { double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientLog(100, 1410065408); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: must have n >= k for binomial coefficient (n, k), got k = 1,410,065,408, n = 100"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } }
public void test0239() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0239"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 50.0f, (java.lang.Number) (short) 100, true); }
public void test0240() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0240"); double double1 = org.apache.commons.math.util.MathUtils.indicator(66.97680939587865d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0241() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0241"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); boolean boolean3 = complex0.isNaN(); org.apache.commons.math.complex.Complex complex5 = complex0.add((double) 6.591783E31f); double double6 = complex5.getArgument(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d); }
public void test0242() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0242"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((double) 388L, (double) 47); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0243() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0243"); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection3 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException5 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 5, (java.lang.Number) 100.0f, (-1), orderDirection3, true); java.lang.Number number6 = nonMonotonousSequenceException5.getPrevious(); java.lang.Number number7 = nonMonotonousSequenceException5.getPrevious(); boolean boolean8 = nonMonotonousSequenceException5.getStrict(); org.junit.Assert.assertTrue("'" + orderDirection3 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection3.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 100.0f + "'", number6, 100.0f); org.junit.Assert.assertEquals("'" + number7 + "' != '" + 100.0f + "'", number7, 100.0f); org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true); }
public void test0244() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0244"); float float2 = org.apache.commons.math.util.MathUtils.round(10.000001f, 0); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 10.0f + "'", float2 == 10.0f); }
public void test0245() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0245"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray14); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray8); double[] doubleArray22 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray8, 0.0d); double[] doubleArray29 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray29); double[] doubleArray32 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray29, 6); boolean boolean33 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray32); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.checkOrder(doubleArray8); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NonMonotonousSequenceException; message: points 0 and 1 are not strictly increasing (100 >= -1)"); } catch (org.apache.commons.math.exception.NonMonotonousSequenceException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, -0.0, -0.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); }
public void test0246() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0246"); double double2 = org.apache.commons.math.util.FastMath.copySign((double) '4', 544.656365691809d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 52.0d + "'", double2 == 52.0d); }
public void test0247() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0247"); double double1 = org.apache.commons.math.util.FastMath.acosh(1.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0248() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0248"); org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException3 = new org.apache.commons.math.exception.NumberIsTooLargeException((java.lang.Number) 1, (java.lang.Number) 1L, true); java.lang.Number number4 = numberIsTooLargeException3.getArgument(); java.lang.Number number5 = numberIsTooLargeException3.getMax(); java.lang.Number number6 = numberIsTooLargeException3.getArgument(); org.junit.Assert.assertEquals("'" + number4 + "' != '" + 1 + "'", number4, 1); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 1L + "'", number5, 1L); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 1 + "'", number6, 1); }
public void test0249() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0249"); org.apache.commons.math.util.MathUtils.checkFinite((-0.014112307511333414d)); }
public void test0250() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0250"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex5.pow(complex9); boolean boolean11 = complex9.isInfinite(); org.apache.commons.math.complex.Complex complex12 = complex3.pow(complex9); org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex14 = complex13.negate(); org.apache.commons.math.complex.Complex complex15 = complex14.sinh(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex17 = complex16.negate(); org.apache.commons.math.complex.Complex complex18 = complex15.pow(complex17); org.apache.commons.math.complex.Complex complex21 = complex17.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex24 = complex23.sin(); double double25 = complex24.getArgument(); org.apache.commons.math.complex.Complex complex26 = complex21.multiply(complex24); org.apache.commons.math.complex.Complex complex27 = complex24.sin(); java.util.List<org.apache.commons.math.complex.Complex> complexList29 = complex24.nthRoot(126); org.apache.commons.math.complex.Complex complex30 = complex12.subtract(complex24); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complexList29); org.junit.Assert.assertNotNull(complex30); }
public void test0251() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0251"); double double1 = org.apache.commons.math.util.FastMath.floor((double) 35); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 35.0d + "'", double1 == 35.0d); }
public void test0252() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0252"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex3.sinh(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex4.pow(complex6); org.apache.commons.math.complex.Complex complex10 = complex6.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.sin(); double double14 = complex13.getArgument(); org.apache.commons.math.complex.Complex complex15 = complex10.multiply(complex13); org.apache.commons.math.complex.Complex complex16 = complex15.tanh(); boolean boolean17 = complex0.equals((java.lang.Object) complex15); org.apache.commons.math.exception.util.Localizable localizable18 = null; double[] doubleArray22 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray24 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray22, (int) (short) 0); double[] doubleArray27 = new double[] { (-1), (byte) 100 }; double double28 = org.apache.commons.math.util.MathUtils.distance1(doubleArray24, doubleArray27); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection29 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean32 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray27, orderDirection29, false, true); double[] doubleArray36 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray38 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray36, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection39 = null; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[] doubleArray48 = new double[] { 0.0f, 0.0f }; double[] doubleArray51 = new double[] { 0.0f, 0.0f }; double[] doubleArray54 = new double[] { 0.0f, 0.0f }; double[][] doubleArray55 = new double[][] { doubleArray42, doubleArray45, doubleArray48, doubleArray51, doubleArray54 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray38, orderDirection39, doubleArray55); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray27, doubleArray55); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException58 = new org.apache.commons.math.exception.MathArithmeticException(localizable18, (java.lang.Object[]) doubleArray55); boolean boolean59 = complex15.equals((java.lang.Object) mathArithmeticException58); org.apache.commons.math.exception.util.ExceptionContext exceptionContext60 = mathArithmeticException58.getContext(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection29 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection29.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(exceptionContext60); }
public void test0253() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0253"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (byte) 100); boolean boolean2 = notPositiveException1.getBoundIsAllowed(); java.lang.Number number3 = notPositiveException1.getMin(); boolean boolean4 = notPositiveException1.getBoundIsAllowed(); org.apache.commons.math.exception.NotPositiveException notPositiveException6 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) (byte) 100); boolean boolean7 = notPositiveException6.getBoundIsAllowed(); java.lang.Number number8 = notPositiveException6.getMin(); notPositiveException1.addSuppressed((java.lang.Throwable) notPositiveException6); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true); org.junit.Assert.assertEquals("'" + number3 + "' != '" + 0 + "'", number3, 0); org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true); org.junit.Assert.assertEquals("'" + number8 + "' != '" + 0 + "'", number8, 0); }
public void test0254() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0254"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray11 = org.apache.commons.math.util.MathUtils.copyOf(intArray8, (int) (byte) 10); int[] intArray14 = new int[] { (byte) 100, 10 }; int[] intArray20 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double21 = org.apache.commons.math.util.MathUtils.distance(intArray14, intArray20); int[] intArray24 = new int[] { (byte) 100, 10 }; int[] intArray30 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double31 = org.apache.commons.math.util.MathUtils.distance(intArray24, intArray30); double double32 = org.apache.commons.math.util.MathUtils.distance(intArray20, intArray30); int[] intArray33 = org.apache.commons.math.util.MathUtils.copyOf(intArray20); double double34 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray33); org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[100, 10]"); org.junit.Assert.assertNotNull(intArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 104.04806581575652d + "'", double21 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 10]"); org.junit.Assert.assertNotNull(intArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 104.04806581575652d + "'", double31 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(intArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d); }
public void test0255() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0255"); int int2 = org.apache.commons.math.util.MathUtils.lcm(0, (int) (short) 100); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test0256() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0256"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable1 = null; double[] doubleArray5 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, (int) (short) 0); double[] doubleArray10 = new double[] { (-1), (byte) 100 }; double double11 = org.apache.commons.math.util.MathUtils.distance1(doubleArray7, doubleArray10); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection12 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean15 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray10, orderDirection12, false, true); double[] doubleArray19 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray19, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection22 = null; double[] doubleArray25 = new double[] { 0.0f, 0.0f }; double[] doubleArray28 = new double[] { 0.0f, 0.0f }; double[] doubleArray31 = new double[] { 0.0f, 0.0f }; double[] doubleArray34 = new double[] { 0.0f, 0.0f }; double[] doubleArray37 = new double[] { 0.0f, 0.0f }; double[][] doubleArray38 = new double[][] { doubleArray25, doubleArray28, doubleArray31, doubleArray34, doubleArray37 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray21, orderDirection22, doubleArray38); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray10, doubleArray38); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException41 = new org.apache.commons.math.exception.MathArithmeticException(localizable1, (java.lang.Object[]) doubleArray38); org.apache.commons.math.exception.NullArgumentException nullArgumentException42 = new org.apache.commons.math.exception.NullArgumentException(localizable0, (java.lang.Object[]) doubleArray38); java.lang.Class<?> wildcardClass43 = doubleArray38.getClass(); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertNotNull(doubleArray10); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection12 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection12.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray31); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertNotNull(wildcardClass43); }
public void test0257() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0257"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex1.atan(); org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z(); double double15 = complex14.getReal(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); org.apache.commons.math.complex.Complex complex17 = complex14.negate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7146114112494588d + "'", double15 == 0.7146114112494588d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); }
public void test0258() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0258"); double double2 = org.apache.commons.math.util.FastMath.copySign((double) 6.591783E31f, (double) 6.591783E31f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 6.591783121186793E31d + "'", double2 == 6.591783121186793E31d); }
public void test0259() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0259"); double double4 = org.apache.commons.math.util.MathUtils.linearCombination(0.6610060414837632d, (double) 35.000008f, (double) (-1.0f), 26091.932402565264d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-26068.797186070256d) + "'", double4 == (-26068.797186070256d)); }
public void test0260() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0260"); double double1 = org.apache.commons.math.util.FastMath.expm1(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0261() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0261"); int int1 = org.apache.commons.math.util.MathUtils.indicator(35); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0262() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0262"); int int2 = org.apache.commons.math.util.FastMath.min(63, 1073741824); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 63 + "'", int2 == 63); }
public void test0263() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0263"); double double1 = org.apache.commons.math.util.FastMath.atanh(4.932424148660941d); org.junit.Assert.assertTrue(Double.isNaN(double1)); }
public void test0264() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0264"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 0.7146114112494588d, (java.lang.Number) 0.5496225549463801d, (-680745013)); int int4 = nonMonotonousSequenceException3.getIndex(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-680745013) + "'", int4 == (-680745013)); }
public void test0265() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0265"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex4 = complex1.subtract(complex3); org.apache.commons.math.complex.Complex complex5 = complex3.cosh(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test0266() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0266"); double double1 = org.apache.commons.math.util.FastMath.tanh((double) 1219337025); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0267() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0267"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(0.0d, 0.0d); }
public void test0268() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0268"); double double2 = org.apache.commons.math.util.FastMath.scalb((double) 1.07957453E9f, 702); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.271483493251976E220d + "'", double2 == 2.271483493251976E220d); }
public void test0269() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0269"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray8 = new double[] { (-1), (byte) 100 }; double double9 = org.apache.commons.math.util.MathUtils.distance1(doubleArray5, doubleArray8); double[] doubleArray10 = null; // The following exception was thrown during execution in test generation try { double double11 = org.apache.commons.math.util.MathUtils.distance(doubleArray8, doubleArray10); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); }
public void test0270() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0270"); double double4 = org.apache.commons.math.util.MathUtils.linearCombination((double) (byte) -1, (double) 2.5353012E32f, (-3.6338013156151414E9d), 1.0d); org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-2.5353012004564588E32d) + "'", double4 == (-2.5353012004564588E32d)); }
public void test0271() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0271"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.util.Localizable localizable3 = null; double[] doubleArray7 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray9 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray7, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection10 = null; double[] doubleArray13 = new double[] { 0.0f, 0.0f }; double[] doubleArray16 = new double[] { 0.0f, 0.0f }; double[] doubleArray19 = new double[] { 0.0f, 0.0f }; double[] doubleArray22 = new double[] { 0.0f, 0.0f }; double[] doubleArray25 = new double[] { 0.0f, 0.0f }; double[][] doubleArray26 = new double[][] { doubleArray13, doubleArray16, doubleArray19, doubleArray22, doubleArray25 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray9, orderDirection10, doubleArray26); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable3, (java.lang.Object[]) doubleArray26); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException29 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) (-1.0f), (java.lang.Object[]) doubleArray26); org.apache.commons.math.exception.NullArgumentException nullArgumentException30 = new org.apache.commons.math.exception.NullArgumentException(localizable0, (java.lang.Object[]) doubleArray26); java.lang.Throwable[] throwableArray31 = nullArgumentException30.getSuppressed(); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray22); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertNotNull(throwableArray31); }
public void test0272() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0272"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equals((float) 260, (float) 35L); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0273() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0273"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.sqrt(); org.apache.commons.math.complex.Complex complex5 = complex3.log(); org.apache.commons.math.complex.Complex complex6 = complex0.add(complex3); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex10 = complex7.pow((double) 20); org.apache.commons.math.complex.Complex complex11 = complex7.exp(); org.apache.commons.math.complex.Complex complex12 = complex0.subtract(complex7); boolean boolean13 = complex7.isNaN(); double double14 = complex7.getReal(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.valueOf(6880.817293923487d, 4.795790545596741d); org.apache.commons.math.complex.Complex complex18 = complex7.multiply(complex17); java.lang.Object obj19 = complex18.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false); org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(obj19); org.junit.Assert.assertEquals(obj19.toString(), "(6880.817293923487, 4.795790545596741)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "(6880.817293923487, 4.795790545596741)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "(6880.817293923487, 4.795790545596741)"); }
public void test0274() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0274"); int int2 = org.apache.commons.math.util.MathUtils.mulAndCheck(260, 152); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39520 + "'", int2 == 39520); }
public void test0275() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0275"); double double1 = org.apache.commons.math.util.FastMath.expm1(1.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.7182818284590453d + "'", double1 == 1.7182818284590453d); }
public void test0276() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0276"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((double) (short) 10); org.apache.commons.math.complex.Complex complex4 = complex2.subtract((double) (byte) 10); org.apache.commons.math.complex.Complex complex5 = complex0.multiply(complex4); boolean boolean6 = complex5.isInfinite(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); }
public void test0277() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0277"); double double1 = org.apache.commons.math.util.FastMath.toRadians(1.266387365957045d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.022102629141608786d + "'", double1 == 0.022102629141608786d); }
public void test0278() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0278"); short short1 = org.apache.commons.math.util.MathUtils.sign((short) 0); org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 0 + "'", short1 == (short) 0); }
public void test0279() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0279"); // The following exception was thrown during execution in test generation try { double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(20, (int) ' '); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: must have n >= k for binomial coefficient (n, k), got k = 32, n = 20"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } }
public void test0280() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0280"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(152.0f, (float) (-680745014L), 1219337025); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0281() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0281"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex3 = complex0.divide((double) (-1)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); }
public void test0282() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0282"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(5.337977050883507d, 2.2250738585072014E-308d, (-0.6276125002048193d)); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0283() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0283"); double double2 = org.apache.commons.math.util.FastMath.max((-26068.797186070256d), 1.079574528E9d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.079574528E9d + "'", double2 == 1.079574528E9d); }
public void test0284() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0284"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO; org.apache.commons.math.complex.Complex complex3 = complex0.createComplex(0.9919317346815598d, 1.0d); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); double double5 = complex3.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.9919317346815598d + "'", double5 == 0.9919317346815598d); }
public void test0285() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0285"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray6, 0); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray8); // The following exception was thrown during execution in test generation try { double double10 = org.apache.commons.math.util.MathUtils.linearCombination(doubleArray0, doubleArray8); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]"); }
public void test0286() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0286"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex7 = complex6.tan(); org.apache.commons.math.complex.Complex complex8 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex9 = complex7.subtract(complex8); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test0287() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0287"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equals(0.0f, (float) 760L); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0288() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0288"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((float) (-680745014), 35.000004f, (float) (-86L)); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0289() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0289"); float float1 = org.apache.commons.math.util.FastMath.ulp(760.0f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 6.1035156E-5f + "'", float1 == 6.1035156E-5f); }
public void test0290() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0290"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((float) (byte) 100, (float) (-680745014L), (float) (-86L)); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0291() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0291"); double double1 = org.apache.commons.math.util.FastMath.toRadians((double) (byte) 1); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.017453292519943295d + "'", double1 == 0.017453292519943295d); }
public void test0292() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0292"); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection3 = null; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException5 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (byte) 100, (java.lang.Number) 2.718281828459045d, (int) '4', orderDirection3, true); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = nonMonotonousSequenceException5.getContext(); org.junit.Assert.assertNotNull(exceptionContext6); }
public void test0293() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0293"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(0.9991725119165937d, (-100.0d), (int) (short) -1); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0294() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0294"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException3 = new org.apache.commons.math.exception.DimensionMismatchException(localizable0, 1219337025, 1219337025); }
public void test0295() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0295"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex8 = complex6.multiply((double) (-1.0f)); double double9 = complex8.getArgument(); org.apache.commons.math.complex.Complex complex10 = complex8.sin(); org.apache.commons.math.complex.Complex complex12 = complex8.pow((-0.41036740004704136d)); org.apache.commons.math.complex.Complex complex13 = complex4.multiply(complex12); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); }
public void test0296() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0296"); long long2 = org.apache.commons.math.util.MathUtils.pow(9223372036854775807L, 20L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L); }
public void test0297() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0297"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1000000L); org.junit.Assert.assertNotNull(complex1); }
public void test0298() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0298"); double double2 = org.apache.commons.math.util.FastMath.nextAfter((double) (-86L), 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-85.99999999999999d) + "'", double2 == (-85.99999999999999d)); }
public void test0299() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0299"); double double1 = org.apache.commons.math.util.FastMath.sinh((double) (-1475346432)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.NEGATIVE_INFINITY + "'", double1 == Double.NEGATIVE_INFINITY); }
public void test0300() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0300"); long long1 = org.apache.commons.math.util.FastMath.round(0.0d); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L); }
public void test0301() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0301"); int int2 = org.apache.commons.math.util.MathUtils.gcd(30, 20); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10); }
public void test0302() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0302"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(152.0d, 1.1176233018673575E37d, 20); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0303() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0303"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.conjugate(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) (-1944488865)); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); }
public void test0304() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0304"); double double2 = org.apache.commons.math.util.MathUtils.round(0.0d, 63); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test0305() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0305"); org.apache.commons.math.exception.util.Localizable localizable0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); double[] doubleArray9 = new double[] { (-1), (byte) 100 }; double double10 = org.apache.commons.math.util.MathUtils.distance1(doubleArray6, doubleArray9); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection11 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean14 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray9, orderDirection11, false, true); double[] doubleArray18 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray18, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection21 = null; double[] doubleArray24 = new double[] { 0.0f, 0.0f }; double[] doubleArray27 = new double[] { 0.0f, 0.0f }; double[] doubleArray30 = new double[] { 0.0f, 0.0f }; double[] doubleArray33 = new double[] { 0.0f, 0.0f }; double[] doubleArray36 = new double[] { 0.0f, 0.0f }; double[][] doubleArray37 = new double[][] { doubleArray24, doubleArray27, doubleArray30, doubleArray33, doubleArray36 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray20, orderDirection21, doubleArray37); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray9, doubleArray37); org.apache.commons.math.exception.MathArithmeticException mathArithmeticException40 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, (java.lang.Object[]) doubleArray37); java.lang.Throwable[] throwableArray41 = mathArithmeticException40.getSuppressed(); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection11 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection11.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]"); org.junit.Assert.assertNotNull(doubleArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertNotNull(throwableArray41); }
public void test0306() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0306"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complex5.cos(); org.apache.commons.math.complex.Complex complex7 = complex6.acos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); }
public void test0307() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0307"); int int2 = org.apache.commons.math.util.FastMath.max((-1), (-49)); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1)); }
public void test0308() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0308"); double double1 = org.apache.commons.math.util.MathUtils.indicator((double) 9223372036854775807L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0309() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0309"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals(0.7456241416655579d, (double) 6.591783E31f, 2.0452919197856156E14d); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0310() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0310"); // The following exception was thrown during execution in test generation try { long long1 = org.apache.commons.math.util.MathUtils.factorial((int) 'a'); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathArithmeticException; message: arithmetic exception"); } catch (org.apache.commons.math.exception.MathArithmeticException e) { // Expected exception. } }
public void test0311() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0311"); long long2 = org.apache.commons.math.util.MathUtils.pow((long) 126, (long) 35); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1083460991393464320L) + "'", long2 == (-1083460991393464320L)); }
public void test0312() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0312"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((double) 9, 2.4516735496323845E236d); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0313() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0313"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.conjugate(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow((double) 20); org.apache.commons.math.complex.Complex complex7 = complex3.tanh(); org.apache.commons.math.complex.Complex complex9 = complex3.add(0.0d); org.apache.commons.math.complex.Complex complex10 = complex2.multiply(complex3); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test0314() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0314"); double double2 = org.apache.commons.math.util.MathUtils.round(0.0d, 0); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test0315() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0315"); long long1 = org.apache.commons.math.util.MathUtils.sign((long) (byte) -1); org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L)); }
public void test0316() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0316"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 35.000004f); org.apache.commons.math.exception.util.Localizable localizable2 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException4 = new org.apache.commons.math.exception.NotPositiveException(localizable2, (java.lang.Number) 104.04806581575652d); notPositiveException1.addSuppressed((java.lang.Throwable) notPositiveException4); java.lang.Number number6 = notPositiveException1.getMin(); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 0 + "'", number6, 0); }
public void test0317() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0317"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(101.00495037373169d); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex1.getField(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList4 = complex1.nthRoot((-1810677121)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -1,810,677,121"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); }
public void test0318() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0318"); int int2 = org.apache.commons.math.util.MathUtils.pow((-49), (long) 30); org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-422604639) + "'", int2 == (-422604639)); }
public void test0319() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0319"); org.apache.commons.math.exception.util.Localizable localizable0 = null; java.lang.Object[] objArray1 = null; org.apache.commons.math.exception.NullArgumentException nullArgumentException2 = new org.apache.commons.math.exception.NullArgumentException(localizable0, objArray1); org.apache.commons.math.exception.util.ExceptionContext exceptionContext3 = nullArgumentException2.getContext(); org.junit.Assert.assertNotNull(exceptionContext3); }
public void test0320() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0320"); float float2 = org.apache.commons.math.util.MathUtils.round((float) 520, (-1)); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 520.0f + "'", float2 == 520.0f); }
public void test0321() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0321"); int int2 = org.apache.commons.math.util.MathUtils.pow(126, (int) (byte) 100); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test0322() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0322"); int int1 = org.apache.commons.math.util.MathUtils.indicator((int) (byte) 100); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1); }
public void test0323() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0323"); double double1 = org.apache.commons.math.util.FastMath.sqrt((double) 4L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.0d + "'", double1 == 2.0d); }
public void test0324() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0324"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException3 = new org.apache.commons.math.exception.DimensionMismatchException(localizable0, 52, 5); }
public void test0325() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0325"); double double1 = org.apache.commons.math.util.FastMath.toRadians(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0326() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0326"); double double1 = org.apache.commons.math.util.FastMath.asinh(720.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 7.272398874822784d + "'", double1 == 7.272398874822784d); }
public void test0327() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0327"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException4 = new org.apache.commons.math.exception.NumberIsTooLargeException(localizable0, (java.lang.Number) 1.0822192086209258E135d, (java.lang.Number) (-680745013), false); }
public void test0328() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0328"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex7 = complex5.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex5.pow(complex9); boolean boolean11 = complex9.isInfinite(); org.apache.commons.math.complex.Complex complex12 = complex3.pow(complex9); java.lang.String str13 = complex3.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(0.9173172759781081, 0.0)" + "'", str13, "(0.9173172759781081, 0.0)"); }
public void test0329() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0329"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 1.5301121227016508d, (java.lang.Number) 6.591783121186793E31d, 0); java.lang.Number number4 = nonMonotonousSequenceException3.getPrevious(); org.junit.Assert.assertEquals("'" + number4 + "' != '" + 6.591783121186793E31d + "'", number4, 6.591783121186793E31d); }
public void test0330() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0330"); float[] floatArray6 = new float[] { 0, 10240.0f, (byte) 0, (short) 0, ' ', 1.0f }; float[] floatArray13 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray16 = new float[] { ' ', 10240.0f }; boolean boolean17 = org.apache.commons.math.util.MathUtils.equals(floatArray13, floatArray16); boolean boolean18 = org.apache.commons.math.util.MathUtils.equals(floatArray6, floatArray13); float[] floatArray25 = new float[] { 101, 0, 10.0f, (short) 10, 10240.0f, (short) 1 }; boolean boolean26 = org.apache.commons.math.util.MathUtils.equals(floatArray6, floatArray25); float[] floatArray33 = new float[] { 0, 10240.0f, (byte) 0, (short) 0, ' ', 1.0f }; float[] floatArray40 = new float[] { 1079574528, 1079574528, 10.0f, (byte) 10, (byte) 10, 'a' }; float[] floatArray43 = new float[] { ' ', 10240.0f }; boolean boolean44 = org.apache.commons.math.util.MathUtils.equals(floatArray40, floatArray43); boolean boolean45 = org.apache.commons.math.util.MathUtils.equals(floatArray33, floatArray40); boolean boolean46 = org.apache.commons.math.util.MathUtils.equals(floatArray25, floatArray33); org.junit.Assert.assertNotNull(floatArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[0.0, 10240.0, 0.0, 0.0, 32.0, 1.0]"); org.junit.Assert.assertNotNull(floatArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(floatArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[101.0, 0.0, 10.0, 10.0, 10240.0, 1.0]"); org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false); org.junit.Assert.assertNotNull(floatArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[0.0, 10240.0, 0.0, 0.0, 32.0, 1.0]"); org.junit.Assert.assertNotNull(floatArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[1.07957453E9, 1.07957453E9, 10.0, 10.0, 10.0, 97.0]"); org.junit.Assert.assertNotNull(floatArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[32.0, 10240.0]"); org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false); org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); }
public void test0331() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0331"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray9 = null; double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); boolean boolean16 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray13); double[] doubleArray17 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13); double[] doubleArray21 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray23 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray21, (int) (short) 0); double[] doubleArray26 = new double[] { (-1), (byte) 100 }; double double27 = org.apache.commons.math.util.MathUtils.distance1(doubleArray23, doubleArray26); boolean boolean28 = org.apache.commons.math.util.MathUtils.equals(doubleArray17, doubleArray23); double[] doubleArray30 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 101); boolean boolean31 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray8, doubleArray17); double[] doubleArray38 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray40 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray38, (int) (short) 0); double[] doubleArray43 = new double[] { (-1), (byte) 100 }; double double44 = org.apache.commons.math.util.MathUtils.distance1(doubleArray40, doubleArray43); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection45 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean48 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray43, orderDirection45, false, true); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException50 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (-0.942869904304318d), (java.lang.Number) 0.7893750108307105d, (int) '#', orderDirection45, false); double[] doubleArray51 = new double[] {}; org.apache.commons.math.exception.util.Localizable localizable54 = null; double[] doubleArray58 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray60 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray58, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection61 = null; double[] doubleArray64 = new double[] { 0.0f, 0.0f }; double[] doubleArray67 = new double[] { 0.0f, 0.0f }; double[] doubleArray70 = new double[] { 0.0f, 0.0f }; double[] doubleArray73 = new double[] { 0.0f, 0.0f }; double[] doubleArray76 = new double[] { 0.0f, 0.0f }; double[][] doubleArray77 = new double[][] { doubleArray64, doubleArray67, doubleArray70, doubleArray73, doubleArray76 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray60, orderDirection61, doubleArray77); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) 'a', localizable54, (java.lang.Object[]) doubleArray77); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException80 = new org.apache.commons.math.exception.NotFiniteNumberException((java.lang.Number) (-1.0f), (java.lang.Object[]) doubleArray77); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray51, doubleArray77); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray8, orderDirection45, doubleArray77); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 2 != 3"); } catch (org.apache.commons.math.exception.DimensionMismatchException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(doubleArray38); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection45 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection45.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]"); org.junit.Assert.assertNotNull(doubleArray64); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray70); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray73); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray76); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray77); }
public void test0332() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0332"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField9 = complex8.getField(); boolean boolean10 = complex8.isNaN(); org.apache.commons.math.complex.Complex complex11 = complex8.acos(); org.apache.commons.math.complex.Complex complex12 = complex8.sinh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complexField9); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); }
public void test0333() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0333"); int int1 = org.apache.commons.math.util.FastMath.round((float) ' '); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32); }
public void test0334() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0334"); java.math.BigInteger bigInteger0 = null; // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger2 = org.apache.commons.math.util.MathUtils.pow(bigInteger0, 318997151); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test0335() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0335"); int int1 = org.apache.commons.math.util.FastMath.getExponent(0.0d); org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1023) + "'", int1 == (-1023)); }
public void test0336() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0336"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex13.conjugate(); org.apache.commons.math.complex.Complex complex15 = complex14.exp(); org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex17 = complex16.negate(); org.apache.commons.math.complex.Complex complex18 = complex16.sqrt1z(); boolean boolean19 = complex16.isNaN(); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex21 = complex20.negate(); org.apache.commons.math.complex.Complex complex22 = complex21.sinh(); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex24 = complex23.negate(); org.apache.commons.math.complex.Complex complex25 = complex22.pow(complex24); org.apache.commons.math.complex.Complex complex28 = complex24.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex29 = complex28.negate(); org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex31 = complex30.sin(); double double32 = complex31.getArgument(); org.apache.commons.math.complex.Complex complex33 = complex28.multiply(complex31); org.apache.commons.math.complex.Complex complex34 = complex16.multiply(complex28); org.apache.commons.math.complex.Complex complex35 = complex34.tanh(); org.apache.commons.math.complex.Complex complex36 = complex34.sqrt1z(); org.apache.commons.math.complex.Complex complex37 = complex36.sqrt(); org.apache.commons.math.complex.Complex complex38 = complex15.pow(complex37); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); org.junit.Assert.assertNotNull(complex37); org.junit.Assert.assertNotNull(complex38); }
public void test0337() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0337"); float float2 = org.apache.commons.math.util.FastMath.max((float) (byte) -1, (float) 1219337025); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.21933709E9f + "'", float2 == 1.21933709E9f); }
public void test0338() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0338"); org.apache.commons.math.exception.util.Localizable localizable0 = null; java.lang.Number number2 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 0.3490658503988659d, number2, false); java.lang.Number number5 = numberIsTooSmallException4.getArgument(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 0.3490658503988659d + "'", number5, 0.3490658503988659d); }
public void test0339() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0339"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals((float) 1L, (float) 35L, 20.0f); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0340() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0340"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); org.apache.commons.math.complex.Complex complex6 = complex4.sinh(); double double7 = complex6.abs(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList9 = complex6.nthRoot(0); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: 0"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); }
public void test0341() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0341"); float float1 = org.apache.commons.math.util.FastMath.ulp((float) 5); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 4.7683716E-7f + "'", float1 == 4.7683716E-7f); }
public void test0342() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0342"); double double8 = org.apache.commons.math.util.MathUtils.linearCombination(203.0d, (double) 6.591783E31f, (double) (-680745014), 1.5637759922702315E-209d, (double) 9, 4.126057720906945E112d, 10240.0d, (double) '#'); org.junit.Assert.assertTrue("'" + double8 + "' != '" + 3.7134519488162506E113d + "'", double8 == 3.7134519488162506E113d); }
public void test0343() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0343"); long long2 = org.apache.commons.math.util.FastMath.max((long) (byte) 0, (long) (-1)); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test0344() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0344"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex(1.3292538725897318E24d); }
public void test0345() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0345"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 100); boolean boolean21 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray20); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); double[] doubleArray29 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray27, 0); boolean boolean30 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray29); double[] doubleArray34 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray36 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray34, (int) (short) 0); double double37 = org.apache.commons.math.util.MathUtils.distance(doubleArray29, doubleArray34); double double38 = org.apache.commons.math.util.MathUtils.safeNorm(doubleArray29); double[] doubleArray39 = null; double[] doubleArray43 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray45 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray43, (int) (short) 0); boolean boolean46 = org.apache.commons.math.util.MathUtils.equals(doubleArray39, doubleArray43); double[] doubleArray47 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray43); double[] doubleArray51 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray53 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray51, (int) (short) 0); double[] doubleArray56 = new double[] { (-1), (byte) 100 }; double double57 = org.apache.commons.math.util.MathUtils.distance1(doubleArray53, doubleArray56); boolean boolean58 = org.apache.commons.math.util.MathUtils.equals(doubleArray47, doubleArray53); double[] doubleArray59 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray47); double double60 = org.apache.commons.math.util.MathUtils.distance1(doubleArray29, doubleArray59); double[] doubleArray61 = null; // The following exception was thrown during execution in test generation try { double double62 = org.apache.commons.math.util.MathUtils.distance(doubleArray59, doubleArray61); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]"); org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d); org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]"); org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]"); org.junit.Assert.assertNotNull(doubleArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 0.0d + "'", double57 == 0.0d); org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false); org.junit.Assert.assertNotNull(doubleArray59); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertTrue("'" + double60 + "' != '" + 0.0d + "'", double60 == 0.0d); }
public void test0346() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0346"); long long2 = org.apache.commons.math.util.MathUtils.lcm((long) (-422604639), (long) 9); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 422604639L + "'", long2 == 422604639L); }
public void test0347() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0347"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex4 = complex1.pow(35.0d); org.apache.commons.math.complex.Complex complex5 = complex4.log(); org.apache.commons.math.complex.Complex complex6 = complex4.sin(); java.lang.String str7 = complex6.toString(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(NaN, NaN)" + "'", str7, "(NaN, NaN)"); }
public void test0348() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0348"); double[] doubleArray2 = new double[] { (-1475346432), (-680745024) }; double[] doubleArray9 = new double[] { '#', ' ', 1.0f, 100, 0L, 100L }; org.apache.commons.math.util.MathUtils.checkFinite(doubleArray9); double[] doubleArray12 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray9, 6); double[][] doubleArray13 = new double[][] {}; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray9, doubleArray13); double double15 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray2, doubleArray9); org.junit.Assert.assertNotNull(doubleArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.475346432E9, -6.80745024E8]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 1.0, 32.0, 35.0, 100.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[35.0, 32.0, 1.0, 100.0, 0.0, 100.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.475346432E9d + "'", double15 == 1.475346432E9d); }
public void test0349() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0349"); double double1 = org.apache.commons.math.util.FastMath.exp((double) (-1475346432)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0350() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0350"); double double1 = org.apache.commons.math.util.MathUtils.cosh(5.341551115786255d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 104.42058852478411d + "'", double1 == 104.42058852478411d); }
public void test0351() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0351"); float float1 = org.apache.commons.math.util.MathUtils.sign((float) 96); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0352() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0352"); // The following exception was thrown during execution in test generation try { long long1 = org.apache.commons.math.util.MathUtils.factorial((-49)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: must have n >= 0 for n!, got n = -49"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test0353() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0353"); org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException2 = new org.apache.commons.math.exception.DimensionMismatchException(1079574528, 10); int int3 = dimensionMismatchException2.getDimension(); org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10); }
public void test0354() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0354"); double double1 = org.apache.commons.math.util.FastMath.acosh(1.7182818284590453d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.1364211033963854d + "'", double1 == 1.1364211033963854d); }
public void test0355() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0355"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equals(50.0f, (float) (-1475346432)); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0356() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0356"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex4.cosh(); org.apache.commons.math.complex.Complex complex6 = complex5.tanh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); }
public void test0357() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0357"); float float1 = org.apache.commons.math.util.FastMath.nextUp(35.000008f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 35.00001f + "'", float1 == 35.00001f); }
public void test0358() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0358"); org.apache.commons.math.exception.NotPositiveException notPositiveException1 = new org.apache.commons.math.exception.NotPositiveException((java.lang.Number) 2.5353012E32f); }
public void test0359() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0359"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex0.sinh(); java.lang.Object obj18 = complex17.readResolve(); org.apache.commons.math.complex.Complex complex20 = complex17.pow(4.312315229512479d); java.lang.Class<?> wildcardClass21 = complex20.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(obj18); org.junit.Assert.assertEquals(obj18.toString(), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(wildcardClass21); }
public void test0360() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0360"); int int2 = org.apache.commons.math.util.MathUtils.subAndCheck(1410065408, 702); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1410064706 + "'", int2 == 1410064706); }
public void test0361() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0361"); int int2 = org.apache.commons.math.util.MathUtils.pow(63, 0); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0362() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0362"); double double2 = org.apache.commons.math.util.FastMath.nextAfter((double) 152.00002f, (double) 52); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 152.00001525878903d + "'", double2 == 152.00001525878903d); }
public void test0363() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0363"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); boolean boolean3 = complex2.isInfinite(); org.apache.commons.math.complex.Complex complex4 = complex2.conjugate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex4); }
public void test0364() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0364"); // The following exception was thrown during execution in test generation try { double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble((-1023), (-49)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: must have n >= k for binomial coefficient (n, k), got k = -49, n = -1,023"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } }
public void test0365() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0365"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex4 = complex2.acos(); org.apache.commons.math.complex.Complex complex5 = complex1.divide(complex4); org.apache.commons.math.complex.Complex complex8 = complex5.createComplex((double) (-86L), 0.9919317346815598d); org.apache.commons.math.complex.Complex complex10 = complex8.pow(3.5553480614894135d); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex14 = complex12.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.negate(); org.apache.commons.math.complex.Complex complex17 = complex12.pow(complex16); boolean boolean19 = complex17.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex21 = complex20.atan(); org.apache.commons.math.complex.Complex complex22 = complex17.pow(complex20); org.apache.commons.math.complex.Complex complex23 = complex8.divide(complex17); double double24 = complex17.getImaginary(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.2246467991473532E-16d + "'", double24 == 1.2246467991473532E-16d); }
public void test0366() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0366"); double double1 = org.apache.commons.math.util.FastMath.sqrt((double) 96.00001f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 9.797959360468614d + "'", double1 == 9.797959360468614d); }
public void test0367() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0367"); long long1 = org.apache.commons.math.util.FastMath.round((double) (-680745013)); org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-680745013L) + "'", long1 == (-680745013L)); }
public void test0368() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0368"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex4.acos(); org.apache.commons.math.complex.Complex complex6 = complex4.asin(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); }
public void test0369() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0369"); double double2 = org.apache.commons.math.util.MathUtils.round(6.807450230000095E8d, 126); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 6.807450230000095E8d + "'", double2 == 6.807450230000095E8d); }
public void test0370() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0370"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray14); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 101); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); boolean boolean28 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray8, doubleArray25); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.checkOrder(doubleArray25); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NonMonotonousSequenceException; message: points 0 and 1 are not strictly increasing (100 >= -1)"); } catch (org.apache.commons.math.exception.NonMonotonousSequenceException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true); }
public void test0371() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0371"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(0.0d, 9.425947759839367E159d, 702); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0372() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0372"); double double3 = org.apache.commons.math.util.MathUtils.round(1.530112122701651d, 52, (int) (short) 1); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.530112122701651d + "'", double3 == 1.530112122701651d); }
public void test0373() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0373"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-4.9E-324d), (-3.9999961853027344d)); }
public void test0374() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0374"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((float) 260, (float) (byte) 10, 101); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0375() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0375"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex1.atan(); org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z(); double double15 = complex14.getReal(); org.apache.commons.math.complex.Complex complex16 = complex14.tanh(); double double17 = complex16.abs(); boolean boolean18 = complex16.isNaN(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7146114112494588d + "'", double15 == 0.7146114112494588d); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.6135603872539619d + "'", double17 == 0.6135603872539619d); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); }
public void test0376() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0376"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException4 = new org.apache.commons.math.exception.NumberIsTooLargeException(localizable0, (java.lang.Number) 0.3490658503988659d, (java.lang.Number) 0.7893750108307105d, true); }
public void test0377() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0377"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getArgument(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow((double) 20); java.lang.String str7 = complex6.toString(); org.apache.commons.math.complex.Complex complex8 = complex1.add(complex6); org.apache.commons.math.complex.Complex complex10 = complex1.pow(101.0d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(1.0, 0.0)" + "'", str7, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex10); }
public void test0378() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0378"); double double3 = org.apache.commons.math.util.MathUtils.round(4.268599225537029E-49d, 260, (int) (byte) 1); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 4.268599225537029E-49d + "'", double3 == 4.268599225537029E-49d); }
public void test0379() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0379"); double double1 = org.apache.commons.math.util.FastMath.log((double) 1024.0f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.931471805599453d + "'", double1 == 6.931471805599453d); }
public void test0380() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0380"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex14.sin(); java.lang.String str18 = complex17.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(-1.0255511197385978, -0.6292837272374442)" + "'", str18, "(-1.0255511197385978, -0.6292837272374442)"); }
public void test0381() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0381"); double double1 = org.apache.commons.math.util.FastMath.log1p((double) 1073741824); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 20.79441541772968d + "'", double1 == 20.79441541772968d); }
public void test0382() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0382"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); double[] doubleArray9 = new double[] { (-1), (byte) 100 }; double double10 = org.apache.commons.math.util.MathUtils.distance1(doubleArray6, doubleArray9); double[] doubleArray14 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray16 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray14, (int) (short) 0); double[] doubleArray19 = new double[] { (-1), (byte) 100 }; double double20 = org.apache.commons.math.util.MathUtils.distance1(doubleArray16, doubleArray19); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection21 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean24 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray19, orderDirection21, false, true); double[] doubleArray28 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray30 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray28, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection31 = null; double[] doubleArray34 = new double[] { 0.0f, 0.0f }; double[] doubleArray37 = new double[] { 0.0f, 0.0f }; double[] doubleArray40 = new double[] { 0.0f, 0.0f }; double[] doubleArray43 = new double[] { 0.0f, 0.0f }; double[] doubleArray46 = new double[] { 0.0f, 0.0f }; double[][] doubleArray47 = new double[][] { doubleArray34, doubleArray37, doubleArray40, doubleArray43, doubleArray46 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray30, orderDirection31, doubleArray47); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray19, doubleArray47); boolean boolean50 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray19); boolean boolean51 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray0, doubleArray9); double[] doubleArray52 = null; double[] doubleArray56 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray58 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray56, (int) (short) 0); boolean boolean59 = org.apache.commons.math.util.MathUtils.equals(doubleArray52, doubleArray56); double[] doubleArray60 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray56); double[] doubleArray61 = null; double[] doubleArray65 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray67 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray65, (int) (short) 0); boolean boolean68 = org.apache.commons.math.util.MathUtils.equals(doubleArray61, doubleArray65); double[] doubleArray69 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray65); double[] doubleArray73 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray75 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray73, (int) (short) 0); double[] doubleArray78 = new double[] { (-1), (byte) 100 }; double double79 = org.apache.commons.math.util.MathUtils.distance1(doubleArray75, doubleArray78); boolean boolean80 = org.apache.commons.math.util.MathUtils.equals(doubleArray69, doubleArray75); double[] doubleArray82 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray69, 101); double double83 = org.apache.commons.math.util.MathUtils.distance(doubleArray60, doubleArray82); boolean boolean84 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray0, doubleArray82); double[] doubleArray86 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray82, (double) 10); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray16); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection21 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection21.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]"); org.junit.Assert.assertNotNull(doubleArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true); org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false); org.junit.Assert.assertNotNull(doubleArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]"); org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]"); org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false); org.junit.Assert.assertNotNull(doubleArray69); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray73); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray75); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray75), "[]"); org.junit.Assert.assertNotNull(doubleArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.0d + "'", double79 == 0.0d); org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false); org.junit.Assert.assertNotNull(doubleArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + double83 + "' != '" + 0.0d + "'", double83 == 0.0d); org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false); org.junit.Assert.assertNotNull(doubleArray86); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[10.204081632653061, -0.10204081632653061, -0.10204081632653061, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); }
public void test0383() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0383"); double double1 = org.apache.commons.math.util.FastMath.abs(0.0d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d); }
public void test0384() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0384"); long long1 = org.apache.commons.math.util.FastMath.abs(1786706395136L); org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1786706395136L + "'", long1 == 1786706395136L); }
public void test0385() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0385"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(152.00001525878903d); org.junit.Assert.assertNotNull(complex1); }
public void test0386() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0386"); int int2 = org.apache.commons.math.util.MathUtils.pow((int) (byte) 10, 19444888650L); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0); }
public void test0387() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0387"); double double1 = org.apache.commons.math.util.FastMath.floor(4.709312591924417d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.0d + "'", double1 == 4.0d); }
public void test0388() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0388"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = complex1.sinh(); org.apache.commons.math.complex.Complex complex13 = complex1.atan(); boolean boolean14 = complex13.isInfinite(); org.apache.commons.math.complex.Complex complex15 = complex13.atan(); org.apache.commons.math.complex.Complex complex16 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex17 = complex13.divide(complex16); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false); org.junit.Assert.assertNotNull(complex15); }
public void test0389() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0389"); double double1 = org.apache.commons.math.util.FastMath.exp(201.00931639928152d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.9826083154044198E87d + "'", double1 == 1.9826083154044198E87d); }
public void test0390() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0390"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getArgument(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow((double) 20); java.lang.String str7 = complex6.toString(); org.apache.commons.math.complex.Complex complex8 = complex1.add(complex6); org.apache.commons.math.complex.Complex complex9 = complex8.conjugate(); org.apache.commons.math.complex.Complex complex10 = complex9.cosh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(1.0, 0.0)" + "'", str7, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test0391() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0391"); long long2 = org.apache.commons.math.util.MathUtils.pow((long) (short) 0, 47); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test0392() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0392"); float float1 = org.apache.commons.math.util.FastMath.ulp((float) 680745143); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 64.0f + "'", float1 == 64.0f); }
public void test0393() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0393"); double double2 = org.apache.commons.math.util.FastMath.min(4.932424148660941d, 0.0d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test0394() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0394"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, 0); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.checkOrder(doubleArray7); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); }
public void test0395() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0395"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex7 = complex4.createComplex((double) 39520L, (double) 1664L); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex7); }
public void test0396() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0396"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 1225, (java.lang.Number) 0.9104437791700886d, false); }
public void test0397() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0397"); double double1 = org.apache.commons.math.util.FastMath.nextUp(6.807450230000095E8d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 6.807450230000097E8d + "'", double1 == 6.807450230000097E8d); }
public void test0398() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0398"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex4.acos(); org.apache.commons.math.complex.ComplexField complexField6 = complex5.getField(); org.apache.commons.math.complex.Complex complex7 = complexField6.getZero(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complexField6); org.junit.Assert.assertNotNull(complex7); }
public void test0399() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0399"); float float1 = org.apache.commons.math.util.MathUtils.indicator((float) 10); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f); }
public void test0400() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0400"); long long2 = org.apache.commons.math.util.MathUtils.pow((long) 5, (long) 96); org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1983639665607471487L) + "'", long2 == (-1983639665607471487L)); }
public void test0401() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0401"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); boolean boolean3 = complex0.isNaN(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex5.sinh(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.negate(); org.apache.commons.math.complex.Complex complex9 = complex6.pow(complex8); org.apache.commons.math.complex.Complex complex12 = complex8.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.sin(); double double16 = complex15.getArgument(); org.apache.commons.math.complex.Complex complex17 = complex12.multiply(complex15); org.apache.commons.math.complex.Complex complex18 = complex0.multiply(complex12); org.apache.commons.math.complex.Complex complex19 = complex18.tanh(); org.apache.commons.math.complex.Complex complex20 = complex19.acos(); java.util.List<org.apache.commons.math.complex.Complex> complexList22 = complex20.nthRoot(5); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complexList22); }
public void test0402() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0402"); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection3 = null; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException5 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (-2.356194490192345d), (java.lang.Number) 4.932424148660941d, 1219337025, orderDirection3, false); boolean boolean6 = nonMonotonousSequenceException5.getStrict(); java.lang.Number number7 = nonMonotonousSequenceException5.getArgument(); int int8 = nonMonotonousSequenceException5.getIndex(); boolean boolean9 = nonMonotonousSequenceException5.getStrict(); org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false); org.junit.Assert.assertEquals("'" + number7 + "' != '" + (-2.356194490192345d) + "'", number7, (-2.356194490192345d)); org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1219337025 + "'", int8 == 1219337025); org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false); }
public void test0403() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0403"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException4 = new org.apache.commons.math.exception.NumberIsTooLargeException(localizable0, (java.lang.Number) 10L, (java.lang.Number) 100L, false); org.apache.commons.math.exception.util.ExceptionContext exceptionContext5 = numberIsTooLargeException4.getContext(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext6 = numberIsTooLargeException4.getContext(); java.lang.Number number7 = numberIsTooLargeException4.getMax(); org.junit.Assert.assertNotNull(exceptionContext5); org.junit.Assert.assertNotNull(exceptionContext6); org.junit.Assert.assertEquals("'" + number7 + "' != '" + 100L + "'", number7, 100L); }
public void test0404() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0404"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-3.141592653589793d), (double) (byte) 1); org.apache.commons.math.complex.Complex complex3 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex4 = complex2.divide(complex3); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex2); }
public void test0405() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0405"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.negate(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex7 = complex6.negate(); org.apache.commons.math.complex.Complex complex8 = complex3.pow(complex7); boolean boolean10 = complex8.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex11 = complex1.divide(complex8); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex13.sinh(); double double15 = complex14.getArgument(); org.apache.commons.math.complex.Complex complex16 = complex1.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex1.sinh(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-3.141592653589793d) + "'", double15 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); }
public void test0406() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0406"); org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException2 = new org.apache.commons.math.exception.DimensionMismatchException(0, 101); }
public void test0407() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0407"); // The following exception was thrown during execution in test generation try { double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(101, 318997151); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: must have n >= k for binomial coefficient (n, k), got k = 318,997,151, n = 101"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } }
public void test0408() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0408"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((double) 1225, 1.5301121227016508d); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
public void test0409() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0409"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.complex.Complex complex4 = complex3.asin(); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sqrt(); org.apache.commons.math.complex.Complex complex7 = complex5.tanh(); org.apache.commons.math.complex.Complex complex8 = complex4.multiply(complex5); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); }
public void test0410() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0410"); double double2 = org.apache.commons.math.util.FastMath.min(0.0d, 2.271483493251976E220d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test0411() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0411"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex0.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex2.createComplex((double) (byte) 10, (double) (short) 100); org.apache.commons.math.complex.Complex complex7 = complex2.subtract((double) 260); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); }
public void test0412() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0412"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); boolean boolean19 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray14); double[] doubleArray21 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 101); double[] doubleArray23 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray8, 152.0d); double[] doubleArray24 = null; double[] doubleArray28 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray30 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray28, (int) (short) 0); boolean boolean31 = org.apache.commons.math.util.MathUtils.equals(doubleArray24, doubleArray28); double[] doubleArray32 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray28); double[] doubleArray33 = null; double[] doubleArray37 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray39 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray37, (int) (short) 0); boolean boolean40 = org.apache.commons.math.util.MathUtils.equals(doubleArray33, doubleArray37); double[] doubleArray41 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray37); double[] doubleArray45 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray47 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray45, (int) (short) 0); double[] doubleArray50 = new double[] { (-1), (byte) 100 }; double double51 = org.apache.commons.math.util.MathUtils.distance1(doubleArray47, doubleArray50); boolean boolean52 = org.apache.commons.math.util.MathUtils.equals(doubleArray41, doubleArray47); double[] doubleArray54 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray41, 101); boolean boolean55 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray32, doubleArray41); double double56 = org.apache.commons.math.util.MathUtils.linearCombination(doubleArray8, doubleArray32); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[155.10204081632654, -1.5510204081632653, -1.5510204081632653]"); org.junit.Assert.assertNotNull(doubleArray28); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]"); org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false); org.junit.Assert.assertNotNull(doubleArray41); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]"); org.junit.Assert.assertNotNull(doubleArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.0d + "'", double51 == 0.0d); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(doubleArray54); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true); org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10002.0d + "'", double56 == 10002.0d); }
public void test0413() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0413"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getArgument(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow((double) 20); java.lang.String str7 = complex6.toString(); org.apache.commons.math.complex.Complex complex8 = complex1.add(complex6); org.apache.commons.math.complex.Complex complex9 = complex6.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(1.0, 0.0)" + "'", str7, "(1.0, 0.0)"); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); }
public void test0414() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0414"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray8 = new double[] { (-1), (byte) 100 }; double double9 = org.apache.commons.math.util.MathUtils.distance1(doubleArray5, doubleArray8); double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); double[] doubleArray18 = new double[] { (-1), (byte) 100 }; double double19 = org.apache.commons.math.util.MathUtils.distance1(doubleArray15, doubleArray18); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection20 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean23 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray18, orderDirection20, false, true); double[] doubleArray27 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray29 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray27, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection30 = null; double[] doubleArray33 = new double[] { 0.0f, 0.0f }; double[] doubleArray36 = new double[] { 0.0f, 0.0f }; double[] doubleArray39 = new double[] { 0.0f, 0.0f }; double[] doubleArray42 = new double[] { 0.0f, 0.0f }; double[] doubleArray45 = new double[] { 0.0f, 0.0f }; double[][] doubleArray46 = new double[][] { doubleArray33, doubleArray36, doubleArray39, doubleArray42, doubleArray45 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray29, orderDirection30, doubleArray46); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray18, doubleArray46); boolean boolean49 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray18); double[] doubleArray53 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray55 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray53, (int) (short) 0); double[] doubleArray58 = new double[] { (-1), (byte) 100 }; double double59 = org.apache.commons.math.util.MathUtils.distance1(doubleArray55, doubleArray58); double[] doubleArray61 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray58, 100); boolean boolean62 = org.apache.commons.math.util.MathUtils.equals(doubleArray18, doubleArray58); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection66 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException68 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 5, (java.lang.Number) 100.0f, (-1), orderDirection66, true); org.apache.commons.math.util.MathUtils.checkOrder(doubleArray58, orderDirection66, false); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertNotNull(doubleArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection20 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection20.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]"); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray42); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray46); org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true); org.junit.Assert.assertNotNull(doubleArray53); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray55); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d); org.junit.Assert.assertNotNull(doubleArray61); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true); org.junit.Assert.assertTrue("'" + orderDirection66 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection66.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); }
public void test0415() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0415"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooLargeException numberIsTooLargeException4 = new org.apache.commons.math.exception.NumberIsTooLargeException(localizable0, (java.lang.Number) (-2.5353012004564588E32d), (java.lang.Number) 142.83907028540895d, false); java.lang.Number number5 = numberIsTooLargeException4.getMax(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 142.83907028540895d + "'", number5, 142.83907028540895d); }
public void test0416() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0416"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex2 = complex0.sinh(); org.apache.commons.math.complex.Complex complex3 = complex2.cos(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); }
public void test0417() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0417"); double double2 = org.apache.commons.math.util.MathUtils.round(2.718156284313958d, 63); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.718156284313958d + "'", double2 == 2.718156284313958d); }
public void test0418() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0418"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); java.lang.String str3 = complex0.toString(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertEquals("'" + str3 + "' != '" + "(1.0, 0.0)" + "'", str3, "(1.0, 0.0)"); }
public void test0419() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0419"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) (short) 10, (java.lang.Number) (-100.0d), true); org.apache.commons.math.exception.util.Localizable localizable5 = null; org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException8 = new org.apache.commons.math.exception.DimensionMismatchException(localizable5, 52, (int) (short) 0); java.lang.Throwable throwable9 = dimensionMismatchException8.getException(); numberIsTooSmallException4.addSuppressed((java.lang.Throwable) dimensionMismatchException8); org.junit.Assert.assertNotNull(throwable9); }
public void test0420() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0420"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-0.9999999999999998d), 3.4086265157769784d); }
public void test0421() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0421"); int int2 = org.apache.commons.math.util.MathUtils.subAndCheck(5, (-1023)); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1028 + "'", int2 == 1028); }
public void test0422() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0422"); long long2 = org.apache.commons.math.util.MathUtils.mulAndCheck(422604639L, 27360L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 11562462923040L + "'", long2 == 11562462923040L); }
public void test0423() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0423"); int int2 = org.apache.commons.math.util.FastMath.max(680745143, 1475346432); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1475346432 + "'", int2 == 1475346432); }
public void test0424() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0424"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex19.sinh(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex20.pow(complex22); org.apache.commons.math.complex.Complex complex26 = complex22.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.sin(); double double30 = complex29.getArgument(); org.apache.commons.math.complex.Complex complex31 = complex26.multiply(complex29); org.apache.commons.math.complex.Complex complex32 = complex31.tanh(); org.apache.commons.math.complex.Complex complex33 = complex17.add(complex31); org.apache.commons.math.complex.Complex complex34 = complex14.divide(complex33); org.apache.commons.math.complex.Complex complex35 = complex14.conjugate(); org.apache.commons.math.complex.Complex complex36 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex37 = complex35.divide(complex36); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); }
public void test0425() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0425"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex19 = complex18.negate(); org.apache.commons.math.complex.Complex complex20 = complex19.sinh(); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex20.pow(complex22); org.apache.commons.math.complex.Complex complex26 = complex22.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex27 = complex26.negate(); org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex29 = complex28.sin(); double double30 = complex29.getArgument(); org.apache.commons.math.complex.Complex complex31 = complex26.multiply(complex29); org.apache.commons.math.complex.Complex complex32 = complex31.tanh(); org.apache.commons.math.complex.Complex complex33 = complex17.add(complex31); org.apache.commons.math.complex.Complex complex34 = complex14.divide(complex33); org.apache.commons.math.complex.Complex complex35 = complex14.log(); org.apache.commons.math.complex.Complex complex36 = complex35.conjugate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertNotNull(complex33); org.junit.Assert.assertNotNull(complex34); org.junit.Assert.assertNotNull(complex35); org.junit.Assert.assertNotNull(complex36); }
public void test0426() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0426"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math.exception.NumberIsTooSmallException(localizable0, (java.lang.Number) 96, (java.lang.Number) 52, false); java.lang.Number number5 = numberIsTooSmallException4.getMin(); org.junit.Assert.assertEquals("'" + number5 + "' != '" + 52 + "'", number5, 52); }
public void test0427() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0427"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex3 = complex0.pow((double) 20); java.lang.String str4 = complex3.toString(); double double5 = complex3.getReal(); org.apache.commons.math.complex.Complex complex6 = complex3.tan(); org.apache.commons.math.complex.Complex complex9 = complex3.createComplex((double) 35.000004f, 2.1513092806481256E16d); org.apache.commons.math.complex.Complex complex10 = complex9.asin(); boolean boolean11 = complex10.isNaN(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(1.0, 0.0)" + "'", str4, "(1.0, 0.0)"); org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false); }
public void test0428() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0428"); org.apache.commons.math.exception.util.Localizable localizable0 = null; java.lang.Object[] objArray1 = null; org.apache.commons.math.exception.MathIllegalArgumentException mathIllegalArgumentException2 = new org.apache.commons.math.exception.MathIllegalArgumentException(localizable0, objArray1); }
public void test0429() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0429"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) 2.1513092806481256E16d, (java.lang.Number) 10.0d, true); }
public void test0430() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0430"); org.apache.commons.math.exception.util.Localizable localizable0 = null; java.lang.Object[] objArray2 = new java.lang.Object[] { 1.0d }; org.apache.commons.math.exception.MathArithmeticException mathArithmeticException3 = new org.apache.commons.math.exception.MathArithmeticException(localizable0, objArray2); java.lang.Throwable[] throwableArray4 = mathArithmeticException3.getSuppressed(); org.junit.Assert.assertNotNull(objArray2); org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[1.0]"); org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[1.0]"); org.junit.Assert.assertNotNull(throwableArray4); }
public void test0431() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0431"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z(); org.apache.commons.math.complex.Complex complex14 = complex12.subtract(66.97680939587865d); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex16 = complex15.sin(); org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex18 = complex17.negate(); org.apache.commons.math.complex.Complex complex20 = complex18.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex22 = complex21.negate(); org.apache.commons.math.complex.Complex complex23 = complex18.pow(complex22); boolean boolean25 = complex23.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex26 = complex16.divide(complex23); org.apache.commons.math.complex.Complex complex27 = complex16.sinh(); org.apache.commons.math.complex.Complex complex28 = complex16.atan(); org.apache.commons.math.complex.Complex complex29 = complex28.sqrt1z(); org.apache.commons.math.complex.Complex complex31 = complex28.pow((-3.141592653589793d)); org.apache.commons.math.complex.Complex complex32 = complex14.divide(complex28); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); }
public void test0432() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0432"); org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException3 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) (-1), (java.lang.Number) 1.810677121E9d, (-1944488865)); int int4 = nonMonotonousSequenceException3.getIndex(); org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1944488865) + "'", int4 == (-1944488865)); }
public void test0433() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0433"); double[] doubleArray3 = new double[] { 100L, 69.35408138262233d, 0.6135603872539619d }; double[] doubleArray7 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray9 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray7, (int) (short) 0); double[] doubleArray12 = new double[] { (-1), (byte) 100 }; double double13 = org.apache.commons.math.util.MathUtils.distance1(doubleArray9, doubleArray12); double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, 100); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray15); boolean boolean17 = org.apache.commons.math.util.MathUtils.equals(doubleArray3, doubleArray15); org.apache.commons.math.util.MathUtils.checkFinite(doubleArray3); org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, 69.35408138262233, 0.6135603872539619]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray9); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false); }
public void test0434() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0434"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex2 = complex1.negate(); org.apache.commons.math.complex.Complex complex3 = complex2.sinh(); org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5); org.apache.commons.math.complex.Complex complex9 = complex5.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.sin(); double double13 = complex12.getArgument(); org.apache.commons.math.complex.Complex complex14 = complex9.multiply(complex12); org.apache.commons.math.complex.Complex complex15 = complex14.tanh(); org.apache.commons.math.complex.Complex complex16 = complex0.add(complex14); org.apache.commons.math.complex.Complex complex17 = complex0.sinh(); java.lang.Object obj18 = complex17.readResolve(); org.apache.commons.math.complex.Complex complex20 = complex17.pow(4.312315229512479d); org.apache.commons.math.complex.Complex complex22 = complex20.add((double) 1L); org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex24 = complex23.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField25 = complex23.getField(); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex27 = complex26.sqrt(); org.apache.commons.math.complex.Complex complex28 = complex26.log(); org.apache.commons.math.complex.Complex complex29 = complex23.add(complex26); org.apache.commons.math.complex.ComplexField complexField30 = complex23.getField(); org.apache.commons.math.complex.ComplexField complexField31 = complex23.getField(); org.apache.commons.math.complex.Complex complex32 = complex20.subtract(complex23); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(obj18); org.junit.Assert.assertEquals(obj18.toString(), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "(1.1752011936438014, 0.0)"); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complexField25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertNotNull(complex28); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complexField30); org.junit.Assert.assertNotNull(complexField31); org.junit.Assert.assertNotNull(complex32); }
public void test0435() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0435"); org.apache.commons.math.exception.util.Localizable localizable0 = null; org.apache.commons.math.exception.NotPositiveException notPositiveException2 = new org.apache.commons.math.exception.NotPositiveException(localizable0, (java.lang.Number) 3.7632429002127764E77d); java.lang.Number number3 = notPositiveException2.getMin(); org.junit.Assert.assertEquals("'" + number3 + "' != '" + 0 + "'", number3, 0); }
public void test0436() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0436"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex3 = complex2.sin(); double double4 = complex3.getImaginary(); org.apache.commons.math.complex.Complex complex5 = complex3.exp(); org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex3); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex6); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = complex9.sinh(); org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex12 = complex11.negate(); org.apache.commons.math.complex.Complex complex13 = complex10.pow(complex12); org.apache.commons.math.complex.Complex complex16 = complex12.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex17 = complex6.divide(complex12); double double18 = complex6.getImaginary(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); }
public void test0437() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0437"); int int2 = org.apache.commons.math.util.MathUtils.gcd(3, 680745143); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0438() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0438"); double double2 = org.apache.commons.math.util.FastMath.copySign((double) (-422604639), (double) 260); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 4.22604639E8d + "'", double2 == 4.22604639E8d); }
public void test0439() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0439"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex7 = complex4.multiply(10.000000000000002d); java.lang.Object obj8 = complex7.readResolve(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(obj8); org.junit.Assert.assertEquals(obj8.toString(), "(-10.000000000000002, -0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "(-10.000000000000002, -0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "(-10.000000000000002, -0.0)"); }
public void test0440() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0440"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complex5.cos(); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex7.tanh(); org.apache.commons.math.complex.Complex complex10 = complex7.tanh(); org.apache.commons.math.complex.Complex complex11 = complex6.multiply(complex10); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); }
public void test0441() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0441"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf((double) 1079574528); org.apache.commons.math.complex.Complex complex2 = complex1.log(); org.apache.commons.math.complex.Complex complex4 = complex1.pow(35.0d); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.negate(); org.apache.commons.math.complex.Complex complex7 = complex6.conjugate(); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex10.sinh(); org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex13 = complex12.negate(); org.apache.commons.math.complex.Complex complex14 = complex11.pow(complex13); org.apache.commons.math.complex.Complex complex17 = complex13.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex18 = complex17.negate(); org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex20 = complex19.sin(); double double21 = complex20.getArgument(); org.apache.commons.math.complex.Complex complex22 = complex17.multiply(complex20); org.apache.commons.math.complex.Complex complex23 = complex22.tanh(); org.apache.commons.math.complex.Complex complex24 = complex8.add(complex22); org.apache.commons.math.complex.Complex complex25 = complex8.sinh(); org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex27 = complex26.sin(); double double28 = complex27.getImaginary(); org.apache.commons.math.complex.Complex complex29 = complex27.exp(); org.apache.commons.math.complex.Complex complex30 = complex8.add(complex27); org.apache.commons.math.complex.Complex complex31 = complex7.multiply(complex30); org.apache.commons.math.complex.Complex complex32 = complex4.subtract(complex7); boolean boolean33 = complex7.isNaN(); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex17); org.junit.Assert.assertNotNull(complex18); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertNotNull(complex23); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); org.junit.Assert.assertNotNull(complex26); org.junit.Assert.assertNotNull(complex27); org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d); org.junit.Assert.assertNotNull(complex29); org.junit.Assert.assertNotNull(complex30); org.junit.Assert.assertNotNull(complex31); org.junit.Assert.assertNotNull(complex32); org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false); }
public void test0442() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0442"); org.apache.commons.math.exception.DimensionMismatchException dimensionMismatchException2 = new org.apache.commons.math.exception.DimensionMismatchException((int) ' ', 1410065408); }
public void test0443() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0443"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = complex4.negate(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); }
public void test0444() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0444"); org.apache.commons.math.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math.exception.NumberIsTooSmallException((java.lang.Number) Double.NaN, (java.lang.Number) 2.995732273553991d, false); }
public void test0445() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0445"); double double1 = org.apache.commons.math.util.MathUtils.sign((double) 35.000004f); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d); }
public void test0446() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0446"); org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.valueOf(6.931471805599453d); org.junit.Assert.assertNotNull(complex1); }
public void test0447() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0447"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray9 = null; double[] doubleArray13 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray15 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13, (int) (short) 0); boolean boolean16 = org.apache.commons.math.util.MathUtils.equals(doubleArray9, doubleArray13); double[] doubleArray17 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray13); double[] doubleArray21 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray23 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray21, (int) (short) 0); double[] doubleArray26 = new double[] { (-1), (byte) 100 }; double double27 = org.apache.commons.math.util.MathUtils.distance1(doubleArray23, doubleArray26); boolean boolean28 = org.apache.commons.math.util.MathUtils.equals(doubleArray17, doubleArray23); double[] doubleArray30 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 101); boolean boolean31 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN(doubleArray8, doubleArray17); double[] doubleArray33 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, (int) (byte) 100); org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray13); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray15); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]"); org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d); org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false); org.junit.Assert.assertNotNull(doubleArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true); org.junit.Assert.assertNotNull(doubleArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, -1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); }
public void test0448() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0448"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray12 = new int[] { (byte) 100, 10 }; int[] intArray18 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double19 = org.apache.commons.math.util.MathUtils.distance(intArray12, intArray18); double double20 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray18); int[] intArray21 = org.apache.commons.math.util.MathUtils.copyOf(intArray8); int[] intArray24 = new int[] { (byte) 100, 10 }; int[] intArray30 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double31 = org.apache.commons.math.util.MathUtils.distance(intArray24, intArray30); int[] intArray34 = new int[] { (byte) 100, 10 }; int[] intArray40 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double41 = org.apache.commons.math.util.MathUtils.distance(intArray34, intArray40); double double42 = org.apache.commons.math.util.MathUtils.distance(intArray30, intArray40); int[] intArray43 = org.apache.commons.math.util.MathUtils.copyOf(intArray30); double double44 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray43); int[] intArray45 = org.apache.commons.math.util.MathUtils.copyOf(intArray43); int[] intArray47 = org.apache.commons.math.util.MathUtils.copyOf(intArray45, 470); int[] intArray50 = new int[] { (byte) 100, 10 }; int[] intArray56 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double57 = org.apache.commons.math.util.MathUtils.distance(intArray50, intArray56); int[] intArray60 = new int[] { (byte) 100, 10 }; int[] intArray66 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double67 = org.apache.commons.math.util.MathUtils.distance(intArray60, intArray66); int int68 = org.apache.commons.math.util.MathUtils.distance1(intArray50, intArray60); int[] intArray69 = org.apache.commons.math.util.MathUtils.copyOf(intArray60); int[] intArray72 = new int[] { (byte) 100, 10 }; int[] intArray78 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double79 = org.apache.commons.math.util.MathUtils.distance(intArray72, intArray78); int[] intArray82 = new int[] { (byte) 100, 10 }; int[] intArray88 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double89 = org.apache.commons.math.util.MathUtils.distance(intArray82, intArray88); int int90 = org.apache.commons.math.util.MathUtils.distance1(intArray72, intArray82); int[] intArray91 = org.apache.commons.math.util.MathUtils.copyOf(intArray82); int int92 = org.apache.commons.math.util.MathUtils.distance1(intArray60, intArray82); int[] intArray94 = org.apache.commons.math.util.MathUtils.copyOf(intArray82, 52); // The following exception was thrown during execution in test generation try { double double95 = org.apache.commons.math.util.MathUtils.distance(intArray47, intArray82); org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2"); } catch (java.lang.ArrayIndexOutOfBoundsException e) { // Expected exception. } org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10]"); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 104.04806581575652d + "'", double19 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d); org.junit.Assert.assertNotNull(intArray21); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray24); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[100, 10]"); org.junit.Assert.assertNotNull(intArray30); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double31 + "' != '" + 104.04806581575652d + "'", double31 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray34); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[100, 10]"); org.junit.Assert.assertNotNull(intArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 104.04806581575652d + "'", double41 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d); org.junit.Assert.assertNotNull(intArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d); org.junit.Assert.assertNotNull(intArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertNotNull(intArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertNotNull(intArray50); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[100, 10]"); org.junit.Assert.assertNotNull(intArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double57 + "' != '" + 104.04806581575652d + "'", double57 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[100, 10]"); org.junit.Assert.assertNotNull(intArray66); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double67 + "' != '" + 104.04806581575652d + "'", double67 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0); org.junit.Assert.assertNotNull(intArray69); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[100, 10]"); org.junit.Assert.assertNotNull(intArray72); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[100, 10]"); org.junit.Assert.assertNotNull(intArray78); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double79 + "' != '" + 104.04806581575652d + "'", double79 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray82); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[100, 10]"); org.junit.Assert.assertNotNull(intArray88); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double89 + "' != '" + 104.04806581575652d + "'", double89 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0); org.junit.Assert.assertNotNull(intArray91); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[100, 10]"); org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0); org.junit.Assert.assertNotNull(intArray94); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[100, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"); }
public void test0449() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0449"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex7 = complex5.add((double) (-680745036L)); org.apache.commons.math.complex.Complex complex8 = complex5.log(); org.apache.commons.math.complex.Complex complex9 = complex8.atan(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); }
public void test0450() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0450"); boolean boolean3 = org.apache.commons.math.util.MathUtils.equals(0.0f, (float) 1079574528, (-1.0f)); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0451() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0451"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex4 = complex3.negate(); org.apache.commons.math.complex.Complex complex5 = complex2.pow(complex4); org.apache.commons.math.complex.Complex complex8 = complex4.createComplex((double) (byte) -1, (-1.0d)); org.apache.commons.math.complex.Complex complex9 = complex8.negate(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.sin(); double double12 = complex11.getArgument(); org.apache.commons.math.complex.Complex complex13 = complex8.multiply(complex11); org.apache.commons.math.complex.Complex complex14 = complex11.sin(); org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex16 = complex14.add(complex15); double double17 = complex14.abs(); java.util.List<org.apache.commons.math.complex.Complex> complexList19 = complex14.nthRoot((int) (short) 1); java.lang.Class<?> wildcardClass20 = complexList19.getClass(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.0d + "'", double12 == 0.0d); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.7456241416655579d + "'", double17 == 0.7456241416655579d); org.junit.Assert.assertNotNull(complexList19); org.junit.Assert.assertNotNull(wildcardClass20); }
public void test0452() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0452"); double double2 = org.apache.commons.math.util.FastMath.copySign(0.0d, (double) 32.000004f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); }
public void test0453() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0453"); // The following exception was thrown during execution in test generation try { float float3 = org.apache.commons.math.util.MathUtils.round(0.0f, 680745143, 1410065408); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.MathIllegalArgumentException; message: invalid rounding method 1,410,065,408, valid methods: ROUND_CEILING (2), ROUND_DOWN (1), ROUND_FLOOR (3), ROUND_HALF_DOWN (5), ROUND_HALF_EVEN (6), ROUND_HALF_UP (4), ROUND_UNNECESSARY (7), ROUND_UP (0)"); } catch (org.apache.commons.math.exception.MathIllegalArgumentException e) { // Expected exception. } }
public void test0454() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0454"); double[] doubleArray3 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray5 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray3, (int) (short) 0); double[] doubleArray8 = new double[] { (-1), (byte) 100 }; double double9 = org.apache.commons.math.util.MathUtils.distance1(doubleArray5, doubleArray8); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection10 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; boolean boolean13 = org.apache.commons.math.util.MathUtils.checkOrder(doubleArray8, orderDirection10, false, true); double[] doubleArray17 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray19 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection20 = null; double[] doubleArray23 = new double[] { 0.0f, 0.0f }; double[] doubleArray26 = new double[] { 0.0f, 0.0f }; double[] doubleArray29 = new double[] { 0.0f, 0.0f }; double[] doubleArray32 = new double[] { 0.0f, 0.0f }; double[] doubleArray35 = new double[] { 0.0f, 0.0f }; double[][] doubleArray36 = new double[][] { doubleArray23, doubleArray26, doubleArray29, doubleArray32, doubleArray35 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray19, orderDirection20, doubleArray36); org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray8, doubleArray36); double[] doubleArray40 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray8, 152); double[] doubleArray41 = null; double[] doubleArray45 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray47 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray45, (int) (short) 0); boolean boolean48 = org.apache.commons.math.util.MathUtils.equals(doubleArray41, doubleArray45); double[] doubleArray49 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray45); double[] doubleArray51 = org.apache.commons.math.util.MathUtils.normalizeArray(doubleArray45, 26091.090931580457d); // The following exception was thrown during execution in test generation try { double double52 = org.apache.commons.math.util.MathUtils.linearCombination(doubleArray8, doubleArray51); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.DimensionMismatchException; message: 2 != 3"); } catch (org.apache.commons.math.exception.DimensionMismatchException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray3); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]"); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertTrue("'" + orderDirection10 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection10.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray26); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray32); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray36); org.junit.Assert.assertNotNull(doubleArray40); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray47); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]"); org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false); org.junit.Assert.assertNotNull(doubleArray49); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[26623.5621750821, -266.235621750821, -266.235621750821]"); }
public void test0455() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0455"); double[] doubleArray0 = null; // The following exception was thrown during execution in test generation try { double[] doubleArray1 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray0); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } }
public void test0456() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0456"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf(152.0d, 1.9826083154044198E87d); org.junit.Assert.assertNotNull(complex2); }
public void test0457() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0457"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.complex.Complex complex3 = complex1.subtract(1.0d); org.apache.commons.math.complex.Complex complex5 = complex3.subtract((double) 96); org.apache.commons.math.complex.Complex complex7 = complex5.divide((double) (byte) -1); org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex9 = complex8.sin(); org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex11 = complex10.negate(); org.apache.commons.math.complex.Complex complex13 = complex11.multiply((double) (-1.0f)); org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex15 = complex14.negate(); org.apache.commons.math.complex.Complex complex16 = complex11.pow(complex15); boolean boolean18 = complex16.equals((java.lang.Object) 10L); org.apache.commons.math.complex.Complex complex19 = complex9.divide(complex16); org.apache.commons.math.complex.Complex complex20 = complex9.sinh(); org.apache.commons.math.complex.Complex complex21 = complex9.atan(); org.apache.commons.math.complex.Complex complex22 = complex21.sqrt1z(); double double23 = complex22.getReal(); org.apache.commons.math.complex.Complex complex24 = complex22.tanh(); org.apache.commons.math.complex.Complex complex25 = complex5.add(complex22); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex13); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false); org.junit.Assert.assertNotNull(complex19); org.junit.Assert.assertNotNull(complex20); org.junit.Assert.assertNotNull(complex21); org.junit.Assert.assertNotNull(complex22); org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.7146114112494588d + "'", double23 == 0.7146114112494588d); org.junit.Assert.assertNotNull(complex24); org.junit.Assert.assertNotNull(complex25); }
public void test0458() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0458"); double double1 = org.apache.commons.math.util.FastMath.atan((double) (-86L)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.5591689438385128d) + "'", double1 == (-1.5591689438385128d)); }
public void test0459() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0459"); double[] doubleArray0 = null; double[] doubleArray4 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray6 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4, (int) (short) 0); boolean boolean7 = org.apache.commons.math.util.MathUtils.equals(doubleArray0, doubleArray4); double[] doubleArray8 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray4); double[] doubleArray12 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray14 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray12, (int) (short) 0); double[] doubleArray17 = new double[] { (-1), (byte) 100 }; double double18 = org.apache.commons.math.util.MathUtils.distance1(doubleArray14, doubleArray17); double[] doubleArray20 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray17, 100); boolean boolean21 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray20); double[] doubleArray25 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray27 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray25, (int) (short) 0); double[] doubleArray29 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray27, 0); boolean boolean30 = org.apache.commons.math.util.MathUtils.equals(doubleArray8, doubleArray29); double[] doubleArray31 = null; double[] doubleArray35 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray37 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray35, (int) (short) 0); boolean boolean38 = org.apache.commons.math.util.MathUtils.equals(doubleArray31, doubleArray35); double[] doubleArray39 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray35); double[] doubleArray43 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray45 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray43, (int) (short) 0); double[] doubleArray48 = new double[] { (-1), (byte) 100 }; double double49 = org.apache.commons.math.util.MathUtils.distance1(doubleArray45, doubleArray48); double[] doubleArray51 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray48, 100); boolean boolean52 = org.apache.commons.math.util.MathUtils.equals(doubleArray39, doubleArray51); double[] doubleArray56 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray58 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray56, (int) (short) 0); double[] doubleArray60 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray58, 0); boolean boolean61 = org.apache.commons.math.util.MathUtils.equals(doubleArray39, doubleArray60); double[] doubleArray65 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray67 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray65, (int) (short) 0); double double68 = org.apache.commons.math.util.MathUtils.distance(doubleArray60, doubleArray65); double double69 = org.apache.commons.math.util.MathUtils.distanceInf(doubleArray8, doubleArray65); // The following exception was thrown during execution in test generation try { org.apache.commons.math.util.MathUtils.checkOrder(doubleArray8); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NonMonotonousSequenceException; message: points 0 and 1 are not strictly increasing (100 >= -1)"); } catch (org.apache.commons.math.exception.NonMonotonousSequenceException e) { // Expected exception. } org.junit.Assert.assertNotNull(doubleArray4); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray6); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]"); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(doubleArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false); org.junit.Assert.assertNotNull(doubleArray25); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray27); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]"); org.junit.Assert.assertNotNull(doubleArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]"); org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false); org.junit.Assert.assertNotNull(doubleArray35); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray37); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]"); org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false); org.junit.Assert.assertNotNull(doubleArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray45); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[]"); org.junit.Assert.assertNotNull(doubleArray48); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0]"); org.junit.Assert.assertTrue("'" + double49 + "' != '" + 0.0d + "'", double49 == 0.0d); org.junit.Assert.assertNotNull(doubleArray51); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, 100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"); org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false); org.junit.Assert.assertNotNull(doubleArray56); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray58); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[]"); org.junit.Assert.assertNotNull(doubleArray60); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[]"); org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false); org.junit.Assert.assertNotNull(doubleArray65); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray67); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[]"); org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d); org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.0d + "'", double69 == 0.0d); }
public void test0460() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0460"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.log(); double double3 = complex2.abs(); // The following exception was thrown during execution in test generation try { java.util.List<org.apache.commons.math.complex.Complex> complexList5 = complex2.nthRoot((-969464673)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: cannot compute nth root for null or negative n: -969,464,673"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d); }
public void test0461() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0461"); float float1 = org.apache.commons.math.util.FastMath.abs(35.00001f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 35.00001f + "'", float1 == 35.00001f); }
public void test0462() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0462"); org.apache.commons.math.exception.util.Localizable localizable0 = null; double[] doubleArray5 = new double[] { 100.0d, (short) -1, (-1) }; double[] doubleArray7 = org.apache.commons.math.util.MathUtils.copyOf(doubleArray5, (int) (short) 0); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection8 = null; double[] doubleArray11 = new double[] { 0.0f, 0.0f }; double[] doubleArray14 = new double[] { 0.0f, 0.0f }; double[] doubleArray17 = new double[] { 0.0f, 0.0f }; double[] doubleArray20 = new double[] { 0.0f, 0.0f }; double[] doubleArray23 = new double[] { 0.0f, 0.0f }; double[][] doubleArray24 = new double[][] { doubleArray11, doubleArray14, doubleArray17, doubleArray20, doubleArray23 }; org.apache.commons.math.util.MathUtils.sortInPlace(doubleArray7, orderDirection8, doubleArray24); org.apache.commons.math.exception.NotFiniteNumberException notFiniteNumberException26 = new org.apache.commons.math.exception.NotFiniteNumberException(localizable0, (java.lang.Number) 1073741871L, (java.lang.Object[]) doubleArray24); org.junit.Assert.assertNotNull(doubleArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, -1.0, -1.0]"); org.junit.Assert.assertNotNull(doubleArray7); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]"); org.junit.Assert.assertNotNull(doubleArray11); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray20); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 0.0]"); org.junit.Assert.assertNotNull(doubleArray24); }
public void test0463() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0463"); double double1 = org.apache.commons.math.util.FastMath.atan((-2.5353012004564588E32d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.5707963267948966d) + "'", double1 == (-1.5707963267948966d)); }
public void test0464() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0464"); int[] intArray2 = new int[] { (byte) 100, 10 }; int[] intArray8 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double9 = org.apache.commons.math.util.MathUtils.distance(intArray2, intArray8); int[] intArray12 = new int[] { (byte) 100, 10 }; int[] intArray18 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double19 = org.apache.commons.math.util.MathUtils.distance(intArray12, intArray18); int int20 = org.apache.commons.math.util.MathUtils.distance1(intArray2, intArray12); int[] intArray23 = new int[] { (byte) 100, 10 }; int[] intArray29 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double30 = org.apache.commons.math.util.MathUtils.distance(intArray23, intArray29); int[] intArray33 = new int[] { (byte) 100, 10 }; int[] intArray39 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double40 = org.apache.commons.math.util.MathUtils.distance(intArray33, intArray39); double double41 = org.apache.commons.math.util.MathUtils.distance(intArray29, intArray39); int int42 = org.apache.commons.math.util.MathUtils.distance1(intArray2, intArray29); int[] intArray43 = org.apache.commons.math.util.MathUtils.copyOf(intArray29); int[] intArray44 = null; // The following exception was thrown during execution in test generation try { int int45 = org.apache.commons.math.util.MathUtils.distance1(intArray43, intArray44); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(intArray2); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[100, 10]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 104.04806581575652d + "'", double9 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray12); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10]"); org.junit.Assert.assertNotNull(intArray18); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double19 + "' != '" + 104.04806581575652d + "'", double19 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0); org.junit.Assert.assertNotNull(intArray23); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, 10]"); org.junit.Assert.assertNotNull(intArray29); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double30 + "' != '" + 104.04806581575652d + "'", double30 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray33); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, 10]"); org.junit.Assert.assertNotNull(intArray39); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double40 + "' != '" + 104.04806581575652d + "'", double40 == 104.04806581575652d); org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d); org.junit.Assert.assertTrue("'" + int42 + "' != '" + 126 + "'", int42 == 126); org.junit.Assert.assertNotNull(intArray43); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[-1, 35, 0, 1, 0]"); }
public void test0465() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0465"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex1.sin(); org.apache.commons.math.complex.Complex complex4 = complex2.pow((double) 1L); org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex6 = complex5.sin(); double double7 = complex6.getImaginary(); org.apache.commons.math.complex.Complex complex8 = complex6.sqrt(); org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z(); org.apache.commons.math.complex.Complex complex10 = complex9.negate(); org.apache.commons.math.complex.Complex complex11 = complex4.multiply(complex10); org.apache.commons.math.exception.util.Localizable localizable12 = null; java.lang.Object[] objArray13 = null; org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex10, localizable12, objArray13); org.apache.commons.math.complex.Complex complex16 = complex10.add(4.9E-324d); double double17 = complex16.getReal(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex16); org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.3981570232861697d) + "'", double17 == (-0.3981570232861697d)); }
public void test0466() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0466"); double double1 = org.apache.commons.math.util.FastMath.nextUp(1.1488462128956858d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.148846212895686d + "'", double1 == 1.148846212895686d); }
public void test0467() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0467"); org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.valueOf((-3.141592653589793d), (double) (byte) 1); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField3 = complex2.getField(); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex2); org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.valueOf((double) 1.4E-45f); org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex8 = complex7.sin(); double double9 = complex8.getImaginary(); org.apache.commons.math.complex.Complex complex10 = complex8.exp(); org.apache.commons.math.complex.Complex complex11 = complex6.multiply(complex8); org.apache.commons.math.complex.Complex complex12 = complex2.pow(complex6); java.lang.Object obj13 = complex6.readResolve(); org.apache.commons.math.complex.Complex complex14 = complex6.conjugate(); org.apache.commons.math.complex.Complex complex15 = complex14.log(); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complexField3); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complex8); org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d); org.junit.Assert.assertNotNull(complex10); org.junit.Assert.assertNotNull(complex11); org.junit.Assert.assertNotNull(complex12); org.junit.Assert.assertNotNull(obj13); org.junit.Assert.assertEquals(obj13.toString(), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "(1.401298464324817E-45, 0.0)"); org.junit.Assert.assertNotNull(complex14); org.junit.Assert.assertNotNull(complex15); }
public void test0468() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0468"); long long2 = org.apache.commons.math.util.FastMath.min((long) 1079574528, 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test0469() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0469"); double double1 = org.apache.commons.math.util.MathUtils.sinh((-1.5707963267948966d)); org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-2.3012989023072947d) + "'", double1 == (-2.3012989023072947d)); }
public void test0470() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0470"); org.apache.commons.math.complex.Complex complex1 = new org.apache.commons.math.complex.Complex((double) 52); org.apache.commons.math.util.MathUtils.checkNotNull((java.lang.Object) complex1); }
public void test0471() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0471"); double double1 = org.apache.commons.math.util.FastMath.rint((double) 545L); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 545.0d + "'", double1 == 545.0d); }
public void test0472() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0472"); long long2 = org.apache.commons.math.util.MathUtils.mulAndCheck(0L, 0L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L); }
public void test0473() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0473"); long long1 = org.apache.commons.math.util.MathUtils.indicator((long) (-49)); org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L)); }
public void test0474() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0474"); int int1 = org.apache.commons.math.util.MathUtils.hash(0.0d); org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0); }
public void test0475() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0475"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.negate(); org.apache.commons.math.complex.Complex complex2 = complex1.sinh(); double double3 = complex2.getArgument(); org.apache.commons.math.complex.Complex complex4 = complex2.cos(); org.apache.commons.math.complex.Complex complex5 = complex4.acos(); org.apache.commons.math.complex.ComplexField complexField6 = complex5.getField(); boolean boolean7 = complex5.isNaN(); org.apache.commons.math.complex.Complex complex8 = complex5.sqrt1z(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-3.141592653589793d) + "'", double3 == (-3.141592653589793d)); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complexField6); org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false); org.junit.Assert.assertNotNull(complex8); }
public void test0476() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0476"); float float2 = org.apache.commons.math.util.FastMath.min((float) 1786706395136L, (float) 5459025742952136705L); org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.7867064E12f + "'", float2 == 1.7867064E12f); }
public void test0477() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0477"); double double2 = org.apache.commons.math.util.FastMath.max((-85.99999999999999d), 370.95475667220734d); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 370.95475667220734d + "'", double2 == 370.95475667220734d); }
public void test0478() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0478"); double double2 = org.apache.commons.math.util.FastMath.hypot((double) 680745023, (double) 152.0f); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 6.807450230000169E8d + "'", double2 == 6.807450230000169E8d); }
public void test0479() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0479"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.sqrt(); org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z(); org.apache.commons.math.complex.Complex complex5 = complex4.negate(); org.apache.commons.math.complex.Complex complex6 = null; // The following exception was thrown during execution in test generation try { org.apache.commons.math.complex.Complex complex7 = complex4.divide(complex6); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NullArgumentException; message: null is not allowed"); } catch (org.apache.commons.math.exception.NullArgumentException e) { // Expected exception. } org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex4); org.junit.Assert.assertNotNull(complex5); }
public void test0480() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0480"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); double double2 = complex1.getImaginary(); org.apache.commons.math.complex.Complex complex3 = complex1.exp(); org.apache.commons.math.complex.Complex complex5 = complex3.multiply(2.302585092994046d); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complex5); }
public void test0481() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0481"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); org.apache.commons.math.complex.Complex complex3 = complex2.exp(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField4 = complex3.getField(); org.apache.commons.math.complex.Complex complex5 = complexField4.getZero(); org.apache.commons.math.complex.Complex complex6 = complexField4.getOne(); org.apache.commons.math.complex.Complex complex7 = complexField4.getOne(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField8 = complex7.getField(); org.apache.commons.math.complex.Complex complex9 = complexField8.getZero(); org.apache.commons.math.complex.Complex complex10 = complex9.sqrt(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertNotNull(complex3); org.junit.Assert.assertNotNull(complexField4); org.junit.Assert.assertNotNull(complex5); org.junit.Assert.assertNotNull(complex6); org.junit.Assert.assertNotNull(complex7); org.junit.Assert.assertNotNull(complexField8); org.junit.Assert.assertNotNull(complex9); org.junit.Assert.assertNotNull(complex10); }
public void test0482() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0482"); double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientLog(10240, 47); org.junit.Assert.assertTrue("'" + double2 + "' != '" + 297.0922250336576d + "'", double2 == 297.0922250336576d); }
public void test0483() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0483"); long long2 = org.apache.commons.math.util.MathUtils.gcd((long) 101, 25L); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L); }
public void test0484() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0484"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sqrt(); org.apache.commons.math.complex.Complex complex2 = complex0.tanh(); boolean boolean3 = complex0.isNaN(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complex2); org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false); }
public void test0485() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0485"); // The following exception was thrown during execution in test generation try { double double1 = org.apache.commons.math.util.MathUtils.factorialDouble((-1023)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: must have n >= 0 for n!, got n = -1,023"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test0486() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0486"); // The following exception was thrown during execution in test generation try { double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(5, (int) '4'); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NumberIsTooLargeException; message: must have n >= k for binomial coefficient (n, k), got k = 52, n = 5"); } catch (org.apache.commons.math.exception.NumberIsTooLargeException e) { // Expected exception. } }
public void test0487() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0487"); float float1 = org.apache.commons.math.util.FastMath.ulp(1.5f); org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.1920929E-7f + "'", float1 == 1.1920929E-7f); }
public void test0488() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0488"); int int2 = org.apache.commons.math.util.MathUtils.gcd(35, (-680745024)); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0489() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0489"); long long2 = org.apache.commons.math.util.FastMath.max(422604639L, (long) 680745143); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 680745143L + "'", long2 == 680745143L); }
public void test0490() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0490"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF; org.apache.commons.math.complex.Complex complex1 = complex0.atan(); org.apache.commons.math.complex.ComplexField complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = complexField2.getZero(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); }
public void test0491() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0491"); double double1 = org.apache.commons.math.util.FastMath.asinh(3.7327411824665355d); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 2.027768088553906d + "'", double1 == 2.027768088553906d); }
public void test0492() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0492"); int[] intArray0 = null; int[] intArray5 = new int[] { 52, 6, 'a', 680745024 }; int[] intArray8 = new int[] { (byte) 100, 10 }; int[] intArray14 = new int[] { (byte) -1, '#', (short) 0, (byte) 1, (short) 0 }; double double15 = org.apache.commons.math.util.MathUtils.distance(intArray8, intArray14); int[] intArray17 = org.apache.commons.math.util.MathUtils.copyOf(intArray14, (int) (byte) 10); int int18 = org.apache.commons.math.util.MathUtils.distanceInf(intArray5, intArray17); int[] intArray19 = org.apache.commons.math.util.MathUtils.copyOf(intArray5); // The following exception was thrown during execution in test generation try { double double20 = org.apache.commons.math.util.MathUtils.distance(intArray0, intArray19); org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null"); } catch (java.lang.NullPointerException e) { // Expected exception. } org.junit.Assert.assertNotNull(intArray5); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[52, 6, 97, 680745024]"); org.junit.Assert.assertNotNull(intArray8); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[100, 10]"); org.junit.Assert.assertNotNull(intArray14); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[-1, 35, 0, 1, 0]"); org.junit.Assert.assertTrue("'" + double15 + "' != '" + 104.04806581575652d + "'", double15 == 104.04806581575652d); org.junit.Assert.assertNotNull(intArray17); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[-1, 35, 0, 1, 0, 0, 0, 0, 0, 0]"); org.junit.Assert.assertTrue("'" + int18 + "' != '" + 680745023 + "'", int18 == 680745023); org.junit.Assert.assertNotNull(intArray19); org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[52, 6, 97, 680745024]"); }
public void test0493() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0493"); long long2 = org.apache.commons.math.util.MathUtils.addAndCheck(11881242L, (long) 680745024); org.junit.Assert.assertTrue("'" + long2 + "' != '" + 692626266L + "'", long2 == 692626266L); }
public void test0494() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0494"); double double1 = org.apache.commons.math.util.MathUtils.factorialDouble(52); org.junit.Assert.assertTrue("'" + double1 + "' != '" + 8.065817517094494E67d + "'", double1 == 8.065817517094494E67d); }
public void test0495() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0495"); org.apache.commons.math.util.MathUtils.OrderDirection orderDirection3 = org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING; org.apache.commons.math.exception.NonMonotonousSequenceException nonMonotonousSequenceException5 = new org.apache.commons.math.exception.NonMonotonousSequenceException((java.lang.Number) 5, (java.lang.Number) 100.0f, (-1), orderDirection3, true); java.lang.Number number6 = nonMonotonousSequenceException5.getPrevious(); org.apache.commons.math.exception.util.ExceptionContext exceptionContext7 = nonMonotonousSequenceException5.getContext(); java.lang.Number number8 = nonMonotonousSequenceException5.getPrevious(); int int9 = nonMonotonousSequenceException5.getIndex(); org.junit.Assert.assertTrue("'" + orderDirection3 + "' != '" + org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING + "'", orderDirection3.equals(org.apache.commons.math.util.MathUtils.OrderDirection.INCREASING)); org.junit.Assert.assertEquals("'" + number6 + "' != '" + 100.0f + "'", number6, 100.0f); org.junit.Assert.assertNotNull(exceptionContext7); org.junit.Assert.assertEquals("'" + number8 + "' != '" + 100.0f + "'", number8, 100.0f); org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1)); }
public void test0496() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0496"); java.math.BigInteger bigInteger0 = null; // The following exception was thrown during execution in test generation try { java.math.BigInteger bigInteger2 = org.apache.commons.math.util.MathUtils.pow(bigInteger0, (-1023)); org.junit.Assert.fail("Expected exception of type org.apache.commons.math.exception.NotPositiveException; message: exponent (-1,023)"); } catch (org.apache.commons.math.exception.NotPositiveException e) { // Expected exception. } }
public void test0497() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0497"); org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ONE; org.apache.commons.math.complex.Complex complex1 = complex0.sin(); org.apache.commons.math.Field<org.apache.commons.math.complex.Complex> complexField2 = complex0.getField(); org.apache.commons.math.complex.Complex complex3 = complexField2.getOne(); org.junit.Assert.assertNotNull(complex0); org.junit.Assert.assertNotNull(complex1); org.junit.Assert.assertNotNull(complexField2); org.junit.Assert.assertNotNull(complex3); }
public void test0498() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0498"); int int2 = org.apache.commons.math.util.MathUtils.gcd(152, 5); org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1); }
public void test0499() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0499"); org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (byte) 10, 2.271483493251976E220d); }
public void test0500() throws Throwable { if (debug) System.out.format("%n%s%n", "RegressionTest0.test0500"); boolean boolean2 = org.apache.commons.math.util.MathUtils.equalsIncludingNaN((float) 6L, (float) 422604639L); org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false); }
