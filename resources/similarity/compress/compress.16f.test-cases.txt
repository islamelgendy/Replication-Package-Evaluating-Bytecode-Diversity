Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.class
Class name: ArchiveStreamFactoryTest
Method name: shortTextFilesAreNoTARs
Start line: 36
End line: 44
Method source code: 
    public void shortTextFilesAreNoTARs() throws Exception {
        try {
            new ArchiveStreamFactory()
                .createArchiveInputStream(new ByteArrayInputStream("This certainly is not a tar archive, really, no kidding".getBytes()));
            fail("created an input stream for a non-archive");
        } catch (ArchiveException ae) {
            assertTrue(ae.getMessage().startsWith("No Archiver found"));
        }
    }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: new           #4
10: dup
11: ldc           #5
13: invokevirtual #6
16: invokespecial #7
19: invokevirtual #8
22: pop
23: ldc           #9
25: invokestatic  #10
28: goto          44
31: astore_1
32: aload_1
33: invokevirtual #12
36: ldc           #13
38: invokevirtual #14
41: invokestatic  #15
44: return
Exception table:
from    to  target type
0    28    31   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.class
Class name: ArchiveStreamFactoryTest
Method name: aiffFilesAreNoTARs
Start line: 50
End line: 63
Method source code: 
    public void aiffFilesAreNoTARs() throws Exception {
        InputStream is = null;
        try {
            is = new BufferedInputStream(new FileInputStream("src/test/resources/testAIFF.aif"));
            new ArchiveStreamFactory().createArchiveInputStream(is);
            fail("created an input stream for a non-archive");
        } catch (ArchiveException ae) {
            assertTrue(ae.getMessage().startsWith("No Archiver found"));
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }
Method byte code: 
0: aconst_null
1: astore_1
2: new           #16
5: dup
6: new           #17
9: dup
10: ldc           #18
12: invokespecial #19
15: invokespecial #20
18: astore_1
19: new           #2
22: dup
23: invokespecial #3
26: aload_1
27: invokevirtual #8
30: pop
31: ldc           #9
33: invokestatic  #10
36: aload_1
37: ifnull        82
40: aload_1
41: invokevirtual #21
44: goto          82
47: astore_2
48: aload_2
49: invokevirtual #12
52: ldc           #13
54: invokevirtual #14
57: invokestatic  #15
60: aload_1
61: ifnull        82
64: aload_1
65: invokevirtual #21
68: goto          82
71: astore_3
72: aload_1
73: ifnull        80
76: aload_1
77: invokevirtual #21
80: aload_3
81: athrow
82: return
Exception table:
from    to  target type
2    36    47   Class org/apache/commons/compress/archivers/ArchiveException
2    36    71   any
47    60    71   any
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test00
Start line: 29
End line: 0
Method source code: 
  public void test00()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      try { 
        archiveStreamFactory0.createArchiveInputStream("zip", (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: astore_1
8: aload_1
9: ldc           #4
11: aconst_null
12: checkcast     #5
15: invokevirtual #6
18: pop
19: ldc           #7
21: invokestatic  #8
24: goto          34
27: astore_2
28: ldc           #10
30: aload_2
31: invokestatic  #11
34: return
Exception table:
from    to  target type
8    24    27   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test01
Start line: 45
End line: 0
Method source code: 
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[172];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("zip", (InputStream) byteArrayInputStream0);
      assertEquals(0L, archiveInputStream0.getBytesRead());
  }
Method byte code: 
0: sipush        172
3: newarray       byte
5: astore_1
6: new           #12
9: dup
10: aload_1
11: invokespecial #13
14: astore_2
15: new           #2
18: dup
19: invokespecial #3
22: astore_3
23: aload_3
24: ldc           #4
26: aload_2
27: invokevirtual #6
30: astore        4
32: lconst_0
33: aload         4
35: invokevirtual #14
38: invokestatic  #15
41: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test02
Start line: 54
End line: 0
Method source code: 
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      try { 
        archiveStreamFactory0.createArchiveInputStream((String) null, (InputStream) byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }
Method byte code: 
0: iconst_0
1: newarray       byte
3: astore_1
4: new           #12
7: dup
8: aload_1
9: invokespecial #13
12: astore_2
13: new           #2
16: dup
17: invokespecial #3
20: astore_3
21: aload_3
22: aconst_null
23: checkcast     #16
26: aload_2
27: invokevirtual #6
30: pop
31: ldc           #7
33: invokestatic  #8
36: goto          48
39: astore        4
41: ldc           #10
43: aload         4
45: invokestatic  #11
48: return
Exception table:
from    to  target type
21    36    39   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test03
Start line: 72
End line: 0
Method source code: 
  public void test03()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      byte[] byteArray0 = new byte[12];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("ar", (InputStream) byteArrayInputStream0);
      assertEquals(0, archiveInputStream0.getCount());
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: astore_1
8: bipush        12
10: newarray       byte
12: astore_2
13: new           #12
16: dup
17: aload_2
18: invokespecial #13
21: astore_3
22: aload_1
23: ldc           #17
25: aload_3
26: invokevirtual #6
29: astore        4
31: lconst_0
32: aload         4
34: invokevirtual #18
37: i2l
38: invokestatic  #15
41: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test04
Start line: 81
End line: 0
Method source code: 
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[85];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("cpio", (InputStream) byteArrayInputStream0);
      assertEquals(0L, archiveInputStream0.getBytesRead());
  }
Method byte code: 
0: bipush        85
2: newarray       byte
4: astore_1
5: new           #12
8: dup
9: aload_1
10: invokespecial #13
13: astore_2
14: new           #2
17: dup
18: invokespecial #3
21: astore_3
22: aload_3
23: ldc           #19
25: aload_2
26: invokevirtual #6
29: astore        4
31: lconst_0
32: aload         4
34: invokevirtual #14
37: invokestatic  #15
40: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test05
Start line: 90
End line: 0
Method source code: 
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[250];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("tar", (InputStream) byteArrayInputStream0);
      assertEquals(0, archiveInputStream0.available());
  }
Method byte code: 
0: sipush        250
3: newarray       byte
5: astore_1
6: new           #12
9: dup
10: aload_1
11: invokespecial #13
14: astore_2
15: new           #2
18: dup
19: invokespecial #3
22: astore_3
23: aload_3
24: ldc           #20
26: aload_2
27: invokevirtual #6
30: astore        4
32: lconst_0
33: aload         4
35: invokevirtual #21
38: i2l
39: invokestatic  #15
42: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test06
Start line: 99
End line: 0
Method source code: 
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      ArchiveInputStream archiveInputStream0 = archiveStreamFactory0.createArchiveInputStream("jar", (InputStream) byteArrayInputStream0);
      assertEquals(0, archiveInputStream0.getCount());
  }
Method byte code: 
0: iconst_1
1: newarray       byte
3: astore_1
4: new           #12
7: dup
8: aload_1
9: invokespecial #13
12: astore_2
13: new           #2
16: dup
17: invokespecial #3
20: astore_3
21: aload_3
22: ldc           #22
24: aload_2
25: invokevirtual #6
28: astore        4
30: lconst_0
31: aload         4
33: invokevirtual #18
36: i2l
37: invokestatic  #15
40: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test07
Start line: 108
End line: 0
Method source code: 
  public void test07()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        archiveStreamFactory0.createArchiveInputStream("dump", (InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         verifyException("org.apache.commons.compress.archivers.dump.DumpArchiveInputStream", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: astore_1
8: new           #23
11: dup
12: invokespecial #24
15: astore_2
16: aload_1
17: ldc           #25
19: aload_2
20: invokevirtual #6
23: pop
24: ldc           #26
26: invokestatic  #8
29: goto          39
32: astore_3
33: ldc           #28
35: aload_3
36: invokestatic  #11
39: return
Exception table:
from    to  target type
16    29    32   Class java/lang/Exception
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test08
Start line: 124
End line: 0
Method source code: 
  public void test08()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        archiveStreamFactory0.createArchiveInputStream("", (InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: astore_1
8: new           #23
11: dup
12: invokespecial #24
15: astore_2
16: aload_1
17: ldc           #29
19: aload_2
20: invokevirtual #6
23: pop
24: ldc           #26
26: invokestatic  #8
29: goto          39
32: astore_3
33: ldc           #10
35: aload_3
36: invokestatic  #11
39: return
Exception table:
from    to  target type
16    29    32   Class java/lang/Exception
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test09
Start line: 140
End line: 0
Method source code: 
  public void test09()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      try { 
        archiveStreamFactory0.createArchiveOutputStream("ump", pipedOutputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }
Method byte code: 
0: new           #30
3: dup
4: invokespecial #31
7: astore_1
8: new           #2
11: dup
12: invokespecial #3
15: astore_2
16: aload_2
17: ldc           #32
19: aload_1
20: invokevirtual #33
23: pop
24: ldc           #26
26: invokestatic  #8
29: goto          39
32: astore_3
33: ldc           #10
35: aload_3
36: invokestatic  #11
39: return
Exception table:
from    to  target type
16    29    32   Class java/lang/Exception
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test10
Start line: 156
End line: 0
Method source code: 
  public void test10()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        archiveStreamFactory0.createArchiveOutputStream((String) null, pipedOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: astore_1
8: new           #30
11: dup
12: invokespecial #31
15: astore_2
16: aload_1
17: aconst_null
18: checkcast     #16
21: aload_2
22: invokevirtual #33
25: pop
26: ldc           #7
28: invokestatic  #8
31: goto          41
34: astore_3
35: ldc           #10
37: aload_3
38: invokestatic  #11
41: return
Exception table:
from    to  target type
16    31    34   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test11
Start line: 173
End line: 0
Method source code: 
  public void test11()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      try { 
        archiveStreamFactory0.createArchiveOutputStream("dump", (OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: astore_1
8: aload_1
9: ldc           #25
11: aconst_null
12: checkcast     #34
15: invokevirtual #33
18: pop
19: ldc           #7
21: invokestatic  #8
24: goto          34
27: astore_2
28: ldc           #10
30: aload_2
31: invokestatic  #11
34: return
Exception table:
from    to  target type
8    24    27   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test12
Start line: 189
End line: 0
Method source code: 
  public void test12()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      ArchiveOutputStream archiveOutputStream0 = archiveStreamFactory0.createArchiveOutputStream("ar", dataOutputStream0);
      assertEquals(0L, archiveOutputStream0.getBytesWritten());
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: astore_1
8: new           #35
11: dup
12: aconst_null
13: checkcast     #34
16: invokespecial #36
19: astore_2
20: aload_1
21: ldc           #17
23: aload_2
24: invokevirtual #33
27: astore_3
28: lconst_0
29: aload_3
30: invokevirtual #37
33: invokestatic  #15
36: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test13
Start line: 197
End line: 0
Method source code: 
  public void test13()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("zip");
      ZipArchiveOutputStream zipArchiveOutputStream0 = (ZipArchiveOutputStream)archiveStreamFactory0.createArchiveOutputStream("zip", mockFileOutputStream0);
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: astore_1
8: new           #38
11: dup
12: ldc           #4
14: invokespecial #39
17: astore_2
18: aload_1
19: ldc           #4
21: aload_2
22: invokevirtual #33
25: checkcast     #40
28: astore_3
29: ldc2_w        #41
32: ldc2_w        #41
35: invokestatic  #15
38: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test14
Start line: 205
End line: 0
Method source code: 
  public void test14()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      TarArchiveOutputStream tarArchiveOutputStream0 = (TarArchiveOutputStream)archiveStreamFactory0.createArchiveOutputStream("tar", pipedOutputStream0);
      assertEquals(3, TarArchiveOutputStream.LONGFILE_POSIX);
  }
Method byte code: 
0: new           #30
3: dup
4: invokespecial #31
7: astore_1
8: new           #2
11: dup
12: invokespecial #3
15: astore_2
16: aload_2
17: ldc           #20
19: aload_1
20: invokevirtual #33
23: checkcast     #43
26: astore_3
27: ldc2_w        #44
30: ldc2_w        #44
33: invokestatic  #15
36: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test15
Start line: 213
End line: 0
Method source code: 
  public void test15()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      JarArchiveOutputStream jarArchiveOutputStream0 = (JarArchiveOutputStream)archiveStreamFactory0.createArchiveOutputStream("jar", pipedOutputStream0);
      assertFalse(jarArchiveOutputStream0.isSeekable());
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: astore_1
8: new           #30
11: dup
12: invokespecial #31
15: astore_2
16: aload_1
17: ldc           #22
19: aload_2
20: invokevirtual #33
23: checkcast     #46
26: astore_3
27: aload_3
28: invokevirtual #47
31: invokestatic  #48
34: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test16
Start line: 221
End line: 0
Method source code: 
  public void test16()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ArchiveOutputStream archiveOutputStream0 = archiveStreamFactory0.createArchiveOutputStream("cpio", pipedOutputStream0);
      assertEquals(0, archiveOutputStream0.getCount());
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: astore_1
8: new           #30
11: dup
12: invokespecial #31
15: astore_2
16: aload_1
17: ldc           #19
19: aload_2
20: invokevirtual #33
23: astore_3
24: lconst_0
25: aload_3
26: invokevirtual #49
29: i2l
30: invokestatic  #15
33: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test17
Start line: 229
End line: 0
Method source code: 
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[85];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      try { 
        archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }
Method byte code: 
0: bipush        85
2: newarray       byte
4: astore_1
5: new           #12
8: dup
9: aload_1
10: invokespecial #13
13: astore_2
14: new           #2
17: dup
18: invokespecial #3
21: astore_3
22: aload_3
23: aload_2
24: invokevirtual #50
27: pop
28: ldc           #26
30: invokestatic  #8
33: goto          45
36: astore        4
38: ldc           #10
40: aload         4
42: invokestatic  #11
45: return
Exception table:
from    to  target type
22    33    36   Class java/lang/Exception
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test18
Start line: 246
End line: 0
Method source code: 
  public void test18()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      try { 
        archiveStreamFactory0.createArchiveInputStream((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: astore_1
8: aload_1
9: aconst_null
10: checkcast     #5
13: invokevirtual #50
16: pop
17: ldc           #7
19: invokestatic  #8
22: goto          32
25: astore_2
26: ldc           #10
28: aload_2
29: invokestatic  #11
32: return
Exception table:
from    to  target type
8    22    25   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test19
Start line: 262
End line: 0
Method source code: 
  public void test19()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        archiveStreamFactory0.createArchiveInputStream((InputStream) pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: astore_1
8: new           #23
11: dup
12: invokespecial #24
15: astore_2
16: aload_1
17: aload_2
18: invokevirtual #50
21: pop
22: ldc           #7
24: invokestatic  #8
27: goto          37
30: astore_3
31: ldc           #10
33: aload_3
34: invokestatic  #11
37: return
Exception table:
from    to  target type
16    27    30   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/ArchiveStreamFactory_ESTest.class
Class name: ArchiveStreamFactory_ESTest
Method name: test20
Start line: 279
End line: 0
Method source code: 
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[523];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      try { 
        archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         verifyException("org.apache.commons.compress.archivers.ArchiveStreamFactory", e);
      }
  }
Method byte code: 
0: sipush        523
3: newarray       byte
5: astore_1
6: new           #12
9: dup
10: aload_1
11: invokespecial #13
14: astore_2
15: new           #2
18: dup
19: invokespecial #3
22: astore_3
23: aload_3
24: aload_2
25: invokevirtual #50
28: pop
29: ldc           #26
31: invokestatic  #8
34: goto          46
37: astore        4
39: ldc           #10
41: aload         4
43: invokestatic  #11
46: return
Exception table:
from    to  target type
23    34    37   Class java/lang/Exception
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test001
Start line: 12
End line: 0
Method source code: 
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream2 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream1);
        long long3 = jarArchiveInputStream2.getBytesRead();
        long long4 = jarArchiveInputStream2.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream2);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream5, "00", true, false);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream10 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) arArchiveInputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #6
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #10
37: dup
38: aload_2
39: invokespecial #11
42: astore_3
43: aload_3
44: invokevirtual #12
47: lstore        4
49: aload_3
50: invokevirtual #12
53: lstore        6
55: new           #13
58: dup
59: aload_3
60: invokespecial #14
63: astore        8
65: new           #15
68: dup
69: aload         8
71: ldc           #16
73: iconst_1
74: iconst_0
75: invokespecial #17
78: astore        9
80: aload_1
81: aload         8
83: invokevirtual #18
86: astore        10
88: ldc           #19
90: invokestatic  #20
93: goto          98
96: astore        10
98: new           #22
101: dup
102: invokespecial #23
105: ldc           #24
107: invokevirtual #25
110: lload         4
112: invokevirtual #26
115: ldc           #27
117: invokevirtual #25
120: lconst_0
121: invokevirtual #26
124: ldc           #24
126: invokevirtual #25
129: invokevirtual #28
132: lload         4
134: lconst_0
135: lcmp
136: ifne          143
139: iconst_1
140: goto          144
143: iconst_0
144: invokestatic  #29
147: new           #22
150: dup
151: invokespecial #23
154: ldc           #24
156: invokevirtual #25
159: lload         6
161: invokevirtual #26
164: ldc           #27
166: invokevirtual #25
169: lconst_0
170: invokevirtual #26
173: ldc           #24
175: invokevirtual #25
178: invokevirtual #28
181: lload         6
183: lconst_0
184: lcmp
185: ifne          192
188: iconst_1
189: goto          193
192: iconst_0
193: invokestatic  #29
196: return
Exception table:
from    to  target type
80    93    96   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test002
Start line: 34
End line: 0
Method source code: 
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream8 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream7);
        int int9 = cpioArchiveInputStream8.available();
        int int10 = cpioArchiveInputStream8.getCount();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream11 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset -1.", (java.io.InputStream) cpioArchiveInputStream8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset -1. not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #30
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #10
37: dup
38: aload_2
39: invokespecial #11
42: astore_3
43: aload_3
44: invokevirtual #12
47: lstore        4
49: aload_3
50: invokevirtual #12
53: lstore        6
55: new           #13
58: dup
59: aload_3
60: invokespecial #14
63: astore        8
65: new           #31
68: dup
69: aload_3
70: invokespecial #32
73: astore        9
75: new           #33
78: dup
79: aload         9
81: invokespecial #34
84: astore        10
86: aload         10
88: invokevirtual #35
91: istore        11
93: aload         10
95: invokevirtual #36
98: istore        12
100: aload_1
101: ldc           #37
103: aload         10
105: invokevirtual #38
108: astore        13
110: ldc           #39
112: invokestatic  #20
115: goto          120
118: astore        13
120: new           #22
123: dup
124: invokespecial #23
127: ldc           #24
129: invokevirtual #25
132: lload         4
134: invokevirtual #26
137: ldc           #27
139: invokevirtual #25
142: lconst_0
143: invokevirtual #26
146: ldc           #24
148: invokevirtual #25
151: invokevirtual #28
154: lload         4
156: lconst_0
157: lcmp
158: ifne          165
161: iconst_1
162: goto          166
165: iconst_0
166: invokestatic  #29
169: new           #22
172: dup
173: invokespecial #23
176: ldc           #24
178: invokevirtual #25
181: lload         6
183: invokevirtual #26
186: ldc           #27
188: invokevirtual #25
191: lconst_0
192: invokevirtual #26
195: ldc           #24
197: invokevirtual #25
200: invokevirtual #28
203: lload         6
205: lconst_0
206: lcmp
207: ifne          214
210: iconst_1
211: goto          215
214: iconst_0
215: invokestatic  #29
218: new           #22
221: dup
222: invokespecial #23
225: ldc           #24
227: invokevirtual #25
230: iload         11
232: invokevirtual #41
235: ldc           #27
237: invokevirtual #25
240: iconst_1
241: invokevirtual #41
244: ldc           #24
246: invokevirtual #25
249: invokevirtual #28
252: iload         11
254: iconst_1
255: if_icmpne     262
258: iconst_1
259: goto          263
262: iconst_0
263: invokestatic  #29
266: new           #22
269: dup
270: invokespecial #23
273: ldc           #24
275: invokevirtual #25
278: iload         12
280: invokevirtual #41
283: ldc           #27
285: invokevirtual #25
288: iconst_0
289: invokevirtual #41
292: ldc           #24
294: invokevirtual #25
297: invokevirtual #28
300: iload         12
302: ifne          309
305: iconst_1
306: goto          310
309: iconst_0
310: invokestatic  #29
313: return
Exception table:
from    to  target type
100   115   118   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test003
Start line: 61
End line: 0
Method source code: 
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        byte[] byteArray9 = null;
        try {
            tarArchiveOutputStream4.write(byteArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #42
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aconst_null
66: astore        7
68: aload_3
69: aload         7
71: invokevirtual #50
74: ldc           #51
76: invokestatic  #20
79: goto          84
82: astore        8
84: new           #22
87: dup
88: invokespecial #23
91: ldc           #24
93: invokevirtual #25
96: lload         4
98: invokevirtual #26
101: ldc           #27
103: invokevirtual #25
106: lconst_0
107: invokevirtual #26
110: ldc           #24
112: invokevirtual #25
115: invokevirtual #28
118: lload         4
120: lconst_0
121: lcmp
122: ifne          129
125: iconst_1
126: goto          130
129: iconst_0
130: invokestatic  #29
133: aload         6
135: invokestatic  #53
138: return
Exception table:
from    to  target type
68    79    82   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test004
Start line: 83
End line: 0
Method source code: 
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        arArchiveInputStream6.count((long) 49152);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream9 = archiveStreamFactory0.createArchiveInputStream("00", (java.io.InputStream) arArchiveInputStream6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: 00 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #54
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #10
37: dup
38: aload_2
39: invokespecial #11
42: astore_3
43: aload_3
44: invokevirtual #12
47: lstore        4
49: aload_3
50: invokevirtual #12
53: lstore        6
55: new           #13
58: dup
59: aload_3
60: invokespecial #14
63: astore        8
65: aload         8
67: ldc2_w        #55
70: invokevirtual #57
73: aload_1
74: ldc           #16
76: aload         8
78: invokevirtual #38
81: astore        9
83: ldc           #58
85: invokestatic  #20
88: goto          93
91: astore        9
93: new           #22
96: dup
97: invokespecial #23
100: ldc           #24
102: invokevirtual #25
105: lload         4
107: invokevirtual #26
110: ldc           #27
112: invokevirtual #25
115: lconst_0
116: invokevirtual #26
119: ldc           #24
121: invokevirtual #25
124: invokevirtual #28
127: lload         4
129: lconst_0
130: lcmp
131: ifne          138
134: iconst_1
135: goto          139
138: iconst_0
139: invokestatic  #29
142: new           #22
145: dup
146: invokespecial #23
149: ldc           #24
151: invokevirtual #25
154: lload         6
156: invokevirtual #26
159: ldc           #27
161: invokevirtual #25
164: lconst_0
165: invokevirtual #26
168: ldc           #24
170: invokevirtual #25
173: invokevirtual #28
176: lload         6
178: lconst_0
179: lcmp
180: ifne          187
183: iconst_1
184: goto          188
187: iconst_0
188: invokestatic  #29
191: return
Exception table:
from    to  target type
73    88    91   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test005
Start line: 105
End line: 0
Method source code: 
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        byte[] byteArray14 = new byte[] { (byte) 120, (byte) 53, (byte) 83 };
        boolean boolean17 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("", byteArray14, (int) (byte) 100, 0);
        try {
            tarArchiveOutputStream4.write(byteArray14, 0, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '32' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[120, 53, 83]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #59
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #60
69: istore        7
71: iconst_3
72: newarray       byte
74: dup
75: iconst_0
76: bipush        120
78: bastore
79: dup
80: iconst_1
81: bipush        53
83: bastore
84: dup
85: iconst_2
86: bipush        83
88: bastore
89: astore        8
91: ldc           #61
93: aload         8
95: bipush        100
97: iconst_0
98: invokestatic  #62
101: istore        9
103: aload_3
104: aload         8
106: iconst_0
107: bipush        32
109: invokevirtual #63
112: ldc           #64
114: invokestatic  #20
117: goto          122
120: astore        10
122: new           #22
125: dup
126: invokespecial #23
129: ldc           #24
131: invokevirtual #25
134: lload         4
136: invokevirtual #26
139: ldc           #27
141: invokevirtual #25
144: lconst_0
145: invokevirtual #26
148: ldc           #24
150: invokevirtual #25
153: invokevirtual #28
156: lload         4
158: lconst_0
159: lcmp
160: ifne          167
163: iconst_1
164: goto          168
167: iconst_0
168: invokestatic  #29
171: aload         6
173: invokestatic  #53
176: new           #22
179: dup
180: invokespecial #23
183: ldc           #24
185: invokevirtual #25
188: iload         7
190: invokevirtual #41
193: ldc           #27
195: invokevirtual #25
198: iconst_0
199: invokevirtual #41
202: ldc           #24
204: invokevirtual #25
207: invokevirtual #28
210: iload         7
212: ifne          219
215: iconst_1
216: goto          220
219: iconst_0
220: invokestatic  #29
223: aload         8
225: invokestatic  #53
228: aload         8
230: invokestatic  #66
233: ldc           #67
235: invokestatic  #68
238: new           #22
241: dup
242: invokespecial #23
245: ldc           #24
247: invokevirtual #25
250: iload         9
252: invokevirtual #69
255: ldc           #27
257: invokevirtual #25
260: iconst_1
261: invokevirtual #69
264: ldc           #24
266: invokevirtual #25
269: invokevirtual #28
272: iload         9
274: iconst_1
275: if_icmpne     282
278: iconst_1
279: goto          283
282: iconst_0
283: invokestatic  #29
286: return
Exception table:
from    to  target type
103   117   120   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test006
Start line: 133
End line: 0
Method source code: 
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        try {
            tarArchiveOutputStream4.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #70
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #71
69: ldc           #51
71: invokestatic  #20
74: goto          79
77: astore        7
79: new           #22
82: dup
83: invokespecial #23
86: ldc           #24
88: invokevirtual #25
91: lload         4
93: invokevirtual #26
96: ldc           #27
98: invokevirtual #25
101: lconst_0
102: invokevirtual #26
105: ldc           #24
107: invokevirtual #25
110: invokevirtual #28
113: lload         4
115: lconst_0
116: lcmp
117: ifne          124
120: iconst_1
121: goto          125
124: iconst_0
125: invokestatic  #29
128: aload         6
130: invokestatic  #53
133: return
Exception table:
from    to  target type
65    74    77   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test007
Start line: 154
End line: 0
Method source code: 
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream2 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream1);
        long long3 = jarArchiveInputStream2.getBytesRead();
        long long4 = jarArchiveInputStream2.getBytesRead();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong6 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray7 = zipLong6.getBytes();
        int int10 = jarArchiveInputStream2.read(byteArray7, 0, 96);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream11 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) jarArchiveInputStream2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #72
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #10
37: dup
38: aload_2
39: invokespecial #11
42: astore_3
43: aload_3
44: invokevirtual #12
47: lstore        4
49: aload_3
50: invokevirtual #12
53: lstore        6
55: new           #73
58: dup
59: lconst_0
60: invokespecial #74
63: astore        8
65: aload         8
67: invokevirtual #75
70: astore        9
72: aload_3
73: aload         9
75: iconst_0
76: bipush        96
78: invokevirtual #76
81: istore        10
83: aload_1
84: aload_3
85: invokevirtual #18
88: astore        11
90: ldc           #19
92: invokestatic  #20
95: goto          100
98: astore        11
100: new           #22
103: dup
104: invokespecial #23
107: ldc           #24
109: invokevirtual #25
112: lload         4
114: invokevirtual #26
117: ldc           #27
119: invokevirtual #25
122: lconst_0
123: invokevirtual #26
126: ldc           #24
128: invokevirtual #25
131: invokevirtual #28
134: lload         4
136: lconst_0
137: lcmp
138: ifne          145
141: iconst_1
142: goto          146
145: iconst_0
146: invokestatic  #29
149: new           #22
152: dup
153: invokespecial #23
156: ldc           #24
158: invokevirtual #25
161: lload         6
163: invokevirtual #26
166: ldc           #27
168: invokevirtual #25
171: lconst_0
172: invokevirtual #26
175: ldc           #24
177: invokevirtual #25
180: invokevirtual #28
183: lload         6
185: lconst_0
186: lcmp
187: ifne          194
190: iconst_1
191: goto          195
194: iconst_0
195: invokestatic  #29
198: aload         9
200: invokestatic  #53
203: aload         9
205: invokestatic  #66
208: ldc           #77
210: invokestatic  #68
213: new           #22
216: dup
217: invokespecial #23
220: ldc           #24
222: invokevirtual #25
225: iload         10
227: invokevirtual #41
230: ldc           #27
232: invokevirtual #25
235: iconst_m1
236: invokevirtual #41
239: ldc           #24
241: invokevirtual #25
244: invokevirtual #28
247: iload         10
249: iconst_m1
250: if_icmpne     257
253: iconst_1
254: goto          258
257: iconst_0
258: invokestatic  #29
261: return
Exception table:
from    to  target type
83    95    98   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test008
Start line: 180
End line: 0
Method source code: 
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream16 = archiveStreamFactory0.createArchiveInputStream("always", (java.io.InputStream) arArchiveInputStream14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: always not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #78
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aconst_null
66: astore        7
68: new           #10
71: dup
72: aload         7
74: invokespecial #11
77: astore        8
79: aload         8
81: invokevirtual #12
84: lstore        9
86: aload         8
88: invokevirtual #12
91: lstore        11
93: new           #13
96: dup
97: aload         8
99: invokespecial #14
102: astore        13
104: new           #13
107: dup
108: aload         13
110: invokespecial #14
113: astore        14
115: aload_1
116: ldc           #79
118: aload         13
120: invokevirtual #38
123: astore        15
125: ldc           #80
127: invokestatic  #20
130: goto          135
133: astore        15
135: new           #22
138: dup
139: invokespecial #23
142: ldc           #24
144: invokevirtual #25
147: lload         4
149: invokevirtual #26
152: ldc           #27
154: invokevirtual #25
157: lconst_0
158: invokevirtual #26
161: ldc           #24
163: invokevirtual #25
166: invokevirtual #28
169: lload         4
171: lconst_0
172: lcmp
173: ifne          180
176: iconst_1
177: goto          181
180: iconst_0
181: invokestatic  #29
184: aload         6
186: invokestatic  #53
189: new           #22
192: dup
193: invokespecial #23
196: ldc           #24
198: invokevirtual #25
201: lload         9
203: invokevirtual #26
206: ldc           #27
208: invokevirtual #25
211: lconst_0
212: invokevirtual #26
215: ldc           #24
217: invokevirtual #25
220: invokevirtual #28
223: lload         9
225: lconst_0
226: lcmp
227: ifne          234
230: iconst_1
231: goto          235
234: iconst_0
235: invokestatic  #29
238: new           #22
241: dup
242: invokespecial #23
245: ldc           #24
247: invokevirtual #25
250: lload         11
252: invokevirtual #26
255: ldc           #27
257: invokevirtual #25
260: lconst_0
261: invokevirtual #26
264: ldc           #24
266: invokevirtual #25
269: invokevirtual #28
272: lload         11
274: lconst_0
275: lcmp
276: ifne          283
279: iconst_1
280: goto          284
283: iconst_0
284: invokestatic  #29
287: return
Exception table:
from    to  target type
115   130   133   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test009
Start line: 209
End line: 0
Method source code: 
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        try {
            archiveOutputStream8.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #81
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload         6
67: invokevirtual #82
70: ldc           #83
72: invokestatic  #20
75: goto          80
78: astore        7
80: new           #22
83: dup
84: invokespecial #23
87: ldc           #24
89: invokevirtual #25
92: lload         4
94: invokevirtual #26
97: ldc           #27
99: invokevirtual #25
102: lconst_0
103: invokevirtual #26
106: ldc           #24
108: invokevirtual #25
111: invokevirtual #28
114: lload         4
116: lconst_0
117: lcmp
118: ifne          125
121: iconst_1
122: goto          126
125: iconst_0
126: invokestatic  #29
129: aload         6
131: invokestatic  #53
134: return
Exception table:
from    to  target type
65    75    78   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test010
Start line: 230
End line: 0
Method source code: 
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.File file9 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry11 = tarArchiveOutputStream4.createArchiveEntry(file9, "UTF8");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #84
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aconst_null
66: astore        7
68: aload_3
69: aload         7
71: ldc           #85
73: invokevirtual #86
76: astore        8
78: ldc           #51
80: invokestatic  #20
83: goto          88
86: astore        8
88: new           #22
91: dup
92: invokespecial #23
95: ldc           #24
97: invokevirtual #25
100: lload         4
102: invokevirtual #26
105: ldc           #27
107: invokevirtual #25
110: lconst_0
111: invokevirtual #26
114: ldc           #24
116: invokevirtual #25
119: invokevirtual #28
122: lload         4
124: lconst_0
125: lcmp
126: ifne          133
129: iconst_1
130: goto          134
133: iconst_0
134: invokestatic  #29
137: aload         6
139: invokestatic  #53
142: return
Exception table:
from    to  target type
68    83    86   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test011
Start line: 252
End line: 0
Method source code: 
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream9 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream9);
        long long11 = jarArchiveInputStream10.getBytesRead();
        long long12 = jarArchiveInputStream10.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream13 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream10);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream15 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream14);
        int int16 = cpioArchiveInputStream15.read();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream17 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) cpioArchiveInputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #87
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aconst_null
66: astore        7
68: new           #10
71: dup
72: aload         7
74: invokespecial #11
77: astore        8
79: aload         8
81: invokevirtual #12
84: lstore        9
86: aload         8
88: invokevirtual #12
91: lstore        11
93: new           #13
96: dup
97: aload         8
99: invokespecial #14
102: astore        13
104: new           #31
107: dup
108: aload         8
110: invokespecial #32
113: astore        14
115: new           #33
118: dup
119: aload         14
121: invokespecial #34
124: astore        15
126: aload         15
128: invokevirtual #88
131: istore        16
133: aload_1
134: aload         15
136: invokevirtual #18
139: astore        17
141: ldc           #19
143: invokestatic  #20
146: goto          151
149: astore        17
151: new           #22
154: dup
155: invokespecial #23
158: ldc           #24
160: invokevirtual #25
163: lload         4
165: invokevirtual #26
168: ldc           #27
170: invokevirtual #25
173: lconst_0
174: invokevirtual #26
177: ldc           #24
179: invokevirtual #25
182: invokevirtual #28
185: lload         4
187: lconst_0
188: lcmp
189: ifne          196
192: iconst_1
193: goto          197
196: iconst_0
197: invokestatic  #29
200: aload         6
202: invokestatic  #53
205: new           #22
208: dup
209: invokespecial #23
212: ldc           #24
214: invokevirtual #25
217: lload         9
219: invokevirtual #26
222: ldc           #27
224: invokevirtual #25
227: lconst_0
228: invokevirtual #26
231: ldc           #24
233: invokevirtual #25
236: invokevirtual #28
239: lload         9
241: lconst_0
242: lcmp
243: ifne          250
246: iconst_1
247: goto          251
250: iconst_0
251: invokestatic  #29
254: new           #22
257: dup
258: invokespecial #23
261: ldc           #24
263: invokevirtual #25
266: lload         11
268: invokevirtual #26
271: ldc           #27
273: invokevirtual #25
276: lconst_0
277: invokevirtual #26
280: ldc           #24
282: invokevirtual #25
285: invokevirtual #28
288: lload         11
290: lconst_0
291: lcmp
292: ifne          299
295: iconst_1
296: goto          300
299: iconst_0
300: invokestatic  #29
303: new           #22
306: dup
307: invokespecial #23
310: ldc           #24
312: invokevirtual #25
315: iload         16
317: invokevirtual #41
320: ldc           #27
322: invokevirtual #25
325: iconst_m1
326: invokevirtual #41
329: ldc           #24
331: invokevirtual #25
334: invokevirtual #28
337: iload         16
339: iconst_m1
340: if_icmpne     347
343: iconst_1
344: goto          348
347: iconst_0
348: invokestatic  #29
351: return
Exception table:
from    to  target type
133   146   149   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test012
Start line: 284
End line: 0
Method source code: 
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream11 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) archiveOutputStream8, (int) (byte) 76, "-       0 jar");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: -       0 jar");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #89
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: new           #43
68: dup
69: aload         6
71: bipush        76
73: ldc           #90
75: invokespecial #91
78: astore        7
80: ldc           #92
82: invokestatic  #20
85: goto          90
88: astore        7
90: new           #22
93: dup
94: invokespecial #23
97: ldc           #24
99: invokevirtual #25
102: lload         4
104: invokevirtual #26
107: ldc           #27
109: invokevirtual #25
112: lconst_0
113: invokevirtual #26
116: ldc           #24
118: invokevirtual #25
121: invokevirtual #28
124: lload         4
126: lconst_0
127: lcmp
128: ifne          135
131: iconst_1
132: goto          136
135: iconst_0
136: invokestatic  #29
139: aload         6
141: invokestatic  #53
144: return
Exception table:
from    to  target type
65    85    88   Class java/nio/charset/IllegalCharsetNameException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test013
Start line: 305
End line: 0
Method source code: 
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        try {
            tarArchiveOutputStream10.close();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '10240' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #94
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #60
69: istore        7
71: new           #43
74: dup
75: aload_3
76: invokespecial #95
79: astore        8
81: aload         8
83: invokevirtual #71
86: ldc           #96
88: invokestatic  #20
91: goto          96
94: astore        9
96: new           #22
99: dup
100: invokespecial #23
103: ldc           #24
105: invokevirtual #25
108: lload         4
110: invokevirtual #26
113: ldc           #27
115: invokevirtual #25
118: lconst_0
119: invokevirtual #26
122: ldc           #24
124: invokevirtual #25
127: invokevirtual #28
130: lload         4
132: lconst_0
133: lcmp
134: ifne          141
137: iconst_1
138: goto          142
141: iconst_0
142: invokestatic  #29
145: aload         6
147: invokestatic  #53
150: new           #22
153: dup
154: invokespecial #23
157: ldc           #24
159: invokevirtual #25
162: iload         7
164: invokevirtual #41
167: ldc           #27
169: invokevirtual #25
172: iconst_0
173: invokevirtual #41
176: ldc           #24
178: invokevirtual #25
181: invokevirtual #28
184: iload         7
186: ifne          193
189: iconst_1
190: goto          194
193: iconst_0
194: invokestatic  #29
197: return
Exception table:
from    to  target type
81    91    94   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test014
Start line: 329
End line: 0
Method source code: 
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream1 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream2 = archiveStreamFactory0.createArchiveInputStream(inputStream1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Stream must not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #97
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: aload_1
35: aload_2
36: invokevirtual #18
39: astore_3
40: ldc           #98
42: invokestatic  #20
45: goto          49
48: astore_3
49: return
Exception table:
from    to  target type
34    45    48   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test015
Start line: 344
End line: 0
Method source code: 
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        try {
            tarArchiveOutputStream4.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #99
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #60
69: istore        7
71: new           #43
74: dup
75: aload_3
76: invokespecial #95
79: astore        8
81: aload_3
82: invokevirtual #71
85: ldc           #51
87: invokestatic  #20
90: goto          95
93: astore        9
95: new           #22
98: dup
99: invokespecial #23
102: ldc           #24
104: invokevirtual #25
107: lload         4
109: invokevirtual #26
112: ldc           #27
114: invokevirtual #25
117: lconst_0
118: invokevirtual #26
121: ldc           #24
123: invokevirtual #25
126: invokevirtual #28
129: lload         4
131: lconst_0
132: lcmp
133: ifne          140
136: iconst_1
137: goto          141
140: iconst_0
141: invokestatic  #29
144: aload         6
146: invokestatic  #53
149: new           #22
152: dup
153: invokespecial #23
156: ldc           #24
158: invokevirtual #25
161: iload         7
163: invokevirtual #41
166: ldc           #27
168: invokevirtual #25
171: iconst_0
172: invokevirtual #41
175: ldc           #24
177: invokevirtual #25
180: invokevirtual #28
183: iload         7
185: ifne          192
188: iconst_1
189: goto          193
192: iconst_0
193: invokestatic  #29
196: return
Exception table:
from    to  target type
81    90    93   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test016
Start line: 368
End line: 0
Method source code: 
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream9 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream10 = archiveStreamFactory0.createArchiveInputStream(inputStream9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Stream must not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #100
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aconst_null
66: astore        7
68: aload_1
69: aload         7
71: invokevirtual #18
74: astore        8
76: ldc           #98
78: invokestatic  #20
81: goto          86
84: astore        8
86: new           #22
89: dup
90: invokespecial #23
93: ldc           #24
95: invokevirtual #25
98: lload         4
100: invokevirtual #26
103: ldc           #27
105: invokevirtual #25
108: lconst_0
109: invokevirtual #26
112: ldc           #24
114: invokevirtual #25
117: invokevirtual #28
120: lload         4
122: lconst_0
123: lcmp
124: ifne          131
127: iconst_1
128: goto          132
131: iconst_0
132: invokestatic  #29
135: aload         6
137: invokestatic  #53
140: return
Exception table:
from    to  target type
68    81    84   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test017
Start line: 390
End line: 0
Method source code: 
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        tarArchiveOutputStream12.count(0L);
        long long15 = tarArchiveOutputStream12.getBytesWritten();
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream16 = archiveStreamFactory0.createArchiveOutputStream("-       3 jar", (java.io.OutputStream) tarArchiveOutputStream12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: -       3 jar not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #101
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aconst_null
66: astore        7
68: new           #43
71: dup
72: aload         7
74: ldc           #44
76: invokespecial #45
79: astore        8
81: aload         8
83: lconst_0
84: invokevirtual #46
87: aload         8
89: invokevirtual #47
92: lstore        9
94: aload_1
95: ldc           #102
97: aload         8
99: invokevirtual #49
102: astore        11
104: ldc           #103
106: invokestatic  #20
109: goto          114
112: astore        11
114: new           #22
117: dup
118: invokespecial #23
121: ldc           #24
123: invokevirtual #25
126: lload         4
128: invokevirtual #26
131: ldc           #27
133: invokevirtual #25
136: lconst_0
137: invokevirtual #26
140: ldc           #24
142: invokevirtual #25
145: invokevirtual #28
148: lload         4
150: lconst_0
151: lcmp
152: ifne          159
155: iconst_1
156: goto          160
159: iconst_0
160: invokestatic  #29
163: aload         6
165: invokestatic  #53
168: new           #22
171: dup
172: invokespecial #23
175: ldc           #24
177: invokevirtual #25
180: lload         9
182: invokevirtual #26
185: ldc           #27
187: invokevirtual #25
190: lconst_0
191: invokevirtual #26
194: ldc           #24
196: invokevirtual #25
199: invokevirtual #28
202: lload         9
204: lconst_0
205: lcmp
206: ifne          213
209: iconst_1
210: goto          214
213: iconst_0
214: invokestatic  #29
217: return
Exception table:
from    to  target type
94   109   112   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test018
Start line: 416
End line: 0
Method source code: 
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream3 = archiveStreamFactory0.createArchiveOutputStream("ZipLong value: 0", outputStream2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: OutputStream must not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #104
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: aload_1
35: ldc           #105
37: aload_2
38: invokevirtual #49
41: astore_3
42: ldc           #106
44: invokestatic  #20
47: goto          51
50: astore_3
51: return
Exception table:
from    to  target type
34    47    50   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test019
Start line: 431
End line: 0
Method source code: 
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream18 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream15, (int) (byte) 53, (int) (short) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream18, 40960, "jar");
        java.io.InputStream inputStream22 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream23 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream22);
        long long24 = jarArchiveInputStream23.getBytesRead();
        long long25 = jarArchiveInputStream23.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream26 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream23);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream27 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream23);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream28 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream27);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream32 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream28, "070702", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry35 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry35.setDevMinor((int) ' ');
        boolean boolean38 = cpioArchiveInputStream28.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry35);
        boolean boolean39 = tarArchiveInputStream18.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry35);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream40 = archiveStreamFactory0.createArchiveInputStream("\000\000\000\000", (java.io.InputStream) tarArchiveInputStream18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #107
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aconst_null
66: astore        7
68: new           #10
71: dup
72: aload         7
74: invokespecial #11
77: astore        8
79: aload         8
81: invokevirtual #12
84: lstore        9
86: aload         8
88: invokevirtual #12
91: lstore        11
93: new           #13
96: dup
97: aload         8
99: invokespecial #14
102: astore        13
104: new           #31
107: dup
108: aload         8
110: invokespecial #32
113: astore        14
115: new           #31
118: dup
119: aload         14
121: bipush        53
123: iconst_m1
124: invokespecial #108
127: astore        15
129: new           #31
132: dup
133: aload         15
135: ldc           #109
137: ldc           #44
139: invokespecial #110
142: astore        16
144: aconst_null
145: astore        17
147: new           #10
150: dup
151: aload         17
153: invokespecial #11
156: astore        18
158: aload         18
160: invokevirtual #12
163: lstore        19
165: aload         18
167: invokevirtual #12
170: lstore        21
172: new           #13
175: dup
176: aload         18
178: invokespecial #14
181: astore        23
183: new           #31
186: dup
187: aload         18
189: invokespecial #32
192: astore        24
194: new           #33
197: dup
198: aload         24
200: invokespecial #34
203: astore        25
205: new           #15
208: dup
209: aload         25
211: ldc           #111
213: iconst_0
214: iconst_0
215: invokespecial #17
218: astore        26
220: new           #112
223: dup
224: ldc           #61
226: iconst_0
227: invokespecial #113
230: astore        27
232: aload         27
234: bipush        32
236: invokevirtual #114
239: aload         25
241: aload         27
243: invokevirtual #115
246: istore        28
248: aload         15
250: aload         27
252: invokevirtual #116
255: istore        29
257: aload_1
258: ldc           #117
260: aload         15
262: invokevirtual #38
265: astore        30
267: ldc           #118
269: invokestatic  #20
272: goto          277
275: astore        30
277: new           #22
280: dup
281: invokespecial #23
284: ldc           #24
286: invokevirtual #25
289: lload         4
291: invokevirtual #26
294: ldc           #27
296: invokevirtual #25
299: lconst_0
300: invokevirtual #26
303: ldc           #24
305: invokevirtual #25
308: invokevirtual #28
311: lload         4
313: lconst_0
314: lcmp
315: ifne          322
318: iconst_1
319: goto          323
322: iconst_0
323: invokestatic  #29
326: aload         6
328: invokestatic  #53
331: new           #22
334: dup
335: invokespecial #23
338: ldc           #24
340: invokevirtual #25
343: lload         9
345: invokevirtual #26
348: ldc           #27
350: invokevirtual #25
353: lconst_0
354: invokevirtual #26
357: ldc           #24
359: invokevirtual #25
362: invokevirtual #28
365: lload         9
367: lconst_0
368: lcmp
369: ifne          376
372: iconst_1
373: goto          377
376: iconst_0
377: invokestatic  #29
380: new           #22
383: dup
384: invokespecial #23
387: ldc           #24
389: invokevirtual #25
392: lload         11
394: invokevirtual #26
397: ldc           #27
399: invokevirtual #25
402: lconst_0
403: invokevirtual #26
406: ldc           #24
408: invokevirtual #25
411: invokevirtual #28
414: lload         11
416: lconst_0
417: lcmp
418: ifne          425
421: iconst_1
422: goto          426
425: iconst_0
426: invokestatic  #29
429: new           #22
432: dup
433: invokespecial #23
436: ldc           #24
438: invokevirtual #25
441: lload         19
443: invokevirtual #26
446: ldc           #27
448: invokevirtual #25
451: lconst_0
452: invokevirtual #26
455: ldc           #24
457: invokevirtual #25
460: invokevirtual #28
463: lload         19
465: lconst_0
466: lcmp
467: ifne          474
470: iconst_1
471: goto          475
474: iconst_0
475: invokestatic  #29
478: new           #22
481: dup
482: invokespecial #23
485: ldc           #24
487: invokevirtual #25
490: lload         21
492: invokevirtual #26
495: ldc           #27
497: invokevirtual #25
500: lconst_0
501: invokevirtual #26
504: ldc           #24
506: invokevirtual #25
509: invokevirtual #28
512: lload         21
514: lconst_0
515: lcmp
516: ifne          523
519: iconst_1
520: goto          524
523: iconst_0
524: invokestatic  #29
527: new           #22
530: dup
531: invokespecial #23
534: ldc           #24
536: invokevirtual #25
539: iload         28
541: invokevirtual #69
544: ldc           #27
546: invokevirtual #25
549: iconst_1
550: invokevirtual #69
553: ldc           #24
555: invokevirtual #25
558: invokevirtual #28
561: iload         28
563: iconst_1
564: if_icmpne     571
567: iconst_1
568: goto          572
571: iconst_0
572: invokestatic  #29
575: new           #22
578: dup
579: invokespecial #23
582: ldc           #24
584: invokevirtual #25
587: iload         29
589: invokevirtual #69
592: ldc           #27
594: invokevirtual #25
597: iconst_1
598: invokevirtual #69
601: ldc           #24
603: invokevirtual #25
606: invokevirtual #28
609: iload         29
611: iconst_1
612: if_icmpne     619
615: iconst_1
616: goto          620
619: iconst_0
620: invokestatic  #29
623: return
Exception table:
from    to  target type
257   272   275   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test020
Start line: 478
End line: 0
Method source code: 
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream9 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream9);
        long long11 = jarArchiveInputStream10.getBytesRead();
        long long12 = jarArchiveInputStream10.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream13 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream10);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream15 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream14);
        int int16 = cpioArchiveInputStream15.available();
        int int17 = cpioArchiveInputStream15.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry19 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        tarArchiveEntry19.setMode((int) (short) 10);
        java.util.Date date22 = tarArchiveEntry19.getLastModifiedDate();
        tarArchiveEntry19.setMode((int) (byte) 120);
        java.util.Date date25 = tarArchiveEntry19.getModTime();
        tarArchiveEntry19.setNames("hi!", "UTF8");
        boolean boolean29 = tarArchiveEntry19.isFIFO();
        boolean boolean30 = cpioArchiveInputStream15.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry19);
        cpioArchiveInputStream15.close();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream32 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) cpioArchiveInputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #119
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aconst_null
66: astore        7
68: new           #10
71: dup
72: aload         7
74: invokespecial #11
77: astore        8
79: aload         8
81: invokevirtual #12
84: lstore        9
86: aload         8
88: invokevirtual #12
91: lstore        11
93: new           #13
96: dup
97: aload         8
99: invokespecial #14
102: astore        13
104: new           #31
107: dup
108: aload         8
110: invokespecial #32
113: astore        14
115: new           #33
118: dup
119: aload         14
121: invokespecial #34
124: astore        15
126: aload         15
128: invokevirtual #35
131: istore        16
133: aload         15
135: invokevirtual #36
138: istore        17
140: new           #112
143: dup
144: ldc           #44
146: invokespecial #120
149: astore        18
151: aload         18
153: bipush        10
155: invokevirtual #121
158: aload         18
160: invokevirtual #122
163: astore        19
165: aload         18
167: bipush        120
169: invokevirtual #121
172: aload         18
174: invokevirtual #123
177: astore        20
179: aload         18
181: ldc           #124
183: ldc           #85
185: invokevirtual #125
188: aload         18
190: invokevirtual #126
193: istore        21
195: aload         15
197: aload         18
199: invokevirtual #115
202: istore        22
204: aload         15
206: invokevirtual #127
209: aload_1
210: aload         15
212: invokevirtual #18
215: astore        23
217: ldc           #19
219: invokestatic  #20
222: goto          227
225: astore        23
227: new           #22
230: dup
231: invokespecial #23
234: ldc           #24
236: invokevirtual #25
239: lload         4
241: invokevirtual #26
244: ldc           #27
246: invokevirtual #25
249: lconst_0
250: invokevirtual #26
253: ldc           #24
255: invokevirtual #25
258: invokevirtual #28
261: lload         4
263: lconst_0
264: lcmp
265: ifne          272
268: iconst_1
269: goto          273
272: iconst_0
273: invokestatic  #29
276: aload         6
278: invokestatic  #53
281: new           #22
284: dup
285: invokespecial #23
288: ldc           #24
290: invokevirtual #25
293: lload         9
295: invokevirtual #26
298: ldc           #27
300: invokevirtual #25
303: lconst_0
304: invokevirtual #26
307: ldc           #24
309: invokevirtual #25
312: invokevirtual #28
315: lload         9
317: lconst_0
318: lcmp
319: ifne          326
322: iconst_1
323: goto          327
326: iconst_0
327: invokestatic  #29
330: new           #22
333: dup
334: invokespecial #23
337: ldc           #24
339: invokevirtual #25
342: lload         11
344: invokevirtual #26
347: ldc           #27
349: invokevirtual #25
352: lconst_0
353: invokevirtual #26
356: ldc           #24
358: invokevirtual #25
361: invokevirtual #28
364: lload         11
366: lconst_0
367: lcmp
368: ifne          375
371: iconst_1
372: goto          376
375: iconst_0
376: invokestatic  #29
379: new           #22
382: dup
383: invokespecial #23
386: ldc           #24
388: invokevirtual #25
391: iload         16
393: invokevirtual #41
396: ldc           #27
398: invokevirtual #25
401: iconst_1
402: invokevirtual #41
405: ldc           #24
407: invokevirtual #25
410: invokevirtual #28
413: iload         16
415: iconst_1
416: if_icmpne     423
419: iconst_1
420: goto          424
423: iconst_0
424: invokestatic  #29
427: new           #22
430: dup
431: invokespecial #23
434: ldc           #24
436: invokevirtual #25
439: iload         17
441: invokevirtual #41
444: ldc           #27
446: invokevirtual #25
449: iconst_0
450: invokevirtual #41
453: ldc           #24
455: invokevirtual #25
458: invokevirtual #28
461: iload         17
463: ifne          470
466: iconst_1
467: goto          471
470: iconst_0
471: invokestatic  #29
474: aload         19
476: invokestatic  #53
479: aload         20
481: invokestatic  #53
484: new           #22
487: dup
488: invokespecial #23
491: ldc           #24
493: invokevirtual #25
496: iload         21
498: invokevirtual #69
501: ldc           #27
503: invokevirtual #25
506: iconst_0
507: invokevirtual #69
510: ldc           #24
512: invokevirtual #25
515: invokevirtual #28
518: iload         21
520: ifne          527
523: iconst_1
524: goto          528
527: iconst_0
528: invokestatic  #29
531: new           #22
534: dup
535: invokespecial #23
538: ldc           #24
540: invokevirtual #25
543: iload         22
545: invokevirtual #69
548: ldc           #27
550: invokevirtual #25
553: iconst_1
554: invokevirtual #69
557: ldc           #24
559: invokevirtual #25
562: invokevirtual #28
565: iload         22
567: iconst_1
568: if_icmpne     575
571: iconst_1
572: goto          576
575: iconst_0
576: invokestatic  #29
579: return
Exception table:
from    to  target type
209   222   225   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test021
Start line: 527
End line: 0
Method source code: 
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        java.io.InputStream inputStream11 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream11);
        long long13 = jarArchiveInputStream12.getBytesRead();
        long long14 = jarArchiveInputStream12.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream12);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream19 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream15, "00", true, false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry21 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int22 = tarArchiveEntry21.getDevMinor();
        tarArchiveEntry21.setIds((int) (short) 3, 0);
        int int26 = tarArchiveEntry21.getDevMajor();
        boolean boolean27 = tarArchiveEntry21.isFile();
        java.io.InputStream inputStream28 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream29 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream28);
        long long30 = jarArchiveInputStream29.getBytesRead();
        long long31 = jarArchiveInputStream29.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream32 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream29);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream33 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream29);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream34 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream33);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream34, "070702", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry41 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry41.setDevMinor((int) ' ');
        boolean boolean44 = cpioArchiveInputStream34.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry41);
        boolean boolean45 = tarArchiveEntry21.equals((java.lang.Object) tarArchiveEntry41);
        boolean boolean46 = tarArchiveEntry41.isExtended();
        tarArchiveEntry41.setIds(32, 29127);
        boolean boolean50 = tarArchiveEntry41.isExtended();
        boolean boolean51 = zipArchiveInputStream19.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry41);
        try {
            tarArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry41);
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar");
        } catch (java.io.UnsupportedEncodingException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #128
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #60
69: istore        7
71: aload_3
72: invokevirtual #60
75: istore        8
77: aconst_null
78: astore        9
80: new           #10
83: dup
84: aload         9
86: invokespecial #11
89: astore        10
91: aload         10
93: invokevirtual #12
96: lstore        11
98: aload         10
100: invokevirtual #12
103: lstore        13
105: new           #13
108: dup
109: aload         10
111: invokespecial #14
114: astore        15
116: new           #15
119: dup
120: aload         15
122: ldc           #16
124: iconst_1
125: iconst_0
126: invokespecial #17
129: astore        16
131: new           #112
134: dup
135: ldc           #44
137: invokespecial #120
140: astore        17
142: aload         17
144: invokevirtual #129
147: istore        18
149: aload         17
151: iconst_3
152: iconst_0
153: invokevirtual #130
156: aload         17
158: invokevirtual #131
161: istore        19
163: aload         17
165: invokevirtual #132
168: istore        20
170: aconst_null
171: astore        21
173: new           #10
176: dup
177: aload         21
179: invokespecial #11
182: astore        22
184: aload         22
186: invokevirtual #12
189: lstore        23
191: aload         22
193: invokevirtual #12
196: lstore        25
198: new           #13
201: dup
202: aload         22
204: invokespecial #14
207: astore        27
209: new           #31
212: dup
213: aload         22
215: invokespecial #32
218: astore        28
220: new           #33
223: dup
224: aload         28
226: invokespecial #34
229: astore        29
231: new           #15
234: dup
235: aload         29
237: ldc           #111
239: iconst_0
240: iconst_0
241: invokespecial #17
244: astore        30
246: new           #112
249: dup
250: ldc           #61
252: iconst_0
253: invokespecial #113
256: astore        31
258: aload         31
260: bipush        32
262: invokevirtual #114
265: aload         29
267: aload         31
269: invokevirtual #115
272: istore        32
274: aload         17
276: aload         31
278: invokevirtual #133
281: istore        33
283: aload         31
285: invokevirtual #134
288: istore        34
290: aload         31
292: bipush        32
294: sipush        29127
297: invokevirtual #130
300: aload         31
302: invokevirtual #134
305: istore        35
307: aload         16
309: aload         31
311: invokevirtual #135
314: istore        36
316: aload_3
317: aload         31
319: invokevirtual #136
322: ldc           #137
324: invokestatic  #20
327: goto          332
330: astore        37
332: new           #22
335: dup
336: invokespecial #23
339: ldc           #24
341: invokevirtual #25
344: lload         4
346: invokevirtual #26
349: ldc           #27
351: invokevirtual #25
354: lconst_0
355: invokevirtual #26
358: ldc           #24
360: invokevirtual #25
363: invokevirtual #28
366: lload         4
368: lconst_0
369: lcmp
370: ifne          377
373: iconst_1
374: goto          378
377: iconst_0
378: invokestatic  #29
381: aload         6
383: invokestatic  #53
386: new           #22
389: dup
390: invokespecial #23
393: ldc           #24
395: invokevirtual #25
398: iload         7
400: invokevirtual #41
403: ldc           #27
405: invokevirtual #25
408: iconst_0
409: invokevirtual #41
412: ldc           #24
414: invokevirtual #25
417: invokevirtual #28
420: iload         7
422: ifne          429
425: iconst_1
426: goto          430
429: iconst_0
430: invokestatic  #29
433: new           #22
436: dup
437: invokespecial #23
440: ldc           #24
442: invokevirtual #25
445: iload         8
447: invokevirtual #41
450: ldc           #27
452: invokevirtual #25
455: iconst_0
456: invokevirtual #41
459: ldc           #24
461: invokevirtual #25
464: invokevirtual #28
467: iload         8
469: ifne          476
472: iconst_1
473: goto          477
476: iconst_0
477: invokestatic  #29
480: new           #22
483: dup
484: invokespecial #23
487: ldc           #24
489: invokevirtual #25
492: lload         11
494: invokevirtual #26
497: ldc           #27
499: invokevirtual #25
502: lconst_0
503: invokevirtual #26
506: ldc           #24
508: invokevirtual #25
511: invokevirtual #28
514: lload         11
516: lconst_0
517: lcmp
518: ifne          525
521: iconst_1
522: goto          526
525: iconst_0
526: invokestatic  #29
529: new           #22
532: dup
533: invokespecial #23
536: ldc           #24
538: invokevirtual #25
541: lload         13
543: invokevirtual #26
546: ldc           #27
548: invokevirtual #25
551: lconst_0
552: invokevirtual #26
555: ldc           #24
557: invokevirtual #25
560: invokevirtual #28
563: lload         13
565: lconst_0
566: lcmp
567: ifne          574
570: iconst_1
571: goto          575
574: iconst_0
575: invokestatic  #29
578: new           #22
581: dup
582: invokespecial #23
585: ldc           #24
587: invokevirtual #25
590: iload         18
592: invokevirtual #41
595: ldc           #27
597: invokevirtual #25
600: iconst_0
601: invokevirtual #41
604: ldc           #24
606: invokevirtual #25
609: invokevirtual #28
612: iload         18
614: ifne          621
617: iconst_1
618: goto          622
621: iconst_0
622: invokestatic  #29
625: new           #22
628: dup
629: invokespecial #23
632: ldc           #24
634: invokevirtual #25
637: iload         19
639: invokevirtual #41
642: ldc           #27
644: invokevirtual #25
647: iconst_0
648: invokevirtual #41
651: ldc           #24
653: invokevirtual #25
656: invokevirtual #28
659: iload         19
661: ifne          668
664: iconst_1
665: goto          669
668: iconst_0
669: invokestatic  #29
672: new           #22
675: dup
676: invokespecial #23
679: ldc           #24
681: invokevirtual #25
684: iload         20
686: invokevirtual #69
689: ldc           #27
691: invokevirtual #25
694: iconst_1
695: invokevirtual #69
698: ldc           #24
700: invokevirtual #25
703: invokevirtual #28
706: iload         20
708: iconst_1
709: if_icmpne     716
712: iconst_1
713: goto          717
716: iconst_0
717: invokestatic  #29
720: new           #22
723: dup
724: invokespecial #23
727: ldc           #24
729: invokevirtual #25
732: lload         23
734: invokevirtual #26
737: ldc           #27
739: invokevirtual #25
742: lconst_0
743: invokevirtual #26
746: ldc           #24
748: invokevirtual #25
751: invokevirtual #28
754: lload         23
756: lconst_0
757: lcmp
758: ifne          765
761: iconst_1
762: goto          766
765: iconst_0
766: invokestatic  #29
769: new           #22
772: dup
773: invokespecial #23
776: ldc           #24
778: invokevirtual #25
781: lload         25
783: invokevirtual #26
786: ldc           #27
788: invokevirtual #25
791: lconst_0
792: invokevirtual #26
795: ldc           #24
797: invokevirtual #25
800: invokevirtual #28
803: lload         25
805: lconst_0
806: lcmp
807: ifne          814
810: iconst_1
811: goto          815
814: iconst_0
815: invokestatic  #29
818: new           #22
821: dup
822: invokespecial #23
825: ldc           #24
827: invokevirtual #25
830: iload         32
832: invokevirtual #69
835: ldc           #27
837: invokevirtual #25
840: iconst_1
841: invokevirtual #69
844: ldc           #24
846: invokevirtual #25
849: invokevirtual #28
852: iload         32
854: iconst_1
855: if_icmpne     862
858: iconst_1
859: goto          863
862: iconst_0
863: invokestatic  #29
866: new           #22
869: dup
870: invokespecial #23
873: ldc           #24
875: invokevirtual #25
878: iload         33
880: invokevirtual #69
883: ldc           #27
885: invokevirtual #25
888: iconst_0
889: invokevirtual #69
892: ldc           #24
894: invokevirtual #25
897: invokevirtual #28
900: iload         33
902: ifne          909
905: iconst_1
906: goto          910
909: iconst_0
910: invokestatic  #29
913: new           #22
916: dup
917: invokespecial #23
920: ldc           #24
922: invokevirtual #25
925: iload         34
927: invokevirtual #69
930: ldc           #27
932: invokevirtual #25
935: iconst_0
936: invokevirtual #69
939: ldc           #24
941: invokevirtual #25
944: invokevirtual #28
947: iload         34
949: ifne          956
952: iconst_1
953: goto          957
956: iconst_0
957: invokestatic  #29
960: new           #22
963: dup
964: invokespecial #23
967: ldc           #24
969: invokevirtual #25
972: iload         35
974: invokevirtual #69
977: ldc           #27
979: invokevirtual #25
982: iconst_0
983: invokevirtual #69
986: ldc           #24
988: invokevirtual #25
991: invokevirtual #28
994: iload         35
996: ifne          1003
999: iconst_1
1000: goto          1004
1003: iconst_0
1004: invokestatic  #29
1007: new           #22
1010: dup
1011: invokespecial #23
1014: ldc           #24
1016: invokevirtual #25
1019: iload         36
1021: invokevirtual #69
1024: ldc           #27
1026: invokevirtual #25
1029: iconst_0
1030: invokevirtual #69
1033: ldc           #24
1035: invokevirtual #25
1038: invokevirtual #28
1041: iload         36
1043: ifne          1050
1046: iconst_1
1047: goto          1051
1050: iconst_0
1051: invokestatic  #29
1054: return
Exception table:
from    to  target type
316   327   330   Class java/io/UnsupportedEncodingException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test022
Start line: 591
End line: 0
Method source code: 
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream7 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream6);
        arArchiveInputStream7.close();
        arArchiveInputStream7.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream11 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream7, 64);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream12 = archiveStreamFactory0.createArchiveInputStream("\000\000\000\000", (java.io.InputStream) arArchiveInputStream7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #139
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #10
37: dup
38: aload_2
39: invokespecial #11
42: astore_3
43: aload_3
44: invokevirtual #12
47: lstore        4
49: aload_3
50: invokevirtual #12
53: lstore        6
55: new           #13
58: dup
59: aload_3
60: invokespecial #14
63: astore        8
65: new           #13
68: dup
69: aload         8
71: invokespecial #14
74: astore        9
76: aload         9
78: invokevirtual #140
81: aload         9
83: invokevirtual #140
86: new           #31
89: dup
90: aload         9
92: bipush        64
94: invokespecial #141
97: astore        10
99: aload_1
100: ldc           #117
102: aload         9
104: invokevirtual #38
107: astore        11
109: ldc           #118
111: invokestatic  #20
114: goto          119
117: astore        11
119: new           #22
122: dup
123: invokespecial #23
126: ldc           #24
128: invokevirtual #25
131: lload         4
133: invokevirtual #26
136: ldc           #27
138: invokevirtual #25
141: lconst_0
142: invokevirtual #26
145: ldc           #24
147: invokevirtual #25
150: invokevirtual #28
153: lload         4
155: lconst_0
156: lcmp
157: ifne          164
160: iconst_1
161: goto          165
164: iconst_0
165: invokestatic  #29
168: new           #22
171: dup
172: invokespecial #23
175: ldc           #24
177: invokevirtual #25
180: lload         6
182: invokevirtual #26
185: ldc           #27
187: invokevirtual #25
190: lconst_0
191: invokevirtual #26
194: ldc           #24
196: invokevirtual #25
199: invokevirtual #28
202: lload         6
204: lconst_0
205: lcmp
206: ifne          213
209: iconst_1
210: goto          214
213: iconst_0
214: invokestatic  #29
217: return
Exception table:
from    to  target type
99   114   117   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test023
Start line: 616
End line: 0
Method source code: 
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        java.io.File file10 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry12 = cpioArchiveOutputStream9.createArchiveEntry(file10, "070701");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #142
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: new           #143
68: dup
69: aload         6
71: invokespecial #144
74: astore        7
76: aconst_null
77: astore        8
79: aload         7
81: aload         8
83: ldc           #145
85: invokevirtual #146
88: astore        9
90: ldc           #51
92: invokestatic  #20
95: goto          100
98: astore        9
100: new           #22
103: dup
104: invokespecial #23
107: ldc           #24
109: invokevirtual #25
112: lload         4
114: invokevirtual #26
117: ldc           #27
119: invokevirtual #25
122: lconst_0
123: invokevirtual #26
126: ldc           #24
128: invokevirtual #25
131: invokevirtual #28
134: lload         4
136: lconst_0
137: lcmp
138: ifne          145
141: iconst_1
142: goto          146
145: iconst_0
146: invokestatic  #29
149: aload         6
151: invokestatic  #53
154: return
Exception table:
from    to  target type
79    95    98   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test024
Start line: 639
End line: 0
Method source code: 
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true);
        byte[] byteArray16 = new byte[] { (byte) 120, (byte) 53, (byte) 83 };
        boolean boolean19 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("", byteArray16, (int) (byte) 100, 0);
        boolean boolean21 = org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byteArray16, (int) (byte) 0);
        java.lang.String str22 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byteArray16);
        try {
            tarArchiveOutputStream4.write(byteArray16, 29127, (int) (short) 2);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '2' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[120, 53, 83]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "x5S" + "'", str22, "x5S");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #147
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #47
69: lstore        7
71: aload_3
72: iconst_1
73: invokevirtual #148
76: iconst_3
77: newarray       byte
79: dup
80: iconst_0
81: bipush        120
83: bastore
84: dup
85: iconst_1
86: bipush        53
88: bastore
89: dup
90: iconst_2
91: bipush        83
93: bastore
94: astore        9
96: ldc           #61
98: aload         9
100: bipush        100
102: iconst_0
103: invokestatic  #62
106: istore        10
108: aload         9
110: iconst_0
111: invokestatic  #149
114: istore        11
116: aload         9
118: invokestatic  #150
121: astore        12
123: aload_3
124: aload         9
126: sipush        29127
129: iconst_2
130: invokevirtual #63
133: ldc           #151
135: invokestatic  #20
138: goto          143
141: astore        13
143: new           #22
146: dup
147: invokespecial #23
150: ldc           #24
152: invokevirtual #25
155: lload         4
157: invokevirtual #26
160: ldc           #27
162: invokevirtual #25
165: lconst_0
166: invokevirtual #26
169: ldc           #24
171: invokevirtual #25
174: invokevirtual #28
177: lload         4
179: lconst_0
180: lcmp
181: ifne          188
184: iconst_1
185: goto          189
188: iconst_0
189: invokestatic  #29
192: aload         6
194: invokestatic  #53
197: new           #22
200: dup
201: invokespecial #23
204: ldc           #24
206: invokevirtual #25
209: lload         7
211: invokevirtual #26
214: ldc           #27
216: invokevirtual #25
219: lconst_0
220: invokevirtual #26
223: ldc           #24
225: invokevirtual #25
228: invokevirtual #28
231: lload         7
233: lconst_0
234: lcmp
235: ifne          242
238: iconst_1
239: goto          243
242: iconst_0
243: invokestatic  #29
246: aload         9
248: invokestatic  #53
251: aload         9
253: invokestatic  #66
256: ldc           #67
258: invokestatic  #68
261: new           #22
264: dup
265: invokespecial #23
268: ldc           #24
270: invokevirtual #25
273: iload         10
275: invokevirtual #69
278: ldc           #27
280: invokevirtual #25
283: iconst_1
284: invokevirtual #69
287: ldc           #24
289: invokevirtual #25
292: invokevirtual #28
295: iload         10
297: iconst_1
298: if_icmpne     305
301: iconst_1
302: goto          306
305: iconst_0
306: invokestatic  #29
309: new           #22
312: dup
313: invokespecial #23
316: ldc           #24
318: invokevirtual #25
321: iload         11
323: invokevirtual #69
326: ldc           #27
328: invokevirtual #25
331: iconst_0
332: invokevirtual #69
335: ldc           #24
337: invokevirtual #25
340: invokevirtual #28
343: iload         11
345: ifne          352
348: iconst_1
349: goto          353
352: iconst_0
353: invokestatic  #29
356: new           #22
359: dup
360: invokespecial #23
363: ldc           #24
365: invokevirtual #25
368: aload         12
370: invokevirtual #25
373: ldc           #152
375: invokevirtual #25
378: invokevirtual #28
381: aload         12
383: ldc           #153
385: invokestatic  #154
388: return
Exception table:
from    to  target type
123   138   141   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test025
Start line: 672
End line: 0
Method source code: 
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry10 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int11 = tarArchiveEntry10.getDevMinor();
        tarArchiveEntry10.setIds((int) (short) 3, 0);
        long long15 = tarArchiveEntry10.getSize();
        try {
            tarArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry10);
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar");
        } catch (java.io.UnsupportedEncodingException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #155
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: new           #112
68: dup
69: ldc           #44
71: invokespecial #120
74: astore        7
76: aload         7
78: invokevirtual #129
81: istore        8
83: aload         7
85: iconst_3
86: iconst_0
87: invokevirtual #130
90: aload         7
92: invokevirtual #156
95: lstore        9
97: aload_3
98: aload         7
100: invokevirtual #136
103: ldc           #137
105: invokestatic  #20
108: goto          113
111: astore        11
113: new           #22
116: dup
117: invokespecial #23
120: ldc           #24
122: invokevirtual #25
125: lload         4
127: invokevirtual #26
130: ldc           #27
132: invokevirtual #25
135: lconst_0
136: invokevirtual #26
139: ldc           #24
141: invokevirtual #25
144: invokevirtual #28
147: lload         4
149: lconst_0
150: lcmp
151: ifne          158
154: iconst_1
155: goto          159
158: iconst_0
159: invokestatic  #29
162: aload         6
164: invokestatic  #53
167: new           #22
170: dup
171: invokespecial #23
174: ldc           #24
176: invokevirtual #25
179: iload         8
181: invokevirtual #41
184: ldc           #27
186: invokevirtual #25
189: iconst_0
190: invokevirtual #41
193: ldc           #24
195: invokevirtual #25
198: invokevirtual #28
201: iload         8
203: ifne          210
206: iconst_1
207: goto          211
210: iconst_0
211: invokestatic  #29
214: new           #22
217: dup
218: invokespecial #23
221: ldc           #24
223: invokevirtual #25
226: lload         9
228: invokevirtual #26
231: ldc           #27
233: invokevirtual #25
236: lconst_0
237: invokevirtual #26
240: ldc           #24
242: invokevirtual #25
245: invokevirtual #28
248: lload         9
250: lconst_0
251: lcmp
252: ifne          259
255: iconst_1
256: goto          260
259: iconst_0
260: invokestatic  #29
263: return
Exception table:
from    to  target type
97   108   111   Class java/io/UnsupportedEncodingException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test026
Start line: 699
End line: 0
Method source code: 
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream2 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream1);
        long long3 = jarArchiveInputStream2.getBytesRead();
        long long4 = jarArchiveInputStream2.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream2);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream2);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream9 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream6, (int) (byte) 53, (int) (short) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream9, 40960, "jar");
        int int13 = tarArchiveInputStream12.available();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream14 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #157
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #10
37: dup
38: aload_2
39: invokespecial #11
42: astore_3
43: aload_3
44: invokevirtual #12
47: lstore        4
49: aload_3
50: invokevirtual #12
53: lstore        6
55: new           #13
58: dup
59: aload_3
60: invokespecial #14
63: astore        8
65: new           #31
68: dup
69: aload_3
70: invokespecial #32
73: astore        9
75: new           #31
78: dup
79: aload         9
81: bipush        53
83: iconst_m1
84: invokespecial #108
87: astore        10
89: new           #31
92: dup
93: aload         10
95: ldc           #109
97: ldc           #44
99: invokespecial #110
102: astore        11
104: aload         11
106: invokevirtual #158
109: istore        12
111: aload_1
112: aload         11
114: invokevirtual #18
117: astore        13
119: ldc           #19
121: invokestatic  #20
124: goto          129
127: astore        13
129: new           #22
132: dup
133: invokespecial #23
136: ldc           #24
138: invokevirtual #25
141: lload         4
143: invokevirtual #26
146: ldc           #27
148: invokevirtual #25
151: lconst_0
152: invokevirtual #26
155: ldc           #24
157: invokevirtual #25
160: invokevirtual #28
163: lload         4
165: lconst_0
166: lcmp
167: ifne          174
170: iconst_1
171: goto          175
174: iconst_0
175: invokestatic  #29
178: new           #22
181: dup
182: invokespecial #23
185: ldc           #24
187: invokevirtual #25
190: lload         6
192: invokevirtual #26
195: ldc           #27
197: invokevirtual #25
200: lconst_0
201: invokevirtual #26
204: ldc           #24
206: invokevirtual #25
209: invokevirtual #28
212: lload         6
214: lconst_0
215: lcmp
216: ifne          223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #29
227: new           #22
230: dup
231: invokespecial #23
234: ldc           #24
236: invokevirtual #25
239: iload         12
241: invokevirtual #41
244: ldc           #27
246: invokevirtual #25
249: iconst_0
250: invokevirtual #41
253: ldc           #24
255: invokevirtual #25
258: invokevirtual #28
261: iload         12
263: ifne          270
266: iconst_1
267: goto          271
270: iconst_0
271: invokestatic  #29
274: return
Exception table:
from    to  target type
111   124   127   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test027
Start line: 725
End line: 0
Method source code: 
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream9 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream9);
        long long11 = jarArchiveInputStream10.getBytesRead();
        long long12 = jarArchiveInputStream10.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream13 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream10);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream15 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream14);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream19 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream15, "070702", false, false);
        long long21 = cpioArchiveInputStream15.skip(162L);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream23 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream15, 40960);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream24 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) cpioArchiveInputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #159
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aconst_null
66: astore        7
68: new           #10
71: dup
72: aload         7
74: invokespecial #11
77: astore        8
79: aload         8
81: invokevirtual #12
84: lstore        9
86: aload         8
88: invokevirtual #12
91: lstore        11
93: new           #13
96: dup
97: aload         8
99: invokespecial #14
102: astore        13
104: new           #31
107: dup
108: aload         8
110: invokespecial #32
113: astore        14
115: new           #33
118: dup
119: aload         14
121: invokespecial #34
124: astore        15
126: new           #15
129: dup
130: aload         15
132: ldc           #111
134: iconst_0
135: iconst_0
136: invokespecial #17
139: astore        16
141: aload         15
143: ldc2_w        #160
146: invokevirtual #162
149: lstore        17
151: new           #31
154: dup
155: aload         15
157: ldc           #109
159: invokespecial #141
162: astore        19
164: aload_1
165: aload         15
167: invokevirtual #18
170: astore        20
172: ldc           #19
174: invokestatic  #20
177: goto          182
180: astore        20
182: new           #22
185: dup
186: invokespecial #23
189: ldc           #24
191: invokevirtual #25
194: lload         4
196: invokevirtual #26
199: ldc           #27
201: invokevirtual #25
204: lconst_0
205: invokevirtual #26
208: ldc           #24
210: invokevirtual #25
213: invokevirtual #28
216: lload         4
218: lconst_0
219: lcmp
220: ifne          227
223: iconst_1
224: goto          228
227: iconst_0
228: invokestatic  #29
231: aload         6
233: invokestatic  #53
236: new           #22
239: dup
240: invokespecial #23
243: ldc           #24
245: invokevirtual #25
248: lload         9
250: invokevirtual #26
253: ldc           #27
255: invokevirtual #25
258: lconst_0
259: invokevirtual #26
262: ldc           #24
264: invokevirtual #25
267: invokevirtual #28
270: lload         9
272: lconst_0
273: lcmp
274: ifne          281
277: iconst_1
278: goto          282
281: iconst_0
282: invokestatic  #29
285: new           #22
288: dup
289: invokespecial #23
292: ldc           #24
294: invokevirtual #25
297: lload         11
299: invokevirtual #26
302: ldc           #27
304: invokevirtual #25
307: lconst_0
308: invokevirtual #26
311: ldc           #24
313: invokevirtual #25
316: invokevirtual #28
319: lload         11
321: lconst_0
322: lcmp
323: ifne          330
326: iconst_1
327: goto          331
330: iconst_0
331: invokestatic  #29
334: new           #22
337: dup
338: invokespecial #23
341: ldc           #24
343: invokevirtual #25
346: lload         17
348: invokevirtual #26
351: ldc           #27
353: invokevirtual #25
356: lconst_0
357: invokevirtual #26
360: ldc           #24
362: invokevirtual #25
365: invokevirtual #28
368: lload         17
370: lconst_0
371: lcmp
372: ifne          379
375: iconst_1
376: goto          380
379: iconst_0
380: invokestatic  #29
383: return
Exception table:
from    to  target type
164   177   180   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test028
Start line: 759
End line: 0
Method source code: 
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        java.io.InputStream inputStream19 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream20 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream19);
        long long21 = jarArchiveInputStream20.getBytesRead();
        long long22 = jarArchiveInputStream20.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream23 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream20);
        jarArchiveInputStream20.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry25 = jarArchiveInputStream20.getNextEntry();
        jarArchiveInputStream20.mark(96);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream28 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) jarArchiveInputStream20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNull(archiveEntry25);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #163
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aconst_null
66: astore        7
68: new           #10
71: dup
72: aload         7
74: invokespecial #11
77: astore        8
79: aload         8
81: invokevirtual #12
84: lstore        9
86: aload         8
88: invokevirtual #12
91: lstore        11
93: new           #13
96: dup
97: aload         8
99: invokespecial #14
102: astore        13
104: new           #13
107: dup
108: aload         13
110: invokespecial #14
113: astore        14
115: aload         14
117: invokevirtual #140
120: aload         14
122: invokevirtual #140
125: aload_1
126: ldc           #164
128: aload         14
130: invokevirtual #38
133: astore        15
135: aconst_null
136: astore        16
138: new           #10
141: dup
142: aload         16
144: invokespecial #11
147: astore        17
149: aload         17
151: invokevirtual #12
154: lstore        18
156: aload         17
158: invokevirtual #12
161: lstore        20
163: new           #13
166: dup
167: aload         17
169: invokespecial #14
172: astore        22
174: aload         17
176: invokevirtual #165
179: aload         17
181: invokevirtual #166
184: astore        23
186: aload         17
188: bipush        96
190: invokevirtual #167
193: aload_1
194: aload         17
196: invokevirtual #18
199: astore        24
201: ldc           #19
203: invokestatic  #20
206: goto          211
209: astore        24
211: new           #22
214: dup
215: invokespecial #23
218: ldc           #24
220: invokevirtual #25
223: lload         4
225: invokevirtual #26
228: ldc           #27
230: invokevirtual #25
233: lconst_0
234: invokevirtual #26
237: ldc           #24
239: invokevirtual #25
242: invokevirtual #28
245: lload         4
247: lconst_0
248: lcmp
249: ifne          256
252: iconst_1
253: goto          257
256: iconst_0
257: invokestatic  #29
260: aload         6
262: invokestatic  #53
265: new           #22
268: dup
269: invokespecial #23
272: ldc           #24
274: invokevirtual #25
277: lload         9
279: invokevirtual #26
282: ldc           #27
284: invokevirtual #25
287: lconst_0
288: invokevirtual #26
291: ldc           #24
293: invokevirtual #25
296: invokevirtual #28
299: lload         9
301: lconst_0
302: lcmp
303: ifne          310
306: iconst_1
307: goto          311
310: iconst_0
311: invokestatic  #29
314: new           #22
317: dup
318: invokespecial #23
321: ldc           #24
323: invokevirtual #25
326: lload         11
328: invokevirtual #26
331: ldc           #27
333: invokevirtual #25
336: lconst_0
337: invokevirtual #26
340: ldc           #24
342: invokevirtual #25
345: invokevirtual #28
348: lload         11
350: lconst_0
351: lcmp
352: ifne          359
355: iconst_1
356: goto          360
359: iconst_0
360: invokestatic  #29
363: aload         15
365: invokestatic  #53
368: new           #22
371: dup
372: invokespecial #23
375: ldc           #24
377: invokevirtual #25
380: lload         18
382: invokevirtual #26
385: ldc           #27
387: invokevirtual #25
390: lconst_0
391: invokevirtual #26
394: ldc           #24
396: invokevirtual #25
399: invokevirtual #28
402: lload         18
404: lconst_0
405: lcmp
406: ifne          413
409: iconst_1
410: goto          414
413: iconst_0
414: invokestatic  #29
417: new           #22
420: dup
421: invokespecial #23
424: ldc           #24
426: invokevirtual #25
429: lload         20
431: invokevirtual #26
434: ldc           #27
436: invokevirtual #25
439: lconst_0
440: invokevirtual #26
443: ldc           #24
445: invokevirtual #25
448: invokevirtual #28
451: lload         20
453: lconst_0
454: lcmp
455: ifne          462
458: iconst_1
459: goto          463
462: iconst_0
463: invokestatic  #29
466: aload         23
468: invokestatic  #168
471: return
Exception table:
from    to  target type
193   206   209   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test029
Start line: 803
End line: 0
Method source code: 
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream3 = archiveStreamFactory0.createArchiveInputStream("data descriptor", inputStream2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: InputStream must not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #169
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: aload_1
35: ldc           #170
37: aload_2
38: invokevirtual #38
41: astore_3
42: ldc           #171
44: invokestatic  #20
47: goto          51
50: astore_3
51: return
Exception table:
from    to  target type
34    47    50   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test030
Start line: 818
End line: 0
Method source code: 
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream15);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream20 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16, "070702", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry23 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry23.setDevMinor((int) ' ');
        boolean boolean26 = cpioArchiveInputStream16.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry23);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16, 0, "dump");
        int int30 = tarArchiveInputStream29.available();
        byte[] byteArray35 = new byte[] { (byte) 120, (byte) 53, (byte) 83 };
        boolean boolean38 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("", byteArray35, (int) (byte) 100, 0);
        boolean boolean40 = org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byteArray35, (int) (byte) 0);
        int int43 = tarArchiveInputStream29.read(byteArray35, (int) (short) 2, 12);
        try {
            tarArchiveOutputStream4.write(byteArray35, 3, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '1' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[120, 53, 83]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #172
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #47
69: lstore        7
71: aconst_null
72: astore        9
74: new           #10
77: dup
78: aload         9
80: invokespecial #11
83: astore        10
85: aload         10
87: invokevirtual #12
90: lstore        11
92: aload         10
94: invokevirtual #12
97: lstore        13
99: new           #13
102: dup
103: aload         10
105: invokespecial #14
108: astore        15
110: new           #31
113: dup
114: aload         10
116: invokespecial #32
119: astore        16
121: new           #33
124: dup
125: aload         16
127: invokespecial #34
130: astore        17
132: new           #15
135: dup
136: aload         17
138: ldc           #111
140: iconst_0
141: iconst_0
142: invokespecial #17
145: astore        18
147: new           #112
150: dup
151: ldc           #61
153: iconst_0
154: invokespecial #113
157: astore        19
159: aload         19
161: bipush        32
163: invokevirtual #114
166: aload         17
168: aload         19
170: invokevirtual #115
173: istore        20
175: new           #31
178: dup
179: aload         17
181: iconst_0
182: ldc           #173
184: invokespecial #110
187: astore        21
189: aload         21
191: invokevirtual #158
194: istore        22
196: iconst_3
197: newarray       byte
199: dup
200: iconst_0
201: bipush        120
203: bastore
204: dup
205: iconst_1
206: bipush        53
208: bastore
209: dup
210: iconst_2
211: bipush        83
213: bastore
214: astore        23
216: ldc           #61
218: aload         23
220: bipush        100
222: iconst_0
223: invokestatic  #62
226: istore        24
228: aload         23
230: iconst_0
231: invokestatic  #149
234: istore        25
236: aload         21
238: aload         23
240: iconst_2
241: bipush        12
243: invokevirtual #174
246: istore        26
248: aload_3
249: aload         23
251: iconst_3
252: iconst_1
253: invokevirtual #63
256: ldc           #175
258: invokestatic  #20
261: goto          266
264: astore        27
266: new           #22
269: dup
270: invokespecial #23
273: ldc           #24
275: invokevirtual #25
278: lload         4
280: invokevirtual #26
283: ldc           #27
285: invokevirtual #25
288: lconst_0
289: invokevirtual #26
292: ldc           #24
294: invokevirtual #25
297: invokevirtual #28
300: lload         4
302: lconst_0
303: lcmp
304: ifne          311
307: iconst_1
308: goto          312
311: iconst_0
312: invokestatic  #29
315: aload         6
317: invokestatic  #53
320: new           #22
323: dup
324: invokespecial #23
327: ldc           #24
329: invokevirtual #25
332: lload         7
334: invokevirtual #26
337: ldc           #27
339: invokevirtual #25
342: lconst_0
343: invokevirtual #26
346: ldc           #24
348: invokevirtual #25
351: invokevirtual #28
354: lload         7
356: lconst_0
357: lcmp
358: ifne          365
361: iconst_1
362: goto          366
365: iconst_0
366: invokestatic  #29
369: new           #22
372: dup
373: invokespecial #23
376: ldc           #24
378: invokevirtual #25
381: lload         11
383: invokevirtual #26
386: ldc           #27
388: invokevirtual #25
391: lconst_0
392: invokevirtual #26
395: ldc           #24
397: invokevirtual #25
400: invokevirtual #28
403: lload         11
405: lconst_0
406: lcmp
407: ifne          414
410: iconst_1
411: goto          415
414: iconst_0
415: invokestatic  #29
418: new           #22
421: dup
422: invokespecial #23
425: ldc           #24
427: invokevirtual #25
430: lload         13
432: invokevirtual #26
435: ldc           #27
437: invokevirtual #25
440: lconst_0
441: invokevirtual #26
444: ldc           #24
446: invokevirtual #25
449: invokevirtual #28
452: lload         13
454: lconst_0
455: lcmp
456: ifne          463
459: iconst_1
460: goto          464
463: iconst_0
464: invokestatic  #29
467: new           #22
470: dup
471: invokespecial #23
474: ldc           #24
476: invokevirtual #25
479: iload         20
481: invokevirtual #69
484: ldc           #27
486: invokevirtual #25
489: iconst_1
490: invokevirtual #69
493: ldc           #24
495: invokevirtual #25
498: invokevirtual #28
501: iload         20
503: iconst_1
504: if_icmpne     511
507: iconst_1
508: goto          512
511: iconst_0
512: invokestatic  #29
515: new           #22
518: dup
519: invokespecial #23
522: ldc           #24
524: invokevirtual #25
527: iload         22
529: invokevirtual #41
532: ldc           #27
534: invokevirtual #25
537: iconst_0
538: invokevirtual #41
541: ldc           #24
543: invokevirtual #25
546: invokevirtual #28
549: iload         22
551: ifne          558
554: iconst_1
555: goto          559
558: iconst_0
559: invokestatic  #29
562: aload         23
564: invokestatic  #53
567: aload         23
569: invokestatic  #66
572: ldc           #67
574: invokestatic  #68
577: new           #22
580: dup
581: invokespecial #23
584: ldc           #24
586: invokevirtual #25
589: iload         24
591: invokevirtual #69
594: ldc           #27
596: invokevirtual #25
599: iconst_1
600: invokevirtual #69
603: ldc           #24
605: invokevirtual #25
608: invokevirtual #28
611: iload         24
613: iconst_1
614: if_icmpne     621
617: iconst_1
618: goto          622
621: iconst_0
622: invokestatic  #29
625: new           #22
628: dup
629: invokespecial #23
632: ldc           #24
634: invokevirtual #25
637: iload         25
639: invokevirtual #69
642: ldc           #27
644: invokevirtual #25
647: iconst_0
648: invokevirtual #69
651: ldc           #24
653: invokevirtual #25
656: invokevirtual #28
659: iload         25
661: ifne          668
664: iconst_1
665: goto          669
668: iconst_0
669: invokestatic  #29
672: new           #22
675: dup
676: invokespecial #23
679: ldc           #24
681: invokevirtual #25
684: iload         26
686: invokevirtual #41
689: ldc           #27
691: invokevirtual #25
694: iconst_m1
695: invokevirtual #41
698: ldc           #24
700: invokevirtual #25
703: invokevirtual #28
706: iload         26
708: iconst_m1
709: if_icmpne     716
712: iconst_1
713: goto          717
716: iconst_0
717: invokestatic  #29
720: return
Exception table:
from    to  target type
248   261   264   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test031
Start line: 867
End line: 0
Method source code: 
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        java.io.InputStream inputStream20 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream20);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong23 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray24 = zipLong23.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong26 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray27 = zipLong26.getBytes();
        boolean boolean29 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray24, byteArray27, true);
        int int32 = tarArchiveInputStream21.read(byteArray24, 0, 32);
        tarArchiveInputStream21.mark((int) '#');
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream35 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream21);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream36 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.archivers.dump.DumpArchiveException: 00", (java.io.InputStream) tarArchiveInputStream21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.dump.DumpArchiveException: 00 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #176
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aconst_null
66: astore        7
68: new           #10
71: dup
72: aload         7
74: invokespecial #11
77: astore        8
79: aload         8
81: invokevirtual #12
84: lstore        9
86: aload         8
88: invokevirtual #12
91: lstore        11
93: new           #13
96: dup
97: aload         8
99: invokespecial #14
102: astore        13
104: new           #13
107: dup
108: aload         13
110: invokespecial #14
113: astore        14
115: aload         14
117: invokevirtual #140
120: aload         14
122: invokevirtual #140
125: aload_1
126: ldc           #164
128: aload         14
130: invokevirtual #38
133: astore        15
135: aconst_null
136: astore        16
138: new           #31
141: dup
142: aload         16
144: invokespecial #32
147: astore        17
149: new           #73
152: dup
153: lconst_0
154: invokespecial #74
157: astore        18
159: aload         18
161: invokevirtual #75
164: astore        19
166: new           #73
169: dup
170: lconst_0
171: invokespecial #74
174: astore        20
176: aload         20
178: invokevirtual #75
181: astore        21
183: aload         19
185: aload         21
187: iconst_1
188: invokestatic  #177
191: istore        22
193: aload         17
195: aload         19
197: iconst_0
198: bipush        32
200: invokevirtual #174
203: istore        23
205: aload         17
207: bipush        35
209: invokevirtual #178
212: new           #13
215: dup
216: aload         17
218: invokespecial #14
221: astore        24
223: aload_1
224: ldc           #179
226: aload         17
228: invokevirtual #38
231: astore        25
233: ldc           #180
235: invokestatic  #20
238: goto          243
241: astore        25
243: new           #22
246: dup
247: invokespecial #23
250: ldc           #24
252: invokevirtual #25
255: lload         4
257: invokevirtual #26
260: ldc           #27
262: invokevirtual #25
265: lconst_0
266: invokevirtual #26
269: ldc           #24
271: invokevirtual #25
274: invokevirtual #28
277: lload         4
279: lconst_0
280: lcmp
281: ifne          288
284: iconst_1
285: goto          289
288: iconst_0
289: invokestatic  #29
292: aload         6
294: invokestatic  #53
297: new           #22
300: dup
301: invokespecial #23
304: ldc           #24
306: invokevirtual #25
309: lload         9
311: invokevirtual #26
314: ldc           #27
316: invokevirtual #25
319: lconst_0
320: invokevirtual #26
323: ldc           #24
325: invokevirtual #25
328: invokevirtual #28
331: lload         9
333: lconst_0
334: lcmp
335: ifne          342
338: iconst_1
339: goto          343
342: iconst_0
343: invokestatic  #29
346: new           #22
349: dup
350: invokespecial #23
353: ldc           #24
355: invokevirtual #25
358: lload         11
360: invokevirtual #26
363: ldc           #27
365: invokevirtual #25
368: lconst_0
369: invokevirtual #26
372: ldc           #24
374: invokevirtual #25
377: invokevirtual #28
380: lload         11
382: lconst_0
383: lcmp
384: ifne          391
387: iconst_1
388: goto          392
391: iconst_0
392: invokestatic  #29
395: aload         15
397: invokestatic  #53
400: aload         19
402: invokestatic  #53
405: aload         19
407: invokestatic  #66
410: ldc           #77
412: invokestatic  #68
415: aload         21
417: invokestatic  #53
420: aload         21
422: invokestatic  #66
425: ldc           #77
427: invokestatic  #68
430: new           #22
433: dup
434: invokespecial #23
437: ldc           #24
439: invokevirtual #25
442: iload         22
444: invokevirtual #69
447: ldc           #27
449: invokevirtual #25
452: iconst_1
453: invokevirtual #69
456: ldc           #24
458: invokevirtual #25
461: invokevirtual #28
464: iload         22
466: iconst_1
467: if_icmpne     474
470: iconst_1
471: goto          475
474: iconst_0
475: invokestatic  #29
478: new           #22
481: dup
482: invokespecial #23
485: ldc           #24
487: invokevirtual #25
490: iload         23
492: invokevirtual #41
495: ldc           #27
497: invokevirtual #25
500: iconst_m1
501: invokevirtual #41
504: ldc           #24
506: invokevirtual #25
509: invokevirtual #28
512: iload         23
514: iconst_m1
515: if_icmpne     522
518: iconst_1
519: goto          523
522: iconst_0
523: invokestatic  #29
526: return
Exception table:
from    to  target type
223   238   241   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test032
Start line: 916
End line: 0
Method source code: 
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream5 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream2);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy6 = null;
        zipArchiveOutputStream5.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy6);
        boolean boolean8 = zipArchiveOutputStream5.isSeekable();
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream9 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.ArchiveException:  \000", (java.io.OutputStream) zipArchiveOutputStream5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.ArchiveException:  ? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #181
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: new           #182
48: dup
49: aload_2
50: invokespecial #183
53: astore        4
55: aconst_null
56: astore        5
58: aload         4
60: aload         5
62: invokevirtual #184
65: aload         4
67: invokevirtual #185
70: istore        6
72: aload_1
73: ldc           #186
75: aload         4
77: invokevirtual #49
80: astore        7
82: ldc           #187
84: invokestatic  #20
87: goto          92
90: astore        7
92: new           #22
95: dup
96: invokespecial #23
99: ldc           #24
101: invokevirtual #25
104: iload         6
106: invokevirtual #69
109: ldc           #27
111: invokevirtual #25
114: iconst_0
115: invokevirtual #69
118: ldc           #24
120: invokevirtual #25
123: invokevirtual #28
126: iload         6
128: ifne          135
131: iconst_1
132: goto          136
135: iconst_0
136: invokestatic  #29
139: return
Exception table:
from    to  target type
72    87    90   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test033
Start line: 937
End line: 0
Method source code: 
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        try {
            cpioArchiveOutputStream9.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Trying to close non-existent entry");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #188
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: new           #143
68: dup
69: aload         6
71: invokespecial #144
74: astore        7
76: aload         7
78: invokevirtual #189
81: ldc           #190
83: invokestatic  #20
86: goto          91
89: astore        8
91: new           #22
94: dup
95: invokespecial #23
98: ldc           #24
100: invokevirtual #25
103: lload         4
105: invokevirtual #26
108: ldc           #27
110: invokevirtual #25
113: lconst_0
114: invokevirtual #26
117: ldc           #24
119: invokevirtual #25
122: invokevirtual #28
125: lload         4
127: lconst_0
128: lcmp
129: ifne          136
132: iconst_1
133: goto          137
136: iconst_0
137: invokestatic  #29
140: aload         6
142: invokestatic  #53
145: return
Exception table:
from    to  target type
76    86    89   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test034
Start line: 959
End line: 0
Method source code: 
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream2 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy4 = null;
        zipArchiveOutputStream3.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy4);
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory6 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream8 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream8, "jar");
        tarArchiveOutputStream10.count(0L);
        long long13 = tarArchiveOutputStream10.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream14 = archiveStreamFactory6.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream10);
        int int15 = tarArchiveOutputStream10.getCount();
        int int16 = tarArchiveOutputStream10.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong18 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray19 = zipLong18.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong21 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray22 = zipLong21.getBytes();
        boolean boolean24 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray19, byteArray22, true);
        boolean boolean25 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray19);
        tarArchiveOutputStream10.write(byteArray19, (int) (short) 4, (int) (byte) -1);
        try {
            zipArchiveOutputStream3.write(byteArray19, 8, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #191
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #43
29: dup
30: aload_1
31: ldc           #44
33: invokespecial #45
36: astore_2
37: new           #182
40: dup
41: aload_1
42: invokespecial #183
45: astore_3
46: aconst_null
47: astore        4
49: aload_3
50: aload         4
52: invokevirtual #184
55: new           #8
58: dup
59: invokespecial #9
62: astore        5
64: aconst_null
65: astore        6
67: new           #43
70: dup
71: aload         6
73: ldc           #44
75: invokespecial #45
78: astore        7
80: aload         7
82: lconst_0
83: invokevirtual #46
86: aload         7
88: invokevirtual #47
91: lstore        8
93: aload         5
95: ldc           #48
97: aload         7
99: invokevirtual #49
102: astore        10
104: aload         7
106: invokevirtual #60
109: istore        11
111: aload         7
113: invokevirtual #60
116: istore        12
118: new           #73
121: dup
122: lconst_0
123: invokespecial #74
126: astore        13
128: aload         13
130: invokevirtual #75
133: astore        14
135: new           #73
138: dup
139: lconst_0
140: invokespecial #74
143: astore        15
145: aload         15
147: invokevirtual #75
150: astore        16
152: aload         14
154: aload         16
156: iconst_1
157: invokestatic  #177
160: istore        17
162: aload         14
164: invokestatic  #192
167: istore        18
169: aload         7
171: aload         14
173: iconst_4
174: iconst_m1
175: invokevirtual #63
178: aload_3
179: aload         14
181: bipush        8
183: bipush        12
185: invokevirtual #193
188: ldc           #51
190: invokestatic  #20
193: goto          198
196: astore        19
198: new           #22
201: dup
202: invokespecial #23
205: ldc           #24
207: invokevirtual #25
210: lload         8
212: invokevirtual #26
215: ldc           #27
217: invokevirtual #25
220: lconst_0
221: invokevirtual #26
224: ldc           #24
226: invokevirtual #25
229: invokevirtual #28
232: lload         8
234: lconst_0
235: lcmp
236: ifne          243
239: iconst_1
240: goto          244
243: iconst_0
244: invokestatic  #29
247: aload         10
249: invokestatic  #53
252: new           #22
255: dup
256: invokespecial #23
259: ldc           #24
261: invokevirtual #25
264: iload         11
266: invokevirtual #41
269: ldc           #27
271: invokevirtual #25
274: iconst_0
275: invokevirtual #41
278: ldc           #24
280: invokevirtual #25
283: invokevirtual #28
286: iload         11
288: ifne          295
291: iconst_1
292: goto          296
295: iconst_0
296: invokestatic  #29
299: new           #22
302: dup
303: invokespecial #23
306: ldc           #24
308: invokevirtual #25
311: iload         12
313: invokevirtual #41
316: ldc           #27
318: invokevirtual #25
321: iconst_0
322: invokevirtual #41
325: ldc           #24
327: invokevirtual #25
330: invokevirtual #28
333: iload         12
335: ifne          342
338: iconst_1
339: goto          343
342: iconst_0
343: invokestatic  #29
346: aload         14
348: invokestatic  #53
351: aload         14
353: invokestatic  #66
356: ldc           #77
358: invokestatic  #68
361: aload         16
363: invokestatic  #53
366: aload         16
368: invokestatic  #66
371: ldc           #77
373: invokestatic  #68
376: new           #22
379: dup
380: invokespecial #23
383: ldc           #24
385: invokevirtual #25
388: iload         17
390: invokevirtual #69
393: ldc           #27
395: invokevirtual #25
398: iconst_1
399: invokevirtual #69
402: ldc           #24
404: invokevirtual #25
407: invokevirtual #28
410: iload         17
412: iconst_1
413: if_icmpne     420
416: iconst_1
417: goto          421
420: iconst_0
421: invokestatic  #29
424: new           #22
427: dup
428: invokespecial #23
431: ldc           #24
433: invokevirtual #25
436: iload         18
438: invokevirtual #69
441: ldc           #27
443: invokevirtual #25
446: iconst_1
447: invokevirtual #69
450: ldc           #24
452: invokevirtual #25
455: invokevirtual #28
458: iload         18
460: iconst_1
461: if_icmpne     468
464: iconst_1
465: goto          469
468: iconst_0
469: invokestatic  #29
472: return
Exception table:
from    to  target type
178   193   196   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test035
Start line: 1002
End line: 0
Method source code: 
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        tarArchiveOutputStream4.setLongFileMode((int) '4');
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream13 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, (int) (byte) 55, "org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 103.");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 103.");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #194
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: bipush        52
68: invokevirtual #195
71: new           #43
74: dup
75: aload_3
76: bipush        55
78: ldc           #196
80: invokespecial #91
83: astore        7
85: ldc           #197
87: invokestatic  #20
90: goto          95
93: astore        7
95: new           #22
98: dup
99: invokespecial #23
102: ldc           #24
104: invokevirtual #25
107: lload         4
109: invokevirtual #26
112: ldc           #27
114: invokevirtual #25
117: lconst_0
118: invokevirtual #26
121: ldc           #24
123: invokevirtual #25
126: invokevirtual #28
129: lload         4
131: lconst_0
132: lcmp
133: ifne          140
136: iconst_1
137: goto          141
140: iconst_0
141: invokestatic  #29
144: aload         6
146: invokestatic  #53
149: return
Exception table:
from    to  target type
71    90    93   Class java/nio/charset/IllegalCharsetNameException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test036
Start line: 1024
End line: 0
Method source code: 
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18, (int) (byte) 83, 263);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream23 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream22);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream24 = archiveStreamFactory0.createArchiveInputStream("", (java.io.InputStream) tarArchiveInputStream22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver:  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #198
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #10
37: dup
38: aload_2
39: invokespecial #11
42: astore_3
43: aload_3
44: invokevirtual #12
47: lstore        4
49: aload_3
50: invokevirtual #12
53: lstore        6
55: new           #13
58: dup
59: aload_3
60: invokespecial #14
63: astore        8
65: new           #31
68: dup
69: aload_3
70: invokespecial #32
73: astore        9
75: aload         9
77: invokevirtual #199
80: astore        10
82: aload         9
84: invokevirtual #199
87: astore        11
89: aload         9
91: ldc2_w        #200
94: invokevirtual #202
97: new           #15
100: dup
101: aload         9
103: ldc           #164
105: iconst_1
106: invokespecial #203
109: astore        12
111: aload_1
112: ldc           #44
114: aload         12
116: invokevirtual #38
119: astore        13
121: aconst_null
122: astore        14
124: new           #10
127: dup
128: aload         14
130: invokespecial #11
133: astore        15
135: aload         15
137: invokevirtual #12
140: lstore        16
142: new           #31
145: dup
146: aload         15
148: bipush        83
150: sipush        263
153: invokespecial #108
156: astore        18
158: new           #33
161: dup
162: aload         18
164: invokespecial #34
167: astore        19
169: aload_1
170: ldc           #61
172: aload         18
174: invokevirtual #38
177: astore        20
179: ldc           #204
181: invokestatic  #20
184: goto          189
187: astore        20
189: new           #22
192: dup
193: invokespecial #23
196: ldc           #24
198: invokevirtual #25
201: lload         4
203: invokevirtual #26
206: ldc           #27
208: invokevirtual #25
211: lconst_0
212: invokevirtual #26
215: ldc           #24
217: invokevirtual #25
220: invokevirtual #28
223: lload         4
225: lconst_0
226: lcmp
227: ifne          234
230: iconst_1
231: goto          235
234: iconst_0
235: invokestatic  #29
238: new           #22
241: dup
242: invokespecial #23
245: ldc           #24
247: invokevirtual #25
250: lload         6
252: invokevirtual #26
255: ldc           #27
257: invokevirtual #25
260: lconst_0
261: invokevirtual #26
264: ldc           #24
266: invokevirtual #25
269: invokevirtual #28
272: lload         6
274: lconst_0
275: lcmp
276: ifne          283
279: iconst_1
280: goto          284
283: iconst_0
284: invokestatic  #29
287: aload         10
289: invokestatic  #168
292: aload         11
294: invokestatic  #168
297: aload         13
299: invokestatic  #53
302: new           #22
305: dup
306: invokespecial #23
309: ldc           #24
311: invokevirtual #25
314: lload         16
316: invokevirtual #26
319: ldc           #27
321: invokevirtual #25
324: lconst_0
325: invokevirtual #26
328: ldc           #24
330: invokevirtual #25
333: invokevirtual #28
336: lload         16
338: lconst_0
339: lcmp
340: ifne          347
343: iconst_1
344: goto          348
347: iconst_0
348: invokestatic  #29
351: return
Exception table:
from    to  target type
169   184   187   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test037
Start line: 1060
End line: 0
Method source code: 
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        try {
            tarArchiveOutputStream4.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #205
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #60
69: istore        7
71: aload_3
72: invokevirtual #60
75: istore        8
77: new           #73
80: dup
81: lconst_0
82: invokespecial #74
85: astore        9
87: aload         9
89: invokevirtual #75
92: astore        10
94: new           #73
97: dup
98: lconst_0
99: invokespecial #74
102: astore        11
104: aload         11
106: invokevirtual #75
109: astore        12
111: aload         10
113: aload         12
115: iconst_1
116: invokestatic  #177
119: istore        13
121: aload         10
123: invokestatic  #192
126: istore        14
128: aload_3
129: aload         10
131: iconst_4
132: iconst_m1
133: invokevirtual #63
136: aload_3
137: invokevirtual #71
140: ldc           #51
142: invokestatic  #20
145: goto          150
148: astore        15
150: new           #22
153: dup
154: invokespecial #23
157: ldc           #24
159: invokevirtual #25
162: lload         4
164: invokevirtual #26
167: ldc           #27
169: invokevirtual #25
172: lconst_0
173: invokevirtual #26
176: ldc           #24
178: invokevirtual #25
181: invokevirtual #28
184: lload         4
186: lconst_0
187: lcmp
188: ifne          195
191: iconst_1
192: goto          196
195: iconst_0
196: invokestatic  #29
199: aload         6
201: invokestatic  #53
204: new           #22
207: dup
208: invokespecial #23
211: ldc           #24
213: invokevirtual #25
216: iload         7
218: invokevirtual #41
221: ldc           #27
223: invokevirtual #25
226: iconst_0
227: invokevirtual #41
230: ldc           #24
232: invokevirtual #25
235: invokevirtual #28
238: iload         7
240: ifne          247
243: iconst_1
244: goto          248
247: iconst_0
248: invokestatic  #29
251: new           #22
254: dup
255: invokespecial #23
258: ldc           #24
260: invokevirtual #25
263: iload         8
265: invokevirtual #41
268: ldc           #27
270: invokevirtual #25
273: iconst_0
274: invokevirtual #41
277: ldc           #24
279: invokevirtual #25
282: invokevirtual #28
285: iload         8
287: ifne          294
290: iconst_1
291: goto          295
294: iconst_0
295: invokestatic  #29
298: aload         10
300: invokestatic  #53
303: aload         10
305: invokestatic  #66
308: ldc           #77
310: invokestatic  #68
313: aload         12
315: invokestatic  #53
318: aload         12
320: invokestatic  #66
323: ldc           #77
325: invokestatic  #68
328: new           #22
331: dup
332: invokespecial #23
335: ldc           #24
337: invokevirtual #25
340: iload         13
342: invokevirtual #69
345: ldc           #27
347: invokevirtual #25
350: iconst_1
351: invokevirtual #69
354: ldc           #24
356: invokevirtual #25
359: invokevirtual #28
362: iload         13
364: iconst_1
365: if_icmpne     372
368: iconst_1
369: goto          373
372: iconst_0
373: invokestatic  #29
376: new           #22
379: dup
380: invokespecial #23
383: ldc           #24
385: invokevirtual #25
388: iload         14
390: invokevirtual #69
393: ldc           #27
395: invokevirtual #25
398: iconst_1
399: invokevirtual #69
402: ldc           #24
404: invokevirtual #25
407: invokevirtual #28
410: iload         14
412: iconst_1
413: if_icmpne     420
416: iconst_1
417: goto          421
420: iconst_0
421: invokestatic  #29
424: return
Exception table:
from    to  target type
136   145   148   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test038
Start line: 1098
End line: 0
Method source code: 
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        try {
            tarArchiveOutputStream4.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #206
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #207
69: ldc           #83
71: invokestatic  #20
74: goto          79
77: astore        7
79: new           #22
82: dup
83: invokespecial #23
86: ldc           #24
88: invokevirtual #25
91: lload         4
93: invokevirtual #26
96: ldc           #27
98: invokevirtual #25
101: lconst_0
102: invokevirtual #26
105: ldc           #24
107: invokevirtual #25
110: invokevirtual #28
113: lload         4
115: lconst_0
116: lcmp
117: ifne          124
120: iconst_1
121: goto          125
124: iconst_0
125: invokestatic  #29
128: aload         6
130: invokestatic  #53
133: return
Exception table:
from    to  target type
65    74    77   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test039
Start line: 1119
End line: 0
Method source code: 
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        java.io.InputStream inputStream23 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream23);
        long long25 = jarArchiveInputStream24.getBytesRead();
        long long26 = jarArchiveInputStream24.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream27 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream24);
        arArchiveInputStream27.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream27);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong31 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray32 = zipLong31.getBytes();
        long long33 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray32);
        int int36 = tarArchiveInputStream29.read(byteArray32, 0, (int) (short) 0);
        boolean boolean38 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray32, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding42 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("UTF8");
        boolean boolean44 = zipEncoding42.canEncode("00");
        java.lang.String str45 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray32, 8, 0, zipEncoding42);
        java.nio.ByteBuffer byteBuffer47 = zipEncoding42.encode("\001\ufffdX");
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry48 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(byteArray13, zipEncoding42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 99");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(zipEncoding42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteBuffer47);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #208
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #60
69: istore        7
71: aload_3
72: invokevirtual #60
75: istore        8
77: new           #73
80: dup
81: lconst_0
82: invokespecial #74
85: astore        9
87: aload         9
89: invokevirtual #75
92: astore        10
94: new           #73
97: dup
98: lconst_0
99: invokespecial #74
102: astore        11
104: aload         11
106: invokevirtual #75
109: astore        12
111: aload         10
113: aload         12
115: iconst_1
116: invokestatic  #177
119: istore        13
121: aload         10
123: invokestatic  #192
126: istore        14
128: aload_3
129: aload         10
131: iconst_4
132: iconst_m1
133: invokevirtual #63
136: aconst_null
137: astore        15
139: new           #10
142: dup
143: aload         15
145: invokespecial #11
148: astore        16
150: aload         16
152: invokevirtual #12
155: lstore        17
157: aload         16
159: invokevirtual #12
162: lstore        19
164: new           #13
167: dup
168: aload         16
170: invokespecial #14
173: astore        21
175: aload         21
177: invokevirtual #140
180: new           #31
183: dup
184: aload         21
186: invokespecial #32
189: astore        22
191: new           #73
194: dup
195: lconst_0
196: invokespecial #74
199: astore        23
201: aload         23
203: invokevirtual #75
206: astore        24
208: aload         24
210: invokestatic  #209
213: lstore        25
215: aload         22
217: aload         24
219: iconst_0
220: iconst_0
221: invokevirtual #174
224: istore        27
226: aload         24
228: iconst_m1
229: invokestatic  #210
232: istore        28
234: ldc           #85
236: invokestatic  #211
239: astore        29
241: aload         29
243: ldc           #16
245: invokeinterface #212,  2
250: istore        30
252: aload         24
254: bipush        8
256: iconst_0
257: aload         29
259: invokestatic  #213
262: astore        31
264: aload         29
266: ldc           #214
268: invokeinterface #215,  2
273: astore        32
275: new           #112
278: dup
279: aload         10
281: aload         29
283: invokespecial #216
286: astore        33
288: ldc           #217
290: invokestatic  #20
293: goto          298
296: astore        33
298: new           #22
301: dup
302: invokespecial #23
305: ldc           #24
307: invokevirtual #25
310: lload         4
312: invokevirtual #26
315: ldc           #27
317: invokevirtual #25
320: lconst_0
321: invokevirtual #26
324: ldc           #24
326: invokevirtual #25
329: invokevirtual #28
332: lload         4
334: lconst_0
335: lcmp
336: ifne          343
339: iconst_1
340: goto          344
343: iconst_0
344: invokestatic  #29
347: aload         6
349: invokestatic  #53
352: new           #22
355: dup
356: invokespecial #23
359: ldc           #24
361: invokevirtual #25
364: iload         7
366: invokevirtual #41
369: ldc           #27
371: invokevirtual #25
374: iconst_0
375: invokevirtual #41
378: ldc           #24
380: invokevirtual #25
383: invokevirtual #28
386: iload         7
388: ifne          395
391: iconst_1
392: goto          396
395: iconst_0
396: invokestatic  #29
399: new           #22
402: dup
403: invokespecial #23
406: ldc           #24
408: invokevirtual #25
411: iload         8
413: invokevirtual #41
416: ldc           #27
418: invokevirtual #25
421: iconst_0
422: invokevirtual #41
425: ldc           #24
427: invokevirtual #25
430: invokevirtual #28
433: iload         8
435: ifne          442
438: iconst_1
439: goto          443
442: iconst_0
443: invokestatic  #29
446: aload         10
448: invokestatic  #53
451: aload         10
453: invokestatic  #66
456: ldc           #77
458: invokestatic  #68
461: aload         12
463: invokestatic  #53
466: aload         12
468: invokestatic  #66
471: ldc           #77
473: invokestatic  #68
476: new           #22
479: dup
480: invokespecial #23
483: ldc           #24
485: invokevirtual #25
488: iload         13
490: invokevirtual #69
493: ldc           #27
495: invokevirtual #25
498: iconst_1
499: invokevirtual #69
502: ldc           #24
504: invokevirtual #25
507: invokevirtual #28
510: iload         13
512: iconst_1
513: if_icmpne     520
516: iconst_1
517: goto          521
520: iconst_0
521: invokestatic  #29
524: new           #22
527: dup
528: invokespecial #23
531: ldc           #24
533: invokevirtual #25
536: iload         14
538: invokevirtual #69
541: ldc           #27
543: invokevirtual #25
546: iconst_1
547: invokevirtual #69
550: ldc           #24
552: invokevirtual #25
555: invokevirtual #28
558: iload         14
560: iconst_1
561: if_icmpne     568
564: iconst_1
565: goto          569
568: iconst_0
569: invokestatic  #29
572: new           #22
575: dup
576: invokespecial #23
579: ldc           #24
581: invokevirtual #25
584: lload         17
586: invokevirtual #26
589: ldc           #27
591: invokevirtual #25
594: lconst_0
595: invokevirtual #26
598: ldc           #24
600: invokevirtual #25
603: invokevirtual #28
606: lload         17
608: lconst_0
609: lcmp
610: ifne          617
613: iconst_1
614: goto          618
617: iconst_0
618: invokestatic  #29
621: new           #22
624: dup
625: invokespecial #23
628: ldc           #24
630: invokevirtual #25
633: lload         19
635: invokevirtual #26
638: ldc           #27
640: invokevirtual #25
643: lconst_0
644: invokevirtual #26
647: ldc           #24
649: invokevirtual #25
652: invokevirtual #28
655: lload         19
657: lconst_0
658: lcmp
659: ifne          666
662: iconst_1
663: goto          667
666: iconst_0
667: invokestatic  #29
670: aload         24
672: invokestatic  #53
675: aload         24
677: invokestatic  #66
680: ldc           #77
682: invokestatic  #68
685: new           #22
688: dup
689: invokespecial #23
692: ldc           #24
694: invokevirtual #25
697: lload         25
699: invokevirtual #26
702: ldc           #27
704: invokevirtual #25
707: lconst_0
708: invokevirtual #26
711: ldc           #24
713: invokevirtual #25
716: invokevirtual #28
719: lload         25
721: lconst_0
722: lcmp
723: ifne          730
726: iconst_1
727: goto          731
730: iconst_0
731: invokestatic  #29
734: new           #22
737: dup
738: invokespecial #23
741: ldc           #24
743: invokevirtual #25
746: iload         27
748: invokevirtual #41
751: ldc           #27
753: invokevirtual #25
756: iconst_m1
757: invokevirtual #41
760: ldc           #24
762: invokevirtual #25
765: invokevirtual #28
768: iload         27
770: iconst_m1
771: if_icmpne     778
774: iconst_1
775: goto          779
778: iconst_0
779: invokestatic  #29
782: new           #22
785: dup
786: invokespecial #23
789: ldc           #24
791: invokevirtual #25
794: iload         28
796: invokevirtual #69
799: ldc           #27
801: invokevirtual #25
804: iconst_0
805: invokevirtual #69
808: ldc           #24
810: invokevirtual #25
813: invokevirtual #28
816: iload         28
818: ifne          825
821: iconst_1
822: goto          826
825: iconst_0
826: invokestatic  #29
829: aload         29
831: invokestatic  #53
834: new           #22
837: dup
838: invokespecial #23
841: ldc           #24
843: invokevirtual #25
846: iload         30
848: invokevirtual #69
851: ldc           #27
853: invokevirtual #25
856: iconst_1
857: invokevirtual #69
860: ldc           #24
862: invokevirtual #25
865: invokevirtual #28
868: iload         30
870: iconst_1
871: if_icmpne     878
874: iconst_1
875: goto          879
878: iconst_0
879: invokestatic  #29
882: new           #22
885: dup
886: invokespecial #23
889: ldc           #24
891: invokevirtual #25
894: aload         31
896: invokevirtual #25
899: ldc           #219
901: invokevirtual #25
904: invokevirtual #28
907: aload         31
909: ldc           #61
911: invokestatic  #154
914: aload         32
916: invokestatic  #53
919: return
Exception table:
from    to  target type
275   293   296   Class java/lang/ArrayIndexOutOfBoundsException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test040
Start line: 1184
End line: 0
Method source code: 
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream16 = null;
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream17 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream(inputStream16);
        int int18 = cpioArchiveInputStream17.available();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream19 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) cpioArchiveInputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #220
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #10
37: dup
38: aload_2
39: invokespecial #11
42: astore_3
43: aload_3
44: invokevirtual #12
47: lstore        4
49: aload_3
50: invokevirtual #12
53: lstore        6
55: new           #13
58: dup
59: aload_3
60: invokespecial #14
63: astore        8
65: new           #31
68: dup
69: aload_3
70: invokespecial #32
73: astore        9
75: aload         9
77: invokevirtual #199
80: astore        10
82: aload         9
84: invokevirtual #199
87: astore        11
89: aload         9
91: ldc2_w        #200
94: invokevirtual #202
97: new           #15
100: dup
101: aload         9
103: ldc           #164
105: iconst_1
106: invokespecial #203
109: astore        12
111: aload_1
112: ldc           #44
114: aload         12
116: invokevirtual #38
119: astore        13
121: aconst_null
122: astore        14
124: new           #33
127: dup
128: aload         14
130: invokespecial #34
133: astore        15
135: aload         15
137: invokevirtual #35
140: istore        16
142: aload_1
143: aload         15
145: invokevirtual #18
148: astore        17
150: ldc           #19
152: invokestatic  #20
155: goto          160
158: astore        17
160: new           #22
163: dup
164: invokespecial #23
167: ldc           #24
169: invokevirtual #25
172: lload         4
174: invokevirtual #26
177: ldc           #27
179: invokevirtual #25
182: lconst_0
183: invokevirtual #26
186: ldc           #24
188: invokevirtual #25
191: invokevirtual #28
194: lload         4
196: lconst_0
197: lcmp
198: ifne          205
201: iconst_1
202: goto          206
205: iconst_0
206: invokestatic  #29
209: new           #22
212: dup
213: invokespecial #23
216: ldc           #24
218: invokevirtual #25
221: lload         6
223: invokevirtual #26
226: ldc           #27
228: invokevirtual #25
231: lconst_0
232: invokevirtual #26
235: ldc           #24
237: invokevirtual #25
240: invokevirtual #28
243: lload         6
245: lconst_0
246: lcmp
247: ifne          254
250: iconst_1
251: goto          255
254: iconst_0
255: invokestatic  #29
258: aload         10
260: invokestatic  #168
263: aload         11
265: invokestatic  #168
268: aload         13
270: invokestatic  #53
273: new           #22
276: dup
277: invokespecial #23
280: ldc           #24
282: invokevirtual #25
285: iload         16
287: invokevirtual #41
290: ldc           #27
292: invokevirtual #25
295: iconst_1
296: invokevirtual #41
299: ldc           #24
301: invokevirtual #25
304: invokevirtual #28
307: iload         16
309: iconst_1
310: if_icmpne     317
313: iconst_1
314: goto          318
317: iconst_0
318: invokestatic  #29
321: return
Exception table:
from    to  target type
142   155   158   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test041
Start line: 1218
End line: 0
Method source code: 
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.OutputStream outputStream27 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream27);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy31 = null;
        zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy31);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream33 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream30);
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode34 = null;
        zipArchiveOutputStream30.setUseZip64(zip64Mode34);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream36 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.ArchiveException: ustar\000", (java.io.OutputStream) zipArchiveOutputStream30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.ArchiveException: ustar? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #221
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #10
37: dup
38: aload_2
39: invokespecial #11
42: astore_3
43: aload_3
44: invokevirtual #12
47: lstore        4
49: aload_3
50: invokevirtual #12
53: lstore        6
55: new           #13
58: dup
59: aload_3
60: invokespecial #14
63: astore        8
65: new           #31
68: dup
69: aload_3
70: invokespecial #32
73: astore        9
75: aload         9
77: invokevirtual #199
80: astore        10
82: aload         9
84: invokevirtual #199
87: astore        11
89: aload         9
91: ldc2_w        #200
94: invokevirtual #202
97: new           #15
100: dup
101: aload         9
103: ldc           #164
105: iconst_1
106: invokespecial #203
109: astore        12
111: aload_1
112: ldc           #44
114: aload         12
116: invokevirtual #38
119: astore        13
121: aconst_null
122: astore        14
124: new           #10
127: dup
128: aload         14
130: invokespecial #11
133: astore        15
135: aload         15
137: invokevirtual #12
140: lstore        16
142: aload         15
144: invokevirtual #12
147: lstore        18
149: new           #13
152: dup
153: aload         15
155: invokespecial #14
158: astore        20
160: aload         15
162: invokevirtual #165
165: aload         15
167: invokevirtual #166
170: astore        21
172: new           #10
175: dup
176: aload         15
178: invokespecial #11
181: astore        22
183: aload_1
184: ldc           #44
186: aload         15
188: invokevirtual #38
191: astore        23
193: aconst_null
194: astore        24
196: new           #43
199: dup
200: aload         24
202: ldc           #44
204: invokespecial #45
207: astore        25
209: new           #182
212: dup
213: aload         24
215: invokespecial #183
218: astore        26
220: aconst_null
221: astore        27
223: aload         26
225: aload         27
227: invokevirtual #184
230: new           #222
233: dup
234: aload         26
236: invokespecial #223
239: astore        28
241: aconst_null
242: astore        29
244: aload         26
246: aload         29
248: invokevirtual #224
251: aload_1
252: ldc           #225
254: aload         26
256: invokevirtual #49
259: astore        30
261: ldc           #226
263: invokestatic  #20
266: goto          271
269: astore        30
271: new           #22
274: dup
275: invokespecial #23
278: ldc           #24
280: invokevirtual #25
283: lload         4
285: invokevirtual #26
288: ldc           #27
290: invokevirtual #25
293: lconst_0
294: invokevirtual #26
297: ldc           #24
299: invokevirtual #25
302: invokevirtual #28
305: lload         4
307: lconst_0
308: lcmp
309: ifne          316
312: iconst_1
313: goto          317
316: iconst_0
317: invokestatic  #29
320: new           #22
323: dup
324: invokespecial #23
327: ldc           #24
329: invokevirtual #25
332: lload         6
334: invokevirtual #26
337: ldc           #27
339: invokevirtual #25
342: lconst_0
343: invokevirtual #26
346: ldc           #24
348: invokevirtual #25
351: invokevirtual #28
354: lload         6
356: lconst_0
357: lcmp
358: ifne          365
361: iconst_1
362: goto          366
365: iconst_0
366: invokestatic  #29
369: aload         10
371: invokestatic  #168
374: aload         11
376: invokestatic  #168
379: aload         13
381: invokestatic  #53
384: new           #22
387: dup
388: invokespecial #23
391: ldc           #24
393: invokevirtual #25
396: lload         16
398: invokevirtual #26
401: ldc           #27
403: invokevirtual #25
406: lconst_0
407: invokevirtual #26
410: ldc           #24
412: invokevirtual #25
415: invokevirtual #28
418: lload         16
420: lconst_0
421: lcmp
422: ifne          429
425: iconst_1
426: goto          430
429: iconst_0
430: invokestatic  #29
433: new           #22
436: dup
437: invokespecial #23
440: ldc           #24
442: invokevirtual #25
445: lload         18
447: invokevirtual #26
450: ldc           #27
452: invokevirtual #25
455: lconst_0
456: invokevirtual #26
459: ldc           #24
461: invokevirtual #25
464: invokevirtual #28
467: lload         18
469: lconst_0
470: lcmp
471: ifne          478
474: iconst_1
475: goto          479
478: iconst_0
479: invokestatic  #29
482: aload         21
484: invokestatic  #168
487: aload         23
489: invokestatic  #53
492: return
Exception table:
from    to  target type
251   266   269   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test042
Start line: 1269
End line: 0
Method source code: 
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        try {
            cpioArchiveOutputStream9.close();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '6' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #227
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: new           #143
68: dup
69: aload         6
71: invokespecial #144
74: astore        7
76: aload         7
78: invokevirtual #228
81: ldc           #229
83: invokestatic  #20
86: goto          91
89: astore        8
91: new           #22
94: dup
95: invokespecial #23
98: ldc           #24
100: invokevirtual #25
103: lload         4
105: invokevirtual #26
108: ldc           #27
110: invokevirtual #25
113: lconst_0
114: invokevirtual #26
117: ldc           #24
119: invokevirtual #25
122: invokevirtual #28
125: lload         4
127: lconst_0
128: lcmp
129: ifne          136
132: iconst_1
133: goto          137
136: iconst_0
137: invokestatic  #29
140: aload         6
142: invokestatic  #53
145: return
Exception table:
from    to  target type
76    86    89   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test043
Start line: 1291
End line: 0
Method source code: 
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        arArchiveInputStream14.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream16 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong18 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray19 = zipLong18.getBytes();
        long long20 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray19);
        int int23 = tarArchiveInputStream16.read(byteArray19, 0, (int) (short) 0);
        boolean boolean25 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray19, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding29 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("UTF8");
        boolean boolean31 = zipEncoding29.canEncode("00");
        java.lang.String str32 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray19, 8, 0, zipEncoding29);
        boolean boolean34 = zipEncoding29.canEncode("dump");
        java.io.InputStream inputStream35 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream36 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream35);
        long long37 = jarArchiveInputStream36.getBytesRead();
        long long38 = jarArchiveInputStream36.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream39 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream36);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream43 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream39, "00", true, false);
        int int44 = arArchiveInputStream39.getCount();
        java.io.InputStream inputStream45 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45);
        long long47 = jarArchiveInputStream46.getBytesRead();
        long long48 = jarArchiveInputStream46.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46);
        arArchiveInputStream49.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream51 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream49);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong53 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray54 = zipLong53.getBytes();
        long long55 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray54);
        int int58 = tarArchiveInputStream51.read(byteArray54, 0, (int) (short) 0);
        boolean boolean59 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray54);
        long long60 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray54);
        long long61 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray54);
        int int64 = arArchiveInputStream39.read(byteArray54, 8, 16877);
        java.lang.String str65 = zipEncoding29.decode(byteArray54);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong67 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray54, 0);
        try {
            cpioArchiveOutputStream9.write(byteArray54, (int) (byte) 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(zipEncoding29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\000\000\000\000" + "'", str65, "\000\000\000\000");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #230
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: new           #143
68: dup
69: aload         6
71: invokespecial #144
74: astore        7
76: aconst_null
77: astore        8
79: new           #10
82: dup
83: aload         8
85: invokespecial #11
88: astore        9
90: aload         9
92: invokevirtual #12
95: lstore        10
97: aload         9
99: invokevirtual #12
102: lstore        12
104: new           #13
107: dup
108: aload         9
110: invokespecial #14
113: astore        14
115: aload         14
117: invokevirtual #140
120: new           #31
123: dup
124: aload         14
126: invokespecial #32
129: astore        15
131: new           #73
134: dup
135: lconst_0
136: invokespecial #74
139: astore        16
141: aload         16
143: invokevirtual #75
146: astore        17
148: aload         17
150: invokestatic  #209
153: lstore        18
155: aload         15
157: aload         17
159: iconst_0
160: iconst_0
161: invokevirtual #174
164: istore        20
166: aload         17
168: iconst_m1
169: invokestatic  #210
172: istore        21
174: ldc           #85
176: invokestatic  #211
179: astore        22
181: aload         22
183: ldc           #16
185: invokeinterface #212,  2
190: istore        23
192: aload         17
194: bipush        8
196: iconst_0
197: aload         22
199: invokestatic  #213
202: astore        24
204: aload         22
206: ldc           #173
208: invokeinterface #212,  2
213: istore        25
215: aconst_null
216: astore        26
218: new           #10
221: dup
222: aload         26
224: invokespecial #11
227: astore        27
229: aload         27
231: invokevirtual #12
234: lstore        28
236: aload         27
238: invokevirtual #12
241: lstore        30
243: new           #13
246: dup
247: aload         27
249: invokespecial #14
252: astore        32
254: new           #15
257: dup
258: aload         32
260: ldc           #16
262: iconst_1
263: iconst_0
264: invokespecial #17
267: astore        33
269: aload         32
271: invokevirtual #231
274: istore        34
276: aconst_null
277: astore        35
279: new           #10
282: dup
283: aload         35
285: invokespecial #11
288: astore        36
290: aload         36
292: invokevirtual #12
295: lstore        37
297: aload         36
299: invokevirtual #12
302: lstore        39
304: new           #13
307: dup
308: aload         36
310: invokespecial #14
313: astore        41
315: aload         41
317: invokevirtual #140
320: new           #31
323: dup
324: aload         41
326: invokespecial #32
329: astore        42
331: new           #73
334: dup
335: lconst_0
336: invokespecial #74
339: astore        43
341: aload         43
343: invokevirtual #75
346: astore        44
348: aload         44
350: invokestatic  #209
353: lstore        45
355: aload         42
357: aload         44
359: iconst_0
360: iconst_0
361: invokevirtual #174
364: istore        47
366: aload         44
368: invokestatic  #192
371: istore        48
373: aload         44
375: invokestatic  #209
378: lstore        49
380: aload         44
382: invokestatic  #209
385: lstore        51
387: aload         32
389: aload         44
391: bipush        8
393: sipush        16877
396: invokevirtual #232
399: istore        53
401: aload         22
403: aload         44
405: invokeinterface #233,  2
410: astore        54
412: new           #73
415: dup
416: aload         44
418: iconst_0
419: invokespecial #234
422: astore        55
424: aload         7
426: aload         44
428: bipush        100
430: bipush        10
432: invokevirtual #235
435: ldc           #236
437: invokestatic  #20
440: goto          445
443: astore        56
445: new           #22
448: dup
449: invokespecial #23
452: ldc           #24
454: invokevirtual #25
457: lload         4
459: invokevirtual #26
462: ldc           #27
464: invokevirtual #25
467: lconst_0
468: invokevirtual #26
471: ldc           #24
473: invokevirtual #25
476: invokevirtual #28
479: lload         4
481: lconst_0
482: lcmp
483: ifne          490
486: iconst_1
487: goto          491
490: iconst_0
491: invokestatic  #29
494: aload         6
496: invokestatic  #53
499: new           #22
502: dup
503: invokespecial #23
506: ldc           #24
508: invokevirtual #25
511: lload         10
513: invokevirtual #26
516: ldc           #27
518: invokevirtual #25
521: lconst_0
522: invokevirtual #26
525: ldc           #24
527: invokevirtual #25
530: invokevirtual #28
533: lload         10
535: lconst_0
536: lcmp
537: ifne          544
540: iconst_1
541: goto          545
544: iconst_0
545: invokestatic  #29
548: new           #22
551: dup
552: invokespecial #23
555: ldc           #24
557: invokevirtual #25
560: lload         12
562: invokevirtual #26
565: ldc           #27
567: invokevirtual #25
570: lconst_0
571: invokevirtual #26
574: ldc           #24
576: invokevirtual #25
579: invokevirtual #28
582: lload         12
584: lconst_0
585: lcmp
586: ifne          593
589: iconst_1
590: goto          594
593: iconst_0
594: invokestatic  #29
597: aload         17
599: invokestatic  #53
602: aload         17
604: invokestatic  #66
607: ldc           #77
609: invokestatic  #68
612: new           #22
615: dup
616: invokespecial #23
619: ldc           #24
621: invokevirtual #25
624: lload         18
626: invokevirtual #26
629: ldc           #27
631: invokevirtual #25
634: lconst_0
635: invokevirtual #26
638: ldc           #24
640: invokevirtual #25
643: invokevirtual #28
646: lload         18
648: lconst_0
649: lcmp
650: ifne          657
653: iconst_1
654: goto          658
657: iconst_0
658: invokestatic  #29
661: new           #22
664: dup
665: invokespecial #23
668: ldc           #24
670: invokevirtual #25
673: iload         20
675: invokevirtual #41
678: ldc           #27
680: invokevirtual #25
683: iconst_m1
684: invokevirtual #41
687: ldc           #24
689: invokevirtual #25
692: invokevirtual #28
695: iload         20
697: iconst_m1
698: if_icmpne     705
701: iconst_1
702: goto          706
705: iconst_0
706: invokestatic  #29
709: new           #22
712: dup
713: invokespecial #23
716: ldc           #24
718: invokevirtual #25
721: iload         21
723: invokevirtual #69
726: ldc           #27
728: invokevirtual #25
731: iconst_0
732: invokevirtual #69
735: ldc           #24
737: invokevirtual #25
740: invokevirtual #28
743: iload         21
745: ifne          752
748: iconst_1
749: goto          753
752: iconst_0
753: invokestatic  #29
756: aload         22
758: invokestatic  #53
761: new           #22
764: dup
765: invokespecial #23
768: ldc           #24
770: invokevirtual #25
773: iload         23
775: invokevirtual #69
778: ldc           #27
780: invokevirtual #25
783: iconst_1
784: invokevirtual #69
787: ldc           #24
789: invokevirtual #25
792: invokevirtual #28
795: iload         23
797: iconst_1
798: if_icmpne     805
801: iconst_1
802: goto          806
805: iconst_0
806: invokestatic  #29
809: new           #22
812: dup
813: invokespecial #23
816: ldc           #24
818: invokevirtual #25
821: aload         24
823: invokevirtual #25
826: ldc           #219
828: invokevirtual #25
831: invokevirtual #28
834: aload         24
836: ldc           #61
838: invokestatic  #154
841: new           #22
844: dup
845: invokespecial #23
848: ldc           #24
850: invokevirtual #25
853: iload         25
855: invokevirtual #69
858: ldc           #27
860: invokevirtual #25
863: iconst_1
864: invokevirtual #69
867: ldc           #24
869: invokevirtual #25
872: invokevirtual #28
875: iload         25
877: iconst_1
878: if_icmpne     885
881: iconst_1
882: goto          886
885: iconst_0
886: invokestatic  #29
889: new           #22
892: dup
893: invokespecial #23
896: ldc           #24
898: invokevirtual #25
901: lload         28
903: invokevirtual #26
906: ldc           #27
908: invokevirtual #25
911: lconst_0
912: invokevirtual #26
915: ldc           #24
917: invokevirtual #25
920: invokevirtual #28
923: lload         28
925: lconst_0
926: lcmp
927: ifne          934
930: iconst_1
931: goto          935
934: iconst_0
935: invokestatic  #29
938: new           #22
941: dup
942: invokespecial #23
945: ldc           #24
947: invokevirtual #25
950: lload         30
952: invokevirtual #26
955: ldc           #27
957: invokevirtual #25
960: lconst_0
961: invokevirtual #26
964: ldc           #24
966: invokevirtual #25
969: invokevirtual #28
972: lload         30
974: lconst_0
975: lcmp
976: ifne          983
979: iconst_1
980: goto          984
983: iconst_0
984: invokestatic  #29
987: new           #22
990: dup
991: invokespecial #23
994: ldc           #24
996: invokevirtual #25
999: iload         34
1001: invokevirtual #41
1004: ldc           #27
1006: invokevirtual #25
1009: iconst_0
1010: invokevirtual #41
1013: ldc           #24
1015: invokevirtual #25
1018: invokevirtual #28
1021: iload         34
1023: ifne          1030
1026: iconst_1
1027: goto          1031
1030: iconst_0
1031: invokestatic  #29
1034: new           #22
1037: dup
1038: invokespecial #23
1041: ldc           #24
1043: invokevirtual #25
1046: lload         37
1048: invokevirtual #26
1051: ldc           #27
1053: invokevirtual #25
1056: lconst_0
1057: invokevirtual #26
1060: ldc           #24
1062: invokevirtual #25
1065: invokevirtual #28
1068: lload         37
1070: lconst_0
1071: lcmp
1072: ifne          1079
1075: iconst_1
1076: goto          1080
1079: iconst_0
1080: invokestatic  #29
1083: new           #22
1086: dup
1087: invokespecial #23
1090: ldc           #24
1092: invokevirtual #25
1095: lload         39
1097: invokevirtual #26
1100: ldc           #27
1102: invokevirtual #25
1105: lconst_0
1106: invokevirtual #26
1109: ldc           #24
1111: invokevirtual #25
1114: invokevirtual #28
1117: lload         39
1119: lconst_0
1120: lcmp
1121: ifne          1128
1124: iconst_1
1125: goto          1129
1128: iconst_0
1129: invokestatic  #29
1132: aload         44
1134: invokestatic  #53
1137: aload         44
1139: invokestatic  #66
1142: ldc           #77
1144: invokestatic  #68
1147: new           #22
1150: dup
1151: invokespecial #23
1154: ldc           #24
1156: invokevirtual #25
1159: lload         45
1161: invokevirtual #26
1164: ldc           #27
1166: invokevirtual #25
1169: lconst_0
1170: invokevirtual #26
1173: ldc           #24
1175: invokevirtual #25
1178: invokevirtual #28
1181: lload         45
1183: lconst_0
1184: lcmp
1185: ifne          1192
1188: iconst_1
1189: goto          1193
1192: iconst_0
1193: invokestatic  #29
1196: new           #22
1199: dup
1200: invokespecial #23
1203: ldc           #24
1205: invokevirtual #25
1208: iload         47
1210: invokevirtual #41
1213: ldc           #27
1215: invokevirtual #25
1218: iconst_m1
1219: invokevirtual #41
1222: ldc           #24
1224: invokevirtual #25
1227: invokevirtual #28
1230: iload         47
1232: iconst_m1
1233: if_icmpne     1240
1236: iconst_1
1237: goto          1241
1240: iconst_0
1241: invokestatic  #29
1244: new           #22
1247: dup
1248: invokespecial #23
1251: ldc           #24
1253: invokevirtual #25
1256: iload         48
1258: invokevirtual #69
1261: ldc           #27
1263: invokevirtual #25
1266: iconst_1
1267: invokevirtual #69
1270: ldc           #24
1272: invokevirtual #25
1275: invokevirtual #28
1278: iload         48
1280: iconst_1
1281: if_icmpne     1288
1284: iconst_1
1285: goto          1289
1288: iconst_0
1289: invokestatic  #29
1292: new           #22
1295: dup
1296: invokespecial #23
1299: ldc           #24
1301: invokevirtual #25
1304: lload         49
1306: invokevirtual #26
1309: ldc           #27
1311: invokevirtual #25
1314: lconst_0
1315: invokevirtual #26
1318: ldc           #24
1320: invokevirtual #25
1323: invokevirtual #28
1326: lload         49
1328: lconst_0
1329: lcmp
1330: ifne          1337
1333: iconst_1
1334: goto          1338
1337: iconst_0
1338: invokestatic  #29
1341: new           #22
1344: dup
1345: invokespecial #23
1348: ldc           #24
1350: invokevirtual #25
1353: lload         51
1355: invokevirtual #26
1358: ldc           #27
1360: invokevirtual #25
1363: lconst_0
1364: invokevirtual #26
1367: ldc           #24
1369: invokevirtual #25
1372: invokevirtual #28
1375: lload         51
1377: lconst_0
1378: lcmp
1379: ifne          1386
1382: iconst_1
1383: goto          1387
1386: iconst_0
1387: invokestatic  #29
1390: new           #22
1393: dup
1394: invokespecial #23
1397: ldc           #24
1399: invokevirtual #25
1402: iload         53
1404: invokevirtual #41
1407: ldc           #27
1409: invokevirtual #25
1412: iconst_m1
1413: invokevirtual #41
1416: ldc           #24
1418: invokevirtual #25
1421: invokevirtual #28
1424: iload         53
1426: iconst_m1
1427: if_icmpne     1434
1430: iconst_1
1431: goto          1435
1434: iconst_0
1435: invokestatic  #29
1438: new           #22
1441: dup
1442: invokespecial #23
1445: ldc           #24
1447: invokevirtual #25
1450: aload         54
1452: invokevirtual #25
1455: ldc           #238
1457: invokevirtual #25
1460: invokevirtual #28
1463: aload         54
1465: ldc           #117
1467: invokestatic  #154
1470: return
Exception table:
from    to  target type
424   440   443   Class java/lang/IndexOutOfBoundsException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test044
Start line: 1378
End line: 0
Method source code: 
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        try {
            arArchiveOutputStream10.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #239
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #47
69: lstore        7
71: new           #240
74: dup
75: aload_3
76: invokespecial #241
79: astore        9
81: aload         9
83: invokevirtual #242
86: ldc           #51
88: invokestatic  #20
91: goto          96
94: astore        10
96: new           #22
99: dup
100: invokespecial #23
103: ldc           #24
105: invokevirtual #25
108: lload         4
110: invokevirtual #26
113: ldc           #27
115: invokevirtual #25
118: lconst_0
119: invokevirtual #26
122: ldc           #24
124: invokevirtual #25
127: invokevirtual #28
130: lload         4
132: lconst_0
133: lcmp
134: ifne          141
137: iconst_1
138: goto          142
141: iconst_0
142: invokestatic  #29
145: aload         6
147: invokestatic  #53
150: new           #22
153: dup
154: invokespecial #23
157: ldc           #24
159: invokevirtual #25
162: lload         7
164: invokevirtual #26
167: ldc           #27
169: invokevirtual #25
172: lconst_0
173: invokevirtual #26
176: ldc           #24
178: invokevirtual #25
181: invokevirtual #28
184: lload         7
186: lconst_0
187: lcmp
188: ifne          195
191: iconst_1
192: goto          196
195: iconst_0
196: invokestatic  #29
199: return
Exception table:
from    to  target type
81    91    94   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test045
Start line: 1402
End line: 0
Method source code: 
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry25 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry25.setDevMinor((int) ' ');
        tarArchiveEntry25.setGroupName("\000\000");
        long long30 = tarArchiveEntry25.getSize();
        java.util.Date date31 = tarArchiveEntry25.getLastModifiedDate();
        long long32 = tarArchiveEntry25.getSize();
        try {
            tarArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry25);
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar");
        } catch (java.io.UnsupportedEncodingException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(date31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #243
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #60
69: istore        7
71: aload_3
72: invokevirtual #60
75: istore        8
77: new           #73
80: dup
81: lconst_0
82: invokespecial #74
85: astore        9
87: aload         9
89: invokevirtual #75
92: astore        10
94: new           #73
97: dup
98: lconst_0
99: invokespecial #74
102: astore        11
104: aload         11
106: invokevirtual #75
109: astore        12
111: aload         10
113: aload         12
115: iconst_1
116: invokestatic  #177
119: istore        13
121: aload         10
123: invokestatic  #192
126: istore        14
128: aload_3
129: aload         10
131: iconst_4
132: iconst_m1
133: invokevirtual #63
136: new           #112
139: dup
140: ldc           #61
142: iconst_0
143: invokespecial #113
146: astore        15
148: aload         15
150: bipush        32
152: invokevirtual #114
155: aload         15
157: ldc           #244
159: invokevirtual #245
162: aload         15
164: invokevirtual #156
167: lstore        16
169: aload         15
171: invokevirtual #122
174: astore        18
176: aload         15
178: invokevirtual #156
181: lstore        19
183: aload_3
184: aload         15
186: invokevirtual #136
189: ldc           #137
191: invokestatic  #20
194: goto          199
197: astore        21
199: new           #22
202: dup
203: invokespecial #23
206: ldc           #24
208: invokevirtual #25
211: lload         4
213: invokevirtual #26
216: ldc           #27
218: invokevirtual #25
221: lconst_0
222: invokevirtual #26
225: ldc           #24
227: invokevirtual #25
230: invokevirtual #28
233: lload         4
235: lconst_0
236: lcmp
237: ifne          244
240: iconst_1
241: goto          245
244: iconst_0
245: invokestatic  #29
248: aload         6
250: invokestatic  #53
253: new           #22
256: dup
257: invokespecial #23
260: ldc           #24
262: invokevirtual #25
265: iload         7
267: invokevirtual #41
270: ldc           #27
272: invokevirtual #25
275: iconst_0
276: invokevirtual #41
279: ldc           #24
281: invokevirtual #25
284: invokevirtual #28
287: iload         7
289: ifne          296
292: iconst_1
293: goto          297
296: iconst_0
297: invokestatic  #29
300: new           #22
303: dup
304: invokespecial #23
307: ldc           #24
309: invokevirtual #25
312: iload         8
314: invokevirtual #41
317: ldc           #27
319: invokevirtual #25
322: iconst_0
323: invokevirtual #41
326: ldc           #24
328: invokevirtual #25
331: invokevirtual #28
334: iload         8
336: ifne          343
339: iconst_1
340: goto          344
343: iconst_0
344: invokestatic  #29
347: aload         10
349: invokestatic  #53
352: aload         10
354: invokestatic  #66
357: ldc           #77
359: invokestatic  #68
362: aload         12
364: invokestatic  #53
367: aload         12
369: invokestatic  #66
372: ldc           #77
374: invokestatic  #68
377: new           #22
380: dup
381: invokespecial #23
384: ldc           #24
386: invokevirtual #25
389: iload         13
391: invokevirtual #69
394: ldc           #27
396: invokevirtual #25
399: iconst_1
400: invokevirtual #69
403: ldc           #24
405: invokevirtual #25
408: invokevirtual #28
411: iload         13
413: iconst_1
414: if_icmpne     421
417: iconst_1
418: goto          422
421: iconst_0
422: invokestatic  #29
425: new           #22
428: dup
429: invokespecial #23
432: ldc           #24
434: invokevirtual #25
437: iload         14
439: invokevirtual #69
442: ldc           #27
444: invokevirtual #25
447: iconst_1
448: invokevirtual #69
451: ldc           #24
453: invokevirtual #25
456: invokevirtual #28
459: iload         14
461: iconst_1
462: if_icmpne     469
465: iconst_1
466: goto          470
469: iconst_0
470: invokestatic  #29
473: new           #22
476: dup
477: invokespecial #23
480: ldc           #24
482: invokevirtual #25
485: lload         16
487: invokevirtual #26
490: ldc           #27
492: invokevirtual #25
495: lconst_0
496: invokevirtual #26
499: ldc           #24
501: invokevirtual #25
504: invokevirtual #28
507: lload         16
509: lconst_0
510: lcmp
511: ifne          518
514: iconst_1
515: goto          519
518: iconst_0
519: invokestatic  #29
522: aload         18
524: invokestatic  #53
527: new           #22
530: dup
531: invokespecial #23
534: ldc           #24
536: invokevirtual #25
539: lload         19
541: invokevirtual #26
544: ldc           #27
546: invokevirtual #25
549: lconst_0
550: invokevirtual #26
553: ldc           #24
555: invokevirtual #25
558: invokevirtual #28
561: lload         19
563: lconst_0
564: lcmp
565: ifne          572
568: iconst_1
569: goto          573
572: iconst_0
573: invokestatic  #29
576: return
Exception table:
from    to  target type
183   194   197   Class java/io/UnsupportedEncodingException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test046
Start line: 1450
End line: 0
Method source code: 
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        int int11 = tarArchiveOutputStream10.getRecordSize();
        try {
            tarArchiveOutputStream10.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 512 + "'", int11 == 512);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #246
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #60
69: istore        7
71: new           #43
74: dup
75: aload_3
76: invokespecial #95
79: astore        8
81: aload         8
83: invokevirtual #247
86: istore        9
88: aload         8
90: invokevirtual #248
93: ldc           #51
95: invokestatic  #20
98: goto          103
101: astore        10
103: new           #22
106: dup
107: invokespecial #23
110: ldc           #24
112: invokevirtual #25
115: lload         4
117: invokevirtual #26
120: ldc           #27
122: invokevirtual #25
125: lconst_0
126: invokevirtual #26
129: ldc           #24
131: invokevirtual #25
134: invokevirtual #28
137: lload         4
139: lconst_0
140: lcmp
141: ifne          148
144: iconst_1
145: goto          149
148: iconst_0
149: invokestatic  #29
152: aload         6
154: invokestatic  #53
157: new           #22
160: dup
161: invokespecial #23
164: ldc           #24
166: invokevirtual #25
169: iload         7
171: invokevirtual #41
174: ldc           #27
176: invokevirtual #25
179: iconst_0
180: invokevirtual #41
183: ldc           #24
185: invokevirtual #25
188: invokevirtual #28
191: iload         7
193: ifne          200
196: iconst_1
197: goto          201
200: iconst_0
201: invokestatic  #29
204: new           #22
207: dup
208: invokespecial #23
211: ldc           #24
213: invokevirtual #25
216: iload         9
218: invokevirtual #41
221: ldc           #27
223: invokevirtual #25
226: sipush        512
229: invokevirtual #41
232: ldc           #24
234: invokevirtual #25
237: invokevirtual #28
240: iload         9
242: sipush        512
245: if_icmpne     252
248: iconst_1
249: goto          253
252: iconst_0
253: invokestatic  #29
256: return
Exception table:
from    to  target type
88    98   101   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test047
Start line: 1476
End line: 0
Method source code: 
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        try {
            tarArchiveOutputStream4.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #249
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #60
69: istore        7
71: new           #43
74: dup
75: aload_3
76: invokespecial #95
79: astore        8
81: aload_3
82: invokevirtual #250
85: ldc           #51
87: invokestatic  #20
90: goto          95
93: astore        9
95: new           #22
98: dup
99: invokespecial #23
102: ldc           #24
104: invokevirtual #25
107: lload         4
109: invokevirtual #26
112: ldc           #27
114: invokevirtual #25
117: lconst_0
118: invokevirtual #26
121: ldc           #24
123: invokevirtual #25
126: invokevirtual #28
129: lload         4
131: lconst_0
132: lcmp
133: ifne          140
136: iconst_1
137: goto          141
140: iconst_0
141: invokestatic  #29
144: aload         6
146: invokestatic  #53
149: new           #22
152: dup
153: invokespecial #23
156: ldc           #24
158: invokevirtual #25
161: iload         7
163: invokevirtual #41
166: ldc           #27
168: invokevirtual #25
171: iconst_0
172: invokevirtual #41
175: ldc           #24
177: invokevirtual #25
180: invokevirtual #28
183: iload         7
185: ifne          192
188: iconst_1
189: goto          193
192: iconst_0
193: invokestatic  #29
196: return
Exception table:
from    to  target type
81    90    93   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test048
Start line: 1500
End line: 0
Method source code: 
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry23 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry(byteArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 99");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #251
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #60
69: istore        7
71: aload_3
72: invokevirtual #60
75: istore        8
77: new           #73
80: dup
81: lconst_0
82: invokespecial #74
85: astore        9
87: aload         9
89: invokevirtual #75
92: astore        10
94: new           #73
97: dup
98: lconst_0
99: invokespecial #74
102: astore        11
104: aload         11
106: invokevirtual #75
109: astore        12
111: aload         10
113: aload         12
115: iconst_1
116: invokestatic  #177
119: istore        13
121: aload         10
123: invokestatic  #192
126: istore        14
128: aload_3
129: aload         10
131: iconst_4
132: iconst_m1
133: invokevirtual #63
136: new           #112
139: dup
140: aload         10
142: invokespecial #252
145: astore        15
147: ldc           #217
149: invokestatic  #20
152: goto          157
155: astore        15
157: new           #22
160: dup
161: invokespecial #23
164: ldc           #24
166: invokevirtual #25
169: lload         4
171: invokevirtual #26
174: ldc           #27
176: invokevirtual #25
179: lconst_0
180: invokevirtual #26
183: ldc           #24
185: invokevirtual #25
188: invokevirtual #28
191: lload         4
193: lconst_0
194: lcmp
195: ifne          202
198: iconst_1
199: goto          203
202: iconst_0
203: invokestatic  #29
206: aload         6
208: invokestatic  #53
211: new           #22
214: dup
215: invokespecial #23
218: ldc           #24
220: invokevirtual #25
223: iload         7
225: invokevirtual #41
228: ldc           #27
230: invokevirtual #25
233: iconst_0
234: invokevirtual #41
237: ldc           #24
239: invokevirtual #25
242: invokevirtual #28
245: iload         7
247: ifne          254
250: iconst_1
251: goto          255
254: iconst_0
255: invokestatic  #29
258: new           #22
261: dup
262: invokespecial #23
265: ldc           #24
267: invokevirtual #25
270: iload         8
272: invokevirtual #41
275: ldc           #27
277: invokevirtual #25
280: iconst_0
281: invokevirtual #41
284: ldc           #24
286: invokevirtual #25
289: invokevirtual #28
292: iload         8
294: ifne          301
297: iconst_1
298: goto          302
301: iconst_0
302: invokestatic  #29
305: aload         10
307: invokestatic  #53
310: aload         10
312: invokestatic  #66
315: ldc           #77
317: invokestatic  #68
320: aload         12
322: invokestatic  #53
325: aload         12
327: invokestatic  #66
330: ldc           #77
332: invokestatic  #68
335: new           #22
338: dup
339: invokespecial #23
342: ldc           #24
344: invokevirtual #25
347: iload         13
349: invokevirtual #69
352: ldc           #27
354: invokevirtual #25
357: iconst_1
358: invokevirtual #69
361: ldc           #24
363: invokevirtual #25
366: invokevirtual #28
369: iload         13
371: iconst_1
372: if_icmpne     379
375: iconst_1
376: goto          380
379: iconst_0
380: invokestatic  #29
383: new           #22
386: dup
387: invokespecial #23
390: ldc           #24
392: invokevirtual #25
395: iload         14
397: invokevirtual #69
400: ldc           #27
402: invokevirtual #25
405: iconst_1
406: invokevirtual #69
409: ldc           #24
411: invokevirtual #25
414: invokevirtual #28
417: iload         14
419: iconst_1
420: if_icmpne     427
423: iconst_1
424: goto          428
427: iconst_0
428: invokestatic  #29
431: return
Exception table:
from    to  target type
136   152   155   Class java/lang/ArrayIndexOutOfBoundsException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test049
Start line: 1538
End line: 0
Method source code: 
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true);
        try {
            tarArchiveOutputStream4.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #253
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #60
69: istore        7
71: aload_3
72: invokevirtual #60
75: istore        8
77: new           #73
80: dup
81: lconst_0
82: invokespecial #74
85: astore        9
87: aload         9
89: invokevirtual #75
92: astore        10
94: new           #73
97: dup
98: lconst_0
99: invokespecial #74
102: astore        11
104: aload         11
106: invokevirtual #75
109: astore        12
111: aload         10
113: aload         12
115: iconst_1
116: invokestatic  #177
119: istore        13
121: aload         10
123: invokestatic  #192
126: istore        14
128: aload_3
129: aload         10
131: iconst_4
132: iconst_m1
133: invokevirtual #63
136: aload_3
137: iconst_1
138: invokevirtual #148
141: aload_3
142: invokevirtual #71
145: ldc           #51
147: invokestatic  #20
150: goto          155
153: astore        15
155: new           #22
158: dup
159: invokespecial #23
162: ldc           #24
164: invokevirtual #25
167: lload         4
169: invokevirtual #26
172: ldc           #27
174: invokevirtual #25
177: lconst_0
178: invokevirtual #26
181: ldc           #24
183: invokevirtual #25
186: invokevirtual #28
189: lload         4
191: lconst_0
192: lcmp
193: ifne          200
196: iconst_1
197: goto          201
200: iconst_0
201: invokestatic  #29
204: aload         6
206: invokestatic  #53
209: new           #22
212: dup
213: invokespecial #23
216: ldc           #24
218: invokevirtual #25
221: iload         7
223: invokevirtual #41
226: ldc           #27
228: invokevirtual #25
231: iconst_0
232: invokevirtual #41
235: ldc           #24
237: invokevirtual #25
240: invokevirtual #28
243: iload         7
245: ifne          252
248: iconst_1
249: goto          253
252: iconst_0
253: invokestatic  #29
256: new           #22
259: dup
260: invokespecial #23
263: ldc           #24
265: invokevirtual #25
268: iload         8
270: invokevirtual #41
273: ldc           #27
275: invokevirtual #25
278: iconst_0
279: invokevirtual #41
282: ldc           #24
284: invokevirtual #25
287: invokevirtual #28
290: iload         8
292: ifne          299
295: iconst_1
296: goto          300
299: iconst_0
300: invokestatic  #29
303: aload         10
305: invokestatic  #53
308: aload         10
310: invokestatic  #66
313: ldc           #77
315: invokestatic  #68
318: aload         12
320: invokestatic  #53
323: aload         12
325: invokestatic  #66
328: ldc           #77
330: invokestatic  #68
333: new           #22
336: dup
337: invokespecial #23
340: ldc           #24
342: invokevirtual #25
345: iload         13
347: invokevirtual #69
350: ldc           #27
352: invokevirtual #25
355: iconst_1
356: invokevirtual #69
359: ldc           #24
361: invokevirtual #25
364: invokevirtual #28
367: iload         13
369: iconst_1
370: if_icmpne     377
373: iconst_1
374: goto          378
377: iconst_0
378: invokestatic  #29
381: new           #22
384: dup
385: invokespecial #23
388: ldc           #24
390: invokevirtual #25
393: iload         14
395: invokevirtual #69
398: ldc           #27
400: invokevirtual #25
403: iconst_1
404: invokevirtual #69
407: ldc           #24
409: invokevirtual #25
412: invokevirtual #28
415: iload         14
417: iconst_1
418: if_icmpne     425
421: iconst_1
422: goto          426
425: iconst_0
426: invokestatic  #29
429: return
Exception table:
from    to  target type
141   150   153   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test050
Start line: 1577
End line: 0
Method source code: 
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        java.io.InputStream inputStream25 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream26 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream25);
        long long27 = jarArchiveInputStream26.getBytesRead();
        long long28 = jarArchiveInputStream26.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream29 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream26);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream30 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream26);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream31 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream30);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream35 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream31, "070702", false, false);
        int int36 = zipArchiveInputStream35.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream39 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream35, (int) (short) 12, "always");
        tarArchiveInputStream39.reset();
        byte[] byteArray42 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes((long) 1000);
        byte[] byteArray49 = new byte[] { (byte) 120, (byte) 53, (byte) 83 };
        boolean boolean52 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("", byteArray49, (int) (byte) 100, 0);
        boolean boolean54 = org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byteArray49, (int) (byte) 0);
        long long55 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray49);
        long long56 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray49);
        boolean boolean60 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray42, (int) (short) 100, 8192, byteArray49, (int) '4', 0, false);
        boolean boolean62 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray49, (int) (short) 3);
        int int65 = tarArchiveInputStream39.read(byteArray49, 1, 2);
        byte[] byteArray67 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes((long) (short) 4);
        boolean boolean69 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray49, byteArray67, true);
        try {
            boolean boolean72 = org.apache.commons.compress.utils.ArchiveUtils.isEqualWithNull(byteArray13, 504, (int) (byte) 49, byteArray67, (int) (short) 2, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 504");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-24, 3, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[120, 53, 83]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 256L + "'", long55 == 256L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 256L + "'", long56 == 256L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[4, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #254
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: invokespecial #9
31: astore_1
32: aconst_null
33: astore_2
34: new           #43
37: dup
38: aload_2
39: ldc           #44
41: invokespecial #45
44: astore_3
45: aload_3
46: lconst_0
47: invokevirtual #46
50: aload_3
51: invokevirtual #47
54: lstore        4
56: aload_1
57: ldc           #48
59: aload_3
60: invokevirtual #49
63: astore        6
65: aload_3
66: invokevirtual #60
69: istore        7
71: aload_3
72: invokevirtual #60
75: istore        8
77: new           #73
80: dup
81: lconst_0
82: invokespecial #74
85: astore        9
87: aload         9
89: invokevirtual #75
92: astore        10
94: new           #73
97: dup
98: lconst_0
99: invokespecial #74
102: astore        11
104: aload         11
106: invokevirtual #75
109: astore        12
111: aload         10
113: aload         12
115: iconst_1
116: invokestatic  #177
119: istore        13
121: aload         10
123: invokestatic  #192
126: istore        14
128: aload_3
129: aload         10
131: iconst_4
132: iconst_m1
133: invokevirtual #63
136: aconst_null
137: astore        15
139: new           #10
142: dup
143: aload         15
145: invokespecial #11
148: astore        16
150: aload         16
152: invokevirtual #12
155: lstore        17
157: aload         16
159: invokevirtual #12
162: lstore        19
164: new           #13
167: dup
168: aload         16
170: invokespecial #14
173: astore        21
175: new           #31
178: dup
179: aload         16
181: invokespecial #32
184: astore        22
186: new           #33
189: dup
190: aload         22
192: invokespecial #34
195: astore        23
197: new           #15
200: dup
201: aload         23
203: ldc           #111
205: iconst_0
206: iconst_0
207: invokespecial #17
210: astore        24
212: aload         24
214: invokevirtual #255
217: istore        25
219: new           #31
222: dup
223: aload         24
225: bipush        12
227: ldc           #79
229: invokespecial #110
232: astore        26
234: aload         26
236: invokevirtual #256
239: ldc2_w        #257
242: invokestatic  #259
245: astore        27
247: iconst_3
248: newarray       byte
250: dup
251: iconst_0
252: bipush        120
254: bastore
255: dup
256: iconst_1
257: bipush        53
259: bastore
260: dup
261: iconst_2
262: bipush        83
264: bastore
265: astore        28
267: ldc           #61
269: aload         28
271: bipush        100
273: iconst_0
274: invokestatic  #62
277: istore        29
279: aload         28
281: iconst_0
282: invokestatic  #149
285: istore        30
287: aload         28
289: invokestatic  #260
292: lstore        31
294: aload         28
296: invokestatic  #260
299: lstore        33
301: aload         27
303: bipush        100
305: sipush        8192
308: aload         28
310: bipush        52
312: iconst_0
313: iconst_0
314: invokestatic  #261
317: istore        35
319: aload         28
321: iconst_3
322: invokestatic  #262
325: istore        36
327: aload         26
329: aload         28
331: iconst_1
332: iconst_2
333: invokevirtual #174
336: istore        37
338: ldc2_w        #263
341: invokestatic  #259
344: astore        38
346: aload         28
348: aload         38
350: iconst_1
351: invokestatic  #177
354: istore        39
356: aload         10
358: sipush        504
361: bipush        49
363: aload         38
365: iconst_2
366: iconst_0
367: invokestatic  #265
370: istore        40
372: ldc_w         #266
375: invokestatic  #20
378: goto          383
381: astore        40
383: new           #22
386: dup
387: invokespecial #23
390: ldc           #24
392: invokevirtual #25
395: lload         4
397: invokevirtual #26
400: ldc           #27
402: invokevirtual #25
405: lconst_0
406: invokevirtual #26
409: ldc           #24
411: invokevirtual #25
414: invokevirtual #28
417: lload         4
419: lconst_0
420: lcmp
421: ifne          428
424: iconst_1
425: goto          429
428: iconst_0
429: invokestatic  #29
432: aload         6
434: invokestatic  #53
437: new           #22
440: dup
441: invokespecial #23
444: ldc           #24
446: invokevirtual #25
449: iload         7
451: invokevirtual #41
454: ldc           #27
456: invokevirtual #25
459: iconst_0
460: invokevirtual #41
463: ldc           #24
465: invokevirtual #25
468: invokevirtual #28
471: iload         7
473: ifne          480
476: iconst_1
477: goto          481
480: iconst_0
481: invokestatic  #29
484: new           #22
487: dup
488: invokespecial #23
491: ldc           #24
493: invokevirtual #25
496: iload         8
498: invokevirtual #41
501: ldc           #27
503: invokevirtual #25
506: iconst_0
507: invokevirtual #41
510: ldc           #24
512: invokevirtual #25
515: invokevirtual #28
518: iload         8
520: ifne          527
523: iconst_1
524: goto          528
527: iconst_0
528: invokestatic  #29
531: aload         10
533: invokestatic  #53
536: aload         10
538: invokestatic  #66
541: ldc           #77
543: invokestatic  #68
546: aload         12
548: invokestatic  #53
551: aload         12
553: invokestatic  #66
556: ldc           #77
558: invokestatic  #68
561: new           #22
564: dup
565: invokespecial #23
568: ldc           #24
570: invokevirtual #25
573: iload         13
575: invokevirtual #69
578: ldc           #27
580: invokevirtual #25
583: iconst_1
584: invokevirtual #69
587: ldc           #24
589: invokevirtual #25
592: invokevirtual #28
595: iload         13
597: iconst_1
598: if_icmpne     605
601: iconst_1
602: goto          606
605: iconst_0
606: invokestatic  #29
609: new           #22
612: dup
613: invokespecial #23
616: ldc           #24
618: invokevirtual #25
621: iload         14
623: invokevirtual #69
626: ldc           #27
628: invokevirtual #25
631: iconst_1
632: invokevirtual #69
635: ldc           #24
637: invokevirtual #25
640: invokevirtual #28
643: iload         14
645: iconst_1
646: if_icmpne     653
649: iconst_1
650: goto          654
653: iconst_0
654: invokestatic  #29
657: new           #22
660: dup
661: invokespecial #23
664: ldc           #24
666: invokevirtual #25
669: lload         17
671: invokevirtual #26
674: ldc           #27
676: invokevirtual #25
679: lconst_0
680: invokevirtual #26
683: ldc           #24
685: invokevirtual #25
688: invokevirtual #28
691: lload         17
693: lconst_0
694: lcmp
695: ifne          702
698: iconst_1
699: goto          703
702: iconst_0
703: invokestatic  #29
706: new           #22
709: dup
710: invokespecial #23
713: ldc           #24
715: invokevirtual #25
718: lload         19
720: invokevirtual #26
723: ldc           #27
725: invokevirtual #25
728: lconst_0
729: invokevirtual #26
732: ldc           #24
734: invokevirtual #25
737: invokevirtual #28
740: lload         19
742: lconst_0
743: lcmp
744: ifne          751
747: iconst_1
748: goto          752
751: iconst_0
752: invokestatic  #29
755: new           #22
758: dup
759: invokespecial #23
762: ldc           #24
764: invokevirtual #25
767: iload         25
769: invokevirtual #41
772: ldc           #27
774: invokevirtual #25
777: iconst_0
778: invokevirtual #41
781: ldc           #24
783: invokevirtual #25
786: invokevirtual #28
789: iload         25
791: ifne          798
794: iconst_1
795: goto          799
798: iconst_0
799: invokestatic  #29
802: aload         27
804: invokestatic  #53
807: aload         27
809: invokestatic  #66
812: ldc_w         #267
815: invokestatic  #68
818: aload         28
820: invokestatic  #53
823: aload         28
825: invokestatic  #66
828: ldc           #67
830: invokestatic  #68
833: new           #22
836: dup
837: invokespecial #23
840: ldc           #24
842: invokevirtual #25
845: iload         29
847: invokevirtual #69
850: ldc           #27
852: invokevirtual #25
855: iconst_1
856: invokevirtual #69
859: ldc           #24
861: invokevirtual #25
864: invokevirtual #28
867: iload         29
869: iconst_1
870: if_icmpne     877
873: iconst_1
874: goto          878
877: iconst_0
878: invokestatic  #29
881: new           #22
884: dup
885: invokespecial #23
888: ldc           #24
890: invokevirtual #25
893: iload         30
895: invokevirtual #69
898: ldc           #27
900: invokevirtual #25
903: iconst_0
904: invokevirtual #69
907: ldc           #24
909: invokevirtual #25
912: invokevirtual #28
915: iload         30
917: ifne          924
920: iconst_1
921: goto          925
924: iconst_0
925: invokestatic  #29
928: new           #22
931: dup
932: invokespecial #23
935: ldc           #24
937: invokevirtual #25
940: lload         31
942: invokevirtual #26
945: ldc           #27
947: invokevirtual #25
950: ldc2_w        #268
953: invokevirtual #26
956: ldc           #24
958: invokevirtual #25
961: invokevirtual #28
964: lload         31
966: ldc2_w        #268
969: lcmp
970: ifne          977
973: iconst_1
974: goto          978
977: iconst_0
978: invokestatic  #29
981: new           #22
984: dup
985: invokespecial #23
988: ldc           #24
990: invokevirtual #25
993: lload         33
995: invokevirtual #26
998: ldc           #27
1000: invokevirtual #25
1003: ldc2_w        #268
1006: invokevirtual #26
1009: ldc           #24
1011: invokevirtual #25
1014: invokevirtual #28
1017: lload         33
1019: ldc2_w        #268
1022: lcmp
1023: ifne          1030
1026: iconst_1
1027: goto          1031
1030: iconst_0
1031: invokestatic  #29
1034: new           #22
1037: dup
1038: invokespecial #23
1041: ldc           #24
1043: invokevirtual #25
1046: iload         35
1048: invokevirtual #69
1051: ldc           #27
1053: invokevirtual #25
1056: iconst_0
1057: invokevirtual #69
1060: ldc           #24
1062: invokevirtual #25
1065: invokevirtual #28
1068: iload         35
1070: ifne          1077
1073: iconst_1
1074: goto          1078
1077: iconst_0
1078: invokestatic  #29
1081: new           #22
1084: dup
1085: invokespecial #23
1088: ldc           #24
1090: invokevirtual #25
1093: iload         36
1095: invokevirtual #69
1098: ldc           #27
1100: invokevirtual #25
1103: iconst_0
1104: invokevirtual #69
1107: ldc           #24
1109: invokevirtual #25
1112: invokevirtual #28
1115: iload         36
1117: ifne          1124
1120: iconst_1
1121: goto          1125
1124: iconst_0
1125: invokestatic  #29
1128: new           #22
1131: dup
1132: invokespecial #23
1135: ldc           #24
1137: invokevirtual #25
1140: iload         37
1142: invokevirtual #41
1145: ldc           #27
1147: invokevirtual #25
1150: iconst_m1
1151: invokevirtual #41
1154: ldc           #24
1156: invokevirtual #25
1159: invokevirtual #28
1162: iload         37
1164: iconst_m1
1165: if_icmpne     1172
1168: iconst_1
1169: goto          1173
1172: iconst_0
1173: invokestatic  #29
1176: aload         38
1178: invokestatic  #53
1181: aload         38
1183: invokestatic  #66
1186: ldc_w         #270
1189: invokestatic  #68
1192: new           #22
1195: dup
1196: invokespecial #23
1199: ldc           #24
1201: invokevirtual #25
1204: iload         39
1206: invokevirtual #69
1209: ldc           #27
1211: invokevirtual #25
1214: iconst_0
1215: invokevirtual #69
1218: ldc           #24
1220: invokevirtual #25
1223: invokevirtual #28
1226: iload         39
1228: ifne          1235
1231: iconst_1
1232: goto          1236
1235: iconst_0
1236: invokestatic  #29
1239: return
Exception table:
from    to  target type
356   378   381   Class java/lang/ArrayIndexOutOfBoundsException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test051
Start line: 1654
End line: 0
Method source code: 
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        tarArchiveOutputStream4.setLongFileMode((int) '4');
        long long11 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int14 = tarArchiveEntry13.getDevMinor();
        tarArchiveEntry13.setUserId(0);
        tarArchiveEntry13.setUserName("cpio");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry21 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry21.setName("");
        java.lang.String str24 = tarArchiveEntry21.getName();
        boolean boolean25 = tarArchiveEntry13.isDescendent(tarArchiveEntry21);
        try {
            tarArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry21);
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar");
        } catch (java.io.UnsupportedEncodingException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #271
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: bipush        52
69: invokevirtual #195
72: aload_3
73: invokevirtual #47
76: lstore        7
78: new           #112
81: dup
82: ldc           #44
84: invokespecial #120
87: astore        9
89: aload         9
91: invokevirtual #129
94: istore        10
96: aload         9
98: iconst_0
99: invokevirtual #272
102: aload         9
104: ldc_w         #273
107: invokevirtual #274
110: new           #112
113: dup
114: ldc           #61
116: iconst_0
117: invokespecial #113
120: astore        11
122: aload         11
124: ldc           #61
126: invokevirtual #275
129: aload         11
131: invokevirtual #276
134: astore        12
136: aload         9
138: aload         11
140: invokevirtual #277
143: istore        13
145: aload_3
146: aload         11
148: invokevirtual #136
151: ldc           #137
153: invokestatic  #20
156: goto          161
159: astore        14
161: new           #22
164: dup
165: invokespecial #23
168: ldc           #24
170: invokevirtual #25
173: lload         4
175: invokevirtual #26
178: ldc           #27
180: invokevirtual #25
183: lconst_0
184: invokevirtual #26
187: ldc           #24
189: invokevirtual #25
192: invokevirtual #28
195: lload         4
197: lconst_0
198: lcmp
199: ifne          206
202: iconst_1
203: goto          207
206: iconst_0
207: invokestatic  #29
210: aload         6
212: invokestatic  #53
215: new           #22
218: dup
219: invokespecial #23
222: ldc           #24
224: invokevirtual #25
227: lload         7
229: invokevirtual #26
232: ldc           #27
234: invokevirtual #25
237: lconst_0
238: invokevirtual #26
241: ldc           #24
243: invokevirtual #25
246: invokevirtual #28
249: lload         7
251: lconst_0
252: lcmp
253: ifne          260
256: iconst_1
257: goto          261
260: iconst_0
261: invokestatic  #29
264: new           #22
267: dup
268: invokespecial #23
271: ldc           #24
273: invokevirtual #25
276: iload         10
278: invokevirtual #41
281: ldc           #27
283: invokevirtual #25
286: iconst_0
287: invokevirtual #41
290: ldc           #24
292: invokevirtual #25
295: invokevirtual #28
298: iload         10
300: ifne          307
303: iconst_1
304: goto          308
307: iconst_0
308: invokestatic  #29
311: new           #22
314: dup
315: invokespecial #23
318: ldc           #24
320: invokevirtual #25
323: aload         12
325: invokevirtual #25
328: ldc           #219
330: invokevirtual #25
333: invokevirtual #28
336: aload         12
338: ldc           #61
340: invokestatic  #154
343: new           #22
346: dup
347: invokespecial #23
350: ldc           #24
352: invokevirtual #25
355: iload         13
357: invokevirtual #69
360: ldc           #27
362: invokevirtual #25
365: iconst_0
366: invokevirtual #69
369: ldc           #24
371: invokevirtual #25
374: invokevirtual #28
377: iload         13
379: ifne          386
382: iconst_1
383: goto          387
386: iconst_0
387: invokestatic  #29
390: return
Exception table:
from    to  target type
145   156   159   Class java/io/UnsupportedEncodingException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test052
Start line: 1689
End line: 0
Method source code: 
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.InputStream inputStream26 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream27 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream26);
        long long28 = jarArchiveInputStream27.getBytesRead();
        long long29 = jarArchiveInputStream27.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream30 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream27);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream27);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream31);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream36 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream32, "070702", false, false);
        long long38 = cpioArchiveInputStream32.skip(162L);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream32, 40960);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream41 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #278
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #10
200: dup
201: aload         24
203: invokespecial #11
206: astore        25
208: aload         25
210: invokevirtual #12
213: lstore        26
215: aload         25
217: invokevirtual #12
220: lstore        28
222: new           #13
225: dup
226: aload         25
228: invokespecial #14
231: astore        30
233: new           #31
236: dup
237: aload         25
239: invokespecial #32
242: astore        31
244: new           #33
247: dup
248: aload         31
250: invokespecial #34
253: astore        32
255: new           #15
258: dup
259: aload         32
261: ldc           #111
263: iconst_0
264: iconst_0
265: invokespecial #17
268: astore        33
270: aload         32
272: ldc2_w        #160
275: invokevirtual #162
278: lstore        34
280: new           #31
283: dup
284: aload         32
286: ldc           #109
288: invokespecial #141
291: astore        36
293: aload_1
294: aload         36
296: invokevirtual #18
299: astore        37
301: ldc           #19
303: invokestatic  #20
306: goto          311
309: astore        37
311: new           #22
314: dup
315: invokespecial #23
318: ldc           #24
320: invokevirtual #25
323: lload         4
325: invokevirtual #26
328: ldc           #27
330: invokevirtual #25
333: lconst_0
334: invokevirtual #26
337: ldc           #24
339: invokevirtual #25
342: invokevirtual #28
345: lload         4
347: lconst_0
348: lcmp
349: ifne          356
352: iconst_1
353: goto          357
356: iconst_0
357: invokestatic  #29
360: new           #22
363: dup
364: invokespecial #23
367: ldc           #24
369: invokevirtual #25
372: lload         6
374: invokevirtual #26
377: ldc           #27
379: invokevirtual #25
382: lconst_0
383: invokevirtual #26
386: ldc           #24
388: invokevirtual #25
391: invokevirtual #28
394: lload         6
396: lconst_0
397: lcmp
398: ifne          405
401: iconst_1
402: goto          406
405: iconst_0
406: invokestatic  #29
409: aload         10
411: invokestatic  #168
414: aload         11
416: invokestatic  #168
419: aload         13
421: invokestatic  #53
424: new           #22
427: dup
428: invokespecial #23
431: ldc           #24
433: invokevirtual #25
436: lload         16
438: invokevirtual #26
441: ldc           #27
443: invokevirtual #25
446: lconst_0
447: invokevirtual #26
450: ldc           #24
452: invokevirtual #25
455: invokevirtual #28
458: lload         16
460: lconst_0
461: lcmp
462: ifne          469
465: iconst_1
466: goto          470
469: iconst_0
470: invokestatic  #29
473: new           #22
476: dup
477: invokespecial #23
480: ldc           #24
482: invokevirtual #25
485: lload         18
487: invokevirtual #26
490: ldc           #27
492: invokevirtual #25
495: lconst_0
496: invokevirtual #26
499: ldc           #24
501: invokevirtual #25
504: invokevirtual #28
507: lload         18
509: lconst_0
510: lcmp
511: ifne          518
514: iconst_1
515: goto          519
518: iconst_0
519: invokestatic  #29
522: aload         21
524: invokestatic  #168
527: aload         23
529: invokestatic  #53
532: new           #22
535: dup
536: invokespecial #23
539: ldc           #24
541: invokevirtual #25
544: lload         26
546: invokevirtual #26
549: ldc           #27
551: invokevirtual #25
554: lconst_0
555: invokevirtual #26
558: ldc           #24
560: invokevirtual #25
563: invokevirtual #28
566: lload         26
568: lconst_0
569: lcmp
570: ifne          577
573: iconst_1
574: goto          578
577: iconst_0
578: invokestatic  #29
581: new           #22
584: dup
585: invokespecial #23
588: ldc           #24
590: invokevirtual #25
593: lload         28
595: invokevirtual #26
598: ldc           #27
600: invokevirtual #25
603: lconst_0
604: invokevirtual #26
607: ldc           #24
609: invokevirtual #25
612: invokevirtual #28
615: lload         28
617: lconst_0
618: lcmp
619: ifne          626
622: iconst_1
623: goto          627
626: iconst_0
627: invokestatic  #29
630: new           #22
633: dup
634: invokespecial #23
637: ldc           #24
639: invokevirtual #25
642: lload         34
644: invokevirtual #26
647: ldc           #27
649: invokevirtual #25
652: lconst_0
653: invokevirtual #26
656: ldc           #24
658: invokevirtual #25
661: invokevirtual #28
664: lload         34
666: lconst_0
667: lcmp
668: ifne          675
671: iconst_1
672: goto          676
675: iconst_0
676: invokestatic  #29
679: return
Exception table:
from    to  target type
293   306   309   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test053
Start line: 1745
End line: 0
Method source code: 
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        java.io.InputStream inputStream19 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream20 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream19);
        long long21 = jarArchiveInputStream20.getBytesRead();
        long long22 = jarArchiveInputStream20.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream23 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream20);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream24 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream20);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream25 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream24);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream29 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream25, "070702", false, false);
        int int30 = zipArchiveInputStream29.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream33 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream29, (int) (short) 12, "always");
        tarArchiveInputStream33.reset();
        byte[] byteArray36 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes((long) 1000);
        byte[] byteArray43 = new byte[] { (byte) 120, (byte) 53, (byte) 83 };
        boolean boolean46 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("", byteArray43, (int) (byte) 100, 0);
        boolean boolean48 = org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byteArray43, (int) (byte) 0);
        long long49 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray43);
        long long50 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray43);
        boolean boolean54 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray36, (int) (short) 100, 8192, byteArray43, (int) '4', 0, false);
        boolean boolean56 = org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches(byteArray43, (int) (short) 3);
        int int59 = tarArchiveInputStream33.read(byteArray43, 1, 2);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream60 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-24, 3, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[120, 53, 83]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 256L + "'", long49 == 256L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 256L + "'", long50 == 256L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #279
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aconst_null
137: astore        16
139: new           #10
142: dup
143: aload         16
145: invokespecial #11
148: astore        17
150: aload         17
152: invokevirtual #12
155: lstore        18
157: aload         17
159: invokevirtual #12
162: lstore        20
164: new           #13
167: dup
168: aload         17
170: invokespecial #14
173: astore        22
175: new           #31
178: dup
179: aload         17
181: invokespecial #32
184: astore        23
186: new           #33
189: dup
190: aload         23
192: invokespecial #34
195: astore        24
197: new           #15
200: dup
201: aload         24
203: ldc           #111
205: iconst_0
206: iconst_0
207: invokespecial #17
210: astore        25
212: aload         25
214: invokevirtual #255
217: istore        26
219: new           #31
222: dup
223: aload         25
225: bipush        12
227: ldc           #79
229: invokespecial #110
232: astore        27
234: aload         27
236: invokevirtual #256
239: ldc2_w        #257
242: invokestatic  #259
245: astore        28
247: iconst_3
248: newarray       byte
250: dup
251: iconst_0
252: bipush        120
254: bastore
255: dup
256: iconst_1
257: bipush        53
259: bastore
260: dup
261: iconst_2
262: bipush        83
264: bastore
265: astore        29
267: ldc           #61
269: aload         29
271: bipush        100
273: iconst_0
274: invokestatic  #62
277: istore        30
279: aload         29
281: iconst_0
282: invokestatic  #149
285: istore        31
287: aload         29
289: invokestatic  #260
292: lstore        32
294: aload         29
296: invokestatic  #260
299: lstore        34
301: aload         28
303: bipush        100
305: sipush        8192
308: aload         29
310: bipush        52
312: iconst_0
313: iconst_0
314: invokestatic  #261
317: istore        36
319: aload         29
321: iconst_3
322: invokestatic  #262
325: istore        37
327: aload         27
329: aload         29
331: iconst_1
332: iconst_2
333: invokevirtual #174
336: istore        38
338: aload_1
339: aload         27
341: invokevirtual #18
344: astore        39
346: ldc           #19
348: invokestatic  #20
351: goto          356
354: astore        39
356: new           #22
359: dup
360: invokespecial #23
363: ldc           #24
365: invokevirtual #25
368: lload         4
370: invokevirtual #26
373: ldc           #27
375: invokevirtual #25
378: lconst_0
379: invokevirtual #26
382: ldc           #24
384: invokevirtual #25
387: invokevirtual #28
390: lload         4
392: lconst_0
393: lcmp
394: ifne          401
397: iconst_1
398: goto          402
401: iconst_0
402: invokestatic  #29
405: aload         6
407: invokestatic  #53
410: new           #22
413: dup
414: invokespecial #23
417: ldc           #24
419: invokevirtual #25
422: lload         9
424: invokevirtual #26
427: ldc           #27
429: invokevirtual #25
432: lconst_0
433: invokevirtual #26
436: ldc           #24
438: invokevirtual #25
441: invokevirtual #28
444: lload         9
446: lconst_0
447: lcmp
448: ifne          455
451: iconst_1
452: goto          456
455: iconst_0
456: invokestatic  #29
459: new           #22
462: dup
463: invokespecial #23
466: ldc           #24
468: invokevirtual #25
471: lload         11
473: invokevirtual #26
476: ldc           #27
478: invokevirtual #25
481: lconst_0
482: invokevirtual #26
485: ldc           #24
487: invokevirtual #25
490: invokevirtual #28
493: lload         11
495: lconst_0
496: lcmp
497: ifne          504
500: iconst_1
501: goto          505
504: iconst_0
505: invokestatic  #29
508: aload         15
510: invokestatic  #53
513: new           #22
516: dup
517: invokespecial #23
520: ldc           #24
522: invokevirtual #25
525: lload         18
527: invokevirtual #26
530: ldc           #27
532: invokevirtual #25
535: lconst_0
536: invokevirtual #26
539: ldc           #24
541: invokevirtual #25
544: invokevirtual #28
547: lload         18
549: lconst_0
550: lcmp
551: ifne          558
554: iconst_1
555: goto          559
558: iconst_0
559: invokestatic  #29
562: new           #22
565: dup
566: invokespecial #23
569: ldc           #24
571: invokevirtual #25
574: lload         20
576: invokevirtual #26
579: ldc           #27
581: invokevirtual #25
584: lconst_0
585: invokevirtual #26
588: ldc           #24
590: invokevirtual #25
593: invokevirtual #28
596: lload         20
598: lconst_0
599: lcmp
600: ifne          607
603: iconst_1
604: goto          608
607: iconst_0
608: invokestatic  #29
611: new           #22
614: dup
615: invokespecial #23
618: ldc           #24
620: invokevirtual #25
623: iload         26
625: invokevirtual #41
628: ldc           #27
630: invokevirtual #25
633: iconst_0
634: invokevirtual #41
637: ldc           #24
639: invokevirtual #25
642: invokevirtual #28
645: iload         26
647: ifne          654
650: iconst_1
651: goto          655
654: iconst_0
655: invokestatic  #29
658: aload         28
660: invokestatic  #53
663: aload         28
665: invokestatic  #66
668: ldc_w         #267
671: invokestatic  #68
674: aload         29
676: invokestatic  #53
679: aload         29
681: invokestatic  #66
684: ldc           #67
686: invokestatic  #68
689: new           #22
692: dup
693: invokespecial #23
696: ldc           #24
698: invokevirtual #25
701: iload         30
703: invokevirtual #69
706: ldc           #27
708: invokevirtual #25
711: iconst_1
712: invokevirtual #69
715: ldc           #24
717: invokevirtual #25
720: invokevirtual #28
723: iload         30
725: iconst_1
726: if_icmpne     733
729: iconst_1
730: goto          734
733: iconst_0
734: invokestatic  #29
737: new           #22
740: dup
741: invokespecial #23
744: ldc           #24
746: invokevirtual #25
749: iload         31
751: invokevirtual #69
754: ldc           #27
756: invokevirtual #25
759: iconst_0
760: invokevirtual #69
763: ldc           #24
765: invokevirtual #25
768: invokevirtual #28
771: iload         31
773: ifne          780
776: iconst_1
777: goto          781
780: iconst_0
781: invokestatic  #29
784: new           #22
787: dup
788: invokespecial #23
791: ldc           #24
793: invokevirtual #25
796: lload         32
798: invokevirtual #26
801: ldc           #27
803: invokevirtual #25
806: ldc2_w        #268
809: invokevirtual #26
812: ldc           #24
814: invokevirtual #25
817: invokevirtual #28
820: lload         32
822: ldc2_w        #268
825: lcmp
826: ifne          833
829: iconst_1
830: goto          834
833: iconst_0
834: invokestatic  #29
837: new           #22
840: dup
841: invokespecial #23
844: ldc           #24
846: invokevirtual #25
849: lload         34
851: invokevirtual #26
854: ldc           #27
856: invokevirtual #25
859: ldc2_w        #268
862: invokevirtual #26
865: ldc           #24
867: invokevirtual #25
870: invokevirtual #28
873: lload         34
875: ldc2_w        #268
878: lcmp
879: ifne          886
882: iconst_1
883: goto          887
886: iconst_0
887: invokestatic  #29
890: new           #22
893: dup
894: invokespecial #23
897: ldc           #24
899: invokevirtual #25
902: iload         36
904: invokevirtual #69
907: ldc           #27
909: invokevirtual #25
912: iconst_0
913: invokevirtual #69
916: ldc           #24
918: invokevirtual #25
921: invokevirtual #28
924: iload         36
926: ifne          933
929: iconst_1
930: goto          934
933: iconst_0
934: invokestatic  #29
937: new           #22
940: dup
941: invokespecial #23
944: ldc           #24
946: invokevirtual #25
949: iload         37
951: invokevirtual #69
954: ldc           #27
956: invokevirtual #25
959: iconst_0
960: invokevirtual #69
963: ldc           #24
965: invokevirtual #25
968: invokevirtual #28
971: iload         37
973: ifne          980
976: iconst_1
977: goto          981
980: iconst_0
981: invokestatic  #29
984: new           #22
987: dup
988: invokespecial #23
991: ldc           #24
993: invokevirtual #25
996: iload         38
998: invokevirtual #41
1001: ldc           #27
1003: invokevirtual #25
1006: iconst_m1
1007: invokevirtual #41
1010: ldc           #24
1012: invokevirtual #25
1015: invokevirtual #28
1018: iload         38
1020: iconst_m1
1021: if_icmpne     1028
1024: iconst_1
1025: goto          1029
1028: iconst_0
1029: invokestatic  #29
1032: return
Exception table:
from    to  target type
338   351   354   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test054
Start line: 1812
End line: 0
Method source code: 
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory10 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream12 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream12, "jar");
        tarArchiveOutputStream14.count(0L);
        long long17 = tarArchiveOutputStream14.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream18 = archiveStreamFactory10.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream14);
        long long19 = tarArchiveOutputStream14.getBytesWritten();
        tarArchiveOutputStream14.setBigNumberMode(256);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("compression method", (java.io.OutputStream) tarArchiveOutputStream14);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: compression method not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #280
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #8
69: dup
70: invokespecial #9
73: astore        7
75: aconst_null
76: astore        8
78: new           #43
81: dup
82: aload         8
84: ldc           #44
86: invokespecial #45
89: astore        9
91: aload         9
93: lconst_0
94: invokevirtual #46
97: aload         9
99: invokevirtual #47
102: lstore        10
104: aload         7
106: ldc           #48
108: aload         9
110: invokevirtual #49
113: astore        12
115: aload         9
117: invokevirtual #47
120: lstore        13
122: aload         9
124: sipush        256
127: invokevirtual #281
130: aload_1
131: ldc_w         #282
134: aload         9
136: invokevirtual #49
139: astore        15
141: ldc_w         #283
144: invokestatic  #20
147: goto          152
150: astore        15
152: new           #22
155: dup
156: invokespecial #23
159: ldc           #24
161: invokevirtual #25
164: lload         4
166: invokevirtual #26
169: ldc           #27
171: invokevirtual #25
174: lconst_0
175: invokevirtual #26
178: ldc           #24
180: invokevirtual #25
183: invokevirtual #28
186: lload         4
188: lconst_0
189: lcmp
190: ifne          197
193: iconst_1
194: goto          198
197: iconst_0
198: invokestatic  #29
201: aload         6
203: invokestatic  #53
206: new           #22
209: dup
210: invokespecial #23
213: ldc           #24
215: invokevirtual #25
218: lload         10
220: invokevirtual #26
223: ldc           #27
225: invokevirtual #25
228: lconst_0
229: invokevirtual #26
232: ldc           #24
234: invokevirtual #25
237: invokevirtual #28
240: lload         10
242: lconst_0
243: lcmp
244: ifne          251
247: iconst_1
248: goto          252
251: iconst_0
252: invokestatic  #29
255: aload         12
257: invokestatic  #53
260: new           #22
263: dup
264: invokespecial #23
267: ldc           #24
269: invokevirtual #25
272: lload         13
274: invokevirtual #26
277: ldc           #27
279: invokevirtual #25
282: lconst_0
283: invokevirtual #26
286: ldc           #24
288: invokevirtual #25
291: invokevirtual #28
294: lload         13
296: lconst_0
297: lcmp
298: ifne          305
301: iconst_1
302: goto          306
305: iconst_0
306: invokestatic  #29
309: return
Exception table:
from    to  target type
130   147   150   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test055
Start line: 1844
End line: 0
Method source code: 
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream2 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy4 = null;
        zipArchiveOutputStream3.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy4);
        zipArchiveOutputStream3.setUseLanguageEncodingFlag(true);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream8 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream3);
        arArchiveOutputStream8.finish();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry11 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory12 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream14 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream16 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream14, "jar");
        tarArchiveOutputStream16.count(0L);
        long long19 = tarArchiveOutputStream16.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream20 = archiveStreamFactory12.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream16);
        boolean boolean21 = tarArchiveEntry11.equals((java.lang.Object) "ar");
        long long22 = tarArchiveEntry11.getSize();
        tarArchiveEntry11.setDevMajor((int) (short) 10);
        try {
            arArchiveOutputStream8.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry11);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #284
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #43
30: dup
31: aload_1
32: ldc           #44
34: invokespecial #45
37: astore_2
38: new           #182
41: dup
42: aload_1
43: invokespecial #183
46: astore_3
47: aconst_null
48: astore        4
50: aload_3
51: aload         4
53: invokevirtual #184
56: aload_3
57: iconst_1
58: invokevirtual #285
61: new           #240
64: dup
65: aload_3
66: invokespecial #241
69: astore        5
71: aload         5
73: invokevirtual #286
76: new           #112
79: dup
80: ldc           #225
82: invokespecial #120
85: astore        6
87: new           #8
90: dup
91: invokespecial #9
94: astore        7
96: aconst_null
97: astore        8
99: new           #43
102: dup
103: aload         8
105: ldc           #44
107: invokespecial #45
110: astore        9
112: aload         9
114: lconst_0
115: invokevirtual #46
118: aload         9
120: invokevirtual #47
123: lstore        10
125: aload         7
127: ldc           #48
129: aload         9
131: invokevirtual #49
134: astore        12
136: aload         6
138: ldc           #48
140: invokevirtual #133
143: istore        13
145: aload         6
147: invokevirtual #156
150: lstore        14
152: aload         6
154: bipush        10
156: invokevirtual #287
159: aload         5
161: aload         6
163: invokevirtual #288
166: ldc_w         #289
169: invokestatic  #20
172: goto          177
175: astore        16
177: new           #22
180: dup
181: invokespecial #23
184: ldc           #24
186: invokevirtual #25
189: lload         10
191: invokevirtual #26
194: ldc           #27
196: invokevirtual #25
199: lconst_0
200: invokevirtual #26
203: ldc           #24
205: invokevirtual #25
208: invokevirtual #28
211: lload         10
213: lconst_0
214: lcmp
215: ifne          222
218: iconst_1
219: goto          223
222: iconst_0
223: invokestatic  #29
226: aload         12
228: invokestatic  #53
231: new           #22
234: dup
235: invokespecial #23
238: ldc           #24
240: invokevirtual #25
243: iload         13
245: invokevirtual #69
248: ldc           #27
250: invokevirtual #25
253: iconst_0
254: invokevirtual #69
257: ldc           #24
259: invokevirtual #25
262: invokevirtual #28
265: iload         13
267: ifne          274
270: iconst_1
271: goto          275
274: iconst_0
275: invokestatic  #29
278: new           #22
281: dup
282: invokespecial #23
285: ldc           #24
287: invokevirtual #25
290: lload         14
292: invokevirtual #26
295: ldc           #27
297: invokevirtual #25
300: lconst_0
301: invokevirtual #26
304: ldc           #24
306: invokevirtual #25
309: invokevirtual #28
312: lload         14
314: lconst_0
315: lcmp
316: ifne          323
319: iconst_1
320: goto          324
323: iconst_0
324: invokestatic  #29
327: return
Exception table:
from    to  target type
159   172   175   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test056
Start line: 1879
End line: 0
Method source code: 
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        zipArchiveOutputStream13.setLevel(0);
        zipArchiveOutputStream13.setComment("org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 103.");
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream23 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream24 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.ArchiveException: data descriptor", (java.io.OutputStream) jarArchiveOutputStream23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.ArchiveException: data descriptor not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #290
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: iconst_0
119: invokevirtual #291
122: aload         9
124: ldc           #196
126: invokevirtual #292
129: new           #222
132: dup
133: aload         9
135: invokespecial #223
138: astore        12
140: aload_1
141: ldc_w         #293
144: aload         12
146: invokevirtual #49
149: astore        13
151: ldc_w         #294
154: invokestatic  #20
157: goto          162
160: astore        13
162: new           #22
165: dup
166: invokespecial #23
169: ldc           #24
171: invokevirtual #25
174: lload         4
176: invokevirtual #26
179: ldc           #27
181: invokevirtual #25
184: lconst_0
185: invokevirtual #26
188: ldc           #24
190: invokevirtual #25
193: invokevirtual #28
196: lload         4
198: lconst_0
199: lcmp
200: ifne          207
203: iconst_1
204: goto          208
207: iconst_0
208: invokestatic  #29
211: aload         6
213: invokestatic  #53
216: new           #22
219: dup
220: invokespecial #23
223: ldc           #24
225: invokevirtual #25
228: iload         11
230: invokevirtual #69
233: ldc           #27
235: invokevirtual #25
238: iconst_0
239: invokevirtual #69
242: ldc           #24
244: invokevirtual #25
247: invokevirtual #28
250: iload         11
252: ifne          259
255: iconst_1
256: goto          260
259: iconst_0
260: invokestatic  #29
263: return
Exception table:
from    to  target type
140   157   160   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test057
Start line: 1911
End line: 0
Method source code: 
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream19 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) archiveInputStream18);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #295
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: new           #10
139: dup
140: aload         15
142: invokespecial #11
145: astore        16
147: new           #22
150: dup
151: invokespecial #23
154: ldc           #24
156: invokevirtual #25
159: lload         4
161: invokevirtual #26
164: ldc           #27
166: invokevirtual #25
169: lconst_0
170: invokevirtual #26
173: ldc           #24
175: invokevirtual #25
178: invokevirtual #28
181: lload         4
183: lconst_0
184: lcmp
185: ifne          192
188: iconst_1
189: goto          193
192: iconst_0
193: invokestatic  #29
196: aload         6
198: invokestatic  #53
201: new           #22
204: dup
205: invokespecial #23
208: ldc           #24
210: invokevirtual #25
213: lload         9
215: invokevirtual #26
218: ldc           #27
220: invokevirtual #25
223: lconst_0
224: invokevirtual #26
227: ldc           #24
229: invokevirtual #25
232: invokevirtual #28
235: lload         9
237: lconst_0
238: lcmp
239: ifne          246
242: iconst_1
243: goto          247
246: iconst_0
247: invokestatic  #29
250: new           #22
253: dup
254: invokespecial #23
257: ldc           #24
259: invokevirtual #25
262: lload         11
264: invokevirtual #26
267: ldc           #27
269: invokevirtual #25
272: lconst_0
273: invokevirtual #26
276: ldc           #24
278: invokevirtual #25
281: invokevirtual #28
284: lload         11
286: lconst_0
287: lcmp
288: ifne          295
291: iconst_1
292: goto          296
295: iconst_0
296: invokestatic  #29
299: aload         15
301: invokestatic  #53
304: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test058
Start line: 1938
End line: 0
Method source code: 
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.InputStream inputStream26 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream27 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream26);
        long long28 = jarArchiveInputStream27.getBytesRead();
        long long29 = jarArchiveInputStream27.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream30 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream27);
        arArchiveInputStream30.close();
        arArchiveInputStream30.pushedBackBytes((-1L));
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream34 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream30);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream35 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream30);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream36 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream35);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream40 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream35, "always", false, false);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream41 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream35);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream42 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) zipArchiveInputStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #296
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #10
200: dup
201: aload         24
203: invokespecial #11
206: astore        25
208: aload         25
210: invokevirtual #12
213: lstore        26
215: aload         25
217: invokevirtual #12
220: lstore        28
222: new           #13
225: dup
226: aload         25
228: invokespecial #14
231: astore        30
233: aload         30
235: invokevirtual #140
238: aload         30
240: ldc2_w        #297
243: invokevirtual #299
246: new           #33
249: dup
250: aload         30
252: invokespecial #34
255: astore        31
257: new           #15
260: dup
261: aload         30
263: invokespecial #300
266: astore        32
268: new           #10
271: dup
272: aload         32
274: invokespecial #11
277: astore        33
279: new           #15
282: dup
283: aload         32
285: ldc           #79
287: iconst_0
288: iconst_0
289: invokespecial #17
292: astore        34
294: new           #33
297: dup
298: aload         32
300: invokespecial #34
303: astore        35
305: aload_1
306: aload         32
308: invokevirtual #18
311: astore        36
313: ldc           #19
315: invokestatic  #20
318: goto          323
321: astore        36
323: new           #22
326: dup
327: invokespecial #23
330: ldc           #24
332: invokevirtual #25
335: lload         4
337: invokevirtual #26
340: ldc           #27
342: invokevirtual #25
345: lconst_0
346: invokevirtual #26
349: ldc           #24
351: invokevirtual #25
354: invokevirtual #28
357: lload         4
359: lconst_0
360: lcmp
361: ifne          368
364: iconst_1
365: goto          369
368: iconst_0
369: invokestatic  #29
372: new           #22
375: dup
376: invokespecial #23
379: ldc           #24
381: invokevirtual #25
384: lload         6
386: invokevirtual #26
389: ldc           #27
391: invokevirtual #25
394: lconst_0
395: invokevirtual #26
398: ldc           #24
400: invokevirtual #25
403: invokevirtual #28
406: lload         6
408: lconst_0
409: lcmp
410: ifne          417
413: iconst_1
414: goto          418
417: iconst_0
418: invokestatic  #29
421: aload         10
423: invokestatic  #168
426: aload         11
428: invokestatic  #168
431: aload         13
433: invokestatic  #53
436: new           #22
439: dup
440: invokespecial #23
443: ldc           #24
445: invokevirtual #25
448: lload         16
450: invokevirtual #26
453: ldc           #27
455: invokevirtual #25
458: lconst_0
459: invokevirtual #26
462: ldc           #24
464: invokevirtual #25
467: invokevirtual #28
470: lload         16
472: lconst_0
473: lcmp
474: ifne          481
477: iconst_1
478: goto          482
481: iconst_0
482: invokestatic  #29
485: new           #22
488: dup
489: invokespecial #23
492: ldc           #24
494: invokevirtual #25
497: lload         18
499: invokevirtual #26
502: ldc           #27
504: invokevirtual #25
507: lconst_0
508: invokevirtual #26
511: ldc           #24
513: invokevirtual #25
516: invokevirtual #28
519: lload         18
521: lconst_0
522: lcmp
523: ifne          530
526: iconst_1
527: goto          531
530: iconst_0
531: invokestatic  #29
534: aload         21
536: invokestatic  #168
539: aload         23
541: invokestatic  #53
544: new           #22
547: dup
548: invokespecial #23
551: ldc           #24
553: invokevirtual #25
556: lload         26
558: invokevirtual #26
561: ldc           #27
563: invokevirtual #25
566: lconst_0
567: invokevirtual #26
570: ldc           #24
572: invokevirtual #25
575: invokevirtual #28
578: lload         26
580: lconst_0
581: lcmp
582: ifne          589
585: iconst_1
586: goto          590
589: iconst_0
590: invokestatic  #29
593: new           #22
596: dup
597: invokespecial #23
600: ldc           #24
602: invokevirtual #25
605: lload         28
607: invokevirtual #26
610: ldc           #27
612: invokevirtual #25
615: lconst_0
616: invokevirtual #26
619: ldc           #24
621: invokevirtual #25
624: invokevirtual #28
627: lload         28
629: lconst_0
630: lcmp
631: ifne          638
634: iconst_1
635: goto          639
638: iconst_0
639: invokestatic  #29
642: return
Exception table:
from    to  target type
305   318   321   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test059
Start line: 1995
End line: 0
Method source code: 
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true);
        java.io.File file12 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry14 = tarArchiveOutputStream4.createArchiveEntry(file12, "hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #301
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: aload_3
73: iconst_1
74: invokevirtual #148
77: aconst_null
78: astore        9
80: aload_3
81: aload         9
83: ldc           #124
85: invokevirtual #86
88: astore        10
90: ldc           #51
92: invokestatic  #20
95: goto          100
98: astore        10
100: new           #22
103: dup
104: invokespecial #23
107: ldc           #24
109: invokevirtual #25
112: lload         4
114: invokevirtual #26
117: ldc           #27
119: invokevirtual #25
122: lconst_0
123: invokevirtual #26
126: ldc           #24
128: invokevirtual #25
131: invokevirtual #28
134: lload         4
136: lconst_0
137: lcmp
138: ifne          145
141: iconst_1
142: goto          146
145: iconst_0
146: invokestatic  #29
149: aload         6
151: invokestatic  #53
154: new           #22
157: dup
158: invokespecial #23
161: ldc           #24
163: invokevirtual #25
166: lload         7
168: invokevirtual #26
171: ldc           #27
173: invokevirtual #25
176: lconst_0
177: invokevirtual #26
180: ldc           #24
182: invokevirtual #25
185: invokevirtual #28
188: lload         7
190: lconst_0
191: lcmp
192: ifne          199
195: iconst_1
196: goto          200
199: iconst_0
200: invokestatic  #29
203: return
Exception table:
from    to  target type
80    95    98   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test060
Start line: 2020
End line: 0
Method source code: 
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        try {
            arArchiveOutputStream10.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #302
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: invokevirtual #242
92: ldc           #51
94: invokestatic  #20
97: goto          102
100: astore        10
102: new           #22
105: dup
106: invokespecial #23
109: ldc           #24
111: invokevirtual #25
114: lload         4
116: invokevirtual #26
119: ldc           #27
121: invokevirtual #25
124: lconst_0
125: invokevirtual #26
128: ldc           #24
130: invokevirtual #25
133: invokevirtual #28
136: lload         4
138: lconst_0
139: lcmp
140: ifne          147
143: iconst_1
144: goto          148
147: iconst_0
148: invokestatic  #29
151: aload         6
153: invokestatic  #53
156: new           #22
159: dup
160: invokespecial #23
163: ldc           #24
165: invokevirtual #25
168: lload         7
170: invokevirtual #26
173: ldc           #27
175: invokevirtual #25
178: lconst_0
179: invokevirtual #26
182: ldc           #24
184: invokevirtual #25
187: invokevirtual #28
190: lload         7
192: lconst_0
193: lcmp
194: ifne          201
197: iconst_1
198: goto          202
201: iconst_0
202: invokestatic  #29
205: return
Exception table:
from    to  target type
87    97   100   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test061
Start line: 2045
End line: 0
Method source code: 
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory1 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream3 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream3, "jar");
        tarArchiveOutputStream5.count(0L);
        long long8 = tarArchiveOutputStream5.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream9 = archiveStreamFactory1.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream5);
        int int10 = tarArchiveOutputStream5.getCount();
        int int11 = tarArchiveOutputStream5.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong13 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray14 = zipLong13.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong16 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray17 = zipLong16.getBytes();
        boolean boolean19 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray14, byteArray17, true);
        boolean boolean20 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray14);
        tarArchiveOutputStream5.write(byteArray14, (int) (short) 4, (int) (byte) -1);
        try {
            int int26 = org.apache.commons.compress.archivers.tar.TarUtils.formatOctalBytes((long) (byte) 51, byteArray14, (int) (byte) 10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: 51=63 will not fit in octal number buffer of length -2");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #303
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: new           #73
81: dup
82: lconst_0
83: invokespecial #74
86: astore        9
88: aload         9
90: invokevirtual #75
93: astore        10
95: new           #73
98: dup
99: lconst_0
100: invokespecial #74
103: astore        11
105: aload         11
107: invokevirtual #75
110: astore        12
112: aload         10
114: aload         12
116: iconst_1
117: invokestatic  #177
120: istore        13
122: aload         10
124: invokestatic  #192
127: istore        14
129: aload_3
130: aload         10
132: iconst_4
133: iconst_m1
134: invokevirtual #63
137: ldc2_w        #304
140: aload         10
142: bipush        10
144: iconst_0
145: invokestatic  #306
148: istore        15
150: ldc_w         #307
153: invokestatic  #20
156: goto          161
159: astore        15
161: new           #22
164: dup
165: invokespecial #23
168: ldc           #24
170: invokevirtual #25
173: lload         4
175: invokevirtual #26
178: ldc           #27
180: invokevirtual #25
183: lconst_0
184: invokevirtual #26
187: ldc           #24
189: invokevirtual #25
192: invokevirtual #28
195: lload         4
197: lconst_0
198: lcmp
199: ifne          206
202: iconst_1
203: goto          207
206: iconst_0
207: invokestatic  #29
210: aload         6
212: invokestatic  #53
215: new           #22
218: dup
219: invokespecial #23
222: ldc           #24
224: invokevirtual #25
227: iload         7
229: invokevirtual #41
232: ldc           #27
234: invokevirtual #25
237: iconst_0
238: invokevirtual #41
241: ldc           #24
243: invokevirtual #25
246: invokevirtual #28
249: iload         7
251: ifne          258
254: iconst_1
255: goto          259
258: iconst_0
259: invokestatic  #29
262: new           #22
265: dup
266: invokespecial #23
269: ldc           #24
271: invokevirtual #25
274: iload         8
276: invokevirtual #41
279: ldc           #27
281: invokevirtual #25
284: iconst_0
285: invokevirtual #41
288: ldc           #24
290: invokevirtual #25
293: invokevirtual #28
296: iload         8
298: ifne          305
301: iconst_1
302: goto          306
305: iconst_0
306: invokestatic  #29
309: aload         10
311: invokestatic  #53
314: aload         10
316: invokestatic  #66
319: ldc           #77
321: invokestatic  #68
324: aload         12
326: invokestatic  #53
329: aload         12
331: invokestatic  #66
334: ldc           #77
336: invokestatic  #68
339: new           #22
342: dup
343: invokespecial #23
346: ldc           #24
348: invokevirtual #25
351: iload         13
353: invokevirtual #69
356: ldc           #27
358: invokevirtual #25
361: iconst_1
362: invokevirtual #69
365: ldc           #24
367: invokevirtual #25
370: invokevirtual #28
373: iload         13
375: iconst_1
376: if_icmpne     383
379: iconst_1
380: goto          384
383: iconst_0
384: invokestatic  #29
387: new           #22
390: dup
391: invokespecial #23
394: ldc           #24
396: invokevirtual #25
399: iload         14
401: invokevirtual #69
404: ldc           #27
406: invokevirtual #25
409: iconst_1
410: invokevirtual #69
413: ldc           #24
415: invokevirtual #25
418: invokevirtual #28
421: iload         14
423: iconst_1
424: if_icmpne     431
427: iconst_1
428: goto          432
431: iconst_0
432: invokestatic  #29
435: return
Exception table:
from    to  target type
137   156   159   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test062
Start line: 2083
End line: 0
Method source code: 
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream20, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream23 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream20);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy24 = null;
        zipArchiveOutputStream23.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy24);
        int int26 = zipArchiveOutputStream23.getCount();
        java.lang.String str27 = zipArchiveOutputStream23.getEncoding();
        zipArchiveOutputStream23.count(0);
        zipArchiveOutputStream23.setLevel((int) (byte) 1);
        java.io.OutputStream outputStream32 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream34 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream32, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream35 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream32);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy36 = null;
        zipArchiveOutputStream35.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy36);
        int int38 = zipArchiveOutputStream35.getCount();
        zipArchiveOutputStream35.setEncoding("cpio");
        zipArchiveOutputStream35.flush();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy42 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        java.lang.String str43 = unicodeExtraFieldPolicy42.toString();
        zipArchiveOutputStream35.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy42);
        zipArchiveOutputStream23.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy42);
        zipArchiveOutputStream23.setFallbackToUTF8(true);
        boolean boolean48 = zipArchiveOutputStream23.isSeekable();
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream49 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.ArchiveException: data descriptor", (java.io.OutputStream) zipArchiveOutputStream23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.ArchiveException: data descriptor not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTF8" + "'", str27, "UTF8");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "always" + "'", str43, "always");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #308
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aconst_null
137: astore        16
139: new           #43
142: dup
143: aload         16
145: ldc           #44
147: invokespecial #45
150: astore        17
152: new           #182
155: dup
156: aload         16
158: invokespecial #183
161: astore        18
163: aconst_null
164: astore        19
166: aload         18
168: aload         19
170: invokevirtual #184
173: aload         18
175: invokevirtual #309
178: istore        20
180: aload         18
182: invokevirtual #310
185: astore        21
187: aload         18
189: iconst_0
190: invokevirtual #311
193: aload         18
195: iconst_1
196: invokevirtual #291
199: aconst_null
200: astore        22
202: new           #43
205: dup
206: aload         22
208: ldc           #44
210: invokespecial #45
213: astore        23
215: new           #182
218: dup
219: aload         22
221: invokespecial #183
224: astore        24
226: aconst_null
227: astore        25
229: aload         24
231: aload         25
233: invokevirtual #184
236: aload         24
238: invokevirtual #309
241: istore        26
243: aload         24
245: ldc_w         #273
248: invokevirtual #312
251: aload         24
253: invokevirtual #313
256: getstatic     #314
259: astore        27
261: aload         27
263: invokevirtual #315
266: astore        28
268: aload         24
270: aload         27
272: invokevirtual #184
275: aload         18
277: aload         27
279: invokevirtual #184
282: aload         18
284: iconst_1
285: invokevirtual #316
288: aload         18
290: invokevirtual #185
293: istore        29
295: aload_1
296: ldc_w         #293
299: aload         18
301: invokevirtual #49
304: astore        30
306: ldc_w         #294
309: invokestatic  #20
312: goto          317
315: astore        30
317: new           #22
320: dup
321: invokespecial #23
324: ldc           #24
326: invokevirtual #25
329: lload         4
331: invokevirtual #26
334: ldc           #27
336: invokevirtual #25
339: lconst_0
340: invokevirtual #26
343: ldc           #24
345: invokevirtual #25
348: invokevirtual #28
351: lload         4
353: lconst_0
354: lcmp
355: ifne          362
358: iconst_1
359: goto          363
362: iconst_0
363: invokestatic  #29
366: aload         6
368: invokestatic  #53
371: new           #22
374: dup
375: invokespecial #23
378: ldc           #24
380: invokevirtual #25
383: lload         9
385: invokevirtual #26
388: ldc           #27
390: invokevirtual #25
393: lconst_0
394: invokevirtual #26
397: ldc           #24
399: invokevirtual #25
402: invokevirtual #28
405: lload         9
407: lconst_0
408: lcmp
409: ifne          416
412: iconst_1
413: goto          417
416: iconst_0
417: invokestatic  #29
420: new           #22
423: dup
424: invokespecial #23
427: ldc           #24
429: invokevirtual #25
432: lload         11
434: invokevirtual #26
437: ldc           #27
439: invokevirtual #25
442: lconst_0
443: invokevirtual #26
446: ldc           #24
448: invokevirtual #25
451: invokevirtual #28
454: lload         11
456: lconst_0
457: lcmp
458: ifne          465
461: iconst_1
462: goto          466
465: iconst_0
466: invokestatic  #29
469: aload         15
471: invokestatic  #53
474: new           #22
477: dup
478: invokespecial #23
481: ldc           #24
483: invokevirtual #25
486: iload         20
488: invokevirtual #41
491: ldc           #27
493: invokevirtual #25
496: iconst_0
497: invokevirtual #41
500: ldc           #24
502: invokevirtual #25
505: invokevirtual #28
508: iload         20
510: ifne          517
513: iconst_1
514: goto          518
517: iconst_0
518: invokestatic  #29
521: new           #22
524: dup
525: invokespecial #23
528: ldc           #24
530: invokevirtual #25
533: aload         21
535: invokevirtual #25
538: ldc_w         #317
541: invokevirtual #25
544: invokevirtual #28
547: aload         21
549: ldc           #85
551: invokestatic  #154
554: new           #22
557: dup
558: invokespecial #23
561: ldc           #24
563: invokevirtual #25
566: iload         26
568: invokevirtual #41
571: ldc           #27
573: invokevirtual #25
576: iconst_0
577: invokevirtual #41
580: ldc           #24
582: invokevirtual #25
585: invokevirtual #28
588: iload         26
590: ifne          597
593: iconst_1
594: goto          598
597: iconst_0
598: invokestatic  #29
601: aload         27
603: invokestatic  #53
606: new           #22
609: dup
610: invokespecial #23
613: ldc           #24
615: invokevirtual #25
618: aload         28
620: invokevirtual #25
623: ldc_w         #318
626: invokevirtual #25
629: invokevirtual #28
632: aload         28
634: ldc           #79
636: invokestatic  #154
639: new           #22
642: dup
643: invokespecial #23
646: ldc           #24
648: invokevirtual #25
651: iload         29
653: invokevirtual #69
656: ldc           #27
658: invokevirtual #25
661: iconst_0
662: invokevirtual #69
665: ldc           #24
667: invokevirtual #25
670: invokevirtual #28
673: iload         29
675: ifne          682
678: iconst_1
679: goto          683
682: iconst_0
683: invokestatic  #29
686: return
Exception table:
from    to  target type
295   312   315   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test063
Start line: 2145
End line: 0
Method source code: 
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream10, "././@LongLink");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ././@LongLink");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #319
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #43
85: dup
86: aload         8
88: ldc_w         #320
91: invokespecial #45
94: astore        9
96: ldc_w         #321
99: invokestatic  #20
102: goto          107
105: astore        9
107: new           #22
110: dup
111: invokespecial #23
114: ldc           #24
116: invokevirtual #25
119: lload         4
121: invokevirtual #26
124: ldc           #27
126: invokevirtual #25
129: lconst_0
130: invokevirtual #26
133: ldc           #24
135: invokevirtual #25
138: invokevirtual #28
141: lload         4
143: lconst_0
144: lcmp
145: ifne          152
148: iconst_1
149: goto          153
152: iconst_0
153: invokestatic  #29
156: aload         6
158: invokestatic  #53
161: new           #22
164: dup
165: invokespecial #23
168: ldc           #24
170: invokevirtual #25
173: iload         7
175: invokevirtual #41
178: ldc           #27
180: invokevirtual #25
183: iconst_0
184: invokevirtual #41
187: ldc           #24
189: invokevirtual #25
192: invokevirtual #28
195: iload         7
197: ifne          204
200: iconst_1
201: goto          205
204: iconst_0
205: invokestatic  #29
208: return
Exception table:
from    to  target type
82   102   105   Class java/nio/charset/IllegalCharsetNameException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test064
Start line: 2169
End line: 0
Method source code: 
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        java.io.OutputStream outputStream20 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream21 = archiveStreamFactory0.createArchiveOutputStream("PK\003\004", outputStream20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: OutputStream must not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #322
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aconst_null
137: astore        16
139: aload_1
140: ldc_w         #323
143: aload         16
145: invokevirtual #49
148: astore        17
150: ldc           #106
152: invokestatic  #20
155: goto          160
158: astore        17
160: new           #22
163: dup
164: invokespecial #23
167: ldc           #24
169: invokevirtual #25
172: lload         4
174: invokevirtual #26
177: ldc           #27
179: invokevirtual #25
182: lconst_0
183: invokevirtual #26
186: ldc           #24
188: invokevirtual #25
191: invokevirtual #28
194: lload         4
196: lconst_0
197: lcmp
198: ifne          205
201: iconst_1
202: goto          206
205: iconst_0
206: invokestatic  #29
209: aload         6
211: invokestatic  #53
214: new           #22
217: dup
218: invokespecial #23
221: ldc           #24
223: invokevirtual #25
226: lload         9
228: invokevirtual #26
231: ldc           #27
233: invokevirtual #25
236: lconst_0
237: invokevirtual #26
240: ldc           #24
242: invokevirtual #25
245: invokevirtual #28
248: lload         9
250: lconst_0
251: lcmp
252: ifne          259
255: iconst_1
256: goto          260
259: iconst_0
260: invokestatic  #29
263: new           #22
266: dup
267: invokespecial #23
270: ldc           #24
272: invokevirtual #25
275: lload         11
277: invokevirtual #26
280: ldc           #27
282: invokevirtual #25
285: lconst_0
286: invokevirtual #26
289: ldc           #24
291: invokevirtual #25
294: invokevirtual #28
297: lload         11
299: lconst_0
300: lcmp
301: ifne          308
304: iconst_1
305: goto          309
308: iconst_0
309: invokestatic  #29
312: aload         15
314: invokestatic  #53
317: return
Exception table:
from    to  target type
139   155   158   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test065
Start line: 2203
End line: 0
Method source code: 
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        java.io.InputStream inputStream0 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream1 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream0);
        long long2 = jarArchiveInputStream1.getBytesRead();
        long long3 = jarArchiveInputStream1.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream4 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream1);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry6 = tarArchiveInputStream5.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry7 = tarArchiveInputStream5.getNextEntry();
        tarArchiveInputStream5.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream12 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream5, "tar", true);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong14 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray15 = zipLong14.getBytes();
        long long16 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray15);
        boolean boolean18 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray15, (int) (short) 8);
        int int21 = tarArchiveInputStream5.read(byteArray15, 64, 8);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry22 = tarArchiveInputStream5.getNextTarEntry();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry24 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory25 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream27 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar");
        tarArchiveOutputStream29.count(0L);
        long long32 = tarArchiveOutputStream29.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream33 = archiveStreamFactory25.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream29);
        boolean boolean34 = tarArchiveEntry24.equals((java.lang.Object) "ar");
        long long35 = tarArchiveEntry24.getSize();
        tarArchiveEntry24.setDevMajor((int) (short) 10);
        long long38 = tarArchiveEntry24.getRealSize();
        tarArchiveEntry24.setSize((long) 2048);
        boolean boolean41 = tarArchiveInputStream5.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry24);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNull(archiveEntry6);
        org.junit.Assert.assertNull(archiveEntry7);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(tarArchiveEntry22);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #324
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #10
30: dup
31: aload_1
32: invokespecial #11
35: astore_2
36: aload_2
37: invokevirtual #12
40: lstore_3
41: aload_2
42: invokevirtual #12
45: lstore        5
47: new           #13
50: dup
51: aload_2
52: invokespecial #14
55: astore        7
57: new           #31
60: dup
61: aload_2
62: invokespecial #32
65: astore        8
67: aload         8
69: invokevirtual #199
72: astore        9
74: aload         8
76: invokevirtual #199
79: astore        10
81: aload         8
83: ldc2_w        #200
86: invokevirtual #202
89: new           #15
92: dup
93: aload         8
95: ldc           #164
97: iconst_1
98: invokespecial #203
101: astore        11
103: new           #73
106: dup
107: lconst_0
108: invokespecial #74
111: astore        12
113: aload         12
115: invokevirtual #75
118: astore        13
120: aload         13
122: invokestatic  #209
125: lstore        14
127: aload         13
129: bipush        8
131: invokestatic  #325
134: istore        16
136: aload         8
138: aload         13
140: bipush        64
142: bipush        8
144: invokevirtual #174
147: istore        17
149: aload         8
151: invokevirtual #326
154: astore        18
156: new           #112
159: dup
160: ldc           #225
162: invokespecial #120
165: astore        19
167: new           #8
170: dup
171: invokespecial #9
174: astore        20
176: aconst_null
177: astore        21
179: new           #43
182: dup
183: aload         21
185: ldc           #44
187: invokespecial #45
190: astore        22
192: aload         22
194: lconst_0
195: invokevirtual #46
198: aload         22
200: invokevirtual #47
203: lstore        23
205: aload         20
207: ldc           #48
209: aload         22
211: invokevirtual #49
214: astore        25
216: aload         19
218: ldc           #48
220: invokevirtual #133
223: istore        26
225: aload         19
227: invokevirtual #156
230: lstore        27
232: aload         19
234: bipush        10
236: invokevirtual #287
239: aload         19
241: invokevirtual #327
244: lstore        29
246: aload         19
248: ldc2_w        #328
251: invokevirtual #330
254: aload         8
256: aload         19
258: invokevirtual #116
261: istore        31
263: new           #22
266: dup
267: invokespecial #23
270: ldc           #24
272: invokevirtual #25
275: lload_3
276: invokevirtual #26
279: ldc           #27
281: invokevirtual #25
284: lconst_0
285: invokevirtual #26
288: ldc           #24
290: invokevirtual #25
293: invokevirtual #28
296: lload_3
297: lconst_0
298: lcmp
299: ifne          306
302: iconst_1
303: goto          307
306: iconst_0
307: invokestatic  #29
310: new           #22
313: dup
314: invokespecial #23
317: ldc           #24
319: invokevirtual #25
322: lload         5
324: invokevirtual #26
327: ldc           #27
329: invokevirtual #25
332: lconst_0
333: invokevirtual #26
336: ldc           #24
338: invokevirtual #25
341: invokevirtual #28
344: lload         5
346: lconst_0
347: lcmp
348: ifne          355
351: iconst_1
352: goto          356
355: iconst_0
356: invokestatic  #29
359: aload         9
361: invokestatic  #168
364: aload         10
366: invokestatic  #168
369: aload         13
371: invokestatic  #53
374: aload         13
376: invokestatic  #66
379: ldc           #77
381: invokestatic  #68
384: new           #22
387: dup
388: invokespecial #23
391: ldc           #24
393: invokevirtual #25
396: lload         14
398: invokevirtual #26
401: ldc           #27
403: invokevirtual #25
406: lconst_0
407: invokevirtual #26
410: ldc           #24
412: invokevirtual #25
415: invokevirtual #28
418: lload         14
420: lconst_0
421: lcmp
422: ifne          429
425: iconst_1
426: goto          430
429: iconst_0
430: invokestatic  #29
433: new           #22
436: dup
437: invokespecial #23
440: ldc           #24
442: invokevirtual #25
445: iload         16
447: invokevirtual #69
450: ldc           #27
452: invokevirtual #25
455: iconst_0
456: invokevirtual #69
459: ldc           #24
461: invokevirtual #25
464: invokevirtual #28
467: iload         16
469: ifne          476
472: iconst_1
473: goto          477
476: iconst_0
477: invokestatic  #29
480: new           #22
483: dup
484: invokespecial #23
487: ldc           #24
489: invokevirtual #25
492: iload         17
494: invokevirtual #41
497: ldc           #27
499: invokevirtual #25
502: iconst_m1
503: invokevirtual #41
506: ldc           #24
508: invokevirtual #25
511: invokevirtual #28
514: iload         17
516: iconst_m1
517: if_icmpne     524
520: iconst_1
521: goto          525
524: iconst_0
525: invokestatic  #29
528: aload         18
530: invokestatic  #168
533: new           #22
536: dup
537: invokespecial #23
540: ldc           #24
542: invokevirtual #25
545: lload         23
547: invokevirtual #26
550: ldc           #27
552: invokevirtual #25
555: lconst_0
556: invokevirtual #26
559: ldc           #24
561: invokevirtual #25
564: invokevirtual #28
567: lload         23
569: lconst_0
570: lcmp
571: ifne          578
574: iconst_1
575: goto          579
578: iconst_0
579: invokestatic  #29
582: aload         25
584: invokestatic  #53
587: new           #22
590: dup
591: invokespecial #23
594: ldc           #24
596: invokevirtual #25
599: iload         26
601: invokevirtual #69
604: ldc           #27
606: invokevirtual #25
609: iconst_0
610: invokevirtual #69
613: ldc           #24
615: invokevirtual #25
618: invokevirtual #28
621: iload         26
623: ifne          630
626: iconst_1
627: goto          631
630: iconst_0
631: invokestatic  #29
634: new           #22
637: dup
638: invokespecial #23
641: ldc           #24
643: invokevirtual #25
646: lload         27
648: invokevirtual #26
651: ldc           #27
653: invokevirtual #25
656: lconst_0
657: invokevirtual #26
660: ldc           #24
662: invokevirtual #25
665: invokevirtual #28
668: lload         27
670: lconst_0
671: lcmp
672: ifne          679
675: iconst_1
676: goto          680
679: iconst_0
680: invokestatic  #29
683: new           #22
686: dup
687: invokespecial #23
690: ldc           #24
692: invokevirtual #25
695: lload         29
697: invokevirtual #26
700: ldc           #27
702: invokevirtual #25
705: lconst_0
706: invokevirtual #26
709: ldc           #24
711: invokevirtual #25
714: invokevirtual #28
717: lload         29
719: lconst_0
720: lcmp
721: ifne          728
724: iconst_1
725: goto          729
728: iconst_0
729: invokestatic  #29
732: new           #22
735: dup
736: invokespecial #23
739: ldc           #24
741: invokevirtual #25
744: iload         31
746: invokevirtual #69
749: ldc           #27
751: invokevirtual #25
754: iconst_1
755: invokevirtual #69
758: ldc           #24
760: invokevirtual #25
763: invokevirtual #28
766: iload         31
768: iconst_1
769: if_icmpne     776
772: iconst_1
773: goto          777
776: iconst_0
777: invokestatic  #29
780: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test066
Start line: 2254
End line: 0
Method source code: 
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream14);
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry17 = cpioArchiveInputStream16.getNextEntry();
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #331
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: new           #33
125: dup
126: aload         12
128: invokespecial #34
131: astore        14
133: aload         14
135: invokevirtual #332
138: astore        15
140: ldc_w         #333
143: invokestatic  #20
146: goto          151
149: astore        15
151: new           #22
154: dup
155: invokespecial #23
158: ldc           #24
160: invokevirtual #25
163: lload         4
165: invokevirtual #26
168: ldc           #27
170: invokevirtual #25
173: lconst_0
174: invokevirtual #26
177: ldc           #24
179: invokevirtual #25
182: invokevirtual #28
185: lload         4
187: lconst_0
188: lcmp
189: ifne          196
192: iconst_1
193: goto          197
196: iconst_0
197: invokestatic  #29
200: new           #22
203: dup
204: invokespecial #23
207: ldc           #24
209: invokevirtual #25
212: lload         6
214: invokevirtual #26
217: ldc           #27
219: invokevirtual #25
222: lconst_0
223: invokevirtual #26
226: ldc           #24
228: invokevirtual #25
231: invokevirtual #28
234: lload         6
236: lconst_0
237: lcmp
238: ifne          245
241: iconst_1
242: goto          246
245: iconst_0
246: invokestatic  #29
249: aload         10
251: invokestatic  #168
254: aload         11
256: invokestatic  #168
259: aload         13
261: invokestatic  #53
264: return
Exception table:
from    to  target type
133   146   149   Class java/io/EOFException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test067
Start line: 2285
End line: 0
Method source code: 
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong27 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray28 = zipLong27.getBytes();
        long long29 = zipLong27.getValue();
        java.io.InputStream inputStream30 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream31 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream30);
        long long32 = jarArchiveInputStream31.getBytesRead();
        long long33 = jarArchiveInputStream31.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream34 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream31);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream35 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream31);
        boolean boolean36 = zipLong27.equals((java.lang.Object) jarArchiveInputStream31);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream37 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) jarArchiveInputStream31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #335
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: new           #73
197: dup
198: lconst_0
199: invokespecial #74
202: astore        24
204: aload         24
206: invokevirtual #75
209: astore        25
211: aload         24
213: invokevirtual #336
216: lstore        26
218: aconst_null
219: astore        28
221: new           #10
224: dup
225: aload         28
227: invokespecial #11
230: astore        29
232: aload         29
234: invokevirtual #12
237: lstore        30
239: aload         29
241: invokevirtual #12
244: lstore        32
246: new           #13
249: dup
250: aload         29
252: invokespecial #14
255: astore        34
257: new           #31
260: dup
261: aload         29
263: invokespecial #32
266: astore        35
268: aload         24
270: aload         29
272: invokevirtual #337
275: istore        36
277: aload_1
278: aload         29
280: invokevirtual #18
283: astore        37
285: ldc           #19
287: invokestatic  #20
290: goto          295
293: astore        37
295: new           #22
298: dup
299: invokespecial #23
302: ldc           #24
304: invokevirtual #25
307: lload         4
309: invokevirtual #26
312: ldc           #27
314: invokevirtual #25
317: lconst_0
318: invokevirtual #26
321: ldc           #24
323: invokevirtual #25
326: invokevirtual #28
329: lload         4
331: lconst_0
332: lcmp
333: ifne          340
336: iconst_1
337: goto          341
340: iconst_0
341: invokestatic  #29
344: new           #22
347: dup
348: invokespecial #23
351: ldc           #24
353: invokevirtual #25
356: lload         6
358: invokevirtual #26
361: ldc           #27
363: invokevirtual #25
366: lconst_0
367: invokevirtual #26
370: ldc           #24
372: invokevirtual #25
375: invokevirtual #28
378: lload         6
380: lconst_0
381: lcmp
382: ifne          389
385: iconst_1
386: goto          390
389: iconst_0
390: invokestatic  #29
393: aload         10
395: invokestatic  #168
398: aload         11
400: invokestatic  #168
403: aload         13
405: invokestatic  #53
408: new           #22
411: dup
412: invokespecial #23
415: ldc           #24
417: invokevirtual #25
420: lload         16
422: invokevirtual #26
425: ldc           #27
427: invokevirtual #25
430: lconst_0
431: invokevirtual #26
434: ldc           #24
436: invokevirtual #25
439: invokevirtual #28
442: lload         16
444: lconst_0
445: lcmp
446: ifne          453
449: iconst_1
450: goto          454
453: iconst_0
454: invokestatic  #29
457: new           #22
460: dup
461: invokespecial #23
464: ldc           #24
466: invokevirtual #25
469: lload         18
471: invokevirtual #26
474: ldc           #27
476: invokevirtual #25
479: lconst_0
480: invokevirtual #26
483: ldc           #24
485: invokevirtual #25
488: invokevirtual #28
491: lload         18
493: lconst_0
494: lcmp
495: ifne          502
498: iconst_1
499: goto          503
502: iconst_0
503: invokestatic  #29
506: aload         21
508: invokestatic  #168
511: aload         23
513: invokestatic  #53
516: aload         25
518: invokestatic  #53
521: aload         25
523: invokestatic  #66
526: ldc           #77
528: invokestatic  #68
531: new           #22
534: dup
535: invokespecial #23
538: ldc           #24
540: invokevirtual #25
543: lload         26
545: invokevirtual #26
548: ldc           #27
550: invokevirtual #25
553: lconst_0
554: invokevirtual #26
557: ldc           #24
559: invokevirtual #25
562: invokevirtual #28
565: lload         26
567: lconst_0
568: lcmp
569: ifne          576
572: iconst_1
573: goto          577
576: iconst_0
577: invokestatic  #29
580: new           #22
583: dup
584: invokespecial #23
587: ldc           #24
589: invokevirtual #25
592: lload         30
594: invokevirtual #26
597: ldc           #27
599: invokevirtual #25
602: lconst_0
603: invokevirtual #26
606: ldc           #24
608: invokevirtual #25
611: invokevirtual #28
614: lload         30
616: lconst_0
617: lcmp
618: ifne          625
621: iconst_1
622: goto          626
625: iconst_0
626: invokestatic  #29
629: new           #22
632: dup
633: invokespecial #23
636: ldc           #24
638: invokevirtual #25
641: lload         32
643: invokevirtual #26
646: ldc           #27
648: invokevirtual #25
651: lconst_0
652: invokevirtual #26
655: ldc           #24
657: invokevirtual #25
660: invokevirtual #28
663: lload         32
665: lconst_0
666: lcmp
667: ifne          674
670: iconst_1
671: goto          675
674: iconst_0
675: invokestatic  #29
678: new           #22
681: dup
682: invokespecial #23
685: ldc           #24
687: invokevirtual #25
690: iload         36
692: invokevirtual #69
695: ldc           #27
697: invokevirtual #25
700: iconst_0
701: invokevirtual #69
704: ldc           #24
706: invokevirtual #25
709: invokevirtual #28
712: iload         36
714: ifne          721
717: iconst_1
718: goto          722
721: iconst_0
722: invokestatic  #29
725: return
Exception table:
from    to  target type
277   290   293   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test068
Start line: 2344
End line: 0
Method source code: 
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream2 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy4 = null;
        zipArchiveOutputStream3.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy4);
        boolean boolean6 = zipArchiveOutputStream3.isSeekable();
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode7 = null;
        zipArchiveOutputStream3.setUseZip64(zip64Mode7);
        zipArchiveOutputStream3.flush();
        zipArchiveOutputStream3.setMethod(0);
        zipArchiveOutputStream3.setComment("org.apache.commons.compress.archivers.ArchiveException:  \000");
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream3, 155);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry17 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int18 = tarArchiveEntry17.getDevMinor();
        tarArchiveEntry17.setIds((int) (short) 3, 0);
        long long22 = tarArchiveEntry17.getSize();
        tarArchiveEntry17.setSize((long) 8192);
        java.lang.String str25 = tarArchiveEntry17.getName();
        boolean boolean26 = tarArchiveEntry17.isCheckSumOK();
        boolean boolean27 = tarArchiveEntry17.isCharacterDevice();
        boolean boolean28 = zipArchiveOutputStream3.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry17);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream3, 40960, (int) (short) 100);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry34 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory35 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream37 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream39 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream37, "jar");
        tarArchiveOutputStream39.count(0L);
        long long42 = tarArchiveOutputStream39.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream43 = archiveStreamFactory35.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream39);
        boolean boolean44 = tarArchiveEntry34.equals((java.lang.Object) "ar");
        long long45 = tarArchiveEntry34.getSize();
        try {
            cpioArchiveOutputStream32.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry34);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.cpio.CpioArchiveEntry");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "jar" + "'", str25, "jar");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #338
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #43
30: dup
31: aload_1
32: ldc           #44
34: invokespecial #45
37: astore_2
38: new           #182
41: dup
42: aload_1
43: invokespecial #183
46: astore_3
47: aconst_null
48: astore        4
50: aload_3
51: aload         4
53: invokevirtual #184
56: aload_3
57: invokevirtual #185
60: istore        5
62: aconst_null
63: astore        6
65: aload_3
66: aload         6
68: invokevirtual #224
71: aload_3
72: invokevirtual #313
75: aload_3
76: iconst_0
77: invokevirtual #339
80: aload_3
81: ldc           #186
83: invokevirtual #292
86: new           #43
89: dup
90: aload_3
91: sipush        155
94: invokespecial #340
97: astore        7
99: new           #112
102: dup
103: ldc           #44
105: invokespecial #120
108: astore        8
110: aload         8
112: invokevirtual #129
115: istore        9
117: aload         8
119: iconst_3
120: iconst_0
121: invokevirtual #130
124: aload         8
126: invokevirtual #156
129: lstore        10
131: aload         8
133: ldc2_w        #341
136: invokevirtual #330
139: aload         8
141: invokevirtual #276
144: astore        12
146: aload         8
148: invokevirtual #343
151: istore        13
153: aload         8
155: invokevirtual #344
158: istore        14
160: aload_3
161: aload         8
163: invokevirtual #345
166: istore        15
168: new           #43
171: dup
172: aload_3
173: ldc           #109
175: bipush        100
177: invokespecial #346
180: astore        16
182: new           #143
185: dup
186: aload_3
187: invokespecial #144
190: astore        17
192: new           #112
195: dup
196: ldc           #225
198: invokespecial #120
201: astore        18
203: new           #8
206: dup
207: invokespecial #9
210: astore        19
212: aconst_null
213: astore        20
215: new           #43
218: dup
219: aload         20
221: ldc           #44
223: invokespecial #45
226: astore        21
228: aload         21
230: lconst_0
231: invokevirtual #46
234: aload         21
236: invokevirtual #47
239: lstore        22
241: aload         19
243: ldc           #48
245: aload         21
247: invokevirtual #49
250: astore        24
252: aload         18
254: ldc           #48
256: invokevirtual #133
259: istore        25
261: aload         18
263: invokevirtual #156
266: lstore        26
268: aload         17
270: aload         18
272: invokevirtual #347
275: ldc_w         #348
278: invokestatic  #20
281: goto          286
284: astore        28
286: new           #22
289: dup
290: invokespecial #23
293: ldc           #24
295: invokevirtual #25
298: iload         5
300: invokevirtual #69
303: ldc           #27
305: invokevirtual #25
308: iconst_0
309: invokevirtual #69
312: ldc           #24
314: invokevirtual #25
317: invokevirtual #28
320: iload         5
322: ifne          329
325: iconst_1
326: goto          330
329: iconst_0
330: invokestatic  #29
333: new           #22
336: dup
337: invokespecial #23
340: ldc           #24
342: invokevirtual #25
345: iload         9
347: invokevirtual #41
350: ldc           #27
352: invokevirtual #25
355: iconst_0
356: invokevirtual #41
359: ldc           #24
361: invokevirtual #25
364: invokevirtual #28
367: iload         9
369: ifne          376
372: iconst_1
373: goto          377
376: iconst_0
377: invokestatic  #29
380: new           #22
383: dup
384: invokespecial #23
387: ldc           #24
389: invokevirtual #25
392: lload         10
394: invokevirtual #26
397: ldc           #27
399: invokevirtual #25
402: lconst_0
403: invokevirtual #26
406: ldc           #24
408: invokevirtual #25
411: invokevirtual #28
414: lload         10
416: lconst_0
417: lcmp
418: ifne          425
421: iconst_1
422: goto          426
425: iconst_0
426: invokestatic  #29
429: new           #22
432: dup
433: invokespecial #23
436: ldc           #24
438: invokevirtual #25
441: aload         12
443: invokevirtual #25
446: ldc_w         #350
449: invokevirtual #25
452: invokevirtual #28
455: aload         12
457: ldc           #44
459: invokestatic  #154
462: new           #22
465: dup
466: invokespecial #23
469: ldc           #24
471: invokevirtual #25
474: iload         13
476: invokevirtual #69
479: ldc           #27
481: invokevirtual #25
484: iconst_0
485: invokevirtual #69
488: ldc           #24
490: invokevirtual #25
493: invokevirtual #28
496: iload         13
498: ifne          505
501: iconst_1
502: goto          506
505: iconst_0
506: invokestatic  #29
509: new           #22
512: dup
513: invokespecial #23
516: ldc           #24
518: invokevirtual #25
521: iload         14
523: invokevirtual #69
526: ldc           #27
528: invokevirtual #25
531: iconst_0
532: invokevirtual #69
535: ldc           #24
537: invokevirtual #25
540: invokevirtual #28
543: iload         14
545: ifne          552
548: iconst_1
549: goto          553
552: iconst_0
553: invokestatic  #29
556: new           #22
559: dup
560: invokespecial #23
563: ldc           #24
565: invokevirtual #25
568: iload         15
570: invokevirtual #69
573: ldc           #27
575: invokevirtual #25
578: iconst_0
579: invokevirtual #69
582: ldc           #24
584: invokevirtual #25
587: invokevirtual #28
590: iload         15
592: ifne          599
595: iconst_1
596: goto          600
599: iconst_0
600: invokestatic  #29
603: new           #22
606: dup
607: invokespecial #23
610: ldc           #24
612: invokevirtual #25
615: lload         22
617: invokevirtual #26
620: ldc           #27
622: invokevirtual #25
625: lconst_0
626: invokevirtual #26
629: ldc           #24
631: invokevirtual #25
634: invokevirtual #28
637: lload         22
639: lconst_0
640: lcmp
641: ifne          648
644: iconst_1
645: goto          649
648: iconst_0
649: invokestatic  #29
652: aload         24
654: invokestatic  #53
657: new           #22
660: dup
661: invokespecial #23
664: ldc           #24
666: invokevirtual #25
669: iload         25
671: invokevirtual #69
674: ldc           #27
676: invokevirtual #25
679: iconst_0
680: invokevirtual #69
683: ldc           #24
685: invokevirtual #25
688: invokevirtual #28
691: iload         25
693: ifne          700
696: iconst_1
697: goto          701
700: iconst_0
701: invokestatic  #29
704: new           #22
707: dup
708: invokespecial #23
711: ldc           #24
713: invokevirtual #25
716: lload         26
718: invokevirtual #26
721: ldc           #27
723: invokevirtual #25
726: lconst_0
727: invokevirtual #26
730: ldc           #24
732: invokevirtual #25
735: invokevirtual #28
738: lload         26
740: lconst_0
741: lcmp
742: ifne          749
745: iconst_1
746: goto          750
749: iconst_0
750: invokestatic  #29
753: return
Exception table:
from    to  target type
268   281   284   Class java/lang/ClassCastException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test069
Start line: 2400
End line: 0
Method source code: 
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.OutputStream outputStream27 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream27);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy31 = null;
        zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy31);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream33 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream30);
        jarArchiveOutputStream33.count((int) (byte) 55);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream36 = archiveStreamFactory0.createArchiveOutputStream("\000\ufffd\000\000", (java.io.OutputStream) jarArchiveOutputStream33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #351
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #43
200: dup
201: aload         24
203: ldc           #44
205: invokespecial #45
208: astore        25
210: new           #182
213: dup
214: aload         24
216: invokespecial #183
219: astore        26
221: aconst_null
222: astore        27
224: aload         26
226: aload         27
228: invokevirtual #184
231: new           #222
234: dup
235: aload         26
237: invokespecial #223
240: astore        28
242: aload         28
244: bipush        55
246: invokevirtual #352
249: aload_1
250: ldc_w         #353
253: aload         28
255: invokevirtual #49
258: astore        29
260: ldc           #118
262: invokestatic  #20
265: goto          270
268: astore        29
270: new           #22
273: dup
274: invokespecial #23
277: ldc           #24
279: invokevirtual #25
282: lload         4
284: invokevirtual #26
287: ldc           #27
289: invokevirtual #25
292: lconst_0
293: invokevirtual #26
296: ldc           #24
298: invokevirtual #25
301: invokevirtual #28
304: lload         4
306: lconst_0
307: lcmp
308: ifne          315
311: iconst_1
312: goto          316
315: iconst_0
316: invokestatic  #29
319: new           #22
322: dup
323: invokespecial #23
326: ldc           #24
328: invokevirtual #25
331: lload         6
333: invokevirtual #26
336: ldc           #27
338: invokevirtual #25
341: lconst_0
342: invokevirtual #26
345: ldc           #24
347: invokevirtual #25
350: invokevirtual #28
353: lload         6
355: lconst_0
356: lcmp
357: ifne          364
360: iconst_1
361: goto          365
364: iconst_0
365: invokestatic  #29
368: aload         10
370: invokestatic  #168
373: aload         11
375: invokestatic  #168
378: aload         13
380: invokestatic  #53
383: new           #22
386: dup
387: invokespecial #23
390: ldc           #24
392: invokevirtual #25
395: lload         16
397: invokevirtual #26
400: ldc           #27
402: invokevirtual #25
405: lconst_0
406: invokevirtual #26
409: ldc           #24
411: invokevirtual #25
414: invokevirtual #28
417: lload         16
419: lconst_0
420: lcmp
421: ifne          428
424: iconst_1
425: goto          429
428: iconst_0
429: invokestatic  #29
432: new           #22
435: dup
436: invokespecial #23
439: ldc           #24
441: invokevirtual #25
444: lload         18
446: invokevirtual #26
449: ldc           #27
451: invokevirtual #25
454: lconst_0
455: invokevirtual #26
458: ldc           #24
460: invokevirtual #25
463: invokevirtual #28
466: lload         18
468: lconst_0
469: lcmp
470: ifne          477
473: iconst_1
474: goto          478
477: iconst_0
478: invokestatic  #29
481: aload         21
483: invokestatic  #168
486: aload         23
488: invokestatic  #53
491: return
Exception table:
from    to  target type
249   265   268   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test070
Start line: 2450
End line: 0
Method source code: 
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry26 = jarArchiveInputStream18.getNextEntry();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertNull(archiveEntry26);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #354
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aload         15
196: invokevirtual #166
199: astore        24
201: new           #22
204: dup
205: invokespecial #23
208: ldc           #24
210: invokevirtual #25
213: lload         4
215: invokevirtual #26
218: ldc           #27
220: invokevirtual #25
223: lconst_0
224: invokevirtual #26
227: ldc           #24
229: invokevirtual #25
232: invokevirtual #28
235: lload         4
237: lconst_0
238: lcmp
239: ifne          246
242: iconst_1
243: goto          247
246: iconst_0
247: invokestatic  #29
250: new           #22
253: dup
254: invokespecial #23
257: ldc           #24
259: invokevirtual #25
262: lload         6
264: invokevirtual #26
267: ldc           #27
269: invokevirtual #25
272: lconst_0
273: invokevirtual #26
276: ldc           #24
278: invokevirtual #25
281: invokevirtual #28
284: lload         6
286: lconst_0
287: lcmp
288: ifne          295
291: iconst_1
292: goto          296
295: iconst_0
296: invokestatic  #29
299: aload         10
301: invokestatic  #168
304: aload         11
306: invokestatic  #168
309: aload         13
311: invokestatic  #53
314: new           #22
317: dup
318: invokespecial #23
321: ldc           #24
323: invokevirtual #25
326: lload         16
328: invokevirtual #26
331: ldc           #27
333: invokevirtual #25
336: lconst_0
337: invokevirtual #26
340: ldc           #24
342: invokevirtual #25
345: invokevirtual #28
348: lload         16
350: lconst_0
351: lcmp
352: ifne          359
355: iconst_1
356: goto          360
359: iconst_0
360: invokestatic  #29
363: new           #22
366: dup
367: invokespecial #23
370: ldc           #24
372: invokevirtual #25
375: lload         18
377: invokevirtual #26
380: ldc           #27
382: invokevirtual #25
385: lconst_0
386: invokevirtual #26
389: ldc           #24
391: invokevirtual #25
394: invokevirtual #28
397: lload         18
399: lconst_0
400: lcmp
401: ifne          408
404: iconst_1
405: goto          409
408: iconst_0
409: invokestatic  #29
412: aload         21
414: invokestatic  #168
417: aload         23
419: invokestatic  #53
422: aload         24
424: invokestatic  #168
427: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test071
Start line: 2488
End line: 0
Method source code: 
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream20, "jar");
        int int23 = tarArchiveOutputStream22.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream24 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream22);
        tarArchiveOutputStream24.setAddPaxHeadersForNonAsciiNames(true);
        int int27 = tarArchiveOutputStream24.getCount();
        tarArchiveOutputStream24.count(256);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream30 = archiveStreamFactory0.createArchiveOutputStream("ZipLong value: 8", (java.io.OutputStream) tarArchiveOutputStream24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipLong value: 8 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #355
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aconst_null
137: astore        16
139: new           #43
142: dup
143: aload         16
145: ldc           #44
147: invokespecial #45
150: astore        17
152: aload         17
154: invokevirtual #60
157: istore        18
159: new           #43
162: dup
163: aload         17
165: invokespecial #95
168: astore        19
170: aload         19
172: iconst_1
173: invokevirtual #148
176: aload         19
178: invokevirtual #60
181: istore        20
183: aload         19
185: sipush        256
188: invokevirtual #356
191: aload_1
192: ldc_w         #357
195: aload         19
197: invokevirtual #49
200: astore        21
202: ldc_w         #358
205: invokestatic  #20
208: goto          213
211: astore        21
213: new           #22
216: dup
217: invokespecial #23
220: ldc           #24
222: invokevirtual #25
225: lload         4
227: invokevirtual #26
230: ldc           #27
232: invokevirtual #25
235: lconst_0
236: invokevirtual #26
239: ldc           #24
241: invokevirtual #25
244: invokevirtual #28
247: lload         4
249: lconst_0
250: lcmp
251: ifne          258
254: iconst_1
255: goto          259
258: iconst_0
259: invokestatic  #29
262: aload         6
264: invokestatic  #53
267: new           #22
270: dup
271: invokespecial #23
274: ldc           #24
276: invokevirtual #25
279: lload         9
281: invokevirtual #26
284: ldc           #27
286: invokevirtual #25
289: lconst_0
290: invokevirtual #26
293: ldc           #24
295: invokevirtual #25
298: invokevirtual #28
301: lload         9
303: lconst_0
304: lcmp
305: ifne          312
308: iconst_1
309: goto          313
312: iconst_0
313: invokestatic  #29
316: new           #22
319: dup
320: invokespecial #23
323: ldc           #24
325: invokevirtual #25
328: lload         11
330: invokevirtual #26
333: ldc           #27
335: invokevirtual #25
338: lconst_0
339: invokevirtual #26
342: ldc           #24
344: invokevirtual #25
347: invokevirtual #28
350: lload         11
352: lconst_0
353: lcmp
354: ifne          361
357: iconst_1
358: goto          362
361: iconst_0
362: invokestatic  #29
365: aload         15
367: invokestatic  #53
370: new           #22
373: dup
374: invokespecial #23
377: ldc           #24
379: invokevirtual #25
382: iload         18
384: invokevirtual #41
387: ldc           #27
389: invokevirtual #25
392: iconst_0
393: invokevirtual #41
396: ldc           #24
398: invokevirtual #25
401: invokevirtual #28
404: iload         18
406: ifne          413
409: iconst_1
410: goto          414
413: iconst_0
414: invokestatic  #29
417: new           #22
420: dup
421: invokespecial #23
424: ldc           #24
426: invokevirtual #25
429: iload         20
431: invokevirtual #41
434: ldc           #27
436: invokevirtual #25
439: iconst_0
440: invokevirtual #41
443: ldc           #24
445: invokevirtual #25
448: invokevirtual #28
451: iload         20
453: ifne          460
456: iconst_1
457: goto          461
460: iconst_0
461: invokestatic  #29
464: return
Exception table:
from    to  target type
191   208   211   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test072
Start line: 2530
End line: 0
Method source code: 
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream2);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong5 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray6 = zipLong5.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong8 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray9 = zipLong8.getBytes();
        boolean boolean11 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray6, byteArray9, true);
        int int14 = tarArchiveInputStream3.read(byteArray6, 0, 32);
        tarArchiveInputStream3.mark((int) '#');
        tarArchiveInputStream3.reset();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.archivers.ArchiveException: data descriptor", (java.io.InputStream) tarArchiveInputStream3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.ArchiveException: data descriptor not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #359
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #31
38: dup
39: aload_2
40: invokespecial #32
43: astore_3
44: new           #73
47: dup
48: lconst_0
49: invokespecial #74
52: astore        4
54: aload         4
56: invokevirtual #75
59: astore        5
61: new           #73
64: dup
65: lconst_0
66: invokespecial #74
69: astore        6
71: aload         6
73: invokevirtual #75
76: astore        7
78: aload         5
80: aload         7
82: iconst_1
83: invokestatic  #177
86: istore        8
88: aload_3
89: aload         5
91: iconst_0
92: bipush        32
94: invokevirtual #174
97: istore        9
99: aload_3
100: bipush        35
102: invokevirtual #178
105: aload_3
106: invokevirtual #256
109: aload_1
110: ldc_w         #293
113: aload_3
114: invokevirtual #38
117: astore        10
119: ldc_w         #294
122: invokestatic  #20
125: goto          130
128: astore        10
130: aload         5
132: invokestatic  #53
135: aload         5
137: invokestatic  #66
140: ldc           #77
142: invokestatic  #68
145: aload         7
147: invokestatic  #53
150: aload         7
152: invokestatic  #66
155: ldc           #77
157: invokestatic  #68
160: new           #22
163: dup
164: invokespecial #23
167: ldc           #24
169: invokevirtual #25
172: iload         8
174: invokevirtual #69
177: ldc           #27
179: invokevirtual #25
182: iconst_1
183: invokevirtual #69
186: ldc           #24
188: invokevirtual #25
191: invokevirtual #28
194: iload         8
196: iconst_1
197: if_icmpne     204
200: iconst_1
201: goto          205
204: iconst_0
205: invokestatic  #29
208: new           #22
211: dup
212: invokespecial #23
215: ldc           #24
217: invokevirtual #25
220: iload         9
222: invokevirtual #41
225: ldc           #27
227: invokevirtual #25
230: iconst_m1
231: invokevirtual #41
234: ldc           #24
236: invokevirtual #25
239: invokevirtual #28
242: iload         9
244: iconst_m1
245: if_icmpne     252
248: iconst_1
249: goto          253
252: iconst_0
253: invokestatic  #29
256: return
Exception table:
from    to  target type
109   125   128   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test073
Start line: 2560
End line: 0
Method source code: 
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        try {
            tarArchiveOutputStream10.close();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '10240' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #360
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: aload         8
84: invokevirtual #71
87: ldc           #96
89: invokestatic  #20
92: goto          97
95: astore        9
97: new           #22
100: dup
101: invokespecial #23
104: ldc           #24
106: invokevirtual #25
109: lload         4
111: invokevirtual #26
114: ldc           #27
116: invokevirtual #25
119: lconst_0
120: invokevirtual #26
123: ldc           #24
125: invokevirtual #25
128: invokevirtual #28
131: lload         4
133: lconst_0
134: lcmp
135: ifne          142
138: iconst_1
139: goto          143
142: iconst_0
143: invokestatic  #29
146: aload         6
148: invokestatic  #53
151: new           #22
154: dup
155: invokespecial #23
158: ldc           #24
160: invokevirtual #25
163: iload         7
165: invokevirtual #41
168: ldc           #27
170: invokevirtual #25
173: iconst_0
174: invokevirtual #41
177: ldc           #24
179: invokevirtual #25
182: invokevirtual #28
185: iload         7
187: ifne          194
190: iconst_1
191: goto          195
194: iconst_0
195: invokestatic  #29
198: return
Exception table:
from    to  target type
82    92    95   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test074
Start line: 2584
End line: 0
Method source code: 
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        java.io.File file10 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry12 = cpioArchiveOutputStream9.createArchiveEntry(file10, "\001\ufffdX");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #361
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #143
69: dup
70: aload         6
72: invokespecial #144
75: astore        7
77: aconst_null
78: astore        8
80: aload         7
82: aload         8
84: ldc           #214
86: invokevirtual #146
89: astore        9
91: ldc           #51
93: invokestatic  #20
96: goto          101
99: astore        9
101: new           #22
104: dup
105: invokespecial #23
108: ldc           #24
110: invokevirtual #25
113: lload         4
115: invokevirtual #26
118: ldc           #27
120: invokevirtual #25
123: lconst_0
124: invokevirtual #26
127: ldc           #24
129: invokevirtual #25
132: invokevirtual #28
135: lload         4
137: lconst_0
138: lcmp
139: ifne          146
142: iconst_1
143: goto          147
146: iconst_0
147: invokestatic  #29
150: aload         6
152: invokestatic  #53
155: return
Exception table:
from    to  target type
80    96    99   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test075
Start line: 2607
End line: 0
Method source code: 
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong8 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray9 = zipLong8.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong11 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray12 = zipLong11.getBytes();
        boolean boolean14 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray9, byteArray12, true);
        boolean boolean15 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray9);
        int int18 = jarArchiveInputStream3.read(byteArray9, (int) (byte) 10, 3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3, (int) (byte) 51, "x5S");
        tarArchiveInputStream21.close();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream23 = archiveStreamFactory0.createArchiveInputStream("ZipLong value: 32", (java.io.InputStream) tarArchiveInputStream21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipLong value: 32 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #362
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #73
69: dup
70: lconst_0
71: invokespecial #74
74: astore        9
76: aload         9
78: invokevirtual #75
81: astore        10
83: new           #73
86: dup
87: lconst_0
88: invokespecial #74
91: astore        11
93: aload         11
95: invokevirtual #75
98: astore        12
100: aload         10
102: aload         12
104: iconst_1
105: invokestatic  #177
108: istore        13
110: aload         10
112: invokestatic  #192
115: istore        14
117: aload_3
118: aload         10
120: bipush        10
122: iconst_3
123: invokevirtual #76
126: istore        15
128: new           #31
131: dup
132: aload_3
133: bipush        51
135: ldc           #153
137: invokespecial #110
140: astore        16
142: aload         16
144: invokevirtual #363
147: aload_1
148: ldc_w         #364
151: aload         16
153: invokevirtual #38
156: astore        17
158: ldc_w         #365
161: invokestatic  #20
164: goto          169
167: astore        17
169: new           #22
172: dup
173: invokespecial #23
176: ldc           #24
178: invokevirtual #25
181: lload         4
183: invokevirtual #26
186: ldc           #27
188: invokevirtual #25
191: lconst_0
192: invokevirtual #26
195: ldc           #24
197: invokevirtual #25
200: invokevirtual #28
203: lload         4
205: lconst_0
206: lcmp
207: ifne          214
210: iconst_1
211: goto          215
214: iconst_0
215: invokestatic  #29
218: new           #22
221: dup
222: invokespecial #23
225: ldc           #24
227: invokevirtual #25
230: lload         6
232: invokevirtual #26
235: ldc           #27
237: invokevirtual #25
240: lconst_0
241: invokevirtual #26
244: ldc           #24
246: invokevirtual #25
249: invokevirtual #28
252: lload         6
254: lconst_0
255: lcmp
256: ifne          263
259: iconst_1
260: goto          264
263: iconst_0
264: invokestatic  #29
267: aload         10
269: invokestatic  #53
272: aload         10
274: invokestatic  #66
277: ldc           #77
279: invokestatic  #68
282: aload         12
284: invokestatic  #53
287: aload         12
289: invokestatic  #66
292: ldc           #77
294: invokestatic  #68
297: new           #22
300: dup
301: invokespecial #23
304: ldc           #24
306: invokevirtual #25
309: iload         13
311: invokevirtual #69
314: ldc           #27
316: invokevirtual #25
319: iconst_1
320: invokevirtual #69
323: ldc           #24
325: invokevirtual #25
328: invokevirtual #28
331: iload         13
333: iconst_1
334: if_icmpne     341
337: iconst_1
338: goto          342
341: iconst_0
342: invokestatic  #29
345: new           #22
348: dup
349: invokespecial #23
352: ldc           #24
354: invokevirtual #25
357: iload         14
359: invokevirtual #69
362: ldc           #27
364: invokevirtual #25
367: iconst_1
368: invokevirtual #69
371: ldc           #24
373: invokevirtual #25
376: invokevirtual #28
379: iload         14
381: iconst_1
382: if_icmpne     389
385: iconst_1
386: goto          390
389: iconst_0
390: invokestatic  #29
393: new           #22
396: dup
397: invokespecial #23
400: ldc           #24
402: invokevirtual #25
405: iload         15
407: invokevirtual #41
410: ldc           #27
412: invokevirtual #25
415: iconst_m1
416: invokevirtual #41
419: ldc           #24
421: invokevirtual #25
424: invokevirtual #28
427: iload         15
429: iconst_m1
430: if_icmpne     437
433: iconst_1
434: goto          438
437: iconst_0
438: invokestatic  #29
441: return
Exception table:
from    to  target type
147   164   167   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test076
Start line: 2644
End line: 0
Method source code: 
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true);
        java.io.OutputStream outputStream25 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream27 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream25, "jar");
        tarArchiveOutputStream27.count(0L);
        long long30 = tarArchiveOutputStream27.getBytesWritten();
        tarArchiveOutputStream27.setAddPaxHeadersForNonAsciiNames(false);
        int int33 = tarArchiveOutputStream27.getRecordSize();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream34 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream27);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong36 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray37 = zipLong36.getBytes();
        tarArchiveOutputStream27.write(byteArray37, (-1), 0);
        boolean boolean42 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray37, (int) 'a');
        java.lang.String str43 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byteArray37);
        long long44 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray37);
        try {
            tarArchiveOutputStream4.write(byteArray37, (int) (byte) 51, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '100' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 512 + "'", int33 == 512);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\000\000\000\000" + "'", str43, "\000\000\000\000");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #366
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: new           #73
81: dup
82: lconst_0
83: invokespecial #74
86: astore        9
88: aload         9
90: invokevirtual #75
93: astore        10
95: new           #73
98: dup
99: lconst_0
100: invokespecial #74
103: astore        11
105: aload         11
107: invokevirtual #75
110: astore        12
112: aload         10
114: aload         12
116: iconst_1
117: invokestatic  #177
120: istore        13
122: aload         10
124: invokestatic  #192
127: istore        14
129: aload_3
130: aload         10
132: iconst_4
133: iconst_m1
134: invokevirtual #63
137: aload_3
138: iconst_1
139: invokevirtual #148
142: aconst_null
143: astore        15
145: new           #43
148: dup
149: aload         15
151: ldc           #44
153: invokespecial #45
156: astore        16
158: aload         16
160: lconst_0
161: invokevirtual #46
164: aload         16
166: invokevirtual #47
169: lstore        17
171: aload         16
173: iconst_0
174: invokevirtual #148
177: aload         16
179: invokevirtual #247
182: istore        19
184: new           #182
187: dup
188: aload         16
190: invokespecial #183
193: astore        20
195: new           #73
198: dup
199: lconst_0
200: invokespecial #74
203: astore        21
205: aload         21
207: invokevirtual #75
210: astore        22
212: aload         16
214: aload         22
216: iconst_m1
217: iconst_0
218: invokevirtual #63
221: aload         22
223: bipush        97
225: invokestatic  #210
228: istore        23
230: aload         22
232: invokestatic  #150
235: astore        24
237: aload         22
239: invokestatic  #209
242: lstore        25
244: aload_3
245: aload         22
247: bipush        51
249: bipush        100
251: invokevirtual #63
254: ldc_w         #367
257: invokestatic  #20
260: goto          265
263: astore        27
265: new           #22
268: dup
269: invokespecial #23
272: ldc           #24
274: invokevirtual #25
277: lload         4
279: invokevirtual #26
282: ldc           #27
284: invokevirtual #25
287: lconst_0
288: invokevirtual #26
291: ldc           #24
293: invokevirtual #25
296: invokevirtual #28
299: lload         4
301: lconst_0
302: lcmp
303: ifne          310
306: iconst_1
307: goto          311
310: iconst_0
311: invokestatic  #29
314: aload         6
316: invokestatic  #53
319: new           #22
322: dup
323: invokespecial #23
326: ldc           #24
328: invokevirtual #25
331: iload         7
333: invokevirtual #41
336: ldc           #27
338: invokevirtual #25
341: iconst_0
342: invokevirtual #41
345: ldc           #24
347: invokevirtual #25
350: invokevirtual #28
353: iload         7
355: ifne          362
358: iconst_1
359: goto          363
362: iconst_0
363: invokestatic  #29
366: new           #22
369: dup
370: invokespecial #23
373: ldc           #24
375: invokevirtual #25
378: iload         8
380: invokevirtual #41
383: ldc           #27
385: invokevirtual #25
388: iconst_0
389: invokevirtual #41
392: ldc           #24
394: invokevirtual #25
397: invokevirtual #28
400: iload         8
402: ifne          409
405: iconst_1
406: goto          410
409: iconst_0
410: invokestatic  #29
413: aload         10
415: invokestatic  #53
418: aload         10
420: invokestatic  #66
423: ldc           #77
425: invokestatic  #68
428: aload         12
430: invokestatic  #53
433: aload         12
435: invokestatic  #66
438: ldc           #77
440: invokestatic  #68
443: new           #22
446: dup
447: invokespecial #23
450: ldc           #24
452: invokevirtual #25
455: iload         13
457: invokevirtual #69
460: ldc           #27
462: invokevirtual #25
465: iconst_1
466: invokevirtual #69
469: ldc           #24
471: invokevirtual #25
474: invokevirtual #28
477: iload         13
479: iconst_1
480: if_icmpne     487
483: iconst_1
484: goto          488
487: iconst_0
488: invokestatic  #29
491: new           #22
494: dup
495: invokespecial #23
498: ldc           #24
500: invokevirtual #25
503: iload         14
505: invokevirtual #69
508: ldc           #27
510: invokevirtual #25
513: iconst_1
514: invokevirtual #69
517: ldc           #24
519: invokevirtual #25
522: invokevirtual #28
525: iload         14
527: iconst_1
528: if_icmpne     535
531: iconst_1
532: goto          536
535: iconst_0
536: invokestatic  #29
539: new           #22
542: dup
543: invokespecial #23
546: ldc           #24
548: invokevirtual #25
551: lload         17
553: invokevirtual #26
556: ldc           #27
558: invokevirtual #25
561: lconst_0
562: invokevirtual #26
565: ldc           #24
567: invokevirtual #25
570: invokevirtual #28
573: lload         17
575: lconst_0
576: lcmp
577: ifne          584
580: iconst_1
581: goto          585
584: iconst_0
585: invokestatic  #29
588: new           #22
591: dup
592: invokespecial #23
595: ldc           #24
597: invokevirtual #25
600: iload         19
602: invokevirtual #41
605: ldc           #27
607: invokevirtual #25
610: sipush        512
613: invokevirtual #41
616: ldc           #24
618: invokevirtual #25
621: invokevirtual #28
624: iload         19
626: sipush        512
629: if_icmpne     636
632: iconst_1
633: goto          637
636: iconst_0
637: invokestatic  #29
640: aload         22
642: invokestatic  #53
645: aload         22
647: invokestatic  #66
650: ldc           #77
652: invokestatic  #68
655: new           #22
658: dup
659: invokespecial #23
662: ldc           #24
664: invokevirtual #25
667: iload         23
669: invokevirtual #69
672: ldc           #27
674: invokevirtual #25
677: iconst_0
678: invokevirtual #69
681: ldc           #24
683: invokevirtual #25
686: invokevirtual #28
689: iload         23
691: ifne          698
694: iconst_1
695: goto          699
698: iconst_0
699: invokestatic  #29
702: new           #22
705: dup
706: invokespecial #23
709: ldc           #24
711: invokevirtual #25
714: aload         24
716: invokevirtual #25
719: ldc           #238
721: invokevirtual #25
724: invokevirtual #28
727: aload         24
729: ldc           #117
731: invokestatic  #154
734: new           #22
737: dup
738: invokespecial #23
741: ldc           #24
743: invokevirtual #25
746: lload         25
748: invokevirtual #26
751: ldc           #27
753: invokevirtual #25
756: lconst_0
757: invokevirtual #26
760: ldc           #24
762: invokevirtual #25
765: invokevirtual #28
768: lload         25
770: lconst_0
771: lcmp
772: ifne          779
775: iconst_1
776: goto          780
779: iconst_0
780: invokestatic  #29
783: return
Exception table:
from    to  target type
244   260   263   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test077
Start line: 2703
End line: 0
Method source code: 
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode17 = null;
        zipArchiveOutputStream13.setUseZip64(zip64Mode17);
        int int19 = zipArchiveOutputStream13.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13, (int) ' ');
        zipArchiveOutputStream13.setUseLanguageEncodingFlag(true);
        boolean boolean24 = zipArchiveOutputStream13.isSeekable();
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream25 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.dump.DumpArchiveException: 00", (java.io.OutputStream) zipArchiveOutputStream13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.dump.DumpArchiveException: 00 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #368
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aconst_null
111: astore        12
113: aload         9
115: aload         12
117: invokevirtual #224
120: aload         9
122: invokevirtual #309
125: istore        13
127: new           #43
130: dup
131: aload         9
133: bipush        32
135: invokespecial #340
138: astore        14
140: aload         9
142: iconst_1
143: invokevirtual #285
146: aload         9
148: invokevirtual #185
151: istore        15
153: aload_1
154: ldc           #179
156: aload         9
158: invokevirtual #49
161: astore        16
163: ldc           #180
165: invokestatic  #20
168: goto          173
171: astore        16
173: new           #22
176: dup
177: invokespecial #23
180: ldc           #24
182: invokevirtual #25
185: lload         4
187: invokevirtual #26
190: ldc           #27
192: invokevirtual #25
195: lconst_0
196: invokevirtual #26
199: ldc           #24
201: invokevirtual #25
204: invokevirtual #28
207: lload         4
209: lconst_0
210: lcmp
211: ifne          218
214: iconst_1
215: goto          219
218: iconst_0
219: invokestatic  #29
222: aload         6
224: invokestatic  #53
227: new           #22
230: dup
231: invokespecial #23
234: ldc           #24
236: invokevirtual #25
239: iload         11
241: invokevirtual #69
244: ldc           #27
246: invokevirtual #25
249: iconst_0
250: invokevirtual #69
253: ldc           #24
255: invokevirtual #25
258: invokevirtual #28
261: iload         11
263: ifne          270
266: iconst_1
267: goto          271
270: iconst_0
271: invokestatic  #29
274: new           #22
277: dup
278: invokespecial #23
281: ldc           #24
283: invokevirtual #25
286: iload         13
288: invokevirtual #41
291: ldc           #27
293: invokevirtual #25
296: iconst_0
297: invokevirtual #41
300: ldc           #24
302: invokevirtual #25
305: invokevirtual #28
308: iload         13
310: ifne          317
313: iconst_1
314: goto          318
317: iconst_0
318: invokestatic  #29
321: new           #22
324: dup
325: invokespecial #23
328: ldc           #24
330: invokevirtual #25
333: iload         15
335: invokevirtual #69
338: ldc           #27
340: invokevirtual #25
343: iconst_0
344: invokevirtual #69
347: ldc           #24
349: invokevirtual #25
352: invokevirtual #28
355: iload         15
357: ifne          364
360: iconst_1
361: goto          365
364: iconst_0
365: invokestatic  #29
368: return
Exception table:
from    to  target type
153   168   171   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test078
Start line: 2739
End line: 0
Method source code: 
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream19 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) archiveInputStream18);
        long long21 = cpioArchiveInputStream19.skip(167851318L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #369
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: new           #33
139: dup
140: aload         15
142: invokespecial #34
145: astore        16
147: aload         16
149: ldc2_w        #370
152: invokevirtual #162
155: lstore        17
157: new           #22
160: dup
161: invokespecial #23
164: ldc           #24
166: invokevirtual #25
169: lload         4
171: invokevirtual #26
174: ldc           #27
176: invokevirtual #25
179: lconst_0
180: invokevirtual #26
183: ldc           #24
185: invokevirtual #25
188: invokevirtual #28
191: lload         4
193: lconst_0
194: lcmp
195: ifne          202
198: iconst_1
199: goto          203
202: iconst_0
203: invokestatic  #29
206: aload         6
208: invokestatic  #53
211: new           #22
214: dup
215: invokespecial #23
218: ldc           #24
220: invokevirtual #25
223: lload         9
225: invokevirtual #26
228: ldc           #27
230: invokevirtual #25
233: lconst_0
234: invokevirtual #26
237: ldc           #24
239: invokevirtual #25
242: invokevirtual #28
245: lload         9
247: lconst_0
248: lcmp
249: ifne          256
252: iconst_1
253: goto          257
256: iconst_0
257: invokestatic  #29
260: new           #22
263: dup
264: invokespecial #23
267: ldc           #24
269: invokevirtual #25
272: lload         11
274: invokevirtual #26
277: ldc           #27
279: invokevirtual #25
282: lconst_0
283: invokevirtual #26
286: ldc           #24
288: invokevirtual #25
291: invokevirtual #28
294: lload         11
296: lconst_0
297: lcmp
298: ifne          305
301: iconst_1
302: goto          306
305: iconst_0
306: invokestatic  #29
309: aload         15
311: invokestatic  #53
314: new           #22
317: dup
318: invokespecial #23
321: ldc           #24
323: invokevirtual #25
326: lload         17
328: invokevirtual #26
331: ldc           #27
333: invokevirtual #25
336: lconst_0
337: invokevirtual #26
340: ldc           #24
342: invokevirtual #25
345: invokevirtual #28
348: lload         17
350: lconst_0
351: lcmp
352: ifne          359
355: iconst_1
356: goto          360
359: iconst_0
360: invokestatic  #29
363: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test079
Start line: 2768
End line: 0
Method source code: 
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        tarArchiveOutputStream4.setLongFileMode((int) '4');
        try {
            tarArchiveOutputStream4.write(36864);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '1' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #372
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: bipush        52
69: invokevirtual #195
72: aload_3
73: ldc_w         #373
76: invokevirtual #374
79: ldc           #175
81: invokestatic  #20
84: goto          89
87: astore        7
89: new           #22
92: dup
93: invokespecial #23
96: ldc           #24
98: invokevirtual #25
101: lload         4
103: invokevirtual #26
106: ldc           #27
108: invokevirtual #25
111: lconst_0
112: invokevirtual #26
115: ldc           #24
117: invokevirtual #25
120: invokevirtual #28
123: lload         4
125: lconst_0
126: lcmp
127: ifne          134
130: iconst_1
131: goto          135
134: iconst_0
135: invokestatic  #29
138: aload         6
140: invokestatic  #53
143: return
Exception table:
from    to  target type
72    84    87   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test080
Start line: 2790
End line: 0
Method source code: 
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream19 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream17, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream20 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream17);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream(outputStream17);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream23 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream17, 1000);
        tarArchiveOutputStream23.count(512);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry27 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int28 = tarArchiveEntry27.getDevMinor();
        tarArchiveEntry27.setIds((int) (short) 3, 0);
        java.lang.String str32 = tarArchiveEntry27.getGroupName();
        tarArchiveEntry27.setDevMinor(0);
        java.util.Date date35 = tarArchiveEntry27.getLastModifiedDate();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry38 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry38.setName("");
        boolean boolean41 = tarArchiveEntry27.equals(tarArchiveEntry38);
        boolean boolean42 = tarArchiveEntry38.isDirectory();
        java.lang.String str43 = tarArchiveEntry38.getName();
        boolean boolean44 = tarArchiveOutputStream23.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry38);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream45 = archiveStreamFactory0.createArchiveOutputStream("ZipLong value: 167851318", (java.io.OutputStream) tarArchiveOutputStream23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipLong value: 167851318 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #375
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #43
128: dup
129: aload         14
131: ldc           #44
133: invokespecial #45
136: astore        15
138: new           #182
141: dup
142: aload         14
144: invokespecial #183
147: astore        16
149: new           #143
152: dup
153: aload         14
155: invokespecial #144
158: astore        17
160: new           #43
163: dup
164: aload         14
166: sipush        1000
169: invokespecial #340
172: astore        18
174: aload         18
176: sipush        512
179: invokevirtual #356
182: new           #112
185: dup
186: ldc           #44
188: invokespecial #120
191: astore        19
193: aload         19
195: invokevirtual #129
198: istore        20
200: aload         19
202: iconst_3
203: iconst_0
204: invokevirtual #130
207: aload         19
209: invokevirtual #376
212: astore        21
214: aload         19
216: iconst_0
217: invokevirtual #114
220: aload         19
222: invokevirtual #122
225: astore        22
227: new           #112
230: dup
231: ldc           #61
233: iconst_0
234: invokespecial #113
237: astore        23
239: aload         23
241: ldc           #61
243: invokevirtual #275
246: aload         19
248: aload         23
250: invokevirtual #377
253: istore        24
255: aload         23
257: invokevirtual #378
260: istore        25
262: aload         23
264: invokevirtual #276
267: astore        26
269: aload         18
271: aload         23
273: invokevirtual #379
276: istore        27
278: aload_1
279: ldc_w         #380
282: aload         18
284: invokevirtual #49
287: astore        28
289: ldc_w         #381
292: invokestatic  #20
295: goto          300
298: astore        28
300: new           #22
303: dup
304: invokespecial #23
307: ldc           #24
309: invokevirtual #25
312: lload         4
314: invokevirtual #26
317: ldc           #27
319: invokevirtual #25
322: lconst_0
323: invokevirtual #26
326: ldc           #24
328: invokevirtual #25
331: invokevirtual #28
334: lload         4
336: lconst_0
337: lcmp
338: ifne          345
341: iconst_1
342: goto          346
345: iconst_0
346: invokestatic  #29
349: new           #22
352: dup
353: invokespecial #23
356: ldc           #24
358: invokevirtual #25
361: lload         6
363: invokevirtual #26
366: ldc           #27
368: invokevirtual #25
371: lconst_0
372: invokevirtual #26
375: ldc           #24
377: invokevirtual #25
380: invokevirtual #28
383: lload         6
385: lconst_0
386: lcmp
387: ifne          394
390: iconst_1
391: goto          395
394: iconst_0
395: invokestatic  #29
398: aload         10
400: invokestatic  #168
403: aload         11
405: invokestatic  #168
408: aload         13
410: invokestatic  #53
413: new           #22
416: dup
417: invokespecial #23
420: ldc           #24
422: invokevirtual #25
425: iload         20
427: invokevirtual #41
430: ldc           #27
432: invokevirtual #25
435: iconst_0
436: invokevirtual #41
439: ldc           #24
441: invokevirtual #25
444: invokevirtual #28
447: iload         20
449: ifne          456
452: iconst_1
453: goto          457
456: iconst_0
457: invokestatic  #29
460: new           #22
463: dup
464: invokespecial #23
467: ldc           #24
469: invokevirtual #25
472: aload         21
474: invokevirtual #25
477: ldc           #219
479: invokevirtual #25
482: invokevirtual #28
485: aload         21
487: ldc           #61
489: invokestatic  #154
492: aload         22
494: invokestatic  #53
497: new           #22
500: dup
501: invokespecial #23
504: ldc           #24
506: invokevirtual #25
509: iload         24
511: invokevirtual #69
514: ldc           #27
516: invokevirtual #25
519: iconst_0
520: invokevirtual #69
523: ldc           #24
525: invokevirtual #25
528: invokevirtual #28
531: iload         24
533: ifne          540
536: iconst_1
537: goto          541
540: iconst_0
541: invokestatic  #29
544: new           #22
547: dup
548: invokespecial #23
551: ldc           #24
553: invokevirtual #25
556: iload         25
558: invokevirtual #69
561: ldc           #27
563: invokevirtual #25
566: iconst_0
567: invokevirtual #69
570: ldc           #24
572: invokevirtual #25
575: invokevirtual #28
578: iload         25
580: ifne          587
583: iconst_1
584: goto          588
587: iconst_0
588: invokestatic  #29
591: new           #22
594: dup
595: invokespecial #23
598: ldc           #24
600: invokevirtual #25
603: aload         26
605: invokevirtual #25
608: ldc           #219
610: invokevirtual #25
613: invokevirtual #28
616: aload         26
618: ldc           #61
620: invokestatic  #154
623: new           #22
626: dup
627: invokespecial #23
630: ldc           #24
632: invokevirtual #25
635: iload         27
637: invokevirtual #69
640: ldc           #27
642: invokevirtual #25
645: iconst_1
646: invokevirtual #69
649: ldc           #24
651: invokevirtual #25
654: invokevirtual #28
657: iload         27
659: iconst_1
660: if_icmpne     667
663: iconst_1
664: goto          668
667: iconst_0
668: invokestatic  #29
671: return
Exception table:
from    to  target type
278   295   298   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test081
Start line: 2846
End line: 0
Method source code: 
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        java.io.File file11 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry13 = tarArchiveOutputStream4.createArchiveEntry(file11, "ustar ");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #382
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: aconst_null
79: astore        9
81: aload_3
82: aload         9
84: ldc_w         #383
87: invokevirtual #86
90: astore        10
92: ldc           #51
94: invokestatic  #20
97: goto          102
100: astore        10
102: new           #22
105: dup
106: invokespecial #23
109: ldc           #24
111: invokevirtual #25
114: lload         4
116: invokevirtual #26
119: ldc           #27
121: invokevirtual #25
124: lconst_0
125: invokevirtual #26
128: ldc           #24
130: invokevirtual #25
133: invokevirtual #28
136: lload         4
138: lconst_0
139: lcmp
140: ifne          147
143: iconst_1
144: goto          148
147: iconst_0
148: invokestatic  #29
151: aload         6
153: invokestatic  #53
156: new           #22
159: dup
160: invokespecial #23
163: ldc           #24
165: invokevirtual #25
168: iload         7
170: invokevirtual #41
173: ldc           #27
175: invokevirtual #25
178: iconst_0
179: invokevirtual #41
182: ldc           #24
184: invokevirtual #25
187: invokevirtual #28
190: iload         7
192: ifne          199
195: iconst_1
196: goto          200
199: iconst_0
200: invokestatic  #29
203: new           #22
206: dup
207: invokespecial #23
210: ldc           #24
212: invokevirtual #25
215: iload         8
217: invokevirtual #41
220: ldc           #27
222: invokevirtual #25
225: iconst_0
226: invokevirtual #41
229: ldc           #24
231: invokevirtual #25
234: invokevirtual #28
237: iload         8
239: ifne          246
242: iconst_1
243: goto          247
246: iconst_0
247: invokestatic  #29
250: return
Exception table:
from    to  target type
81    97   100   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test082
Start line: 2872
End line: 0
Method source code: 
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        int int16 = zipArchiveOutputStream13.getCount();
        zipArchiveOutputStream13.count((long) (byte) 54);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13, 36864, (int) (short) 1, "cpio");
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream23 = archiveStreamFactory0.createArchiveOutputStream("-       3 jar", (java.io.OutputStream) zipArchiveOutputStream13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: -       3 jar not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #384
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #309
108: istore        11
110: aload         9
112: ldc2_w        #385
115: invokevirtual #387
118: new           #43
121: dup
122: aload         9
124: ldc_w         #373
127: iconst_1
128: ldc_w         #273
131: invokespecial #388
134: astore        12
136: aload_1
137: ldc           #102
139: aload         9
141: invokevirtual #49
144: astore        13
146: ldc           #103
148: invokestatic  #20
151: goto          156
154: astore        13
156: new           #22
159: dup
160: invokespecial #23
163: ldc           #24
165: invokevirtual #25
168: lload         4
170: invokevirtual #26
173: ldc           #27
175: invokevirtual #25
178: lconst_0
179: invokevirtual #26
182: ldc           #24
184: invokevirtual #25
187: invokevirtual #28
190: lload         4
192: lconst_0
193: lcmp
194: ifne          201
197: iconst_1
198: goto          202
201: iconst_0
202: invokestatic  #29
205: aload         6
207: invokestatic  #53
210: new           #22
213: dup
214: invokespecial #23
217: ldc           #24
219: invokevirtual #25
222: iload         11
224: invokevirtual #41
227: ldc           #27
229: invokevirtual #25
232: iconst_0
233: invokevirtual #41
236: ldc           #24
238: invokevirtual #25
241: invokevirtual #28
244: iload         11
246: ifne          253
249: iconst_1
250: goto          254
253: iconst_0
254: invokestatic  #29
257: return
Exception table:
from    to  target type
136   151   154   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test083
Start line: 2902
End line: 0
Method source code: 
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        try {
            jarArchiveOutputStream11.setLevel(155);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid compression level: 155");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #389
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: aload         9
94: sipush        155
97: invokevirtual #390
100: ldc_w         #391
103: invokestatic  #20
106: goto          111
109: astore        10
111: new           #22
114: dup
115: invokespecial #23
118: ldc           #24
120: invokevirtual #25
123: lload         4
125: invokevirtual #26
128: ldc           #27
130: invokevirtual #25
133: lconst_0
134: invokevirtual #26
137: ldc           #24
139: invokevirtual #25
142: invokevirtual #28
145: lload         4
147: lconst_0
148: lcmp
149: ifne          156
152: iconst_1
153: goto          157
156: iconst_0
157: invokestatic  #29
160: aload         6
162: invokestatic  #53
165: new           #22
168: dup
169: invokespecial #23
172: ldc           #24
174: invokevirtual #25
177: iload         7
179: invokevirtual #41
182: ldc           #27
184: invokevirtual #25
187: iconst_0
188: invokevirtual #41
191: ldc           #24
193: invokevirtual #25
196: invokevirtual #28
199: iload         7
201: ifne          208
204: iconst_1
205: goto          209
208: iconst_0
209: invokestatic  #29
212: return
Exception table:
from    to  target type
92   106   109   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test084
Start line: 2927
End line: 0
Method source code: 
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        java.io.OutputStream outputStream13 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream13, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream13);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy17 = null;
        zipArchiveOutputStream16.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy17);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream19 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream16);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream20 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream19);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry22 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("encryption");
        boolean boolean23 = tarArchiveEntry22.isLink();
        java.io.File file24 = tarArchiveEntry22.getFile();
        tarArchiveOutputStream19.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry22);
        try {
            jarArchiveOutputStream11.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry22);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(file24);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #392
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: aconst_null
104: astore        11
106: new           #43
109: dup
110: aload         11
112: ldc           #44
114: invokespecial #45
117: astore        12
119: new           #182
122: dup
123: aload         11
125: invokespecial #183
128: astore        13
130: aconst_null
131: astore        14
133: aload         13
135: aload         14
137: invokevirtual #184
140: new           #43
143: dup
144: aload         13
146: invokespecial #95
149: astore        15
151: new           #182
154: dup
155: aload         15
157: invokespecial #183
160: astore        16
162: new           #112
165: dup
166: ldc_w         #393
169: invokespecial #120
172: astore        17
174: aload         17
176: invokevirtual #394
179: istore        18
181: aload         17
183: invokevirtual #395
186: astore        19
188: aload         15
190: aload         17
192: invokevirtual #136
195: aload         9
197: aload         17
199: invokevirtual #396
202: ldc_w         #397
205: invokestatic  #20
208: goto          213
211: astore        20
213: new           #22
216: dup
217: invokespecial #23
220: ldc           #24
222: invokevirtual #25
225: lload         4
227: invokevirtual #26
230: ldc           #27
232: invokevirtual #25
235: lconst_0
236: invokevirtual #26
239: ldc           #24
241: invokevirtual #25
244: invokevirtual #28
247: lload         4
249: lconst_0
250: lcmp
251: ifne          258
254: iconst_1
255: goto          259
258: iconst_0
259: invokestatic  #29
262: aload         6
264: invokestatic  #53
267: new           #22
270: dup
271: invokespecial #23
274: ldc           #24
276: invokevirtual #25
279: iload         7
281: invokevirtual #41
284: ldc           #27
286: invokevirtual #25
289: iconst_0
290: invokevirtual #41
293: ldc           #24
295: invokevirtual #25
298: invokevirtual #28
301: iload         7
303: ifne          310
306: iconst_1
307: goto          311
310: iconst_0
311: invokestatic  #29
314: new           #22
317: dup
318: invokespecial #23
321: ldc           #24
323: invokevirtual #25
326: iload         18
328: invokevirtual #69
331: ldc           #27
333: invokevirtual #25
336: iconst_0
337: invokevirtual #69
340: ldc           #24
342: invokevirtual #25
345: invokevirtual #28
348: iload         18
350: ifne          357
353: iconst_1
354: goto          358
357: iconst_0
358: invokestatic  #29
361: aload         19
363: invokestatic  #168
366: return
Exception table:
from    to  target type
195   208   211   Class java/lang/ClassCastException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test085
Start line: 2966
End line: 0
Method source code: 
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(4);
        java.io.File file13 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry15 = arArchiveOutputStream10.createArchiveEntry(file13, "x5S");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #398
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: iconst_4
85: invokevirtual #399
88: aconst_null
89: astore        10
91: aload         9
93: aload         10
95: ldc           #153
97: invokevirtual #400
100: astore        11
102: ldc           #51
104: invokestatic  #20
107: goto          112
110: astore        11
112: new           #22
115: dup
116: invokespecial #23
119: ldc           #24
121: invokevirtual #25
124: lload         4
126: invokevirtual #26
129: ldc           #27
131: invokevirtual #25
134: lconst_0
135: invokevirtual #26
138: ldc           #24
140: invokevirtual #25
143: invokevirtual #28
146: lload         4
148: lconst_0
149: lcmp
150: ifne          157
153: iconst_1
154: goto          158
157: iconst_0
158: invokestatic  #29
161: aload         6
163: invokestatic  #53
166: new           #22
169: dup
170: invokespecial #23
173: ldc           #24
175: invokevirtual #25
178: lload         7
180: invokevirtual #26
183: ldc           #27
185: invokevirtual #25
188: lconst_0
189: invokevirtual #26
192: ldc           #24
194: invokevirtual #25
197: invokevirtual #28
200: lload         7
202: lconst_0
203: lcmp
204: ifne          211
207: iconst_1
208: goto          212
211: iconst_0
212: invokestatic  #29
215: return
Exception table:
from    to  target type
91   107   110   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test086
Start line: 2992
End line: 0
Method source code: 
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream11 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        byte[] byteArray12 = null;
        try {
            arArchiveOutputStream11.write(byteArray12, 8, (int) (byte) 120);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '120' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #401
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #240
85: dup
86: aload_3
87: invokespecial #241
90: astore        9
92: aconst_null
93: astore        10
95: aload         9
97: aload         10
99: bipush        8
101: bipush        120
103: invokevirtual #402
106: ldc_w         #403
109: invokestatic  #20
112: goto          117
115: astore        11
117: new           #22
120: dup
121: invokespecial #23
124: ldc           #24
126: invokevirtual #25
129: lload         4
131: invokevirtual #26
134: ldc           #27
136: invokevirtual #25
139: lconst_0
140: invokevirtual #26
143: ldc           #24
145: invokevirtual #25
148: invokevirtual #28
151: lload         4
153: lconst_0
154: lcmp
155: ifne          162
158: iconst_1
159: goto          163
162: iconst_0
163: invokestatic  #29
166: aload         6
168: invokestatic  #53
171: new           #22
174: dup
175: invokespecial #23
178: ldc           #24
180: invokevirtual #25
183: iload         7
185: invokevirtual #41
188: ldc           #27
190: invokevirtual #25
193: iconst_0
194: invokevirtual #41
197: ldc           #24
199: invokevirtual #25
202: invokevirtual #28
205: iload         7
207: ifne          214
210: iconst_1
211: goto          215
214: iconst_0
215: invokestatic  #29
218: return
Exception table:
from    to  target type
95   112   115   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test087
Start line: 3018
End line: 0
Method source code: 
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true);
        long long11 = tarArchiveOutputStream4.getBytesWritten();
        tarArchiveOutputStream4.setLongFileMode(2048);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #404
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: iconst_1
68: invokevirtual #148
71: aload_3
72: invokevirtual #47
75: lstore        7
77: aload_3
78: sipush        2048
81: invokevirtual #195
84: new           #22
87: dup
88: invokespecial #23
91: ldc           #24
93: invokevirtual #25
96: lload         4
98: invokevirtual #26
101: ldc           #27
103: invokevirtual #25
106: lconst_0
107: invokevirtual #26
110: ldc           #24
112: invokevirtual #25
115: invokevirtual #28
118: lload         4
120: lconst_0
121: lcmp
122: ifne          129
125: iconst_1
126: goto          130
129: iconst_0
130: invokestatic  #29
133: aload         6
135: invokestatic  #53
138: new           #22
141: dup
142: invokespecial #23
145: ldc           #24
147: invokevirtual #25
150: lload         7
152: invokevirtual #26
155: ldc           #27
157: invokevirtual #25
160: lconst_0
161: invokevirtual #26
164: ldc           #24
166: invokevirtual #25
169: invokevirtual #28
172: lload         7
174: lconst_0
175: lcmp
176: ifne          183
179: iconst_1
180: goto          184
183: iconst_0
184: invokestatic  #29
187: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test088
Start line: 3036
End line: 0
Method source code: 
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        tarArchiveEntry1.setDevMajor((int) (short) 10);
        long long15 = tarArchiveEntry1.getRealSize();
        tarArchiveEntry1.setSize((long) 2048);
        long long18 = tarArchiveEntry1.getRealSize();
        byte[] byteArray23 = new byte[] { (byte) 120, (byte) 53, (byte) 83 };
        boolean boolean26 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("", byteArray23, (int) (byte) 100, 0);
        long long27 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray23);
        byte[] byteArray32 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean33 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray32);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong34 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray32);
        byte[] byteArray35 = zipLong34.getBytes();
        java.io.InputStream inputStream36 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream37 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream36);
        long long38 = jarArchiveInputStream37.getBytesRead();
        long long39 = jarArchiveInputStream37.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream40 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream37);
        arArchiveInputStream40.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream42 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream40);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong44 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray45 = zipLong44.getBytes();
        long long46 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray45);
        int int49 = tarArchiveInputStream42.read(byteArray45, 0, (int) (short) 0);
        boolean boolean50 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray45);
        long long51 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray45);
        long long52 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray45);
        boolean boolean54 = org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byteArray45, (int) (byte) 100);
        boolean boolean55 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray35, byteArray45);
        boolean boolean56 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray23, byteArray35);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding58 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("jar");
        try {
            tarArchiveEntry1.writeEntryHeader(byteArray23, zipEncoding58, true);
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar");
        } catch (java.io.UnsupportedEncodingException e) {
        }
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[120, 53, 83]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 256L + "'", long27 == 256L);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(zipEncoding58);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #405
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: bipush        10
97: invokevirtual #287
100: aload_1
101: invokevirtual #327
104: lstore        11
106: aload_1
107: ldc2_w        #328
110: invokevirtual #330
113: aload_1
114: invokevirtual #327
117: lstore        13
119: iconst_3
120: newarray       byte
122: dup
123: iconst_0
124: bipush        120
126: bastore
127: dup
128: iconst_1
129: bipush        53
131: bastore
132: dup
133: iconst_2
134: bipush        83
136: bastore
137: astore        15
139: ldc           #61
141: aload         15
143: bipush        100
145: iconst_0
146: invokestatic  #62
149: istore        16
151: aload         15
153: invokestatic  #260
156: lstore        17
158: iconst_4
159: newarray       byte
161: dup
162: iconst_0
163: bipush        54
165: bastore
166: dup
167: iconst_1
168: bipush        53
170: bastore
171: dup
172: iconst_2
173: iconst_1
174: bastore
175: dup
176: iconst_3
177: bipush        10
179: bastore
180: astore        19
182: aload         19
184: invokestatic  #192
187: istore        20
189: new           #73
192: dup
193: aload         19
195: invokespecial #406
198: astore        21
200: aload         21
202: invokevirtual #75
205: astore        22
207: aconst_null
208: astore        23
210: new           #10
213: dup
214: aload         23
216: invokespecial #11
219: astore        24
221: aload         24
223: invokevirtual #12
226: lstore        25
228: aload         24
230: invokevirtual #12
233: lstore        27
235: new           #13
238: dup
239: aload         24
241: invokespecial #14
244: astore        29
246: aload         29
248: invokevirtual #140
251: new           #31
254: dup
255: aload         29
257: invokespecial #32
260: astore        30
262: new           #73
265: dup
266: lconst_0
267: invokespecial #74
270: astore        31
272: aload         31
274: invokevirtual #75
277: astore        32
279: aload         32
281: invokestatic  #209
284: lstore        33
286: aload         30
288: aload         32
290: iconst_0
291: iconst_0
292: invokevirtual #174
295: istore        35
297: aload         32
299: invokestatic  #192
302: istore        36
304: aload         32
306: invokestatic  #209
309: lstore        37
311: aload         32
313: invokestatic  #209
316: lstore        39
318: aload         32
320: bipush        100
322: invokestatic  #149
325: istore        41
327: aload         22
329: aload         32
331: invokestatic  #407
334: istore        42
336: aload         15
338: aload         22
340: invokestatic  #407
343: istore        43
345: ldc           #44
347: invokestatic  #211
350: astore        44
352: aload_1
353: aload         15
355: aload         44
357: iconst_1
358: invokevirtual #408
361: ldc           #137
363: invokestatic  #20
366: goto          371
369: astore        45
371: new           #22
374: dup
375: invokespecial #23
378: ldc           #24
380: invokevirtual #25
383: lload         5
385: invokevirtual #26
388: ldc           #27
390: invokevirtual #25
393: lconst_0
394: invokevirtual #26
397: ldc           #24
399: invokevirtual #25
402: invokevirtual #28
405: lload         5
407: lconst_0
408: lcmp
409: ifne          416
412: iconst_1
413: goto          417
416: iconst_0
417: invokestatic  #29
420: aload         7
422: invokestatic  #53
425: new           #22
428: dup
429: invokespecial #23
432: ldc           #24
434: invokevirtual #25
437: iload         8
439: invokevirtual #69
442: ldc           #27
444: invokevirtual #25
447: iconst_0
448: invokevirtual #69
451: ldc           #24
453: invokevirtual #25
456: invokevirtual #28
459: iload         8
461: ifne          468
464: iconst_1
465: goto          469
468: iconst_0
469: invokestatic  #29
472: new           #22
475: dup
476: invokespecial #23
479: ldc           #24
481: invokevirtual #25
484: lload         9
486: invokevirtual #26
489: ldc           #27
491: invokevirtual #25
494: lconst_0
495: invokevirtual #26
498: ldc           #24
500: invokevirtual #25
503: invokevirtual #28
506: lload         9
508: lconst_0
509: lcmp
510: ifne          517
513: iconst_1
514: goto          518
517: iconst_0
518: invokestatic  #29
521: new           #22
524: dup
525: invokespecial #23
528: ldc           #24
530: invokevirtual #25
533: lload         11
535: invokevirtual #26
538: ldc           #27
540: invokevirtual #25
543: lconst_0
544: invokevirtual #26
547: ldc           #24
549: invokevirtual #25
552: invokevirtual #28
555: lload         11
557: lconst_0
558: lcmp
559: ifne          566
562: iconst_1
563: goto          567
566: iconst_0
567: invokestatic  #29
570: new           #22
573: dup
574: invokespecial #23
577: ldc           #24
579: invokevirtual #25
582: lload         13
584: invokevirtual #26
587: ldc           #27
589: invokevirtual #25
592: lconst_0
593: invokevirtual #26
596: ldc           #24
598: invokevirtual #25
601: invokevirtual #28
604: lload         13
606: lconst_0
607: lcmp
608: ifne          615
611: iconst_1
612: goto          616
615: iconst_0
616: invokestatic  #29
619: aload         15
621: invokestatic  #53
624: aload         15
626: invokestatic  #66
629: ldc           #67
631: invokestatic  #68
634: new           #22
637: dup
638: invokespecial #23
641: ldc           #24
643: invokevirtual #25
646: iload         16
648: invokevirtual #69
651: ldc           #27
653: invokevirtual #25
656: iconst_1
657: invokevirtual #69
660: ldc           #24
662: invokevirtual #25
665: invokevirtual #28
668: iload         16
670: iconst_1
671: if_icmpne     678
674: iconst_1
675: goto          679
678: iconst_0
679: invokestatic  #29
682: new           #22
685: dup
686: invokespecial #23
689: ldc           #24
691: invokevirtual #25
694: lload         17
696: invokevirtual #26
699: ldc           #27
701: invokevirtual #25
704: ldc2_w        #268
707: invokevirtual #26
710: ldc           #24
712: invokevirtual #25
715: invokevirtual #28
718: lload         17
720: ldc2_w        #268
723: lcmp
724: ifne          731
727: iconst_1
728: goto          732
731: iconst_0
732: invokestatic  #29
735: aload         19
737: invokestatic  #53
740: aload         19
742: invokestatic  #66
745: ldc_w         #409
748: invokestatic  #68
751: new           #22
754: dup
755: invokespecial #23
758: ldc           #24
760: invokevirtual #25
763: iload         20
765: invokevirtual #69
768: ldc           #27
770: invokevirtual #25
773: iconst_0
774: invokevirtual #69
777: ldc           #24
779: invokevirtual #25
782: invokevirtual #28
785: iload         20
787: ifne          794
790: iconst_1
791: goto          795
794: iconst_0
795: invokestatic  #29
798: aload         22
800: invokestatic  #53
803: aload         22
805: invokestatic  #66
808: ldc_w         #409
811: invokestatic  #68
814: new           #22
817: dup
818: invokespecial #23
821: ldc           #24
823: invokevirtual #25
826: lload         25
828: invokevirtual #26
831: ldc           #27
833: invokevirtual #25
836: lconst_0
837: invokevirtual #26
840: ldc           #24
842: invokevirtual #25
845: invokevirtual #28
848: lload         25
850: lconst_0
851: lcmp
852: ifne          859
855: iconst_1
856: goto          860
859: iconst_0
860: invokestatic  #29
863: new           #22
866: dup
867: invokespecial #23
870: ldc           #24
872: invokevirtual #25
875: lload         27
877: invokevirtual #26
880: ldc           #27
882: invokevirtual #25
885: lconst_0
886: invokevirtual #26
889: ldc           #24
891: invokevirtual #25
894: invokevirtual #28
897: lload         27
899: lconst_0
900: lcmp
901: ifne          908
904: iconst_1
905: goto          909
908: iconst_0
909: invokestatic  #29
912: aload         32
914: invokestatic  #53
917: aload         32
919: invokestatic  #66
922: ldc           #77
924: invokestatic  #68
927: new           #22
930: dup
931: invokespecial #23
934: ldc           #24
936: invokevirtual #25
939: lload         33
941: invokevirtual #26
944: ldc           #27
946: invokevirtual #25
949: lconst_0
950: invokevirtual #26
953: ldc           #24
955: invokevirtual #25
958: invokevirtual #28
961: lload         33
963: lconst_0
964: lcmp
965: ifne          972
968: iconst_1
969: goto          973
972: iconst_0
973: invokestatic  #29
976: new           #22
979: dup
980: invokespecial #23
983: ldc           #24
985: invokevirtual #25
988: iload         35
990: invokevirtual #41
993: ldc           #27
995: invokevirtual #25
998: iconst_m1
999: invokevirtual #41
1002: ldc           #24
1004: invokevirtual #25
1007: invokevirtual #28
1010: iload         35
1012: iconst_m1
1013: if_icmpne     1020
1016: iconst_1
1017: goto          1021
1020: iconst_0
1021: invokestatic  #29
1024: new           #22
1027: dup
1028: invokespecial #23
1031: ldc           #24
1033: invokevirtual #25
1036: iload         36
1038: invokevirtual #69
1041: ldc           #27
1043: invokevirtual #25
1046: iconst_1
1047: invokevirtual #69
1050: ldc           #24
1052: invokevirtual #25
1055: invokevirtual #28
1058: iload         36
1060: iconst_1
1061: if_icmpne     1068
1064: iconst_1
1065: goto          1069
1068: iconst_0
1069: invokestatic  #29
1072: new           #22
1075: dup
1076: invokespecial #23
1079: ldc           #24
1081: invokevirtual #25
1084: lload         37
1086: invokevirtual #26
1089: ldc           #27
1091: invokevirtual #25
1094: lconst_0
1095: invokevirtual #26
1098: ldc           #24
1100: invokevirtual #25
1103: invokevirtual #28
1106: lload         37
1108: lconst_0
1109: lcmp
1110: ifne          1117
1113: iconst_1
1114: goto          1118
1117: iconst_0
1118: invokestatic  #29
1121: new           #22
1124: dup
1125: invokespecial #23
1128: ldc           #24
1130: invokevirtual #25
1133: lload         39
1135: invokevirtual #26
1138: ldc           #27
1140: invokevirtual #25
1143: lconst_0
1144: invokevirtual #26
1147: ldc           #24
1149: invokevirtual #25
1152: invokevirtual #28
1155: lload         39
1157: lconst_0
1158: lcmp
1159: ifne          1166
1162: iconst_1
1163: goto          1167
1166: iconst_0
1167: invokestatic  #29
1170: new           #22
1173: dup
1174: invokespecial #23
1177: ldc           #24
1179: invokevirtual #25
1182: iload         41
1184: invokevirtual #69
1187: ldc           #27
1189: invokevirtual #25
1192: iconst_0
1193: invokevirtual #69
1196: ldc           #24
1198: invokevirtual #25
1201: invokevirtual #28
1204: iload         41
1206: ifne          1213
1209: iconst_1
1210: goto          1214
1213: iconst_0
1214: invokestatic  #29
1217: new           #22
1220: dup
1221: invokespecial #23
1224: ldc           #24
1226: invokevirtual #25
1229: iload         42
1231: invokevirtual #69
1234: ldc           #27
1236: invokevirtual #25
1239: iconst_0
1240: invokevirtual #69
1243: ldc           #24
1245: invokevirtual #25
1248: invokevirtual #28
1251: iload         42
1253: ifne          1260
1256: iconst_1
1257: goto          1261
1260: iconst_0
1261: invokestatic  #29
1264: new           #22
1267: dup
1268: invokespecial #23
1271: ldc           #24
1273: invokevirtual #25
1276: iload         43
1278: invokevirtual #69
1281: ldc           #27
1283: invokevirtual #25
1286: iconst_0
1287: invokevirtual #69
1290: ldc           #24
1292: invokevirtual #25
1295: invokevirtual #28
1298: iload         43
1300: ifne          1307
1303: iconst_1
1304: goto          1308
1307: iconst_0
1308: invokestatic  #29
1311: aload         44
1313: invokestatic  #53
1316: return
Exception table:
from    to  target type
352   366   369   Class java/io/UnsupportedEncodingException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test089
Start line: 3115
End line: 0
Method source code: 
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(83);
        arArchiveOutputStream10.setLongFileMode(6);
        java.io.File file15 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry17 = arArchiveOutputStream10.createArchiveEntry(file15, "org.apache.commons.compress.archivers.zip.Zip64RequiredException: -    8192 jar");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #410
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: bipush        83
86: invokevirtual #399
89: aload         9
91: bipush        6
93: invokevirtual #399
96: aconst_null
97: astore        10
99: aload         9
101: aload         10
103: ldc_w         #411
106: invokevirtual #400
109: astore        11
111: ldc           #51
113: invokestatic  #20
116: goto          121
119: astore        11
121: new           #22
124: dup
125: invokespecial #23
128: ldc           #24
130: invokevirtual #25
133: lload         4
135: invokevirtual #26
138: ldc           #27
140: invokevirtual #25
143: lconst_0
144: invokevirtual #26
147: ldc           #24
149: invokevirtual #25
152: invokevirtual #28
155: lload         4
157: lconst_0
158: lcmp
159: ifne          166
162: iconst_1
163: goto          167
166: iconst_0
167: invokestatic  #29
170: aload         6
172: invokestatic  #53
175: new           #22
178: dup
179: invokespecial #23
182: ldc           #24
184: invokevirtual #25
187: lload         7
189: invokevirtual #26
192: ldc           #27
194: invokevirtual #25
197: lconst_0
198: invokevirtual #26
201: ldc           #24
203: invokevirtual #25
206: invokevirtual #28
209: lload         7
211: lconst_0
212: lcmp
213: ifne          220
216: iconst_1
217: goto          221
220: iconst_0
221: invokestatic  #29
224: return
Exception table:
from    to  target type
99   116   119   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test090
Start line: 3142
End line: 0
Method source code: 
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        zipArchiveOutputStream9.setMethod(4);
        try {
            zipArchiveOutputStream9.finish();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '4' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #412
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: aload         7
79: iconst_4
80: invokevirtual #339
83: aload         7
85: invokevirtual #413
88: ldc_w         #414
91: invokestatic  #20
94: goto          99
97: astore        8
99: new           #22
102: dup
103: invokespecial #23
106: ldc           #24
108: invokevirtual #25
111: lload         4
113: invokevirtual #26
116: ldc           #27
118: invokevirtual #25
121: lconst_0
122: invokevirtual #26
125: ldc           #24
127: invokevirtual #25
130: invokevirtual #28
133: lload         4
135: lconst_0
136: lcmp
137: ifne          144
140: iconst_1
141: goto          145
144: iconst_0
145: invokestatic  #29
148: aload         6
150: invokestatic  #53
153: return
Exception table:
from    to  target type
83    94    97   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test091
Start line: 3165
End line: 0
Method source code: 
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        try {
            jarArchiveOutputStream11.setLevel(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid compression level: 12");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #415
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: aload         9
105: bipush        12
107: invokevirtual #390
110: ldc_w         #416
113: invokestatic  #20
116: goto          121
119: astore        11
121: new           #22
124: dup
125: invokespecial #23
128: ldc           #24
130: invokevirtual #25
133: lload         4
135: invokevirtual #26
138: ldc           #27
140: invokevirtual #25
143: lconst_0
144: invokevirtual #26
147: ldc           #24
149: invokevirtual #25
152: invokevirtual #28
155: lload         4
157: lconst_0
158: lcmp
159: ifne          166
162: iconst_1
163: goto          167
166: iconst_0
167: invokestatic  #29
170: aload         6
172: invokestatic  #53
175: new           #22
178: dup
179: invokespecial #23
182: ldc           #24
184: invokevirtual #25
187: iload         7
189: invokevirtual #41
192: ldc           #27
194: invokevirtual #25
197: iconst_0
198: invokevirtual #41
201: ldc           #24
203: invokevirtual #25
206: invokevirtual #28
209: iload         7
211: ifne          218
214: iconst_1
215: goto          219
218: iconst_0
219: invokestatic  #29
222: return
Exception table:
from    to  target type
103   116   119   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test092
Start line: 3191
End line: 0
Method source code: 
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory26 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream28 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream30 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream28, "jar");
        tarArchiveOutputStream30.count(0L);
        long long33 = tarArchiveOutputStream30.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream34 = archiveStreamFactory26.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream30);
        java.io.InputStream inputStream36 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream37 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream36);
        long long38 = jarArchiveInputStream37.getBytesRead();
        long long39 = jarArchiveInputStream37.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream40 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream37);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream41 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream40);
        arArchiveInputStream41.close();
        arArchiveInputStream41.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream44 = archiveStreamFactory26.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream41);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream45 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) archiveInputStream44);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream46 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) cpioArchiveInputStream45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream44);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #417
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: new           #8
197: dup
198: invokespecial #9
201: astore        24
203: aconst_null
204: astore        25
206: new           #43
209: dup
210: aload         25
212: ldc           #44
214: invokespecial #45
217: astore        26
219: aload         26
221: lconst_0
222: invokevirtual #46
225: aload         26
227: invokevirtual #47
230: lstore        27
232: aload         24
234: ldc           #48
236: aload         26
238: invokevirtual #49
241: astore        29
243: aconst_null
244: astore        30
246: new           #10
249: dup
250: aload         30
252: invokespecial #11
255: astore        31
257: aload         31
259: invokevirtual #12
262: lstore        32
264: aload         31
266: invokevirtual #12
269: lstore        34
271: new           #13
274: dup
275: aload         31
277: invokespecial #14
280: astore        36
282: new           #13
285: dup
286: aload         36
288: invokespecial #14
291: astore        37
293: aload         37
295: invokevirtual #140
298: aload         37
300: invokevirtual #140
303: aload         24
305: ldc           #164
307: aload         37
309: invokevirtual #38
312: astore        38
314: new           #33
317: dup
318: aload         38
320: invokespecial #34
323: astore        39
325: aload_1
326: aload         39
328: invokevirtual #18
331: astore        40
333: ldc           #19
335: invokestatic  #20
338: goto          343
341: astore        40
343: new           #22
346: dup
347: invokespecial #23
350: ldc           #24
352: invokevirtual #25
355: lload         4
357: invokevirtual #26
360: ldc           #27
362: invokevirtual #25
365: lconst_0
366: invokevirtual #26
369: ldc           #24
371: invokevirtual #25
374: invokevirtual #28
377: lload         4
379: lconst_0
380: lcmp
381: ifne          388
384: iconst_1
385: goto          389
388: iconst_0
389: invokestatic  #29
392: new           #22
395: dup
396: invokespecial #23
399: ldc           #24
401: invokevirtual #25
404: lload         6
406: invokevirtual #26
409: ldc           #27
411: invokevirtual #25
414: lconst_0
415: invokevirtual #26
418: ldc           #24
420: invokevirtual #25
423: invokevirtual #28
426: lload         6
428: lconst_0
429: lcmp
430: ifne          437
433: iconst_1
434: goto          438
437: iconst_0
438: invokestatic  #29
441: aload         10
443: invokestatic  #168
446: aload         11
448: invokestatic  #168
451: aload         13
453: invokestatic  #53
456: new           #22
459: dup
460: invokespecial #23
463: ldc           #24
465: invokevirtual #25
468: lload         16
470: invokevirtual #26
473: ldc           #27
475: invokevirtual #25
478: lconst_0
479: invokevirtual #26
482: ldc           #24
484: invokevirtual #25
487: invokevirtual #28
490: lload         16
492: lconst_0
493: lcmp
494: ifne          501
497: iconst_1
498: goto          502
501: iconst_0
502: invokestatic  #29
505: new           #22
508: dup
509: invokespecial #23
512: ldc           #24
514: invokevirtual #25
517: lload         18
519: invokevirtual #26
522: ldc           #27
524: invokevirtual #25
527: lconst_0
528: invokevirtual #26
531: ldc           #24
533: invokevirtual #25
536: invokevirtual #28
539: lload         18
541: lconst_0
542: lcmp
543: ifne          550
546: iconst_1
547: goto          551
550: iconst_0
551: invokestatic  #29
554: aload         21
556: invokestatic  #168
559: aload         23
561: invokestatic  #53
564: new           #22
567: dup
568: invokespecial #23
571: ldc           #24
573: invokevirtual #25
576: lload         27
578: invokevirtual #26
581: ldc           #27
583: invokevirtual #25
586: lconst_0
587: invokevirtual #26
590: ldc           #24
592: invokevirtual #25
595: invokevirtual #28
598: lload         27
600: lconst_0
601: lcmp
602: ifne          609
605: iconst_1
606: goto          610
609: iconst_0
610: invokestatic  #29
613: aload         29
615: invokestatic  #53
618: new           #22
621: dup
622: invokespecial #23
625: ldc           #24
627: invokevirtual #25
630: lload         32
632: invokevirtual #26
635: ldc           #27
637: invokevirtual #25
640: lconst_0
641: invokevirtual #26
644: ldc           #24
646: invokevirtual #25
649: invokevirtual #28
652: lload         32
654: lconst_0
655: lcmp
656: ifne          663
659: iconst_1
660: goto          664
663: iconst_0
664: invokestatic  #29
667: new           #22
670: dup
671: invokespecial #23
674: ldc           #24
676: invokevirtual #25
679: lload         34
681: invokevirtual #26
684: ldc           #27
686: invokevirtual #25
689: lconst_0
690: invokevirtual #26
693: ldc           #24
695: invokevirtual #25
698: invokevirtual #28
701: lload         34
703: lconst_0
704: lcmp
705: ifne          712
708: iconst_1
709: goto          713
712: iconst_0
713: invokestatic  #29
716: aload         38
718: invokestatic  #53
721: return
Exception table:
from    to  target type
325   338   341   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test093
Start line: 3255
End line: 0
Method source code: 
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        tarArchiveEntry1.setDevMajor((int) (short) 10);
        long long15 = tarArchiveEntry1.getRealSize();
        int int16 = tarArchiveEntry1.getMode();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 33188 + "'", int16 == 33188);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #418
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: bipush        10
97: invokevirtual #287
100: aload_1
101: invokevirtual #327
104: lstore        11
106: aload_1
107: invokevirtual #419
110: istore        13
112: new           #22
115: dup
116: invokespecial #23
119: ldc           #24
121: invokevirtual #25
124: lload         5
126: invokevirtual #26
129: ldc           #27
131: invokevirtual #25
134: lconst_0
135: invokevirtual #26
138: ldc           #24
140: invokevirtual #25
143: invokevirtual #28
146: lload         5
148: lconst_0
149: lcmp
150: ifne          157
153: iconst_1
154: goto          158
157: iconst_0
158: invokestatic  #29
161: aload         7
163: invokestatic  #53
166: new           #22
169: dup
170: invokespecial #23
173: ldc           #24
175: invokevirtual #25
178: iload         8
180: invokevirtual #69
183: ldc           #27
185: invokevirtual #25
188: iconst_0
189: invokevirtual #69
192: ldc           #24
194: invokevirtual #25
197: invokevirtual #28
200: iload         8
202: ifne          209
205: iconst_1
206: goto          210
209: iconst_0
210: invokestatic  #29
213: new           #22
216: dup
217: invokespecial #23
220: ldc           #24
222: invokevirtual #25
225: lload         9
227: invokevirtual #26
230: ldc           #27
232: invokevirtual #25
235: lconst_0
236: invokevirtual #26
239: ldc           #24
241: invokevirtual #25
244: invokevirtual #28
247: lload         9
249: lconst_0
250: lcmp
251: ifne          258
254: iconst_1
255: goto          259
258: iconst_0
259: invokestatic  #29
262: new           #22
265: dup
266: invokespecial #23
269: ldc           #24
271: invokevirtual #25
274: lload         11
276: invokevirtual #26
279: ldc           #27
281: invokevirtual #25
284: lconst_0
285: invokevirtual #26
288: ldc           #24
290: invokevirtual #25
293: invokevirtual #28
296: lload         11
298: lconst_0
299: lcmp
300: ifne          307
303: iconst_1
304: goto          308
307: iconst_0
308: invokestatic  #29
311: new           #22
314: dup
315: invokespecial #23
318: ldc           #24
320: invokevirtual #25
323: iload         13
325: invokevirtual #41
328: ldc           #27
330: invokevirtual #25
333: ldc_w         #420
336: invokevirtual #41
339: ldc           #24
341: invokevirtual #25
344: invokevirtual #28
347: iload         13
349: ldc_w         #420
352: if_icmpne     359
355: iconst_1
356: goto          360
359: iconst_0
360: invokestatic  #29
363: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test094
Start line: 3279
End line: 0
Method source code: 
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.InputStream inputStream27 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream28 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream27);
        long long29 = jarArchiveInputStream28.getBytesRead();
        long long30 = jarArchiveInputStream28.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream31 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream28);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream32 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream28);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream35 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream32, (int) (byte) 53, (int) (short) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream38 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream35, 40960, "jar");
        int int39 = tarArchiveInputStream38.available();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry40 = tarArchiveInputStream38.getNextEntry();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry43 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        boolean boolean44 = tarArchiveEntry43.isGNUSparse();
        java.lang.String str45 = tarArchiveEntry43.getLinkName();
        tarArchiveEntry43.setNames("0\000", "jar");
        java.lang.String str49 = tarArchiveEntry43.getName();
        boolean boolean50 = tarArchiveInputStream38.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry43);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream52 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream38, 0);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream53 = archiveStreamFactory0.createArchiveInputStream("", (java.io.InputStream) tarArchiveInputStream52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver:  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(archiveEntry40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #421
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #10
200: dup
201: aload         24
203: invokespecial #11
206: astore        25
208: aload         25
210: invokevirtual #12
213: lstore        26
215: aload         25
217: invokevirtual #12
220: lstore        28
222: new           #13
225: dup
226: aload         25
228: invokespecial #14
231: astore        30
233: new           #31
236: dup
237: aload         25
239: invokespecial #32
242: astore        31
244: new           #31
247: dup
248: aload         31
250: bipush        53
252: iconst_m1
253: invokespecial #108
256: astore        32
258: new           #31
261: dup
262: aload         32
264: ldc           #109
266: ldc           #44
268: invokespecial #110
271: astore        33
273: aload         33
275: invokevirtual #158
278: istore        34
280: aload         33
282: invokevirtual #199
285: astore        35
287: new           #112
290: dup
291: ldc           #61
293: iconst_0
294: invokespecial #113
297: astore        36
299: aload         36
301: invokevirtual #422
304: istore        37
306: aload         36
308: invokevirtual #423
311: astore        38
313: aload         36
315: ldc_w         #424
318: ldc           #44
320: invokevirtual #125
323: aload         36
325: invokevirtual #276
328: astore        39
330: aload         33
332: aload         36
334: invokevirtual #116
337: istore        40
339: new           #31
342: dup
343: aload         33
345: iconst_0
346: invokespecial #141
349: astore        41
351: aload_1
352: ldc           #61
354: aload         41
356: invokevirtual #38
359: astore        42
361: ldc           #204
363: invokestatic  #20
366: goto          371
369: astore        42
371: new           #22
374: dup
375: invokespecial #23
378: ldc           #24
380: invokevirtual #25
383: lload         4
385: invokevirtual #26
388: ldc           #27
390: invokevirtual #25
393: lconst_0
394: invokevirtual #26
397: ldc           #24
399: invokevirtual #25
402: invokevirtual #28
405: lload         4
407: lconst_0
408: lcmp
409: ifne          416
412: iconst_1
413: goto          417
416: iconst_0
417: invokestatic  #29
420: new           #22
423: dup
424: invokespecial #23
427: ldc           #24
429: invokevirtual #25
432: lload         6
434: invokevirtual #26
437: ldc           #27
439: invokevirtual #25
442: lconst_0
443: invokevirtual #26
446: ldc           #24
448: invokevirtual #25
451: invokevirtual #28
454: lload         6
456: lconst_0
457: lcmp
458: ifne          465
461: iconst_1
462: goto          466
465: iconst_0
466: invokestatic  #29
469: aload         10
471: invokestatic  #168
474: aload         11
476: invokestatic  #168
479: aload         13
481: invokestatic  #53
484: new           #22
487: dup
488: invokespecial #23
491: ldc           #24
493: invokevirtual #25
496: lload         16
498: invokevirtual #26
501: ldc           #27
503: invokevirtual #25
506: lconst_0
507: invokevirtual #26
510: ldc           #24
512: invokevirtual #25
515: invokevirtual #28
518: lload         16
520: lconst_0
521: lcmp
522: ifne          529
525: iconst_1
526: goto          530
529: iconst_0
530: invokestatic  #29
533: new           #22
536: dup
537: invokespecial #23
540: ldc           #24
542: invokevirtual #25
545: lload         18
547: invokevirtual #26
550: ldc           #27
552: invokevirtual #25
555: lconst_0
556: invokevirtual #26
559: ldc           #24
561: invokevirtual #25
564: invokevirtual #28
567: lload         18
569: lconst_0
570: lcmp
571: ifne          578
574: iconst_1
575: goto          579
578: iconst_0
579: invokestatic  #29
582: aload         21
584: invokestatic  #168
587: aload         23
589: invokestatic  #53
592: new           #22
595: dup
596: invokespecial #23
599: ldc           #24
601: invokevirtual #25
604: lload         26
606: invokevirtual #26
609: ldc           #27
611: invokevirtual #25
614: lconst_0
615: invokevirtual #26
618: ldc           #24
620: invokevirtual #25
623: invokevirtual #28
626: lload         26
628: lconst_0
629: lcmp
630: ifne          637
633: iconst_1
634: goto          638
637: iconst_0
638: invokestatic  #29
641: new           #22
644: dup
645: invokespecial #23
648: ldc           #24
650: invokevirtual #25
653: lload         28
655: invokevirtual #26
658: ldc           #27
660: invokevirtual #25
663: lconst_0
664: invokevirtual #26
667: ldc           #24
669: invokevirtual #25
672: invokevirtual #28
675: lload         28
677: lconst_0
678: lcmp
679: ifne          686
682: iconst_1
683: goto          687
686: iconst_0
687: invokestatic  #29
690: new           #22
693: dup
694: invokespecial #23
697: ldc           #24
699: invokevirtual #25
702: iload         34
704: invokevirtual #41
707: ldc           #27
709: invokevirtual #25
712: iconst_0
713: invokevirtual #41
716: ldc           #24
718: invokevirtual #25
721: invokevirtual #28
724: iload         34
726: ifne          733
729: iconst_1
730: goto          734
733: iconst_0
734: invokestatic  #29
737: aload         35
739: invokestatic  #168
742: new           #22
745: dup
746: invokespecial #23
749: ldc           #24
751: invokevirtual #25
754: iload         37
756: invokevirtual #69
759: ldc           #27
761: invokevirtual #25
764: iconst_0
765: invokevirtual #69
768: ldc           #24
770: invokevirtual #25
773: invokevirtual #28
776: iload         37
778: ifne          785
781: iconst_1
782: goto          786
785: iconst_0
786: invokestatic  #29
789: new           #22
792: dup
793: invokespecial #23
796: ldc           #24
798: invokevirtual #25
801: aload         38
803: invokevirtual #25
806: ldc           #219
808: invokevirtual #25
811: invokevirtual #28
814: aload         38
816: ldc           #61
818: invokestatic  #154
821: new           #22
824: dup
825: invokespecial #23
828: ldc           #24
830: invokevirtual #25
833: aload         39
835: invokevirtual #25
838: ldc           #219
840: invokevirtual #25
843: invokevirtual #28
846: aload         39
848: ldc           #61
850: invokestatic  #154
853: new           #22
856: dup
857: invokespecial #23
860: ldc           #24
862: invokevirtual #25
865: iload         40
867: invokevirtual #69
870: ldc           #27
872: invokevirtual #25
875: iconst_1
876: invokevirtual #69
879: ldc           #24
881: invokevirtual #25
884: invokevirtual #28
887: iload         40
889: iconst_1
890: if_icmpne     897
893: iconst_1
894: goto          898
897: iconst_0
898: invokestatic  #29
901: return
Exception table:
from    to  target type
351   366   369   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test095
Start line: 3347
End line: 0
Method source code: 
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.InputStream inputStream27 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream28 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream27);
        long long29 = jarArchiveInputStream28.getBytesRead();
        long long30 = jarArchiveInputStream28.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream31 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream28);
        boolean boolean32 = arArchiveInputStream31.markSupported();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream34 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream31, 255);
        arArchiveInputStream31.close();
        arArchiveInputStream31.close();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream37 = archiveStreamFactory0.createArchiveInputStream("x5S", (java.io.InputStream) arArchiveInputStream31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: x5S not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #425
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #10
200: dup
201: aload         24
203: invokespecial #11
206: astore        25
208: aload         25
210: invokevirtual #12
213: lstore        26
215: aload         25
217: invokevirtual #12
220: lstore        28
222: new           #13
225: dup
226: aload         25
228: invokespecial #14
231: astore        30
233: aload         30
235: invokevirtual #426
238: istore        31
240: new           #31
243: dup
244: aload         30
246: sipush        255
249: invokespecial #141
252: astore        32
254: aload         30
256: invokevirtual #140
259: aload         30
261: invokevirtual #140
264: aload_1
265: ldc           #153
267: aload         30
269: invokevirtual #38
272: astore        33
274: ldc_w         #427
277: invokestatic  #20
280: goto          285
283: astore        33
285: new           #22
288: dup
289: invokespecial #23
292: ldc           #24
294: invokevirtual #25
297: lload         4
299: invokevirtual #26
302: ldc           #27
304: invokevirtual #25
307: lconst_0
308: invokevirtual #26
311: ldc           #24
313: invokevirtual #25
316: invokevirtual #28
319: lload         4
321: lconst_0
322: lcmp
323: ifne          330
326: iconst_1
327: goto          331
330: iconst_0
331: invokestatic  #29
334: new           #22
337: dup
338: invokespecial #23
341: ldc           #24
343: invokevirtual #25
346: lload         6
348: invokevirtual #26
351: ldc           #27
353: invokevirtual #25
356: lconst_0
357: invokevirtual #26
360: ldc           #24
362: invokevirtual #25
365: invokevirtual #28
368: lload         6
370: lconst_0
371: lcmp
372: ifne          379
375: iconst_1
376: goto          380
379: iconst_0
380: invokestatic  #29
383: aload         10
385: invokestatic  #168
388: aload         11
390: invokestatic  #168
393: aload         13
395: invokestatic  #53
398: new           #22
401: dup
402: invokespecial #23
405: ldc           #24
407: invokevirtual #25
410: lload         16
412: invokevirtual #26
415: ldc           #27
417: invokevirtual #25
420: lconst_0
421: invokevirtual #26
424: ldc           #24
426: invokevirtual #25
429: invokevirtual #28
432: lload         16
434: lconst_0
435: lcmp
436: ifne          443
439: iconst_1
440: goto          444
443: iconst_0
444: invokestatic  #29
447: new           #22
450: dup
451: invokespecial #23
454: ldc           #24
456: invokevirtual #25
459: lload         18
461: invokevirtual #26
464: ldc           #27
466: invokevirtual #25
469: lconst_0
470: invokevirtual #26
473: ldc           #24
475: invokevirtual #25
478: invokevirtual #28
481: lload         18
483: lconst_0
484: lcmp
485: ifne          492
488: iconst_1
489: goto          493
492: iconst_0
493: invokestatic  #29
496: aload         21
498: invokestatic  #168
501: aload         23
503: invokestatic  #53
506: new           #22
509: dup
510: invokespecial #23
513: ldc           #24
515: invokevirtual #25
518: lload         26
520: invokevirtual #26
523: ldc           #27
525: invokevirtual #25
528: lconst_0
529: invokevirtual #26
532: ldc           #24
534: invokevirtual #25
537: invokevirtual #28
540: lload         26
542: lconst_0
543: lcmp
544: ifne          551
547: iconst_1
548: goto          552
551: iconst_0
552: invokestatic  #29
555: new           #22
558: dup
559: invokespecial #23
562: ldc           #24
564: invokevirtual #25
567: lload         28
569: invokevirtual #26
572: ldc           #27
574: invokevirtual #25
577: lconst_0
578: invokevirtual #26
581: ldc           #24
583: invokevirtual #25
586: invokevirtual #28
589: lload         28
591: lconst_0
592: lcmp
593: ifne          600
596: iconst_1
597: goto          601
600: iconst_0
601: invokestatic  #29
604: new           #22
607: dup
608: invokespecial #23
611: ldc           #24
613: invokevirtual #25
616: iload         31
618: invokevirtual #69
621: ldc           #27
623: invokevirtual #25
626: iconst_0
627: invokevirtual #69
630: ldc           #24
632: invokevirtual #25
635: invokevirtual #28
638: iload         31
640: ifne          647
643: iconst_1
644: goto          648
647: iconst_0
648: invokestatic  #29
651: return
Exception table:
from    to  target type
264   280   283   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test096
Start line: 3402
End line: 0
Method source code: 
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        boolean boolean13 = tarArchiveEntry1.isFile();
        tarArchiveEntry1.setGroupId(6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #428
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: invokevirtual #132
98: istore        11
100: aload_1
101: bipush        6
103: invokevirtual #429
106: new           #22
109: dup
110: invokespecial #23
113: ldc           #24
115: invokevirtual #25
118: lload         5
120: invokevirtual #26
123: ldc           #27
125: invokevirtual #25
128: lconst_0
129: invokevirtual #26
132: ldc           #24
134: invokevirtual #25
137: invokevirtual #28
140: lload         5
142: lconst_0
143: lcmp
144: ifne          151
147: iconst_1
148: goto          152
151: iconst_0
152: invokestatic  #29
155: aload         7
157: invokestatic  #53
160: new           #22
163: dup
164: invokespecial #23
167: ldc           #24
169: invokevirtual #25
172: iload         8
174: invokevirtual #69
177: ldc           #27
179: invokevirtual #25
182: iconst_0
183: invokevirtual #69
186: ldc           #24
188: invokevirtual #25
191: invokevirtual #28
194: iload         8
196: ifne          203
199: iconst_1
200: goto          204
203: iconst_0
204: invokestatic  #29
207: new           #22
210: dup
211: invokespecial #23
214: ldc           #24
216: invokevirtual #25
219: lload         9
221: invokevirtual #26
224: ldc           #27
226: invokevirtual #25
229: lconst_0
230: invokevirtual #26
233: ldc           #24
235: invokevirtual #25
238: invokevirtual #28
241: lload         9
243: lconst_0
244: lcmp
245: ifne          252
248: iconst_1
249: goto          253
252: iconst_0
253: invokestatic  #29
256: new           #22
259: dup
260: invokespecial #23
263: ldc           #24
265: invokevirtual #25
268: iload         11
270: invokevirtual #69
273: ldc           #27
275: invokevirtual #25
278: iconst_1
279: invokevirtual #69
282: ldc           #24
284: invokevirtual #25
287: invokevirtual #28
290: iload         11
292: iconst_1
293: if_icmpne     300
296: iconst_1
297: goto          301
300: iconst_0
301: invokestatic  #29
304: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test097
Start line: 3424
End line: 0
Method source code: 
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream3 = archiveStreamFactory0.createArchiveInputStream("ustar\000", inputStream2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: InputStream must not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #430
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: aload_1
36: ldc_w         #431
39: aload_2
40: invokevirtual #38
43: astore_3
44: ldc           #171
46: invokestatic  #20
49: goto          53
52: astore_3
53: return
Exception table:
from    to  target type
35    49    52   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test098
Start line: 3439
End line: 0
Method source code: 
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.OutputStream outputStream27 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream27);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy31 = null;
        zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy31);
        int int33 = zipArchiveOutputStream30.getCount();
        java.lang.String str34 = zipArchiveOutputStream30.getEncoding();
        zipArchiveOutputStream30.count((int) 'a');
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry38 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int39 = tarArchiveEntry38.getDevMinor();
        tarArchiveEntry38.setUserId(0);
        java.io.File file42 = tarArchiveEntry38.getFile();
        tarArchiveEntry38.setLinkName("org.apache.commons.compress.archivers.ArchiveException:  \000");
        boolean boolean45 = zipArchiveOutputStream30.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry38);
        zipArchiveOutputStream30.setUseLanguageEncodingFlag(true);
        java.lang.String str48 = zipArchiveOutputStream30.getEncoding();
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream49 = archiveStreamFactory0.createArchiveOutputStream("ZipLong value: 134695760", (java.io.OutputStream) zipArchiveOutputStream30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipLong value: 134695760 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTF8" + "'", str34, "UTF8");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNull(file42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "UTF8" + "'", str48, "UTF8");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #432
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #43
200: dup
201: aload         24
203: ldc           #44
205: invokespecial #45
208: astore        25
210: new           #182
213: dup
214: aload         24
216: invokespecial #183
219: astore        26
221: aconst_null
222: astore        27
224: aload         26
226: aload         27
228: invokevirtual #184
231: aload         26
233: invokevirtual #309
236: istore        28
238: aload         26
240: invokevirtual #310
243: astore        29
245: aload         26
247: bipush        97
249: invokevirtual #311
252: new           #112
255: dup
256: ldc           #44
258: invokespecial #120
261: astore        30
263: aload         30
265: invokevirtual #129
268: istore        31
270: aload         30
272: iconst_0
273: invokevirtual #272
276: aload         30
278: invokevirtual #395
281: astore        32
283: aload         30
285: ldc           #186
287: invokevirtual #433
290: aload         26
292: aload         30
294: invokevirtual #345
297: istore        33
299: aload         26
301: iconst_1
302: invokevirtual #285
305: aload         26
307: invokevirtual #310
310: astore        34
312: aload_1
313: ldc_w         #434
316: aload         26
318: invokevirtual #49
321: astore        35
323: ldc_w         #435
326: invokestatic  #20
329: goto          334
332: astore        35
334: new           #22
337: dup
338: invokespecial #23
341: ldc           #24
343: invokevirtual #25
346: lload         4
348: invokevirtual #26
351: ldc           #27
353: invokevirtual #25
356: lconst_0
357: invokevirtual #26
360: ldc           #24
362: invokevirtual #25
365: invokevirtual #28
368: lload         4
370: lconst_0
371: lcmp
372: ifne          379
375: iconst_1
376: goto          380
379: iconst_0
380: invokestatic  #29
383: new           #22
386: dup
387: invokespecial #23
390: ldc           #24
392: invokevirtual #25
395: lload         6
397: invokevirtual #26
400: ldc           #27
402: invokevirtual #25
405: lconst_0
406: invokevirtual #26
409: ldc           #24
411: invokevirtual #25
414: invokevirtual #28
417: lload         6
419: lconst_0
420: lcmp
421: ifne          428
424: iconst_1
425: goto          429
428: iconst_0
429: invokestatic  #29
432: aload         10
434: invokestatic  #168
437: aload         11
439: invokestatic  #168
442: aload         13
444: invokestatic  #53
447: new           #22
450: dup
451: invokespecial #23
454: ldc           #24
456: invokevirtual #25
459: lload         16
461: invokevirtual #26
464: ldc           #27
466: invokevirtual #25
469: lconst_0
470: invokevirtual #26
473: ldc           #24
475: invokevirtual #25
478: invokevirtual #28
481: lload         16
483: lconst_0
484: lcmp
485: ifne          492
488: iconst_1
489: goto          493
492: iconst_0
493: invokestatic  #29
496: new           #22
499: dup
500: invokespecial #23
503: ldc           #24
505: invokevirtual #25
508: lload         18
510: invokevirtual #26
513: ldc           #27
515: invokevirtual #25
518: lconst_0
519: invokevirtual #26
522: ldc           #24
524: invokevirtual #25
527: invokevirtual #28
530: lload         18
532: lconst_0
533: lcmp
534: ifne          541
537: iconst_1
538: goto          542
541: iconst_0
542: invokestatic  #29
545: aload         21
547: invokestatic  #168
550: aload         23
552: invokestatic  #53
555: new           #22
558: dup
559: invokespecial #23
562: ldc           #24
564: invokevirtual #25
567: iload         28
569: invokevirtual #41
572: ldc           #27
574: invokevirtual #25
577: iconst_0
578: invokevirtual #41
581: ldc           #24
583: invokevirtual #25
586: invokevirtual #28
589: iload         28
591: ifne          598
594: iconst_1
595: goto          599
598: iconst_0
599: invokestatic  #29
602: new           #22
605: dup
606: invokespecial #23
609: ldc           #24
611: invokevirtual #25
614: aload         29
616: invokevirtual #25
619: ldc_w         #317
622: invokevirtual #25
625: invokevirtual #28
628: aload         29
630: ldc           #85
632: invokestatic  #154
635: new           #22
638: dup
639: invokespecial #23
642: ldc           #24
644: invokevirtual #25
647: iload         31
649: invokevirtual #41
652: ldc           #27
654: invokevirtual #25
657: iconst_0
658: invokevirtual #41
661: ldc           #24
663: invokevirtual #25
666: invokevirtual #28
669: iload         31
671: ifne          678
674: iconst_1
675: goto          679
678: iconst_0
679: invokestatic  #29
682: aload         32
684: invokestatic  #168
687: new           #22
690: dup
691: invokespecial #23
694: ldc           #24
696: invokevirtual #25
699: iload         33
701: invokevirtual #69
704: ldc           #27
706: invokevirtual #25
709: iconst_0
710: invokevirtual #69
713: ldc           #24
715: invokevirtual #25
718: invokevirtual #28
721: iload         33
723: ifne          730
726: iconst_1
727: goto          731
730: iconst_0
731: invokestatic  #29
734: new           #22
737: dup
738: invokespecial #23
741: ldc           #24
743: invokevirtual #25
746: aload         34
748: invokevirtual #25
751: ldc_w         #317
754: invokevirtual #25
757: invokevirtual #28
760: aload         34
762: ldc           #85
764: invokestatic  #154
767: return
Exception table:
from    to  target type
312   329   332   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test099
Start line: 3504
End line: 0
Method source code: 
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        java.io.InputStream inputStream20 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream21 = archiveStreamFactory0.createArchiveInputStream("not encodeable", inputStream20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: InputStream must not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #436
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aconst_null
137: astore        16
139: aload_1
140: ldc_w         #437
143: aload         16
145: invokevirtual #38
148: astore        17
150: ldc           #171
152: invokestatic  #20
155: goto          160
158: astore        17
160: new           #22
163: dup
164: invokespecial #23
167: ldc           #24
169: invokevirtual #25
172: lload         4
174: invokevirtual #26
177: ldc           #27
179: invokevirtual #25
182: lconst_0
183: invokevirtual #26
186: ldc           #24
188: invokevirtual #25
191: invokevirtual #28
194: lload         4
196: lconst_0
197: lcmp
198: ifne          205
201: iconst_1
202: goto          206
205: iconst_0
206: invokestatic  #29
209: aload         6
211: invokestatic  #53
214: new           #22
217: dup
218: invokespecial #23
221: ldc           #24
223: invokevirtual #25
226: lload         9
228: invokevirtual #26
231: ldc           #27
233: invokevirtual #25
236: lconst_0
237: invokevirtual #26
240: ldc           #24
242: invokevirtual #25
245: invokevirtual #28
248: lload         9
250: lconst_0
251: lcmp
252: ifne          259
255: iconst_1
256: goto          260
259: iconst_0
260: invokestatic  #29
263: new           #22
266: dup
267: invokespecial #23
270: ldc           #24
272: invokevirtual #25
275: lload         11
277: invokevirtual #26
280: ldc           #27
282: invokevirtual #25
285: lconst_0
286: invokevirtual #26
289: ldc           #24
291: invokevirtual #25
294: invokevirtual #28
297: lload         11
299: lconst_0
300: lcmp
301: ifne          308
304: iconst_1
305: goto          309
308: iconst_0
309: invokestatic  #29
312: aload         15
314: invokestatic  #53
317: return
Exception table:
from    to  target type
139   155   158   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test100
Start line: 3538
End line: 0
Method source code: 
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        long long10 = archiveOutputStream8.getBytesWritten();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #438
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #143
69: dup
70: aload         6
72: invokespecial #144
75: astore        7
77: aload         6
79: invokevirtual #439
82: lstore        8
84: new           #22
87: dup
88: invokespecial #23
91: ldc           #24
93: invokevirtual #25
96: lload         4
98: invokevirtual #26
101: ldc           #27
103: invokevirtual #25
106: lconst_0
107: invokevirtual #26
110: ldc           #24
112: invokevirtual #25
115: invokevirtual #28
118: lload         4
120: lconst_0
121: lcmp
122: ifne          129
125: iconst_1
126: goto          130
129: iconst_0
130: invokestatic  #29
133: aload         6
135: invokestatic  #53
138: new           #22
141: dup
142: invokespecial #23
145: ldc           #24
147: invokevirtual #25
150: lload         8
152: invokevirtual #26
155: ldc           #27
157: invokevirtual #25
160: lconst_0
161: invokevirtual #26
164: ldc           #24
166: invokevirtual #25
169: invokevirtual #28
172: lload         8
174: lconst_0
175: lcmp
176: ifne          183
179: iconst_1
180: goto          184
183: iconst_0
184: invokestatic  #29
187: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test101
Start line: 3555
End line: 0
Method source code: 
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true);
        long long11 = tarArchiveOutputStream4.getBytesWritten();
        try {
            tarArchiveOutputStream4.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #440
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: iconst_1
68: invokevirtual #148
71: aload_3
72: invokevirtual #47
75: lstore        7
77: aload_3
78: invokevirtual #250
81: ldc           #51
83: invokestatic  #20
86: goto          91
89: astore        9
91: new           #22
94: dup
95: invokespecial #23
98: ldc           #24
100: invokevirtual #25
103: lload         4
105: invokevirtual #26
108: ldc           #27
110: invokevirtual #25
113: lconst_0
114: invokevirtual #26
117: ldc           #24
119: invokevirtual #25
122: invokevirtual #28
125: lload         4
127: lconst_0
128: lcmp
129: ifne          136
132: iconst_1
133: goto          137
136: iconst_0
137: invokestatic  #29
140: aload         6
142: invokestatic  #53
145: new           #22
148: dup
149: invokespecial #23
152: ldc           #24
154: invokevirtual #25
157: lload         7
159: invokevirtual #26
162: ldc           #27
164: invokevirtual #25
167: lconst_0
168: invokevirtual #26
171: ldc           #24
173: invokevirtual #25
176: invokevirtual #28
179: lload         7
181: lconst_0
182: lcmp
183: ifne          190
186: iconst_1
187: goto          191
190: iconst_0
191: invokestatic  #29
194: return
Exception table:
from    to  target type
77    86    89   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test102
Start line: 3579
End line: 0
Method source code: 
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int19 = tarArchiveEntry18.getDevMinor();
        tarArchiveEntry18.setIds((int) (short) 3, 0);
        boolean boolean23 = tarArchiveEntry18.isGNULongNameEntry();
        tarArchiveEntry18.setGroupId(155);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry27 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int28 = tarArchiveEntry27.getDevMinor();
        tarArchiveEntry27.setIds((int) (short) 3, 0);
        java.lang.String str32 = tarArchiveEntry27.getName();
        boolean boolean33 = tarArchiveEntry18.equals(tarArchiveEntry27);
        java.io.OutputStream outputStream34 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream36 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream34, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream37 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream34);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy38 = null;
        zipArchiveOutputStream37.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy38);
        zipArchiveOutputStream37.setUseLanguageEncodingFlag(true);
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode42 = null;
        zipArchiveOutputStream37.setUseZip64(zip64Mode42);
        boolean boolean44 = tarArchiveEntry18.equals((java.lang.Object) zipArchiveOutputStream37);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream45 = archiveStreamFactory0.createArchiveOutputStream("ZipLong value: 32", (java.io.OutputStream) zipArchiveOutputStream37);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipLong value: 32 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "jar" + "'", str32, "jar");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #441
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: new           #112
125: dup
126: ldc           #44
128: invokespecial #120
131: astore        14
133: aload         14
135: invokevirtual #129
138: istore        15
140: aload         14
142: iconst_3
143: iconst_0
144: invokevirtual #130
147: aload         14
149: invokevirtual #442
152: istore        16
154: aload         14
156: sipush        155
159: invokevirtual #429
162: new           #112
165: dup
166: ldc           #44
168: invokespecial #120
171: astore        17
173: aload         17
175: invokevirtual #129
178: istore        18
180: aload         17
182: iconst_3
183: iconst_0
184: invokevirtual #130
187: aload         17
189: invokevirtual #276
192: astore        19
194: aload         14
196: aload         17
198: invokevirtual #377
201: istore        20
203: aconst_null
204: astore        21
206: new           #43
209: dup
210: aload         21
212: ldc           #44
214: invokespecial #45
217: astore        22
219: new           #182
222: dup
223: aload         21
225: invokespecial #183
228: astore        23
230: aconst_null
231: astore        24
233: aload         23
235: aload         24
237: invokevirtual #184
240: aload         23
242: iconst_1
243: invokevirtual #285
246: aconst_null
247: astore        25
249: aload         23
251: aload         25
253: invokevirtual #224
256: aload         14
258: aload         23
260: invokevirtual #133
263: istore        26
265: aload_1
266: ldc_w         #364
269: aload         23
271: invokevirtual #49
274: astore        27
276: ldc_w         #365
279: invokestatic  #20
282: goto          287
285: astore        27
287: new           #22
290: dup
291: invokespecial #23
294: ldc           #24
296: invokevirtual #25
299: lload         4
301: invokevirtual #26
304: ldc           #27
306: invokevirtual #25
309: lconst_0
310: invokevirtual #26
313: ldc           #24
315: invokevirtual #25
318: invokevirtual #28
321: lload         4
323: lconst_0
324: lcmp
325: ifne          332
328: iconst_1
329: goto          333
332: iconst_0
333: invokestatic  #29
336: new           #22
339: dup
340: invokespecial #23
343: ldc           #24
345: invokevirtual #25
348: lload         6
350: invokevirtual #26
353: ldc           #27
355: invokevirtual #25
358: lconst_0
359: invokevirtual #26
362: ldc           #24
364: invokevirtual #25
367: invokevirtual #28
370: lload         6
372: lconst_0
373: lcmp
374: ifne          381
377: iconst_1
378: goto          382
381: iconst_0
382: invokestatic  #29
385: aload         10
387: invokestatic  #168
390: aload         11
392: invokestatic  #168
395: aload         13
397: invokestatic  #53
400: new           #22
403: dup
404: invokespecial #23
407: ldc           #24
409: invokevirtual #25
412: iload         15
414: invokevirtual #41
417: ldc           #27
419: invokevirtual #25
422: iconst_0
423: invokevirtual #41
426: ldc           #24
428: invokevirtual #25
431: invokevirtual #28
434: iload         15
436: ifne          443
439: iconst_1
440: goto          444
443: iconst_0
444: invokestatic  #29
447: new           #22
450: dup
451: invokespecial #23
454: ldc           #24
456: invokevirtual #25
459: iload         16
461: invokevirtual #69
464: ldc           #27
466: invokevirtual #25
469: iconst_0
470: invokevirtual #69
473: ldc           #24
475: invokevirtual #25
478: invokevirtual #28
481: iload         16
483: ifne          490
486: iconst_1
487: goto          491
490: iconst_0
491: invokestatic  #29
494: new           #22
497: dup
498: invokespecial #23
501: ldc           #24
503: invokevirtual #25
506: iload         18
508: invokevirtual #41
511: ldc           #27
513: invokevirtual #25
516: iconst_0
517: invokevirtual #41
520: ldc           #24
522: invokevirtual #25
525: invokevirtual #28
528: iload         18
530: ifne          537
533: iconst_1
534: goto          538
537: iconst_0
538: invokestatic  #29
541: new           #22
544: dup
545: invokespecial #23
548: ldc           #24
550: invokevirtual #25
553: aload         19
555: invokevirtual #25
558: ldc_w         #350
561: invokevirtual #25
564: invokevirtual #28
567: aload         19
569: ldc           #44
571: invokestatic  #154
574: new           #22
577: dup
578: invokespecial #23
581: ldc           #24
583: invokevirtual #25
586: iload         20
588: invokevirtual #69
591: ldc           #27
593: invokevirtual #25
596: iconst_1
597: invokevirtual #69
600: ldc           #24
602: invokevirtual #25
605: invokevirtual #28
608: iload         20
610: iconst_1
611: if_icmpne     618
614: iconst_1
615: goto          619
618: iconst_0
619: invokestatic  #29
622: new           #22
625: dup
626: invokespecial #23
629: ldc           #24
631: invokevirtual #25
634: iload         26
636: invokevirtual #69
639: ldc           #27
641: invokevirtual #25
644: iconst_0
645: invokevirtual #69
648: ldc           #24
650: invokevirtual #25
653: invokevirtual #28
656: iload         26
658: ifne          665
661: iconst_1
662: goto          666
665: iconst_0
666: invokestatic  #29
669: return
Exception table:
from    to  target type
265   282   285   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test103
Start line: 3634
End line: 0
Method source code: 
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.OutputStream outputStream27 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream27);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy31 = null;
        zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy31);
        int int33 = zipArchiveOutputStream30.getCount();
        java.lang.String str34 = zipArchiveOutputStream30.getEncoding();
        zipArchiveOutputStream30.count(0);
        zipArchiveOutputStream30.setLevel((int) (byte) 1);
        java.io.OutputStream outputStream39 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream41 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream39, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream42 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream39);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy43 = null;
        zipArchiveOutputStream42.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy43);
        int int45 = zipArchiveOutputStream42.getCount();
        zipArchiveOutputStream42.setEncoding("cpio");
        zipArchiveOutputStream42.flush();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy49 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        java.lang.String str50 = unicodeExtraFieldPolicy49.toString();
        zipArchiveOutputStream42.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy49);
        zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy49);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream53 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.zip.Zip64RequiredException: -    8192 jar", (java.io.OutputStream) zipArchiveOutputStream30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.zip.Zip64RequiredException: -    8192 jar not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTF8" + "'", str34, "UTF8");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "always" + "'", str50, "always");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #443
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #43
200: dup
201: aload         24
203: ldc           #44
205: invokespecial #45
208: astore        25
210: new           #182
213: dup
214: aload         24
216: invokespecial #183
219: astore        26
221: aconst_null
222: astore        27
224: aload         26
226: aload         27
228: invokevirtual #184
231: aload         26
233: invokevirtual #309
236: istore        28
238: aload         26
240: invokevirtual #310
243: astore        29
245: aload         26
247: iconst_0
248: invokevirtual #311
251: aload         26
253: iconst_1
254: invokevirtual #291
257: aconst_null
258: astore        30
260: new           #43
263: dup
264: aload         30
266: ldc           #44
268: invokespecial #45
271: astore        31
273: new           #182
276: dup
277: aload         30
279: invokespecial #183
282: astore        32
284: aconst_null
285: astore        33
287: aload         32
289: aload         33
291: invokevirtual #184
294: aload         32
296: invokevirtual #309
299: istore        34
301: aload         32
303: ldc_w         #273
306: invokevirtual #312
309: aload         32
311: invokevirtual #313
314: getstatic     #314
317: astore        35
319: aload         35
321: invokevirtual #315
324: astore        36
326: aload         32
328: aload         35
330: invokevirtual #184
333: aload         26
335: aload         35
337: invokevirtual #184
340: aload_1
341: ldc_w         #411
344: aload         26
346: invokevirtual #49
349: astore        37
351: ldc_w         #444
354: invokestatic  #20
357: goto          362
360: astore        37
362: new           #22
365: dup
366: invokespecial #23
369: ldc           #24
371: invokevirtual #25
374: lload         4
376: invokevirtual #26
379: ldc           #27
381: invokevirtual #25
384: lconst_0
385: invokevirtual #26
388: ldc           #24
390: invokevirtual #25
393: invokevirtual #28
396: lload         4
398: lconst_0
399: lcmp
400: ifne          407
403: iconst_1
404: goto          408
407: iconst_0
408: invokestatic  #29
411: new           #22
414: dup
415: invokespecial #23
418: ldc           #24
420: invokevirtual #25
423: lload         6
425: invokevirtual #26
428: ldc           #27
430: invokevirtual #25
433: lconst_0
434: invokevirtual #26
437: ldc           #24
439: invokevirtual #25
442: invokevirtual #28
445: lload         6
447: lconst_0
448: lcmp
449: ifne          456
452: iconst_1
453: goto          457
456: iconst_0
457: invokestatic  #29
460: aload         10
462: invokestatic  #168
465: aload         11
467: invokestatic  #168
470: aload         13
472: invokestatic  #53
475: new           #22
478: dup
479: invokespecial #23
482: ldc           #24
484: invokevirtual #25
487: lload         16
489: invokevirtual #26
492: ldc           #27
494: invokevirtual #25
497: lconst_0
498: invokevirtual #26
501: ldc           #24
503: invokevirtual #25
506: invokevirtual #28
509: lload         16
511: lconst_0
512: lcmp
513: ifne          520
516: iconst_1
517: goto          521
520: iconst_0
521: invokestatic  #29
524: new           #22
527: dup
528: invokespecial #23
531: ldc           #24
533: invokevirtual #25
536: lload         18
538: invokevirtual #26
541: ldc           #27
543: invokevirtual #25
546: lconst_0
547: invokevirtual #26
550: ldc           #24
552: invokevirtual #25
555: invokevirtual #28
558: lload         18
560: lconst_0
561: lcmp
562: ifne          569
565: iconst_1
566: goto          570
569: iconst_0
570: invokestatic  #29
573: aload         21
575: invokestatic  #168
578: aload         23
580: invokestatic  #53
583: new           #22
586: dup
587: invokespecial #23
590: ldc           #24
592: invokevirtual #25
595: iload         28
597: invokevirtual #41
600: ldc           #27
602: invokevirtual #25
605: iconst_0
606: invokevirtual #41
609: ldc           #24
611: invokevirtual #25
614: invokevirtual #28
617: iload         28
619: ifne          626
622: iconst_1
623: goto          627
626: iconst_0
627: invokestatic  #29
630: new           #22
633: dup
634: invokespecial #23
637: ldc           #24
639: invokevirtual #25
642: aload         29
644: invokevirtual #25
647: ldc_w         #317
650: invokevirtual #25
653: invokevirtual #28
656: aload         29
658: ldc           #85
660: invokestatic  #154
663: new           #22
666: dup
667: invokespecial #23
670: ldc           #24
672: invokevirtual #25
675: iload         34
677: invokevirtual #41
680: ldc           #27
682: invokevirtual #25
685: iconst_0
686: invokevirtual #41
689: ldc           #24
691: invokevirtual #25
694: invokevirtual #28
697: iload         34
699: ifne          706
702: iconst_1
703: goto          707
706: iconst_0
707: invokestatic  #29
710: aload         35
712: invokestatic  #53
715: new           #22
718: dup
719: invokespecial #23
722: ldc           #24
724: invokevirtual #25
727: aload         36
729: invokevirtual #25
732: ldc_w         #318
735: invokevirtual #25
738: invokevirtual #28
741: aload         36
743: ldc           #79
745: invokestatic  #154
748: return
Exception table:
from    to  target type
340   357   360   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test104
Start line: 3703
End line: 0
Method source code: 
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry15 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("ar", (byte) 49);
        try {
            jarArchiveOutputStream11.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #445
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: new           #112
106: dup
107: ldc           #48
109: bipush        49
111: invokespecial #113
114: astore        11
116: aload         9
118: aload         11
120: invokevirtual #396
123: ldc_w         #397
126: invokestatic  #20
129: goto          134
132: astore        12
134: new           #22
137: dup
138: invokespecial #23
141: ldc           #24
143: invokevirtual #25
146: lload         4
148: invokevirtual #26
151: ldc           #27
153: invokevirtual #25
156: lconst_0
157: invokevirtual #26
160: ldc           #24
162: invokevirtual #25
165: invokevirtual #28
168: lload         4
170: lconst_0
171: lcmp
172: ifne          179
175: iconst_1
176: goto          180
179: iconst_0
180: invokestatic  #29
183: aload         6
185: invokestatic  #53
188: new           #22
191: dup
192: invokespecial #23
195: ldc           #24
197: invokevirtual #25
200: iload         7
202: invokevirtual #41
205: ldc           #27
207: invokevirtual #25
210: iconst_0
211: invokevirtual #41
214: ldc           #24
216: invokevirtual #25
219: invokevirtual #28
222: iload         7
224: ifne          231
227: iconst_1
228: goto          232
231: iconst_0
232: invokestatic  #29
235: return
Exception table:
from    to  target type
116   129   132   Class java/lang/ClassCastException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test105
Start line: 3730
End line: 0
Method source code: 
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(4);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int15 = tarArchiveEntry14.getDevMinor();
        tarArchiveEntry14.setIds((int) (short) 3, 0);
        long long19 = tarArchiveEntry14.getSize();
        tarArchiveEntry14.setSize((long) (short) 3);
        java.lang.String str22 = org.apache.commons.compress.utils.ArchiveUtils.toString((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry14);
        boolean boolean23 = tarArchiveEntry14.isGNULongNameEntry();
        tarArchiveEntry14.setSize((long) (byte) 76);
        try {
            arArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry14);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.ar.ArArchiveEntry");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "-       3 jar" + "'", str22, "-       3 jar");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #446
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: iconst_4
85: invokevirtual #399
88: new           #112
91: dup
92: ldc           #44
94: invokespecial #120
97: astore        10
99: aload         10
101: invokevirtual #129
104: istore        11
106: aload         10
108: iconst_3
109: iconst_0
110: invokevirtual #130
113: aload         10
115: invokevirtual #156
118: lstore        12
120: aload         10
122: ldc2_w        #447
125: invokevirtual #330
128: aload         10
130: invokestatic  #449
133: astore        14
135: aload         10
137: invokevirtual #442
140: istore        15
142: aload         10
144: ldc2_w        #450
147: invokevirtual #330
150: aload         9
152: aload         10
154: invokevirtual #288
157: ldc_w         #452
160: invokestatic  #20
163: goto          168
166: astore        16
168: new           #22
171: dup
172: invokespecial #23
175: ldc           #24
177: invokevirtual #25
180: lload         4
182: invokevirtual #26
185: ldc           #27
187: invokevirtual #25
190: lconst_0
191: invokevirtual #26
194: ldc           #24
196: invokevirtual #25
199: invokevirtual #28
202: lload         4
204: lconst_0
205: lcmp
206: ifne          213
209: iconst_1
210: goto          214
213: iconst_0
214: invokestatic  #29
217: aload         6
219: invokestatic  #53
222: new           #22
225: dup
226: invokespecial #23
229: ldc           #24
231: invokevirtual #25
234: lload         7
236: invokevirtual #26
239: ldc           #27
241: invokevirtual #25
244: lconst_0
245: invokevirtual #26
248: ldc           #24
250: invokevirtual #25
253: invokevirtual #28
256: lload         7
258: lconst_0
259: lcmp
260: ifne          267
263: iconst_1
264: goto          268
267: iconst_0
268: invokestatic  #29
271: new           #22
274: dup
275: invokespecial #23
278: ldc           #24
280: invokevirtual #25
283: iload         11
285: invokevirtual #41
288: ldc           #27
290: invokevirtual #25
293: iconst_0
294: invokevirtual #41
297: ldc           #24
299: invokevirtual #25
302: invokevirtual #28
305: iload         11
307: ifne          314
310: iconst_1
311: goto          315
314: iconst_0
315: invokestatic  #29
318: new           #22
321: dup
322: invokespecial #23
325: ldc           #24
327: invokevirtual #25
330: lload         12
332: invokevirtual #26
335: ldc           #27
337: invokevirtual #25
340: lconst_0
341: invokevirtual #26
344: ldc           #24
346: invokevirtual #25
349: invokevirtual #28
352: lload         12
354: lconst_0
355: lcmp
356: ifne          363
359: iconst_1
360: goto          364
363: iconst_0
364: invokestatic  #29
367: new           #22
370: dup
371: invokespecial #23
374: ldc           #24
376: invokevirtual #25
379: aload         14
381: invokevirtual #25
384: ldc_w         #453
387: invokevirtual #25
390: invokevirtual #28
393: aload         14
395: ldc           #102
397: invokestatic  #154
400: new           #22
403: dup
404: invokespecial #23
407: ldc           #24
409: invokevirtual #25
412: iload         15
414: invokevirtual #69
417: ldc           #27
419: invokevirtual #25
422: iconst_0
423: invokevirtual #69
426: ldc           #24
428: invokevirtual #25
431: invokevirtual #28
434: iload         15
436: ifne          443
439: iconst_1
440: goto          444
443: iconst_0
444: invokestatic  #29
447: return
Exception table:
from    to  target type
150   163   166   Class java/lang/ClassCastException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test106
Start line: 3767
End line: 0
Method source code: 
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        tarArchiveOutputStream4.setLongFileMode((int) '4');
        try {
            tarArchiveOutputStream4.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #454
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: bipush        52
69: invokevirtual #195
72: aload_3
73: invokevirtual #207
76: ldc           #83
78: invokestatic  #20
81: goto          86
84: astore        7
86: new           #22
89: dup
90: invokespecial #23
93: ldc           #24
95: invokevirtual #25
98: lload         4
100: invokevirtual #26
103: ldc           #27
105: invokevirtual #25
108: lconst_0
109: invokevirtual #26
112: ldc           #24
114: invokevirtual #25
117: invokevirtual #28
120: lload         4
122: lconst_0
123: lcmp
124: ifne          131
127: iconst_1
128: goto          132
131: iconst_0
132: invokestatic  #29
135: aload         6
137: invokestatic  #53
140: return
Exception table:
from    to  target type
72    81    84   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test107
Start line: 3789
End line: 0
Method source code: 
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.OutputStream outputStream27 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar");
        int int30 = tarArchiveOutputStream29.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream29);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream34 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream29, 128, "tar");
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream36 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream34, "jar");
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream37 = archiveStreamFactory0.createArchiveOutputStream("070701", (java.io.OutputStream) tarArchiveOutputStream36);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: 070701 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #455
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #43
200: dup
201: aload         24
203: ldc           #44
205: invokespecial #45
208: astore        25
210: aload         25
212: invokevirtual #60
215: istore        26
217: new           #43
220: dup
221: aload         25
223: invokespecial #95
226: astore        27
228: new           #43
231: dup
232: aload         25
234: sipush        128
237: ldc           #164
239: invokespecial #91
242: astore        28
244: new           #43
247: dup
248: aload         28
250: ldc           #44
252: invokespecial #45
255: astore        29
257: aload_1
258: ldc           #145
260: aload         29
262: invokevirtual #49
265: astore        30
267: ldc_w         #456
270: invokestatic  #20
273: goto          278
276: astore        30
278: new           #22
281: dup
282: invokespecial #23
285: ldc           #24
287: invokevirtual #25
290: lload         4
292: invokevirtual #26
295: ldc           #27
297: invokevirtual #25
300: lconst_0
301: invokevirtual #26
304: ldc           #24
306: invokevirtual #25
309: invokevirtual #28
312: lload         4
314: lconst_0
315: lcmp
316: ifne          323
319: iconst_1
320: goto          324
323: iconst_0
324: invokestatic  #29
327: new           #22
330: dup
331: invokespecial #23
334: ldc           #24
336: invokevirtual #25
339: lload         6
341: invokevirtual #26
344: ldc           #27
346: invokevirtual #25
349: lconst_0
350: invokevirtual #26
353: ldc           #24
355: invokevirtual #25
358: invokevirtual #28
361: lload         6
363: lconst_0
364: lcmp
365: ifne          372
368: iconst_1
369: goto          373
372: iconst_0
373: invokestatic  #29
376: aload         10
378: invokestatic  #168
381: aload         11
383: invokestatic  #168
386: aload         13
388: invokestatic  #53
391: new           #22
394: dup
395: invokespecial #23
398: ldc           #24
400: invokevirtual #25
403: lload         16
405: invokevirtual #26
408: ldc           #27
410: invokevirtual #25
413: lconst_0
414: invokevirtual #26
417: ldc           #24
419: invokevirtual #25
422: invokevirtual #28
425: lload         16
427: lconst_0
428: lcmp
429: ifne          436
432: iconst_1
433: goto          437
436: iconst_0
437: invokestatic  #29
440: new           #22
443: dup
444: invokespecial #23
447: ldc           #24
449: invokevirtual #25
452: lload         18
454: invokevirtual #26
457: ldc           #27
459: invokevirtual #25
462: lconst_0
463: invokevirtual #26
466: ldc           #24
468: invokevirtual #25
471: invokevirtual #28
474: lload         18
476: lconst_0
477: lcmp
478: ifne          485
481: iconst_1
482: goto          486
485: iconst_0
486: invokestatic  #29
489: aload         21
491: invokestatic  #168
494: aload         23
496: invokestatic  #53
499: new           #22
502: dup
503: invokespecial #23
506: ldc           #24
508: invokevirtual #25
511: iload         26
513: invokevirtual #41
516: ldc           #27
518: invokevirtual #25
521: iconst_0
522: invokevirtual #41
525: ldc           #24
527: invokevirtual #25
530: invokevirtual #28
533: iload         26
535: ifne          542
538: iconst_1
539: goto          543
542: iconst_0
543: invokestatic  #29
546: return
Exception table:
from    to  target type
257   273   276   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test108
Start line: 3839
End line: 0
Method source code: 
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        jarArchiveOutputStream12.setEncoding("5");
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode15 = null;
        jarArchiveOutputStream12.setUseZip64(zip64Mode15);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        tarArchiveEntry18.setMode((int) (short) 10);
        java.util.Date date21 = tarArchiveEntry18.getLastModifiedDate();
        tarArchiveEntry18.setMode((int) (byte) 120);
        tarArchiveEntry18.setLinkName("");
        tarArchiveEntry18.setUserId(0);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry29 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int30 = tarArchiveEntry29.getDevMinor();
        tarArchiveEntry29.setIds((int) (short) 3, 0);
        boolean boolean34 = tarArchiveEntry29.isGNULongNameEntry();
        tarArchiveEntry29.setGroupId(155);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry38 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int39 = tarArchiveEntry38.getDevMinor();
        tarArchiveEntry38.setIds((int) (short) 3, 0);
        java.lang.String str43 = tarArchiveEntry38.getName();
        boolean boolean44 = tarArchiveEntry29.equals(tarArchiveEntry38);
        tarArchiveEntry38.setMode(100);
        java.io.OutputStream outputStream47 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream49 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream47, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream50 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream47);
        zipArchiveOutputStream50.setUseLanguageEncodingFlag(true);
        zipArchiveOutputStream50.count((long) (short) 2);
        java.io.OutputStream outputStream55 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream57 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream55, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream58 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream55);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy59 = null;
        zipArchiveOutputStream58.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy59);
        int int61 = zipArchiveOutputStream58.getCount();
        java.lang.String str62 = zipArchiveOutputStream58.getEncoding();
        zipArchiveOutputStream58.count(0);
        zipArchiveOutputStream58.setLevel((int) (byte) 1);
        java.io.OutputStream outputStream67 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream69 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream67, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream70 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream67);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy71 = null;
        zipArchiveOutputStream70.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy71);
        int int73 = zipArchiveOutputStream70.getCount();
        zipArchiveOutputStream70.setEncoding("cpio");
        zipArchiveOutputStream70.flush();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy77 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        java.lang.String str78 = unicodeExtraFieldPolicy77.toString();
        zipArchiveOutputStream70.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy77);
        zipArchiveOutputStream58.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy77);
        zipArchiveOutputStream50.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy77);
        boolean boolean82 = tarArchiveEntry38.equals((java.lang.Object) unicodeExtraFieldPolicy77);
        boolean boolean83 = tarArchiveEntry18.isDescendent(tarArchiveEntry38);
        try {
            jarArchiveOutputStream12.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry38);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "jar" + "'", str43, "jar");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "UTF8" + "'", str62, "UTF8");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "always" + "'", str78, "always");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #457
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: aload         10
105: ldc_w         #458
108: invokevirtual #459
111: aconst_null
112: astore        11
114: aload         10
116: aload         11
118: invokevirtual #460
121: new           #112
124: dup
125: ldc           #44
127: invokespecial #120
130: astore        12
132: aload         12
134: bipush        10
136: invokevirtual #121
139: aload         12
141: invokevirtual #122
144: astore        13
146: aload         12
148: bipush        120
150: invokevirtual #121
153: aload         12
155: ldc           #61
157: invokevirtual #433
160: aload         12
162: iconst_0
163: invokevirtual #272
166: new           #112
169: dup
170: ldc           #44
172: invokespecial #120
175: astore        14
177: aload         14
179: invokevirtual #129
182: istore        15
184: aload         14
186: iconst_3
187: iconst_0
188: invokevirtual #130
191: aload         14
193: invokevirtual #442
196: istore        16
198: aload         14
200: sipush        155
203: invokevirtual #429
206: new           #112
209: dup
210: ldc           #44
212: invokespecial #120
215: astore        17
217: aload         17
219: invokevirtual #129
222: istore        18
224: aload         17
226: iconst_3
227: iconst_0
228: invokevirtual #130
231: aload         17
233: invokevirtual #276
236: astore        19
238: aload         14
240: aload         17
242: invokevirtual #377
245: istore        20
247: aload         17
249: bipush        100
251: invokevirtual #121
254: aconst_null
255: astore        21
257: new           #43
260: dup
261: aload         21
263: ldc           #44
265: invokespecial #45
268: astore        22
270: new           #182
273: dup
274: aload         21
276: invokespecial #183
279: astore        23
281: aload         23
283: iconst_1
284: invokevirtual #285
287: aload         23
289: ldc2_w        #461
292: invokevirtual #387
295: aconst_null
296: astore        24
298: new           #43
301: dup
302: aload         24
304: ldc           #44
306: invokespecial #45
309: astore        25
311: new           #182
314: dup
315: aload         24
317: invokespecial #183
320: astore        26
322: aconst_null
323: astore        27
325: aload         26
327: aload         27
329: invokevirtual #184
332: aload         26
334: invokevirtual #309
337: istore        28
339: aload         26
341: invokevirtual #310
344: astore        29
346: aload         26
348: iconst_0
349: invokevirtual #311
352: aload         26
354: iconst_1
355: invokevirtual #291
358: aconst_null
359: astore        30
361: new           #43
364: dup
365: aload         30
367: ldc           #44
369: invokespecial #45
372: astore        31
374: new           #182
377: dup
378: aload         30
380: invokespecial #183
383: astore        32
385: aconst_null
386: astore        33
388: aload         32
390: aload         33
392: invokevirtual #184
395: aload         32
397: invokevirtual #309
400: istore        34
402: aload         32
404: ldc_w         #273
407: invokevirtual #312
410: aload         32
412: invokevirtual #313
415: getstatic     #314
418: astore        35
420: aload         35
422: invokevirtual #315
425: astore        36
427: aload         32
429: aload         35
431: invokevirtual #184
434: aload         26
436: aload         35
438: invokevirtual #184
441: aload         23
443: aload         35
445: invokevirtual #184
448: aload         17
450: aload         35
452: invokevirtual #133
455: istore        37
457: aload         12
459: aload         17
461: invokevirtual #277
464: istore        38
466: aload         10
468: aload         17
470: invokevirtual #396
473: ldc_w         #397
476: invokestatic  #20
479: goto          484
482: astore        39
484: new           #22
487: dup
488: invokespecial #23
491: ldc           #24
493: invokevirtual #25
496: lload         4
498: invokevirtual #26
501: ldc           #27
503: invokevirtual #25
506: lconst_0
507: invokevirtual #26
510: ldc           #24
512: invokevirtual #25
515: invokevirtual #28
518: lload         4
520: lconst_0
521: lcmp
522: ifne          529
525: iconst_1
526: goto          530
529: iconst_0
530: invokestatic  #29
533: aload         6
535: invokestatic  #53
538: new           #22
541: dup
542: invokespecial #23
545: ldc           #24
547: invokevirtual #25
550: iload         7
552: invokevirtual #41
555: ldc           #27
557: invokevirtual #25
560: iconst_0
561: invokevirtual #41
564: ldc           #24
566: invokevirtual #25
569: invokevirtual #28
572: iload         7
574: ifne          581
577: iconst_1
578: goto          582
581: iconst_0
582: invokestatic  #29
585: aload         13
587: invokestatic  #53
590: new           #22
593: dup
594: invokespecial #23
597: ldc           #24
599: invokevirtual #25
602: iload         15
604: invokevirtual #41
607: ldc           #27
609: invokevirtual #25
612: iconst_0
613: invokevirtual #41
616: ldc           #24
618: invokevirtual #25
621: invokevirtual #28
624: iload         15
626: ifne          633
629: iconst_1
630: goto          634
633: iconst_0
634: invokestatic  #29
637: new           #22
640: dup
641: invokespecial #23
644: ldc           #24
646: invokevirtual #25
649: iload         16
651: invokevirtual #69
654: ldc           #27
656: invokevirtual #25
659: iconst_0
660: invokevirtual #69
663: ldc           #24
665: invokevirtual #25
668: invokevirtual #28
671: iload         16
673: ifne          680
676: iconst_1
677: goto          681
680: iconst_0
681: invokestatic  #29
684: new           #22
687: dup
688: invokespecial #23
691: ldc           #24
693: invokevirtual #25
696: iload         18
698: invokevirtual #41
701: ldc           #27
703: invokevirtual #25
706: iconst_0
707: invokevirtual #41
710: ldc           #24
712: invokevirtual #25
715: invokevirtual #28
718: iload         18
720: ifne          727
723: iconst_1
724: goto          728
727: iconst_0
728: invokestatic  #29
731: new           #22
734: dup
735: invokespecial #23
738: ldc           #24
740: invokevirtual #25
743: aload         19
745: invokevirtual #25
748: ldc_w         #350
751: invokevirtual #25
754: invokevirtual #28
757: aload         19
759: ldc           #44
761: invokestatic  #154
764: new           #22
767: dup
768: invokespecial #23
771: ldc           #24
773: invokevirtual #25
776: iload         20
778: invokevirtual #69
781: ldc           #27
783: invokevirtual #25
786: iconst_1
787: invokevirtual #69
790: ldc           #24
792: invokevirtual #25
795: invokevirtual #28
798: iload         20
800: iconst_1
801: if_icmpne     808
804: iconst_1
805: goto          809
808: iconst_0
809: invokestatic  #29
812: new           #22
815: dup
816: invokespecial #23
819: ldc           #24
821: invokevirtual #25
824: iload         28
826: invokevirtual #41
829: ldc           #27
831: invokevirtual #25
834: iconst_0
835: invokevirtual #41
838: ldc           #24
840: invokevirtual #25
843: invokevirtual #28
846: iload         28
848: ifne          855
851: iconst_1
852: goto          856
855: iconst_0
856: invokestatic  #29
859: new           #22
862: dup
863: invokespecial #23
866: ldc           #24
868: invokevirtual #25
871: aload         29
873: invokevirtual #25
876: ldc_w         #317
879: invokevirtual #25
882: invokevirtual #28
885: aload         29
887: ldc           #85
889: invokestatic  #154
892: new           #22
895: dup
896: invokespecial #23
899: ldc           #24
901: invokevirtual #25
904: iload         34
906: invokevirtual #41
909: ldc           #27
911: invokevirtual #25
914: iconst_0
915: invokevirtual #41
918: ldc           #24
920: invokevirtual #25
923: invokevirtual #28
926: iload         34
928: ifne          935
931: iconst_1
932: goto          936
935: iconst_0
936: invokestatic  #29
939: aload         35
941: invokestatic  #53
944: new           #22
947: dup
948: invokespecial #23
951: ldc           #24
953: invokevirtual #25
956: aload         36
958: invokevirtual #25
961: ldc_w         #318
964: invokevirtual #25
967: invokevirtual #28
970: aload         36
972: ldc           #79
974: invokestatic  #154
977: new           #22
980: dup
981: invokespecial #23
984: ldc           #24
986: invokevirtual #25
989: iload         37
991: invokevirtual #69
994: ldc           #27
996: invokevirtual #25
999: iconst_0
1000: invokevirtual #69
1003: ldc           #24
1005: invokevirtual #25
1008: invokevirtual #28
1011: iload         37
1013: ifne          1020
1016: iconst_1
1017: goto          1021
1020: iconst_0
1021: invokestatic  #29
1024: new           #22
1027: dup
1028: invokespecial #23
1031: ldc           #24
1033: invokevirtual #25
1036: iload         38
1038: invokevirtual #69
1041: ldc           #27
1043: invokevirtual #25
1046: iconst_1
1047: invokevirtual #69
1050: ldc           #24
1052: invokevirtual #25
1055: invokevirtual #28
1058: iload         38
1060: iconst_1
1061: if_icmpne     1068
1064: iconst_1
1065: goto          1069
1068: iconst_0
1069: invokestatic  #29
1072: return
Exception table:
from    to  target type
466   479   482   Class java/lang/ClassCastException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test109
Start line: 3928
End line: 0
Method source code: 
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        try {
            arArchiveOutputStream10.finish();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: This archive has already been finished");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #463
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: invokevirtual #286
100: ldc_w         #467
103: invokestatic  #20
106: goto          111
109: astore        10
111: new           #22
114: dup
115: invokespecial #23
118: ldc           #24
120: invokevirtual #25
123: lload         4
125: invokevirtual #26
128: ldc           #27
130: invokevirtual #25
133: lconst_0
134: invokevirtual #26
137: ldc           #24
139: invokevirtual #25
142: invokevirtual #28
145: lload         4
147: lconst_0
148: lcmp
149: ifne          156
152: iconst_1
153: goto          157
156: iconst_0
157: invokestatic  #29
160: aload         6
162: invokestatic  #53
165: new           #22
168: dup
169: invokespecial #23
172: ldc           #24
174: invokevirtual #25
177: lload         7
179: invokevirtual #26
182: ldc           #27
184: invokevirtual #25
187: lconst_0
188: invokevirtual #26
191: ldc           #24
193: invokevirtual #25
196: invokevirtual #28
199: lload         7
201: lconst_0
202: lcmp
203: ifne          210
206: iconst_1
207: goto          211
210: iconst_0
211: invokestatic  #29
214: return
Exception table:
from    to  target type
95   106   109   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test110
Start line: 3954
End line: 0
Method source code: 
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory1 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream3 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream5 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream3, "jar");
        tarArchiveOutputStream5.count(0L);
        long long8 = tarArchiveOutputStream5.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream9 = archiveStreamFactory1.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream5);
        int int10 = tarArchiveOutputStream5.getCount();
        int int11 = tarArchiveOutputStream5.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong13 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray14 = zipLong13.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong16 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray17 = zipLong16.getBytes();
        boolean boolean19 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray14, byteArray17, true);
        boolean boolean20 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray14);
        tarArchiveOutputStream5.write(byteArray14, (int) (short) 4, (int) (byte) -1);
        try {
            int int26 = org.apache.commons.compress.archivers.tar.TarUtils.formatLongOctalBytes((long) 1024, byteArray14, 8192, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8287");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #468
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: new           #73
81: dup
82: lconst_0
83: invokespecial #74
86: astore        9
88: aload         9
90: invokevirtual #75
93: astore        10
95: new           #73
98: dup
99: lconst_0
100: invokespecial #74
103: astore        11
105: aload         11
107: invokevirtual #75
110: astore        12
112: aload         10
114: aload         12
116: iconst_1
117: invokestatic  #177
120: istore        13
122: aload         10
124: invokestatic  #192
127: istore        14
129: aload_3
130: aload         10
132: iconst_4
133: iconst_m1
134: invokevirtual #63
137: ldc2_w        #469
140: aload         10
142: sipush        8192
145: bipush        97
147: invokestatic  #471
150: istore        15
152: ldc_w         #472
155: invokestatic  #20
158: goto          163
161: astore        15
163: new           #22
166: dup
167: invokespecial #23
170: ldc           #24
172: invokevirtual #25
175: lload         4
177: invokevirtual #26
180: ldc           #27
182: invokevirtual #25
185: lconst_0
186: invokevirtual #26
189: ldc           #24
191: invokevirtual #25
194: invokevirtual #28
197: lload         4
199: lconst_0
200: lcmp
201: ifne          208
204: iconst_1
205: goto          209
208: iconst_0
209: invokestatic  #29
212: aload         6
214: invokestatic  #53
217: new           #22
220: dup
221: invokespecial #23
224: ldc           #24
226: invokevirtual #25
229: iload         7
231: invokevirtual #41
234: ldc           #27
236: invokevirtual #25
239: iconst_0
240: invokevirtual #41
243: ldc           #24
245: invokevirtual #25
248: invokevirtual #28
251: iload         7
253: ifne          260
256: iconst_1
257: goto          261
260: iconst_0
261: invokestatic  #29
264: new           #22
267: dup
268: invokespecial #23
271: ldc           #24
273: invokevirtual #25
276: iload         8
278: invokevirtual #41
281: ldc           #27
283: invokevirtual #25
286: iconst_0
287: invokevirtual #41
290: ldc           #24
292: invokevirtual #25
295: invokevirtual #28
298: iload         8
300: ifne          307
303: iconst_1
304: goto          308
307: iconst_0
308: invokestatic  #29
311: aload         10
313: invokestatic  #53
316: aload         10
318: invokestatic  #66
321: ldc           #77
323: invokestatic  #68
326: aload         12
328: invokestatic  #53
331: aload         12
333: invokestatic  #66
336: ldc           #77
338: invokestatic  #68
341: new           #22
344: dup
345: invokespecial #23
348: ldc           #24
350: invokevirtual #25
353: iload         13
355: invokevirtual #69
358: ldc           #27
360: invokevirtual #25
363: iconst_1
364: invokevirtual #69
367: ldc           #24
369: invokevirtual #25
372: invokevirtual #28
375: iload         13
377: iconst_1
378: if_icmpne     385
381: iconst_1
382: goto          386
385: iconst_0
386: invokestatic  #29
389: new           #22
392: dup
393: invokespecial #23
396: ldc           #24
398: invokevirtual #25
401: iload         14
403: invokevirtual #69
406: ldc           #27
408: invokevirtual #25
411: iconst_1
412: invokevirtual #69
415: ldc           #24
417: invokevirtual #25
420: invokevirtual #28
423: iload         14
425: iconst_1
426: if_icmpne     433
429: iconst_1
430: goto          434
433: iconst_0
434: invokestatic  #29
437: return
Exception table:
from    to  target type
137   158   161   Class java/lang/ArrayIndexOutOfBoundsException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test111
Start line: 3992
End line: 0
Method source code: 
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, (short) (byte) 55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown format: 55");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #473
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #143
75: dup
76: aload_3
77: bipush        55
79: invokespecial #474
82: astore        9
84: ldc_w         #475
87: invokestatic  #20
90: goto          95
93: astore        9
95: new           #22
98: dup
99: invokespecial #23
102: ldc           #24
104: invokevirtual #25
107: lload         4
109: invokevirtual #26
112: ldc           #27
114: invokevirtual #25
117: lconst_0
118: invokevirtual #26
121: ldc           #24
123: invokevirtual #25
126: invokevirtual #28
129: lload         4
131: lconst_0
132: lcmp
133: ifne          140
136: iconst_1
137: goto          141
140: iconst_0
141: invokestatic  #29
144: aload         6
146: invokestatic  #53
149: new           #22
152: dup
153: invokespecial #23
156: ldc           #24
158: invokevirtual #25
161: lload         7
163: invokevirtual #26
166: ldc           #27
168: invokevirtual #25
171: lconst_0
172: invokevirtual #26
175: ldc           #24
177: invokevirtual #25
180: invokevirtual #28
183: lload         7
185: lconst_0
186: lcmp
187: ifne          194
190: iconst_1
191: goto          195
194: iconst_0
195: invokestatic  #29
198: return
Exception table:
from    to  target type
72    90    93   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test112
Start line: 4015
End line: 0
Method source code: 
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream15);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream20 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16, "070702", false, false);
        int int21 = cpioArchiveInputStream16.available();
        int int22 = cpioArchiveInputStream16.available();
        cpioArchiveInputStream16.pushedBackBytes(8192L);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.archivers.zip.Zip64RequiredException: 070707", (java.io.InputStream) cpioArchiveInputStream16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.zip.Zip64RequiredException: 070707 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #476
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #31
108: dup
109: aload         8
111: invokespecial #32
114: astore        14
116: new           #33
119: dup
120: aload         14
122: invokespecial #34
125: astore        15
127: new           #15
130: dup
131: aload         15
133: ldc           #111
135: iconst_0
136: iconst_0
137: invokespecial #17
140: astore        16
142: aload         15
144: invokevirtual #35
147: istore        17
149: aload         15
151: invokevirtual #35
154: istore        18
156: aload         15
158: ldc2_w        #341
161: invokevirtual #477
164: aload_1
165: ldc_w         #478
168: aload         15
170: invokevirtual #38
173: astore        19
175: ldc_w         #479
178: invokestatic  #20
181: goto          186
184: astore        19
186: new           #22
189: dup
190: invokespecial #23
193: ldc           #24
195: invokevirtual #25
198: lload         4
200: invokevirtual #26
203: ldc           #27
205: invokevirtual #25
208: lconst_0
209: invokevirtual #26
212: ldc           #24
214: invokevirtual #25
217: invokevirtual #28
220: lload         4
222: lconst_0
223: lcmp
224: ifne          231
227: iconst_1
228: goto          232
231: iconst_0
232: invokestatic  #29
235: aload         6
237: invokestatic  #53
240: new           #22
243: dup
244: invokespecial #23
247: ldc           #24
249: invokevirtual #25
252: lload         9
254: invokevirtual #26
257: ldc           #27
259: invokevirtual #25
262: lconst_0
263: invokevirtual #26
266: ldc           #24
268: invokevirtual #25
271: invokevirtual #28
274: lload         9
276: lconst_0
277: lcmp
278: ifne          285
281: iconst_1
282: goto          286
285: iconst_0
286: invokestatic  #29
289: new           #22
292: dup
293: invokespecial #23
296: ldc           #24
298: invokevirtual #25
301: lload         11
303: invokevirtual #26
306: ldc           #27
308: invokevirtual #25
311: lconst_0
312: invokevirtual #26
315: ldc           #24
317: invokevirtual #25
320: invokevirtual #28
323: lload         11
325: lconst_0
326: lcmp
327: ifne          334
330: iconst_1
331: goto          335
334: iconst_0
335: invokestatic  #29
338: new           #22
341: dup
342: invokespecial #23
345: ldc           #24
347: invokevirtual #25
350: iload         17
352: invokevirtual #41
355: ldc           #27
357: invokevirtual #25
360: iconst_1
361: invokevirtual #41
364: ldc           #24
366: invokevirtual #25
369: invokevirtual #28
372: iload         17
374: iconst_1
375: if_icmpne     382
378: iconst_1
379: goto          383
382: iconst_0
383: invokestatic  #29
386: new           #22
389: dup
390: invokespecial #23
393: ldc           #24
395: invokevirtual #25
398: iload         18
400: invokevirtual #41
403: ldc           #27
405: invokevirtual #25
408: iconst_1
409: invokevirtual #41
412: ldc           #24
414: invokevirtual #25
417: invokevirtual #28
420: iload         18
422: iconst_1
423: if_icmpne     430
426: iconst_1
427: goto          431
430: iconst_0
431: invokestatic  #29
434: return
Exception table:
from    to  target type
164   181   184   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test113
Start line: 4051
End line: 0
Method source code: 
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry15 = null;
        boolean boolean16 = tarArchiveInputStream7.canReadEntryData(archiveEntry15);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream17 = archiveStreamFactory0.createArchiveInputStream("././@LongLink", (java.io.InputStream) tarArchiveInputStream7);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ././@LongLink not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #480
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aconst_null
113: astore        13
115: aload         9
117: aload         13
119: invokevirtual #116
122: istore        14
124: aload_1
125: ldc_w         #320
128: aload         9
130: invokevirtual #38
133: astore        15
135: ldc_w         #481
138: invokestatic  #20
141: goto          146
144: astore        15
146: new           #22
149: dup
150: invokespecial #23
153: ldc           #24
155: invokevirtual #25
158: lload         4
160: invokevirtual #26
163: ldc           #27
165: invokevirtual #25
168: lconst_0
169: invokevirtual #26
172: ldc           #24
174: invokevirtual #25
177: invokevirtual #28
180: lload         4
182: lconst_0
183: lcmp
184: ifne          191
187: iconst_1
188: goto          192
191: iconst_0
192: invokestatic  #29
195: new           #22
198: dup
199: invokespecial #23
202: ldc           #24
204: invokevirtual #25
207: lload         6
209: invokevirtual #26
212: ldc           #27
214: invokevirtual #25
217: lconst_0
218: invokevirtual #26
221: ldc           #24
223: invokevirtual #25
226: invokevirtual #28
229: lload         6
231: lconst_0
232: lcmp
233: ifne          240
236: iconst_1
237: goto          241
240: iconst_0
241: invokestatic  #29
244: aload         10
246: invokestatic  #168
249: aload         11
251: invokestatic  #168
254: new           #22
257: dup
258: invokespecial #23
261: ldc           #24
263: invokevirtual #25
266: iload         14
268: invokevirtual #69
271: ldc           #27
273: invokevirtual #25
276: iconst_0
277: invokevirtual #69
280: ldc           #24
282: invokevirtual #25
285: invokevirtual #28
288: iload         14
290: ifne          297
293: iconst_1
294: goto          298
297: iconst_0
298: invokestatic  #29
301: return
Exception table:
from    to  target type
124   141   144   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test114
Start line: 4082
End line: 0
Method source code: 
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        int int11 = tarArchiveOutputStream4.getCount();
        java.io.File file12 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry14 = tarArchiveOutputStream4.createArchiveEntry(file12, "-       0 070701");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #482
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload_3
83: invokevirtual #60
86: istore        10
88: aconst_null
89: astore        11
91: aload_3
92: aload         11
94: ldc_w         #483
97: invokevirtual #86
100: astore        12
102: ldc           #51
104: invokestatic  #20
107: goto          112
110: astore        12
112: new           #22
115: dup
116: invokespecial #23
119: ldc           #24
121: invokevirtual #25
124: lload         4
126: invokevirtual #26
129: ldc           #27
131: invokevirtual #25
134: lconst_0
135: invokevirtual #26
138: ldc           #24
140: invokevirtual #25
143: invokevirtual #28
146: lload         4
148: lconst_0
149: lcmp
150: ifne          157
153: iconst_1
154: goto          158
157: iconst_0
158: invokestatic  #29
161: aload         6
163: invokestatic  #53
166: new           #22
169: dup
170: invokespecial #23
173: ldc           #24
175: invokevirtual #25
178: lload         7
180: invokevirtual #26
183: ldc           #27
185: invokevirtual #25
188: lconst_0
189: invokevirtual #26
192: ldc           #24
194: invokevirtual #25
197: invokevirtual #28
200: lload         7
202: lconst_0
203: lcmp
204: ifne          211
207: iconst_1
208: goto          212
211: iconst_0
212: invokestatic  #29
215: new           #22
218: dup
219: invokespecial #23
222: ldc           #24
224: invokevirtual #25
227: iload         10
229: invokevirtual #41
232: ldc           #27
234: invokevirtual #25
237: iconst_0
238: invokevirtual #41
241: ldc           #24
243: invokevirtual #25
246: invokevirtual #28
249: iload         10
251: ifne          258
254: iconst_1
255: goto          259
258: iconst_0
259: invokestatic  #29
262: return
Exception table:
from    to  target type
91   107   110   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test115
Start line: 4109
End line: 0
Method source code: 
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        java.io.OutputStream outputStream20 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream21 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!!", outputStream20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: OutputStream must not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #484
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aconst_null
137: astore        16
139: aload_1
140: ldc_w         #485
143: aload         16
145: invokevirtual #49
148: astore        17
150: ldc           #106
152: invokestatic  #20
155: goto          160
158: astore        17
160: new           #22
163: dup
164: invokespecial #23
167: ldc           #24
169: invokevirtual #25
172: lload         4
174: invokevirtual #26
177: ldc           #27
179: invokevirtual #25
182: lconst_0
183: invokevirtual #26
186: ldc           #24
188: invokevirtual #25
191: invokevirtual #28
194: lload         4
196: lconst_0
197: lcmp
198: ifne          205
201: iconst_1
202: goto          206
205: iconst_0
206: invokestatic  #29
209: aload         6
211: invokestatic  #53
214: new           #22
217: dup
218: invokespecial #23
221: ldc           #24
223: invokevirtual #25
226: lload         9
228: invokevirtual #26
231: ldc           #27
233: invokevirtual #25
236: lconst_0
237: invokevirtual #26
240: ldc           #24
242: invokevirtual #25
245: invokevirtual #28
248: lload         9
250: lconst_0
251: lcmp
252: ifne          259
255: iconst_1
256: goto          260
259: iconst_0
260: invokestatic  #29
263: new           #22
266: dup
267: invokespecial #23
270: ldc           #24
272: invokevirtual #25
275: lload         11
277: invokevirtual #26
280: ldc           #27
282: invokevirtual #25
285: lconst_0
286: invokevirtual #26
289: ldc           #24
291: invokevirtual #25
294: invokevirtual #28
297: lload         11
299: lconst_0
300: lcmp
301: ifne          308
304: iconst_1
305: goto          309
308: iconst_0
309: invokestatic  #29
312: aload         15
314: invokestatic  #53
317: return
Exception table:
from    to  target type
139   155   158   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test116
Start line: 4143
End line: 0
Method source code: 
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(false);
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream28 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, (short) (byte) 120);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown format: 120");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #486
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: new           #73
81: dup
82: lconst_0
83: invokespecial #74
86: astore        9
88: aload         9
90: invokevirtual #75
93: astore        10
95: new           #73
98: dup
99: lconst_0
100: invokespecial #74
103: astore        11
105: aload         11
107: invokevirtual #75
110: astore        12
112: aload         10
114: aload         12
116: iconst_1
117: invokestatic  #177
120: istore        13
122: aload         10
124: invokestatic  #192
127: istore        14
129: aload_3
130: aload         10
132: iconst_4
133: iconst_m1
134: invokevirtual #63
137: aload_3
138: iconst_1
139: invokevirtual #148
142: aload_3
143: iconst_0
144: invokevirtual #148
147: new           #143
150: dup
151: aload_3
152: bipush        120
154: invokespecial #474
157: astore        15
159: ldc_w         #487
162: invokestatic  #20
165: goto          170
168: astore        15
170: new           #22
173: dup
174: invokespecial #23
177: ldc           #24
179: invokevirtual #25
182: lload         4
184: invokevirtual #26
187: ldc           #27
189: invokevirtual #25
192: lconst_0
193: invokevirtual #26
196: ldc           #24
198: invokevirtual #25
201: invokevirtual #28
204: lload         4
206: lconst_0
207: lcmp
208: ifne          215
211: iconst_1
212: goto          216
215: iconst_0
216: invokestatic  #29
219: aload         6
221: invokestatic  #53
224: new           #22
227: dup
228: invokespecial #23
231: ldc           #24
233: invokevirtual #25
236: iload         7
238: invokevirtual #41
241: ldc           #27
243: invokevirtual #25
246: iconst_0
247: invokevirtual #41
250: ldc           #24
252: invokevirtual #25
255: invokevirtual #28
258: iload         7
260: ifne          267
263: iconst_1
264: goto          268
267: iconst_0
268: invokestatic  #29
271: new           #22
274: dup
275: invokespecial #23
278: ldc           #24
280: invokevirtual #25
283: iload         8
285: invokevirtual #41
288: ldc           #27
290: invokevirtual #25
293: iconst_0
294: invokevirtual #41
297: ldc           #24
299: invokevirtual #25
302: invokevirtual #28
305: iload         8
307: ifne          314
310: iconst_1
311: goto          315
314: iconst_0
315: invokestatic  #29
318: aload         10
320: invokestatic  #53
323: aload         10
325: invokestatic  #66
328: ldc           #77
330: invokestatic  #68
333: aload         12
335: invokestatic  #53
338: aload         12
340: invokestatic  #66
343: ldc           #77
345: invokestatic  #68
348: new           #22
351: dup
352: invokespecial #23
355: ldc           #24
357: invokevirtual #25
360: iload         13
362: invokevirtual #69
365: ldc           #27
367: invokevirtual #25
370: iconst_1
371: invokevirtual #69
374: ldc           #24
376: invokevirtual #25
379: invokevirtual #28
382: iload         13
384: iconst_1
385: if_icmpne     392
388: iconst_1
389: goto          393
392: iconst_0
393: invokestatic  #29
396: new           #22
399: dup
400: invokespecial #23
403: ldc           #24
405: invokevirtual #25
408: iload         14
410: invokevirtual #69
413: ldc           #27
415: invokevirtual #25
418: iconst_1
419: invokevirtual #69
422: ldc           #24
424: invokevirtual #25
427: invokevirtual #28
430: iload         14
432: iconst_1
433: if_icmpne     440
436: iconst_1
437: goto          441
440: iconst_0
441: invokestatic  #29
444: return
Exception table:
from    to  target type
147   165   168   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test117
Start line: 4183
End line: 0
Method source code: 
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream10);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int14 = tarArchiveEntry13.getDevMinor();
        tarArchiveEntry13.setIds((int) (short) 3, 0);
        int int18 = tarArchiveEntry13.getDevMajor();
        boolean boolean19 = tarArchiveEntry13.isFile();
        java.io.InputStream inputStream20 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream21 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream20);
        long long22 = jarArchiveInputStream21.getBytesRead();
        long long23 = jarArchiveInputStream21.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream24 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream21);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream25 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream21);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream26 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream25);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream26, "070702", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry33 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry33.setDevMinor((int) ' ');
        boolean boolean36 = cpioArchiveInputStream26.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry33);
        boolean boolean37 = tarArchiveEntry13.equals((java.lang.Object) tarArchiveEntry33);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry39 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int40 = tarArchiveEntry39.getDevMinor();
        tarArchiveEntry39.setUserId(0);
        java.io.File file43 = tarArchiveEntry39.getFile();
        long long44 = tarArchiveEntry39.getSize();
        java.lang.String str45 = tarArchiveEntry39.getGroupName();
        int int46 = tarArchiveEntry39.getUserId();
        boolean boolean47 = tarArchiveEntry13.isDescendent(tarArchiveEntry39);
        tarArchiveEntry13.setUserName("x5S");
        try {
            cpioArchiveOutputStream11.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.cpio.CpioArchiveEntry");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(file43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #488
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: new           #222
80: dup
81: aload         7
83: invokespecial #223
86: astore        8
88: new           #143
91: dup
92: aload         8
94: invokespecial #144
97: astore        9
99: new           #112
102: dup
103: ldc           #44
105: invokespecial #120
108: astore        10
110: aload         10
112: invokevirtual #129
115: istore        11
117: aload         10
119: iconst_3
120: iconst_0
121: invokevirtual #130
124: aload         10
126: invokevirtual #131
129: istore        12
131: aload         10
133: invokevirtual #132
136: istore        13
138: aconst_null
139: astore        14
141: new           #10
144: dup
145: aload         14
147: invokespecial #11
150: astore        15
152: aload         15
154: invokevirtual #12
157: lstore        16
159: aload         15
161: invokevirtual #12
164: lstore        18
166: new           #13
169: dup
170: aload         15
172: invokespecial #14
175: astore        20
177: new           #31
180: dup
181: aload         15
183: invokespecial #32
186: astore        21
188: new           #33
191: dup
192: aload         21
194: invokespecial #34
197: astore        22
199: new           #15
202: dup
203: aload         22
205: ldc           #111
207: iconst_0
208: iconst_0
209: invokespecial #17
212: astore        23
214: new           #112
217: dup
218: ldc           #61
220: iconst_0
221: invokespecial #113
224: astore        24
226: aload         24
228: bipush        32
230: invokevirtual #114
233: aload         22
235: aload         24
237: invokevirtual #115
240: istore        25
242: aload         10
244: aload         24
246: invokevirtual #133
249: istore        26
251: new           #112
254: dup
255: ldc           #44
257: invokespecial #120
260: astore        27
262: aload         27
264: invokevirtual #129
267: istore        28
269: aload         27
271: iconst_0
272: invokevirtual #272
275: aload         27
277: invokevirtual #395
280: astore        29
282: aload         27
284: invokevirtual #156
287: lstore        30
289: aload         27
291: invokevirtual #376
294: astore        32
296: aload         27
298: invokevirtual #489
301: istore        33
303: aload         10
305: aload         27
307: invokevirtual #277
310: istore        34
312: aload         10
314: ldc           #153
316: invokevirtual #274
319: aload         9
321: aload         10
323: invokevirtual #347
326: ldc_w         #348
329: invokestatic  #20
332: goto          337
335: astore        35
337: new           #22
340: dup
341: invokespecial #23
344: ldc           #24
346: invokevirtual #25
349: lload         4
351: invokevirtual #26
354: ldc           #27
356: invokevirtual #25
359: lconst_0
360: invokevirtual #26
363: ldc           #24
365: invokevirtual #25
368: invokevirtual #28
371: lload         4
373: lconst_0
374: lcmp
375: ifne          382
378: iconst_1
379: goto          383
382: iconst_0
383: invokestatic  #29
386: aload         6
388: invokestatic  #53
391: new           #22
394: dup
395: invokespecial #23
398: ldc           #24
400: invokevirtual #25
403: iload         11
405: invokevirtual #41
408: ldc           #27
410: invokevirtual #25
413: iconst_0
414: invokevirtual #41
417: ldc           #24
419: invokevirtual #25
422: invokevirtual #28
425: iload         11
427: ifne          434
430: iconst_1
431: goto          435
434: iconst_0
435: invokestatic  #29
438: new           #22
441: dup
442: invokespecial #23
445: ldc           #24
447: invokevirtual #25
450: iload         12
452: invokevirtual #41
455: ldc           #27
457: invokevirtual #25
460: iconst_0
461: invokevirtual #41
464: ldc           #24
466: invokevirtual #25
469: invokevirtual #28
472: iload         12
474: ifne          481
477: iconst_1
478: goto          482
481: iconst_0
482: invokestatic  #29
485: new           #22
488: dup
489: invokespecial #23
492: ldc           #24
494: invokevirtual #25
497: iload         13
499: invokevirtual #69
502: ldc           #27
504: invokevirtual #25
507: iconst_1
508: invokevirtual #69
511: ldc           #24
513: invokevirtual #25
516: invokevirtual #28
519: iload         13
521: iconst_1
522: if_icmpne     529
525: iconst_1
526: goto          530
529: iconst_0
530: invokestatic  #29
533: new           #22
536: dup
537: invokespecial #23
540: ldc           #24
542: invokevirtual #25
545: lload         16
547: invokevirtual #26
550: ldc           #27
552: invokevirtual #25
555: lconst_0
556: invokevirtual #26
559: ldc           #24
561: invokevirtual #25
564: invokevirtual #28
567: lload         16
569: lconst_0
570: lcmp
571: ifne          578
574: iconst_1
575: goto          579
578: iconst_0
579: invokestatic  #29
582: new           #22
585: dup
586: invokespecial #23
589: ldc           #24
591: invokevirtual #25
594: lload         18
596: invokevirtual #26
599: ldc           #27
601: invokevirtual #25
604: lconst_0
605: invokevirtual #26
608: ldc           #24
610: invokevirtual #25
613: invokevirtual #28
616: lload         18
618: lconst_0
619: lcmp
620: ifne          627
623: iconst_1
624: goto          628
627: iconst_0
628: invokestatic  #29
631: new           #22
634: dup
635: invokespecial #23
638: ldc           #24
640: invokevirtual #25
643: iload         25
645: invokevirtual #69
648: ldc           #27
650: invokevirtual #25
653: iconst_1
654: invokevirtual #69
657: ldc           #24
659: invokevirtual #25
662: invokevirtual #28
665: iload         25
667: iconst_1
668: if_icmpne     675
671: iconst_1
672: goto          676
675: iconst_0
676: invokestatic  #29
679: new           #22
682: dup
683: invokespecial #23
686: ldc           #24
688: invokevirtual #25
691: iload         26
693: invokevirtual #69
696: ldc           #27
698: invokevirtual #25
701: iconst_0
702: invokevirtual #69
705: ldc           #24
707: invokevirtual #25
710: invokevirtual #28
713: iload         26
715: ifne          722
718: iconst_1
719: goto          723
722: iconst_0
723: invokestatic  #29
726: new           #22
729: dup
730: invokespecial #23
733: ldc           #24
735: invokevirtual #25
738: iload         28
740: invokevirtual #41
743: ldc           #27
745: invokevirtual #25
748: iconst_0
749: invokevirtual #41
752: ldc           #24
754: invokevirtual #25
757: invokevirtual #28
760: iload         28
762: ifne          769
765: iconst_1
766: goto          770
769: iconst_0
770: invokestatic  #29
773: aload         29
775: invokestatic  #168
778: new           #22
781: dup
782: invokespecial #23
785: ldc           #24
787: invokevirtual #25
790: lload         30
792: invokevirtual #26
795: ldc           #27
797: invokevirtual #25
800: lconst_0
801: invokevirtual #26
804: ldc           #24
806: invokevirtual #25
809: invokevirtual #28
812: lload         30
814: lconst_0
815: lcmp
816: ifne          823
819: iconst_1
820: goto          824
823: iconst_0
824: invokestatic  #29
827: new           #22
830: dup
831: invokespecial #23
834: ldc           #24
836: invokevirtual #25
839: aload         32
841: invokevirtual #25
844: ldc           #219
846: invokevirtual #25
849: invokevirtual #28
852: aload         32
854: ldc           #61
856: invokestatic  #154
859: new           #22
862: dup
863: invokespecial #23
866: ldc           #24
868: invokevirtual #25
871: iload         33
873: invokevirtual #41
876: ldc           #27
878: invokevirtual #25
881: iconst_0
882: invokevirtual #41
885: ldc           #24
887: invokevirtual #25
890: invokevirtual #28
893: iload         33
895: ifne          902
898: iconst_1
899: goto          903
902: iconst_0
903: invokestatic  #29
906: new           #22
909: dup
910: invokespecial #23
913: ldc           #24
915: invokevirtual #25
918: iload         34
920: invokevirtual #69
923: ldc           #27
925: invokevirtual #25
928: iconst_1
929: invokevirtual #69
932: ldc           #24
934: invokevirtual #25
937: invokevirtual #28
940: iload         34
942: iconst_1
943: if_icmpne     950
946: iconst_1
947: goto          951
950: iconst_0
951: invokestatic  #29
954: return
Exception table:
from    to  target type
319   332   335   Class java/lang/ClassCastException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test118
Start line: 4246
End line: 0
Method source code: 
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        try {
            tarArchiveOutputStream4.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #490
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: aload_3
73: invokevirtual #248
76: ldc           #51
78: invokestatic  #20
81: goto          86
84: astore        9
86: new           #22
89: dup
90: invokespecial #23
93: ldc           #24
95: invokevirtual #25
98: lload         4
100: invokevirtual #26
103: ldc           #27
105: invokevirtual #25
108: lconst_0
109: invokevirtual #26
112: ldc           #24
114: invokevirtual #25
117: invokevirtual #28
120: lload         4
122: lconst_0
123: lcmp
124: ifne          131
127: iconst_1
128: goto          132
131: iconst_0
132: invokestatic  #29
135: aload         6
137: invokestatic  #53
140: new           #22
143: dup
144: invokespecial #23
147: ldc           #24
149: invokevirtual #25
152: lload         7
154: invokevirtual #26
157: ldc           #27
159: invokevirtual #25
162: lconst_0
163: invokevirtual #26
166: ldc           #24
168: invokevirtual #25
171: invokevirtual #28
174: lload         7
176: lconst_0
177: lcmp
178: ifne          185
181: iconst_1
182: goto          186
185: iconst_0
186: invokestatic  #29
189: return
Exception table:
from    to  target type
72    81    84   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test119
Start line: 4269
End line: 0
Method source code: 
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        try {
            tarArchiveOutputStream4.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #491
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #71
70: ldc           #51
72: invokestatic  #20
75: goto          80
78: astore        7
80: new           #22
83: dup
84: invokespecial #23
87: ldc           #24
89: invokevirtual #25
92: lload         4
94: invokevirtual #26
97: ldc           #27
99: invokevirtual #25
102: lconst_0
103: invokevirtual #26
106: ldc           #24
108: invokevirtual #25
111: invokevirtual #28
114: lload         4
116: lconst_0
117: lcmp
118: ifne          125
121: iconst_1
122: goto          126
125: iconst_0
126: invokestatic  #29
129: aload         6
131: invokestatic  #53
134: return
Exception table:
from    to  target type
66    75    78   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test120
Start line: 4290
End line: 0
Method source code: 
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.OutputStream outputStream17 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream19 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream17, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream20 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream17);
        zipArchiveOutputStream20.setMethod(8192);
        zipArchiveOutputStream20.setUseLanguageEncodingFlag(true);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream25 = archiveStreamFactory0.createArchiveOutputStream("", (java.io.OutputStream) zipArchiveOutputStream20);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver:  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #492
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #43
128: dup
129: aload         14
131: ldc           #44
133: invokespecial #45
136: astore        15
138: new           #182
141: dup
142: aload         14
144: invokespecial #183
147: astore        16
149: aload         16
151: sipush        8192
154: invokevirtual #339
157: aload         16
159: iconst_1
160: invokevirtual #285
163: aload_1
164: ldc           #61
166: aload         16
168: invokevirtual #49
171: astore        17
173: ldc           #204
175: invokestatic  #20
178: goto          183
181: astore        17
183: new           #22
186: dup
187: invokespecial #23
190: ldc           #24
192: invokevirtual #25
195: lload         4
197: invokevirtual #26
200: ldc           #27
202: invokevirtual #25
205: lconst_0
206: invokevirtual #26
209: ldc           #24
211: invokevirtual #25
214: invokevirtual #28
217: lload         4
219: lconst_0
220: lcmp
221: ifne          228
224: iconst_1
225: goto          229
228: iconst_0
229: invokestatic  #29
232: new           #22
235: dup
236: invokespecial #23
239: ldc           #24
241: invokevirtual #25
244: lload         6
246: invokevirtual #26
249: ldc           #27
251: invokevirtual #25
254: lconst_0
255: invokevirtual #26
258: ldc           #24
260: invokevirtual #25
263: invokevirtual #28
266: lload         6
268: lconst_0
269: lcmp
270: ifne          277
273: iconst_1
274: goto          278
277: iconst_0
278: invokestatic  #29
281: aload         10
283: invokestatic  #168
286: aload         11
288: invokestatic  #168
291: aload         13
293: invokestatic  #53
296: return
Exception table:
from    to  target type
163   178   181   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test121
Start line: 4325
End line: 0
Method source code: 
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry2 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("ar", (byte) 0);
        long long3 = tarArchiveEntry2.getSize();
        boolean boolean4 = tarArchiveEntry2.isSymbolicLink();
        java.lang.String str5 = tarArchiveEntry2.getName();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry7 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory8 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        tarArchiveOutputStream12.count(0L);
        long long15 = tarArchiveOutputStream12.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream16 = archiveStreamFactory8.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream12);
        boolean boolean17 = tarArchiveEntry7.equals((java.lang.Object) "ar");
        long long18 = tarArchiveEntry7.getSize();
        java.lang.String str19 = tarArchiveEntry7.getName();
        boolean boolean20 = tarArchiveEntry2.equals(tarArchiveEntry7);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ar" + "'", str5, "ar");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.apache.commons.compress.archivers.ArchiveException: ustar\000" + "'", str19, "org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #493
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #48
31: iconst_0
32: invokespecial #113
35: astore_1
36: aload_1
37: invokevirtual #156
40: lstore_2
41: aload_1
42: invokevirtual #494
45: istore        4
47: aload_1
48: invokevirtual #276
51: astore        5
53: new           #112
56: dup
57: ldc           #225
59: invokespecial #120
62: astore        6
64: new           #8
67: dup
68: invokespecial #9
71: astore        7
73: aconst_null
74: astore        8
76: new           #43
79: dup
80: aload         8
82: ldc           #44
84: invokespecial #45
87: astore        9
89: aload         9
91: lconst_0
92: invokevirtual #46
95: aload         9
97: invokevirtual #47
100: lstore        10
102: aload         7
104: ldc           #48
106: aload         9
108: invokevirtual #49
111: astore        12
113: aload         6
115: ldc           #48
117: invokevirtual #133
120: istore        13
122: aload         6
124: invokevirtual #156
127: lstore        14
129: aload         6
131: invokevirtual #276
134: astore        16
136: aload_1
137: aload         6
139: invokevirtual #377
142: istore        17
144: new           #22
147: dup
148: invokespecial #23
151: ldc           #24
153: invokevirtual #25
156: lload_2
157: invokevirtual #26
160: ldc           #27
162: invokevirtual #25
165: lconst_0
166: invokevirtual #26
169: ldc           #24
171: invokevirtual #25
174: invokevirtual #28
177: lload_2
178: lconst_0
179: lcmp
180: ifne          187
183: iconst_1
184: goto          188
187: iconst_0
188: invokestatic  #29
191: new           #22
194: dup
195: invokespecial #23
198: ldc           #24
200: invokevirtual #25
203: iload         4
205: invokevirtual #69
208: ldc           #27
210: invokevirtual #25
213: iconst_0
214: invokevirtual #69
217: ldc           #24
219: invokevirtual #25
222: invokevirtual #28
225: iload         4
227: ifne          234
230: iconst_1
231: goto          235
234: iconst_0
235: invokestatic  #29
238: new           #22
241: dup
242: invokespecial #23
245: ldc           #24
247: invokevirtual #25
250: aload         5
252: invokevirtual #25
255: ldc_w         #495
258: invokevirtual #25
261: invokevirtual #28
264: aload         5
266: ldc           #48
268: invokestatic  #154
271: new           #22
274: dup
275: invokespecial #23
278: ldc           #24
280: invokevirtual #25
283: lload         10
285: invokevirtual #26
288: ldc           #27
290: invokevirtual #25
293: lconst_0
294: invokevirtual #26
297: ldc           #24
299: invokevirtual #25
302: invokevirtual #28
305: lload         10
307: lconst_0
308: lcmp
309: ifne          316
312: iconst_1
313: goto          317
316: iconst_0
317: invokestatic  #29
320: aload         12
322: invokestatic  #53
325: new           #22
328: dup
329: invokespecial #23
332: ldc           #24
334: invokevirtual #25
337: iload         13
339: invokevirtual #69
342: ldc           #27
344: invokevirtual #25
347: iconst_0
348: invokevirtual #69
351: ldc           #24
353: invokevirtual #25
356: invokevirtual #28
359: iload         13
361: ifne          368
364: iconst_1
365: goto          369
368: iconst_0
369: invokestatic  #29
372: new           #22
375: dup
376: invokespecial #23
379: ldc           #24
381: invokevirtual #25
384: lload         14
386: invokevirtual #26
389: ldc           #27
391: invokevirtual #25
394: lconst_0
395: invokevirtual #26
398: ldc           #24
400: invokevirtual #25
403: invokevirtual #28
406: lload         14
408: lconst_0
409: lcmp
410: ifne          417
413: iconst_1
414: goto          418
417: iconst_0
418: invokestatic  #29
421: new           #22
424: dup
425: invokespecial #23
428: ldc           #24
430: invokevirtual #25
433: aload         16
435: invokevirtual #25
438: ldc_w         #496
441: invokevirtual #25
444: invokevirtual #28
447: aload         16
449: ldc           #225
451: invokestatic  #154
454: new           #22
457: dup
458: invokespecial #23
461: ldc           #24
463: invokevirtual #25
466: iload         17
468: invokevirtual #69
471: ldc           #27
473: invokevirtual #25
476: iconst_0
477: invokevirtual #69
480: ldc           #24
482: invokevirtual #25
485: invokevirtual #28
488: iload         17
490: ifne          497
493: iconst_1
494: goto          498
497: iconst_0
498: invokestatic  #29
501: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test122
Start line: 4355
End line: 0
Method source code: 
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int13 = tarArchiveEntry12.getDevMinor();
        tarArchiveEntry12.setIds((int) (short) 3, 0);
        java.lang.String str17 = tarArchiveEntry12.getGroupName();
        java.util.Date date18 = tarArchiveEntry12.getModTime();
        boolean boolean19 = tarArchiveEntry12.isDirectory();
        try {
            jarArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.zip.ZipArchiveEntry");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #497
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: new           #222
80: dup
81: aload         6
83: invokespecial #223
86: astore        8
88: new           #112
91: dup
92: ldc           #44
94: invokespecial #120
97: astore        9
99: aload         9
101: invokevirtual #129
104: istore        10
106: aload         9
108: iconst_3
109: iconst_0
110: invokevirtual #130
113: aload         9
115: invokevirtual #376
118: astore        11
120: aload         9
122: invokevirtual #123
125: astore        12
127: aload         9
129: invokevirtual #378
132: istore        13
134: aload         8
136: aload         9
138: invokevirtual #396
141: ldc_w         #397
144: invokestatic  #20
147: goto          152
150: astore        14
152: new           #22
155: dup
156: invokespecial #23
159: ldc           #24
161: invokevirtual #25
164: lload         4
166: invokevirtual #26
169: ldc           #27
171: invokevirtual #25
174: lconst_0
175: invokevirtual #26
178: ldc           #24
180: invokevirtual #25
183: invokevirtual #28
186: lload         4
188: lconst_0
189: lcmp
190: ifne          197
193: iconst_1
194: goto          198
197: iconst_0
198: invokestatic  #29
201: aload         6
203: invokestatic  #53
206: new           #22
209: dup
210: invokespecial #23
213: ldc           #24
215: invokevirtual #25
218: iload         10
220: invokevirtual #41
223: ldc           #27
225: invokevirtual #25
228: iconst_0
229: invokevirtual #41
232: ldc           #24
234: invokevirtual #25
237: invokevirtual #28
240: iload         10
242: ifne          249
245: iconst_1
246: goto          250
249: iconst_0
250: invokestatic  #29
253: new           #22
256: dup
257: invokespecial #23
260: ldc           #24
262: invokevirtual #25
265: aload         11
267: invokevirtual #25
270: ldc           #219
272: invokevirtual #25
275: invokevirtual #28
278: aload         11
280: ldc           #61
282: invokestatic  #154
285: aload         12
287: invokestatic  #53
290: new           #22
293: dup
294: invokespecial #23
297: ldc           #24
299: invokevirtual #25
302: iload         13
304: invokevirtual #69
307: ldc           #27
309: invokevirtual #25
312: iconst_0
313: invokevirtual #69
316: ldc           #24
318: invokevirtual #25
321: invokevirtual #28
324: iload         13
326: ifne          333
329: iconst_1
330: goto          334
333: iconst_0
334: invokestatic  #29
337: return
Exception table:
from    to  target type
134   147   150   Class java/lang/ClassCastException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test123
Start line: 4389
End line: 0
Method source code: 
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry26 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry27 = jarArchiveInputStream18.getNextJarEntry();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertNull(archiveEntry26);
        org.junit.Assert.assertNull(jarArchiveEntry27);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #498
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aload         15
196: invokevirtual #166
199: astore        24
201: aload         15
203: invokevirtual #499
206: astore        25
208: new           #22
211: dup
212: invokespecial #23
215: ldc           #24
217: invokevirtual #25
220: lload         4
222: invokevirtual #26
225: ldc           #27
227: invokevirtual #25
230: lconst_0
231: invokevirtual #26
234: ldc           #24
236: invokevirtual #25
239: invokevirtual #28
242: lload         4
244: lconst_0
245: lcmp
246: ifne          253
249: iconst_1
250: goto          254
253: iconst_0
254: invokestatic  #29
257: new           #22
260: dup
261: invokespecial #23
264: ldc           #24
266: invokevirtual #25
269: lload         6
271: invokevirtual #26
274: ldc           #27
276: invokevirtual #25
279: lconst_0
280: invokevirtual #26
283: ldc           #24
285: invokevirtual #25
288: invokevirtual #28
291: lload         6
293: lconst_0
294: lcmp
295: ifne          302
298: iconst_1
299: goto          303
302: iconst_0
303: invokestatic  #29
306: aload         10
308: invokestatic  #168
311: aload         11
313: invokestatic  #168
316: aload         13
318: invokestatic  #53
321: new           #22
324: dup
325: invokespecial #23
328: ldc           #24
330: invokevirtual #25
333: lload         16
335: invokevirtual #26
338: ldc           #27
340: invokevirtual #25
343: lconst_0
344: invokevirtual #26
347: ldc           #24
349: invokevirtual #25
352: invokevirtual #28
355: lload         16
357: lconst_0
358: lcmp
359: ifne          366
362: iconst_1
363: goto          367
366: iconst_0
367: invokestatic  #29
370: new           #22
373: dup
374: invokespecial #23
377: ldc           #24
379: invokevirtual #25
382: lload         18
384: invokevirtual #26
387: ldc           #27
389: invokevirtual #25
392: lconst_0
393: invokevirtual #26
396: ldc           #24
398: invokevirtual #25
401: invokevirtual #28
404: lload         18
406: lconst_0
407: lcmp
408: ifne          415
411: iconst_1
412: goto          416
415: iconst_0
416: invokestatic  #29
419: aload         21
421: invokestatic  #168
424: aload         23
426: invokestatic  #53
429: aload         24
431: invokestatic  #168
434: aload         25
436: invokestatic  #168
439: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test124
Start line: 4429
End line: 0
Method source code: 
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        jarArchiveOutputStream12.setEncoding("5");
        jarArchiveOutputStream12.setFallbackToUTF8(true);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry19 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry19.setDevMinor((int) ' ');
        tarArchiveEntry19.setGroupName("\000\000");
        long long24 = tarArchiveEntry19.getSize();
        java.util.Date date25 = tarArchiveEntry19.getLastModifiedDate();
        java.io.File file26 = tarArchiveEntry19.getFile();
        int int27 = tarArchiveEntry19.getGroupId();
        tarArchiveEntry19.setIds(2048, (int) (byte) 50);
        java.io.InputStream inputStream31 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream32 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream31);
        long long33 = jarArchiveInputStream32.getBytesRead();
        long long34 = jarArchiveInputStream32.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream35 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream32);
        arArchiveInputStream35.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream39 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream35, 24576, 255);
        boolean boolean40 = tarArchiveEntry19.equals((java.lang.Object) arArchiveInputStream35);
        boolean boolean41 = tarArchiveEntry19.isLink();
        boolean boolean42 = jarArchiveOutputStream12.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry19);
        try {
            jarArchiveOutputStream12.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertNull(file26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #500
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: aload         10
105: ldc_w         #458
108: invokevirtual #459
111: aload         10
113: iconst_1
114: invokevirtual #501
117: new           #112
120: dup
121: ldc           #61
123: iconst_0
124: invokespecial #113
127: astore        11
129: aload         11
131: bipush        32
133: invokevirtual #114
136: aload         11
138: ldc           #244
140: invokevirtual #245
143: aload         11
145: invokevirtual #156
148: lstore        12
150: aload         11
152: invokevirtual #122
155: astore        14
157: aload         11
159: invokevirtual #395
162: astore        15
164: aload         11
166: invokevirtual #502
169: istore        16
171: aload         11
173: sipush        2048
176: bipush        50
178: invokevirtual #130
181: aconst_null
182: astore        17
184: new           #10
187: dup
188: aload         17
190: invokespecial #11
193: astore        18
195: aload         18
197: invokevirtual #12
200: lstore        19
202: aload         18
204: invokevirtual #12
207: lstore        21
209: new           #13
212: dup
213: aload         18
215: invokespecial #14
218: astore        23
220: aload         23
222: invokevirtual #140
225: new           #31
228: dup
229: aload         23
231: sipush        24576
234: sipush        255
237: invokespecial #108
240: astore        24
242: aload         11
244: aload         23
246: invokevirtual #133
249: istore        25
251: aload         11
253: invokevirtual #394
256: istore        26
258: aload         10
260: aload         11
262: invokevirtual #503
265: istore        27
267: aload         10
269: invokevirtual #504
272: ldc           #51
274: invokestatic  #20
277: goto          282
280: astore        28
282: new           #22
285: dup
286: invokespecial #23
289: ldc           #24
291: invokevirtual #25
294: lload         4
296: invokevirtual #26
299: ldc           #27
301: invokevirtual #25
304: lconst_0
305: invokevirtual #26
308: ldc           #24
310: invokevirtual #25
313: invokevirtual #28
316: lload         4
318: lconst_0
319: lcmp
320: ifne          327
323: iconst_1
324: goto          328
327: iconst_0
328: invokestatic  #29
331: aload         6
333: invokestatic  #53
336: new           #22
339: dup
340: invokespecial #23
343: ldc           #24
345: invokevirtual #25
348: iload         7
350: invokevirtual #41
353: ldc           #27
355: invokevirtual #25
358: iconst_0
359: invokevirtual #41
362: ldc           #24
364: invokevirtual #25
367: invokevirtual #28
370: iload         7
372: ifne          379
375: iconst_1
376: goto          380
379: iconst_0
380: invokestatic  #29
383: new           #22
386: dup
387: invokespecial #23
390: ldc           #24
392: invokevirtual #25
395: lload         12
397: invokevirtual #26
400: ldc           #27
402: invokevirtual #25
405: lconst_0
406: invokevirtual #26
409: ldc           #24
411: invokevirtual #25
414: invokevirtual #28
417: lload         12
419: lconst_0
420: lcmp
421: ifne          428
424: iconst_1
425: goto          429
428: iconst_0
429: invokestatic  #29
432: aload         14
434: invokestatic  #53
437: aload         15
439: invokestatic  #168
442: new           #22
445: dup
446: invokespecial #23
449: ldc           #24
451: invokevirtual #25
454: iload         16
456: invokevirtual #41
459: ldc           #27
461: invokevirtual #25
464: iconst_0
465: invokevirtual #41
468: ldc           #24
470: invokevirtual #25
473: invokevirtual #28
476: iload         16
478: ifne          485
481: iconst_1
482: goto          486
485: iconst_0
486: invokestatic  #29
489: new           #22
492: dup
493: invokespecial #23
496: ldc           #24
498: invokevirtual #25
501: lload         19
503: invokevirtual #26
506: ldc           #27
508: invokevirtual #25
511: lconst_0
512: invokevirtual #26
515: ldc           #24
517: invokevirtual #25
520: invokevirtual #28
523: lload         19
525: lconst_0
526: lcmp
527: ifne          534
530: iconst_1
531: goto          535
534: iconst_0
535: invokestatic  #29
538: new           #22
541: dup
542: invokespecial #23
545: ldc           #24
547: invokevirtual #25
550: lload         21
552: invokevirtual #26
555: ldc           #27
557: invokevirtual #25
560: lconst_0
561: invokevirtual #26
564: ldc           #24
566: invokevirtual #25
569: invokevirtual #28
572: lload         21
574: lconst_0
575: lcmp
576: ifne          583
579: iconst_1
580: goto          584
583: iconst_0
584: invokestatic  #29
587: new           #22
590: dup
591: invokespecial #23
594: ldc           #24
596: invokevirtual #25
599: iload         25
601: invokevirtual #69
604: ldc           #27
606: invokevirtual #25
609: iconst_0
610: invokevirtual #69
613: ldc           #24
615: invokevirtual #25
618: invokevirtual #28
621: iload         25
623: ifne          630
626: iconst_1
627: goto          631
630: iconst_0
631: invokestatic  #29
634: new           #22
637: dup
638: invokespecial #23
641: ldc           #24
643: invokevirtual #25
646: iload         26
648: invokevirtual #69
651: ldc           #27
653: invokevirtual #25
656: iconst_0
657: invokevirtual #69
660: ldc           #24
662: invokevirtual #25
665: invokevirtual #28
668: iload         26
670: ifne          677
673: iconst_1
674: goto          678
677: iconst_0
678: invokestatic  #29
681: new           #22
684: dup
685: invokespecial #23
688: ldc           #24
690: invokevirtual #25
693: iload         27
695: invokevirtual #69
698: ldc           #27
700: invokevirtual #25
703: iconst_0
704: invokevirtual #69
707: ldc           #24
709: invokevirtual #25
712: invokevirtual #28
715: iload         27
717: ifne          724
720: iconst_1
721: goto          725
724: iconst_0
725: invokestatic  #29
728: return
Exception table:
from    to  target type
267   277   280   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test125
Start line: 4485
End line: 0
Method source code: 
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        boolean boolean19 = arArchiveInputStream15.markSupported();
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry20 = arArchiveInputStream15.getNextEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: The stream is closed");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #505
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aload         14
138: invokevirtual #426
141: istore        16
143: aload         14
145: invokevirtual #506
148: astore        17
150: ldc_w         #507
153: invokestatic  #20
156: goto          161
159: astore        17
161: new           #22
164: dup
165: invokespecial #23
168: ldc           #24
170: invokevirtual #25
173: lload         4
175: invokevirtual #26
178: ldc           #27
180: invokevirtual #25
183: lconst_0
184: invokevirtual #26
187: ldc           #24
189: invokevirtual #25
192: invokevirtual #28
195: lload         4
197: lconst_0
198: lcmp
199: ifne          206
202: iconst_1
203: goto          207
206: iconst_0
207: invokestatic  #29
210: aload         6
212: invokestatic  #53
215: new           #22
218: dup
219: invokespecial #23
222: ldc           #24
224: invokevirtual #25
227: lload         9
229: invokevirtual #26
232: ldc           #27
234: invokevirtual #25
237: lconst_0
238: invokevirtual #26
241: ldc           #24
243: invokevirtual #25
246: invokevirtual #28
249: lload         9
251: lconst_0
252: lcmp
253: ifne          260
256: iconst_1
257: goto          261
260: iconst_0
261: invokestatic  #29
264: new           #22
267: dup
268: invokespecial #23
271: ldc           #24
273: invokevirtual #25
276: lload         11
278: invokevirtual #26
281: ldc           #27
283: invokevirtual #25
286: lconst_0
287: invokevirtual #26
290: ldc           #24
292: invokevirtual #25
295: invokevirtual #28
298: lload         11
300: lconst_0
301: lcmp
302: ifne          309
305: iconst_1
306: goto          310
309: iconst_0
310: invokestatic  #29
313: aload         15
315: invokestatic  #53
318: new           #22
321: dup
322: invokespecial #23
325: ldc           #24
327: invokevirtual #25
330: iload         16
332: invokevirtual #69
335: ldc           #27
337: invokevirtual #25
340: iconst_0
341: invokevirtual #69
344: ldc           #24
346: invokevirtual #25
349: invokevirtual #28
352: iload         16
354: ifne          361
357: iconst_1
358: goto          362
361: iconst_0
362: invokestatic  #29
365: return
Exception table:
from    to  target type
143   156   159   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test126
Start line: 4520
End line: 0
Method source code: 
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(4);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("encryption");
        boolean boolean15 = tarArchiveEntry14.isDirectory();
        try {
            arArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry14);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.ar.ArArchiveEntry");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #508
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: iconst_4
85: invokevirtual #399
88: new           #112
91: dup
92: ldc_w         #393
95: invokespecial #120
98: astore        10
100: aload         10
102: invokevirtual #378
105: istore        11
107: aload         9
109: aload         10
111: invokevirtual #288
114: ldc_w         #452
117: invokestatic  #20
120: goto          125
123: astore        12
125: new           #22
128: dup
129: invokespecial #23
132: ldc           #24
134: invokevirtual #25
137: lload         4
139: invokevirtual #26
142: ldc           #27
144: invokevirtual #25
147: lconst_0
148: invokevirtual #26
151: ldc           #24
153: invokevirtual #25
156: invokevirtual #28
159: lload         4
161: lconst_0
162: lcmp
163: ifne          170
166: iconst_1
167: goto          171
170: iconst_0
171: invokestatic  #29
174: aload         6
176: invokestatic  #53
179: new           #22
182: dup
183: invokespecial #23
186: ldc           #24
188: invokevirtual #25
191: lload         7
193: invokevirtual #26
196: ldc           #27
198: invokevirtual #25
201: lconst_0
202: invokevirtual #26
205: ldc           #24
207: invokevirtual #25
210: invokevirtual #28
213: lload         7
215: lconst_0
216: lcmp
217: ifne          224
220: iconst_1
221: goto          225
224: iconst_0
225: invokestatic  #29
228: new           #22
231: dup
232: invokespecial #23
235: ldc           #24
237: invokevirtual #25
240: iload         11
242: invokevirtual #69
245: ldc           #27
247: invokevirtual #25
250: iconst_0
251: invokevirtual #69
254: ldc           #24
256: invokevirtual #25
259: invokevirtual #28
262: iload         11
264: ifne          271
267: iconst_1
268: goto          272
271: iconst_0
272: invokestatic  #29
275: return
Exception table:
from    to  target type
107   120   123   Class java/lang/ClassCastException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test127
Start line: 4548
End line: 0
Method source code: 
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        boolean boolean13 = tarArchiveEntry1.isFile();
        tarArchiveEntry1.setLinkName("org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!!");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #509
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: invokevirtual #132
98: istore        11
100: aload_1
101: ldc_w         #485
104: invokevirtual #433
107: new           #22
110: dup
111: invokespecial #23
114: ldc           #24
116: invokevirtual #25
119: lload         5
121: invokevirtual #26
124: ldc           #27
126: invokevirtual #25
129: lconst_0
130: invokevirtual #26
133: ldc           #24
135: invokevirtual #25
138: invokevirtual #28
141: lload         5
143: lconst_0
144: lcmp
145: ifne          152
148: iconst_1
149: goto          153
152: iconst_0
153: invokestatic  #29
156: aload         7
158: invokestatic  #53
161: new           #22
164: dup
165: invokespecial #23
168: ldc           #24
170: invokevirtual #25
173: iload         8
175: invokevirtual #69
178: ldc           #27
180: invokevirtual #25
183: iconst_0
184: invokevirtual #69
187: ldc           #24
189: invokevirtual #25
192: invokevirtual #28
195: iload         8
197: ifne          204
200: iconst_1
201: goto          205
204: iconst_0
205: invokestatic  #29
208: new           #22
211: dup
212: invokespecial #23
215: ldc           #24
217: invokevirtual #25
220: lload         9
222: invokevirtual #26
225: ldc           #27
227: invokevirtual #25
230: lconst_0
231: invokevirtual #26
234: ldc           #24
236: invokevirtual #25
239: invokevirtual #28
242: lload         9
244: lconst_0
245: lcmp
246: ifne          253
249: iconst_1
250: goto          254
253: iconst_0
254: invokestatic  #29
257: new           #22
260: dup
261: invokespecial #23
264: ldc           #24
266: invokevirtual #25
269: iload         11
271: invokevirtual #69
274: ldc           #27
276: invokevirtual #25
279: iconst_1
280: invokevirtual #69
283: ldc           #24
285: invokevirtual #25
288: invokevirtual #28
291: iload         11
293: iconst_1
294: if_icmpne     301
297: iconst_1
298: goto          302
301: iconst_0
302: invokestatic  #29
305: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test128
Start line: 4570
End line: 0
Method source code: 
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        java.lang.String str20 = zipArchiveOutputStream13.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry24 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int25 = tarArchiveEntry24.getDevMinor();
        tarArchiveEntry24.setIds((int) (short) 3, 0);
        long long29 = tarArchiveEntry24.getSize();
        tarArchiveEntry24.setSize((long) 8192);
        boolean boolean32 = tarArchiveEntry24.isGlobalPaxHeader();
        int int33 = tarArchiveEntry24.getUserId();
        tarArchiveEntry24.setDevMinor(2048);
        tarArchiveEntry24.setNames("0\000", "always");
        try {
            cpioArchiveOutputStream21.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry24);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.cpio.CpioArchiveEntry");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #510
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: aload         9
125: invokevirtual #310
128: astore        13
130: new           #143
133: dup
134: aload         9
136: invokespecial #144
139: astore        14
141: aload_1
142: ldc           #164
144: aload         14
146: invokevirtual #49
149: astore        15
151: new           #112
154: dup
155: ldc           #44
157: invokespecial #120
160: astore        16
162: aload         16
164: invokevirtual #129
167: istore        17
169: aload         16
171: iconst_3
172: iconst_0
173: invokevirtual #130
176: aload         16
178: invokevirtual #156
181: lstore        18
183: aload         16
185: ldc2_w        #341
188: invokevirtual #330
191: aload         16
193: invokevirtual #511
196: istore        20
198: aload         16
200: invokevirtual #489
203: istore        21
205: aload         16
207: sipush        2048
210: invokevirtual #114
213: aload         16
215: ldc_w         #424
218: ldc           #79
220: invokevirtual #125
223: aload         14
225: aload         16
227: invokevirtual #347
230: ldc_w         #348
233: invokestatic  #20
236: goto          241
239: astore        22
241: new           #22
244: dup
245: invokespecial #23
248: ldc           #24
250: invokevirtual #25
253: lload         4
255: invokevirtual #26
258: ldc           #27
260: invokevirtual #25
263: lconst_0
264: invokevirtual #26
267: ldc           #24
269: invokevirtual #25
272: invokevirtual #28
275: lload         4
277: lconst_0
278: lcmp
279: ifne          286
282: iconst_1
283: goto          287
286: iconst_0
287: invokestatic  #29
290: aload         6
292: invokestatic  #53
295: new           #22
298: dup
299: invokespecial #23
302: ldc           #24
304: invokevirtual #25
307: iload         11
309: invokevirtual #69
312: ldc           #27
314: invokevirtual #25
317: iconst_0
318: invokevirtual #69
321: ldc           #24
323: invokevirtual #25
326: invokevirtual #28
329: iload         11
331: ifne          338
334: iconst_1
335: goto          339
338: iconst_0
339: invokestatic  #29
342: new           #22
345: dup
346: invokespecial #23
349: ldc           #24
351: invokevirtual #25
354: iload         12
356: invokevirtual #69
359: ldc           #27
361: invokevirtual #25
364: iconst_0
365: invokevirtual #69
368: ldc           #24
370: invokevirtual #25
373: invokevirtual #28
376: iload         12
378: ifne          385
381: iconst_1
382: goto          386
385: iconst_0
386: invokestatic  #29
389: new           #22
392: dup
393: invokespecial #23
396: ldc           #24
398: invokevirtual #25
401: aload         13
403: invokevirtual #25
406: ldc_w         #317
409: invokevirtual #25
412: invokevirtual #28
415: aload         13
417: ldc           #85
419: invokestatic  #154
422: aload         15
424: invokestatic  #53
427: new           #22
430: dup
431: invokespecial #23
434: ldc           #24
436: invokevirtual #25
439: iload         17
441: invokevirtual #41
444: ldc           #27
446: invokevirtual #25
449: iconst_0
450: invokevirtual #41
453: ldc           #24
455: invokevirtual #25
458: invokevirtual #28
461: iload         17
463: ifne          470
466: iconst_1
467: goto          471
470: iconst_0
471: invokestatic  #29
474: new           #22
477: dup
478: invokespecial #23
481: ldc           #24
483: invokevirtual #25
486: lload         18
488: invokevirtual #26
491: ldc           #27
493: invokevirtual #25
496: lconst_0
497: invokevirtual #26
500: ldc           #24
502: invokevirtual #25
505: invokevirtual #28
508: lload         18
510: lconst_0
511: lcmp
512: ifne          519
515: iconst_1
516: goto          520
519: iconst_0
520: invokestatic  #29
523: new           #22
526: dup
527: invokespecial #23
530: ldc           #24
532: invokevirtual #25
535: iload         20
537: invokevirtual #69
540: ldc           #27
542: invokevirtual #25
545: iconst_0
546: invokevirtual #69
549: ldc           #24
551: invokevirtual #25
554: invokevirtual #28
557: iload         20
559: ifne          566
562: iconst_1
563: goto          567
566: iconst_0
567: invokestatic  #29
570: new           #22
573: dup
574: invokespecial #23
577: ldc           #24
579: invokevirtual #25
582: iload         21
584: invokevirtual #41
587: ldc           #27
589: invokevirtual #25
592: iconst_3
593: invokevirtual #41
596: ldc           #24
598: invokevirtual #25
601: invokevirtual #28
604: iload         21
606: iconst_3
607: if_icmpne     614
610: iconst_1
611: goto          615
614: iconst_0
615: invokestatic  #29
618: return
Exception table:
from    to  target type
223   236   239   Class java/lang/ClassCastException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test129
Start line: 4619
End line: 0
Method source code: 
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream2 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream1);
        long long3 = jarArchiveInputStream2.getBytesRead();
        long long4 = jarArchiveInputStream2.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream2);
        arArchiveInputStream5.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream5);
        tarArchiveInputStream7.mark((int) (byte) 53);
        boolean boolean10 = tarArchiveInputStream7.markSupported();
        long long12 = tarArchiveInputStream7.skip((-1L));
        tarArchiveInputStream7.close();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream14 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) tarArchiveInputStream7);
        int int15 = tarArchiveInputStream7.getCount();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream16 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #512
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: aload         8
68: invokevirtual #140
71: new           #31
74: dup
75: aload         8
77: invokespecial #32
80: astore        9
82: aload         9
84: bipush        53
86: invokevirtual #178
89: aload         9
91: invokevirtual #513
94: istore        10
96: aload         9
98: ldc2_w        #297
101: invokevirtual #514
104: lstore        11
106: aload         9
108: invokevirtual #363
111: new           #10
114: dup
115: aload         9
117: invokespecial #11
120: astore        13
122: aload         9
124: invokevirtual #515
127: istore        14
129: aload_1
130: aload         9
132: invokevirtual #18
135: astore        15
137: ldc           #19
139: invokestatic  #20
142: goto          147
145: astore        15
147: new           #22
150: dup
151: invokespecial #23
154: ldc           #24
156: invokevirtual #25
159: lload         4
161: invokevirtual #26
164: ldc           #27
166: invokevirtual #25
169: lconst_0
170: invokevirtual #26
173: ldc           #24
175: invokevirtual #25
178: invokevirtual #28
181: lload         4
183: lconst_0
184: lcmp
185: ifne          192
188: iconst_1
189: goto          193
192: iconst_0
193: invokestatic  #29
196: new           #22
199: dup
200: invokespecial #23
203: ldc           #24
205: invokevirtual #25
208: lload         6
210: invokevirtual #26
213: ldc           #27
215: invokevirtual #25
218: lconst_0
219: invokevirtual #26
222: ldc           #24
224: invokevirtual #25
227: invokevirtual #28
230: lload         6
232: lconst_0
233: lcmp
234: ifne          241
237: iconst_1
238: goto          242
241: iconst_0
242: invokestatic  #29
245: new           #22
248: dup
249: invokespecial #23
252: ldc           #24
254: invokevirtual #25
257: iload         10
259: invokevirtual #69
262: ldc           #27
264: invokevirtual #25
267: iconst_0
268: invokevirtual #69
271: ldc           #24
273: invokevirtual #25
276: invokevirtual #28
279: iload         10
281: ifne          288
284: iconst_1
285: goto          289
288: iconst_0
289: invokestatic  #29
292: new           #22
295: dup
296: invokespecial #23
299: ldc           #24
301: invokevirtual #25
304: lload         11
306: invokevirtual #26
309: ldc           #27
311: invokevirtual #25
314: lconst_0
315: invokevirtual #26
318: ldc           #24
320: invokevirtual #25
323: invokevirtual #28
326: lload         11
328: lconst_0
329: lcmp
330: ifne          337
333: iconst_1
334: goto          338
337: iconst_0
338: invokestatic  #29
341: new           #22
344: dup
345: invokespecial #23
348: ldc           #24
350: invokevirtual #25
353: iload         14
355: invokevirtual #41
358: ldc           #27
360: invokevirtual #25
363: iconst_0
364: invokevirtual #41
367: ldc           #24
369: invokevirtual #25
372: invokevirtual #28
375: iload         14
377: ifne          384
380: iconst_1
381: goto          385
384: iconst_0
385: invokestatic  #29
388: return
Exception table:
from    to  target type
129   142   145   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test130
Start line: 4651
End line: 0
Method source code: 
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(4);
        try {
            arArchiveOutputStream10.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #516
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: iconst_4
85: invokevirtual #399
88: aload         9
90: invokevirtual #242
93: ldc           #51
95: invokestatic  #20
98: goto          103
101: astore        10
103: new           #22
106: dup
107: invokespecial #23
110: ldc           #24
112: invokevirtual #25
115: lload         4
117: invokevirtual #26
120: ldc           #27
122: invokevirtual #25
125: lconst_0
126: invokevirtual #26
129: ldc           #24
131: invokevirtual #25
134: invokevirtual #28
137: lload         4
139: lconst_0
140: lcmp
141: ifne          148
144: iconst_1
145: goto          149
148: iconst_0
149: invokestatic  #29
152: aload         6
154: invokestatic  #53
157: new           #22
160: dup
161: invokespecial #23
164: ldc           #24
166: invokevirtual #25
169: lload         7
171: invokevirtual #26
174: ldc           #27
176: invokevirtual #25
179: lconst_0
180: invokevirtual #26
183: ldc           #24
185: invokevirtual #25
188: invokevirtual #28
191: lload         7
193: lconst_0
194: lcmp
195: ifne          202
198: iconst_1
199: goto          203
202: iconst_0
203: invokestatic  #29
206: return
Exception table:
from    to  target type
88    98   101   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test131
Start line: 4676
End line: 0
Method source code: 
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        tarArchiveOutputStream4.count(0);
        try {
            tarArchiveOutputStream4.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #517
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: iconst_0
68: invokevirtual #356
71: aload_3
72: invokevirtual #207
75: ldc           #83
77: invokestatic  #20
80: goto          85
83: astore        7
85: new           #22
88: dup
89: invokespecial #23
92: ldc           #24
94: invokevirtual #25
97: lload         4
99: invokevirtual #26
102: ldc           #27
104: invokevirtual #25
107: lconst_0
108: invokevirtual #26
111: ldc           #24
113: invokevirtual #25
116: invokevirtual #28
119: lload         4
121: lconst_0
122: lcmp
123: ifne          130
126: iconst_1
127: goto          131
130: iconst_0
131: invokestatic  #29
134: aload         6
136: invokestatic  #53
139: return
Exception table:
from    to  target type
71    80    83   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test132
Start line: 4698
End line: 0
Method source code: 
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        java.lang.String str20 = zipArchiveOutputStream13.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21);
        java.io.InputStream inputStream24 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24);
        long long26 = jarArchiveInputStream25.getBytesRead();
        long long27 = jarArchiveInputStream25.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream32 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28, "00", true, false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry34 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int35 = tarArchiveEntry34.getDevMinor();
        tarArchiveEntry34.setIds((int) (short) 3, 0);
        int int39 = tarArchiveEntry34.getDevMajor();
        boolean boolean40 = tarArchiveEntry34.isFile();
        java.io.InputStream inputStream41 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream42 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream41);
        long long43 = jarArchiveInputStream42.getBytesRead();
        long long44 = jarArchiveInputStream42.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream45 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream42);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream46 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream42);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream47 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream46);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream51 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream47, "070702", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry54 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry54.setDevMinor((int) ' ');
        boolean boolean57 = cpioArchiveInputStream47.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry54);
        boolean boolean58 = tarArchiveEntry34.equals((java.lang.Object) tarArchiveEntry54);
        boolean boolean59 = tarArchiveEntry54.isExtended();
        tarArchiveEntry54.setIds(32, 29127);
        boolean boolean63 = tarArchiveEntry54.isExtended();
        boolean boolean64 = zipArchiveInputStream32.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry54);
        boolean boolean65 = zipArchiveInputStream32.markSupported();
        zipArchiveInputStream32.close();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream67 = archiveStreamFactory0.createArchiveInputStream("\000\ufffd\000\000", (java.io.InputStream) zipArchiveInputStream32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #518
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: aload         9
125: invokevirtual #310
128: astore        13
130: new           #143
133: dup
134: aload         9
136: invokespecial #144
139: astore        14
141: aload_1
142: ldc           #164
144: aload         14
146: invokevirtual #49
149: astore        15
151: aconst_null
152: astore        16
154: new           #10
157: dup
158: aload         16
160: invokespecial #11
163: astore        17
165: aload         17
167: invokevirtual #12
170: lstore        18
172: aload         17
174: invokevirtual #12
177: lstore        20
179: new           #13
182: dup
183: aload         17
185: invokespecial #14
188: astore        22
190: new           #15
193: dup
194: aload         22
196: ldc           #16
198: iconst_1
199: iconst_0
200: invokespecial #17
203: astore        23
205: new           #112
208: dup
209: ldc           #44
211: invokespecial #120
214: astore        24
216: aload         24
218: invokevirtual #129
221: istore        25
223: aload         24
225: iconst_3
226: iconst_0
227: invokevirtual #130
230: aload         24
232: invokevirtual #131
235: istore        26
237: aload         24
239: invokevirtual #132
242: istore        27
244: aconst_null
245: astore        28
247: new           #10
250: dup
251: aload         28
253: invokespecial #11
256: astore        29
258: aload         29
260: invokevirtual #12
263: lstore        30
265: aload         29
267: invokevirtual #12
270: lstore        32
272: new           #13
275: dup
276: aload         29
278: invokespecial #14
281: astore        34
283: new           #31
286: dup
287: aload         29
289: invokespecial #32
292: astore        35
294: new           #33
297: dup
298: aload         35
300: invokespecial #34
303: astore        36
305: new           #15
308: dup
309: aload         36
311: ldc           #111
313: iconst_0
314: iconst_0
315: invokespecial #17
318: astore        37
320: new           #112
323: dup
324: ldc           #61
326: iconst_0
327: invokespecial #113
330: astore        38
332: aload         38
334: bipush        32
336: invokevirtual #114
339: aload         36
341: aload         38
343: invokevirtual #115
346: istore        39
348: aload         24
350: aload         38
352: invokevirtual #133
355: istore        40
357: aload         38
359: invokevirtual #134
362: istore        41
364: aload         38
366: bipush        32
368: sipush        29127
371: invokevirtual #130
374: aload         38
376: invokevirtual #134
379: istore        42
381: aload         23
383: aload         38
385: invokevirtual #135
388: istore        43
390: aload         23
392: invokevirtual #519
395: istore        44
397: aload         23
399: invokevirtual #520
402: aload_1
403: ldc_w         #353
406: aload         23
408: invokevirtual #38
411: astore        45
413: ldc           #118
415: invokestatic  #20
418: goto          423
421: astore        45
423: new           #22
426: dup
427: invokespecial #23
430: ldc           #24
432: invokevirtual #25
435: lload         4
437: invokevirtual #26
440: ldc           #27
442: invokevirtual #25
445: lconst_0
446: invokevirtual #26
449: ldc           #24
451: invokevirtual #25
454: invokevirtual #28
457: lload         4
459: lconst_0
460: lcmp
461: ifne          468
464: iconst_1
465: goto          469
468: iconst_0
469: invokestatic  #29
472: aload         6
474: invokestatic  #53
477: new           #22
480: dup
481: invokespecial #23
484: ldc           #24
486: invokevirtual #25
489: iload         11
491: invokevirtual #69
494: ldc           #27
496: invokevirtual #25
499: iconst_0
500: invokevirtual #69
503: ldc           #24
505: invokevirtual #25
508: invokevirtual #28
511: iload         11
513: ifne          520
516: iconst_1
517: goto          521
520: iconst_0
521: invokestatic  #29
524: new           #22
527: dup
528: invokespecial #23
531: ldc           #24
533: invokevirtual #25
536: iload         12
538: invokevirtual #69
541: ldc           #27
543: invokevirtual #25
546: iconst_0
547: invokevirtual #69
550: ldc           #24
552: invokevirtual #25
555: invokevirtual #28
558: iload         12
560: ifne          567
563: iconst_1
564: goto          568
567: iconst_0
568: invokestatic  #29
571: new           #22
574: dup
575: invokespecial #23
578: ldc           #24
580: invokevirtual #25
583: aload         13
585: invokevirtual #25
588: ldc_w         #317
591: invokevirtual #25
594: invokevirtual #28
597: aload         13
599: ldc           #85
601: invokestatic  #154
604: aload         15
606: invokestatic  #53
609: new           #22
612: dup
613: invokespecial #23
616: ldc           #24
618: invokevirtual #25
621: lload         18
623: invokevirtual #26
626: ldc           #27
628: invokevirtual #25
631: lconst_0
632: invokevirtual #26
635: ldc           #24
637: invokevirtual #25
640: invokevirtual #28
643: lload         18
645: lconst_0
646: lcmp
647: ifne          654
650: iconst_1
651: goto          655
654: iconst_0
655: invokestatic  #29
658: new           #22
661: dup
662: invokespecial #23
665: ldc           #24
667: invokevirtual #25
670: lload         20
672: invokevirtual #26
675: ldc           #27
677: invokevirtual #25
680: lconst_0
681: invokevirtual #26
684: ldc           #24
686: invokevirtual #25
689: invokevirtual #28
692: lload         20
694: lconst_0
695: lcmp
696: ifne          703
699: iconst_1
700: goto          704
703: iconst_0
704: invokestatic  #29
707: new           #22
710: dup
711: invokespecial #23
714: ldc           #24
716: invokevirtual #25
719: iload         25
721: invokevirtual #41
724: ldc           #27
726: invokevirtual #25
729: iconst_0
730: invokevirtual #41
733: ldc           #24
735: invokevirtual #25
738: invokevirtual #28
741: iload         25
743: ifne          750
746: iconst_1
747: goto          751
750: iconst_0
751: invokestatic  #29
754: new           #22
757: dup
758: invokespecial #23
761: ldc           #24
763: invokevirtual #25
766: iload         26
768: invokevirtual #41
771: ldc           #27
773: invokevirtual #25
776: iconst_0
777: invokevirtual #41
780: ldc           #24
782: invokevirtual #25
785: invokevirtual #28
788: iload         26
790: ifne          797
793: iconst_1
794: goto          798
797: iconst_0
798: invokestatic  #29
801: new           #22
804: dup
805: invokespecial #23
808: ldc           #24
810: invokevirtual #25
813: iload         27
815: invokevirtual #69
818: ldc           #27
820: invokevirtual #25
823: iconst_1
824: invokevirtual #69
827: ldc           #24
829: invokevirtual #25
832: invokevirtual #28
835: iload         27
837: iconst_1
838: if_icmpne     845
841: iconst_1
842: goto          846
845: iconst_0
846: invokestatic  #29
849: new           #22
852: dup
853: invokespecial #23
856: ldc           #24
858: invokevirtual #25
861: lload         30
863: invokevirtual #26
866: ldc           #27
868: invokevirtual #25
871: lconst_0
872: invokevirtual #26
875: ldc           #24
877: invokevirtual #25
880: invokevirtual #28
883: lload         30
885: lconst_0
886: lcmp
887: ifne          894
890: iconst_1
891: goto          895
894: iconst_0
895: invokestatic  #29
898: new           #22
901: dup
902: invokespecial #23
905: ldc           #24
907: invokevirtual #25
910: lload         32
912: invokevirtual #26
915: ldc           #27
917: invokevirtual #25
920: lconst_0
921: invokevirtual #26
924: ldc           #24
926: invokevirtual #25
929: invokevirtual #28
932: lload         32
934: lconst_0
935: lcmp
936: ifne          943
939: iconst_1
940: goto          944
943: iconst_0
944: invokestatic  #29
947: new           #22
950: dup
951: invokespecial #23
954: ldc           #24
956: invokevirtual #25
959: iload         39
961: invokevirtual #69
964: ldc           #27
966: invokevirtual #25
969: iconst_1
970: invokevirtual #69
973: ldc           #24
975: invokevirtual #25
978: invokevirtual #28
981: iload         39
983: iconst_1
984: if_icmpne     991
987: iconst_1
988: goto          992
991: iconst_0
992: invokestatic  #29
995: new           #22
998: dup
999: invokespecial #23
1002: ldc           #24
1004: invokevirtual #25
1007: iload         40
1009: invokevirtual #69
1012: ldc           #27
1014: invokevirtual #25
1017: iconst_0
1018: invokevirtual #69
1021: ldc           #24
1023: invokevirtual #25
1026: invokevirtual #28
1029: iload         40
1031: ifne          1038
1034: iconst_1
1035: goto          1039
1038: iconst_0
1039: invokestatic  #29
1042: new           #22
1045: dup
1046: invokespecial #23
1049: ldc           #24
1051: invokevirtual #25
1054: iload         41
1056: invokevirtual #69
1059: ldc           #27
1061: invokevirtual #25
1064: iconst_0
1065: invokevirtual #69
1068: ldc           #24
1070: invokevirtual #25
1073: invokevirtual #28
1076: iload         41
1078: ifne          1085
1081: iconst_1
1082: goto          1086
1085: iconst_0
1086: invokestatic  #29
1089: new           #22
1092: dup
1093: invokespecial #23
1096: ldc           #24
1098: invokevirtual #25
1101: iload         42
1103: invokevirtual #69
1106: ldc           #27
1108: invokevirtual #25
1111: iconst_0
1112: invokevirtual #69
1115: ldc           #24
1117: invokevirtual #25
1120: invokevirtual #28
1123: iload         42
1125: ifne          1132
1128: iconst_1
1129: goto          1133
1132: iconst_0
1133: invokestatic  #29
1136: new           #22
1139: dup
1140: invokespecial #23
1143: ldc           #24
1145: invokevirtual #25
1148: iload         43
1150: invokevirtual #69
1153: ldc           #27
1155: invokevirtual #25
1158: iconst_0
1159: invokevirtual #69
1162: ldc           #24
1164: invokevirtual #25
1167: invokevirtual #28
1170: iload         43
1172: ifne          1179
1175: iconst_1
1176: goto          1180
1179: iconst_0
1180: invokestatic  #29
1183: new           #22
1186: dup
1187: invokespecial #23
1190: ldc           #24
1192: invokevirtual #25
1195: iload         44
1197: invokevirtual #69
1200: ldc           #27
1202: invokevirtual #25
1205: iconst_0
1206: invokevirtual #69
1209: ldc           #24
1211: invokevirtual #25
1214: invokevirtual #28
1217: iload         44
1219: ifne          1226
1222: iconst_1
1223: goto          1227
1226: iconst_0
1227: invokestatic  #29
1230: return
Exception table:
from    to  target type
402   418   421   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test133
Start line: 4776
End line: 0
Method source code: 
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        try {
            jarArchiveOutputStream11.finish();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '4' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #521
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: aload         9
105: invokevirtual #504
108: ldc_w         #414
111: invokestatic  #20
114: goto          119
117: astore        11
119: new           #22
122: dup
123: invokespecial #23
126: ldc           #24
128: invokevirtual #25
131: lload         4
133: invokevirtual #26
136: ldc           #27
138: invokevirtual #25
141: lconst_0
142: invokevirtual #26
145: ldc           #24
147: invokevirtual #25
150: invokevirtual #28
153: lload         4
155: lconst_0
156: lcmp
157: ifne          164
160: iconst_1
161: goto          165
164: iconst_0
165: invokestatic  #29
168: aload         6
170: invokestatic  #53
173: new           #22
176: dup
177: invokespecial #23
180: ldc           #24
182: invokevirtual #25
185: iload         7
187: invokevirtual #41
190: ldc           #27
192: invokevirtual #25
195: iconst_0
196: invokevirtual #41
199: ldc           #24
201: invokevirtual #25
204: invokevirtual #28
207: iload         7
209: ifne          216
212: iconst_1
213: goto          217
216: iconst_0
217: invokestatic  #29
220: return
Exception table:
from    to  target type
103   114   117   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test134
Start line: 4802
End line: 0
Method source code: 
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(false);
        long long27 = tarArchiveOutputStream4.getBytesWritten();
        byte[] byteArray33 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean34 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray33);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong35 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray33);
        boolean boolean37 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray33, (int) (byte) 50);
        java.io.InputStream inputStream38 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream39 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream38);
        long long40 = jarArchiveInputStream39.getBytesRead();
        long long41 = jarArchiveInputStream39.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream42 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream39);
        arArchiveInputStream42.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream44 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream42);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong46 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray47 = zipLong46.getBytes();
        long long48 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray47);
        int int51 = tarArchiveInputStream44.read(byteArray47, 0, (int) (short) 0);
        boolean boolean53 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray47, (int) (short) -1);
        boolean boolean55 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray33, byteArray47, false);
        boolean boolean57 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray47, 0);
        byte[] byteArray62 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean63 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray62);
        boolean boolean64 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray47, byteArray62);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong68 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray69 = zipLong68.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong70 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray69);
        long long72 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray69, (int) (short) 0);
        boolean boolean76 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray62, 33188, 0, byteArray69, 36864, 16384, false);
        boolean boolean77 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset -1.", byteArray69);
        boolean boolean78 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray69);
        try {
            tarArchiveOutputStream4.write(byteArray69, (int) (short) -1, 3);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '3' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #522
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: new           #73
81: dup
82: lconst_0
83: invokespecial #74
86: astore        9
88: aload         9
90: invokevirtual #75
93: astore        10
95: new           #73
98: dup
99: lconst_0
100: invokespecial #74
103: astore        11
105: aload         11
107: invokevirtual #75
110: astore        12
112: aload         10
114: aload         12
116: iconst_1
117: invokestatic  #177
120: istore        13
122: aload         10
124: invokestatic  #192
127: istore        14
129: aload_3
130: aload         10
132: iconst_4
133: iconst_m1
134: invokevirtual #63
137: aload_3
138: iconst_1
139: invokevirtual #148
142: aload_3
143: iconst_0
144: invokevirtual #148
147: aload_3
148: invokevirtual #47
151: lstore        15
153: iconst_4
154: newarray       byte
156: dup
157: iconst_0
158: bipush        54
160: bastore
161: dup
162: iconst_1
163: bipush        53
165: bastore
166: dup
167: iconst_2
168: iconst_1
169: bastore
170: dup
171: iconst_3
172: bipush        10
174: bastore
175: astore        17
177: aload         17
179: invokestatic  #192
182: istore        18
184: new           #73
187: dup
188: aload         17
190: invokespecial #406
193: astore        19
195: aload         17
197: bipush        50
199: invokestatic  #523
202: istore        20
204: aconst_null
205: astore        21
207: new           #10
210: dup
211: aload         21
213: invokespecial #11
216: astore        22
218: aload         22
220: invokevirtual #12
223: lstore        23
225: aload         22
227: invokevirtual #12
230: lstore        25
232: new           #13
235: dup
236: aload         22
238: invokespecial #14
241: astore        27
243: aload         27
245: invokevirtual #140
248: new           #31
251: dup
252: aload         27
254: invokespecial #32
257: astore        28
259: new           #73
262: dup
263: lconst_0
264: invokespecial #74
267: astore        29
269: aload         29
271: invokevirtual #75
274: astore        30
276: aload         30
278: invokestatic  #209
281: lstore        31
283: aload         28
285: aload         30
287: iconst_0
288: iconst_0
289: invokevirtual #174
292: istore        33
294: aload         30
296: iconst_m1
297: invokestatic  #210
300: istore        34
302: aload         17
304: aload         30
306: iconst_0
307: invokestatic  #177
310: istore        35
312: aload         30
314: iconst_0
315: invokestatic  #210
318: istore        36
320: iconst_4
321: newarray       byte
323: dup
324: iconst_0
325: bipush        54
327: bastore
328: dup
329: iconst_1
330: bipush        53
332: bastore
333: dup
334: iconst_2
335: iconst_1
336: bastore
337: dup
338: iconst_3
339: bipush        10
341: bastore
342: astore        37
344: aload         37
346: invokestatic  #192
349: istore        38
351: aload         30
353: aload         37
355: invokestatic  #407
358: istore        39
360: new           #73
363: dup
364: lconst_0
365: invokespecial #74
368: astore        40
370: aload         40
372: invokevirtual #75
375: astore        41
377: new           #73
380: dup
381: aload         41
383: invokespecial #406
386: astore        42
388: aload         41
390: iconst_0
391: invokestatic  #524
394: lstore        43
396: aload         37
398: ldc_w         #420
401: iconst_0
402: aload         41
404: ldc_w         #373
407: sipush        16384
410: iconst_0
411: invokestatic  #261
414: istore        45
416: ldc           #37
418: aload         41
420: invokestatic  #525
423: istore        46
425: aload         41
427: invokestatic  #192
430: istore        47
432: aload_3
433: aload         41
435: iconst_m1
436: iconst_3
437: invokevirtual #63
440: ldc_w         #526
443: invokestatic  #20
446: goto          451
449: astore        48
451: new           #22
454: dup
455: invokespecial #23
458: ldc           #24
460: invokevirtual #25
463: lload         4
465: invokevirtual #26
468: ldc           #27
470: invokevirtual #25
473: lconst_0
474: invokevirtual #26
477: ldc           #24
479: invokevirtual #25
482: invokevirtual #28
485: lload         4
487: lconst_0
488: lcmp
489: ifne          496
492: iconst_1
493: goto          497
496: iconst_0
497: invokestatic  #29
500: aload         6
502: invokestatic  #53
505: new           #22
508: dup
509: invokespecial #23
512: ldc           #24
514: invokevirtual #25
517: iload         7
519: invokevirtual #41
522: ldc           #27
524: invokevirtual #25
527: iconst_0
528: invokevirtual #41
531: ldc           #24
533: invokevirtual #25
536: invokevirtual #28
539: iload         7
541: ifne          548
544: iconst_1
545: goto          549
548: iconst_0
549: invokestatic  #29
552: new           #22
555: dup
556: invokespecial #23
559: ldc           #24
561: invokevirtual #25
564: iload         8
566: invokevirtual #41
569: ldc           #27
571: invokevirtual #25
574: iconst_0
575: invokevirtual #41
578: ldc           #24
580: invokevirtual #25
583: invokevirtual #28
586: iload         8
588: ifne          595
591: iconst_1
592: goto          596
595: iconst_0
596: invokestatic  #29
599: aload         10
601: invokestatic  #53
604: aload         10
606: invokestatic  #66
609: ldc           #77
611: invokestatic  #68
614: aload         12
616: invokestatic  #53
619: aload         12
621: invokestatic  #66
624: ldc           #77
626: invokestatic  #68
629: new           #22
632: dup
633: invokespecial #23
636: ldc           #24
638: invokevirtual #25
641: iload         13
643: invokevirtual #69
646: ldc           #27
648: invokevirtual #25
651: iconst_1
652: invokevirtual #69
655: ldc           #24
657: invokevirtual #25
660: invokevirtual #28
663: iload         13
665: iconst_1
666: if_icmpne     673
669: iconst_1
670: goto          674
673: iconst_0
674: invokestatic  #29
677: new           #22
680: dup
681: invokespecial #23
684: ldc           #24
686: invokevirtual #25
689: iload         14
691: invokevirtual #69
694: ldc           #27
696: invokevirtual #25
699: iconst_1
700: invokevirtual #69
703: ldc           #24
705: invokevirtual #25
708: invokevirtual #28
711: iload         14
713: iconst_1
714: if_icmpne     721
717: iconst_1
718: goto          722
721: iconst_0
722: invokestatic  #29
725: new           #22
728: dup
729: invokespecial #23
732: ldc           #24
734: invokevirtual #25
737: lload         15
739: invokevirtual #26
742: ldc           #27
744: invokevirtual #25
747: lconst_0
748: invokevirtual #26
751: ldc           #24
753: invokevirtual #25
756: invokevirtual #28
759: lload         15
761: lconst_0
762: lcmp
763: ifne          770
766: iconst_1
767: goto          771
770: iconst_0
771: invokestatic  #29
774: aload         17
776: invokestatic  #53
779: aload         17
781: invokestatic  #66
784: ldc_w         #409
787: invokestatic  #68
790: new           #22
793: dup
794: invokespecial #23
797: ldc           #24
799: invokevirtual #25
802: iload         18
804: invokevirtual #69
807: ldc           #27
809: invokevirtual #25
812: iconst_0
813: invokevirtual #69
816: ldc           #24
818: invokevirtual #25
821: invokevirtual #28
824: iload         18
826: ifne          833
829: iconst_1
830: goto          834
833: iconst_0
834: invokestatic  #29
837: new           #22
840: dup
841: invokespecial #23
844: ldc           #24
846: invokevirtual #25
849: iload         20
851: invokevirtual #69
854: ldc           #27
856: invokevirtual #25
859: iconst_0
860: invokevirtual #69
863: ldc           #24
865: invokevirtual #25
868: invokevirtual #28
871: iload         20
873: ifne          880
876: iconst_1
877: goto          881
880: iconst_0
881: invokestatic  #29
884: new           #22
887: dup
888: invokespecial #23
891: ldc           #24
893: invokevirtual #25
896: lload         23
898: invokevirtual #26
901: ldc           #27
903: invokevirtual #25
906: lconst_0
907: invokevirtual #26
910: ldc           #24
912: invokevirtual #25
915: invokevirtual #28
918: lload         23
920: lconst_0
921: lcmp
922: ifne          929
925: iconst_1
926: goto          930
929: iconst_0
930: invokestatic  #29
933: new           #22
936: dup
937: invokespecial #23
940: ldc           #24
942: invokevirtual #25
945: lload         25
947: invokevirtual #26
950: ldc           #27
952: invokevirtual #25
955: lconst_0
956: invokevirtual #26
959: ldc           #24
961: invokevirtual #25
964: invokevirtual #28
967: lload         25
969: lconst_0
970: lcmp
971: ifne          978
974: iconst_1
975: goto          979
978: iconst_0
979: invokestatic  #29
982: aload         30
984: invokestatic  #53
987: aload         30
989: invokestatic  #66
992: ldc           #77
994: invokestatic  #68
997: new           #22
1000: dup
1001: invokespecial #23
1004: ldc           #24
1006: invokevirtual #25
1009: lload         31
1011: invokevirtual #26
1014: ldc           #27
1016: invokevirtual #25
1019: lconst_0
1020: invokevirtual #26
1023: ldc           #24
1025: invokevirtual #25
1028: invokevirtual #28
1031: lload         31
1033: lconst_0
1034: lcmp
1035: ifne          1042
1038: iconst_1
1039: goto          1043
1042: iconst_0
1043: invokestatic  #29
1046: new           #22
1049: dup
1050: invokespecial #23
1053: ldc           #24
1055: invokevirtual #25
1058: iload         33
1060: invokevirtual #41
1063: ldc           #27
1065: invokevirtual #25
1068: iconst_m1
1069: invokevirtual #41
1072: ldc           #24
1074: invokevirtual #25
1077: invokevirtual #28
1080: iload         33
1082: iconst_m1
1083: if_icmpne     1090
1086: iconst_1
1087: goto          1091
1090: iconst_0
1091: invokestatic  #29
1094: new           #22
1097: dup
1098: invokespecial #23
1101: ldc           #24
1103: invokevirtual #25
1106: iload         34
1108: invokevirtual #69
1111: ldc           #27
1113: invokevirtual #25
1116: iconst_0
1117: invokevirtual #69
1120: ldc           #24
1122: invokevirtual #25
1125: invokevirtual #28
1128: iload         34
1130: ifne          1137
1133: iconst_1
1134: goto          1138
1137: iconst_0
1138: invokestatic  #29
1141: new           #22
1144: dup
1145: invokespecial #23
1148: ldc           #24
1150: invokevirtual #25
1153: iload         35
1155: invokevirtual #69
1158: ldc           #27
1160: invokevirtual #25
1163: iconst_0
1164: invokevirtual #69
1167: ldc           #24
1169: invokevirtual #25
1172: invokevirtual #28
1175: iload         35
1177: ifne          1184
1180: iconst_1
1181: goto          1185
1184: iconst_0
1185: invokestatic  #29
1188: new           #22
1191: dup
1192: invokespecial #23
1195: ldc           #24
1197: invokevirtual #25
1200: iload         36
1202: invokevirtual #69
1205: ldc           #27
1207: invokevirtual #25
1210: iconst_0
1211: invokevirtual #69
1214: ldc           #24
1216: invokevirtual #25
1219: invokevirtual #28
1222: iload         36
1224: ifne          1231
1227: iconst_1
1228: goto          1232
1231: iconst_0
1232: invokestatic  #29
1235: aload         37
1237: invokestatic  #53
1240: aload         37
1242: invokestatic  #66
1245: ldc_w         #409
1248: invokestatic  #68
1251: new           #22
1254: dup
1255: invokespecial #23
1258: ldc           #24
1260: invokevirtual #25
1263: iload         38
1265: invokevirtual #69
1268: ldc           #27
1270: invokevirtual #25
1273: iconst_0
1274: invokevirtual #69
1277: ldc           #24
1279: invokevirtual #25
1282: invokevirtual #28
1285: iload         38
1287: ifne          1294
1290: iconst_1
1291: goto          1295
1294: iconst_0
1295: invokestatic  #29
1298: new           #22
1301: dup
1302: invokespecial #23
1305: ldc           #24
1307: invokevirtual #25
1310: iload         39
1312: invokevirtual #69
1315: ldc           #27
1317: invokevirtual #25
1320: iconst_0
1321: invokevirtual #69
1324: ldc           #24
1326: invokevirtual #25
1329: invokevirtual #28
1332: iload         39
1334: ifne          1341
1337: iconst_1
1338: goto          1342
1341: iconst_0
1342: invokestatic  #29
1345: aload         41
1347: invokestatic  #53
1350: aload         41
1352: invokestatic  #66
1355: ldc           #77
1357: invokestatic  #68
1360: new           #22
1363: dup
1364: invokespecial #23
1367: ldc           #24
1369: invokevirtual #25
1372: lload         43
1374: invokevirtual #26
1377: ldc           #27
1379: invokevirtual #25
1382: lconst_0
1383: invokevirtual #26
1386: ldc           #24
1388: invokevirtual #25
1391: invokevirtual #28
1394: lload         43
1396: lconst_0
1397: lcmp
1398: ifne          1405
1401: iconst_1
1402: goto          1406
1405: iconst_0
1406: invokestatic  #29
1409: new           #22
1412: dup
1413: invokespecial #23
1416: ldc           #24
1418: invokevirtual #25
1421: iload         45
1423: invokevirtual #69
1426: ldc           #27
1428: invokevirtual #25
1431: iconst_0
1432: invokevirtual #69
1435: ldc           #24
1437: invokevirtual #25
1440: invokevirtual #28
1443: iload         45
1445: ifne          1452
1448: iconst_1
1449: goto          1453
1452: iconst_0
1453: invokestatic  #29
1456: new           #22
1459: dup
1460: invokespecial #23
1463: ldc           #24
1465: invokevirtual #25
1468: iload         46
1470: invokevirtual #69
1473: ldc           #27
1475: invokevirtual #25
1478: iconst_0
1479: invokevirtual #69
1482: ldc           #24
1484: invokevirtual #25
1487: invokevirtual #28
1490: iload         46
1492: ifne          1499
1495: iconst_1
1496: goto          1500
1499: iconst_0
1500: invokestatic  #29
1503: new           #22
1506: dup
1507: invokespecial #23
1510: ldc           #24
1512: invokevirtual #25
1515: iload         47
1517: invokevirtual #69
1520: ldc           #27
1522: invokevirtual #25
1525: iconst_1
1526: invokevirtual #69
1529: ldc           #24
1531: invokevirtual #25
1534: invokevirtual #28
1537: iload         47
1539: iconst_1
1540: if_icmpne     1547
1543: iconst_1
1544: goto          1548
1547: iconst_0
1548: invokestatic  #29
1551: return
Exception table:
from    to  target type
432   446   449   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test135
Start line: 4895
End line: 0
Method source code: 
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        arArchiveOutputStream10.flush();
        try {
            arArchiveOutputStream10.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #527
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: invokevirtual #528
100: aload         9
102: invokevirtual #242
105: ldc           #51
107: invokestatic  #20
110: goto          115
113: astore        10
115: new           #22
118: dup
119: invokespecial #23
122: ldc           #24
124: invokevirtual #25
127: lload         4
129: invokevirtual #26
132: ldc           #27
134: invokevirtual #25
137: lconst_0
138: invokevirtual #26
141: ldc           #24
143: invokevirtual #25
146: invokevirtual #28
149: lload         4
151: lconst_0
152: lcmp
153: ifne          160
156: iconst_1
157: goto          161
160: iconst_0
161: invokestatic  #29
164: aload         6
166: invokestatic  #53
169: new           #22
172: dup
173: invokespecial #23
176: ldc           #24
178: invokevirtual #25
181: lload         7
183: invokevirtual #26
186: ldc           #27
188: invokevirtual #25
191: lconst_0
192: invokevirtual #26
195: ldc           #24
197: invokevirtual #25
200: invokevirtual #28
203: lload         7
205: lconst_0
206: lcmp
207: ifne          214
210: iconst_1
211: goto          215
214: iconst_0
215: invokestatic  #29
218: return
Exception table:
from    to  target type
100   110   113   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test136
Start line: 4922
End line: 0
Method source code: 
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true);
        try {
            tarArchiveOutputStream4.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #529
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: aload_3
73: iconst_1
74: invokevirtual #148
77: aload_3
78: invokevirtual #248
81: ldc           #51
83: invokestatic  #20
86: goto          91
89: astore        9
91: new           #22
94: dup
95: invokespecial #23
98: ldc           #24
100: invokevirtual #25
103: lload         4
105: invokevirtual #26
108: ldc           #27
110: invokevirtual #25
113: lconst_0
114: invokevirtual #26
117: ldc           #24
119: invokevirtual #25
122: invokevirtual #28
125: lload         4
127: lconst_0
128: lcmp
129: ifne          136
132: iconst_1
133: goto          137
136: iconst_0
137: invokestatic  #29
140: aload         6
142: invokestatic  #53
145: new           #22
148: dup
149: invokespecial #23
152: ldc           #24
154: invokevirtual #25
157: lload         7
159: invokevirtual #26
162: ldc           #27
164: invokevirtual #25
167: lconst_0
168: invokevirtual #26
171: ldc           #24
173: invokevirtual #25
176: invokevirtual #28
179: lload         7
181: lconst_0
182: lcmp
183: ifne          190
186: iconst_1
187: goto          191
190: iconst_0
191: invokestatic  #29
194: return
Exception table:
from    to  target type
77    86    89   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test137
Start line: 4946
End line: 0
Method source code: 
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry29 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry29.setDevMinor((int) ' ');
        tarArchiveEntry29.setGroupName("\000\000");
        long long34 = tarArchiveEntry29.getSize();
        java.util.Date date35 = tarArchiveEntry29.getLastModifiedDate();
        java.io.File file36 = tarArchiveEntry29.getFile();
        int int37 = tarArchiveEntry29.getGroupId();
        tarArchiveEntry29.setIds(2048, (int) (byte) 50);
        java.io.InputStream inputStream41 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream42 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream41);
        long long43 = jarArchiveInputStream42.getBytesRead();
        long long44 = jarArchiveInputStream42.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream45 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream42);
        arArchiveInputStream45.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream49 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream45, 24576, 255);
        boolean boolean50 = tarArchiveEntry29.equals((java.lang.Object) arArchiveInputStream45);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream51 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream45);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream51, 0, 83);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream55 = archiveStreamFactory0.createArchiveInputStream("-       0 ", (java.io.InputStream) cpioArchiveInputStream51);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: -       0  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertNull(file36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #530
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: new           #112
197: dup
198: ldc           #61
200: iconst_0
201: invokespecial #113
204: astore        24
206: aload         24
208: bipush        32
210: invokevirtual #114
213: aload         24
215: ldc           #244
217: invokevirtual #245
220: aload         24
222: invokevirtual #156
225: lstore        25
227: aload         24
229: invokevirtual #122
232: astore        27
234: aload         24
236: invokevirtual #395
239: astore        28
241: aload         24
243: invokevirtual #502
246: istore        29
248: aload         24
250: sipush        2048
253: bipush        50
255: invokevirtual #130
258: aconst_null
259: astore        30
261: new           #10
264: dup
265: aload         30
267: invokespecial #11
270: astore        31
272: aload         31
274: invokevirtual #12
277: lstore        32
279: aload         31
281: invokevirtual #12
284: lstore        34
286: new           #13
289: dup
290: aload         31
292: invokespecial #14
295: astore        36
297: aload         36
299: invokevirtual #140
302: new           #31
305: dup
306: aload         36
308: sipush        24576
311: sipush        255
314: invokespecial #108
317: astore        37
319: aload         24
321: aload         36
323: invokevirtual #133
326: istore        38
328: new           #33
331: dup
332: aload         36
334: invokespecial #34
337: astore        39
339: new           #31
342: dup
343: aload         39
345: iconst_0
346: bipush        83
348: invokespecial #108
351: astore        40
353: aload_1
354: ldc_w         #531
357: aload         39
359: invokevirtual #38
362: astore        41
364: ldc_w         #532
367: invokestatic  #20
370: goto          375
373: astore        41
375: new           #22
378: dup
379: invokespecial #23
382: ldc           #24
384: invokevirtual #25
387: lload         4
389: invokevirtual #26
392: ldc           #27
394: invokevirtual #25
397: lconst_0
398: invokevirtual #26
401: ldc           #24
403: invokevirtual #25
406: invokevirtual #28
409: lload         4
411: lconst_0
412: lcmp
413: ifne          420
416: iconst_1
417: goto          421
420: iconst_0
421: invokestatic  #29
424: new           #22
427: dup
428: invokespecial #23
431: ldc           #24
433: invokevirtual #25
436: lload         6
438: invokevirtual #26
441: ldc           #27
443: invokevirtual #25
446: lconst_0
447: invokevirtual #26
450: ldc           #24
452: invokevirtual #25
455: invokevirtual #28
458: lload         6
460: lconst_0
461: lcmp
462: ifne          469
465: iconst_1
466: goto          470
469: iconst_0
470: invokestatic  #29
473: aload         10
475: invokestatic  #168
478: aload         11
480: invokestatic  #168
483: aload         13
485: invokestatic  #53
488: new           #22
491: dup
492: invokespecial #23
495: ldc           #24
497: invokevirtual #25
500: lload         16
502: invokevirtual #26
505: ldc           #27
507: invokevirtual #25
510: lconst_0
511: invokevirtual #26
514: ldc           #24
516: invokevirtual #25
519: invokevirtual #28
522: lload         16
524: lconst_0
525: lcmp
526: ifne          533
529: iconst_1
530: goto          534
533: iconst_0
534: invokestatic  #29
537: new           #22
540: dup
541: invokespecial #23
544: ldc           #24
546: invokevirtual #25
549: lload         18
551: invokevirtual #26
554: ldc           #27
556: invokevirtual #25
559: lconst_0
560: invokevirtual #26
563: ldc           #24
565: invokevirtual #25
568: invokevirtual #28
571: lload         18
573: lconst_0
574: lcmp
575: ifne          582
578: iconst_1
579: goto          583
582: iconst_0
583: invokestatic  #29
586: aload         21
588: invokestatic  #168
591: aload         23
593: invokestatic  #53
596: new           #22
599: dup
600: invokespecial #23
603: ldc           #24
605: invokevirtual #25
608: lload         25
610: invokevirtual #26
613: ldc           #27
615: invokevirtual #25
618: lconst_0
619: invokevirtual #26
622: ldc           #24
624: invokevirtual #25
627: invokevirtual #28
630: lload         25
632: lconst_0
633: lcmp
634: ifne          641
637: iconst_1
638: goto          642
641: iconst_0
642: invokestatic  #29
645: aload         27
647: invokestatic  #53
650: aload         28
652: invokestatic  #168
655: new           #22
658: dup
659: invokespecial #23
662: ldc           #24
664: invokevirtual #25
667: iload         29
669: invokevirtual #41
672: ldc           #27
674: invokevirtual #25
677: iconst_0
678: invokevirtual #41
681: ldc           #24
683: invokevirtual #25
686: invokevirtual #28
689: iload         29
691: ifne          698
694: iconst_1
695: goto          699
698: iconst_0
699: invokestatic  #29
702: new           #22
705: dup
706: invokespecial #23
709: ldc           #24
711: invokevirtual #25
714: lload         32
716: invokevirtual #26
719: ldc           #27
721: invokevirtual #25
724: lconst_0
725: invokevirtual #26
728: ldc           #24
730: invokevirtual #25
733: invokevirtual #28
736: lload         32
738: lconst_0
739: lcmp
740: ifne          747
743: iconst_1
744: goto          748
747: iconst_0
748: invokestatic  #29
751: new           #22
754: dup
755: invokespecial #23
758: ldc           #24
760: invokevirtual #25
763: lload         34
765: invokevirtual #26
768: ldc           #27
770: invokevirtual #25
773: lconst_0
774: invokevirtual #26
777: ldc           #24
779: invokevirtual #25
782: invokevirtual #28
785: lload         34
787: lconst_0
788: lcmp
789: ifne          796
792: iconst_1
793: goto          797
796: iconst_0
797: invokestatic  #29
800: new           #22
803: dup
804: invokespecial #23
807: ldc           #24
809: invokevirtual #25
812: iload         38
814: invokevirtual #69
817: ldc           #27
819: invokevirtual #25
822: iconst_0
823: invokevirtual #69
826: ldc           #24
828: invokevirtual #25
831: invokevirtual #28
834: iload         38
836: ifne          843
839: iconst_1
840: goto          844
843: iconst_0
844: invokestatic  #29
847: return
Exception table:
from    to  target type
353   370   373   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test138
Start line: 5015
End line: 0
Method source code: 
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(83);
        java.io.File file13 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry15 = arArchiveOutputStream10.createArchiveEntry(file13, "org.apache.commons.compress.archivers.dump.DumpArchiveException: -    8192 jar");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #533
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: bipush        83
86: invokevirtual #399
89: aconst_null
90: astore        10
92: aload         9
94: aload         10
96: ldc_w         #534
99: invokevirtual #400
102: astore        11
104: ldc           #51
106: invokestatic  #20
109: goto          114
112: astore        11
114: new           #22
117: dup
118: invokespecial #23
121: ldc           #24
123: invokevirtual #25
126: lload         4
128: invokevirtual #26
131: ldc           #27
133: invokevirtual #25
136: lconst_0
137: invokevirtual #26
140: ldc           #24
142: invokevirtual #25
145: invokevirtual #28
148: lload         4
150: lconst_0
151: lcmp
152: ifne          159
155: iconst_1
156: goto          160
159: iconst_0
160: invokestatic  #29
163: aload         6
165: invokestatic  #53
168: new           #22
171: dup
172: invokespecial #23
175: ldc           #24
177: invokevirtual #25
180: lload         7
182: invokevirtual #26
185: ldc           #27
187: invokevirtual #25
190: lconst_0
191: invokevirtual #26
194: ldc           #24
196: invokevirtual #25
199: invokevirtual #28
202: lload         7
204: lconst_0
205: lcmp
206: ifne          213
209: iconst_1
210: goto          214
213: iconst_0
214: invokestatic  #29
217: return
Exception table:
from    to  target type
92   109   112   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test139
Start line: 5041
End line: 0
Method source code: 
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        java.lang.String str20 = zipArchiveOutputStream13.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21);
        try {
            cpioArchiveOutputStream21.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Trying to close non-existent entry");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream22);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #535
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: aload         9
125: invokevirtual #310
128: astore        13
130: new           #143
133: dup
134: aload         9
136: invokespecial #144
139: astore        14
141: aload_1
142: ldc           #164
144: aload         14
146: invokevirtual #49
149: astore        15
151: aload         14
153: invokevirtual #189
156: ldc           #190
158: invokestatic  #20
161: goto          166
164: astore        16
166: new           #22
169: dup
170: invokespecial #23
173: ldc           #24
175: invokevirtual #25
178: lload         4
180: invokevirtual #26
183: ldc           #27
185: invokevirtual #25
188: lconst_0
189: invokevirtual #26
192: ldc           #24
194: invokevirtual #25
197: invokevirtual #28
200: lload         4
202: lconst_0
203: lcmp
204: ifne          211
207: iconst_1
208: goto          212
211: iconst_0
212: invokestatic  #29
215: aload         6
217: invokestatic  #53
220: new           #22
223: dup
224: invokespecial #23
227: ldc           #24
229: invokevirtual #25
232: iload         11
234: invokevirtual #69
237: ldc           #27
239: invokevirtual #25
242: iconst_0
243: invokevirtual #69
246: ldc           #24
248: invokevirtual #25
251: invokevirtual #28
254: iload         11
256: ifne          263
259: iconst_1
260: goto          264
263: iconst_0
264: invokestatic  #29
267: new           #22
270: dup
271: invokespecial #23
274: ldc           #24
276: invokevirtual #25
279: iload         12
281: invokevirtual #69
284: ldc           #27
286: invokevirtual #25
289: iconst_0
290: invokevirtual #69
293: ldc           #24
295: invokevirtual #25
298: invokevirtual #28
301: iload         12
303: ifne          310
306: iconst_1
307: goto          311
310: iconst_0
311: invokestatic  #29
314: new           #22
317: dup
318: invokespecial #23
321: ldc           #24
323: invokevirtual #25
326: aload         13
328: invokevirtual #25
331: ldc_w         #317
334: invokevirtual #25
337: invokevirtual #28
340: aload         13
342: ldc           #85
344: invokestatic  #154
347: aload         15
349: invokestatic  #53
352: return
Exception table:
from    to  target type
151   161   164   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test140
Start line: 5077
End line: 0
Method source code: 
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream11 = archiveStreamFactory0.createArchiveInputStream("", inputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: InputStream must not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #536
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: aload_1
70: ldc           #61
72: aload         7
74: invokevirtual #38
77: astore        8
79: ldc           #171
81: invokestatic  #20
84: goto          89
87: astore        8
89: new           #22
92: dup
93: invokespecial #23
96: ldc           #24
98: invokevirtual #25
101: lload         4
103: invokevirtual #26
106: ldc           #27
108: invokevirtual #25
111: lconst_0
112: invokevirtual #26
115: ldc           #24
117: invokevirtual #25
120: invokevirtual #28
123: lload         4
125: lconst_0
126: lcmp
127: ifne          134
130: iconst_1
131: goto          135
134: iconst_0
135: invokestatic  #29
138: aload         6
140: invokestatic  #53
143: return
Exception table:
from    to  target type
69    84    87   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test141
Start line: 5099
End line: 0
Method source code: 
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode17 = null;
        zipArchiveOutputStream13.setUseZip64(zip64Mode17);
        int int19 = zipArchiveOutputStream13.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13, (int) ' ');
        zipArchiveOutputStream13.setUseLanguageEncodingFlag(true);
        int int24 = zipArchiveOutputStream13.getCount();
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream26 = archiveStreamFactory0.createArchiveOutputStream("", (java.io.OutputStream) zipArchiveOutputStream13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver:  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #537
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aconst_null
111: astore        12
113: aload         9
115: aload         12
117: invokevirtual #224
120: aload         9
122: invokevirtual #309
125: istore        13
127: new           #43
130: dup
131: aload         9
133: bipush        32
135: invokespecial #340
138: astore        14
140: aload         9
142: iconst_1
143: invokevirtual #285
146: aload         9
148: invokevirtual #309
151: istore        15
153: new           #222
156: dup
157: aload         9
159: invokespecial #223
162: astore        16
164: aload_1
165: ldc           #61
167: aload         9
169: invokevirtual #49
172: astore        17
174: ldc           #204
176: invokestatic  #20
179: goto          184
182: astore        17
184: new           #22
187: dup
188: invokespecial #23
191: ldc           #24
193: invokevirtual #25
196: lload         4
198: invokevirtual #26
201: ldc           #27
203: invokevirtual #25
206: lconst_0
207: invokevirtual #26
210: ldc           #24
212: invokevirtual #25
215: invokevirtual #28
218: lload         4
220: lconst_0
221: lcmp
222: ifne          229
225: iconst_1
226: goto          230
229: iconst_0
230: invokestatic  #29
233: aload         6
235: invokestatic  #53
238: new           #22
241: dup
242: invokespecial #23
245: ldc           #24
247: invokevirtual #25
250: iload         11
252: invokevirtual #69
255: ldc           #27
257: invokevirtual #25
260: iconst_0
261: invokevirtual #69
264: ldc           #24
266: invokevirtual #25
269: invokevirtual #28
272: iload         11
274: ifne          281
277: iconst_1
278: goto          282
281: iconst_0
282: invokestatic  #29
285: new           #22
288: dup
289: invokespecial #23
292: ldc           #24
294: invokevirtual #25
297: iload         13
299: invokevirtual #41
302: ldc           #27
304: invokevirtual #25
307: iconst_0
308: invokevirtual #41
311: ldc           #24
313: invokevirtual #25
316: invokevirtual #28
319: iload         13
321: ifne          328
324: iconst_1
325: goto          329
328: iconst_0
329: invokestatic  #29
332: new           #22
335: dup
336: invokespecial #23
339: ldc           #24
341: invokevirtual #25
344: iload         15
346: invokevirtual #41
349: ldc           #27
351: invokevirtual #25
354: iconst_0
355: invokevirtual #41
358: ldc           #24
360: invokevirtual #25
363: invokevirtual #28
366: iload         15
368: ifne          375
371: iconst_1
372: goto          376
375: iconst_0
376: invokestatic  #29
379: return
Exception table:
from    to  target type
164   179   182   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test142
Start line: 5136
End line: 0
Method source code: 
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        arArchiveOutputStream10.setLongFileMode((int) ' ');
        arArchiveOutputStream10.setLongFileMode((int) (byte) 83);
        try {
            arArchiveOutputStream10.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #538
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: bipush        32
99: invokevirtual #399
102: aload         9
104: bipush        83
106: invokevirtual #399
109: aload         9
111: invokevirtual #539
114: ldc_w         #289
117: invokestatic  #20
120: goto          125
123: astore        10
125: new           #22
128: dup
129: invokespecial #23
132: ldc           #24
134: invokevirtual #25
137: lload         4
139: invokevirtual #26
142: ldc           #27
144: invokevirtual #25
147: lconst_0
148: invokevirtual #26
151: ldc           #24
153: invokevirtual #25
156: invokevirtual #28
159: lload         4
161: lconst_0
162: lcmp
163: ifne          170
166: iconst_1
167: goto          171
170: iconst_0
171: invokestatic  #29
174: aload         6
176: invokestatic  #53
179: new           #22
182: dup
183: invokespecial #23
186: ldc           #24
188: invokevirtual #25
191: lload         7
193: invokevirtual #26
196: ldc           #27
198: invokevirtual #25
201: lconst_0
202: invokevirtual #26
205: ldc           #24
207: invokevirtual #25
210: invokevirtual #28
213: lload         7
215: lconst_0
216: lcmp
217: ifne          224
220: iconst_1
221: goto          225
224: iconst_0
225: invokestatic  #29
228: return
Exception table:
from    to  target type
109   120   123   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test143
Start line: 5164
End line: 0
Method source code: 
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.InputStream inputStream26 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream27 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream26);
        long long28 = jarArchiveInputStream27.getBytesRead();
        long long29 = jarArchiveInputStream27.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream30 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream27);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream27);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream31);
        int int33 = cpioArchiveInputStream32.available();
        long long34 = cpioArchiveInputStream32.getBytesRead();
        long long36 = cpioArchiveInputStream32.skip((long) 8);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream37 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) cpioArchiveInputStream32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #540
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #10
200: dup
201: aload         24
203: invokespecial #11
206: astore        25
208: aload         25
210: invokevirtual #12
213: lstore        26
215: aload         25
217: invokevirtual #12
220: lstore        28
222: new           #13
225: dup
226: aload         25
228: invokespecial #14
231: astore        30
233: new           #31
236: dup
237: aload         25
239: invokespecial #32
242: astore        31
244: new           #33
247: dup
248: aload         31
250: invokespecial #34
253: astore        32
255: aload         32
257: invokevirtual #35
260: istore        33
262: aload         32
264: invokevirtual #541
267: lstore        34
269: aload         32
271: ldc2_w        #542
274: invokevirtual #162
277: lstore        36
279: aload_1
280: aload         32
282: invokevirtual #18
285: astore        38
287: ldc           #19
289: invokestatic  #20
292: goto          297
295: astore        38
297: new           #22
300: dup
301: invokespecial #23
304: ldc           #24
306: invokevirtual #25
309: lload         4
311: invokevirtual #26
314: ldc           #27
316: invokevirtual #25
319: lconst_0
320: invokevirtual #26
323: ldc           #24
325: invokevirtual #25
328: invokevirtual #28
331: lload         4
333: lconst_0
334: lcmp
335: ifne          342
338: iconst_1
339: goto          343
342: iconst_0
343: invokestatic  #29
346: new           #22
349: dup
350: invokespecial #23
353: ldc           #24
355: invokevirtual #25
358: lload         6
360: invokevirtual #26
363: ldc           #27
365: invokevirtual #25
368: lconst_0
369: invokevirtual #26
372: ldc           #24
374: invokevirtual #25
377: invokevirtual #28
380: lload         6
382: lconst_0
383: lcmp
384: ifne          391
387: iconst_1
388: goto          392
391: iconst_0
392: invokestatic  #29
395: aload         10
397: invokestatic  #168
400: aload         11
402: invokestatic  #168
405: aload         13
407: invokestatic  #53
410: new           #22
413: dup
414: invokespecial #23
417: ldc           #24
419: invokevirtual #25
422: lload         16
424: invokevirtual #26
427: ldc           #27
429: invokevirtual #25
432: lconst_0
433: invokevirtual #26
436: ldc           #24
438: invokevirtual #25
441: invokevirtual #28
444: lload         16
446: lconst_0
447: lcmp
448: ifne          455
451: iconst_1
452: goto          456
455: iconst_0
456: invokestatic  #29
459: new           #22
462: dup
463: invokespecial #23
466: ldc           #24
468: invokevirtual #25
471: lload         18
473: invokevirtual #26
476: ldc           #27
478: invokevirtual #25
481: lconst_0
482: invokevirtual #26
485: ldc           #24
487: invokevirtual #25
490: invokevirtual #28
493: lload         18
495: lconst_0
496: lcmp
497: ifne          504
500: iconst_1
501: goto          505
504: iconst_0
505: invokestatic  #29
508: aload         21
510: invokestatic  #168
513: aload         23
515: invokestatic  #53
518: new           #22
521: dup
522: invokespecial #23
525: ldc           #24
527: invokevirtual #25
530: lload         26
532: invokevirtual #26
535: ldc           #27
537: invokevirtual #25
540: lconst_0
541: invokevirtual #26
544: ldc           #24
546: invokevirtual #25
549: invokevirtual #28
552: lload         26
554: lconst_0
555: lcmp
556: ifne          563
559: iconst_1
560: goto          564
563: iconst_0
564: invokestatic  #29
567: new           #22
570: dup
571: invokespecial #23
574: ldc           #24
576: invokevirtual #25
579: lload         28
581: invokevirtual #26
584: ldc           #27
586: invokevirtual #25
589: lconst_0
590: invokevirtual #26
593: ldc           #24
595: invokevirtual #25
598: invokevirtual #28
601: lload         28
603: lconst_0
604: lcmp
605: ifne          612
608: iconst_1
609: goto          613
612: iconst_0
613: invokestatic  #29
616: new           #22
619: dup
620: invokespecial #23
623: ldc           #24
625: invokevirtual #25
628: iload         33
630: invokevirtual #41
633: ldc           #27
635: invokevirtual #25
638: iconst_1
639: invokevirtual #41
642: ldc           #24
644: invokevirtual #25
647: invokevirtual #28
650: iload         33
652: iconst_1
653: if_icmpne     660
656: iconst_1
657: goto          661
660: iconst_0
661: invokestatic  #29
664: new           #22
667: dup
668: invokespecial #23
671: ldc           #24
673: invokevirtual #25
676: lload         34
678: invokevirtual #26
681: ldc           #27
683: invokevirtual #25
686: lconst_0
687: invokevirtual #26
690: ldc           #24
692: invokevirtual #25
695: invokevirtual #28
698: lload         34
700: lconst_0
701: lcmp
702: ifne          709
705: iconst_1
706: goto          710
709: iconst_0
710: invokestatic  #29
713: new           #22
716: dup
717: invokespecial #23
720: ldc           #24
722: invokevirtual #25
725: lload         36
727: invokevirtual #26
730: ldc           #27
732: invokevirtual #25
735: lconst_0
736: invokevirtual #26
739: ldc           #24
741: invokevirtual #25
744: invokevirtual #28
747: lload         36
749: lconst_0
750: lcmp
751: ifne          758
754: iconst_1
755: goto          759
758: iconst_0
759: invokestatic  #29
762: return
Exception table:
from    to  target type
279   292   295   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test144
Start line: 5222
End line: 0
Method source code: 
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        tarArchiveOutputStream4.setBigNumberMode(0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #544
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: iconst_0
68: invokevirtual #281
71: new           #22
74: dup
75: invokespecial #23
78: ldc           #24
80: invokevirtual #25
83: lload         4
85: invokevirtual #26
88: ldc           #27
90: invokevirtual #25
93: lconst_0
94: invokevirtual #26
97: ldc           #24
99: invokevirtual #25
102: invokevirtual #28
105: lload         4
107: lconst_0
108: lcmp
109: ifne          116
112: iconst_1
113: goto          117
116: iconst_0
117: invokestatic  #29
120: aload         6
122: invokestatic  #53
125: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test145
Start line: 5237
End line: 0
Method source code: 
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        arArchiveOutputStream10.flush();
        arArchiveOutputStream10.setLongFileMode((int) (byte) -1);
        arArchiveOutputStream10.flush();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #545
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: invokevirtual #528
100: aload         9
102: iconst_m1
103: invokevirtual #399
106: aload         9
108: invokevirtual #528
111: new           #22
114: dup
115: invokespecial #23
118: ldc           #24
120: invokevirtual #25
123: lload         4
125: invokevirtual #26
128: ldc           #27
130: invokevirtual #25
133: lconst_0
134: invokevirtual #26
137: ldc           #24
139: invokevirtual #25
142: invokevirtual #28
145: lload         4
147: lconst_0
148: lcmp
149: ifne          156
152: iconst_1
153: goto          157
156: iconst_0
157: invokestatic  #29
160: aload         6
162: invokestatic  #53
165: new           #22
168: dup
169: invokespecial #23
172: ldc           #24
174: invokevirtual #25
177: lload         7
179: invokevirtual #26
182: ldc           #27
184: invokevirtual #25
187: lconst_0
188: invokevirtual #26
191: ldc           #24
193: invokevirtual #25
196: invokevirtual #28
199: lload         7
201: lconst_0
202: lcmp
203: ifne          210
206: iconst_1
207: goto          211
210: iconst_0
211: invokestatic  #29
214: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test146
Start line: 5259
End line: 0
Method source code: 
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream10);
        try {
            cpioArchiveOutputStream11.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #546
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: new           #222
80: dup
81: aload         7
83: invokespecial #223
86: astore        8
88: new           #143
91: dup
92: aload         8
94: invokespecial #144
97: astore        9
99: aload         9
101: invokevirtual #228
104: ldc           #51
106: invokestatic  #20
109: goto          114
112: astore        10
114: new           #22
117: dup
118: invokespecial #23
121: ldc           #24
123: invokevirtual #25
126: lload         4
128: invokevirtual #26
131: ldc           #27
133: invokevirtual #25
136: lconst_0
137: invokevirtual #26
140: ldc           #24
142: invokevirtual #25
145: invokevirtual #28
148: lload         4
150: lconst_0
151: lcmp
152: ifne          159
155: iconst_1
156: goto          160
159: iconst_0
160: invokestatic  #29
163: aload         6
165: invokestatic  #53
168: return
Exception table:
from    to  target type
99   109   112   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test147
Start line: 5283
End line: 0
Method source code: 
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        arArchiveOutputStream10.setLongFileMode((int) ' ');
        arArchiveOutputStream10.setLongFileMode((int) (byte) 83);
        try {
            arArchiveOutputStream10.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #547
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: bipush        32
99: invokevirtual #399
102: aload         9
104: bipush        83
106: invokevirtual #399
109: aload         9
111: invokevirtual #242
114: ldc           #51
116: invokestatic  #20
119: goto          124
122: astore        10
124: new           #22
127: dup
128: invokespecial #23
131: ldc           #24
133: invokevirtual #25
136: lload         4
138: invokevirtual #26
141: ldc           #27
143: invokevirtual #25
146: lconst_0
147: invokevirtual #26
150: ldc           #24
152: invokevirtual #25
155: invokevirtual #28
158: lload         4
160: lconst_0
161: lcmp
162: ifne          169
165: iconst_1
166: goto          170
169: iconst_0
170: invokestatic  #29
173: aload         6
175: invokestatic  #53
178: new           #22
181: dup
182: invokespecial #23
185: ldc           #24
187: invokevirtual #25
190: lload         7
192: invokevirtual #26
195: ldc           #27
197: invokevirtual #25
200: lconst_0
201: invokevirtual #26
204: ldc           #24
206: invokevirtual #25
209: invokevirtual #28
212: lload         7
214: lconst_0
215: lcmp
216: ifne          223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #29
227: return
Exception table:
from    to  target type
109   119   122   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test148
Start line: 5311
End line: 0
Method source code: 
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.InputStream inputStream26 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream27 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream26);
        long long28 = jarArchiveInputStream27.getBytesRead();
        long long29 = jarArchiveInputStream27.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream30 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream27);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream27);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream31);
        int int33 = cpioArchiveInputStream32.available();
        int int34 = cpioArchiveInputStream32.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry36 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        tarArchiveEntry36.setMode((int) (short) 10);
        java.util.Date date39 = tarArchiveEntry36.getLastModifiedDate();
        tarArchiveEntry36.setMode((int) (byte) 120);
        java.util.Date date42 = tarArchiveEntry36.getModTime();
        tarArchiveEntry36.setNames("hi!", "UTF8");
        boolean boolean46 = tarArchiveEntry36.isFIFO();
        boolean boolean47 = cpioArchiveInputStream32.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry36);
        cpioArchiveInputStream32.close();
        long long49 = cpioArchiveInputStream32.getBytesRead();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream50 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) cpioArchiveInputStream32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertNotNull(date42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #548
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #10
200: dup
201: aload         24
203: invokespecial #11
206: astore        25
208: aload         25
210: invokevirtual #12
213: lstore        26
215: aload         25
217: invokevirtual #12
220: lstore        28
222: new           #13
225: dup
226: aload         25
228: invokespecial #14
231: astore        30
233: new           #31
236: dup
237: aload         25
239: invokespecial #32
242: astore        31
244: new           #33
247: dup
248: aload         31
250: invokespecial #34
253: astore        32
255: aload         32
257: invokevirtual #35
260: istore        33
262: aload         32
264: invokevirtual #36
267: istore        34
269: new           #112
272: dup
273: ldc           #44
275: invokespecial #120
278: astore        35
280: aload         35
282: bipush        10
284: invokevirtual #121
287: aload         35
289: invokevirtual #122
292: astore        36
294: aload         35
296: bipush        120
298: invokevirtual #121
301: aload         35
303: invokevirtual #123
306: astore        37
308: aload         35
310: ldc           #124
312: ldc           #85
314: invokevirtual #125
317: aload         35
319: invokevirtual #126
322: istore        38
324: aload         32
326: aload         35
328: invokevirtual #115
331: istore        39
333: aload         32
335: invokevirtual #127
338: aload         32
340: invokevirtual #541
343: lstore        40
345: aload_1
346: aload         32
348: invokevirtual #18
351: astore        42
353: ldc           #19
355: invokestatic  #20
358: goto          363
361: astore        42
363: new           #22
366: dup
367: invokespecial #23
370: ldc           #24
372: invokevirtual #25
375: lload         4
377: invokevirtual #26
380: ldc           #27
382: invokevirtual #25
385: lconst_0
386: invokevirtual #26
389: ldc           #24
391: invokevirtual #25
394: invokevirtual #28
397: lload         4
399: lconst_0
400: lcmp
401: ifne          408
404: iconst_1
405: goto          409
408: iconst_0
409: invokestatic  #29
412: new           #22
415: dup
416: invokespecial #23
419: ldc           #24
421: invokevirtual #25
424: lload         6
426: invokevirtual #26
429: ldc           #27
431: invokevirtual #25
434: lconst_0
435: invokevirtual #26
438: ldc           #24
440: invokevirtual #25
443: invokevirtual #28
446: lload         6
448: lconst_0
449: lcmp
450: ifne          457
453: iconst_1
454: goto          458
457: iconst_0
458: invokestatic  #29
461: aload         10
463: invokestatic  #168
466: aload         11
468: invokestatic  #168
471: aload         13
473: invokestatic  #53
476: new           #22
479: dup
480: invokespecial #23
483: ldc           #24
485: invokevirtual #25
488: lload         16
490: invokevirtual #26
493: ldc           #27
495: invokevirtual #25
498: lconst_0
499: invokevirtual #26
502: ldc           #24
504: invokevirtual #25
507: invokevirtual #28
510: lload         16
512: lconst_0
513: lcmp
514: ifne          521
517: iconst_1
518: goto          522
521: iconst_0
522: invokestatic  #29
525: new           #22
528: dup
529: invokespecial #23
532: ldc           #24
534: invokevirtual #25
537: lload         18
539: invokevirtual #26
542: ldc           #27
544: invokevirtual #25
547: lconst_0
548: invokevirtual #26
551: ldc           #24
553: invokevirtual #25
556: invokevirtual #28
559: lload         18
561: lconst_0
562: lcmp
563: ifne          570
566: iconst_1
567: goto          571
570: iconst_0
571: invokestatic  #29
574: aload         21
576: invokestatic  #168
579: aload         23
581: invokestatic  #53
584: new           #22
587: dup
588: invokespecial #23
591: ldc           #24
593: invokevirtual #25
596: lload         26
598: invokevirtual #26
601: ldc           #27
603: invokevirtual #25
606: lconst_0
607: invokevirtual #26
610: ldc           #24
612: invokevirtual #25
615: invokevirtual #28
618: lload         26
620: lconst_0
621: lcmp
622: ifne          629
625: iconst_1
626: goto          630
629: iconst_0
630: invokestatic  #29
633: new           #22
636: dup
637: invokespecial #23
640: ldc           #24
642: invokevirtual #25
645: lload         28
647: invokevirtual #26
650: ldc           #27
652: invokevirtual #25
655: lconst_0
656: invokevirtual #26
659: ldc           #24
661: invokevirtual #25
664: invokevirtual #28
667: lload         28
669: lconst_0
670: lcmp
671: ifne          678
674: iconst_1
675: goto          679
678: iconst_0
679: invokestatic  #29
682: new           #22
685: dup
686: invokespecial #23
689: ldc           #24
691: invokevirtual #25
694: iload         33
696: invokevirtual #41
699: ldc           #27
701: invokevirtual #25
704: iconst_1
705: invokevirtual #41
708: ldc           #24
710: invokevirtual #25
713: invokevirtual #28
716: iload         33
718: iconst_1
719: if_icmpne     726
722: iconst_1
723: goto          727
726: iconst_0
727: invokestatic  #29
730: new           #22
733: dup
734: invokespecial #23
737: ldc           #24
739: invokevirtual #25
742: iload         34
744: invokevirtual #41
747: ldc           #27
749: invokevirtual #25
752: iconst_0
753: invokevirtual #41
756: ldc           #24
758: invokevirtual #25
761: invokevirtual #28
764: iload         34
766: ifne          773
769: iconst_1
770: goto          774
773: iconst_0
774: invokestatic  #29
777: aload         36
779: invokestatic  #53
782: aload         37
784: invokestatic  #53
787: new           #22
790: dup
791: invokespecial #23
794: ldc           #24
796: invokevirtual #25
799: iload         38
801: invokevirtual #69
804: ldc           #27
806: invokevirtual #25
809: iconst_0
810: invokevirtual #69
813: ldc           #24
815: invokevirtual #25
818: invokevirtual #28
821: iload         38
823: ifne          830
826: iconst_1
827: goto          831
830: iconst_0
831: invokestatic  #29
834: new           #22
837: dup
838: invokespecial #23
841: ldc           #24
843: invokevirtual #25
846: iload         39
848: invokevirtual #69
851: ldc           #27
853: invokevirtual #25
856: iconst_1
857: invokevirtual #69
860: ldc           #24
862: invokevirtual #25
865: invokevirtual #28
868: iload         39
870: iconst_1
871: if_icmpne     878
874: iconst_1
875: goto          879
878: iconst_0
879: invokestatic  #29
882: new           #22
885: dup
886: invokespecial #23
889: ldc           #24
891: invokevirtual #25
894: lload         40
896: invokevirtual #26
899: ldc           #27
901: invokevirtual #25
904: lconst_0
905: invokevirtual #26
908: ldc           #24
910: invokevirtual #25
913: invokevirtual #28
916: lload         40
918: lconst_0
919: lcmp
920: ifne          927
923: iconst_1
924: goto          928
927: iconst_0
928: invokestatic  #29
931: return
Exception table:
from    to  target type
345   358   361   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test149
Start line: 5384
End line: 0
Method source code: 
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(83);
        arArchiveOutputStream10.setLongFileMode(6);
        try {
            arArchiveOutputStream10.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #549
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: bipush        83
86: invokevirtual #399
89: aload         9
91: bipush        6
93: invokevirtual #399
96: aload         9
98: invokevirtual #242
101: ldc           #51
103: invokestatic  #20
106: goto          111
109: astore        10
111: new           #22
114: dup
115: invokespecial #23
118: ldc           #24
120: invokevirtual #25
123: lload         4
125: invokevirtual #26
128: ldc           #27
130: invokevirtual #25
133: lconst_0
134: invokevirtual #26
137: ldc           #24
139: invokevirtual #25
142: invokevirtual #28
145: lload         4
147: lconst_0
148: lcmp
149: ifne          156
152: iconst_1
153: goto          157
156: iconst_0
157: invokestatic  #29
160: aload         6
162: invokestatic  #53
165: new           #22
168: dup
169: invokespecial #23
172: ldc           #24
174: invokevirtual #25
177: lload         7
179: invokevirtual #26
182: ldc           #27
184: invokevirtual #25
187: lconst_0
188: invokevirtual #26
191: ldc           #24
193: invokevirtual #25
196: invokevirtual #28
199: lload         7
201: lconst_0
202: lcmp
203: ifne          210
206: iconst_1
207: goto          211
210: iconst_0
211: invokestatic  #29
214: return
Exception table:
from    to  target type
96   106   109   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test150
Start line: 5410
End line: 0
Method source code: 
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        long long23 = tarArchiveOutputStream4.getBytesWritten();
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream26 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, (short) (byte) 50, (int) (byte) 54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown format: 50");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #550
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: new           #73
81: dup
82: lconst_0
83: invokespecial #74
86: astore        9
88: aload         9
90: invokevirtual #75
93: astore        10
95: new           #73
98: dup
99: lconst_0
100: invokespecial #74
103: astore        11
105: aload         11
107: invokevirtual #75
110: astore        12
112: aload         10
114: aload         12
116: iconst_1
117: invokestatic  #177
120: istore        13
122: aload         10
124: invokestatic  #192
127: istore        14
129: aload_3
130: aload         10
132: iconst_4
133: iconst_m1
134: invokevirtual #63
137: aload_3
138: invokevirtual #47
141: lstore        15
143: new           #143
146: dup
147: aload_3
148: bipush        50
150: bipush        54
152: invokespecial #551
155: astore        17
157: ldc_w         #552
160: invokestatic  #20
163: goto          168
166: astore        17
168: new           #22
171: dup
172: invokespecial #23
175: ldc           #24
177: invokevirtual #25
180: lload         4
182: invokevirtual #26
185: ldc           #27
187: invokevirtual #25
190: lconst_0
191: invokevirtual #26
194: ldc           #24
196: invokevirtual #25
199: invokevirtual #28
202: lload         4
204: lconst_0
205: lcmp
206: ifne          213
209: iconst_1
210: goto          214
213: iconst_0
214: invokestatic  #29
217: aload         6
219: invokestatic  #53
222: new           #22
225: dup
226: invokespecial #23
229: ldc           #24
231: invokevirtual #25
234: iload         7
236: invokevirtual #41
239: ldc           #27
241: invokevirtual #25
244: iconst_0
245: invokevirtual #41
248: ldc           #24
250: invokevirtual #25
253: invokevirtual #28
256: iload         7
258: ifne          265
261: iconst_1
262: goto          266
265: iconst_0
266: invokestatic  #29
269: new           #22
272: dup
273: invokespecial #23
276: ldc           #24
278: invokevirtual #25
281: iload         8
283: invokevirtual #41
286: ldc           #27
288: invokevirtual #25
291: iconst_0
292: invokevirtual #41
295: ldc           #24
297: invokevirtual #25
300: invokevirtual #28
303: iload         8
305: ifne          312
308: iconst_1
309: goto          313
312: iconst_0
313: invokestatic  #29
316: aload         10
318: invokestatic  #53
321: aload         10
323: invokestatic  #66
326: ldc           #77
328: invokestatic  #68
331: aload         12
333: invokestatic  #53
336: aload         12
338: invokestatic  #66
341: ldc           #77
343: invokestatic  #68
346: new           #22
349: dup
350: invokespecial #23
353: ldc           #24
355: invokevirtual #25
358: iload         13
360: invokevirtual #69
363: ldc           #27
365: invokevirtual #25
368: iconst_1
369: invokevirtual #69
372: ldc           #24
374: invokevirtual #25
377: invokevirtual #28
380: iload         13
382: iconst_1
383: if_icmpne     390
386: iconst_1
387: goto          391
390: iconst_0
391: invokestatic  #29
394: new           #22
397: dup
398: invokespecial #23
401: ldc           #24
403: invokevirtual #25
406: iload         14
408: invokevirtual #69
411: ldc           #27
413: invokevirtual #25
416: iconst_1
417: invokevirtual #69
420: ldc           #24
422: invokevirtual #25
425: invokevirtual #28
428: iload         14
430: iconst_1
431: if_icmpne     438
434: iconst_1
435: goto          439
438: iconst_0
439: invokestatic  #29
442: new           #22
445: dup
446: invokespecial #23
449: ldc           #24
451: invokevirtual #25
454: lload         15
456: invokevirtual #26
459: ldc           #27
461: invokevirtual #25
464: lconst_0
465: invokevirtual #26
468: ldc           #24
470: invokevirtual #25
473: invokevirtual #28
476: lload         15
478: lconst_0
479: lcmp
480: ifne          487
483: iconst_1
484: goto          488
487: iconst_0
488: invokestatic  #29
491: return
Exception table:
from    to  target type
143   163   166   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test151
Start line: 5450
End line: 0
Method source code: 
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.InputStream inputStream27 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream28 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream27);
        long long29 = jarArchiveInputStream28.getBytesRead();
        long long30 = jarArchiveInputStream28.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream31 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream28);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream32 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream28);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream35 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream32, (int) (byte) 53, (int) (short) -1);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream36 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream35);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream37 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) cpioArchiveInputStream36);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream38 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!!", (java.io.InputStream) cpioArchiveInputStream36);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!! not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #553
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #10
200: dup
201: aload         24
203: invokespecial #11
206: astore        25
208: aload         25
210: invokevirtual #12
213: lstore        26
215: aload         25
217: invokevirtual #12
220: lstore        28
222: new           #13
225: dup
226: aload         25
228: invokespecial #14
231: astore        30
233: new           #31
236: dup
237: aload         25
239: invokespecial #32
242: astore        31
244: new           #31
247: dup
248: aload         31
250: bipush        53
252: iconst_m1
253: invokespecial #108
256: astore        32
258: new           #33
261: dup
262: aload         32
264: invokespecial #34
267: astore        33
269: new           #33
272: dup
273: aload         33
275: invokespecial #34
278: astore        34
280: aload_1
281: ldc_w         #485
284: aload         33
286: invokevirtual #38
289: astore        35
291: ldc_w         #554
294: invokestatic  #20
297: goto          302
300: astore        35
302: new           #22
305: dup
306: invokespecial #23
309: ldc           #24
311: invokevirtual #25
314: lload         4
316: invokevirtual #26
319: ldc           #27
321: invokevirtual #25
324: lconst_0
325: invokevirtual #26
328: ldc           #24
330: invokevirtual #25
333: invokevirtual #28
336: lload         4
338: lconst_0
339: lcmp
340: ifne          347
343: iconst_1
344: goto          348
347: iconst_0
348: invokestatic  #29
351: new           #22
354: dup
355: invokespecial #23
358: ldc           #24
360: invokevirtual #25
363: lload         6
365: invokevirtual #26
368: ldc           #27
370: invokevirtual #25
373: lconst_0
374: invokevirtual #26
377: ldc           #24
379: invokevirtual #25
382: invokevirtual #28
385: lload         6
387: lconst_0
388: lcmp
389: ifne          396
392: iconst_1
393: goto          397
396: iconst_0
397: invokestatic  #29
400: aload         10
402: invokestatic  #168
405: aload         11
407: invokestatic  #168
410: aload         13
412: invokestatic  #53
415: new           #22
418: dup
419: invokespecial #23
422: ldc           #24
424: invokevirtual #25
427: lload         16
429: invokevirtual #26
432: ldc           #27
434: invokevirtual #25
437: lconst_0
438: invokevirtual #26
441: ldc           #24
443: invokevirtual #25
446: invokevirtual #28
449: lload         16
451: lconst_0
452: lcmp
453: ifne          460
456: iconst_1
457: goto          461
460: iconst_0
461: invokestatic  #29
464: new           #22
467: dup
468: invokespecial #23
471: ldc           #24
473: invokevirtual #25
476: lload         18
478: invokevirtual #26
481: ldc           #27
483: invokevirtual #25
486: lconst_0
487: invokevirtual #26
490: ldc           #24
492: invokevirtual #25
495: invokevirtual #28
498: lload         18
500: lconst_0
501: lcmp
502: ifne          509
505: iconst_1
506: goto          510
509: iconst_0
510: invokestatic  #29
513: aload         21
515: invokestatic  #168
518: aload         23
520: invokestatic  #53
523: new           #22
526: dup
527: invokespecial #23
530: ldc           #24
532: invokevirtual #25
535: lload         26
537: invokevirtual #26
540: ldc           #27
542: invokevirtual #25
545: lconst_0
546: invokevirtual #26
549: ldc           #24
551: invokevirtual #25
554: invokevirtual #28
557: lload         26
559: lconst_0
560: lcmp
561: ifne          568
564: iconst_1
565: goto          569
568: iconst_0
569: invokestatic  #29
572: new           #22
575: dup
576: invokespecial #23
579: ldc           #24
581: invokevirtual #25
584: lload         28
586: invokevirtual #26
589: ldc           #27
591: invokevirtual #25
594: lconst_0
595: invokevirtual #26
598: ldc           #24
600: invokevirtual #25
603: invokevirtual #28
606: lload         28
608: lconst_0
609: lcmp
610: ifne          617
613: iconst_1
614: goto          618
617: iconst_0
618: invokestatic  #29
621: return
Exception table:
from    to  target type
280   297   300   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test152
Start line: 5504
End line: 0
Method source code: 
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.setLongFileMode((int) (short) 8);
        try {
            arArchiveOutputStream10.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #555
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: bipush        8
91: invokevirtual #399
94: aload         9
96: invokevirtual #242
99: ldc           #51
101: invokestatic  #20
104: goto          109
107: astore        10
109: new           #22
112: dup
113: invokespecial #23
116: ldc           #24
118: invokevirtual #25
121: lload         4
123: invokevirtual #26
126: ldc           #27
128: invokevirtual #25
131: lconst_0
132: invokevirtual #26
135: ldc           #24
137: invokevirtual #25
140: invokevirtual #28
143: lload         4
145: lconst_0
146: lcmp
147: ifne          154
150: iconst_1
151: goto          155
154: iconst_0
155: invokestatic  #29
158: aload         6
160: invokestatic  #53
163: new           #22
166: dup
167: invokespecial #23
170: ldc           #24
172: invokevirtual #25
175: lload         7
177: invokevirtual #26
180: ldc           #27
182: invokevirtual #25
185: lconst_0
186: invokevirtual #26
189: ldc           #24
191: invokevirtual #25
194: invokevirtual #28
197: lload         7
199: lconst_0
200: lcmp
201: ifne          208
204: iconst_1
205: goto          209
208: iconst_0
209: invokestatic  #29
212: return
Exception table:
from    to  target type
94   104   107   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test153
Start line: 5530
End line: 0
Method source code: 
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: data descriptor");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry3 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory4 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream6 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream8 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream6, "jar");
        tarArchiveOutputStream8.count(0L);
        long long11 = tarArchiveOutputStream8.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream12 = archiveStreamFactory4.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream8);
        boolean boolean13 = tarArchiveEntry3.equals((java.lang.Object) "ar");
        long long14 = tarArchiveEntry3.getSize();
        tarArchiveEntry3.setDevMajor((int) (short) 10);
        long long17 = tarArchiveEntry3.getRealSize();
        tarArchiveEntry3.setSize((long) 2048);
        long long20 = tarArchiveEntry3.getRealSize();
        boolean boolean21 = tarArchiveEntry1.equals(tarArchiveEntry3);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #556
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc_w         #293
32: invokespecial #120
35: astore_1
36: new           #112
39: dup
40: ldc           #225
42: invokespecial #120
45: astore_2
46: new           #8
49: dup
50: invokespecial #9
53: astore_3
54: aconst_null
55: astore        4
57: new           #43
60: dup
61: aload         4
63: ldc           #44
65: invokespecial #45
68: astore        5
70: aload         5
72: lconst_0
73: invokevirtual #46
76: aload         5
78: invokevirtual #47
81: lstore        6
83: aload_3
84: ldc           #48
86: aload         5
88: invokevirtual #49
91: astore        8
93: aload_2
94: ldc           #48
96: invokevirtual #133
99: istore        9
101: aload_2
102: invokevirtual #156
105: lstore        10
107: aload_2
108: bipush        10
110: invokevirtual #287
113: aload_2
114: invokevirtual #327
117: lstore        12
119: aload_2
120: ldc2_w        #328
123: invokevirtual #330
126: aload_2
127: invokevirtual #327
130: lstore        14
132: aload_1
133: aload_2
134: invokevirtual #377
137: istore        16
139: new           #22
142: dup
143: invokespecial #23
146: ldc           #24
148: invokevirtual #25
151: lload         6
153: invokevirtual #26
156: ldc           #27
158: invokevirtual #25
161: lconst_0
162: invokevirtual #26
165: ldc           #24
167: invokevirtual #25
170: invokevirtual #28
173: lload         6
175: lconst_0
176: lcmp
177: ifne          184
180: iconst_1
181: goto          185
184: iconst_0
185: invokestatic  #29
188: aload         8
190: invokestatic  #53
193: new           #22
196: dup
197: invokespecial #23
200: ldc           #24
202: invokevirtual #25
205: iload         9
207: invokevirtual #69
210: ldc           #27
212: invokevirtual #25
215: iconst_0
216: invokevirtual #69
219: ldc           #24
221: invokevirtual #25
224: invokevirtual #28
227: iload         9
229: ifne          236
232: iconst_1
233: goto          237
236: iconst_0
237: invokestatic  #29
240: new           #22
243: dup
244: invokespecial #23
247: ldc           #24
249: invokevirtual #25
252: lload         10
254: invokevirtual #26
257: ldc           #27
259: invokevirtual #25
262: lconst_0
263: invokevirtual #26
266: ldc           #24
268: invokevirtual #25
271: invokevirtual #28
274: lload         10
276: lconst_0
277: lcmp
278: ifne          285
281: iconst_1
282: goto          286
285: iconst_0
286: invokestatic  #29
289: new           #22
292: dup
293: invokespecial #23
296: ldc           #24
298: invokevirtual #25
301: lload         12
303: invokevirtual #26
306: ldc           #27
308: invokevirtual #25
311: lconst_0
312: invokevirtual #26
315: ldc           #24
317: invokevirtual #25
320: invokevirtual #28
323: lload         12
325: lconst_0
326: lcmp
327: ifne          334
330: iconst_1
331: goto          335
334: iconst_0
335: invokestatic  #29
338: new           #22
341: dup
342: invokespecial #23
345: ldc           #24
347: invokevirtual #25
350: lload         14
352: invokevirtual #26
355: ldc           #27
357: invokevirtual #25
360: lconst_0
361: invokevirtual #26
364: ldc           #24
366: invokevirtual #25
369: invokevirtual #28
372: lload         14
374: lconst_0
375: lcmp
376: ifne          383
379: iconst_1
380: goto          384
383: iconst_0
384: invokestatic  #29
387: new           #22
390: dup
391: invokespecial #23
394: ldc           #24
396: invokevirtual #25
399: iload         16
401: invokevirtual #69
404: ldc           #27
406: invokevirtual #25
409: iconst_0
410: invokevirtual #69
413: ldc           #24
415: invokevirtual #25
418: invokevirtual #28
421: iload         16
423: ifne          430
426: iconst_1
427: goto          431
430: iconst_0
431: invokestatic  #29
434: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test154
Start line: 5558
End line: 0
Method source code: 
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.setLongFileMode(257);
        try {
            arArchiveOutputStream10.finish();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: This archive has already been finished");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #557
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: sipush        257
92: invokevirtual #399
95: aload         9
97: invokevirtual #286
100: ldc_w         #467
103: invokestatic  #20
106: goto          111
109: astore        10
111: new           #22
114: dup
115: invokespecial #23
118: ldc           #24
120: invokevirtual #25
123: lload         4
125: invokevirtual #26
128: ldc           #27
130: invokevirtual #25
133: lconst_0
134: invokevirtual #26
137: ldc           #24
139: invokevirtual #25
142: invokevirtual #28
145: lload         4
147: lconst_0
148: lcmp
149: ifne          156
152: iconst_1
153: goto          157
156: iconst_0
157: invokestatic  #29
160: aload         6
162: invokestatic  #53
165: new           #22
168: dup
169: invokespecial #23
172: ldc           #24
174: invokevirtual #25
177: lload         7
179: invokevirtual #26
182: ldc           #27
184: invokevirtual #25
187: lconst_0
188: invokevirtual #26
191: ldc           #24
193: invokevirtual #25
196: invokevirtual #28
199: lload         7
201: lconst_0
202: lcmp
203: ifne          210
206: iconst_1
207: goto          211
210: iconst_0
211: invokestatic  #29
214: return
Exception table:
from    to  target type
95   106   109   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test155
Start line: 5584
End line: 0
Method source code: 
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        jarArchiveOutputStream12.setEncoding("5");
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode15 = null;
        jarArchiveOutputStream12.setUseZip64(zip64Mode15);
        try {
            jarArchiveOutputStream12.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #558
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: aload         10
105: ldc_w         #458
108: invokevirtual #459
111: aconst_null
112: astore        11
114: aload         10
116: aload         11
118: invokevirtual #460
121: aload         10
123: invokevirtual #559
126: ldc           #83
128: invokestatic  #20
131: goto          136
134: astore        12
136: new           #22
139: dup
140: invokespecial #23
143: ldc           #24
145: invokevirtual #25
148: lload         4
150: invokevirtual #26
153: ldc           #27
155: invokevirtual #25
158: lconst_0
159: invokevirtual #26
162: ldc           #24
164: invokevirtual #25
167: invokevirtual #28
170: lload         4
172: lconst_0
173: lcmp
174: ifne          181
177: iconst_1
178: goto          182
181: iconst_0
182: invokestatic  #29
185: aload         6
187: invokestatic  #53
190: new           #22
193: dup
194: invokespecial #23
197: ldc           #24
199: invokevirtual #25
202: iload         7
204: invokevirtual #41
207: ldc           #27
209: invokevirtual #25
212: iconst_0
213: invokevirtual #41
216: ldc           #24
218: invokevirtual #25
221: invokevirtual #28
224: iload         7
226: ifne          233
229: iconst_1
230: goto          234
233: iconst_0
234: invokestatic  #29
237: return
Exception table:
from    to  target type
121   131   134   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test156
Start line: 5613
End line: 0
Method source code: 
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.setLongFileMode(257);
        java.io.InputStream inputStream14 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream15 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream14);
        long long16 = jarArchiveInputStream15.getBytesRead();
        long long17 = jarArchiveInputStream15.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream18 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream15);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream19 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream15);
        long long21 = jarArchiveInputStream15.skip((long) 24576);
        java.io.InputStream inputStream22 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream23 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream22);
        long long24 = jarArchiveInputStream23.getBytesRead();
        long long25 = jarArchiveInputStream23.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream26 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream23);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream27 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream23);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream28 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream27);
        int int29 = cpioArchiveInputStream28.read();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry31 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int32 = tarArchiveEntry31.getDevMinor();
        tarArchiveEntry31.setIds((int) (short) 3, 0);
        java.lang.String str36 = tarArchiveEntry31.getGroupName();
        tarArchiveEntry31.setDevMinor(0);
        java.util.Date date39 = tarArchiveEntry31.getLastModifiedDate();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry42 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry42.setName("");
        boolean boolean45 = tarArchiveEntry31.equals(tarArchiveEntry42);
        boolean boolean46 = tarArchiveEntry42.isDirectory();
        int int47 = tarArchiveEntry42.getGroupId();
        boolean boolean48 = cpioArchiveInputStream28.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry42);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream28, 155);
        byte[] byteArray53 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes((long) 1000);
        java.lang.String str54 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byteArray53);
        boolean boolean57 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("", byteArray53, 3, (int) (byte) 0);
        int int60 = tarArchiveInputStream50.read(byteArray53, (int) (byte) 54, 8192);
        int int63 = jarArchiveInputStream15.read(byteArray53, 32768, (int) (short) 4);
        try {
            arArchiveOutputStream10.write(byteArray53, (int) (short) 12, 1000);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '1000' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(date39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-24, 3, 0, 0]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\ufffd\003\000\000" + "'", str54, "\ufffd\003\000\000");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #560
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: sipush        257
92: invokevirtual #399
95: aconst_null
96: astore        10
98: new           #10
101: dup
102: aload         10
104: invokespecial #11
107: astore        11
109: aload         11
111: invokevirtual #12
114: lstore        12
116: aload         11
118: invokevirtual #12
121: lstore        14
123: new           #13
126: dup
127: aload         11
129: invokespecial #14
132: astore        16
134: new           #31
137: dup
138: aload         11
140: invokespecial #32
143: astore        17
145: aload         11
147: ldc2_w        #561
150: invokevirtual #563
153: lstore        18
155: aconst_null
156: astore        20
158: new           #10
161: dup
162: aload         20
164: invokespecial #11
167: astore        21
169: aload         21
171: invokevirtual #12
174: lstore        22
176: aload         21
178: invokevirtual #12
181: lstore        24
183: new           #13
186: dup
187: aload         21
189: invokespecial #14
192: astore        26
194: new           #31
197: dup
198: aload         21
200: invokespecial #32
203: astore        27
205: new           #33
208: dup
209: aload         27
211: invokespecial #34
214: astore        28
216: aload         28
218: invokevirtual #88
221: istore        29
223: new           #112
226: dup
227: ldc           #44
229: invokespecial #120
232: astore        30
234: aload         30
236: invokevirtual #129
239: istore        31
241: aload         30
243: iconst_3
244: iconst_0
245: invokevirtual #130
248: aload         30
250: invokevirtual #376
253: astore        32
255: aload         30
257: iconst_0
258: invokevirtual #114
261: aload         30
263: invokevirtual #122
266: astore        33
268: new           #112
271: dup
272: ldc           #61
274: iconst_0
275: invokespecial #113
278: astore        34
280: aload         34
282: ldc           #61
284: invokevirtual #275
287: aload         30
289: aload         34
291: invokevirtual #377
294: istore        35
296: aload         34
298: invokevirtual #378
301: istore        36
303: aload         34
305: invokevirtual #502
308: istore        37
310: aload         28
312: aload         34
314: invokevirtual #115
317: istore        38
319: new           #31
322: dup
323: aload         28
325: sipush        155
328: invokespecial #141
331: astore        39
333: ldc2_w        #257
336: invokestatic  #259
339: astore        40
341: aload         40
343: invokestatic  #150
346: astore        41
348: ldc           #61
350: aload         40
352: iconst_3
353: iconst_0
354: invokestatic  #62
357: istore        42
359: aload         39
361: aload         40
363: bipush        54
365: sipush        8192
368: invokevirtual #174
371: istore        43
373: aload         11
375: aload         40
377: ldc_w         #564
380: iconst_4
381: invokevirtual #76
384: istore        44
386: aload         9
388: aload         40
390: bipush        12
392: sipush        1000
395: invokevirtual #402
398: ldc_w         #565
401: invokestatic  #20
404: goto          409
407: astore        45
409: new           #22
412: dup
413: invokespecial #23
416: ldc           #24
418: invokevirtual #25
421: lload         4
423: invokevirtual #26
426: ldc           #27
428: invokevirtual #25
431: lconst_0
432: invokevirtual #26
435: ldc           #24
437: invokevirtual #25
440: invokevirtual #28
443: lload         4
445: lconst_0
446: lcmp
447: ifne          454
450: iconst_1
451: goto          455
454: iconst_0
455: invokestatic  #29
458: aload         6
460: invokestatic  #53
463: new           #22
466: dup
467: invokespecial #23
470: ldc           #24
472: invokevirtual #25
475: lload         7
477: invokevirtual #26
480: ldc           #27
482: invokevirtual #25
485: lconst_0
486: invokevirtual #26
489: ldc           #24
491: invokevirtual #25
494: invokevirtual #28
497: lload         7
499: lconst_0
500: lcmp
501: ifne          508
504: iconst_1
505: goto          509
508: iconst_0
509: invokestatic  #29
512: new           #22
515: dup
516: invokespecial #23
519: ldc           #24
521: invokevirtual #25
524: lload         12
526: invokevirtual #26
529: ldc           #27
531: invokevirtual #25
534: lconst_0
535: invokevirtual #26
538: ldc           #24
540: invokevirtual #25
543: invokevirtual #28
546: lload         12
548: lconst_0
549: lcmp
550: ifne          557
553: iconst_1
554: goto          558
557: iconst_0
558: invokestatic  #29
561: new           #22
564: dup
565: invokespecial #23
568: ldc           #24
570: invokevirtual #25
573: lload         14
575: invokevirtual #26
578: ldc           #27
580: invokevirtual #25
583: lconst_0
584: invokevirtual #26
587: ldc           #24
589: invokevirtual #25
592: invokevirtual #28
595: lload         14
597: lconst_0
598: lcmp
599: ifne          606
602: iconst_1
603: goto          607
606: iconst_0
607: invokestatic  #29
610: new           #22
613: dup
614: invokespecial #23
617: ldc           #24
619: invokevirtual #25
622: lload         18
624: invokevirtual #26
627: ldc           #27
629: invokevirtual #25
632: lconst_0
633: invokevirtual #26
636: ldc           #24
638: invokevirtual #25
641: invokevirtual #28
644: lload         18
646: lconst_0
647: lcmp
648: ifne          655
651: iconst_1
652: goto          656
655: iconst_0
656: invokestatic  #29
659: new           #22
662: dup
663: invokespecial #23
666: ldc           #24
668: invokevirtual #25
671: lload         22
673: invokevirtual #26
676: ldc           #27
678: invokevirtual #25
681: lconst_0
682: invokevirtual #26
685: ldc           #24
687: invokevirtual #25
690: invokevirtual #28
693: lload         22
695: lconst_0
696: lcmp
697: ifne          704
700: iconst_1
701: goto          705
704: iconst_0
705: invokestatic  #29
708: new           #22
711: dup
712: invokespecial #23
715: ldc           #24
717: invokevirtual #25
720: lload         24
722: invokevirtual #26
725: ldc           #27
727: invokevirtual #25
730: lconst_0
731: invokevirtual #26
734: ldc           #24
736: invokevirtual #25
739: invokevirtual #28
742: lload         24
744: lconst_0
745: lcmp
746: ifne          753
749: iconst_1
750: goto          754
753: iconst_0
754: invokestatic  #29
757: new           #22
760: dup
761: invokespecial #23
764: ldc           #24
766: invokevirtual #25
769: iload         29
771: invokevirtual #41
774: ldc           #27
776: invokevirtual #25
779: iconst_m1
780: invokevirtual #41
783: ldc           #24
785: invokevirtual #25
788: invokevirtual #28
791: iload         29
793: iconst_m1
794: if_icmpne     801
797: iconst_1
798: goto          802
801: iconst_0
802: invokestatic  #29
805: new           #22
808: dup
809: invokespecial #23
812: ldc           #24
814: invokevirtual #25
817: iload         31
819: invokevirtual #41
822: ldc           #27
824: invokevirtual #25
827: iconst_0
828: invokevirtual #41
831: ldc           #24
833: invokevirtual #25
836: invokevirtual #28
839: iload         31
841: ifne          848
844: iconst_1
845: goto          849
848: iconst_0
849: invokestatic  #29
852: new           #22
855: dup
856: invokespecial #23
859: ldc           #24
861: invokevirtual #25
864: aload         32
866: invokevirtual #25
869: ldc           #219
871: invokevirtual #25
874: invokevirtual #28
877: aload         32
879: ldc           #61
881: invokestatic  #154
884: aload         33
886: invokestatic  #53
889: new           #22
892: dup
893: invokespecial #23
896: ldc           #24
898: invokevirtual #25
901: iload         35
903: invokevirtual #69
906: ldc           #27
908: invokevirtual #25
911: iconst_0
912: invokevirtual #69
915: ldc           #24
917: invokevirtual #25
920: invokevirtual #28
923: iload         35
925: ifne          932
928: iconst_1
929: goto          933
932: iconst_0
933: invokestatic  #29
936: new           #22
939: dup
940: invokespecial #23
943: ldc           #24
945: invokevirtual #25
948: iload         36
950: invokevirtual #69
953: ldc           #27
955: invokevirtual #25
958: iconst_0
959: invokevirtual #69
962: ldc           #24
964: invokevirtual #25
967: invokevirtual #28
970: iload         36
972: ifne          979
975: iconst_1
976: goto          980
979: iconst_0
980: invokestatic  #29
983: new           #22
986: dup
987: invokespecial #23
990: ldc           #24
992: invokevirtual #25
995: iload         37
997: invokevirtual #41
1000: ldc           #27
1002: invokevirtual #25
1005: iconst_0
1006: invokevirtual #41
1009: ldc           #24
1011: invokevirtual #25
1014: invokevirtual #28
1017: iload         37
1019: ifne          1026
1022: iconst_1
1023: goto          1027
1026: iconst_0
1027: invokestatic  #29
1030: new           #22
1033: dup
1034: invokespecial #23
1037: ldc           #24
1039: invokevirtual #25
1042: iload         38
1044: invokevirtual #69
1047: ldc           #27
1049: invokevirtual #25
1052: iconst_1
1053: invokevirtual #69
1056: ldc           #24
1058: invokevirtual #25
1061: invokevirtual #28
1064: iload         38
1066: iconst_1
1067: if_icmpne     1074
1070: iconst_1
1071: goto          1075
1074: iconst_0
1075: invokestatic  #29
1078: aload         40
1080: invokestatic  #53
1083: aload         40
1085: invokestatic  #66
1088: ldc_w         #267
1091: invokestatic  #68
1094: new           #22
1097: dup
1098: invokespecial #23
1101: ldc           #24
1103: invokevirtual #25
1106: aload         41
1108: invokevirtual #25
1111: ldc_w         #566
1114: invokevirtual #25
1117: invokevirtual #28
1120: aload         41
1122: ldc_w         #567
1125: invokestatic  #154
1128: new           #22
1131: dup
1132: invokespecial #23
1135: ldc           #24
1137: invokevirtual #25
1140: iload         42
1142: invokevirtual #69
1145: ldc           #27
1147: invokevirtual #25
1150: iconst_1
1151: invokevirtual #69
1154: ldc           #24
1156: invokevirtual #25
1159: invokevirtual #28
1162: iload         42
1164: iconst_1
1165: if_icmpne     1172
1168: iconst_1
1169: goto          1173
1172: iconst_0
1173: invokestatic  #29
1176: new           #22
1179: dup
1180: invokespecial #23
1183: ldc           #24
1185: invokevirtual #25
1188: iload         43
1190: invokevirtual #41
1193: ldc           #27
1195: invokevirtual #25
1198: iconst_m1
1199: invokevirtual #41
1202: ldc           #24
1204: invokevirtual #25
1207: invokevirtual #28
1210: iload         43
1212: iconst_m1
1213: if_icmpne     1220
1216: iconst_1
1217: goto          1221
1220: iconst_0
1221: invokestatic  #29
1224: new           #22
1227: dup
1228: invokespecial #23
1231: ldc           #24
1233: invokevirtual #25
1236: iload         44
1238: invokevirtual #41
1241: ldc           #27
1243: invokevirtual #25
1246: iconst_m1
1247: invokevirtual #41
1250: ldc           #24
1252: invokevirtual #25
1255: invokevirtual #28
1258: iload         44
1260: iconst_m1
1261: if_icmpne     1268
1264: iconst_1
1265: goto          1269
1268: iconst_0
1269: invokestatic  #29
1272: return
Exception table:
from    to  target type
386   404   407   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test157
Start line: 5692
End line: 0
Method source code: 
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream9 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream9);
        long long11 = jarArchiveInputStream10.getBytesRead();
        long long12 = jarArchiveInputStream10.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream13 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream10);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10);
        long long16 = jarArchiveInputStream10.skip((long) 24576);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream17 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream10);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry18 = jarArchiveInputStream17.getNextJarEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry19 = jarArchiveInputStream17.getNextEntry();
        jarArchiveInputStream17.count(0L);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream22 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) jarArchiveInputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNull(jarArchiveEntry18);
        org.junit.Assert.assertNull(archiveEntry19);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #568
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #31
108: dup
109: aload         8
111: invokespecial #32
114: astore        14
116: aload         8
118: ldc2_w        #561
121: invokevirtual #563
124: lstore        15
126: new           #10
129: dup
130: aload         8
132: invokespecial #11
135: astore        17
137: aload         17
139: invokevirtual #499
142: astore        18
144: aload         17
146: invokevirtual #166
149: astore        19
151: aload         17
153: lconst_0
154: invokevirtual #569
157: aload_1
158: aload         17
160: invokevirtual #18
163: astore        20
165: ldc           #19
167: invokestatic  #20
170: goto          175
173: astore        20
175: new           #22
178: dup
179: invokespecial #23
182: ldc           #24
184: invokevirtual #25
187: lload         4
189: invokevirtual #26
192: ldc           #27
194: invokevirtual #25
197: lconst_0
198: invokevirtual #26
201: ldc           #24
203: invokevirtual #25
206: invokevirtual #28
209: lload         4
211: lconst_0
212: lcmp
213: ifne          220
216: iconst_1
217: goto          221
220: iconst_0
221: invokestatic  #29
224: aload         6
226: invokestatic  #53
229: new           #22
232: dup
233: invokespecial #23
236: ldc           #24
238: invokevirtual #25
241: lload         9
243: invokevirtual #26
246: ldc           #27
248: invokevirtual #25
251: lconst_0
252: invokevirtual #26
255: ldc           #24
257: invokevirtual #25
260: invokevirtual #28
263: lload         9
265: lconst_0
266: lcmp
267: ifne          274
270: iconst_1
271: goto          275
274: iconst_0
275: invokestatic  #29
278: new           #22
281: dup
282: invokespecial #23
285: ldc           #24
287: invokevirtual #25
290: lload         11
292: invokevirtual #26
295: ldc           #27
297: invokevirtual #25
300: lconst_0
301: invokevirtual #26
304: ldc           #24
306: invokevirtual #25
309: invokevirtual #28
312: lload         11
314: lconst_0
315: lcmp
316: ifne          323
319: iconst_1
320: goto          324
323: iconst_0
324: invokestatic  #29
327: new           #22
330: dup
331: invokespecial #23
334: ldc           #24
336: invokevirtual #25
339: lload         15
341: invokevirtual #26
344: ldc           #27
346: invokevirtual #25
349: lconst_0
350: invokevirtual #26
353: ldc           #24
355: invokevirtual #25
358: invokevirtual #28
361: lload         15
363: lconst_0
364: lcmp
365: ifne          372
368: iconst_1
369: goto          373
372: iconst_0
373: invokestatic  #29
376: aload         18
378: invokestatic  #168
381: aload         19
383: invokestatic  #168
386: return
Exception table:
from    to  target type
157   170   173   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test158
Start line: 5729
End line: 0
Method source code: 
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(83);
        arArchiveOutputStream10.setLongFileMode(6);
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream17 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) arArchiveOutputStream10, (int) ' ', "compression method");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: compression method");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #570
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: bipush        83
86: invokevirtual #399
89: aload         9
91: bipush        6
93: invokevirtual #399
96: new           #43
99: dup
100: aload         9
102: bipush        32
104: ldc_w         #282
107: invokespecial #91
110: astore        10
112: ldc_w         #571
115: invokestatic  #20
118: goto          123
121: astore        10
123: new           #22
126: dup
127: invokespecial #23
130: ldc           #24
132: invokevirtual #25
135: lload         4
137: invokevirtual #26
140: ldc           #27
142: invokevirtual #25
145: lconst_0
146: invokevirtual #26
149: ldc           #24
151: invokevirtual #25
154: invokevirtual #28
157: lload         4
159: lconst_0
160: lcmp
161: ifne          168
164: iconst_1
165: goto          169
168: iconst_0
169: invokestatic  #29
172: aload         6
174: invokestatic  #53
177: new           #22
180: dup
181: invokespecial #23
184: ldc           #24
186: invokevirtual #25
189: lload         7
191: invokevirtual #26
194: ldc           #27
196: invokevirtual #25
199: lconst_0
200: invokevirtual #26
203: ldc           #24
205: invokevirtual #25
208: invokevirtual #28
211: lload         7
213: lconst_0
214: lcmp
215: ifne          222
218: iconst_1
219: goto          223
222: iconst_0
223: invokestatic  #29
226: return
Exception table:
from    to  target type
96   118   121   Class java/nio/charset/IllegalCharsetNameException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test159
Start line: 5755
End line: 0
Method source code: 
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream16 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream17 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream16);
        long long18 = jarArchiveInputStream17.getBytesRead();
        long long19 = jarArchiveInputStream17.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream20 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream17);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream17);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry22 = tarArchiveInputStream21.getNextEntry();
        long long23 = tarArchiveInputStream21.getBytesRead();
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream21);
        boolean boolean25 = zipArchiveInputStream24.markSupported();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream26 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream24);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry27 = jarArchiveInputStream26.getNextJarEntry();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream26, (int) (byte) 55);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream30 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNull(archiveEntry22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jarArchiveEntry27);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #572
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: new           #31
164: dup
165: aload         15
167: invokespecial #32
170: astore        21
172: aload         21
174: invokevirtual #199
177: astore        22
179: aload         21
181: invokevirtual #573
184: lstore        23
186: new           #15
189: dup
190: aload         21
192: invokespecial #300
195: astore        25
197: aload         25
199: invokevirtual #519
202: istore        26
204: new           #10
207: dup
208: aload         25
210: invokespecial #11
213: astore        27
215: aload         27
217: invokevirtual #499
220: astore        28
222: new           #31
225: dup
226: aload         27
228: bipush        55
230: invokespecial #141
233: astore        29
235: aload_1
236: aload         29
238: invokevirtual #18
241: astore        30
243: ldc           #19
245: invokestatic  #20
248: goto          253
251: astore        30
253: new           #22
256: dup
257: invokespecial #23
260: ldc           #24
262: invokevirtual #25
265: lload         4
267: invokevirtual #26
270: ldc           #27
272: invokevirtual #25
275: lconst_0
276: invokevirtual #26
279: ldc           #24
281: invokevirtual #25
284: invokevirtual #28
287: lload         4
289: lconst_0
290: lcmp
291: ifne          298
294: iconst_1
295: goto          299
298: iconst_0
299: invokestatic  #29
302: new           #22
305: dup
306: invokespecial #23
309: ldc           #24
311: invokevirtual #25
314: lload         6
316: invokevirtual #26
319: ldc           #27
321: invokevirtual #25
324: lconst_0
325: invokevirtual #26
328: ldc           #24
330: invokevirtual #25
333: invokevirtual #28
336: lload         6
338: lconst_0
339: lcmp
340: ifne          347
343: iconst_1
344: goto          348
347: iconst_0
348: invokestatic  #29
351: aload         10
353: invokestatic  #168
356: aload         11
358: invokestatic  #168
361: aload         13
363: invokestatic  #53
366: new           #22
369: dup
370: invokespecial #23
373: ldc           #24
375: invokevirtual #25
378: lload         16
380: invokevirtual #26
383: ldc           #27
385: invokevirtual #25
388: lconst_0
389: invokevirtual #26
392: ldc           #24
394: invokevirtual #25
397: invokevirtual #28
400: lload         16
402: lconst_0
403: lcmp
404: ifne          411
407: iconst_1
408: goto          412
411: iconst_0
412: invokestatic  #29
415: new           #22
418: dup
419: invokespecial #23
422: ldc           #24
424: invokevirtual #25
427: lload         18
429: invokevirtual #26
432: ldc           #27
434: invokevirtual #25
437: lconst_0
438: invokevirtual #26
441: ldc           #24
443: invokevirtual #25
446: invokevirtual #28
449: lload         18
451: lconst_0
452: lcmp
453: ifne          460
456: iconst_1
457: goto          461
460: iconst_0
461: invokestatic  #29
464: aload         22
466: invokestatic  #168
469: new           #22
472: dup
473: invokespecial #23
476: ldc           #24
478: invokevirtual #25
481: lload         23
483: invokevirtual #26
486: ldc           #27
488: invokevirtual #25
491: lconst_0
492: invokevirtual #26
495: ldc           #24
497: invokevirtual #25
500: invokevirtual #28
503: lload         23
505: lconst_0
506: lcmp
507: ifne          514
510: iconst_1
511: goto          515
514: iconst_0
515: invokestatic  #29
518: new           #22
521: dup
522: invokespecial #23
525: ldc           #24
527: invokevirtual #25
530: iload         26
532: invokevirtual #69
535: ldc           #27
537: invokevirtual #25
540: iconst_0
541: invokevirtual #69
544: ldc           #24
546: invokevirtual #25
549: invokevirtual #28
552: iload         26
554: ifne          561
557: iconst_1
558: goto          562
561: iconst_0
562: invokestatic  #29
565: aload         28
567: invokestatic  #168
570: return
Exception table:
from    to  target type
235   248   251   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test160
Start line: 5804
End line: 0
Method source code: 
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream2 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream1);
        long long3 = jarArchiveInputStream2.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream4 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream2);
        java.io.InputStream inputStream6 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream7 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream6);
        long long8 = jarArchiveInputStream7.getBytesRead();
        long long9 = jarArchiveInputStream7.getBytesRead();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong11 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray12 = zipLong11.getBytes();
        int int15 = jarArchiveInputStream7.read(byteArray12, 0, 96);
        boolean boolean16 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("00", byteArray12);
        int int19 = arArchiveInputStream4.read(byteArray12, 6, 8);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream4, "always");
        arArchiveInputStream4.close();
        arArchiveInputStream4.pushedBackBytes(1L);
        arArchiveInputStream4.close();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream26 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) arArchiveInputStream4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #574
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: new           #13
53: dup
54: aload_3
55: invokespecial #14
58: astore        6
60: aconst_null
61: astore        7
63: new           #10
66: dup
67: aload         7
69: invokespecial #11
72: astore        8
74: aload         8
76: invokevirtual #12
79: lstore        9
81: aload         8
83: invokevirtual #12
86: lstore        11
88: new           #73
91: dup
92: lconst_0
93: invokespecial #74
96: astore        13
98: aload         13
100: invokevirtual #75
103: astore        14
105: aload         8
107: aload         14
109: iconst_0
110: bipush        96
112: invokevirtual #76
115: istore        15
117: ldc           #16
119: aload         14
121: invokestatic  #525
124: istore        16
126: aload         6
128: aload         14
130: bipush        6
132: bipush        8
134: invokevirtual #232
137: istore        17
139: new           #31
142: dup
143: aload         6
145: ldc           #79
147: invokespecial #575
150: astore        18
152: aload         6
154: invokevirtual #140
157: aload         6
159: lconst_1
160: invokevirtual #299
163: aload         6
165: invokevirtual #140
168: aload_1
169: aload         6
171: invokevirtual #18
174: astore        19
176: ldc           #19
178: invokestatic  #20
181: goto          186
184: astore        19
186: new           #22
189: dup
190: invokespecial #23
193: ldc           #24
195: invokevirtual #25
198: lload         4
200: invokevirtual #26
203: ldc           #27
205: invokevirtual #25
208: lconst_0
209: invokevirtual #26
212: ldc           #24
214: invokevirtual #25
217: invokevirtual #28
220: lload         4
222: lconst_0
223: lcmp
224: ifne          231
227: iconst_1
228: goto          232
231: iconst_0
232: invokestatic  #29
235: new           #22
238: dup
239: invokespecial #23
242: ldc           #24
244: invokevirtual #25
247: lload         9
249: invokevirtual #26
252: ldc           #27
254: invokevirtual #25
257: lconst_0
258: invokevirtual #26
261: ldc           #24
263: invokevirtual #25
266: invokevirtual #28
269: lload         9
271: lconst_0
272: lcmp
273: ifne          280
276: iconst_1
277: goto          281
280: iconst_0
281: invokestatic  #29
284: new           #22
287: dup
288: invokespecial #23
291: ldc           #24
293: invokevirtual #25
296: lload         11
298: invokevirtual #26
301: ldc           #27
303: invokevirtual #25
306: lconst_0
307: invokevirtual #26
310: ldc           #24
312: invokevirtual #25
315: invokevirtual #28
318: lload         11
320: lconst_0
321: lcmp
322: ifne          329
325: iconst_1
326: goto          330
329: iconst_0
330: invokestatic  #29
333: aload         14
335: invokestatic  #53
338: aload         14
340: invokestatic  #66
343: ldc           #77
345: invokestatic  #68
348: new           #22
351: dup
352: invokespecial #23
355: ldc           #24
357: invokevirtual #25
360: iload         15
362: invokevirtual #41
365: ldc           #27
367: invokevirtual #25
370: iconst_m1
371: invokevirtual #41
374: ldc           #24
376: invokevirtual #25
379: invokevirtual #28
382: iload         15
384: iconst_m1
385: if_icmpne     392
388: iconst_1
389: goto          393
392: iconst_0
393: invokestatic  #29
396: new           #22
399: dup
400: invokespecial #23
403: ldc           #24
405: invokevirtual #25
408: iload         16
410: invokevirtual #69
413: ldc           #27
415: invokevirtual #25
418: iconst_0
419: invokevirtual #69
422: ldc           #24
424: invokevirtual #25
427: invokevirtual #28
430: iload         16
432: ifne          439
435: iconst_1
436: goto          440
439: iconst_0
440: invokestatic  #29
443: new           #22
446: dup
447: invokespecial #23
450: ldc           #24
452: invokevirtual #25
455: iload         17
457: invokevirtual #41
460: ldc           #27
462: invokevirtual #25
465: iconst_m1
466: invokevirtual #41
469: ldc           #24
471: invokevirtual #25
474: invokevirtual #28
477: iload         17
479: iconst_m1
480: if_icmpne     487
483: iconst_1
484: goto          488
487: iconst_0
488: invokestatic  #29
491: return
Exception table:
from    to  target type
168   181   184   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test161
Start line: 5843
End line: 0
Method source code: 
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        long long23 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream26 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, 0, (int) (byte) 51);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #576
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: new           #73
81: dup
82: lconst_0
83: invokespecial #74
86: astore        9
88: aload         9
90: invokevirtual #75
93: astore        10
95: new           #73
98: dup
99: lconst_0
100: invokespecial #74
103: astore        11
105: aload         11
107: invokevirtual #75
110: astore        12
112: aload         10
114: aload         12
116: iconst_1
117: invokestatic  #177
120: istore        13
122: aload         10
124: invokestatic  #192
127: istore        14
129: aload_3
130: aload         10
132: iconst_4
133: iconst_m1
134: invokevirtual #63
137: aload_3
138: invokevirtual #47
141: lstore        15
143: new           #43
146: dup
147: aload_3
148: iconst_0
149: bipush        51
151: invokespecial #346
154: astore        17
156: new           #22
159: dup
160: invokespecial #23
163: ldc           #24
165: invokevirtual #25
168: lload         4
170: invokevirtual #26
173: ldc           #27
175: invokevirtual #25
178: lconst_0
179: invokevirtual #26
182: ldc           #24
184: invokevirtual #25
187: invokevirtual #28
190: lload         4
192: lconst_0
193: lcmp
194: ifne          201
197: iconst_1
198: goto          202
201: iconst_0
202: invokestatic  #29
205: aload         6
207: invokestatic  #53
210: new           #22
213: dup
214: invokespecial #23
217: ldc           #24
219: invokevirtual #25
222: iload         7
224: invokevirtual #41
227: ldc           #27
229: invokevirtual #25
232: iconst_0
233: invokevirtual #41
236: ldc           #24
238: invokevirtual #25
241: invokevirtual #28
244: iload         7
246: ifne          253
249: iconst_1
250: goto          254
253: iconst_0
254: invokestatic  #29
257: new           #22
260: dup
261: invokespecial #23
264: ldc           #24
266: invokevirtual #25
269: iload         8
271: invokevirtual #41
274: ldc           #27
276: invokevirtual #25
279: iconst_0
280: invokevirtual #41
283: ldc           #24
285: invokevirtual #25
288: invokevirtual #28
291: iload         8
293: ifne          300
296: iconst_1
297: goto          301
300: iconst_0
301: invokestatic  #29
304: aload         10
306: invokestatic  #53
309: aload         10
311: invokestatic  #66
314: ldc           #77
316: invokestatic  #68
319: aload         12
321: invokestatic  #53
324: aload         12
326: invokestatic  #66
329: ldc           #77
331: invokestatic  #68
334: new           #22
337: dup
338: invokespecial #23
341: ldc           #24
343: invokevirtual #25
346: iload         13
348: invokevirtual #69
351: ldc           #27
353: invokevirtual #25
356: iconst_1
357: invokevirtual #69
360: ldc           #24
362: invokevirtual #25
365: invokevirtual #28
368: iload         13
370: iconst_1
371: if_icmpne     378
374: iconst_1
375: goto          379
378: iconst_0
379: invokestatic  #29
382: new           #22
385: dup
386: invokespecial #23
389: ldc           #24
391: invokevirtual #25
394: iload         14
396: invokevirtual #69
399: ldc           #27
401: invokevirtual #25
404: iconst_1
405: invokevirtual #69
408: ldc           #24
410: invokevirtual #25
413: invokevirtual #28
416: iload         14
418: iconst_1
419: if_icmpne     426
422: iconst_1
423: goto          427
426: iconst_0
427: invokestatic  #29
430: new           #22
433: dup
434: invokespecial #23
437: ldc           #24
439: invokevirtual #25
442: lload         15
444: invokevirtual #26
447: ldc           #27
449: invokevirtual #25
452: lconst_0
453: invokevirtual #26
456: ldc           #24
458: invokevirtual #25
461: invokevirtual #28
464: lload         15
466: lconst_0
467: lcmp
468: ifne          475
471: iconst_1
472: goto          476
475: iconst_0
476: invokestatic  #29
479: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test162
Start line: 5877
End line: 0
Method source code: 
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream2 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream4 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream(outputStream0);
        arArchiveOutputStream4.finish();
        arArchiveOutputStream4.setLongFileMode((int) (byte) 48);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry9 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory10 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream12 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream12, "jar");
        tarArchiveOutputStream14.count(0L);
        long long17 = tarArchiveOutputStream14.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream18 = archiveStreamFactory10.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream14);
        boolean boolean19 = tarArchiveEntry9.equals((java.lang.Object) "ar");
        long long20 = tarArchiveEntry9.getSize();
        try {
            arArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry9);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #577
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #43
30: dup
31: aload_1
32: ldc           #44
34: invokespecial #45
37: astore_2
38: new           #182
41: dup
42: aload_1
43: invokespecial #183
46: astore_3
47: new           #240
50: dup
51: aload_1
52: invokespecial #241
55: astore        4
57: aload         4
59: invokevirtual #286
62: aload         4
64: bipush        48
66: invokevirtual #399
69: new           #112
72: dup
73: ldc           #225
75: invokespecial #120
78: astore        5
80: new           #8
83: dup
84: invokespecial #9
87: astore        6
89: aconst_null
90: astore        7
92: new           #43
95: dup
96: aload         7
98: ldc           #44
100: invokespecial #45
103: astore        8
105: aload         8
107: lconst_0
108: invokevirtual #46
111: aload         8
113: invokevirtual #47
116: lstore        9
118: aload         6
120: ldc           #48
122: aload         8
124: invokevirtual #49
127: astore        11
129: aload         5
131: ldc           #48
133: invokevirtual #133
136: istore        12
138: aload         5
140: invokevirtual #156
143: lstore        13
145: aload         4
147: aload         5
149: invokevirtual #288
152: ldc_w         #289
155: invokestatic  #20
158: goto          163
161: astore        15
163: new           #22
166: dup
167: invokespecial #23
170: ldc           #24
172: invokevirtual #25
175: lload         9
177: invokevirtual #26
180: ldc           #27
182: invokevirtual #25
185: lconst_0
186: invokevirtual #26
189: ldc           #24
191: invokevirtual #25
194: invokevirtual #28
197: lload         9
199: lconst_0
200: lcmp
201: ifne          208
204: iconst_1
205: goto          209
208: iconst_0
209: invokestatic  #29
212: aload         11
214: invokestatic  #53
217: new           #22
220: dup
221: invokespecial #23
224: ldc           #24
226: invokevirtual #25
229: iload         12
231: invokevirtual #69
234: ldc           #27
236: invokevirtual #25
239: iconst_0
240: invokevirtual #69
243: ldc           #24
245: invokevirtual #25
248: invokevirtual #28
251: iload         12
253: ifne          260
256: iconst_1
257: goto          261
260: iconst_0
261: invokestatic  #29
264: new           #22
267: dup
268: invokespecial #23
271: ldc           #24
273: invokevirtual #25
276: lload         13
278: invokevirtual #26
281: ldc           #27
283: invokevirtual #25
286: lconst_0
287: invokevirtual #26
290: ldc           #24
292: invokevirtual #25
295: invokevirtual #28
298: lload         13
300: lconst_0
301: lcmp
302: ifne          309
305: iconst_1
306: goto          310
309: iconst_0
310: invokestatic  #29
313: return
Exception table:
from    to  target type
145   158   161   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test163
Start line: 5909
End line: 0
Method source code: 
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(4);
        arArchiveOutputStream10.setLongFileMode(40960);
        try {
            arArchiveOutputStream10.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #578
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: iconst_4
85: invokevirtual #399
88: aload         9
90: ldc           #109
92: invokevirtual #399
95: aload         9
97: invokevirtual #539
100: ldc           #83
102: invokestatic  #20
105: goto          110
108: astore        10
110: new           #22
113: dup
114: invokespecial #23
117: ldc           #24
119: invokevirtual #25
122: lload         4
124: invokevirtual #26
127: ldc           #27
129: invokevirtual #25
132: lconst_0
133: invokevirtual #26
136: ldc           #24
138: invokevirtual #25
141: invokevirtual #28
144: lload         4
146: lconst_0
147: lcmp
148: ifne          155
151: iconst_1
152: goto          156
155: iconst_0
156: invokestatic  #29
159: aload         6
161: invokestatic  #53
164: new           #22
167: dup
168: invokespecial #23
171: ldc           #24
173: invokevirtual #25
176: lload         7
178: invokevirtual #26
181: ldc           #27
183: invokevirtual #25
186: lconst_0
187: invokevirtual #26
190: ldc           #24
192: invokevirtual #25
195: invokevirtual #28
198: lload         7
200: lconst_0
201: lcmp
202: ifne          209
205: iconst_1
206: goto          210
209: iconst_0
210: invokestatic  #29
213: return
Exception table:
from    to  target type
95   105   108   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test164
Start line: 5935
End line: 0
Method source code: 
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        int int11 = tarArchiveOutputStream4.getCount();
        try {
            tarArchiveOutputStream4.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #579
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload_3
83: invokevirtual #60
86: istore        10
88: aload_3
89: invokevirtual #71
92: ldc           #51
94: invokestatic  #20
97: goto          102
100: astore        11
102: new           #22
105: dup
106: invokespecial #23
109: ldc           #24
111: invokevirtual #25
114: lload         4
116: invokevirtual #26
119: ldc           #27
121: invokevirtual #25
124: lconst_0
125: invokevirtual #26
128: ldc           #24
130: invokevirtual #25
133: invokevirtual #28
136: lload         4
138: lconst_0
139: lcmp
140: ifne          147
143: iconst_1
144: goto          148
147: iconst_0
148: invokestatic  #29
151: aload         6
153: invokestatic  #53
156: new           #22
159: dup
160: invokespecial #23
163: ldc           #24
165: invokevirtual #25
168: lload         7
170: invokevirtual #26
173: ldc           #27
175: invokevirtual #25
178: lconst_0
179: invokevirtual #26
182: ldc           #24
184: invokevirtual #25
187: invokevirtual #28
190: lload         7
192: lconst_0
193: lcmp
194: ifne          201
197: iconst_1
198: goto          202
201: iconst_0
202: invokestatic  #29
205: new           #22
208: dup
209: invokespecial #23
212: ldc           #24
214: invokevirtual #25
217: iload         10
219: invokevirtual #41
222: ldc           #27
224: invokevirtual #25
227: iconst_0
228: invokevirtual #41
231: ldc           #24
233: invokevirtual #25
236: invokevirtual #28
239: iload         10
241: ifne          248
244: iconst_1
245: goto          249
248: iconst_0
249: invokestatic  #29
252: return
Exception table:
from    to  target type
88    97   100   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test165
Start line: 5961
End line: 0
Method source code: 
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        try {
            jarArchiveOutputStream12.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #580
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: aload         10
105: invokevirtual #581
108: ldc           #51
110: invokestatic  #20
113: goto          118
116: astore        11
118: new           #22
121: dup
122: invokespecial #23
125: ldc           #24
127: invokevirtual #25
130: lload         4
132: invokevirtual #26
135: ldc           #27
137: invokevirtual #25
140: lconst_0
141: invokevirtual #26
144: ldc           #24
146: invokevirtual #25
149: invokevirtual #28
152: lload         4
154: lconst_0
155: lcmp
156: ifne          163
159: iconst_1
160: goto          164
163: iconst_0
164: invokestatic  #29
167: aload         6
169: invokestatic  #53
172: new           #22
175: dup
176: invokespecial #23
179: ldc           #24
181: invokevirtual #25
184: iload         7
186: invokevirtual #41
189: ldc           #27
191: invokevirtual #25
194: iconst_0
195: invokevirtual #41
198: ldc           #24
200: invokevirtual #25
203: invokevirtual #28
206: iload         7
208: ifne          215
211: iconst_1
212: goto          216
215: iconst_0
216: invokestatic  #29
219: return
Exception table:
from    to  target type
103   113   116   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test166
Start line: 5987
End line: 0
Method source code: 
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        java.io.File file10 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry12 = cpioArchiveOutputStream9.createArchiveEntry(file10, "org.apache.commons.compress.archivers.ArchiveException: data descriptor");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #582
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #143
69: dup
70: aload         6
72: invokespecial #144
75: astore        7
77: aconst_null
78: astore        8
80: aload         7
82: aload         8
84: ldc_w         #293
87: invokevirtual #146
90: astore        9
92: ldc           #51
94: invokestatic  #20
97: goto          102
100: astore        9
102: new           #22
105: dup
106: invokespecial #23
109: ldc           #24
111: invokevirtual #25
114: lload         4
116: invokevirtual #26
119: ldc           #27
121: invokevirtual #25
124: lconst_0
125: invokevirtual #26
128: ldc           #24
130: invokevirtual #25
133: invokevirtual #28
136: lload         4
138: lconst_0
139: lcmp
140: ifne          147
143: iconst_1
144: goto          148
147: iconst_0
148: invokestatic  #29
151: aload         6
153: invokestatic  #53
156: return
Exception table:
from    to  target type
80    97   100   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test167
Start line: 6010
End line: 0
Method source code: 
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(4);
        java.io.File file13 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry15 = arArchiveOutputStream10.createArchiveEntry(file13, "org.apache.commons.compress.archivers.ArchiveException: TRAILER!!!");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #583
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: iconst_4
85: invokevirtual #399
88: aconst_null
89: astore        10
91: aload         9
93: aload         10
95: ldc_w         #584
98: invokevirtual #400
101: astore        11
103: ldc           #51
105: invokestatic  #20
108: goto          113
111: astore        11
113: new           #22
116: dup
117: invokespecial #23
120: ldc           #24
122: invokevirtual #25
125: lload         4
127: invokevirtual #26
130: ldc           #27
132: invokevirtual #25
135: lconst_0
136: invokevirtual #26
139: ldc           #24
141: invokevirtual #25
144: invokevirtual #28
147: lload         4
149: lconst_0
150: lcmp
151: ifne          158
154: iconst_1
155: goto          159
158: iconst_0
159: invokestatic  #29
162: aload         6
164: invokestatic  #53
167: new           #22
170: dup
171: invokespecial #23
174: ldc           #24
176: invokevirtual #25
179: lload         7
181: invokevirtual #26
184: ldc           #27
186: invokevirtual #25
189: lconst_0
190: invokevirtual #26
193: ldc           #24
195: invokevirtual #25
198: invokevirtual #28
201: lload         7
203: lconst_0
204: lcmp
205: ifne          212
208: iconst_1
209: goto          213
212: iconst_0
213: invokestatic  #29
216: return
Exception table:
from    to  target type
91   108   111   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test168
Start line: 6036
End line: 0
Method source code: 
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream3 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream2);
        tarArchiveInputStream3.mark(0);
        tarArchiveInputStream3.reset();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream7 = archiveStreamFactory0.createArchiveInputStream("65\001\n", (java.io.InputStream) tarArchiveInputStream3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: 65?? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #585
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #31
38: dup
39: aload_2
40: invokespecial #32
43: astore_3
44: aload_3
45: iconst_0
46: invokevirtual #178
49: aload_3
50: invokevirtual #256
53: aload_1
54: ldc_w         #586
57: aload_3
58: invokevirtual #38
61: astore        4
63: ldc_w         #587
66: invokestatic  #20
69: goto          74
72: astore        4
74: return
Exception table:
from    to  target type
53    69    72   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test169
Start line: 6054
End line: 0
Method source code: 
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        java.lang.String str20 = zipArchiveOutputStream13.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21);
        java.io.InputStream inputStream24 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24);
        long long26 = jarArchiveInputStream25.getBytesRead();
        long long27 = jarArchiveInputStream25.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25);
        arArchiveInputStream28.close();
        arArchiveInputStream28.pushedBackBytes((-1L));
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream28);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream33);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream33, "always", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream38, (int) (short) 8);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray43 = zipLong42.getBytes();
        long long44 = zipLong42.getValue();
        java.io.InputStream inputStream45 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45);
        long long47 = jarArchiveInputStream46.getBytesRead();
        long long48 = jarArchiveInputStream46.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46);
        boolean boolean51 = zipLong42.equals((java.lang.Object) jarArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46, 1000, 1);
        byte[] byteArray59 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean60 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray59);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong61 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray59);
        boolean boolean63 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray59, (int) (byte) 50);
        int int66 = tarArchiveInputStream54.read(byteArray59, (int) (byte) -1, 24576);
        int int69 = tarArchiveInputStream40.read(byteArray59, 504, (int) 'a');
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream70 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) tarArchiveInputStream40);
        java.io.InputStream inputStream72 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream73 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream72);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream74 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream73);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry76 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int77 = tarArchiveEntry76.getDevMinor();
        tarArchiveEntry76.setIds((int) (short) 3, 0);
        boolean boolean81 = jarArchiveInputStream73.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry76);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream82 = archiveStreamFactory0.createArchiveInputStream("\ufffd\ufffd\ufffd\ufffd", (java.io.InputStream) jarArchiveInputStream73);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(archiveInputStream70);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #588
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: aload         9
125: invokevirtual #310
128: astore        13
130: new           #143
133: dup
134: aload         9
136: invokespecial #144
139: astore        14
141: aload_1
142: ldc           #164
144: aload         14
146: invokevirtual #49
149: astore        15
151: aconst_null
152: astore        16
154: new           #10
157: dup
158: aload         16
160: invokespecial #11
163: astore        17
165: aload         17
167: invokevirtual #12
170: lstore        18
172: aload         17
174: invokevirtual #12
177: lstore        20
179: new           #13
182: dup
183: aload         17
185: invokespecial #14
188: astore        22
190: aload         22
192: invokevirtual #140
195: aload         22
197: ldc2_w        #297
200: invokevirtual #299
203: new           #33
206: dup
207: aload         22
209: invokespecial #34
212: astore        23
214: new           #15
217: dup
218: aload         22
220: invokespecial #300
223: astore        24
225: new           #10
228: dup
229: aload         24
231: invokespecial #11
234: astore        25
236: new           #15
239: dup
240: aload         24
242: ldc           #79
244: iconst_0
245: iconst_0
246: invokespecial #17
249: astore        26
251: new           #31
254: dup
255: aload         26
257: bipush        8
259: invokespecial #141
262: astore        27
264: new           #73
267: dup
268: lconst_0
269: invokespecial #74
272: astore        28
274: aload         28
276: invokevirtual #75
279: astore        29
281: aload         28
283: invokevirtual #336
286: lstore        30
288: aconst_null
289: astore        32
291: new           #10
294: dup
295: aload         32
297: invokespecial #11
300: astore        33
302: aload         33
304: invokevirtual #12
307: lstore        34
309: aload         33
311: invokevirtual #12
314: lstore        36
316: new           #13
319: dup
320: aload         33
322: invokespecial #14
325: astore        38
327: new           #31
330: dup
331: aload         33
333: invokespecial #32
336: astore        39
338: aload         28
340: aload         33
342: invokevirtual #337
345: istore        40
347: new           #31
350: dup
351: aload         33
353: sipush        1000
356: iconst_1
357: invokespecial #108
360: astore        41
362: iconst_4
363: newarray       byte
365: dup
366: iconst_0
367: bipush        54
369: bastore
370: dup
371: iconst_1
372: bipush        53
374: bastore
375: dup
376: iconst_2
377: iconst_1
378: bastore
379: dup
380: iconst_3
381: bipush        10
383: bastore
384: astore        42
386: aload         42
388: invokestatic  #192
391: istore        43
393: new           #73
396: dup
397: aload         42
399: invokespecial #406
402: astore        44
404: aload         42
406: bipush        50
408: invokestatic  #523
411: istore        45
413: aload         41
415: aload         42
417: iconst_m1
418: sipush        24576
421: invokevirtual #174
424: istore        46
426: aload         27
428: aload         42
430: sipush        504
433: bipush        97
435: invokevirtual #174
438: istore        47
440: aload_1
441: ldc           #164
443: aload         27
445: invokevirtual #38
448: astore        48
450: aconst_null
451: astore        49
453: new           #10
456: dup
457: aload         49
459: invokespecial #11
462: astore        50
464: new           #13
467: dup
468: aload         50
470: invokespecial #14
473: astore        51
475: new           #112
478: dup
479: ldc           #44
481: invokespecial #120
484: astore        52
486: aload         52
488: invokevirtual #129
491: istore        53
493: aload         52
495: iconst_3
496: iconst_0
497: invokevirtual #130
500: aload         50
502: aload         52
504: invokevirtual #589
507: istore        54
509: aload_1
510: ldc_w         #590
513: aload         50
515: invokevirtual #38
518: astore        55
520: ldc           #118
522: invokestatic  #20
525: goto          530
528: astore        55
530: new           #22
533: dup
534: invokespecial #23
537: ldc           #24
539: invokevirtual #25
542: lload         4
544: invokevirtual #26
547: ldc           #27
549: invokevirtual #25
552: lconst_0
553: invokevirtual #26
556: ldc           #24
558: invokevirtual #25
561: invokevirtual #28
564: lload         4
566: lconst_0
567: lcmp
568: ifne          575
571: iconst_1
572: goto          576
575: iconst_0
576: invokestatic  #29
579: aload         6
581: invokestatic  #53
584: new           #22
587: dup
588: invokespecial #23
591: ldc           #24
593: invokevirtual #25
596: iload         11
598: invokevirtual #69
601: ldc           #27
603: invokevirtual #25
606: iconst_0
607: invokevirtual #69
610: ldc           #24
612: invokevirtual #25
615: invokevirtual #28
618: iload         11
620: ifne          627
623: iconst_1
624: goto          628
627: iconst_0
628: invokestatic  #29
631: new           #22
634: dup
635: invokespecial #23
638: ldc           #24
640: invokevirtual #25
643: iload         12
645: invokevirtual #69
648: ldc           #27
650: invokevirtual #25
653: iconst_0
654: invokevirtual #69
657: ldc           #24
659: invokevirtual #25
662: invokevirtual #28
665: iload         12
667: ifne          674
670: iconst_1
671: goto          675
674: iconst_0
675: invokestatic  #29
678: new           #22
681: dup
682: invokespecial #23
685: ldc           #24
687: invokevirtual #25
690: aload         13
692: invokevirtual #25
695: ldc_w         #317
698: invokevirtual #25
701: invokevirtual #28
704: aload         13
706: ldc           #85
708: invokestatic  #154
711: aload         15
713: invokestatic  #53
716: new           #22
719: dup
720: invokespecial #23
723: ldc           #24
725: invokevirtual #25
728: lload         18
730: invokevirtual #26
733: ldc           #27
735: invokevirtual #25
738: lconst_0
739: invokevirtual #26
742: ldc           #24
744: invokevirtual #25
747: invokevirtual #28
750: lload         18
752: lconst_0
753: lcmp
754: ifne          761
757: iconst_1
758: goto          762
761: iconst_0
762: invokestatic  #29
765: new           #22
768: dup
769: invokespecial #23
772: ldc           #24
774: invokevirtual #25
777: lload         20
779: invokevirtual #26
782: ldc           #27
784: invokevirtual #25
787: lconst_0
788: invokevirtual #26
791: ldc           #24
793: invokevirtual #25
796: invokevirtual #28
799: lload         20
801: lconst_0
802: lcmp
803: ifne          810
806: iconst_1
807: goto          811
810: iconst_0
811: invokestatic  #29
814: aload         29
816: invokestatic  #53
819: aload         29
821: invokestatic  #66
824: ldc           #77
826: invokestatic  #68
829: new           #22
832: dup
833: invokespecial #23
836: ldc           #24
838: invokevirtual #25
841: lload         30
843: invokevirtual #26
846: ldc           #27
848: invokevirtual #25
851: lconst_0
852: invokevirtual #26
855: ldc           #24
857: invokevirtual #25
860: invokevirtual #28
863: lload         30
865: lconst_0
866: lcmp
867: ifne          874
870: iconst_1
871: goto          875
874: iconst_0
875: invokestatic  #29
878: new           #22
881: dup
882: invokespecial #23
885: ldc           #24
887: invokevirtual #25
890: lload         34
892: invokevirtual #26
895: ldc           #27
897: invokevirtual #25
900: lconst_0
901: invokevirtual #26
904: ldc           #24
906: invokevirtual #25
909: invokevirtual #28
912: lload         34
914: lconst_0
915: lcmp
916: ifne          923
919: iconst_1
920: goto          924
923: iconst_0
924: invokestatic  #29
927: new           #22
930: dup
931: invokespecial #23
934: ldc           #24
936: invokevirtual #25
939: lload         36
941: invokevirtual #26
944: ldc           #27
946: invokevirtual #25
949: lconst_0
950: invokevirtual #26
953: ldc           #24
955: invokevirtual #25
958: invokevirtual #28
961: lload         36
963: lconst_0
964: lcmp
965: ifne          972
968: iconst_1
969: goto          973
972: iconst_0
973: invokestatic  #29
976: new           #22
979: dup
980: invokespecial #23
983: ldc           #24
985: invokevirtual #25
988: iload         40
990: invokevirtual #69
993: ldc           #27
995: invokevirtual #25
998: iconst_0
999: invokevirtual #69
1002: ldc           #24
1004: invokevirtual #25
1007: invokevirtual #28
1010: iload         40
1012: ifne          1019
1015: iconst_1
1016: goto          1020
1019: iconst_0
1020: invokestatic  #29
1023: aload         42
1025: invokestatic  #53
1028: aload         42
1030: invokestatic  #66
1033: ldc_w         #409
1036: invokestatic  #68
1039: new           #22
1042: dup
1043: invokespecial #23
1046: ldc           #24
1048: invokevirtual #25
1051: iload         43
1053: invokevirtual #69
1056: ldc           #27
1058: invokevirtual #25
1061: iconst_0
1062: invokevirtual #69
1065: ldc           #24
1067: invokevirtual #25
1070: invokevirtual #28
1073: iload         43
1075: ifne          1082
1078: iconst_1
1079: goto          1083
1082: iconst_0
1083: invokestatic  #29
1086: new           #22
1089: dup
1090: invokespecial #23
1093: ldc           #24
1095: invokevirtual #25
1098: iload         45
1100: invokevirtual #69
1103: ldc           #27
1105: invokevirtual #25
1108: iconst_0
1109: invokevirtual #69
1112: ldc           #24
1114: invokevirtual #25
1117: invokevirtual #28
1120: iload         45
1122: ifne          1129
1125: iconst_1
1126: goto          1130
1129: iconst_0
1130: invokestatic  #29
1133: new           #22
1136: dup
1137: invokespecial #23
1140: ldc           #24
1142: invokevirtual #25
1145: iload         46
1147: invokevirtual #41
1150: ldc           #27
1152: invokevirtual #25
1155: iconst_m1
1156: invokevirtual #41
1159: ldc           #24
1161: invokevirtual #25
1164: invokevirtual #28
1167: iload         46
1169: iconst_m1
1170: if_icmpne     1177
1173: iconst_1
1174: goto          1178
1177: iconst_0
1178: invokestatic  #29
1181: new           #22
1184: dup
1185: invokespecial #23
1188: ldc           #24
1190: invokevirtual #25
1193: iload         47
1195: invokevirtual #41
1198: ldc           #27
1200: invokevirtual #25
1203: iconst_m1
1204: invokevirtual #41
1207: ldc           #24
1209: invokevirtual #25
1212: invokevirtual #28
1215: iload         47
1217: iconst_m1
1218: if_icmpne     1225
1221: iconst_1
1222: goto          1226
1225: iconst_0
1226: invokestatic  #29
1229: aload         48
1231: invokestatic  #53
1234: new           #22
1237: dup
1238: invokespecial #23
1241: ldc           #24
1243: invokevirtual #25
1246: iload         53
1248: invokevirtual #41
1251: ldc           #27
1253: invokevirtual #25
1256: iconst_0
1257: invokevirtual #41
1260: ldc           #24
1262: invokevirtual #25
1265: invokevirtual #28
1268: iload         53
1270: ifne          1277
1273: iconst_1
1274: goto          1278
1277: iconst_0
1278: invokestatic  #29
1281: new           #22
1284: dup
1285: invokespecial #23
1288: ldc           #24
1290: invokevirtual #25
1293: iload         54
1295: invokevirtual #69
1298: ldc           #27
1300: invokevirtual #25
1303: iconst_0
1304: invokevirtual #69
1307: ldc           #24
1309: invokevirtual #25
1312: invokevirtual #28
1315: iload         54
1317: ifne          1324
1320: iconst_1
1321: goto          1325
1324: iconst_0
1325: invokestatic  #29
1328: return
Exception table:
from    to  target type
509   525   528   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test170
Start line: 6144
End line: 0
Method source code: 
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(83);
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream15 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) arArchiveOutputStream10, (short) 12, 33188);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown format: 12");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #591
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: bipush        83
86: invokevirtual #399
89: new           #143
92: dup
93: aload         9
95: bipush        12
97: ldc_w         #420
100: invokespecial #551
103: astore        10
105: ldc_w         #592
108: invokestatic  #20
111: goto          116
114: astore        10
116: new           #22
119: dup
120: invokespecial #23
123: ldc           #24
125: invokevirtual #25
128: lload         4
130: invokevirtual #26
133: ldc           #27
135: invokevirtual #25
138: lconst_0
139: invokevirtual #26
142: ldc           #24
144: invokevirtual #25
147: invokevirtual #28
150: lload         4
152: lconst_0
153: lcmp
154: ifne          161
157: iconst_1
158: goto          162
161: iconst_0
162: invokestatic  #29
165: aload         6
167: invokestatic  #53
170: new           #22
173: dup
174: invokespecial #23
177: ldc           #24
179: invokevirtual #25
182: lload         7
184: invokevirtual #26
187: ldc           #27
189: invokevirtual #25
192: lconst_0
193: invokevirtual #26
196: ldc           #24
198: invokevirtual #25
201: invokevirtual #28
204: lload         7
206: lconst_0
207: lcmp
208: ifne          215
211: iconst_1
212: goto          216
215: iconst_0
216: invokestatic  #29
219: return
Exception table:
from    to  target type
89   111   114   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test171
Start line: 6169
End line: 0
Method source code: 
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        tarArchiveOutputStream4.count(0);
        java.io.InputStream inputStream11 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream11);
        long long13 = jarArchiveInputStream12.getBytesRead();
        long long14 = jarArchiveInputStream12.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream12);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream16 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream12);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry17 = tarArchiveInputStream16.getNextEntry();
        long long18 = tarArchiveInputStream16.getBytesRead();
        byte[] byteArray23 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean24 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray23);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong25 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray23);
        boolean boolean27 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray23, (int) (byte) 50);
        int int30 = tarArchiveInputStream16.read(byteArray23, 0, 2048);
        byte[] byteArray32 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes("always");
        int int35 = tarArchiveInputStream16.read(byteArray32, 49152, (int) (byte) 100);
        byte[] byteArray40 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean41 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray40);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray40);
        boolean boolean44 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray40, (int) (byte) 50);
        boolean boolean45 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray40);
        int int48 = tarArchiveInputStream16.read(byteArray40, (int) (byte) 48, 504);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong49 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray40);
        boolean boolean51 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray40, (-1));
        try {
            tarArchiveOutputStream4.write(byteArray40, 33188, 36864);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '36864' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNull(archiveEntry17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[97, 108, 119, 97, 121, 115]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #593
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: iconst_0
68: invokevirtual #356
71: aconst_null
72: astore        7
74: new           #10
77: dup
78: aload         7
80: invokespecial #11
83: astore        8
85: aload         8
87: invokevirtual #12
90: lstore        9
92: aload         8
94: invokevirtual #12
97: lstore        11
99: new           #13
102: dup
103: aload         8
105: invokespecial #14
108: astore        13
110: new           #31
113: dup
114: aload         8
116: invokespecial #32
119: astore        14
121: aload         14
123: invokevirtual #199
126: astore        15
128: aload         14
130: invokevirtual #573
133: lstore        16
135: iconst_4
136: newarray       byte
138: dup
139: iconst_0
140: bipush        54
142: bastore
143: dup
144: iconst_1
145: bipush        53
147: bastore
148: dup
149: iconst_2
150: iconst_1
151: bastore
152: dup
153: iconst_3
154: bipush        10
156: bastore
157: astore        18
159: aload         18
161: invokestatic  #192
164: istore        19
166: new           #73
169: dup
170: aload         18
172: invokespecial #406
175: astore        20
177: aload         18
179: bipush        50
181: invokestatic  #523
184: istore        21
186: aload         14
188: aload         18
190: iconst_0
191: sipush        2048
194: invokevirtual #174
197: istore        22
199: ldc           #79
201: invokestatic  #594
204: astore        23
206: aload         14
208: aload         23
210: ldc_w         #595
213: bipush        100
215: invokevirtual #174
218: istore        24
220: iconst_4
221: newarray       byte
223: dup
224: iconst_0
225: bipush        54
227: bastore
228: dup
229: iconst_1
230: bipush        53
232: bastore
233: dup
234: iconst_2
235: iconst_1
236: bastore
237: dup
238: iconst_3
239: bipush        10
241: bastore
242: astore        25
244: aload         25
246: invokestatic  #192
249: istore        26
251: new           #73
254: dup
255: aload         25
257: invokespecial #406
260: astore        27
262: aload         25
264: bipush        50
266: invokestatic  #523
269: istore        28
271: aload         25
273: invokestatic  #192
276: istore        29
278: aload         14
280: aload         25
282: bipush        48
284: sipush        504
287: invokevirtual #174
290: istore        30
292: new           #73
295: dup
296: aload         25
298: invokespecial #406
301: astore        31
303: aload         25
305: iconst_m1
306: invokestatic  #523
309: istore        32
311: aload_3
312: aload         25
314: ldc_w         #420
317: ldc_w         #373
320: invokevirtual #63
323: ldc_w         #596
326: invokestatic  #20
329: goto          334
332: astore        33
334: new           #22
337: dup
338: invokespecial #23
341: ldc           #24
343: invokevirtual #25
346: lload         4
348: invokevirtual #26
351: ldc           #27
353: invokevirtual #25
356: lconst_0
357: invokevirtual #26
360: ldc           #24
362: invokevirtual #25
365: invokevirtual #28
368: lload         4
370: lconst_0
371: lcmp
372: ifne          379
375: iconst_1
376: goto          380
379: iconst_0
380: invokestatic  #29
383: aload         6
385: invokestatic  #53
388: new           #22
391: dup
392: invokespecial #23
395: ldc           #24
397: invokevirtual #25
400: lload         9
402: invokevirtual #26
405: ldc           #27
407: invokevirtual #25
410: lconst_0
411: invokevirtual #26
414: ldc           #24
416: invokevirtual #25
419: invokevirtual #28
422: lload         9
424: lconst_0
425: lcmp
426: ifne          433
429: iconst_1
430: goto          434
433: iconst_0
434: invokestatic  #29
437: new           #22
440: dup
441: invokespecial #23
444: ldc           #24
446: invokevirtual #25
449: lload         11
451: invokevirtual #26
454: ldc           #27
456: invokevirtual #25
459: lconst_0
460: invokevirtual #26
463: ldc           #24
465: invokevirtual #25
468: invokevirtual #28
471: lload         11
473: lconst_0
474: lcmp
475: ifne          482
478: iconst_1
479: goto          483
482: iconst_0
483: invokestatic  #29
486: aload         15
488: invokestatic  #168
491: new           #22
494: dup
495: invokespecial #23
498: ldc           #24
500: invokevirtual #25
503: lload         16
505: invokevirtual #26
508: ldc           #27
510: invokevirtual #25
513: lconst_0
514: invokevirtual #26
517: ldc           #24
519: invokevirtual #25
522: invokevirtual #28
525: lload         16
527: lconst_0
528: lcmp
529: ifne          536
532: iconst_1
533: goto          537
536: iconst_0
537: invokestatic  #29
540: aload         18
542: invokestatic  #53
545: aload         18
547: invokestatic  #66
550: ldc_w         #409
553: invokestatic  #68
556: new           #22
559: dup
560: invokespecial #23
563: ldc           #24
565: invokevirtual #25
568: iload         19
570: invokevirtual #69
573: ldc           #27
575: invokevirtual #25
578: iconst_0
579: invokevirtual #69
582: ldc           #24
584: invokevirtual #25
587: invokevirtual #28
590: iload         19
592: ifne          599
595: iconst_1
596: goto          600
599: iconst_0
600: invokestatic  #29
603: new           #22
606: dup
607: invokespecial #23
610: ldc           #24
612: invokevirtual #25
615: iload         21
617: invokevirtual #69
620: ldc           #27
622: invokevirtual #25
625: iconst_0
626: invokevirtual #69
629: ldc           #24
631: invokevirtual #25
634: invokevirtual #28
637: iload         21
639: ifne          646
642: iconst_1
643: goto          647
646: iconst_0
647: invokestatic  #29
650: new           #22
653: dup
654: invokespecial #23
657: ldc           #24
659: invokevirtual #25
662: iload         22
664: invokevirtual #41
667: ldc           #27
669: invokevirtual #25
672: iconst_m1
673: invokevirtual #41
676: ldc           #24
678: invokevirtual #25
681: invokevirtual #28
684: iload         22
686: iconst_m1
687: if_icmpne     694
690: iconst_1
691: goto          695
694: iconst_0
695: invokestatic  #29
698: aload         23
700: invokestatic  #53
703: aload         23
705: invokestatic  #66
708: ldc_w         #597
711: invokestatic  #68
714: new           #22
717: dup
718: invokespecial #23
721: ldc           #24
723: invokevirtual #25
726: iload         24
728: invokevirtual #41
731: ldc           #27
733: invokevirtual #25
736: iconst_m1
737: invokevirtual #41
740: ldc           #24
742: invokevirtual #25
745: invokevirtual #28
748: iload         24
750: iconst_m1
751: if_icmpne     758
754: iconst_1
755: goto          759
758: iconst_0
759: invokestatic  #29
762: aload         25
764: invokestatic  #53
767: aload         25
769: invokestatic  #66
772: ldc_w         #409
775: invokestatic  #68
778: new           #22
781: dup
782: invokespecial #23
785: ldc           #24
787: invokevirtual #25
790: iload         26
792: invokevirtual #69
795: ldc           #27
797: invokevirtual #25
800: iconst_0
801: invokevirtual #69
804: ldc           #24
806: invokevirtual #25
809: invokevirtual #28
812: iload         26
814: ifne          821
817: iconst_1
818: goto          822
821: iconst_0
822: invokestatic  #29
825: new           #22
828: dup
829: invokespecial #23
832: ldc           #24
834: invokevirtual #25
837: iload         28
839: invokevirtual #69
842: ldc           #27
844: invokevirtual #25
847: iconst_0
848: invokevirtual #69
851: ldc           #24
853: invokevirtual #25
856: invokevirtual #28
859: iload         28
861: ifne          868
864: iconst_1
865: goto          869
868: iconst_0
869: invokestatic  #29
872: new           #22
875: dup
876: invokespecial #23
879: ldc           #24
881: invokevirtual #25
884: iload         29
886: invokevirtual #69
889: ldc           #27
891: invokevirtual #25
894: iconst_0
895: invokevirtual #69
898: ldc           #24
900: invokevirtual #25
903: invokevirtual #28
906: iload         29
908: ifne          915
911: iconst_1
912: goto          916
915: iconst_0
916: invokestatic  #29
919: new           #22
922: dup
923: invokespecial #23
926: ldc           #24
928: invokevirtual #25
931: iload         30
933: invokevirtual #41
936: ldc           #27
938: invokevirtual #25
941: iconst_m1
942: invokevirtual #41
945: ldc           #24
947: invokevirtual #25
950: invokevirtual #28
953: iload         30
955: iconst_m1
956: if_icmpne     963
959: iconst_1
960: goto          964
963: iconst_0
964: invokestatic  #29
967: new           #22
970: dup
971: invokespecial #23
974: ldc           #24
976: invokevirtual #25
979: iload         32
981: invokevirtual #69
984: ldc           #27
986: invokevirtual #25
989: iconst_0
990: invokevirtual #69
993: ldc           #24
995: invokevirtual #25
998: invokevirtual #28
1001: iload         32
1003: ifne          1010
1006: iconst_1
1007: goto          1011
1010: iconst_0
1011: invokestatic  #29
1014: return
Exception table:
from    to  target type
311   329   332   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test172
Start line: 6233
End line: 0
Method source code: 
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        java.io.InputStream inputStream23 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream23);
        long long25 = jarArchiveInputStream24.getBytesRead();
        long long26 = jarArchiveInputStream24.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream27 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream24);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong29 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray30 = zipLong29.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong32 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray33 = zipLong32.getBytes();
        boolean boolean35 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray30, byteArray33, true);
        boolean boolean36 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray30);
        int int39 = jarArchiveInputStream24.read(byteArray30, (int) (byte) 10, 3);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong40 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray30);
        java.lang.Object obj41 = zipLong40.clone();
        byte[] byteArray42 = zipLong40.getBytes();
        try {
            tarArchiveOutputStream4.write(byteArray42, 83, 1000);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '1000' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "ZipLong value: 0");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "ZipLong value: 0");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "ZipLong value: 0");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[0, 0, 0, 0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #598
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: new           #73
81: dup
82: lconst_0
83: invokespecial #74
86: astore        9
88: aload         9
90: invokevirtual #75
93: astore        10
95: new           #73
98: dup
99: lconst_0
100: invokespecial #74
103: astore        11
105: aload         11
107: invokevirtual #75
110: astore        12
112: aload         10
114: aload         12
116: iconst_1
117: invokestatic  #177
120: istore        13
122: aload         10
124: invokestatic  #192
127: istore        14
129: aload_3
130: aload         10
132: iconst_4
133: iconst_m1
134: invokevirtual #63
137: aconst_null
138: astore        15
140: new           #10
143: dup
144: aload         15
146: invokespecial #11
149: astore        16
151: aload         16
153: invokevirtual #12
156: lstore        17
158: aload         16
160: invokevirtual #12
163: lstore        19
165: new           #13
168: dup
169: aload         16
171: invokespecial #14
174: astore        21
176: new           #73
179: dup
180: lconst_0
181: invokespecial #74
184: astore        22
186: aload         22
188: invokevirtual #75
191: astore        23
193: new           #73
196: dup
197: lconst_0
198: invokespecial #74
201: astore        24
203: aload         24
205: invokevirtual #75
208: astore        25
210: aload         23
212: aload         25
214: iconst_1
215: invokestatic  #177
218: istore        26
220: aload         23
222: invokestatic  #192
225: istore        27
227: aload         16
229: aload         23
231: bipush        10
233: iconst_3
234: invokevirtual #76
237: istore        28
239: new           #73
242: dup
243: aload         23
245: invokespecial #406
248: astore        29
250: aload         29
252: invokevirtual #599
255: astore        30
257: aload         29
259: invokevirtual #75
262: astore        31
264: aload_3
265: aload         31
267: bipush        83
269: sipush        1000
272: invokevirtual #63
275: ldc_w         #565
278: invokestatic  #20
281: goto          286
284: astore        32
286: new           #22
289: dup
290: invokespecial #23
293: ldc           #24
295: invokevirtual #25
298: lload         4
300: invokevirtual #26
303: ldc           #27
305: invokevirtual #25
308: lconst_0
309: invokevirtual #26
312: ldc           #24
314: invokevirtual #25
317: invokevirtual #28
320: lload         4
322: lconst_0
323: lcmp
324: ifne          331
327: iconst_1
328: goto          332
331: iconst_0
332: invokestatic  #29
335: aload         6
337: invokestatic  #53
340: new           #22
343: dup
344: invokespecial #23
347: ldc           #24
349: invokevirtual #25
352: iload         7
354: invokevirtual #41
357: ldc           #27
359: invokevirtual #25
362: iconst_0
363: invokevirtual #41
366: ldc           #24
368: invokevirtual #25
371: invokevirtual #28
374: iload         7
376: ifne          383
379: iconst_1
380: goto          384
383: iconst_0
384: invokestatic  #29
387: new           #22
390: dup
391: invokespecial #23
394: ldc           #24
396: invokevirtual #25
399: iload         8
401: invokevirtual #41
404: ldc           #27
406: invokevirtual #25
409: iconst_0
410: invokevirtual #41
413: ldc           #24
415: invokevirtual #25
418: invokevirtual #28
421: iload         8
423: ifne          430
426: iconst_1
427: goto          431
430: iconst_0
431: invokestatic  #29
434: aload         10
436: invokestatic  #53
439: aload         10
441: invokestatic  #66
444: ldc           #77
446: invokestatic  #68
449: aload         12
451: invokestatic  #53
454: aload         12
456: invokestatic  #66
459: ldc           #77
461: invokestatic  #68
464: new           #22
467: dup
468: invokespecial #23
471: ldc           #24
473: invokevirtual #25
476: iload         13
478: invokevirtual #69
481: ldc           #27
483: invokevirtual #25
486: iconst_1
487: invokevirtual #69
490: ldc           #24
492: invokevirtual #25
495: invokevirtual #28
498: iload         13
500: iconst_1
501: if_icmpne     508
504: iconst_1
505: goto          509
508: iconst_0
509: invokestatic  #29
512: new           #22
515: dup
516: invokespecial #23
519: ldc           #24
521: invokevirtual #25
524: iload         14
526: invokevirtual #69
529: ldc           #27
531: invokevirtual #25
534: iconst_1
535: invokevirtual #69
538: ldc           #24
540: invokevirtual #25
543: invokevirtual #28
546: iload         14
548: iconst_1
549: if_icmpne     556
552: iconst_1
553: goto          557
556: iconst_0
557: invokestatic  #29
560: new           #22
563: dup
564: invokespecial #23
567: ldc           #24
569: invokevirtual #25
572: lload         17
574: invokevirtual #26
577: ldc           #27
579: invokevirtual #25
582: lconst_0
583: invokevirtual #26
586: ldc           #24
588: invokevirtual #25
591: invokevirtual #28
594: lload         17
596: lconst_0
597: lcmp
598: ifne          605
601: iconst_1
602: goto          606
605: iconst_0
606: invokestatic  #29
609: new           #22
612: dup
613: invokespecial #23
616: ldc           #24
618: invokevirtual #25
621: lload         19
623: invokevirtual #26
626: ldc           #27
628: invokevirtual #25
631: lconst_0
632: invokevirtual #26
635: ldc           #24
637: invokevirtual #25
640: invokevirtual #28
643: lload         19
645: lconst_0
646: lcmp
647: ifne          654
650: iconst_1
651: goto          655
654: iconst_0
655: invokestatic  #29
658: aload         23
660: invokestatic  #53
663: aload         23
665: invokestatic  #66
668: ldc           #77
670: invokestatic  #68
673: aload         25
675: invokestatic  #53
678: aload         25
680: invokestatic  #66
683: ldc           #77
685: invokestatic  #68
688: new           #22
691: dup
692: invokespecial #23
695: ldc           #24
697: invokevirtual #25
700: iload         26
702: invokevirtual #69
705: ldc           #27
707: invokevirtual #25
710: iconst_1
711: invokevirtual #69
714: ldc           #24
716: invokevirtual #25
719: invokevirtual #28
722: iload         26
724: iconst_1
725: if_icmpne     732
728: iconst_1
729: goto          733
732: iconst_0
733: invokestatic  #29
736: new           #22
739: dup
740: invokespecial #23
743: ldc           #24
745: invokevirtual #25
748: iload         27
750: invokevirtual #69
753: ldc           #27
755: invokevirtual #25
758: iconst_1
759: invokevirtual #69
762: ldc           #24
764: invokevirtual #25
767: invokevirtual #28
770: iload         27
772: iconst_1
773: if_icmpne     780
776: iconst_1
777: goto          781
780: iconst_0
781: invokestatic  #29
784: new           #22
787: dup
788: invokespecial #23
791: ldc           #24
793: invokevirtual #25
796: iload         28
798: invokevirtual #41
801: ldc           #27
803: invokevirtual #25
806: iconst_m1
807: invokevirtual #41
810: ldc           #24
812: invokevirtual #25
815: invokevirtual #28
818: iload         28
820: iconst_m1
821: if_icmpne     828
824: iconst_1
825: goto          829
828: iconst_0
829: invokestatic  #29
832: aload         30
834: invokestatic  #53
837: aload         30
839: invokevirtual #600
842: ldc           #105
844: invokestatic  #68
847: aload         30
849: invokestatic  #601
852: ldc           #105
854: invokestatic  #68
857: aload         30
859: invokestatic  #602
862: ldc           #105
864: invokestatic  #68
867: aload         31
869: invokestatic  #53
872: aload         31
874: invokestatic  #66
877: ldc           #77
879: invokestatic  #68
882: return
Exception table:
from    to  target type
264   281   284   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test173
Start line: 6301
End line: 0
Method source code: 
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        tarArchiveOutputStream10.setBigNumberMode(3);
        try {
            tarArchiveOutputStream10.finish();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '10240' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #603
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: aload         8
84: iconst_3
85: invokevirtual #281
88: aload         8
90: invokevirtual #250
93: ldc           #96
95: invokestatic  #20
98: goto          103
101: astore        9
103: new           #22
106: dup
107: invokespecial #23
110: ldc           #24
112: invokevirtual #25
115: lload         4
117: invokevirtual #26
120: ldc           #27
122: invokevirtual #25
125: lconst_0
126: invokevirtual #26
129: ldc           #24
131: invokevirtual #25
134: invokevirtual #28
137: lload         4
139: lconst_0
140: lcmp
141: ifne          148
144: iconst_1
145: goto          149
148: iconst_0
149: invokestatic  #29
152: aload         6
154: invokestatic  #53
157: new           #22
160: dup
161: invokespecial #23
164: ldc           #24
166: invokevirtual #25
169: iload         7
171: invokevirtual #41
174: ldc           #27
176: invokevirtual #25
179: iconst_0
180: invokevirtual #41
183: ldc           #24
185: invokevirtual #25
188: invokevirtual #28
191: iload         7
193: ifne          200
196: iconst_1
197: goto          201
200: iconst_0
201: invokestatic  #29
204: return
Exception table:
from    to  target type
88    98   101   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test174
Start line: 6326
End line: 0
Method source code: 
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream10);
        java.io.File file12 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry14 = cpioArchiveOutputStream11.createArchiveEntry(file12, "00");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #604
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: new           #222
80: dup
81: aload         7
83: invokespecial #223
86: astore        8
88: new           #143
91: dup
92: aload         8
94: invokespecial #144
97: astore        9
99: aconst_null
100: astore        10
102: aload         9
104: aload         10
106: ldc           #16
108: invokevirtual #146
111: astore        11
113: ldc           #51
115: invokestatic  #20
118: goto          123
121: astore        11
123: new           #22
126: dup
127: invokespecial #23
130: ldc           #24
132: invokevirtual #25
135: lload         4
137: invokevirtual #26
140: ldc           #27
142: invokevirtual #25
145: lconst_0
146: invokevirtual #26
149: ldc           #24
151: invokevirtual #25
154: invokevirtual #28
157: lload         4
159: lconst_0
160: lcmp
161: ifne          168
164: iconst_1
165: goto          169
168: iconst_0
169: invokestatic  #29
172: aload         6
174: invokestatic  #53
177: return
Exception table:
from    to  target type
102   118   121   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test175
Start line: 6351
End line: 0
Method source code: 
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(83);
        java.lang.Class<?> wildcardClass13 = arArchiveOutputStream10.getClass();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #605
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: bipush        83
86: invokevirtual #399
89: aload         9
91: invokevirtual #606
94: astore        10
96: new           #22
99: dup
100: invokespecial #23
103: ldc           #24
105: invokevirtual #25
108: lload         4
110: invokevirtual #26
113: ldc           #27
115: invokevirtual #25
118: lconst_0
119: invokevirtual #26
122: ldc           #24
124: invokevirtual #25
127: invokevirtual #28
130: lload         4
132: lconst_0
133: lcmp
134: ifne          141
137: iconst_1
138: goto          142
141: iconst_0
142: invokestatic  #29
145: aload         6
147: invokestatic  #53
150: new           #22
153: dup
154: invokespecial #23
157: ldc           #24
159: invokevirtual #25
162: lload         7
164: invokevirtual #26
167: ldc           #27
169: invokevirtual #25
172: lconst_0
173: invokevirtual #26
176: ldc           #24
178: invokevirtual #25
181: invokevirtual #28
184: lload         7
186: lconst_0
187: lcmp
188: ifne          195
191: iconst_1
192: goto          196
195: iconst_0
196: invokestatic  #29
199: aload         10
201: invokestatic  #53
204: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test176
Start line: 6371
End line: 0
Method source code: 
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        archiveInputStream18.reset();
        try {
            org.apache.commons.compress.archivers.dump.DumpArchiveInputStream dumpArchiveInputStream20 = new org.apache.commons.compress.archivers.dump.DumpArchiveInputStream((java.io.InputStream) archiveInputStream18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: unexpected EOF");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #607
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aload         15
138: invokevirtual #608
141: new           #609
144: dup
145: aload         15
147: invokespecial #610
150: astore        16
152: ldc_w         #611
155: invokestatic  #20
158: goto          163
161: astore        16
163: new           #22
166: dup
167: invokespecial #23
170: ldc           #24
172: invokevirtual #25
175: lload         4
177: invokevirtual #26
180: ldc           #27
182: invokevirtual #25
185: lconst_0
186: invokevirtual #26
189: ldc           #24
191: invokevirtual #25
194: invokevirtual #28
197: lload         4
199: lconst_0
200: lcmp
201: ifne          208
204: iconst_1
205: goto          209
208: iconst_0
209: invokestatic  #29
212: aload         6
214: invokestatic  #53
217: new           #22
220: dup
221: invokespecial #23
224: ldc           #24
226: invokevirtual #25
229: lload         9
231: invokevirtual #26
234: ldc           #27
236: invokevirtual #25
239: lconst_0
240: invokevirtual #26
243: ldc           #24
245: invokevirtual #25
248: invokevirtual #28
251: lload         9
253: lconst_0
254: lcmp
255: ifne          262
258: iconst_1
259: goto          263
262: iconst_0
263: invokestatic  #29
266: new           #22
269: dup
270: invokespecial #23
273: ldc           #24
275: invokevirtual #25
278: lload         11
280: invokevirtual #26
283: ldc           #27
285: invokevirtual #25
288: lconst_0
289: invokevirtual #26
292: ldc           #24
294: invokevirtual #25
297: invokevirtual #28
300: lload         11
302: lconst_0
303: lcmp
304: ifne          311
307: iconst_1
308: goto          312
311: iconst_0
312: invokestatic  #29
315: aload         15
317: invokestatic  #53
320: return
Exception table:
from    to  target type
141   158   161   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test177
Start line: 6405
End line: 0
Method source code: 
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        java.lang.String str20 = zipArchiveOutputStream13.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21);
        java.io.InputStream inputStream23 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream23);
        long long25 = jarArchiveInputStream24.getBytesRead();
        long long26 = jarArchiveInputStream24.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream27 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream24);
        arArchiveInputStream27.close();
        arArchiveInputStream27.pushedBackBytes((-1L));
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream33 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream27, 1024, 504);
        int int34 = tarArchiveInputStream33.getCount();
        tarArchiveInputStream33.close();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream36 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #612
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: aload         9
125: invokevirtual #310
128: astore        13
130: new           #143
133: dup
134: aload         9
136: invokespecial #144
139: astore        14
141: aload_1
142: ldc           #164
144: aload         14
146: invokevirtual #49
149: astore        15
151: aconst_null
152: astore        16
154: new           #10
157: dup
158: aload         16
160: invokespecial #11
163: astore        17
165: aload         17
167: invokevirtual #12
170: lstore        18
172: aload         17
174: invokevirtual #12
177: lstore        20
179: new           #13
182: dup
183: aload         17
185: invokespecial #14
188: astore        22
190: aload         22
192: invokevirtual #140
195: aload         22
197: ldc2_w        #297
200: invokevirtual #299
203: new           #31
206: dup
207: aload         22
209: sipush        1024
212: sipush        504
215: invokespecial #108
218: astore        23
220: aload         23
222: invokevirtual #515
225: istore        24
227: aload         23
229: invokevirtual #363
232: aload_1
233: aload         23
235: invokevirtual #18
238: astore        25
240: ldc           #19
242: invokestatic  #20
245: goto          250
248: astore        25
250: new           #22
253: dup
254: invokespecial #23
257: ldc           #24
259: invokevirtual #25
262: lload         4
264: invokevirtual #26
267: ldc           #27
269: invokevirtual #25
272: lconst_0
273: invokevirtual #26
276: ldc           #24
278: invokevirtual #25
281: invokevirtual #28
284: lload         4
286: lconst_0
287: lcmp
288: ifne          295
291: iconst_1
292: goto          296
295: iconst_0
296: invokestatic  #29
299: aload         6
301: invokestatic  #53
304: new           #22
307: dup
308: invokespecial #23
311: ldc           #24
313: invokevirtual #25
316: iload         11
318: invokevirtual #69
321: ldc           #27
323: invokevirtual #25
326: iconst_0
327: invokevirtual #69
330: ldc           #24
332: invokevirtual #25
335: invokevirtual #28
338: iload         11
340: ifne          347
343: iconst_1
344: goto          348
347: iconst_0
348: invokestatic  #29
351: new           #22
354: dup
355: invokespecial #23
358: ldc           #24
360: invokevirtual #25
363: iload         12
365: invokevirtual #69
368: ldc           #27
370: invokevirtual #25
373: iconst_0
374: invokevirtual #69
377: ldc           #24
379: invokevirtual #25
382: invokevirtual #28
385: iload         12
387: ifne          394
390: iconst_1
391: goto          395
394: iconst_0
395: invokestatic  #29
398: new           #22
401: dup
402: invokespecial #23
405: ldc           #24
407: invokevirtual #25
410: aload         13
412: invokevirtual #25
415: ldc_w         #317
418: invokevirtual #25
421: invokevirtual #28
424: aload         13
426: ldc           #85
428: invokestatic  #154
431: aload         15
433: invokestatic  #53
436: new           #22
439: dup
440: invokespecial #23
443: ldc           #24
445: invokevirtual #25
448: lload         18
450: invokevirtual #26
453: ldc           #27
455: invokevirtual #25
458: lconst_0
459: invokevirtual #26
462: ldc           #24
464: invokevirtual #25
467: invokevirtual #28
470: lload         18
472: lconst_0
473: lcmp
474: ifne          481
477: iconst_1
478: goto          482
481: iconst_0
482: invokestatic  #29
485: new           #22
488: dup
489: invokespecial #23
492: ldc           #24
494: invokevirtual #25
497: lload         20
499: invokevirtual #26
502: ldc           #27
504: invokevirtual #25
507: lconst_0
508: invokevirtual #26
511: ldc           #24
513: invokevirtual #25
516: invokevirtual #28
519: lload         20
521: lconst_0
522: lcmp
523: ifne          530
526: iconst_1
527: goto          531
530: iconst_0
531: invokestatic  #29
534: new           #22
537: dup
538: invokespecial #23
541: ldc           #24
543: invokevirtual #25
546: iload         24
548: invokevirtual #41
551: ldc           #27
553: invokevirtual #25
556: iconst_0
557: invokevirtual #41
560: ldc           #24
562: invokevirtual #25
565: invokevirtual #28
568: iload         24
570: ifne          577
573: iconst_1
574: goto          578
577: iconst_0
578: invokestatic  #29
581: return
Exception table:
from    to  target type
232   245   248   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test178
Start line: 6454
End line: 0
Method source code: 
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        arArchiveOutputStream10.setLongFileMode((int) ' ');
        try {
            arArchiveOutputStream10.finish();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: This archive has already been finished");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #613
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: bipush        32
99: invokevirtual #399
102: aload         9
104: invokevirtual #286
107: ldc_w         #467
110: invokestatic  #20
113: goto          118
116: astore        10
118: new           #22
121: dup
122: invokespecial #23
125: ldc           #24
127: invokevirtual #25
130: lload         4
132: invokevirtual #26
135: ldc           #27
137: invokevirtual #25
140: lconst_0
141: invokevirtual #26
144: ldc           #24
146: invokevirtual #25
149: invokevirtual #28
152: lload         4
154: lconst_0
155: lcmp
156: ifne          163
159: iconst_1
160: goto          164
163: iconst_0
164: invokestatic  #29
167: aload         6
169: invokestatic  #53
172: new           #22
175: dup
176: invokespecial #23
179: ldc           #24
181: invokevirtual #25
184: lload         7
186: invokevirtual #26
189: ldc           #27
191: invokevirtual #25
194: lconst_0
195: invokevirtual #26
198: ldc           #24
200: invokevirtual #25
203: invokevirtual #28
206: lload         7
208: lconst_0
209: lcmp
210: ifne          217
213: iconst_1
214: goto          218
217: iconst_0
218: invokestatic  #29
221: return
Exception table:
from    to  target type
102   113   116   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test179
Start line: 6481
End line: 0
Method source code: 
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(false);
        try {
            tarArchiveOutputStream4.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #614
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: new           #73
81: dup
82: lconst_0
83: invokespecial #74
86: astore        9
88: aload         9
90: invokevirtual #75
93: astore        10
95: new           #73
98: dup
99: lconst_0
100: invokespecial #74
103: astore        11
105: aload         11
107: invokevirtual #75
110: astore        12
112: aload         10
114: aload         12
116: iconst_1
117: invokestatic  #177
120: istore        13
122: aload         10
124: invokestatic  #192
127: istore        14
129: aload_3
130: aload         10
132: iconst_4
133: iconst_m1
134: invokevirtual #63
137: aload_3
138: iconst_1
139: invokevirtual #148
142: aload_3
143: iconst_0
144: invokevirtual #148
147: aload_3
148: invokevirtual #71
151: ldc           #51
153: invokestatic  #20
156: goto          161
159: astore        15
161: new           #22
164: dup
165: invokespecial #23
168: ldc           #24
170: invokevirtual #25
173: lload         4
175: invokevirtual #26
178: ldc           #27
180: invokevirtual #25
183: lconst_0
184: invokevirtual #26
187: ldc           #24
189: invokevirtual #25
192: invokevirtual #28
195: lload         4
197: lconst_0
198: lcmp
199: ifne          206
202: iconst_1
203: goto          207
206: iconst_0
207: invokestatic  #29
210: aload         6
212: invokestatic  #53
215: new           #22
218: dup
219: invokespecial #23
222: ldc           #24
224: invokevirtual #25
227: iload         7
229: invokevirtual #41
232: ldc           #27
234: invokevirtual #25
237: iconst_0
238: invokevirtual #41
241: ldc           #24
243: invokevirtual #25
246: invokevirtual #28
249: iload         7
251: ifne          258
254: iconst_1
255: goto          259
258: iconst_0
259: invokestatic  #29
262: new           #22
265: dup
266: invokespecial #23
269: ldc           #24
271: invokevirtual #25
274: iload         8
276: invokevirtual #41
279: ldc           #27
281: invokevirtual #25
284: iconst_0
285: invokevirtual #41
288: ldc           #24
290: invokevirtual #25
293: invokevirtual #28
296: iload         8
298: ifne          305
301: iconst_1
302: goto          306
305: iconst_0
306: invokestatic  #29
309: aload         10
311: invokestatic  #53
314: aload         10
316: invokestatic  #66
319: ldc           #77
321: invokestatic  #68
324: aload         12
326: invokestatic  #53
329: aload         12
331: invokestatic  #66
334: ldc           #77
336: invokestatic  #68
339: new           #22
342: dup
343: invokespecial #23
346: ldc           #24
348: invokevirtual #25
351: iload         13
353: invokevirtual #69
356: ldc           #27
358: invokevirtual #25
361: iconst_1
362: invokevirtual #69
365: ldc           #24
367: invokevirtual #25
370: invokevirtual #28
373: iload         13
375: iconst_1
376: if_icmpne     383
379: iconst_1
380: goto          384
383: iconst_0
384: invokestatic  #29
387: new           #22
390: dup
391: invokespecial #23
394: ldc           #24
396: invokevirtual #25
399: iload         14
401: invokevirtual #69
404: ldc           #27
406: invokevirtual #25
409: iconst_1
410: invokevirtual #69
413: ldc           #24
415: invokevirtual #25
418: invokevirtual #28
421: iload         14
423: iconst_1
424: if_icmpne     431
427: iconst_1
428: goto          432
431: iconst_0
432: invokestatic  #29
435: return
Exception table:
from    to  target type
147   156   159   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test180
Start line: 6521
End line: 0
Method source code: 
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        java.lang.String str20 = zipArchiveOutputStream13.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21);
        java.io.OutputStream outputStream24 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream26 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream24, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream27 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream24);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy28 = null;
        zipArchiveOutputStream27.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy28);
        zipArchiveOutputStream27.setUseLanguageEncodingFlag(true);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream33 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream27, "cpio");
        long long34 = tarArchiveOutputStream33.getBytesWritten();
        byte[] byteArray39 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean40 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray39);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong41 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray39);
        boolean boolean43 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray39, (int) (byte) 50);
        tarArchiveOutputStream33.write(byteArray39, 24576, 0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream47 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream33);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream48 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream47);
        zipArchiveOutputStream48.count((int) (short) 12);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream51 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!!", (java.io.OutputStream) zipArchiveOutputStream48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!! not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream22);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #615
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: aload         9
125: invokevirtual #310
128: astore        13
130: new           #143
133: dup
134: aload         9
136: invokespecial #144
139: astore        14
141: aload_1
142: ldc           #164
144: aload         14
146: invokevirtual #49
149: astore        15
151: aconst_null
152: astore        16
154: new           #43
157: dup
158: aload         16
160: ldc           #44
162: invokespecial #45
165: astore        17
167: new           #182
170: dup
171: aload         16
173: invokespecial #183
176: astore        18
178: aconst_null
179: astore        19
181: aload         18
183: aload         19
185: invokevirtual #184
188: aload         18
190: iconst_1
191: invokevirtual #285
194: new           #43
197: dup
198: aload         18
200: ldc_w         #273
203: invokespecial #45
206: astore        20
208: aload         20
210: invokevirtual #47
213: lstore        21
215: iconst_4
216: newarray       byte
218: dup
219: iconst_0
220: bipush        54
222: bastore
223: dup
224: iconst_1
225: bipush        53
227: bastore
228: dup
229: iconst_2
230: iconst_1
231: bastore
232: dup
233: iconst_3
234: bipush        10
236: bastore
237: astore        23
239: aload         23
241: invokestatic  #192
244: istore        24
246: new           #73
249: dup
250: aload         23
252: invokespecial #406
255: astore        25
257: aload         23
259: bipush        50
261: invokestatic  #523
264: istore        26
266: aload         20
268: aload         23
270: sipush        24576
273: iconst_0
274: invokevirtual #63
277: new           #182
280: dup
281: aload         20
283: invokespecial #183
286: astore        27
288: new           #182
291: dup
292: aload         27
294: invokespecial #183
297: astore        28
299: aload         28
301: bipush        12
303: invokevirtual #311
306: aload_1
307: ldc_w         #485
310: aload         28
312: invokevirtual #49
315: astore        29
317: ldc_w         #554
320: invokestatic  #20
323: goto          328
326: astore        29
328: new           #22
331: dup
332: invokespecial #23
335: ldc           #24
337: invokevirtual #25
340: lload         4
342: invokevirtual #26
345: ldc           #27
347: invokevirtual #25
350: lconst_0
351: invokevirtual #26
354: ldc           #24
356: invokevirtual #25
359: invokevirtual #28
362: lload         4
364: lconst_0
365: lcmp
366: ifne          373
369: iconst_1
370: goto          374
373: iconst_0
374: invokestatic  #29
377: aload         6
379: invokestatic  #53
382: new           #22
385: dup
386: invokespecial #23
389: ldc           #24
391: invokevirtual #25
394: iload         11
396: invokevirtual #69
399: ldc           #27
401: invokevirtual #25
404: iconst_0
405: invokevirtual #69
408: ldc           #24
410: invokevirtual #25
413: invokevirtual #28
416: iload         11
418: ifne          425
421: iconst_1
422: goto          426
425: iconst_0
426: invokestatic  #29
429: new           #22
432: dup
433: invokespecial #23
436: ldc           #24
438: invokevirtual #25
441: iload         12
443: invokevirtual #69
446: ldc           #27
448: invokevirtual #25
451: iconst_0
452: invokevirtual #69
455: ldc           #24
457: invokevirtual #25
460: invokevirtual #28
463: iload         12
465: ifne          472
468: iconst_1
469: goto          473
472: iconst_0
473: invokestatic  #29
476: new           #22
479: dup
480: invokespecial #23
483: ldc           #24
485: invokevirtual #25
488: aload         13
490: invokevirtual #25
493: ldc_w         #317
496: invokevirtual #25
499: invokevirtual #28
502: aload         13
504: ldc           #85
506: invokestatic  #154
509: aload         15
511: invokestatic  #53
514: new           #22
517: dup
518: invokespecial #23
521: ldc           #24
523: invokevirtual #25
526: lload         21
528: invokevirtual #26
531: ldc           #27
533: invokevirtual #25
536: lconst_0
537: invokevirtual #26
540: ldc           #24
542: invokevirtual #25
545: invokevirtual #28
548: lload         21
550: lconst_0
551: lcmp
552: ifne          559
555: iconst_1
556: goto          560
559: iconst_0
560: invokestatic  #29
563: aload         23
565: invokestatic  #53
568: aload         23
570: invokestatic  #66
573: ldc_w         #409
576: invokestatic  #68
579: new           #22
582: dup
583: invokespecial #23
586: ldc           #24
588: invokevirtual #25
591: iload         24
593: invokevirtual #69
596: ldc           #27
598: invokevirtual #25
601: iconst_0
602: invokevirtual #69
605: ldc           #24
607: invokevirtual #25
610: invokevirtual #28
613: iload         24
615: ifne          622
618: iconst_1
619: goto          623
622: iconst_0
623: invokestatic  #29
626: new           #22
629: dup
630: invokespecial #23
633: ldc           #24
635: invokevirtual #25
638: iload         26
640: invokevirtual #69
643: ldc           #27
645: invokevirtual #25
648: iconst_0
649: invokevirtual #69
652: ldc           #24
654: invokevirtual #25
657: invokevirtual #28
660: iload         26
662: ifne          669
665: iconst_1
666: goto          670
669: iconst_0
670: invokestatic  #29
673: return
Exception table:
from    to  target type
306   323   326   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test181
Start line: 6578
End line: 0
Method source code: 
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(83);
        arArchiveOutputStream10.setLongFileMode(6);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry16 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int17 = tarArchiveEntry16.getDevMinor();
        tarArchiveEntry16.setUserId(0);
        java.io.File file20 = tarArchiveEntry16.getFile();
        tarArchiveEntry16.setLinkName("org.apache.commons.compress.archivers.ArchiveException:  \000");
        boolean boolean23 = tarArchiveEntry16.isDirectory();
        tarArchiveEntry16.setUserName("");
        int int26 = tarArchiveEntry16.getDevMinor();
        try {
            arArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.ar.ArArchiveEntry");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(file20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #616
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: bipush        83
86: invokevirtual #399
89: aload         9
91: bipush        6
93: invokevirtual #399
96: new           #112
99: dup
100: ldc           #44
102: invokespecial #120
105: astore        10
107: aload         10
109: invokevirtual #129
112: istore        11
114: aload         10
116: iconst_0
117: invokevirtual #272
120: aload         10
122: invokevirtual #395
125: astore        12
127: aload         10
129: ldc           #186
131: invokevirtual #433
134: aload         10
136: invokevirtual #378
139: istore        13
141: aload         10
143: ldc           #61
145: invokevirtual #274
148: aload         10
150: invokevirtual #129
153: istore        14
155: aload         9
157: aload         10
159: invokevirtual #288
162: ldc_w         #452
165: invokestatic  #20
168: goto          173
171: astore        15
173: new           #22
176: dup
177: invokespecial #23
180: ldc           #24
182: invokevirtual #25
185: lload         4
187: invokevirtual #26
190: ldc           #27
192: invokevirtual #25
195: lconst_0
196: invokevirtual #26
199: ldc           #24
201: invokevirtual #25
204: invokevirtual #28
207: lload         4
209: lconst_0
210: lcmp
211: ifne          218
214: iconst_1
215: goto          219
218: iconst_0
219: invokestatic  #29
222: aload         6
224: invokestatic  #53
227: new           #22
230: dup
231: invokespecial #23
234: ldc           #24
236: invokevirtual #25
239: lload         7
241: invokevirtual #26
244: ldc           #27
246: invokevirtual #25
249: lconst_0
250: invokevirtual #26
253: ldc           #24
255: invokevirtual #25
258: invokevirtual #28
261: lload         7
263: lconst_0
264: lcmp
265: ifne          272
268: iconst_1
269: goto          273
272: iconst_0
273: invokestatic  #29
276: new           #22
279: dup
280: invokespecial #23
283: ldc           #24
285: invokevirtual #25
288: iload         11
290: invokevirtual #41
293: ldc           #27
295: invokevirtual #25
298: iconst_0
299: invokevirtual #41
302: ldc           #24
304: invokevirtual #25
307: invokevirtual #28
310: iload         11
312: ifne          319
315: iconst_1
316: goto          320
319: iconst_0
320: invokestatic  #29
323: aload         12
325: invokestatic  #168
328: new           #22
331: dup
332: invokespecial #23
335: ldc           #24
337: invokevirtual #25
340: iload         13
342: invokevirtual #69
345: ldc           #27
347: invokevirtual #25
350: iconst_0
351: invokevirtual #69
354: ldc           #24
356: invokevirtual #25
359: invokevirtual #28
362: iload         13
364: ifne          371
367: iconst_1
368: goto          372
371: iconst_0
372: invokestatic  #29
375: new           #22
378: dup
379: invokespecial #23
382: ldc           #24
384: invokevirtual #25
387: iload         14
389: invokevirtual #41
392: ldc           #27
394: invokevirtual #25
397: iconst_0
398: invokevirtual #41
401: ldc           #24
403: invokevirtual #25
406: invokevirtual #28
409: iload         14
411: ifne          418
414: iconst_1
415: goto          419
418: iconst_0
419: invokestatic  #29
422: return
Exception table:
from    to  target type
155   168   171   Class java/lang/ClassCastException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test182
Start line: 6616
End line: 0
Method source code: 
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        try {
            tarArchiveOutputStream4.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #617
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload_3
83: invokevirtual #71
86: ldc           #51
88: invokestatic  #20
91: goto          96
94: astore        10
96: new           #22
99: dup
100: invokespecial #23
103: ldc           #24
105: invokevirtual #25
108: lload         4
110: invokevirtual #26
113: ldc           #27
115: invokevirtual #25
118: lconst_0
119: invokevirtual #26
122: ldc           #24
124: invokevirtual #25
127: invokevirtual #28
130: lload         4
132: lconst_0
133: lcmp
134: ifne          141
137: iconst_1
138: goto          142
141: iconst_0
142: invokestatic  #29
145: aload         6
147: invokestatic  #53
150: new           #22
153: dup
154: invokespecial #23
157: ldc           #24
159: invokevirtual #25
162: lload         7
164: invokevirtual #26
167: ldc           #27
169: invokevirtual #25
172: lconst_0
173: invokevirtual #26
176: ldc           #24
178: invokevirtual #25
181: invokevirtual #28
184: lload         7
186: lconst_0
187: lcmp
188: ifne          195
191: iconst_1
192: goto          196
195: iconst_0
196: invokestatic  #29
199: return
Exception table:
from    to  target type
82    91    94   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test183
Start line: 6640
End line: 0
Method source code: 
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry27 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        boolean boolean28 = tarArchiveEntry27.isGNUSparse();
        java.lang.String str29 = tarArchiveEntry27.getLinkName();
        tarArchiveEntry27.setNames("0\000", "jar");
        java.io.File file33 = tarArchiveEntry27.getFile();
        long long34 = tarArchiveEntry27.getSize();
        try {
            tarArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry27);
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar");
        } catch (java.io.UnsupportedEncodingException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNull(file33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #618
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: new           #73
81: dup
82: lconst_0
83: invokespecial #74
86: astore        9
88: aload         9
90: invokevirtual #75
93: astore        10
95: new           #73
98: dup
99: lconst_0
100: invokespecial #74
103: astore        11
105: aload         11
107: invokevirtual #75
110: astore        12
112: aload         10
114: aload         12
116: iconst_1
117: invokestatic  #177
120: istore        13
122: aload         10
124: invokestatic  #192
127: istore        14
129: aload_3
130: aload         10
132: iconst_4
133: iconst_m1
134: invokevirtual #63
137: aload_3
138: iconst_1
139: invokevirtual #148
142: new           #112
145: dup
146: ldc           #61
148: iconst_0
149: invokespecial #113
152: astore        15
154: aload         15
156: invokevirtual #422
159: istore        16
161: aload         15
163: invokevirtual #423
166: astore        17
168: aload         15
170: ldc_w         #424
173: ldc           #44
175: invokevirtual #125
178: aload         15
180: invokevirtual #395
183: astore        18
185: aload         15
187: invokevirtual #156
190: lstore        19
192: aload_3
193: aload         15
195: invokevirtual #136
198: ldc           #137
200: invokestatic  #20
203: goto          208
206: astore        21
208: new           #22
211: dup
212: invokespecial #23
215: ldc           #24
217: invokevirtual #25
220: lload         4
222: invokevirtual #26
225: ldc           #27
227: invokevirtual #25
230: lconst_0
231: invokevirtual #26
234: ldc           #24
236: invokevirtual #25
239: invokevirtual #28
242: lload         4
244: lconst_0
245: lcmp
246: ifne          253
249: iconst_1
250: goto          254
253: iconst_0
254: invokestatic  #29
257: aload         6
259: invokestatic  #53
262: new           #22
265: dup
266: invokespecial #23
269: ldc           #24
271: invokevirtual #25
274: iload         7
276: invokevirtual #41
279: ldc           #27
281: invokevirtual #25
284: iconst_0
285: invokevirtual #41
288: ldc           #24
290: invokevirtual #25
293: invokevirtual #28
296: iload         7
298: ifne          305
301: iconst_1
302: goto          306
305: iconst_0
306: invokestatic  #29
309: new           #22
312: dup
313: invokespecial #23
316: ldc           #24
318: invokevirtual #25
321: iload         8
323: invokevirtual #41
326: ldc           #27
328: invokevirtual #25
331: iconst_0
332: invokevirtual #41
335: ldc           #24
337: invokevirtual #25
340: invokevirtual #28
343: iload         8
345: ifne          352
348: iconst_1
349: goto          353
352: iconst_0
353: invokestatic  #29
356: aload         10
358: invokestatic  #53
361: aload         10
363: invokestatic  #66
366: ldc           #77
368: invokestatic  #68
371: aload         12
373: invokestatic  #53
376: aload         12
378: invokestatic  #66
381: ldc           #77
383: invokestatic  #68
386: new           #22
389: dup
390: invokespecial #23
393: ldc           #24
395: invokevirtual #25
398: iload         13
400: invokevirtual #69
403: ldc           #27
405: invokevirtual #25
408: iconst_1
409: invokevirtual #69
412: ldc           #24
414: invokevirtual #25
417: invokevirtual #28
420: iload         13
422: iconst_1
423: if_icmpne     430
426: iconst_1
427: goto          431
430: iconst_0
431: invokestatic  #29
434: new           #22
437: dup
438: invokespecial #23
441: ldc           #24
443: invokevirtual #25
446: iload         14
448: invokevirtual #69
451: ldc           #27
453: invokevirtual #25
456: iconst_1
457: invokevirtual #69
460: ldc           #24
462: invokevirtual #25
465: invokevirtual #28
468: iload         14
470: iconst_1
471: if_icmpne     478
474: iconst_1
475: goto          479
478: iconst_0
479: invokestatic  #29
482: new           #22
485: dup
486: invokespecial #23
489: ldc           #24
491: invokevirtual #25
494: iload         16
496: invokevirtual #69
499: ldc           #27
501: invokevirtual #25
504: iconst_0
505: invokevirtual #69
508: ldc           #24
510: invokevirtual #25
513: invokevirtual #28
516: iload         16
518: ifne          525
521: iconst_1
522: goto          526
525: iconst_0
526: invokestatic  #29
529: new           #22
532: dup
533: invokespecial #23
536: ldc           #24
538: invokevirtual #25
541: aload         17
543: invokevirtual #25
546: ldc           #219
548: invokevirtual #25
551: invokevirtual #28
554: aload         17
556: ldc           #61
558: invokestatic  #154
561: aload         18
563: invokestatic  #168
566: new           #22
569: dup
570: invokespecial #23
573: ldc           #24
575: invokevirtual #25
578: lload         19
580: invokevirtual #26
583: ldc           #27
585: invokevirtual #25
588: lconst_0
589: invokevirtual #26
592: ldc           #24
594: invokevirtual #25
597: invokevirtual #28
600: lload         19
602: lconst_0
603: lcmp
604: ifne          611
607: iconst_1
608: goto          612
611: iconst_0
612: invokestatic  #29
615: return
Exception table:
from    to  target type
192   203   206   Class java/io/UnsupportedEncodingException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test184
Start line: 6689
End line: 0
Method source code: 
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.OutputStream outputStream27 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream27);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy31 = null;
        zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy31);
        int int33 = zipArchiveOutputStream30.getCount();
        java.lang.String str34 = zipArchiveOutputStream30.getEncoding();
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode35 = null;
        zipArchiveOutputStream30.setUseZip64(zip64Mode35);
        java.io.InputStream inputStream37 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream38 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream37);
        long long39 = jarArchiveInputStream38.getBytesRead();
        long long40 = jarArchiveInputStream38.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream41 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream38);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream45 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream41, "00", true, false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry47 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int48 = tarArchiveEntry47.getDevMinor();
        tarArchiveEntry47.setIds((int) (short) 3, 0);
        int int52 = tarArchiveEntry47.getDevMajor();
        boolean boolean53 = tarArchiveEntry47.isFile();
        java.io.InputStream inputStream54 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream55 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream54);
        long long56 = jarArchiveInputStream55.getBytesRead();
        long long57 = jarArchiveInputStream55.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream58 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream55);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream59 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream55);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream60 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream59);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream64 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream60, "070702", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry67 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry67.setDevMinor((int) ' ');
        boolean boolean70 = cpioArchiveInputStream60.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry67);
        boolean boolean71 = tarArchiveEntry47.equals((java.lang.Object) tarArchiveEntry67);
        boolean boolean72 = tarArchiveEntry67.isExtended();
        tarArchiveEntry67.setIds(32, 29127);
        boolean boolean76 = tarArchiveEntry67.isExtended();
        boolean boolean77 = zipArchiveInputStream45.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry67);
        boolean boolean78 = tarArchiveEntry67.isPaxHeader();
        boolean boolean79 = zipArchiveOutputStream30.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry67);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream80 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset -1.", (java.io.OutputStream) zipArchiveOutputStream30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset -1. not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "UTF8" + "'", str34, "UTF8");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #619
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #43
200: dup
201: aload         24
203: ldc           #44
205: invokespecial #45
208: astore        25
210: new           #182
213: dup
214: aload         24
216: invokespecial #183
219: astore        26
221: aconst_null
222: astore        27
224: aload         26
226: aload         27
228: invokevirtual #184
231: aload         26
233: invokevirtual #309
236: istore        28
238: aload         26
240: invokevirtual #310
243: astore        29
245: aconst_null
246: astore        30
248: aload         26
250: aload         30
252: invokevirtual #224
255: aconst_null
256: astore        31
258: new           #10
261: dup
262: aload         31
264: invokespecial #11
267: astore        32
269: aload         32
271: invokevirtual #12
274: lstore        33
276: aload         32
278: invokevirtual #12
281: lstore        35
283: new           #13
286: dup
287: aload         32
289: invokespecial #14
292: astore        37
294: new           #15
297: dup
298: aload         37
300: ldc           #16
302: iconst_1
303: iconst_0
304: invokespecial #17
307: astore        38
309: new           #112
312: dup
313: ldc           #44
315: invokespecial #120
318: astore        39
320: aload         39
322: invokevirtual #129
325: istore        40
327: aload         39
329: iconst_3
330: iconst_0
331: invokevirtual #130
334: aload         39
336: invokevirtual #131
339: istore        41
341: aload         39
343: invokevirtual #132
346: istore        42
348: aconst_null
349: astore        43
351: new           #10
354: dup
355: aload         43
357: invokespecial #11
360: astore        44
362: aload         44
364: invokevirtual #12
367: lstore        45
369: aload         44
371: invokevirtual #12
374: lstore        47
376: new           #13
379: dup
380: aload         44
382: invokespecial #14
385: astore        49
387: new           #31
390: dup
391: aload         44
393: invokespecial #32
396: astore        50
398: new           #33
401: dup
402: aload         50
404: invokespecial #34
407: astore        51
409: new           #15
412: dup
413: aload         51
415: ldc           #111
417: iconst_0
418: iconst_0
419: invokespecial #17
422: astore        52
424: new           #112
427: dup
428: ldc           #61
430: iconst_0
431: invokespecial #113
434: astore        53
436: aload         53
438: bipush        32
440: invokevirtual #114
443: aload         51
445: aload         53
447: invokevirtual #115
450: istore        54
452: aload         39
454: aload         53
456: invokevirtual #133
459: istore        55
461: aload         53
463: invokevirtual #134
466: istore        56
468: aload         53
470: bipush        32
472: sipush        29127
475: invokevirtual #130
478: aload         53
480: invokevirtual #134
483: istore        57
485: aload         38
487: aload         53
489: invokevirtual #135
492: istore        58
494: aload         53
496: invokevirtual #620
499: istore        59
501: aload         26
503: aload         53
505: invokevirtual #345
508: istore        60
510: aload_1
511: ldc           #37
513: aload         26
515: invokevirtual #49
518: astore        61
520: ldc           #39
522: invokestatic  #20
525: goto          530
528: astore        61
530: new           #22
533: dup
534: invokespecial #23
537: ldc           #24
539: invokevirtual #25
542: lload         4
544: invokevirtual #26
547: ldc           #27
549: invokevirtual #25
552: lconst_0
553: invokevirtual #26
556: ldc           #24
558: invokevirtual #25
561: invokevirtual #28
564: lload         4
566: lconst_0
567: lcmp
568: ifne          575
571: iconst_1
572: goto          576
575: iconst_0
576: invokestatic  #29
579: new           #22
582: dup
583: invokespecial #23
586: ldc           #24
588: invokevirtual #25
591: lload         6
593: invokevirtual #26
596: ldc           #27
598: invokevirtual #25
601: lconst_0
602: invokevirtual #26
605: ldc           #24
607: invokevirtual #25
610: invokevirtual #28
613: lload         6
615: lconst_0
616: lcmp
617: ifne          624
620: iconst_1
621: goto          625
624: iconst_0
625: invokestatic  #29
628: aload         10
630: invokestatic  #168
633: aload         11
635: invokestatic  #168
638: aload         13
640: invokestatic  #53
643: new           #22
646: dup
647: invokespecial #23
650: ldc           #24
652: invokevirtual #25
655: lload         16
657: invokevirtual #26
660: ldc           #27
662: invokevirtual #25
665: lconst_0
666: invokevirtual #26
669: ldc           #24
671: invokevirtual #25
674: invokevirtual #28
677: lload         16
679: lconst_0
680: lcmp
681: ifne          688
684: iconst_1
685: goto          689
688: iconst_0
689: invokestatic  #29
692: new           #22
695: dup
696: invokespecial #23
699: ldc           #24
701: invokevirtual #25
704: lload         18
706: invokevirtual #26
709: ldc           #27
711: invokevirtual #25
714: lconst_0
715: invokevirtual #26
718: ldc           #24
720: invokevirtual #25
723: invokevirtual #28
726: lload         18
728: lconst_0
729: lcmp
730: ifne          737
733: iconst_1
734: goto          738
737: iconst_0
738: invokestatic  #29
741: aload         21
743: invokestatic  #168
746: aload         23
748: invokestatic  #53
751: new           #22
754: dup
755: invokespecial #23
758: ldc           #24
760: invokevirtual #25
763: iload         28
765: invokevirtual #41
768: ldc           #27
770: invokevirtual #25
773: iconst_0
774: invokevirtual #41
777: ldc           #24
779: invokevirtual #25
782: invokevirtual #28
785: iload         28
787: ifne          794
790: iconst_1
791: goto          795
794: iconst_0
795: invokestatic  #29
798: new           #22
801: dup
802: invokespecial #23
805: ldc           #24
807: invokevirtual #25
810: aload         29
812: invokevirtual #25
815: ldc_w         #317
818: invokevirtual #25
821: invokevirtual #28
824: aload         29
826: ldc           #85
828: invokestatic  #154
831: new           #22
834: dup
835: invokespecial #23
838: ldc           #24
840: invokevirtual #25
843: lload         33
845: invokevirtual #26
848: ldc           #27
850: invokevirtual #25
853: lconst_0
854: invokevirtual #26
857: ldc           #24
859: invokevirtual #25
862: invokevirtual #28
865: lload         33
867: lconst_0
868: lcmp
869: ifne          876
872: iconst_1
873: goto          877
876: iconst_0
877: invokestatic  #29
880: new           #22
883: dup
884: invokespecial #23
887: ldc           #24
889: invokevirtual #25
892: lload         35
894: invokevirtual #26
897: ldc           #27
899: invokevirtual #25
902: lconst_0
903: invokevirtual #26
906: ldc           #24
908: invokevirtual #25
911: invokevirtual #28
914: lload         35
916: lconst_0
917: lcmp
918: ifne          925
921: iconst_1
922: goto          926
925: iconst_0
926: invokestatic  #29
929: new           #22
932: dup
933: invokespecial #23
936: ldc           #24
938: invokevirtual #25
941: iload         40
943: invokevirtual #41
946: ldc           #27
948: invokevirtual #25
951: iconst_0
952: invokevirtual #41
955: ldc           #24
957: invokevirtual #25
960: invokevirtual #28
963: iload         40
965: ifne          972
968: iconst_1
969: goto          973
972: iconst_0
973: invokestatic  #29
976: new           #22
979: dup
980: invokespecial #23
983: ldc           #24
985: invokevirtual #25
988: iload         41
990: invokevirtual #41
993: ldc           #27
995: invokevirtual #25
998: iconst_0
999: invokevirtual #41
1002: ldc           #24
1004: invokevirtual #25
1007: invokevirtual #28
1010: iload         41
1012: ifne          1019
1015: iconst_1
1016: goto          1020
1019: iconst_0
1020: invokestatic  #29
1023: new           #22
1026: dup
1027: invokespecial #23
1030: ldc           #24
1032: invokevirtual #25
1035: iload         42
1037: invokevirtual #69
1040: ldc           #27
1042: invokevirtual #25
1045: iconst_1
1046: invokevirtual #69
1049: ldc           #24
1051: invokevirtual #25
1054: invokevirtual #28
1057: iload         42
1059: iconst_1
1060: if_icmpne     1067
1063: iconst_1
1064: goto          1068
1067: iconst_0
1068: invokestatic  #29
1071: new           #22
1074: dup
1075: invokespecial #23
1078: ldc           #24
1080: invokevirtual #25
1083: lload         45
1085: invokevirtual #26
1088: ldc           #27
1090: invokevirtual #25
1093: lconst_0
1094: invokevirtual #26
1097: ldc           #24
1099: invokevirtual #25
1102: invokevirtual #28
1105: lload         45
1107: lconst_0
1108: lcmp
1109: ifne          1116
1112: iconst_1
1113: goto          1117
1116: iconst_0
1117: invokestatic  #29
1120: new           #22
1123: dup
1124: invokespecial #23
1127: ldc           #24
1129: invokevirtual #25
1132: lload         47
1134: invokevirtual #26
1137: ldc           #27
1139: invokevirtual #25
1142: lconst_0
1143: invokevirtual #26
1146: ldc           #24
1148: invokevirtual #25
1151: invokevirtual #28
1154: lload         47
1156: lconst_0
1157: lcmp
1158: ifne          1165
1161: iconst_1
1162: goto          1166
1165: iconst_0
1166: invokestatic  #29
1169: new           #22
1172: dup
1173: invokespecial #23
1176: ldc           #24
1178: invokevirtual #25
1181: iload         54
1183: invokevirtual #69
1186: ldc           #27
1188: invokevirtual #25
1191: iconst_1
1192: invokevirtual #69
1195: ldc           #24
1197: invokevirtual #25
1200: invokevirtual #28
1203: iload         54
1205: iconst_1
1206: if_icmpne     1213
1209: iconst_1
1210: goto          1214
1213: iconst_0
1214: invokestatic  #29
1217: new           #22
1220: dup
1221: invokespecial #23
1224: ldc           #24
1226: invokevirtual #25
1229: iload         55
1231: invokevirtual #69
1234: ldc           #27
1236: invokevirtual #25
1239: iconst_0
1240: invokevirtual #69
1243: ldc           #24
1245: invokevirtual #25
1248: invokevirtual #28
1251: iload         55
1253: ifne          1260
1256: iconst_1
1257: goto          1261
1260: iconst_0
1261: invokestatic  #29
1264: new           #22
1267: dup
1268: invokespecial #23
1271: ldc           #24
1273: invokevirtual #25
1276: iload         56
1278: invokevirtual #69
1281: ldc           #27
1283: invokevirtual #25
1286: iconst_0
1287: invokevirtual #69
1290: ldc           #24
1292: invokevirtual #25
1295: invokevirtual #28
1298: iload         56
1300: ifne          1307
1303: iconst_1
1304: goto          1308
1307: iconst_0
1308: invokestatic  #29
1311: new           #22
1314: dup
1315: invokespecial #23
1318: ldc           #24
1320: invokevirtual #25
1323: iload         57
1325: invokevirtual #69
1328: ldc           #27
1330: invokevirtual #25
1333: iconst_0
1334: invokevirtual #69
1337: ldc           #24
1339: invokevirtual #25
1342: invokevirtual #28
1345: iload         57
1347: ifne          1354
1350: iconst_1
1351: goto          1355
1354: iconst_0
1355: invokestatic  #29
1358: new           #22
1361: dup
1362: invokespecial #23
1365: ldc           #24
1367: invokevirtual #25
1370: iload         58
1372: invokevirtual #69
1375: ldc           #27
1377: invokevirtual #25
1380: iconst_0
1381: invokevirtual #69
1384: ldc           #24
1386: invokevirtual #25
1389: invokevirtual #28
1392: iload         58
1394: ifne          1401
1397: iconst_1
1398: goto          1402
1401: iconst_0
1402: invokestatic  #29
1405: new           #22
1408: dup
1409: invokespecial #23
1412: ldc           #24
1414: invokevirtual #25
1417: iload         59
1419: invokevirtual #69
1422: ldc           #27
1424: invokevirtual #25
1427: iconst_0
1428: invokevirtual #69
1431: ldc           #24
1433: invokevirtual #25
1436: invokevirtual #28
1439: iload         59
1441: ifne          1448
1444: iconst_1
1445: goto          1449
1448: iconst_0
1449: invokestatic  #29
1452: new           #22
1455: dup
1456: invokespecial #23
1459: ldc           #24
1461: invokevirtual #25
1464: iload         60
1466: invokevirtual #69
1469: ldc           #27
1471: invokevirtual #25
1474: iconst_0
1475: invokevirtual #69
1478: ldc           #24
1480: invokevirtual #25
1483: invokevirtual #28
1486: iload         60
1488: ifne          1495
1491: iconst_1
1492: goto          1496
1495: iconst_0
1496: invokestatic  #29
1499: return
Exception table:
from    to  target type
510   525   528   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test185
Start line: 6786
End line: 0
Method source code: 
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream10);
        java.io.InputStream inputStream12 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream13 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream12);
        long long14 = jarArchiveInputStream13.getBytesRead();
        long long15 = jarArchiveInputStream13.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream16 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream13);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong18 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray19 = zipLong18.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong21 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray22 = zipLong21.getBytes();
        boolean boolean24 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray19, byteArray22, true);
        boolean boolean25 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray19);
        int int28 = jarArchiveInputStream13.read(byteArray19, (int) (byte) 10, 3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream13, (int) (byte) 51, "x5S");
        tarArchiveInputStream31.close();
        byte[] byteArray36 = new byte[] { (byte) 103, (byte) 0, (byte) 100 };
        int int39 = tarArchiveInputStream31.read(byteArray36, 257, 16384);
        java.io.InputStream inputStream42 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream43 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream42);
        long long44 = jarArchiveInputStream43.getBytesRead();
        long long45 = jarArchiveInputStream43.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream46 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream43);
        arArchiveInputStream46.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream48 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream46);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong50 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray51 = zipLong50.getBytes();
        long long52 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray51);
        int int55 = tarArchiveInputStream48.read(byteArray51, 0, (int) (short) 0);
        boolean boolean57 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray51, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding61 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("UTF8");
        boolean boolean63 = zipEncoding61.canEncode("00");
        java.lang.String str64 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray51, 8, 0, zipEncoding61);
        java.lang.String str65 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray36, 33188, 0, zipEncoding61);
        try {
            jarArchiveOutputStream10.write(byteArray36, (int) (short) 8, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[103, 0, 100]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(zipEncoding61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #621
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: new           #222
80: dup
81: aload         7
83: invokespecial #223
86: astore        8
88: new           #143
91: dup
92: aload         8
94: invokespecial #144
97: astore        9
99: aconst_null
100: astore        10
102: new           #10
105: dup
106: aload         10
108: invokespecial #11
111: astore        11
113: aload         11
115: invokevirtual #12
118: lstore        12
120: aload         11
122: invokevirtual #12
125: lstore        14
127: new           #13
130: dup
131: aload         11
133: invokespecial #14
136: astore        16
138: new           #73
141: dup
142: lconst_0
143: invokespecial #74
146: astore        17
148: aload         17
150: invokevirtual #75
153: astore        18
155: new           #73
158: dup
159: lconst_0
160: invokespecial #74
163: astore        19
165: aload         19
167: invokevirtual #75
170: astore        20
172: aload         18
174: aload         20
176: iconst_1
177: invokestatic  #177
180: istore        21
182: aload         18
184: invokestatic  #192
187: istore        22
189: aload         11
191: aload         18
193: bipush        10
195: iconst_3
196: invokevirtual #76
199: istore        23
201: new           #31
204: dup
205: aload         11
207: bipush        51
209: ldc           #153
211: invokespecial #110
214: astore        24
216: aload         24
218: invokevirtual #363
221: iconst_3
222: newarray       byte
224: dup
225: iconst_0
226: bipush        103
228: bastore
229: dup
230: iconst_1
231: iconst_0
232: bastore
233: dup
234: iconst_2
235: bipush        100
237: bastore
238: astore        25
240: aload         24
242: aload         25
244: sipush        257
247: sipush        16384
250: invokevirtual #174
253: istore        26
255: aconst_null
256: astore        27
258: new           #10
261: dup
262: aload         27
264: invokespecial #11
267: astore        28
269: aload         28
271: invokevirtual #12
274: lstore        29
276: aload         28
278: invokevirtual #12
281: lstore        31
283: new           #13
286: dup
287: aload         28
289: invokespecial #14
292: astore        33
294: aload         33
296: invokevirtual #140
299: new           #31
302: dup
303: aload         33
305: invokespecial #32
308: astore        34
310: new           #73
313: dup
314: lconst_0
315: invokespecial #74
318: astore        35
320: aload         35
322: invokevirtual #75
325: astore        36
327: aload         36
329: invokestatic  #209
332: lstore        37
334: aload         34
336: aload         36
338: iconst_0
339: iconst_0
340: invokevirtual #174
343: istore        39
345: aload         36
347: iconst_m1
348: invokestatic  #210
351: istore        40
353: ldc           #85
355: invokestatic  #211
358: astore        41
360: aload         41
362: ldc           #16
364: invokeinterface #212,  2
369: istore        42
371: aload         36
373: bipush        8
375: iconst_0
376: aload         41
378: invokestatic  #213
381: astore        43
383: aload         25
385: ldc_w         #420
388: iconst_0
389: aload         41
391: invokestatic  #213
394: astore        44
396: aload         8
398: aload         25
400: bipush        8
402: bipush        100
404: invokevirtual #622
407: ldc           #51
409: invokestatic  #20
412: goto          417
415: astore        45
417: new           #22
420: dup
421: invokespecial #23
424: ldc           #24
426: invokevirtual #25
429: lload         4
431: invokevirtual #26
434: ldc           #27
436: invokevirtual #25
439: lconst_0
440: invokevirtual #26
443: ldc           #24
445: invokevirtual #25
448: invokevirtual #28
451: lload         4
453: lconst_0
454: lcmp
455: ifne          462
458: iconst_1
459: goto          463
462: iconst_0
463: invokestatic  #29
466: aload         6
468: invokestatic  #53
471: new           #22
474: dup
475: invokespecial #23
478: ldc           #24
480: invokevirtual #25
483: lload         12
485: invokevirtual #26
488: ldc           #27
490: invokevirtual #25
493: lconst_0
494: invokevirtual #26
497: ldc           #24
499: invokevirtual #25
502: invokevirtual #28
505: lload         12
507: lconst_0
508: lcmp
509: ifne          516
512: iconst_1
513: goto          517
516: iconst_0
517: invokestatic  #29
520: new           #22
523: dup
524: invokespecial #23
527: ldc           #24
529: invokevirtual #25
532: lload         14
534: invokevirtual #26
537: ldc           #27
539: invokevirtual #25
542: lconst_0
543: invokevirtual #26
546: ldc           #24
548: invokevirtual #25
551: invokevirtual #28
554: lload         14
556: lconst_0
557: lcmp
558: ifne          565
561: iconst_1
562: goto          566
565: iconst_0
566: invokestatic  #29
569: aload         18
571: invokestatic  #53
574: aload         18
576: invokestatic  #66
579: ldc           #77
581: invokestatic  #68
584: aload         20
586: invokestatic  #53
589: aload         20
591: invokestatic  #66
594: ldc           #77
596: invokestatic  #68
599: new           #22
602: dup
603: invokespecial #23
606: ldc           #24
608: invokevirtual #25
611: iload         21
613: invokevirtual #69
616: ldc           #27
618: invokevirtual #25
621: iconst_1
622: invokevirtual #69
625: ldc           #24
627: invokevirtual #25
630: invokevirtual #28
633: iload         21
635: iconst_1
636: if_icmpne     643
639: iconst_1
640: goto          644
643: iconst_0
644: invokestatic  #29
647: new           #22
650: dup
651: invokespecial #23
654: ldc           #24
656: invokevirtual #25
659: iload         22
661: invokevirtual #69
664: ldc           #27
666: invokevirtual #25
669: iconst_1
670: invokevirtual #69
673: ldc           #24
675: invokevirtual #25
678: invokevirtual #28
681: iload         22
683: iconst_1
684: if_icmpne     691
687: iconst_1
688: goto          692
691: iconst_0
692: invokestatic  #29
695: new           #22
698: dup
699: invokespecial #23
702: ldc           #24
704: invokevirtual #25
707: iload         23
709: invokevirtual #41
712: ldc           #27
714: invokevirtual #25
717: iconst_m1
718: invokevirtual #41
721: ldc           #24
723: invokevirtual #25
726: invokevirtual #28
729: iload         23
731: iconst_m1
732: if_icmpne     739
735: iconst_1
736: goto          740
739: iconst_0
740: invokestatic  #29
743: aload         25
745: invokestatic  #53
748: aload         25
750: invokestatic  #66
753: ldc_w         #623
756: invokestatic  #68
759: new           #22
762: dup
763: invokespecial #23
766: ldc           #24
768: invokevirtual #25
771: iload         26
773: invokevirtual #41
776: ldc           #27
778: invokevirtual #25
781: iconst_m1
782: invokevirtual #41
785: ldc           #24
787: invokevirtual #25
790: invokevirtual #28
793: iload         26
795: iconst_m1
796: if_icmpne     803
799: iconst_1
800: goto          804
803: iconst_0
804: invokestatic  #29
807: new           #22
810: dup
811: invokespecial #23
814: ldc           #24
816: invokevirtual #25
819: lload         29
821: invokevirtual #26
824: ldc           #27
826: invokevirtual #25
829: lconst_0
830: invokevirtual #26
833: ldc           #24
835: invokevirtual #25
838: invokevirtual #28
841: lload         29
843: lconst_0
844: lcmp
845: ifne          852
848: iconst_1
849: goto          853
852: iconst_0
853: invokestatic  #29
856: new           #22
859: dup
860: invokespecial #23
863: ldc           #24
865: invokevirtual #25
868: lload         31
870: invokevirtual #26
873: ldc           #27
875: invokevirtual #25
878: lconst_0
879: invokevirtual #26
882: ldc           #24
884: invokevirtual #25
887: invokevirtual #28
890: lload         31
892: lconst_0
893: lcmp
894: ifne          901
897: iconst_1
898: goto          902
901: iconst_0
902: invokestatic  #29
905: aload         36
907: invokestatic  #53
910: aload         36
912: invokestatic  #66
915: ldc           #77
917: invokestatic  #68
920: new           #22
923: dup
924: invokespecial #23
927: ldc           #24
929: invokevirtual #25
932: lload         37
934: invokevirtual #26
937: ldc           #27
939: invokevirtual #25
942: lconst_0
943: invokevirtual #26
946: ldc           #24
948: invokevirtual #25
951: invokevirtual #28
954: lload         37
956: lconst_0
957: lcmp
958: ifne          965
961: iconst_1
962: goto          966
965: iconst_0
966: invokestatic  #29
969: new           #22
972: dup
973: invokespecial #23
976: ldc           #24
978: invokevirtual #25
981: iload         39
983: invokevirtual #41
986: ldc           #27
988: invokevirtual #25
991: iconst_m1
992: invokevirtual #41
995: ldc           #24
997: invokevirtual #25
1000: invokevirtual #28
1003: iload         39
1005: iconst_m1
1006: if_icmpne     1013
1009: iconst_1
1010: goto          1014
1013: iconst_0
1014: invokestatic  #29
1017: new           #22
1020: dup
1021: invokespecial #23
1024: ldc           #24
1026: invokevirtual #25
1029: iload         40
1031: invokevirtual #69
1034: ldc           #27
1036: invokevirtual #25
1039: iconst_0
1040: invokevirtual #69
1043: ldc           #24
1045: invokevirtual #25
1048: invokevirtual #28
1051: iload         40
1053: ifne          1060
1056: iconst_1
1057: goto          1061
1060: iconst_0
1061: invokestatic  #29
1064: aload         41
1066: invokestatic  #53
1069: new           #22
1072: dup
1073: invokespecial #23
1076: ldc           #24
1078: invokevirtual #25
1081: iload         42
1083: invokevirtual #69
1086: ldc           #27
1088: invokevirtual #25
1091: iconst_1
1092: invokevirtual #69
1095: ldc           #24
1097: invokevirtual #25
1100: invokevirtual #28
1103: iload         42
1105: iconst_1
1106: if_icmpne     1113
1109: iconst_1
1110: goto          1114
1113: iconst_0
1114: invokestatic  #29
1117: new           #22
1120: dup
1121: invokespecial #23
1124: ldc           #24
1126: invokevirtual #25
1129: aload         43
1131: invokevirtual #25
1134: ldc           #219
1136: invokevirtual #25
1139: invokevirtual #28
1142: aload         43
1144: ldc           #61
1146: invokestatic  #154
1149: new           #22
1152: dup
1153: invokespecial #23
1156: ldc           #24
1158: invokevirtual #25
1161: aload         44
1163: invokevirtual #25
1166: ldc           #219
1168: invokevirtual #25
1171: invokevirtual #28
1174: aload         44
1176: ldc           #61
1178: invokestatic  #154
1181: return
Exception table:
from    to  target type
396   412   415   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test186
Start line: 6865
End line: 0
Method source code: 
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        java.io.OutputStream outputStream0 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream2 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream0, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream3 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream0);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy4 = null;
        zipArchiveOutputStream3.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy4);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream3);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream7 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream9 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream7, 1000);
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory10 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream12 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream12, "jar");
        tarArchiveOutputStream14.count(0L);
        long long17 = tarArchiveOutputStream14.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream18 = archiveStreamFactory10.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream14);
        int int19 = tarArchiveOutputStream14.getCount();
        int int20 = tarArchiveOutputStream14.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong22 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray23 = zipLong22.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong25 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray26 = zipLong25.getBytes();
        boolean boolean28 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray23, byteArray26, true);
        boolean boolean29 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray23);
        tarArchiveOutputStream14.write(byteArray23, (int) (short) 4, (int) (byte) -1);
        try {
            tarArchiveOutputStream9.write(byteArray23, 255, 263);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '263' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #624
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #43
30: dup
31: aload_1
32: ldc           #44
34: invokespecial #45
37: astore_2
38: new           #182
41: dup
42: aload_1
43: invokespecial #183
46: astore_3
47: aconst_null
48: astore        4
50: aload_3
51: aload         4
53: invokevirtual #184
56: new           #43
59: dup
60: aload_3
61: invokespecial #95
64: astore        5
66: new           #143
69: dup
70: aload_3
71: invokespecial #144
74: astore        6
76: new           #43
79: dup
80: aload         6
82: sipush        1000
85: invokespecial #340
88: astore        7
90: new           #8
93: dup
94: invokespecial #9
97: astore        8
99: aconst_null
100: astore        9
102: new           #43
105: dup
106: aload         9
108: ldc           #44
110: invokespecial #45
113: astore        10
115: aload         10
117: lconst_0
118: invokevirtual #46
121: aload         10
123: invokevirtual #47
126: lstore        11
128: aload         8
130: ldc           #48
132: aload         10
134: invokevirtual #49
137: astore        13
139: aload         10
141: invokevirtual #60
144: istore        14
146: aload         10
148: invokevirtual #60
151: istore        15
153: new           #73
156: dup
157: lconst_0
158: invokespecial #74
161: astore        16
163: aload         16
165: invokevirtual #75
168: astore        17
170: new           #73
173: dup
174: lconst_0
175: invokespecial #74
178: astore        18
180: aload         18
182: invokevirtual #75
185: astore        19
187: aload         17
189: aload         19
191: iconst_1
192: invokestatic  #177
195: istore        20
197: aload         17
199: invokestatic  #192
202: istore        21
204: aload         10
206: aload         17
208: iconst_4
209: iconst_m1
210: invokevirtual #63
213: aload         7
215: aload         17
217: sipush        255
220: sipush        263
223: invokevirtual #63
226: ldc_w         #625
229: invokestatic  #20
232: goto          237
235: astore        22
237: new           #22
240: dup
241: invokespecial #23
244: ldc           #24
246: invokevirtual #25
249: lload         11
251: invokevirtual #26
254: ldc           #27
256: invokevirtual #25
259: lconst_0
260: invokevirtual #26
263: ldc           #24
265: invokevirtual #25
268: invokevirtual #28
271: lload         11
273: lconst_0
274: lcmp
275: ifne          282
278: iconst_1
279: goto          283
282: iconst_0
283: invokestatic  #29
286: aload         13
288: invokestatic  #53
291: new           #22
294: dup
295: invokespecial #23
298: ldc           #24
300: invokevirtual #25
303: iload         14
305: invokevirtual #41
308: ldc           #27
310: invokevirtual #25
313: iconst_0
314: invokevirtual #41
317: ldc           #24
319: invokevirtual #25
322: invokevirtual #28
325: iload         14
327: ifne          334
330: iconst_1
331: goto          335
334: iconst_0
335: invokestatic  #29
338: new           #22
341: dup
342: invokespecial #23
345: ldc           #24
347: invokevirtual #25
350: iload         15
352: invokevirtual #41
355: ldc           #27
357: invokevirtual #25
360: iconst_0
361: invokevirtual #41
364: ldc           #24
366: invokevirtual #25
369: invokevirtual #28
372: iload         15
374: ifne          381
377: iconst_1
378: goto          382
381: iconst_0
382: invokestatic  #29
385: aload         17
387: invokestatic  #53
390: aload         17
392: invokestatic  #66
395: ldc           #77
397: invokestatic  #68
400: aload         19
402: invokestatic  #53
405: aload         19
407: invokestatic  #66
410: ldc           #77
412: invokestatic  #68
415: new           #22
418: dup
419: invokespecial #23
422: ldc           #24
424: invokevirtual #25
427: iload         20
429: invokevirtual #69
432: ldc           #27
434: invokevirtual #25
437: iconst_1
438: invokevirtual #69
441: ldc           #24
443: invokevirtual #25
446: invokevirtual #28
449: iload         20
451: iconst_1
452: if_icmpne     459
455: iconst_1
456: goto          460
459: iconst_0
460: invokestatic  #29
463: new           #22
466: dup
467: invokespecial #23
470: ldc           #24
472: invokevirtual #25
475: iload         21
477: invokevirtual #69
480: ldc           #27
482: invokevirtual #25
485: iconst_1
486: invokevirtual #69
489: ldc           #24
491: invokevirtual #25
494: invokevirtual #28
497: iload         21
499: iconst_1
500: if_icmpne     507
503: iconst_1
504: goto          508
507: iconst_0
508: invokestatic  #29
511: return
Exception table:
from    to  target type
213   232   235   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test187
Start line: 6911
End line: 0
Method source code: 
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        byte[] byteArray12 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes(2097151L);
        java.lang.String str13 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiString(byteArray12);
        try {
            arArchiveOutputStream10.write(byteArray12);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '4' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, -1, 31, 0]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\ufffd\ufffd\037\000" + "'", str13, "\ufffd\ufffd\037\000");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #626
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: ldc2_w        #627
85: invokestatic  #259
88: astore        10
90: aload         10
92: invokestatic  #150
95: astore        11
97: aload         9
99: aload         10
101: invokevirtual #629
104: ldc_w         #414
107: invokestatic  #20
110: goto          115
113: astore        12
115: new           #22
118: dup
119: invokespecial #23
122: ldc           #24
124: invokevirtual #25
127: lload         4
129: invokevirtual #26
132: ldc           #27
134: invokevirtual #25
137: lconst_0
138: invokevirtual #26
141: ldc           #24
143: invokevirtual #25
146: invokevirtual #28
149: lload         4
151: lconst_0
152: lcmp
153: ifne          160
156: iconst_1
157: goto          161
160: iconst_0
161: invokestatic  #29
164: aload         6
166: invokestatic  #53
169: new           #22
172: dup
173: invokespecial #23
176: ldc           #24
178: invokevirtual #25
181: lload         7
183: invokevirtual #26
186: ldc           #27
188: invokevirtual #25
191: lconst_0
192: invokevirtual #26
195: ldc           #24
197: invokevirtual #25
200: invokevirtual #28
203: lload         7
205: lconst_0
206: lcmp
207: ifne          214
210: iconst_1
211: goto          215
214: iconst_0
215: invokestatic  #29
218: aload         10
220: invokestatic  #53
223: aload         10
225: invokestatic  #66
228: ldc_w         #630
231: invokestatic  #68
234: new           #22
237: dup
238: invokespecial #23
241: ldc           #24
243: invokevirtual #25
246: aload         11
248: invokevirtual #25
251: ldc_w         #631
254: invokevirtual #25
257: invokevirtual #28
260: aload         11
262: ldc_w         #632
265: invokestatic  #154
268: return
Exception table:
from    to  target type
97   110   113   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test188
Start line: 6940
End line: 0
Method source code: 
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream9 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream9, 31, 256);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream13 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #633
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #31
72: dup
73: aload         7
75: bipush        31
77: sipush        256
80: invokespecial #108
83: astore        8
85: aload_1
86: aload         8
88: invokevirtual #18
91: astore        9
93: ldc           #19
95: invokestatic  #20
98: goto          103
101: astore        9
103: new           #22
106: dup
107: invokespecial #23
110: ldc           #24
112: invokevirtual #25
115: lload         4
117: invokevirtual #26
120: ldc           #27
122: invokevirtual #25
125: lconst_0
126: invokevirtual #26
129: ldc           #24
131: invokevirtual #25
134: invokevirtual #28
137: lload         4
139: lconst_0
140: lcmp
141: ifne          148
144: iconst_1
145: goto          149
148: iconst_0
149: invokestatic  #29
152: aload         6
154: invokestatic  #53
157: return
Exception table:
from    to  target type
85    98   101   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test189
Start line: 6963
End line: 0
Method source code: 
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        jarArchiveOutputStream12.setEncoding("5");
        jarArchiveOutputStream12.setFallbackToUTF8(true);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry19 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry19.setDevMinor((int) ' ');
        tarArchiveEntry19.setGroupName("\000\000");
        long long24 = tarArchiveEntry19.getSize();
        java.util.Date date25 = tarArchiveEntry19.getLastModifiedDate();
        java.io.File file26 = tarArchiveEntry19.getFile();
        int int27 = tarArchiveEntry19.getGroupId();
        tarArchiveEntry19.setIds(2048, (int) (byte) 50);
        java.io.InputStream inputStream31 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream32 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream31);
        long long33 = jarArchiveInputStream32.getBytesRead();
        long long34 = jarArchiveInputStream32.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream35 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream32);
        arArchiveInputStream35.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream39 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream35, 24576, 255);
        boolean boolean40 = tarArchiveEntry19.equals((java.lang.Object) arArchiveInputStream35);
        boolean boolean41 = tarArchiveEntry19.isLink();
        boolean boolean42 = jarArchiveOutputStream12.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry19);
        jarArchiveOutputStream12.setFallbackToUTF8(false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertNull(file26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #634
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: aload         10
105: ldc_w         #458
108: invokevirtual #459
111: aload         10
113: iconst_1
114: invokevirtual #501
117: new           #112
120: dup
121: ldc           #61
123: iconst_0
124: invokespecial #113
127: astore        11
129: aload         11
131: bipush        32
133: invokevirtual #114
136: aload         11
138: ldc           #244
140: invokevirtual #245
143: aload         11
145: invokevirtual #156
148: lstore        12
150: aload         11
152: invokevirtual #122
155: astore        14
157: aload         11
159: invokevirtual #395
162: astore        15
164: aload         11
166: invokevirtual #502
169: istore        16
171: aload         11
173: sipush        2048
176: bipush        50
178: invokevirtual #130
181: aconst_null
182: astore        17
184: new           #10
187: dup
188: aload         17
190: invokespecial #11
193: astore        18
195: aload         18
197: invokevirtual #12
200: lstore        19
202: aload         18
204: invokevirtual #12
207: lstore        21
209: new           #13
212: dup
213: aload         18
215: invokespecial #14
218: astore        23
220: aload         23
222: invokevirtual #140
225: new           #31
228: dup
229: aload         23
231: sipush        24576
234: sipush        255
237: invokespecial #108
240: astore        24
242: aload         11
244: aload         23
246: invokevirtual #133
249: istore        25
251: aload         11
253: invokevirtual #394
256: istore        26
258: aload         10
260: aload         11
262: invokevirtual #503
265: istore        27
267: aload         10
269: iconst_0
270: invokevirtual #501
273: new           #22
276: dup
277: invokespecial #23
280: ldc           #24
282: invokevirtual #25
285: lload         4
287: invokevirtual #26
290: ldc           #27
292: invokevirtual #25
295: lconst_0
296: invokevirtual #26
299: ldc           #24
301: invokevirtual #25
304: invokevirtual #28
307: lload         4
309: lconst_0
310: lcmp
311: ifne          318
314: iconst_1
315: goto          319
318: iconst_0
319: invokestatic  #29
322: aload         6
324: invokestatic  #53
327: new           #22
330: dup
331: invokespecial #23
334: ldc           #24
336: invokevirtual #25
339: iload         7
341: invokevirtual #41
344: ldc           #27
346: invokevirtual #25
349: iconst_0
350: invokevirtual #41
353: ldc           #24
355: invokevirtual #25
358: invokevirtual #28
361: iload         7
363: ifne          370
366: iconst_1
367: goto          371
370: iconst_0
371: invokestatic  #29
374: new           #22
377: dup
378: invokespecial #23
381: ldc           #24
383: invokevirtual #25
386: lload         12
388: invokevirtual #26
391: ldc           #27
393: invokevirtual #25
396: lconst_0
397: invokevirtual #26
400: ldc           #24
402: invokevirtual #25
405: invokevirtual #28
408: lload         12
410: lconst_0
411: lcmp
412: ifne          419
415: iconst_1
416: goto          420
419: iconst_0
420: invokestatic  #29
423: aload         14
425: invokestatic  #53
428: aload         15
430: invokestatic  #168
433: new           #22
436: dup
437: invokespecial #23
440: ldc           #24
442: invokevirtual #25
445: iload         16
447: invokevirtual #41
450: ldc           #27
452: invokevirtual #25
455: iconst_0
456: invokevirtual #41
459: ldc           #24
461: invokevirtual #25
464: invokevirtual #28
467: iload         16
469: ifne          476
472: iconst_1
473: goto          477
476: iconst_0
477: invokestatic  #29
480: new           #22
483: dup
484: invokespecial #23
487: ldc           #24
489: invokevirtual #25
492: lload         19
494: invokevirtual #26
497: ldc           #27
499: invokevirtual #25
502: lconst_0
503: invokevirtual #26
506: ldc           #24
508: invokevirtual #25
511: invokevirtual #28
514: lload         19
516: lconst_0
517: lcmp
518: ifne          525
521: iconst_1
522: goto          526
525: iconst_0
526: invokestatic  #29
529: new           #22
532: dup
533: invokespecial #23
536: ldc           #24
538: invokevirtual #25
541: lload         21
543: invokevirtual #26
546: ldc           #27
548: invokevirtual #25
551: lconst_0
552: invokevirtual #26
555: ldc           #24
557: invokevirtual #25
560: invokevirtual #28
563: lload         21
565: lconst_0
566: lcmp
567: ifne          574
570: iconst_1
571: goto          575
574: iconst_0
575: invokestatic  #29
578: new           #22
581: dup
582: invokespecial #23
585: ldc           #24
587: invokevirtual #25
590: iload         25
592: invokevirtual #69
595: ldc           #27
597: invokevirtual #25
600: iconst_0
601: invokevirtual #69
604: ldc           #24
606: invokevirtual #25
609: invokevirtual #28
612: iload         25
614: ifne          621
617: iconst_1
618: goto          622
621: iconst_0
622: invokestatic  #29
625: new           #22
628: dup
629: invokespecial #23
632: ldc           #24
634: invokevirtual #25
637: iload         26
639: invokevirtual #69
642: ldc           #27
644: invokevirtual #25
647: iconst_0
648: invokevirtual #69
651: ldc           #24
653: invokevirtual #25
656: invokevirtual #28
659: iload         26
661: ifne          668
664: iconst_1
665: goto          669
668: iconst_0
669: invokestatic  #29
672: new           #22
675: dup
676: invokespecial #23
679: ldc           #24
681: invokevirtual #25
684: iload         27
686: invokevirtual #69
689: ldc           #27
691: invokevirtual #25
694: iconst_0
695: invokevirtual #69
698: ldc           #24
700: invokevirtual #25
703: invokevirtual #28
706: iload         27
708: ifne          715
711: iconst_1
712: goto          716
715: iconst_0
716: invokestatic  #29
719: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test190
Start line: 7013
End line: 0
Method source code: 
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream10);
        try {
            cpioArchiveOutputStream11.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #635
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: new           #222
80: dup
81: aload         7
83: invokespecial #223
86: astore        8
88: new           #143
91: dup
92: aload         8
94: invokespecial #144
97: astore        9
99: aload         9
101: invokevirtual #636
104: ldc           #51
106: invokestatic  #20
109: goto          114
112: astore        10
114: new           #22
117: dup
118: invokespecial #23
121: ldc           #24
123: invokevirtual #25
126: lload         4
128: invokevirtual #26
131: ldc           #27
133: invokevirtual #25
136: lconst_0
137: invokevirtual #26
140: ldc           #24
142: invokevirtual #25
145: invokevirtual #28
148: lload         4
150: lconst_0
151: lcmp
152: ifne          159
155: iconst_1
156: goto          160
159: iconst_0
160: invokestatic  #29
163: aload         6
165: invokestatic  #53
168: return
Exception table:
from    to  target type
99   109   112   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test191
Start line: 7037
End line: 0
Method source code: 
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream11 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream10);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong13 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray14 = zipLong13.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong16 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray17 = zipLong16.getBytes();
        boolean boolean19 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray14, byteArray17, true);
        int int22 = tarArchiveInputStream11.read(byteArray14, 0, 32);
        tarArchiveInputStream11.reset();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream24 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream11);
        long long26 = tarArchiveInputStream11.skip((long) 148);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream27 = archiveStreamFactory0.createArchiveInputStream("", (java.io.InputStream) tarArchiveInputStream11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver:  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #637
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #31
72: dup
73: aload         7
75: invokespecial #32
78: astore        8
80: new           #73
83: dup
84: lconst_0
85: invokespecial #74
88: astore        9
90: aload         9
92: invokevirtual #75
95: astore        10
97: new           #73
100: dup
101: lconst_0
102: invokespecial #74
105: astore        11
107: aload         11
109: invokevirtual #75
112: astore        12
114: aload         10
116: aload         12
118: iconst_1
119: invokestatic  #177
122: istore        13
124: aload         8
126: aload         10
128: iconst_0
129: bipush        32
131: invokevirtual #174
134: istore        14
136: aload         8
138: invokevirtual #256
141: new           #31
144: dup
145: aload         8
147: invokespecial #32
150: astore        15
152: aload         8
154: ldc2_w        #638
157: invokevirtual #514
160: lstore        16
162: aload_1
163: ldc           #61
165: aload         8
167: invokevirtual #38
170: astore        18
172: ldc           #204
174: invokestatic  #20
177: goto          182
180: astore        18
182: new           #22
185: dup
186: invokespecial #23
189: ldc           #24
191: invokevirtual #25
194: lload         4
196: invokevirtual #26
199: ldc           #27
201: invokevirtual #25
204: lconst_0
205: invokevirtual #26
208: ldc           #24
210: invokevirtual #25
213: invokevirtual #28
216: lload         4
218: lconst_0
219: lcmp
220: ifne          227
223: iconst_1
224: goto          228
227: iconst_0
228: invokestatic  #29
231: aload         6
233: invokestatic  #53
236: aload         10
238: invokestatic  #53
241: aload         10
243: invokestatic  #66
246: ldc           #77
248: invokestatic  #68
251: aload         12
253: invokestatic  #53
256: aload         12
258: invokestatic  #66
261: ldc           #77
263: invokestatic  #68
266: new           #22
269: dup
270: invokespecial #23
273: ldc           #24
275: invokevirtual #25
278: iload         13
280: invokevirtual #69
283: ldc           #27
285: invokevirtual #25
288: iconst_1
289: invokevirtual #69
292: ldc           #24
294: invokevirtual #25
297: invokevirtual #28
300: iload         13
302: iconst_1
303: if_icmpne     310
306: iconst_1
307: goto          311
310: iconst_0
311: invokestatic  #29
314: new           #22
317: dup
318: invokespecial #23
321: ldc           #24
323: invokevirtual #25
326: iload         14
328: invokevirtual #41
331: ldc           #27
333: invokevirtual #25
336: iconst_m1
337: invokevirtual #41
340: ldc           #24
342: invokevirtual #25
345: invokevirtual #28
348: iload         14
350: iconst_m1
351: if_icmpne     358
354: iconst_1
355: goto          359
358: iconst_0
359: invokestatic  #29
362: new           #22
365: dup
366: invokespecial #23
369: ldc           #24
371: invokevirtual #25
374: lload         16
376: invokevirtual #26
379: ldc           #27
381: invokevirtual #25
384: lconst_0
385: invokevirtual #26
388: ldc           #24
390: invokevirtual #25
393: invokevirtual #28
396: lload         16
398: lconst_0
399: lcmp
400: ifne          407
403: iconst_1
404: goto          408
407: iconst_0
408: invokestatic  #29
411: return
Exception table:
from    to  target type
162   177   180   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test192
Start line: 7076
End line: 0
Method source code: 
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.InputStream inputStream27 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream28 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream27);
        long long29 = jarArchiveInputStream28.getBytesRead();
        long long30 = jarArchiveInputStream28.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream31 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream28);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream32 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream28);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream35 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream32, (int) (byte) 53, (int) (short) -1);
        boolean boolean36 = tarArchiveInputStream32.markSupported();
        tarArchiveInputStream32.close();
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream40 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream32, "x5S", false);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream41 = archiveStreamFactory0.createArchiveInputStream("\000\ufffd\000\000", (java.io.InputStream) zipArchiveInputStream40);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #640
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #10
200: dup
201: aload         24
203: invokespecial #11
206: astore        25
208: aload         25
210: invokevirtual #12
213: lstore        26
215: aload         25
217: invokevirtual #12
220: lstore        28
222: new           #13
225: dup
226: aload         25
228: invokespecial #14
231: astore        30
233: new           #31
236: dup
237: aload         25
239: invokespecial #32
242: astore        31
244: new           #31
247: dup
248: aload         31
250: bipush        53
252: iconst_m1
253: invokespecial #108
256: astore        32
258: aload         31
260: invokevirtual #513
263: istore        33
265: aload         31
267: invokevirtual #363
270: new           #15
273: dup
274: aload         31
276: ldc           #153
278: iconst_0
279: invokespecial #203
282: astore        34
284: aload_1
285: ldc_w         #353
288: aload         34
290: invokevirtual #38
293: astore        35
295: ldc           #118
297: invokestatic  #20
300: goto          305
303: astore        35
305: new           #22
308: dup
309: invokespecial #23
312: ldc           #24
314: invokevirtual #25
317: lload         4
319: invokevirtual #26
322: ldc           #27
324: invokevirtual #25
327: lconst_0
328: invokevirtual #26
331: ldc           #24
333: invokevirtual #25
336: invokevirtual #28
339: lload         4
341: lconst_0
342: lcmp
343: ifne          350
346: iconst_1
347: goto          351
350: iconst_0
351: invokestatic  #29
354: new           #22
357: dup
358: invokespecial #23
361: ldc           #24
363: invokevirtual #25
366: lload         6
368: invokevirtual #26
371: ldc           #27
373: invokevirtual #25
376: lconst_0
377: invokevirtual #26
380: ldc           #24
382: invokevirtual #25
385: invokevirtual #28
388: lload         6
390: lconst_0
391: lcmp
392: ifne          399
395: iconst_1
396: goto          400
399: iconst_0
400: invokestatic  #29
403: aload         10
405: invokestatic  #168
408: aload         11
410: invokestatic  #168
413: aload         13
415: invokestatic  #53
418: new           #22
421: dup
422: invokespecial #23
425: ldc           #24
427: invokevirtual #25
430: lload         16
432: invokevirtual #26
435: ldc           #27
437: invokevirtual #25
440: lconst_0
441: invokevirtual #26
444: ldc           #24
446: invokevirtual #25
449: invokevirtual #28
452: lload         16
454: lconst_0
455: lcmp
456: ifne          463
459: iconst_1
460: goto          464
463: iconst_0
464: invokestatic  #29
467: new           #22
470: dup
471: invokespecial #23
474: ldc           #24
476: invokevirtual #25
479: lload         18
481: invokevirtual #26
484: ldc           #27
486: invokevirtual #25
489: lconst_0
490: invokevirtual #26
493: ldc           #24
495: invokevirtual #25
498: invokevirtual #28
501: lload         18
503: lconst_0
504: lcmp
505: ifne          512
508: iconst_1
509: goto          513
512: iconst_0
513: invokestatic  #29
516: aload         21
518: invokestatic  #168
521: aload         23
523: invokestatic  #53
526: new           #22
529: dup
530: invokespecial #23
533: ldc           #24
535: invokevirtual #25
538: lload         26
540: invokevirtual #26
543: ldc           #27
545: invokevirtual #25
548: lconst_0
549: invokevirtual #26
552: ldc           #24
554: invokevirtual #25
557: invokevirtual #28
560: lload         26
562: lconst_0
563: lcmp
564: ifne          571
567: iconst_1
568: goto          572
571: iconst_0
572: invokestatic  #29
575: new           #22
578: dup
579: invokespecial #23
582: ldc           #24
584: invokevirtual #25
587: lload         28
589: invokevirtual #26
592: ldc           #27
594: invokevirtual #25
597: lconst_0
598: invokevirtual #26
601: ldc           #24
603: invokevirtual #25
606: invokevirtual #28
609: lload         28
611: lconst_0
612: lcmp
613: ifne          620
616: iconst_1
617: goto          621
620: iconst_0
621: invokestatic  #29
624: new           #22
627: dup
628: invokespecial #23
631: ldc           #24
633: invokevirtual #25
636: iload         33
638: invokevirtual #69
641: ldc           #27
643: invokevirtual #25
646: iconst_0
647: invokevirtual #69
650: ldc           #24
652: invokevirtual #25
655: invokevirtual #28
658: iload         33
660: ifne          667
663: iconst_1
664: goto          668
667: iconst_0
668: invokestatic  #29
671: return
Exception table:
from    to  target type
284   300   303   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test193
Start line: 7132
End line: 0
Method source code: 
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        tarArchiveEntry1.setDevMajor((int) (short) 10);
        long long15 = tarArchiveEntry1.getRealSize();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("070707", (byte) 1);
        boolean boolean19 = tarArchiveEntry1.equals(tarArchiveEntry18);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong22 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray23 = zipLong22.getBytes();
        long long24 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray23);
        boolean boolean25 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("-       0 ar", byteArray23);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding26 = null;
        try {
            tarArchiveEntry18.writeEntryHeader(byteArray23, zipEncoding26, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #641
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: bipush        10
97: invokevirtual #287
100: aload_1
101: invokevirtual #327
104: lstore        11
106: new           #112
109: dup
110: ldc_w         #642
113: iconst_1
114: invokespecial #113
117: astore        13
119: aload_1
120: aload         13
122: invokevirtual #377
125: istore        14
127: new           #73
130: dup
131: lconst_0
132: invokespecial #74
135: astore        15
137: aload         15
139: invokevirtual #75
142: astore        16
144: aload         16
146: invokestatic  #209
149: lstore        17
151: ldc_w         #643
154: aload         16
156: invokestatic  #525
159: istore        19
161: aconst_null
162: astore        20
164: aload         13
166: aload         16
168: aload         20
170: iconst_0
171: invokevirtual #408
174: ldc           #51
176: invokestatic  #20
179: goto          184
182: astore        21
184: new           #22
187: dup
188: invokespecial #23
191: ldc           #24
193: invokevirtual #25
196: lload         5
198: invokevirtual #26
201: ldc           #27
203: invokevirtual #25
206: lconst_0
207: invokevirtual #26
210: ldc           #24
212: invokevirtual #25
215: invokevirtual #28
218: lload         5
220: lconst_0
221: lcmp
222: ifne          229
225: iconst_1
226: goto          230
229: iconst_0
230: invokestatic  #29
233: aload         7
235: invokestatic  #53
238: new           #22
241: dup
242: invokespecial #23
245: ldc           #24
247: invokevirtual #25
250: iload         8
252: invokevirtual #69
255: ldc           #27
257: invokevirtual #25
260: iconst_0
261: invokevirtual #69
264: ldc           #24
266: invokevirtual #25
269: invokevirtual #28
272: iload         8
274: ifne          281
277: iconst_1
278: goto          282
281: iconst_0
282: invokestatic  #29
285: new           #22
288: dup
289: invokespecial #23
292: ldc           #24
294: invokevirtual #25
297: lload         9
299: invokevirtual #26
302: ldc           #27
304: invokevirtual #25
307: lconst_0
308: invokevirtual #26
311: ldc           #24
313: invokevirtual #25
316: invokevirtual #28
319: lload         9
321: lconst_0
322: lcmp
323: ifne          330
326: iconst_1
327: goto          331
330: iconst_0
331: invokestatic  #29
334: new           #22
337: dup
338: invokespecial #23
341: ldc           #24
343: invokevirtual #25
346: lload         11
348: invokevirtual #26
351: ldc           #27
353: invokevirtual #25
356: lconst_0
357: invokevirtual #26
360: ldc           #24
362: invokevirtual #25
365: invokevirtual #28
368: lload         11
370: lconst_0
371: lcmp
372: ifne          379
375: iconst_1
376: goto          380
379: iconst_0
380: invokestatic  #29
383: new           #22
386: dup
387: invokespecial #23
390: ldc           #24
392: invokevirtual #25
395: iload         14
397: invokevirtual #69
400: ldc           #27
402: invokevirtual #25
405: iconst_0
406: invokevirtual #69
409: ldc           #24
411: invokevirtual #25
414: invokevirtual #28
417: iload         14
419: ifne          426
422: iconst_1
423: goto          427
426: iconst_0
427: invokestatic  #29
430: aload         16
432: invokestatic  #53
435: aload         16
437: invokestatic  #66
440: ldc           #77
442: invokestatic  #68
445: new           #22
448: dup
449: invokespecial #23
452: ldc           #24
454: invokevirtual #25
457: lload         17
459: invokevirtual #26
462: ldc           #27
464: invokevirtual #25
467: lconst_0
468: invokevirtual #26
471: ldc           #24
473: invokevirtual #25
476: invokevirtual #28
479: lload         17
481: lconst_0
482: lcmp
483: ifne          490
486: iconst_1
487: goto          491
490: iconst_0
491: invokestatic  #29
494: new           #22
497: dup
498: invokespecial #23
501: ldc           #24
503: invokevirtual #25
506: iload         19
508: invokevirtual #69
511: ldc           #27
513: invokevirtual #25
516: iconst_0
517: invokevirtual #69
520: ldc           #24
522: invokevirtual #25
525: invokevirtual #28
528: iload         19
530: ifne          537
533: iconst_1
534: goto          538
537: iconst_0
538: invokestatic  #29
541: return
Exception table:
from    to  target type
164   179   182   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test194
Start line: 7173
End line: 0
Method source code: 
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        java.util.Date date13 = tarArchiveEntry1.getLastModifiedDate();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(date13);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #644
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: invokevirtual #122
98: astore        11
100: new           #22
103: dup
104: invokespecial #23
107: ldc           #24
109: invokevirtual #25
112: lload         5
114: invokevirtual #26
117: ldc           #27
119: invokevirtual #25
122: lconst_0
123: invokevirtual #26
126: ldc           #24
128: invokevirtual #25
131: invokevirtual #28
134: lload         5
136: lconst_0
137: lcmp
138: ifne          145
141: iconst_1
142: goto          146
145: iconst_0
146: invokestatic  #29
149: aload         7
151: invokestatic  #53
154: new           #22
157: dup
158: invokespecial #23
161: ldc           #24
163: invokevirtual #25
166: iload         8
168: invokevirtual #69
171: ldc           #27
173: invokevirtual #25
176: iconst_0
177: invokevirtual #69
180: ldc           #24
182: invokevirtual #25
185: invokevirtual #28
188: iload         8
190: ifne          197
193: iconst_1
194: goto          198
197: iconst_0
198: invokestatic  #29
201: new           #22
204: dup
205: invokespecial #23
208: ldc           #24
210: invokevirtual #25
213: lload         9
215: invokevirtual #26
218: ldc           #27
220: invokevirtual #25
223: lconst_0
224: invokevirtual #26
227: ldc           #24
229: invokevirtual #25
232: invokevirtual #28
235: lload         9
237: lconst_0
238: lcmp
239: ifne          246
242: iconst_1
243: goto          247
246: iconst_0
247: invokestatic  #29
250: aload         11
252: invokestatic  #53
255: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test195
Start line: 7195
End line: 0
Method source code: 
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        java.lang.String str12 = tarArchiveEntry1.getName();
        tarArchiveEntry1.setSize((long) 83);
        boolean boolean15 = tarArchiveEntry1.isFile();
        boolean boolean16 = tarArchiveEntry1.isLink();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.apache.commons.compress.archivers.ArchiveException: ustar\000" + "'", str12, "org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #645
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #276
92: astore        9
94: aload_1
95: ldc2_w        #646
98: invokevirtual #330
101: aload_1
102: invokevirtual #132
105: istore        10
107: aload_1
108: invokevirtual #394
111: istore        11
113: new           #22
116: dup
117: invokespecial #23
120: ldc           #24
122: invokevirtual #25
125: lload         5
127: invokevirtual #26
130: ldc           #27
132: invokevirtual #25
135: lconst_0
136: invokevirtual #26
139: ldc           #24
141: invokevirtual #25
144: invokevirtual #28
147: lload         5
149: lconst_0
150: lcmp
151: ifne          158
154: iconst_1
155: goto          159
158: iconst_0
159: invokestatic  #29
162: aload         7
164: invokestatic  #53
167: new           #22
170: dup
171: invokespecial #23
174: ldc           #24
176: invokevirtual #25
179: iload         8
181: invokevirtual #69
184: ldc           #27
186: invokevirtual #25
189: iconst_0
190: invokevirtual #69
193: ldc           #24
195: invokevirtual #25
198: invokevirtual #28
201: iload         8
203: ifne          210
206: iconst_1
207: goto          211
210: iconst_0
211: invokestatic  #29
214: new           #22
217: dup
218: invokespecial #23
221: ldc           #24
223: invokevirtual #25
226: aload         9
228: invokevirtual #25
231: ldc_w         #496
234: invokevirtual #25
237: invokevirtual #28
240: aload         9
242: ldc           #225
244: invokestatic  #154
247: new           #22
250: dup
251: invokespecial #23
254: ldc           #24
256: invokevirtual #25
259: iload         10
261: invokevirtual #69
264: ldc           #27
266: invokevirtual #25
269: iconst_1
270: invokevirtual #69
273: ldc           #24
275: invokevirtual #25
278: invokevirtual #28
281: iload         10
283: iconst_1
284: if_icmpne     291
287: iconst_1
288: goto          292
291: iconst_0
292: invokestatic  #29
295: new           #22
298: dup
299: invokespecial #23
302: ldc           #24
304: invokevirtual #25
307: iload         11
309: invokevirtual #69
312: ldc           #27
314: invokevirtual #25
317: iconst_0
318: invokevirtual #69
321: ldc           #24
323: invokevirtual #25
326: invokevirtual #28
329: iload         11
331: ifne          338
334: iconst_1
335: goto          339
338: iconst_0
339: invokestatic  #29
342: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test196
Start line: 7219
End line: 0
Method source code: 
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream11 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("zip", (byte) 50);
        try {
            arArchiveOutputStream11.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry14);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.ar.ArArchiveEntry");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #648
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #240
85: dup
86: aload_3
87: invokespecial #241
90: astore        9
92: new           #112
95: dup
96: ldc_w         #649
99: bipush        50
101: invokespecial #113
104: astore        10
106: aload         9
108: aload         10
110: invokevirtual #288
113: ldc_w         #452
116: invokestatic  #20
119: goto          124
122: astore        11
124: new           #22
127: dup
128: invokespecial #23
131: ldc           #24
133: invokevirtual #25
136: lload         4
138: invokevirtual #26
141: ldc           #27
143: invokevirtual #25
146: lconst_0
147: invokevirtual #26
150: ldc           #24
152: invokevirtual #25
155: invokevirtual #28
158: lload         4
160: lconst_0
161: lcmp
162: ifne          169
165: iconst_1
166: goto          170
169: iconst_0
170: invokestatic  #29
173: aload         6
175: invokestatic  #53
178: new           #22
181: dup
182: invokespecial #23
185: ldc           #24
187: invokevirtual #25
190: iload         7
192: invokevirtual #41
195: ldc           #27
197: invokevirtual #25
200: iconst_0
201: invokevirtual #41
204: ldc           #24
206: invokevirtual #25
209: invokevirtual #28
212: iload         7
214: ifne          221
217: iconst_1
218: goto          222
221: iconst_0
222: invokestatic  #29
225: return
Exception table:
from    to  target type
106   119   122   Class java/lang/ClassCastException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test197
Start line: 7245
End line: 0
Method source code: 
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        tarArchiveEntry1.setDevMajor((int) (short) 10);
        long long15 = tarArchiveEntry1.getRealSize();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("070707", (byte) 1);
        boolean boolean19 = tarArchiveEntry1.equals(tarArchiveEntry18);
        boolean boolean20 = tarArchiveEntry18.isGNUSparse();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #650
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: bipush        10
97: invokevirtual #287
100: aload_1
101: invokevirtual #327
104: lstore        11
106: new           #112
109: dup
110: ldc_w         #642
113: iconst_1
114: invokespecial #113
117: astore        13
119: aload_1
120: aload         13
122: invokevirtual #377
125: istore        14
127: aload         13
129: invokevirtual #422
132: istore        15
134: new           #22
137: dup
138: invokespecial #23
141: ldc           #24
143: invokevirtual #25
146: lload         5
148: invokevirtual #26
151: ldc           #27
153: invokevirtual #25
156: lconst_0
157: invokevirtual #26
160: ldc           #24
162: invokevirtual #25
165: invokevirtual #28
168: lload         5
170: lconst_0
171: lcmp
172: ifne          179
175: iconst_1
176: goto          180
179: iconst_0
180: invokestatic  #29
183: aload         7
185: invokestatic  #53
188: new           #22
191: dup
192: invokespecial #23
195: ldc           #24
197: invokevirtual #25
200: iload         8
202: invokevirtual #69
205: ldc           #27
207: invokevirtual #25
210: iconst_0
211: invokevirtual #69
214: ldc           #24
216: invokevirtual #25
219: invokevirtual #28
222: iload         8
224: ifne          231
227: iconst_1
228: goto          232
231: iconst_0
232: invokestatic  #29
235: new           #22
238: dup
239: invokespecial #23
242: ldc           #24
244: invokevirtual #25
247: lload         9
249: invokevirtual #26
252: ldc           #27
254: invokevirtual #25
257: lconst_0
258: invokevirtual #26
261: ldc           #24
263: invokevirtual #25
266: invokevirtual #28
269: lload         9
271: lconst_0
272: lcmp
273: ifne          280
276: iconst_1
277: goto          281
280: iconst_0
281: invokestatic  #29
284: new           #22
287: dup
288: invokespecial #23
291: ldc           #24
293: invokevirtual #25
296: lload         11
298: invokevirtual #26
301: ldc           #27
303: invokevirtual #25
306: lconst_0
307: invokevirtual #26
310: ldc           #24
312: invokevirtual #25
315: invokevirtual #28
318: lload         11
320: lconst_0
321: lcmp
322: ifne          329
325: iconst_1
326: goto          330
329: iconst_0
330: invokestatic  #29
333: new           #22
336: dup
337: invokespecial #23
340: ldc           #24
342: invokevirtual #25
345: iload         14
347: invokevirtual #69
350: ldc           #27
352: invokevirtual #25
355: iconst_0
356: invokevirtual #69
359: ldc           #24
361: invokevirtual #25
364: invokevirtual #28
367: iload         14
369: ifne          376
372: iconst_1
373: goto          377
376: iconst_0
377: invokestatic  #29
380: new           #22
383: dup
384: invokespecial #23
387: ldc           #24
389: invokevirtual #25
392: iload         15
394: invokevirtual #69
397: ldc           #27
399: invokevirtual #25
402: iconst_0
403: invokevirtual #69
406: ldc           #24
408: invokevirtual #25
411: invokevirtual #28
414: iload         15
416: ifne          423
419: iconst_1
420: goto          424
423: iconst_0
424: invokestatic  #29
427: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test198
Start line: 7272
End line: 0
Method source code: 
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream20, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream23 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream20);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy24 = null;
        zipArchiveOutputStream23.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy24);
        boolean boolean26 = zipArchiveOutputStream23.isSeekable();
        zipArchiveOutputStream23.setLevel((int) (short) 2);
        java.lang.String str29 = zipArchiveOutputStream23.getEncoding();
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode30 = null;
        zipArchiveOutputStream23.setUseZip64(zip64Mode30);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream32 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream23);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream35 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream23, 64, 64);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream38 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream35, (short) (byte) 1, (int) (byte) 50);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream39 = archiveStreamFactory0.createArchiveOutputStream("-    8192 jar", (java.io.OutputStream) cpioArchiveOutputStream38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: -    8192 jar not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "UTF8" + "'", str29, "UTF8");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #651
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aconst_null
137: astore        16
139: new           #43
142: dup
143: aload         16
145: ldc           #44
147: invokespecial #45
150: astore        17
152: new           #182
155: dup
156: aload         16
158: invokespecial #183
161: astore        18
163: aconst_null
164: astore        19
166: aload         18
168: aload         19
170: invokevirtual #184
173: aload         18
175: invokevirtual #185
178: istore        20
180: aload         18
182: iconst_2
183: invokevirtual #291
186: aload         18
188: invokevirtual #310
191: astore        21
193: aconst_null
194: astore        22
196: aload         18
198: aload         22
200: invokevirtual #224
203: new           #240
206: dup
207: aload         18
209: invokespecial #241
212: astore        23
214: new           #43
217: dup
218: aload         18
220: bipush        64
222: bipush        64
224: invokespecial #346
227: astore        24
229: new           #143
232: dup
233: aload         24
235: iconst_1
236: bipush        50
238: invokespecial #551
241: astore        25
243: aload_1
244: ldc_w         #652
247: aload         25
249: invokevirtual #49
252: astore        26
254: ldc_w         #653
257: invokestatic  #20
260: goto          265
263: astore        26
265: new           #22
268: dup
269: invokespecial #23
272: ldc           #24
274: invokevirtual #25
277: lload         4
279: invokevirtual #26
282: ldc           #27
284: invokevirtual #25
287: lconst_0
288: invokevirtual #26
291: ldc           #24
293: invokevirtual #25
296: invokevirtual #28
299: lload         4
301: lconst_0
302: lcmp
303: ifne          310
306: iconst_1
307: goto          311
310: iconst_0
311: invokestatic  #29
314: aload         6
316: invokestatic  #53
319: new           #22
322: dup
323: invokespecial #23
326: ldc           #24
328: invokevirtual #25
331: lload         9
333: invokevirtual #26
336: ldc           #27
338: invokevirtual #25
341: lconst_0
342: invokevirtual #26
345: ldc           #24
347: invokevirtual #25
350: invokevirtual #28
353: lload         9
355: lconst_0
356: lcmp
357: ifne          364
360: iconst_1
361: goto          365
364: iconst_0
365: invokestatic  #29
368: new           #22
371: dup
372: invokespecial #23
375: ldc           #24
377: invokevirtual #25
380: lload         11
382: invokevirtual #26
385: ldc           #27
387: invokevirtual #25
390: lconst_0
391: invokevirtual #26
394: ldc           #24
396: invokevirtual #25
399: invokevirtual #28
402: lload         11
404: lconst_0
405: lcmp
406: ifne          413
409: iconst_1
410: goto          414
413: iconst_0
414: invokestatic  #29
417: aload         15
419: invokestatic  #53
422: new           #22
425: dup
426: invokespecial #23
429: ldc           #24
431: invokevirtual #25
434: iload         20
436: invokevirtual #69
439: ldc           #27
441: invokevirtual #25
444: iconst_0
445: invokevirtual #69
448: ldc           #24
450: invokevirtual #25
453: invokevirtual #28
456: iload         20
458: ifne          465
461: iconst_1
462: goto          466
465: iconst_0
466: invokestatic  #29
469: new           #22
472: dup
473: invokespecial #23
476: ldc           #24
478: invokevirtual #25
481: aload         21
483: invokevirtual #25
486: ldc_w         #317
489: invokevirtual #25
492: invokevirtual #28
495: aload         21
497: ldc           #85
499: invokestatic  #154
502: return
Exception table:
from    to  target type
243   260   263   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test199
Start line: 7320
End line: 0
Method source code: 
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory10 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream12 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream13 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream12);
        long long14 = jarArchiveInputStream13.getBytesRead();
        long long15 = jarArchiveInputStream13.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream16 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream13);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream17 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream13);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry18 = tarArchiveInputStream17.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry19 = tarArchiveInputStream17.getNextEntry();
        tarArchiveInputStream17.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream17, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory10.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream24);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream26 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream24);
        long long28 = zipArchiveInputStream24.skip((long) (short) 8);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream29 = archiveStreamFactory0.createArchiveInputStream("-       0 jar", (java.io.InputStream) zipArchiveInputStream24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: -       0 jar not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNull(archiveEntry18);
        org.junit.Assert.assertNull(archiveEntry19);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #654
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #8
69: dup
70: invokespecial #9
73: astore        7
75: aconst_null
76: astore        8
78: new           #10
81: dup
82: aload         8
84: invokespecial #11
87: astore        9
89: aload         9
91: invokevirtual #12
94: lstore        10
96: aload         9
98: invokevirtual #12
101: lstore        12
103: new           #13
106: dup
107: aload         9
109: invokespecial #14
112: astore        14
114: new           #31
117: dup
118: aload         9
120: invokespecial #32
123: astore        15
125: aload         15
127: invokevirtual #199
130: astore        16
132: aload         15
134: invokevirtual #199
137: astore        17
139: aload         15
141: ldc2_w        #200
144: invokevirtual #202
147: new           #15
150: dup
151: aload         15
153: ldc           #164
155: iconst_1
156: invokespecial #203
159: astore        18
161: aload         7
163: ldc           #44
165: aload         18
167: invokevirtual #38
170: astore        19
172: new           #33
175: dup
176: aload         18
178: invokespecial #34
181: astore        20
183: aload         18
185: ldc2_w        #542
188: invokevirtual #655
191: lstore        21
193: aload_1
194: ldc           #90
196: aload         18
198: invokevirtual #38
201: astore        23
203: ldc_w         #656
206: invokestatic  #20
209: goto          214
212: astore        23
214: new           #22
217: dup
218: invokespecial #23
221: ldc           #24
223: invokevirtual #25
226: lload         4
228: invokevirtual #26
231: ldc           #27
233: invokevirtual #25
236: lconst_0
237: invokevirtual #26
240: ldc           #24
242: invokevirtual #25
245: invokevirtual #28
248: lload         4
250: lconst_0
251: lcmp
252: ifne          259
255: iconst_1
256: goto          260
259: iconst_0
260: invokestatic  #29
263: aload         6
265: invokestatic  #53
268: new           #22
271: dup
272: invokespecial #23
275: ldc           #24
277: invokevirtual #25
280: lload         10
282: invokevirtual #26
285: ldc           #27
287: invokevirtual #25
290: lconst_0
291: invokevirtual #26
294: ldc           #24
296: invokevirtual #25
299: invokevirtual #28
302: lload         10
304: lconst_0
305: lcmp
306: ifne          313
309: iconst_1
310: goto          314
313: iconst_0
314: invokestatic  #29
317: new           #22
320: dup
321: invokespecial #23
324: ldc           #24
326: invokevirtual #25
329: lload         12
331: invokevirtual #26
334: ldc           #27
336: invokevirtual #25
339: lconst_0
340: invokevirtual #26
343: ldc           #24
345: invokevirtual #25
348: invokevirtual #28
351: lload         12
353: lconst_0
354: lcmp
355: ifne          362
358: iconst_1
359: goto          363
362: iconst_0
363: invokestatic  #29
366: aload         16
368: invokestatic  #168
371: aload         17
373: invokestatic  #168
376: aload         19
378: invokestatic  #53
381: new           #22
384: dup
385: invokespecial #23
388: ldc           #24
390: invokevirtual #25
393: lload         21
395: invokevirtual #26
398: ldc           #27
400: invokevirtual #25
403: lconst_0
404: invokevirtual #26
407: ldc           #24
409: invokevirtual #25
412: invokevirtual #28
415: lload         21
417: lconst_0
418: lcmp
419: ifne          426
422: iconst_1
423: goto          427
426: iconst_0
427: invokestatic  #29
430: return
Exception table:
from    to  target type
193   209   212   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test200
Start line: 7361
End line: 0
Method source code: 
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        byte[] byteArray13 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes("-       0 jar");
        java.io.InputStream inputStream14 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream15 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream14);
        long long16 = jarArchiveInputStream15.getBytesRead();
        byte[] byteArray21 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean22 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray21);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong23 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray21);
        byte[] byteArray24 = zipLong23.getBytes();
        boolean boolean26 = org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches(byteArray24, (int) (byte) 1);
        int int29 = jarArchiveInputStream15.read(byteArray24, (int) (byte) 55, (-1));
        byte[] byteArray31 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes("././@LongLink");
        int int34 = jarArchiveInputStream15.read(byteArray31, 0, 40960);
        boolean boolean36 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray31, false);
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 52, (byte) -1, (byte) 88 };
        org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray41);
        long long43 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray41);
        boolean boolean44 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray31, byteArray41);
        try {
            jarArchiveOutputStream11.write(byteArray41, 0, (int) (byte) 48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[45, 32, 32, 32, 32, 32, 32, 32, 48, 32, 106, 97, 114]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[46, 47, 46, 47, 64, 76, 111, 110, 103, 76, 105, 110, 107]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[1, 52, -1, 88]");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 396L + "'", long43 == 396L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #657
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: ldc           #90
94: invokestatic  #594
97: astore        10
99: aconst_null
100: astore        11
102: new           #10
105: dup
106: aload         11
108: invokespecial #11
111: astore        12
113: aload         12
115: invokevirtual #12
118: lstore        13
120: iconst_4
121: newarray       byte
123: dup
124: iconst_0
125: bipush        54
127: bastore
128: dup
129: iconst_1
130: bipush        53
132: bastore
133: dup
134: iconst_2
135: iconst_1
136: bastore
137: dup
138: iconst_3
139: bipush        10
141: bastore
142: astore        15
144: aload         15
146: invokestatic  #192
149: istore        16
151: new           #73
154: dup
155: aload         15
157: invokespecial #406
160: astore        17
162: aload         17
164: invokevirtual #75
167: astore        18
169: aload         18
171: iconst_1
172: invokestatic  #149
175: istore        19
177: aload         12
179: aload         18
181: bipush        55
183: iconst_m1
184: invokevirtual #76
187: istore        20
189: ldc_w         #320
192: invokestatic  #594
195: astore        21
197: aload         12
199: aload         21
201: iconst_0
202: ldc           #109
204: invokevirtual #76
207: istore        22
209: aload         10
211: aload         21
213: iconst_0
214: invokestatic  #177
217: istore        23
219: iconst_4
220: newarray       byte
222: dup
223: iconst_0
224: iconst_1
225: bastore
226: dup
227: iconst_1
228: bipush        52
230: bastore
231: dup
232: iconst_2
233: iconst_m1
234: bastore
235: dup
236: iconst_3
237: bipush        88
239: bastore
240: astore        24
242: new           #73
245: dup
246: aload         24
248: invokespecial #406
251: astore        25
253: aload         24
255: invokestatic  #260
258: lstore        26
260: aload         21
262: aload         24
264: invokestatic  #407
267: istore        28
269: aload         9
271: aload         24
273: iconst_0
274: bipush        48
276: invokevirtual #622
279: ldc           #51
281: invokestatic  #20
284: goto          289
287: astore        29
289: new           #22
292: dup
293: invokespecial #23
296: ldc           #24
298: invokevirtual #25
301: lload         4
303: invokevirtual #26
306: ldc           #27
308: invokevirtual #25
311: lconst_0
312: invokevirtual #26
315: ldc           #24
317: invokevirtual #25
320: invokevirtual #28
323: lload         4
325: lconst_0
326: lcmp
327: ifne          334
330: iconst_1
331: goto          335
334: iconst_0
335: invokestatic  #29
338: aload         6
340: invokestatic  #53
343: new           #22
346: dup
347: invokespecial #23
350: ldc           #24
352: invokevirtual #25
355: iload         7
357: invokevirtual #41
360: ldc           #27
362: invokevirtual #25
365: iconst_0
366: invokevirtual #41
369: ldc           #24
371: invokevirtual #25
374: invokevirtual #28
377: iload         7
379: ifne          386
382: iconst_1
383: goto          387
386: iconst_0
387: invokestatic  #29
390: aload         10
392: invokestatic  #53
395: aload         10
397: invokestatic  #66
400: ldc_w         #658
403: invokestatic  #68
406: new           #22
409: dup
410: invokespecial #23
413: ldc           #24
415: invokevirtual #25
418: lload         13
420: invokevirtual #26
423: ldc           #27
425: invokevirtual #25
428: lconst_0
429: invokevirtual #26
432: ldc           #24
434: invokevirtual #25
437: invokevirtual #28
440: lload         13
442: lconst_0
443: lcmp
444: ifne          451
447: iconst_1
448: goto          452
451: iconst_0
452: invokestatic  #29
455: aload         15
457: invokestatic  #53
460: aload         15
462: invokestatic  #66
465: ldc_w         #409
468: invokestatic  #68
471: new           #22
474: dup
475: invokespecial #23
478: ldc           #24
480: invokevirtual #25
483: iload         16
485: invokevirtual #69
488: ldc           #27
490: invokevirtual #25
493: iconst_0
494: invokevirtual #69
497: ldc           #24
499: invokevirtual #25
502: invokevirtual #28
505: iload         16
507: ifne          514
510: iconst_1
511: goto          515
514: iconst_0
515: invokestatic  #29
518: aload         18
520: invokestatic  #53
523: aload         18
525: invokestatic  #66
528: ldc_w         #409
531: invokestatic  #68
534: new           #22
537: dup
538: invokespecial #23
541: ldc           #24
543: invokevirtual #25
546: iload         19
548: invokevirtual #69
551: ldc           #27
553: invokevirtual #25
556: iconst_0
557: invokevirtual #69
560: ldc           #24
562: invokevirtual #25
565: invokevirtual #28
568: iload         19
570: ifne          577
573: iconst_1
574: goto          578
577: iconst_0
578: invokestatic  #29
581: new           #22
584: dup
585: invokespecial #23
588: ldc           #24
590: invokevirtual #25
593: iload         20
595: invokevirtual #41
598: ldc           #27
600: invokevirtual #25
603: iconst_m1
604: invokevirtual #41
607: ldc           #24
609: invokevirtual #25
612: invokevirtual #28
615: iload         20
617: iconst_m1
618: if_icmpne     625
621: iconst_1
622: goto          626
625: iconst_0
626: invokestatic  #29
629: aload         21
631: invokestatic  #53
634: aload         21
636: invokestatic  #66
639: ldc_w         #659
642: invokestatic  #68
645: new           #22
648: dup
649: invokespecial #23
652: ldc           #24
654: invokevirtual #25
657: iload         22
659: invokevirtual #41
662: ldc           #27
664: invokevirtual #25
667: iconst_m1
668: invokevirtual #41
671: ldc           #24
673: invokevirtual #25
676: invokevirtual #28
679: iload         22
681: iconst_m1
682: if_icmpne     689
685: iconst_1
686: goto          690
689: iconst_0
690: invokestatic  #29
693: new           #22
696: dup
697: invokespecial #23
700: ldc           #24
702: invokevirtual #25
705: iload         23
707: invokevirtual #69
710: ldc           #27
712: invokevirtual #25
715: iconst_0
716: invokevirtual #69
719: ldc           #24
721: invokevirtual #25
724: invokevirtual #28
727: iload         23
729: ifne          736
732: iconst_1
733: goto          737
736: iconst_0
737: invokestatic  #29
740: aload         24
742: invokestatic  #53
745: aload         24
747: invokestatic  #66
750: ldc_w         #660
753: invokestatic  #68
756: new           #22
759: dup
760: invokespecial #23
763: ldc           #24
765: invokevirtual #25
768: lload         26
770: invokevirtual #26
773: ldc           #27
775: invokevirtual #25
778: ldc2_w        #661
781: invokevirtual #26
784: ldc           #24
786: invokevirtual #25
789: invokevirtual #28
792: lload         26
794: ldc2_w        #661
797: lcmp
798: ifne          805
801: iconst_1
802: goto          806
805: iconst_0
806: invokestatic  #29
809: new           #22
812: dup
813: invokespecial #23
816: ldc           #24
818: invokevirtual #25
821: iload         28
823: invokevirtual #69
826: ldc           #27
828: invokevirtual #25
831: iconst_0
832: invokevirtual #69
835: ldc           #24
837: invokevirtual #25
840: invokevirtual #28
843: iload         28
845: ifne          852
848: iconst_1
849: goto          853
852: iconst_0
853: invokestatic  #29
856: return
Exception table:
from    to  target type
269   284   287   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test201
Start line: 7421
End line: 0
Method source code: 
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        arArchiveOutputStream10.flush();
        arArchiveOutputStream10.setLongFileMode(32);
        arArchiveOutputStream10.setLongFileMode((int) (short) 10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #663
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: invokevirtual #528
100: aload         9
102: bipush        32
104: invokevirtual #399
107: aload         9
109: bipush        10
111: invokevirtual #399
114: new           #22
117: dup
118: invokespecial #23
121: ldc           #24
123: invokevirtual #25
126: lload         4
128: invokevirtual #26
131: ldc           #27
133: invokevirtual #25
136: lconst_0
137: invokevirtual #26
140: ldc           #24
142: invokevirtual #25
145: invokevirtual #28
148: lload         4
150: lconst_0
151: lcmp
152: ifne          159
155: iconst_1
156: goto          160
159: iconst_0
160: invokestatic  #29
163: aload         6
165: invokestatic  #53
168: new           #22
171: dup
172: invokespecial #23
175: ldc           #24
177: invokevirtual #25
180: lload         7
182: invokevirtual #26
185: ldc           #27
187: invokevirtual #25
190: lconst_0
191: invokevirtual #26
194: ldc           #24
196: invokevirtual #25
199: invokevirtual #28
202: lload         7
204: lconst_0
205: lcmp
206: ifne          213
209: iconst_1
210: goto          214
213: iconst_0
214: invokestatic  #29
217: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test202
Start line: 7443
End line: 0
Method source code: 
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream20 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16, 0, 128, "x5S");
        int int21 = cpioArchiveInputStream16.available();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream22 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #664
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: new           #33
125: dup
126: aload         12
128: invokespecial #34
131: astore        14
133: new           #31
136: dup
137: aload         14
139: iconst_0
140: sipush        128
143: ldc           #153
145: invokespecial #665
148: astore        15
150: aload         14
152: invokevirtual #35
155: istore        16
157: new           #13
160: dup
161: aload         14
163: invokespecial #14
166: astore        17
168: new           #22
171: dup
172: invokespecial #23
175: ldc           #24
177: invokevirtual #25
180: lload         4
182: invokevirtual #26
185: ldc           #27
187: invokevirtual #25
190: lconst_0
191: invokevirtual #26
194: ldc           #24
196: invokevirtual #25
199: invokevirtual #28
202: lload         4
204: lconst_0
205: lcmp
206: ifne          213
209: iconst_1
210: goto          214
213: iconst_0
214: invokestatic  #29
217: new           #22
220: dup
221: invokespecial #23
224: ldc           #24
226: invokevirtual #25
229: lload         6
231: invokevirtual #26
234: ldc           #27
236: invokevirtual #25
239: lconst_0
240: invokevirtual #26
243: ldc           #24
245: invokevirtual #25
248: invokevirtual #28
251: lload         6
253: lconst_0
254: lcmp
255: ifne          262
258: iconst_1
259: goto          263
262: iconst_0
263: invokestatic  #29
266: aload         10
268: invokestatic  #168
271: aload         11
273: invokestatic  #168
276: aload         13
278: invokestatic  #53
281: new           #22
284: dup
285: invokespecial #23
288: ldc           #24
290: invokevirtual #25
293: iload         16
295: invokevirtual #41
298: ldc           #27
300: invokevirtual #25
303: iconst_1
304: invokevirtual #41
307: ldc           #24
309: invokevirtual #25
312: invokevirtual #28
315: iload         16
317: iconst_1
318: if_icmpne     325
321: iconst_1
322: goto          326
325: iconst_0
326: invokestatic  #29
329: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test203
Start line: 7471
End line: 0
Method source code: 
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream18 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) archiveInputStream15, (int) '#', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: null");
        } catch (java.lang.ArithmeticException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #666
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: new           #31
125: dup
126: aload         13
128: bipush        35
130: iconst_0
131: invokespecial #108
134: astore        14
136: ldc_w         #667
139: invokestatic  #20
142: goto          147
145: astore        14
147: new           #22
150: dup
151: invokespecial #23
154: ldc           #24
156: invokevirtual #25
159: lload         4
161: invokevirtual #26
164: ldc           #27
166: invokevirtual #25
169: lconst_0
170: invokevirtual #26
173: ldc           #24
175: invokevirtual #25
178: invokevirtual #28
181: lload         4
183: lconst_0
184: lcmp
185: ifne          192
188: iconst_1
189: goto          193
192: iconst_0
193: invokestatic  #29
196: new           #22
199: dup
200: invokespecial #23
203: ldc           #24
205: invokevirtual #25
208: lload         6
210: invokevirtual #26
213: ldc           #27
215: invokevirtual #25
218: lconst_0
219: invokevirtual #26
222: ldc           #24
224: invokevirtual #25
227: invokevirtual #28
230: lload         6
232: lconst_0
233: lcmp
234: ifne          241
237: iconst_1
238: goto          242
241: iconst_0
242: invokestatic  #29
245: aload         10
247: invokestatic  #168
250: aload         11
252: invokestatic  #168
255: aload         13
257: invokestatic  #53
260: return
Exception table:
from    to  target type
122   142   145   Class java/lang/ArithmeticException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test204
Start line: 7501
End line: 0
Method source code: 
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        java.lang.String str20 = zipArchiveOutputStream13.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21);
        java.io.InputStream inputStream24 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24);
        long long26 = jarArchiveInputStream25.getBytesRead();
        long long27 = jarArchiveInputStream25.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25);
        arArchiveInputStream28.close();
        arArchiveInputStream28.pushedBackBytes((-1L));
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream28);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream33);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream33, "always", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream38, (int) (short) 8);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray43 = zipLong42.getBytes();
        long long44 = zipLong42.getValue();
        java.io.InputStream inputStream45 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45);
        long long47 = jarArchiveInputStream46.getBytesRead();
        long long48 = jarArchiveInputStream46.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46);
        boolean boolean51 = zipLong42.equals((java.lang.Object) jarArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46, 1000, 1);
        byte[] byteArray59 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean60 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray59);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong61 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray59);
        boolean boolean63 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray59, (int) (byte) 50);
        int int66 = tarArchiveInputStream54.read(byteArray59, (int) (byte) -1, 24576);
        int int69 = tarArchiveInputStream40.read(byteArray59, 504, (int) 'a');
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream70 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) tarArchiveInputStream40);
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory72 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream74 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream76 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream74, "jar");
        tarArchiveOutputStream76.count(0L);
        long long79 = tarArchiveOutputStream76.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream80 = archiveStreamFactory72.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream76);
        int int81 = tarArchiveOutputStream76.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream82 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream76);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream83 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream76);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream84 = archiveStreamFactory0.createArchiveOutputStream("cpio", (java.io.OutputStream) tarArchiveOutputStream76);
        java.io.InputStream inputStream86 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream87 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream86);
        long long88 = jarArchiveInputStream87.getBytesRead();
        long long89 = jarArchiveInputStream87.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream90 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream87);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream91 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream87);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry92 = tarArchiveInputStream91.getNextEntry();
        long long93 = tarArchiveInputStream91.getBytesRead();
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream94 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream91);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream95 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream94);
        long long97 = cpioArchiveInputStream95.skip((long) 120);
        cpioArchiveInputStream95.close();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream99 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.archivers.dump.DumpArchiveException: 070702", (java.io.InputStream) cpioArchiveInputStream95);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.dump.DumpArchiveException: 070702 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(archiveInputStream70);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(archiveOutputStream84);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNull(archiveEntry92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 0L + "'", long97 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #669
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: aload         9
125: invokevirtual #310
128: astore        13
130: new           #143
133: dup
134: aload         9
136: invokespecial #144
139: astore        14
141: aload_1
142: ldc           #164
144: aload         14
146: invokevirtual #49
149: astore        15
151: aconst_null
152: astore        16
154: new           #10
157: dup
158: aload         16
160: invokespecial #11
163: astore        17
165: aload         17
167: invokevirtual #12
170: lstore        18
172: aload         17
174: invokevirtual #12
177: lstore        20
179: new           #13
182: dup
183: aload         17
185: invokespecial #14
188: astore        22
190: aload         22
192: invokevirtual #140
195: aload         22
197: ldc2_w        #297
200: invokevirtual #299
203: new           #33
206: dup
207: aload         22
209: invokespecial #34
212: astore        23
214: new           #15
217: dup
218: aload         22
220: invokespecial #300
223: astore        24
225: new           #10
228: dup
229: aload         24
231: invokespecial #11
234: astore        25
236: new           #15
239: dup
240: aload         24
242: ldc           #79
244: iconst_0
245: iconst_0
246: invokespecial #17
249: astore        26
251: new           #31
254: dup
255: aload         26
257: bipush        8
259: invokespecial #141
262: astore        27
264: new           #73
267: dup
268: lconst_0
269: invokespecial #74
272: astore        28
274: aload         28
276: invokevirtual #75
279: astore        29
281: aload         28
283: invokevirtual #336
286: lstore        30
288: aconst_null
289: astore        32
291: new           #10
294: dup
295: aload         32
297: invokespecial #11
300: astore        33
302: aload         33
304: invokevirtual #12
307: lstore        34
309: aload         33
311: invokevirtual #12
314: lstore        36
316: new           #13
319: dup
320: aload         33
322: invokespecial #14
325: astore        38
327: new           #31
330: dup
331: aload         33
333: invokespecial #32
336: astore        39
338: aload         28
340: aload         33
342: invokevirtual #337
345: istore        40
347: new           #31
350: dup
351: aload         33
353: sipush        1000
356: iconst_1
357: invokespecial #108
360: astore        41
362: iconst_4
363: newarray       byte
365: dup
366: iconst_0
367: bipush        54
369: bastore
370: dup
371: iconst_1
372: bipush        53
374: bastore
375: dup
376: iconst_2
377: iconst_1
378: bastore
379: dup
380: iconst_3
381: bipush        10
383: bastore
384: astore        42
386: aload         42
388: invokestatic  #192
391: istore        43
393: new           #73
396: dup
397: aload         42
399: invokespecial #406
402: astore        44
404: aload         42
406: bipush        50
408: invokestatic  #523
411: istore        45
413: aload         41
415: aload         42
417: iconst_m1
418: sipush        24576
421: invokevirtual #174
424: istore        46
426: aload         27
428: aload         42
430: sipush        504
433: bipush        97
435: invokevirtual #174
438: istore        47
440: aload_1
441: ldc           #164
443: aload         27
445: invokevirtual #38
448: astore        48
450: new           #8
453: dup
454: invokespecial #9
457: astore        49
459: aconst_null
460: astore        50
462: new           #43
465: dup
466: aload         50
468: ldc           #44
470: invokespecial #45
473: astore        51
475: aload         51
477: lconst_0
478: invokevirtual #46
481: aload         51
483: invokevirtual #47
486: lstore        52
488: aload         49
490: ldc           #48
492: aload         51
494: invokevirtual #49
497: astore        54
499: aload         51
501: invokevirtual #60
504: istore        55
506: new           #43
509: dup
510: aload         51
512: invokespecial #95
515: astore        56
517: new           #240
520: dup
521: aload         51
523: invokespecial #241
526: astore        57
528: aload_1
529: ldc_w         #273
532: aload         51
534: invokevirtual #49
537: astore        58
539: aconst_null
540: astore        59
542: new           #10
545: dup
546: aload         59
548: invokespecial #11
551: astore        60
553: aload         60
555: invokevirtual #12
558: lstore        61
560: aload         60
562: invokevirtual #12
565: lstore        63
567: new           #13
570: dup
571: aload         60
573: invokespecial #14
576: astore        65
578: new           #31
581: dup
582: aload         60
584: invokespecial #32
587: astore        66
589: aload         66
591: invokevirtual #199
594: astore        67
596: aload         66
598: invokevirtual #573
601: lstore        68
603: new           #15
606: dup
607: aload         66
609: invokespecial #300
612: astore        70
614: new           #33
617: dup
618: aload         70
620: invokespecial #34
623: astore        71
625: aload         71
627: ldc2_w        #670
630: invokevirtual #162
633: lstore        72
635: aload         71
637: invokevirtual #127
640: aload_1
641: ldc_w         #672
644: aload         71
646: invokevirtual #38
649: astore        74
651: ldc_w         #673
654: invokestatic  #20
657: goto          662
660: astore        74
662: new           #22
665: dup
666: invokespecial #23
669: ldc           #24
671: invokevirtual #25
674: lload         4
676: invokevirtual #26
679: ldc           #27
681: invokevirtual #25
684: lconst_0
685: invokevirtual #26
688: ldc           #24
690: invokevirtual #25
693: invokevirtual #28
696: lload         4
698: lconst_0
699: lcmp
700: ifne          707
703: iconst_1
704: goto          708
707: iconst_0
708: invokestatic  #29
711: aload         6
713: invokestatic  #53
716: new           #22
719: dup
720: invokespecial #23
723: ldc           #24
725: invokevirtual #25
728: iload         11
730: invokevirtual #69
733: ldc           #27
735: invokevirtual #25
738: iconst_0
739: invokevirtual #69
742: ldc           #24
744: invokevirtual #25
747: invokevirtual #28
750: iload         11
752: ifne          759
755: iconst_1
756: goto          760
759: iconst_0
760: invokestatic  #29
763: new           #22
766: dup
767: invokespecial #23
770: ldc           #24
772: invokevirtual #25
775: iload         12
777: invokevirtual #69
780: ldc           #27
782: invokevirtual #25
785: iconst_0
786: invokevirtual #69
789: ldc           #24
791: invokevirtual #25
794: invokevirtual #28
797: iload         12
799: ifne          806
802: iconst_1
803: goto          807
806: iconst_0
807: invokestatic  #29
810: new           #22
813: dup
814: invokespecial #23
817: ldc           #24
819: invokevirtual #25
822: aload         13
824: invokevirtual #25
827: ldc_w         #317
830: invokevirtual #25
833: invokevirtual #28
836: aload         13
838: ldc           #85
840: invokestatic  #154
843: aload         15
845: invokestatic  #53
848: new           #22
851: dup
852: invokespecial #23
855: ldc           #24
857: invokevirtual #25
860: lload         18
862: invokevirtual #26
865: ldc           #27
867: invokevirtual #25
870: lconst_0
871: invokevirtual #26
874: ldc           #24
876: invokevirtual #25
879: invokevirtual #28
882: lload         18
884: lconst_0
885: lcmp
886: ifne          893
889: iconst_1
890: goto          894
893: iconst_0
894: invokestatic  #29
897: new           #22
900: dup
901: invokespecial #23
904: ldc           #24
906: invokevirtual #25
909: lload         20
911: invokevirtual #26
914: ldc           #27
916: invokevirtual #25
919: lconst_0
920: invokevirtual #26
923: ldc           #24
925: invokevirtual #25
928: invokevirtual #28
931: lload         20
933: lconst_0
934: lcmp
935: ifne          942
938: iconst_1
939: goto          943
942: iconst_0
943: invokestatic  #29
946: aload         29
948: invokestatic  #53
951: aload         29
953: invokestatic  #66
956: ldc           #77
958: invokestatic  #68
961: new           #22
964: dup
965: invokespecial #23
968: ldc           #24
970: invokevirtual #25
973: lload         30
975: invokevirtual #26
978: ldc           #27
980: invokevirtual #25
983: lconst_0
984: invokevirtual #26
987: ldc           #24
989: invokevirtual #25
992: invokevirtual #28
995: lload         30
997: lconst_0
998: lcmp
999: ifne          1006
1002: iconst_1
1003: goto          1007
1006: iconst_0
1007: invokestatic  #29
1010: new           #22
1013: dup
1014: invokespecial #23
1017: ldc           #24
1019: invokevirtual #25
1022: lload         34
1024: invokevirtual #26
1027: ldc           #27
1029: invokevirtual #25
1032: lconst_0
1033: invokevirtual #26
1036: ldc           #24
1038: invokevirtual #25
1041: invokevirtual #28
1044: lload         34
1046: lconst_0
1047: lcmp
1048: ifne          1055
1051: iconst_1
1052: goto          1056
1055: iconst_0
1056: invokestatic  #29
1059: new           #22
1062: dup
1063: invokespecial #23
1066: ldc           #24
1068: invokevirtual #25
1071: lload         36
1073: invokevirtual #26
1076: ldc           #27
1078: invokevirtual #25
1081: lconst_0
1082: invokevirtual #26
1085: ldc           #24
1087: invokevirtual #25
1090: invokevirtual #28
1093: lload         36
1095: lconst_0
1096: lcmp
1097: ifne          1104
1100: iconst_1
1101: goto          1105
1104: iconst_0
1105: invokestatic  #29
1108: new           #22
1111: dup
1112: invokespecial #23
1115: ldc           #24
1117: invokevirtual #25
1120: iload         40
1122: invokevirtual #69
1125: ldc           #27
1127: invokevirtual #25
1130: iconst_0
1131: invokevirtual #69
1134: ldc           #24
1136: invokevirtual #25
1139: invokevirtual #28
1142: iload         40
1144: ifne          1151
1147: iconst_1
1148: goto          1152
1151: iconst_0
1152: invokestatic  #29
1155: aload         42
1157: invokestatic  #53
1160: aload         42
1162: invokestatic  #66
1165: ldc_w         #409
1168: invokestatic  #68
1171: new           #22
1174: dup
1175: invokespecial #23
1178: ldc           #24
1180: invokevirtual #25
1183: iload         43
1185: invokevirtual #69
1188: ldc           #27
1190: invokevirtual #25
1193: iconst_0
1194: invokevirtual #69
1197: ldc           #24
1199: invokevirtual #25
1202: invokevirtual #28
1205: iload         43
1207: ifne          1214
1210: iconst_1
1211: goto          1215
1214: iconst_0
1215: invokestatic  #29
1218: new           #22
1221: dup
1222: invokespecial #23
1225: ldc           #24
1227: invokevirtual #25
1230: iload         45
1232: invokevirtual #69
1235: ldc           #27
1237: invokevirtual #25
1240: iconst_0
1241: invokevirtual #69
1244: ldc           #24
1246: invokevirtual #25
1249: invokevirtual #28
1252: iload         45
1254: ifne          1261
1257: iconst_1
1258: goto          1262
1261: iconst_0
1262: invokestatic  #29
1265: new           #22
1268: dup
1269: invokespecial #23
1272: ldc           #24
1274: invokevirtual #25
1277: iload         46
1279: invokevirtual #41
1282: ldc           #27
1284: invokevirtual #25
1287: iconst_m1
1288: invokevirtual #41
1291: ldc           #24
1293: invokevirtual #25
1296: invokevirtual #28
1299: iload         46
1301: iconst_m1
1302: if_icmpne     1309
1305: iconst_1
1306: goto          1310
1309: iconst_0
1310: invokestatic  #29
1313: new           #22
1316: dup
1317: invokespecial #23
1320: ldc           #24
1322: invokevirtual #25
1325: iload         47
1327: invokevirtual #41
1330: ldc           #27
1332: invokevirtual #25
1335: iconst_m1
1336: invokevirtual #41
1339: ldc           #24
1341: invokevirtual #25
1344: invokevirtual #28
1347: iload         47
1349: iconst_m1
1350: if_icmpne     1357
1353: iconst_1
1354: goto          1358
1357: iconst_0
1358: invokestatic  #29
1361: aload         48
1363: invokestatic  #53
1366: new           #22
1369: dup
1370: invokespecial #23
1373: ldc           #24
1375: invokevirtual #25
1378: lload         52
1380: invokevirtual #26
1383: ldc           #27
1385: invokevirtual #25
1388: lconst_0
1389: invokevirtual #26
1392: ldc           #24
1394: invokevirtual #25
1397: invokevirtual #28
1400: lload         52
1402: lconst_0
1403: lcmp
1404: ifne          1411
1407: iconst_1
1408: goto          1412
1411: iconst_0
1412: invokestatic  #29
1415: aload         54
1417: invokestatic  #53
1420: new           #22
1423: dup
1424: invokespecial #23
1427: ldc           #24
1429: invokevirtual #25
1432: iload         55
1434: invokevirtual #41
1437: ldc           #27
1439: invokevirtual #25
1442: iconst_0
1443: invokevirtual #41
1446: ldc           #24
1448: invokevirtual #25
1451: invokevirtual #28
1454: iload         55
1456: ifne          1463
1459: iconst_1
1460: goto          1464
1463: iconst_0
1464: invokestatic  #29
1467: aload         58
1469: invokestatic  #53
1472: new           #22
1475: dup
1476: invokespecial #23
1479: ldc           #24
1481: invokevirtual #25
1484: lload         61
1486: invokevirtual #26
1489: ldc           #27
1491: invokevirtual #25
1494: lconst_0
1495: invokevirtual #26
1498: ldc           #24
1500: invokevirtual #25
1503: invokevirtual #28
1506: lload         61
1508: lconst_0
1509: lcmp
1510: ifne          1517
1513: iconst_1
1514: goto          1518
1517: iconst_0
1518: invokestatic  #29
1521: new           #22
1524: dup
1525: invokespecial #23
1528: ldc           #24
1530: invokevirtual #25
1533: lload         63
1535: invokevirtual #26
1538: ldc           #27
1540: invokevirtual #25
1543: lconst_0
1544: invokevirtual #26
1547: ldc           #24
1549: invokevirtual #25
1552: invokevirtual #28
1555: lload         63
1557: lconst_0
1558: lcmp
1559: ifne          1566
1562: iconst_1
1563: goto          1567
1566: iconst_0
1567: invokestatic  #29
1570: aload         67
1572: invokestatic  #168
1575: new           #22
1578: dup
1579: invokespecial #23
1582: ldc           #24
1584: invokevirtual #25
1587: lload         68
1589: invokevirtual #26
1592: ldc           #27
1594: invokevirtual #25
1597: lconst_0
1598: invokevirtual #26
1601: ldc           #24
1603: invokevirtual #25
1606: invokevirtual #28
1609: lload         68
1611: lconst_0
1612: lcmp
1613: ifne          1620
1616: iconst_1
1617: goto          1621
1620: iconst_0
1621: invokestatic  #29
1624: new           #22
1627: dup
1628: invokespecial #23
1631: ldc           #24
1633: invokevirtual #25
1636: lload         72
1638: invokevirtual #26
1641: ldc           #27
1643: invokevirtual #25
1646: lconst_0
1647: invokevirtual #26
1650: ldc           #24
1652: invokevirtual #25
1655: invokevirtual #28
1658: lload         72
1660: lconst_0
1661: lcmp
1662: ifne          1669
1665: iconst_1
1666: goto          1670
1669: iconst_0
1670: invokestatic  #29
1673: return
Exception table:
from    to  target type
640   657   660   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test205
Start line: 7613
End line: 0
Method source code: 
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.InputStream inputStream27 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream28 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream27);
        long long29 = jarArchiveInputStream28.getBytesRead();
        long long30 = jarArchiveInputStream28.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream31 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream28);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream32 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream28);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream33 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream32);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream37 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream33, "070702", false, false);
        long long39 = cpioArchiveInputStream33.skip(162L);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream41 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream33, 40960);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream42 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream41);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry43 = null;
        boolean boolean44 = tarArchiveInputStream42.canReadEntryData(archiveEntry43);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream45 = archiveStreamFactory0.createArchiveInputStream("ZipLong value: 32", (java.io.InputStream) tarArchiveInputStream42);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipLong value: 32 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #674
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #10
200: dup
201: aload         24
203: invokespecial #11
206: astore        25
208: aload         25
210: invokevirtual #12
213: lstore        26
215: aload         25
217: invokevirtual #12
220: lstore        28
222: new           #13
225: dup
226: aload         25
228: invokespecial #14
231: astore        30
233: new           #31
236: dup
237: aload         25
239: invokespecial #32
242: astore        31
244: new           #33
247: dup
248: aload         31
250: invokespecial #34
253: astore        32
255: new           #15
258: dup
259: aload         32
261: ldc           #111
263: iconst_0
264: iconst_0
265: invokespecial #17
268: astore        33
270: aload         32
272: ldc2_w        #160
275: invokevirtual #162
278: lstore        34
280: new           #31
283: dup
284: aload         32
286: ldc           #109
288: invokespecial #141
291: astore        36
293: new           #31
296: dup
297: aload         36
299: invokespecial #32
302: astore        37
304: aconst_null
305: astore        38
307: aload         37
309: aload         38
311: invokevirtual #116
314: istore        39
316: aload_1
317: ldc_w         #364
320: aload         37
322: invokevirtual #38
325: astore        40
327: ldc_w         #365
330: invokestatic  #20
333: goto          338
336: astore        40
338: new           #22
341: dup
342: invokespecial #23
345: ldc           #24
347: invokevirtual #25
350: lload         4
352: invokevirtual #26
355: ldc           #27
357: invokevirtual #25
360: lconst_0
361: invokevirtual #26
364: ldc           #24
366: invokevirtual #25
369: invokevirtual #28
372: lload         4
374: lconst_0
375: lcmp
376: ifne          383
379: iconst_1
380: goto          384
383: iconst_0
384: invokestatic  #29
387: new           #22
390: dup
391: invokespecial #23
394: ldc           #24
396: invokevirtual #25
399: lload         6
401: invokevirtual #26
404: ldc           #27
406: invokevirtual #25
409: lconst_0
410: invokevirtual #26
413: ldc           #24
415: invokevirtual #25
418: invokevirtual #28
421: lload         6
423: lconst_0
424: lcmp
425: ifne          432
428: iconst_1
429: goto          433
432: iconst_0
433: invokestatic  #29
436: aload         10
438: invokestatic  #168
441: aload         11
443: invokestatic  #168
446: aload         13
448: invokestatic  #53
451: new           #22
454: dup
455: invokespecial #23
458: ldc           #24
460: invokevirtual #25
463: lload         16
465: invokevirtual #26
468: ldc           #27
470: invokevirtual #25
473: lconst_0
474: invokevirtual #26
477: ldc           #24
479: invokevirtual #25
482: invokevirtual #28
485: lload         16
487: lconst_0
488: lcmp
489: ifne          496
492: iconst_1
493: goto          497
496: iconst_0
497: invokestatic  #29
500: new           #22
503: dup
504: invokespecial #23
507: ldc           #24
509: invokevirtual #25
512: lload         18
514: invokevirtual #26
517: ldc           #27
519: invokevirtual #25
522: lconst_0
523: invokevirtual #26
526: ldc           #24
528: invokevirtual #25
531: invokevirtual #28
534: lload         18
536: lconst_0
537: lcmp
538: ifne          545
541: iconst_1
542: goto          546
545: iconst_0
546: invokestatic  #29
549: aload         21
551: invokestatic  #168
554: aload         23
556: invokestatic  #53
559: new           #22
562: dup
563: invokespecial #23
566: ldc           #24
568: invokevirtual #25
571: lload         26
573: invokevirtual #26
576: ldc           #27
578: invokevirtual #25
581: lconst_0
582: invokevirtual #26
585: ldc           #24
587: invokevirtual #25
590: invokevirtual #28
593: lload         26
595: lconst_0
596: lcmp
597: ifne          604
600: iconst_1
601: goto          605
604: iconst_0
605: invokestatic  #29
608: new           #22
611: dup
612: invokespecial #23
615: ldc           #24
617: invokevirtual #25
620: lload         28
622: invokevirtual #26
625: ldc           #27
627: invokevirtual #25
630: lconst_0
631: invokevirtual #26
634: ldc           #24
636: invokevirtual #25
639: invokevirtual #28
642: lload         28
644: lconst_0
645: lcmp
646: ifne          653
649: iconst_1
650: goto          654
653: iconst_0
654: invokestatic  #29
657: new           #22
660: dup
661: invokespecial #23
664: ldc           #24
666: invokevirtual #25
669: lload         34
671: invokevirtual #26
674: ldc           #27
676: invokevirtual #25
679: lconst_0
680: invokevirtual #26
683: ldc           #24
685: invokevirtual #25
688: invokevirtual #28
691: lload         34
693: lconst_0
694: lcmp
695: ifne          702
698: iconst_1
699: goto          703
702: iconst_0
703: invokestatic  #29
706: new           #22
709: dup
710: invokespecial #23
713: ldc           #24
715: invokevirtual #25
718: iload         39
720: invokevirtual #69
723: ldc           #27
725: invokevirtual #25
728: iconst_0
729: invokevirtual #69
732: ldc           #24
734: invokevirtual #25
737: invokevirtual #28
740: iload         39
742: ifne          749
745: iconst_1
746: goto          750
749: iconst_0
750: invokestatic  #29
753: return
Exception table:
from    to  target type
316   333   336   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test206
Start line: 7673
End line: 0
Method source code: 
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        arArchiveInputStream6.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream8 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream6);
        tarArchiveInputStream8.mark((int) (byte) 53);
        boolean boolean11 = tarArchiveInputStream8.markSupported();
        long long13 = tarArchiveInputStream8.skip((-1L));
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream14 = archiveStreamFactory0.createArchiveInputStream("\ufffd\003\000\000", (java.io.InputStream) tarArchiveInputStream8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #675
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: aload         8
68: invokevirtual #140
71: new           #31
74: dup
75: aload         8
77: invokespecial #32
80: astore        9
82: aload         9
84: bipush        53
86: invokevirtual #178
89: aload         9
91: invokevirtual #513
94: istore        10
96: aload         9
98: ldc2_w        #297
101: invokevirtual #514
104: lstore        11
106: aload_1
107: ldc_w         #567
110: aload         9
112: invokevirtual #38
115: astore        13
117: ldc           #118
119: invokestatic  #20
122: goto          127
125: astore        13
127: new           #22
130: dup
131: invokespecial #23
134: ldc           #24
136: invokevirtual #25
139: lload         4
141: invokevirtual #26
144: ldc           #27
146: invokevirtual #25
149: lconst_0
150: invokevirtual #26
153: ldc           #24
155: invokevirtual #25
158: invokevirtual #28
161: lload         4
163: lconst_0
164: lcmp
165: ifne          172
168: iconst_1
169: goto          173
172: iconst_0
173: invokestatic  #29
176: new           #22
179: dup
180: invokespecial #23
183: ldc           #24
185: invokevirtual #25
188: lload         6
190: invokevirtual #26
193: ldc           #27
195: invokevirtual #25
198: lconst_0
199: invokevirtual #26
202: ldc           #24
204: invokevirtual #25
207: invokevirtual #28
210: lload         6
212: lconst_0
213: lcmp
214: ifne          221
217: iconst_1
218: goto          222
221: iconst_0
222: invokestatic  #29
225: new           #22
228: dup
229: invokespecial #23
232: ldc           #24
234: invokevirtual #25
237: iload         10
239: invokevirtual #69
242: ldc           #27
244: invokevirtual #25
247: iconst_0
248: invokevirtual #69
251: ldc           #24
253: invokevirtual #25
256: invokevirtual #28
259: iload         10
261: ifne          268
264: iconst_1
265: goto          269
268: iconst_0
269: invokestatic  #29
272: new           #22
275: dup
276: invokespecial #23
279: ldc           #24
281: invokevirtual #25
284: lload         11
286: invokevirtual #26
289: ldc           #27
291: invokevirtual #25
294: lconst_0
295: invokevirtual #26
298: ldc           #24
300: invokevirtual #25
303: invokevirtual #28
306: lload         11
308: lconst_0
309: lcmp
310: ifne          317
313: iconst_1
314: goto          318
317: iconst_0
318: invokestatic  #29
321: return
Exception table:
from    to  target type
106   122   125   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test207
Start line: 7701
End line: 0
Method source code: 
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream11 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry13 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int14 = tarArchiveEntry13.getDevMinor();
        tarArchiveEntry13.setIds((int) (short) 3, 0);
        java.lang.String str18 = tarArchiveEntry13.getGroupName();
        tarArchiveEntry13.setDevMinor(0);
        tarArchiveEntry13.setUserId((int) (byte) 48);
        java.lang.String str23 = tarArchiveEntry13.getUserName();
        try {
            arArchiveOutputStream11.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.ar.ArArchiveEntry");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #676
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #240
85: dup
86: aload_3
87: invokespecial #241
90: astore        9
92: new           #112
95: dup
96: ldc           #44
98: invokespecial #120
101: astore        10
103: aload         10
105: invokevirtual #129
108: istore        11
110: aload         10
112: iconst_3
113: iconst_0
114: invokevirtual #130
117: aload         10
119: invokevirtual #376
122: astore        12
124: aload         10
126: iconst_0
127: invokevirtual #114
130: aload         10
132: bipush        48
134: invokevirtual #272
137: aload         10
139: invokevirtual #677
142: astore        13
144: aload         9
146: aload         10
148: invokevirtual #288
151: ldc_w         #452
154: invokestatic  #20
157: goto          162
160: astore        14
162: new           #22
165: dup
166: invokespecial #23
169: ldc           #24
171: invokevirtual #25
174: lload         4
176: invokevirtual #26
179: ldc           #27
181: invokevirtual #25
184: lconst_0
185: invokevirtual #26
188: ldc           #24
190: invokevirtual #25
193: invokevirtual #28
196: lload         4
198: lconst_0
199: lcmp
200: ifne          207
203: iconst_1
204: goto          208
207: iconst_0
208: invokestatic  #29
211: aload         6
213: invokestatic  #53
216: new           #22
219: dup
220: invokespecial #23
223: ldc           #24
225: invokevirtual #25
228: iload         7
230: invokevirtual #41
233: ldc           #27
235: invokevirtual #25
238: iconst_0
239: invokevirtual #41
242: ldc           #24
244: invokevirtual #25
247: invokevirtual #28
250: iload         7
252: ifne          259
255: iconst_1
256: goto          260
259: iconst_0
260: invokestatic  #29
263: new           #22
266: dup
267: invokespecial #23
270: ldc           #24
272: invokevirtual #25
275: iload         11
277: invokevirtual #41
280: ldc           #27
282: invokevirtual #25
285: iconst_0
286: invokevirtual #41
289: ldc           #24
291: invokevirtual #25
294: invokevirtual #28
297: iload         11
299: ifne          306
302: iconst_1
303: goto          307
306: iconst_0
307: invokestatic  #29
310: new           #22
313: dup
314: invokespecial #23
317: ldc           #24
319: invokevirtual #25
322: aload         12
324: invokevirtual #25
327: ldc           #219
329: invokevirtual #25
332: invokevirtual #28
335: aload         12
337: ldc           #61
339: invokestatic  #154
342: new           #22
345: dup
346: invokespecial #23
349: ldc           #24
351: invokevirtual #25
354: aload         13
356: invokevirtual #25
359: ldc           #219
361: invokevirtual #25
364: invokevirtual #28
367: aload         13
369: ldc           #61
371: invokestatic  #154
374: return
Exception table:
from    to  target type
144   157   160   Class java/lang/ClassCastException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test208
Start line: 7736
End line: 0
Method source code: 
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        java.lang.String str20 = zipArchiveOutputStream13.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21);
        java.io.InputStream inputStream24 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24);
        long long26 = jarArchiveInputStream25.getBytesRead();
        long long27 = jarArchiveInputStream25.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25);
        arArchiveInputStream28.close();
        arArchiveInputStream28.pushedBackBytes((-1L));
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream28);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream33);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream33, "always", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream38, (int) (short) 8);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray43 = zipLong42.getBytes();
        long long44 = zipLong42.getValue();
        java.io.InputStream inputStream45 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45);
        long long47 = jarArchiveInputStream46.getBytesRead();
        long long48 = jarArchiveInputStream46.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46);
        boolean boolean51 = zipLong42.equals((java.lang.Object) jarArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46, 1000, 1);
        byte[] byteArray59 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean60 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray59);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong61 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray59);
        boolean boolean63 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray59, (int) (byte) 50);
        int int66 = tarArchiveInputStream54.read(byteArray59, (int) (byte) -1, 24576);
        int int69 = tarArchiveInputStream40.read(byteArray59, 504, (int) 'a');
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream70 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) tarArchiveInputStream40);
        tarArchiveInputStream40.mark(3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(archiveInputStream70);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #678
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: aload         9
125: invokevirtual #310
128: astore        13
130: new           #143
133: dup
134: aload         9
136: invokespecial #144
139: astore        14
141: aload_1
142: ldc           #164
144: aload         14
146: invokevirtual #49
149: astore        15
151: aconst_null
152: astore        16
154: new           #10
157: dup
158: aload         16
160: invokespecial #11
163: astore        17
165: aload         17
167: invokevirtual #12
170: lstore        18
172: aload         17
174: invokevirtual #12
177: lstore        20
179: new           #13
182: dup
183: aload         17
185: invokespecial #14
188: astore        22
190: aload         22
192: invokevirtual #140
195: aload         22
197: ldc2_w        #297
200: invokevirtual #299
203: new           #33
206: dup
207: aload         22
209: invokespecial #34
212: astore        23
214: new           #15
217: dup
218: aload         22
220: invokespecial #300
223: astore        24
225: new           #10
228: dup
229: aload         24
231: invokespecial #11
234: astore        25
236: new           #15
239: dup
240: aload         24
242: ldc           #79
244: iconst_0
245: iconst_0
246: invokespecial #17
249: astore        26
251: new           #31
254: dup
255: aload         26
257: bipush        8
259: invokespecial #141
262: astore        27
264: new           #73
267: dup
268: lconst_0
269: invokespecial #74
272: astore        28
274: aload         28
276: invokevirtual #75
279: astore        29
281: aload         28
283: invokevirtual #336
286: lstore        30
288: aconst_null
289: astore        32
291: new           #10
294: dup
295: aload         32
297: invokespecial #11
300: astore        33
302: aload         33
304: invokevirtual #12
307: lstore        34
309: aload         33
311: invokevirtual #12
314: lstore        36
316: new           #13
319: dup
320: aload         33
322: invokespecial #14
325: astore        38
327: new           #31
330: dup
331: aload         33
333: invokespecial #32
336: astore        39
338: aload         28
340: aload         33
342: invokevirtual #337
345: istore        40
347: new           #31
350: dup
351: aload         33
353: sipush        1000
356: iconst_1
357: invokespecial #108
360: astore        41
362: iconst_4
363: newarray       byte
365: dup
366: iconst_0
367: bipush        54
369: bastore
370: dup
371: iconst_1
372: bipush        53
374: bastore
375: dup
376: iconst_2
377: iconst_1
378: bastore
379: dup
380: iconst_3
381: bipush        10
383: bastore
384: astore        42
386: aload         42
388: invokestatic  #192
391: istore        43
393: new           #73
396: dup
397: aload         42
399: invokespecial #406
402: astore        44
404: aload         42
406: bipush        50
408: invokestatic  #523
411: istore        45
413: aload         41
415: aload         42
417: iconst_m1
418: sipush        24576
421: invokevirtual #174
424: istore        46
426: aload         27
428: aload         42
430: sipush        504
433: bipush        97
435: invokevirtual #174
438: istore        47
440: aload_1
441: ldc           #164
443: aload         27
445: invokevirtual #38
448: astore        48
450: aload         27
452: iconst_3
453: invokevirtual #178
456: new           #22
459: dup
460: invokespecial #23
463: ldc           #24
465: invokevirtual #25
468: lload         4
470: invokevirtual #26
473: ldc           #27
475: invokevirtual #25
478: lconst_0
479: invokevirtual #26
482: ldc           #24
484: invokevirtual #25
487: invokevirtual #28
490: lload         4
492: lconst_0
493: lcmp
494: ifne          501
497: iconst_1
498: goto          502
501: iconst_0
502: invokestatic  #29
505: aload         6
507: invokestatic  #53
510: new           #22
513: dup
514: invokespecial #23
517: ldc           #24
519: invokevirtual #25
522: iload         11
524: invokevirtual #69
527: ldc           #27
529: invokevirtual #25
532: iconst_0
533: invokevirtual #69
536: ldc           #24
538: invokevirtual #25
541: invokevirtual #28
544: iload         11
546: ifne          553
549: iconst_1
550: goto          554
553: iconst_0
554: invokestatic  #29
557: new           #22
560: dup
561: invokespecial #23
564: ldc           #24
566: invokevirtual #25
569: iload         12
571: invokevirtual #69
574: ldc           #27
576: invokevirtual #25
579: iconst_0
580: invokevirtual #69
583: ldc           #24
585: invokevirtual #25
588: invokevirtual #28
591: iload         12
593: ifne          600
596: iconst_1
597: goto          601
600: iconst_0
601: invokestatic  #29
604: new           #22
607: dup
608: invokespecial #23
611: ldc           #24
613: invokevirtual #25
616: aload         13
618: invokevirtual #25
621: ldc_w         #317
624: invokevirtual #25
627: invokevirtual #28
630: aload         13
632: ldc           #85
634: invokestatic  #154
637: aload         15
639: invokestatic  #53
642: new           #22
645: dup
646: invokespecial #23
649: ldc           #24
651: invokevirtual #25
654: lload         18
656: invokevirtual #26
659: ldc           #27
661: invokevirtual #25
664: lconst_0
665: invokevirtual #26
668: ldc           #24
670: invokevirtual #25
673: invokevirtual #28
676: lload         18
678: lconst_0
679: lcmp
680: ifne          687
683: iconst_1
684: goto          688
687: iconst_0
688: invokestatic  #29
691: new           #22
694: dup
695: invokespecial #23
698: ldc           #24
700: invokevirtual #25
703: lload         20
705: invokevirtual #26
708: ldc           #27
710: invokevirtual #25
713: lconst_0
714: invokevirtual #26
717: ldc           #24
719: invokevirtual #25
722: invokevirtual #28
725: lload         20
727: lconst_0
728: lcmp
729: ifne          736
732: iconst_1
733: goto          737
736: iconst_0
737: invokestatic  #29
740: aload         29
742: invokestatic  #53
745: aload         29
747: invokestatic  #66
750: ldc           #77
752: invokestatic  #68
755: new           #22
758: dup
759: invokespecial #23
762: ldc           #24
764: invokevirtual #25
767: lload         30
769: invokevirtual #26
772: ldc           #27
774: invokevirtual #25
777: lconst_0
778: invokevirtual #26
781: ldc           #24
783: invokevirtual #25
786: invokevirtual #28
789: lload         30
791: lconst_0
792: lcmp
793: ifne          800
796: iconst_1
797: goto          801
800: iconst_0
801: invokestatic  #29
804: new           #22
807: dup
808: invokespecial #23
811: ldc           #24
813: invokevirtual #25
816: lload         34
818: invokevirtual #26
821: ldc           #27
823: invokevirtual #25
826: lconst_0
827: invokevirtual #26
830: ldc           #24
832: invokevirtual #25
835: invokevirtual #28
838: lload         34
840: lconst_0
841: lcmp
842: ifne          849
845: iconst_1
846: goto          850
849: iconst_0
850: invokestatic  #29
853: new           #22
856: dup
857: invokespecial #23
860: ldc           #24
862: invokevirtual #25
865: lload         36
867: invokevirtual #26
870: ldc           #27
872: invokevirtual #25
875: lconst_0
876: invokevirtual #26
879: ldc           #24
881: invokevirtual #25
884: invokevirtual #28
887: lload         36
889: lconst_0
890: lcmp
891: ifne          898
894: iconst_1
895: goto          899
898: iconst_0
899: invokestatic  #29
902: new           #22
905: dup
906: invokespecial #23
909: ldc           #24
911: invokevirtual #25
914: iload         40
916: invokevirtual #69
919: ldc           #27
921: invokevirtual #25
924: iconst_0
925: invokevirtual #69
928: ldc           #24
930: invokevirtual #25
933: invokevirtual #28
936: iload         40
938: ifne          945
941: iconst_1
942: goto          946
945: iconst_0
946: invokestatic  #29
949: aload         42
951: invokestatic  #53
954: aload         42
956: invokestatic  #66
959: ldc_w         #409
962: invokestatic  #68
965: new           #22
968: dup
969: invokespecial #23
972: ldc           #24
974: invokevirtual #25
977: iload         43
979: invokevirtual #69
982: ldc           #27
984: invokevirtual #25
987: iconst_0
988: invokevirtual #69
991: ldc           #24
993: invokevirtual #25
996: invokevirtual #28
999: iload         43
1001: ifne          1008
1004: iconst_1
1005: goto          1009
1008: iconst_0
1009: invokestatic  #29
1012: new           #22
1015: dup
1016: invokespecial #23
1019: ldc           #24
1021: invokevirtual #25
1024: iload         45
1026: invokevirtual #69
1029: ldc           #27
1031: invokevirtual #25
1034: iconst_0
1035: invokevirtual #69
1038: ldc           #24
1040: invokevirtual #25
1043: invokevirtual #28
1046: iload         45
1048: ifne          1055
1051: iconst_1
1052: goto          1056
1055: iconst_0
1056: invokestatic  #29
1059: new           #22
1062: dup
1063: invokespecial #23
1066: ldc           #24
1068: invokevirtual #25
1071: iload         46
1073: invokevirtual #41
1076: ldc           #27
1078: invokevirtual #25
1081: iconst_m1
1082: invokevirtual #41
1085: ldc           #24
1087: invokevirtual #25
1090: invokevirtual #28
1093: iload         46
1095: iconst_m1
1096: if_icmpne     1103
1099: iconst_1
1100: goto          1104
1103: iconst_0
1104: invokestatic  #29
1107: new           #22
1110: dup
1111: invokespecial #23
1114: ldc           #24
1116: invokevirtual #25
1119: iload         47
1121: invokevirtual #41
1124: ldc           #27
1126: invokevirtual #25
1129: iconst_m1
1130: invokevirtual #41
1133: ldc           #24
1135: invokevirtual #25
1138: invokevirtual #28
1141: iload         47
1143: iconst_m1
1144: if_icmpne     1151
1147: iconst_1
1148: goto          1152
1151: iconst_0
1152: invokestatic  #29
1155: aload         48
1157: invokestatic  #53
1160: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test209
Start line: 7811
End line: 0
Method source code: 
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream11 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        try {
            zipArchiveOutputStream11.finish();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '4' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #679
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: new           #222
80: dup
81: aload         6
83: invokespecial #223
86: astore        8
88: new           #182
91: dup
92: aload         6
94: invokespecial #183
97: astore        9
99: aload         9
101: invokevirtual #413
104: ldc_w         #414
107: invokestatic  #20
110: goto          115
113: astore        10
115: new           #22
118: dup
119: invokespecial #23
122: ldc           #24
124: invokevirtual #25
127: lload         4
129: invokevirtual #26
132: ldc           #27
134: invokevirtual #25
137: lconst_0
138: invokevirtual #26
141: ldc           #24
143: invokevirtual #25
146: invokevirtual #28
149: lload         4
151: lconst_0
152: lcmp
153: ifne          160
156: iconst_1
157: goto          161
160: iconst_0
161: invokestatic  #29
164: aload         6
166: invokestatic  #53
169: return
Exception table:
from    to  target type
99   110   113   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test210
Start line: 7835
End line: 0
Method source code: 
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        long long23 = tarArchiveOutputStream4.getBytesWritten();
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream25 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, "hi!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #680
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: new           #73
81: dup
82: lconst_0
83: invokespecial #74
86: astore        9
88: aload         9
90: invokevirtual #75
93: astore        10
95: new           #73
98: dup
99: lconst_0
100: invokespecial #74
103: astore        11
105: aload         11
107: invokevirtual #75
110: astore        12
112: aload         10
114: aload         12
116: iconst_1
117: invokestatic  #177
120: istore        13
122: aload         10
124: invokestatic  #192
127: istore        14
129: aload_3
130: aload         10
132: iconst_4
133: iconst_m1
134: invokevirtual #63
137: aload_3
138: invokevirtual #47
141: lstore        15
143: new           #43
146: dup
147: aload_3
148: ldc           #124
150: invokespecial #45
153: astore        17
155: ldc_w         #681
158: invokestatic  #20
161: goto          166
164: astore        17
166: new           #22
169: dup
170: invokespecial #23
173: ldc           #24
175: invokevirtual #25
178: lload         4
180: invokevirtual #26
183: ldc           #27
185: invokevirtual #25
188: lconst_0
189: invokevirtual #26
192: ldc           #24
194: invokevirtual #25
197: invokevirtual #28
200: lload         4
202: lconst_0
203: lcmp
204: ifne          211
207: iconst_1
208: goto          212
211: iconst_0
212: invokestatic  #29
215: aload         6
217: invokestatic  #53
220: new           #22
223: dup
224: invokespecial #23
227: ldc           #24
229: invokevirtual #25
232: iload         7
234: invokevirtual #41
237: ldc           #27
239: invokevirtual #25
242: iconst_0
243: invokevirtual #41
246: ldc           #24
248: invokevirtual #25
251: invokevirtual #28
254: iload         7
256: ifne          263
259: iconst_1
260: goto          264
263: iconst_0
264: invokestatic  #29
267: new           #22
270: dup
271: invokespecial #23
274: ldc           #24
276: invokevirtual #25
279: iload         8
281: invokevirtual #41
284: ldc           #27
286: invokevirtual #25
289: iconst_0
290: invokevirtual #41
293: ldc           #24
295: invokevirtual #25
298: invokevirtual #28
301: iload         8
303: ifne          310
306: iconst_1
307: goto          311
310: iconst_0
311: invokestatic  #29
314: aload         10
316: invokestatic  #53
319: aload         10
321: invokestatic  #66
324: ldc           #77
326: invokestatic  #68
329: aload         12
331: invokestatic  #53
334: aload         12
336: invokestatic  #66
339: ldc           #77
341: invokestatic  #68
344: new           #22
347: dup
348: invokespecial #23
351: ldc           #24
353: invokevirtual #25
356: iload         13
358: invokevirtual #69
361: ldc           #27
363: invokevirtual #25
366: iconst_1
367: invokevirtual #69
370: ldc           #24
372: invokevirtual #25
375: invokevirtual #28
378: iload         13
380: iconst_1
381: if_icmpne     388
384: iconst_1
385: goto          389
388: iconst_0
389: invokestatic  #29
392: new           #22
395: dup
396: invokespecial #23
399: ldc           #24
401: invokevirtual #25
404: iload         14
406: invokevirtual #69
409: ldc           #27
411: invokevirtual #25
414: iconst_1
415: invokevirtual #69
418: ldc           #24
420: invokevirtual #25
423: invokevirtual #28
426: iload         14
428: iconst_1
429: if_icmpne     436
432: iconst_1
433: goto          437
436: iconst_0
437: invokestatic  #29
440: new           #22
443: dup
444: invokespecial #23
447: ldc           #24
449: invokevirtual #25
452: lload         15
454: invokevirtual #26
457: ldc           #27
459: invokevirtual #25
462: lconst_0
463: invokevirtual #26
466: ldc           #24
468: invokevirtual #25
471: invokevirtual #28
474: lload         15
476: lconst_0
477: lcmp
478: ifne          485
481: iconst_1
482: goto          486
485: iconst_0
486: invokestatic  #29
489: return
Exception table:
from    to  target type
143   161   164   Class java/nio/charset/IllegalCharsetNameException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test211
Start line: 7875
End line: 0
Method source code: 
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        java.lang.String str20 = zipArchiveOutputStream13.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21);
        java.io.File file23 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry25 = cpioArchiveOutputStream21.createArchiveEntry(file23, "org.apache.commons.compress.archivers.dump.DumpArchiveException");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream22);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #682
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: aload         9
125: invokevirtual #310
128: astore        13
130: new           #143
133: dup
134: aload         9
136: invokespecial #144
139: astore        14
141: aload_1
142: ldc           #164
144: aload         14
146: invokevirtual #49
149: astore        15
151: aconst_null
152: astore        16
154: aload         14
156: aload         16
158: ldc_w         #683
161: invokevirtual #146
164: astore        17
166: ldc           #51
168: invokestatic  #20
171: goto          176
174: astore        17
176: new           #22
179: dup
180: invokespecial #23
183: ldc           #24
185: invokevirtual #25
188: lload         4
190: invokevirtual #26
193: ldc           #27
195: invokevirtual #25
198: lconst_0
199: invokevirtual #26
202: ldc           #24
204: invokevirtual #25
207: invokevirtual #28
210: lload         4
212: lconst_0
213: lcmp
214: ifne          221
217: iconst_1
218: goto          222
221: iconst_0
222: invokestatic  #29
225: aload         6
227: invokestatic  #53
230: new           #22
233: dup
234: invokespecial #23
237: ldc           #24
239: invokevirtual #25
242: iload         11
244: invokevirtual #69
247: ldc           #27
249: invokevirtual #25
252: iconst_0
253: invokevirtual #69
256: ldc           #24
258: invokevirtual #25
261: invokevirtual #28
264: iload         11
266: ifne          273
269: iconst_1
270: goto          274
273: iconst_0
274: invokestatic  #29
277: new           #22
280: dup
281: invokespecial #23
284: ldc           #24
286: invokevirtual #25
289: iload         12
291: invokevirtual #69
294: ldc           #27
296: invokevirtual #25
299: iconst_0
300: invokevirtual #69
303: ldc           #24
305: invokevirtual #25
308: invokevirtual #28
311: iload         12
313: ifne          320
316: iconst_1
317: goto          321
320: iconst_0
321: invokestatic  #29
324: new           #22
327: dup
328: invokespecial #23
331: ldc           #24
333: invokevirtual #25
336: aload         13
338: invokevirtual #25
341: ldc_w         #317
344: invokevirtual #25
347: invokevirtual #28
350: aload         13
352: ldc           #85
354: invokestatic  #154
357: aload         15
359: invokestatic  #53
362: return
Exception table:
from    to  target type
154   171   174   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test212
Start line: 7912
End line: 0
Method source code: 
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.setLongFileMode(257);
        byte[] byteArray14 = null;
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        arArchiveInputStream21.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream23 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream21);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong25 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray26 = zipLong25.getBytes();
        long long27 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray26);
        int int30 = tarArchiveInputStream23.read(byteArray26, 0, (int) (short) 0);
        boolean boolean32 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray26, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding36 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("UTF8");
        boolean boolean38 = zipEncoding36.canEncode("00");
        java.lang.String str39 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray26, 8, 0, zipEncoding36);
        boolean boolean42 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray14, (int) (byte) 88, 8, byteArray26, (int) (byte) 103, 0);
        try {
            arArchiveOutputStream10.write(byteArray14, 36864, 263);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '263' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zipEncoding36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #684
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: sipush        257
92: invokevirtual #399
95: aconst_null
96: astore        10
98: aconst_null
99: astore        11
101: new           #10
104: dup
105: aload         11
107: invokespecial #11
110: astore        12
112: aload         12
114: invokevirtual #12
117: lstore        13
119: aload         12
121: invokevirtual #12
124: lstore        15
126: new           #13
129: dup
130: aload         12
132: invokespecial #14
135: astore        17
137: aload         17
139: invokevirtual #140
142: new           #31
145: dup
146: aload         17
148: invokespecial #32
151: astore        18
153: new           #73
156: dup
157: lconst_0
158: invokespecial #74
161: astore        19
163: aload         19
165: invokevirtual #75
168: astore        20
170: aload         20
172: invokestatic  #209
175: lstore        21
177: aload         18
179: aload         20
181: iconst_0
182: iconst_0
183: invokevirtual #174
186: istore        23
188: aload         20
190: iconst_m1
191: invokestatic  #210
194: istore        24
196: ldc           #85
198: invokestatic  #211
201: astore        25
203: aload         25
205: ldc           #16
207: invokeinterface #212,  2
212: istore        26
214: aload         20
216: bipush        8
218: iconst_0
219: aload         25
221: invokestatic  #213
224: astore        27
226: aload         10
228: bipush        88
230: bipush        8
232: aload         20
234: bipush        103
236: iconst_0
237: invokestatic  #685
240: istore        28
242: aload         9
244: aload         10
246: ldc_w         #373
249: sipush        263
252: invokevirtual #402
255: ldc_w         #625
258: invokestatic  #20
261: goto          266
264: astore        29
266: new           #22
269: dup
270: invokespecial #23
273: ldc           #24
275: invokevirtual #25
278: lload         4
280: invokevirtual #26
283: ldc           #27
285: invokevirtual #25
288: lconst_0
289: invokevirtual #26
292: ldc           #24
294: invokevirtual #25
297: invokevirtual #28
300: lload         4
302: lconst_0
303: lcmp
304: ifne          311
307: iconst_1
308: goto          312
311: iconst_0
312: invokestatic  #29
315: aload         6
317: invokestatic  #53
320: new           #22
323: dup
324: invokespecial #23
327: ldc           #24
329: invokevirtual #25
332: lload         7
334: invokevirtual #26
337: ldc           #27
339: invokevirtual #25
342: lconst_0
343: invokevirtual #26
346: ldc           #24
348: invokevirtual #25
351: invokevirtual #28
354: lload         7
356: lconst_0
357: lcmp
358: ifne          365
361: iconst_1
362: goto          366
365: iconst_0
366: invokestatic  #29
369: new           #22
372: dup
373: invokespecial #23
376: ldc           #24
378: invokevirtual #25
381: lload         13
383: invokevirtual #26
386: ldc           #27
388: invokevirtual #25
391: lconst_0
392: invokevirtual #26
395: ldc           #24
397: invokevirtual #25
400: invokevirtual #28
403: lload         13
405: lconst_0
406: lcmp
407: ifne          414
410: iconst_1
411: goto          415
414: iconst_0
415: invokestatic  #29
418: new           #22
421: dup
422: invokespecial #23
425: ldc           #24
427: invokevirtual #25
430: lload         15
432: invokevirtual #26
435: ldc           #27
437: invokevirtual #25
440: lconst_0
441: invokevirtual #26
444: ldc           #24
446: invokevirtual #25
449: invokevirtual #28
452: lload         15
454: lconst_0
455: lcmp
456: ifne          463
459: iconst_1
460: goto          464
463: iconst_0
464: invokestatic  #29
467: aload         20
469: invokestatic  #53
472: aload         20
474: invokestatic  #66
477: ldc           #77
479: invokestatic  #68
482: new           #22
485: dup
486: invokespecial #23
489: ldc           #24
491: invokevirtual #25
494: lload         21
496: invokevirtual #26
499: ldc           #27
501: invokevirtual #25
504: lconst_0
505: invokevirtual #26
508: ldc           #24
510: invokevirtual #25
513: invokevirtual #28
516: lload         21
518: lconst_0
519: lcmp
520: ifne          527
523: iconst_1
524: goto          528
527: iconst_0
528: invokestatic  #29
531: new           #22
534: dup
535: invokespecial #23
538: ldc           #24
540: invokevirtual #25
543: iload         23
545: invokevirtual #41
548: ldc           #27
550: invokevirtual #25
553: iconst_m1
554: invokevirtual #41
557: ldc           #24
559: invokevirtual #25
562: invokevirtual #28
565: iload         23
567: iconst_m1
568: if_icmpne     575
571: iconst_1
572: goto          576
575: iconst_0
576: invokestatic  #29
579: new           #22
582: dup
583: invokespecial #23
586: ldc           #24
588: invokevirtual #25
591: iload         24
593: invokevirtual #69
596: ldc           #27
598: invokevirtual #25
601: iconst_0
602: invokevirtual #69
605: ldc           #24
607: invokevirtual #25
610: invokevirtual #28
613: iload         24
615: ifne          622
618: iconst_1
619: goto          623
622: iconst_0
623: invokestatic  #29
626: aload         25
628: invokestatic  #53
631: new           #22
634: dup
635: invokespecial #23
638: ldc           #24
640: invokevirtual #25
643: iload         26
645: invokevirtual #69
648: ldc           #27
650: invokevirtual #25
653: iconst_1
654: invokevirtual #69
657: ldc           #24
659: invokevirtual #25
662: invokevirtual #28
665: iload         26
667: iconst_1
668: if_icmpne     675
671: iconst_1
672: goto          676
675: iconst_0
676: invokestatic  #29
679: new           #22
682: dup
683: invokespecial #23
686: ldc           #24
688: invokevirtual #25
691: aload         27
693: invokevirtual #25
696: ldc           #219
698: invokevirtual #25
701: invokevirtual #28
704: aload         27
706: ldc           #61
708: invokestatic  #154
711: new           #22
714: dup
715: invokespecial #23
718: ldc           #24
720: invokevirtual #25
723: iload         28
725: invokevirtual #69
728: ldc           #27
730: invokevirtual #25
733: iconst_0
734: invokevirtual #69
737: ldc           #24
739: invokevirtual #25
742: invokevirtual #28
745: iload         28
747: ifne          754
750: iconst_1
751: goto          755
754: iconst_0
755: invokestatic  #29
758: return
Exception table:
from    to  target type
242   261   264   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test213
Start line: 7966
End line: 0
Method source code: 
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        tarArchiveOutputStream4.count(0);
        tarArchiveOutputStream4.count((long) (byte) 49);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, (int) (short) 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #686
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: iconst_0
68: invokevirtual #356
71: aload_3
72: ldc2_w        #687
75: invokevirtual #46
78: new           #43
81: dup
82: aload_3
83: iconst_0
84: invokespecial #340
87: astore        7
89: new           #22
92: dup
93: invokespecial #23
96: ldc           #24
98: invokevirtual #25
101: lload         4
103: invokevirtual #26
106: ldc           #27
108: invokevirtual #25
111: lconst_0
112: invokevirtual #26
115: ldc           #24
117: invokevirtual #25
120: invokevirtual #28
123: lload         4
125: lconst_0
126: lcmp
127: ifne          134
130: iconst_1
131: goto          135
134: iconst_0
135: invokestatic  #29
138: aload         6
140: invokestatic  #53
143: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test214
Start line: 7983
End line: 0
Method source code: 
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream14);
        try {
            org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream19 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream14, "org.apache.commons.compress.archivers.dump.DumpArchiveException: hi!", true);
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: org.apache.commons.compress.archivers.dump.DumpArchiveException: hi!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #689
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: new           #33
125: dup
126: aload         12
128: invokespecial #34
131: astore        14
133: new           #15
136: dup
137: aload         12
139: ldc_w         #690
142: iconst_1
143: invokespecial #203
146: astore        15
148: ldc_w         #691
151: invokestatic  #20
154: goto          159
157: astore        15
159: new           #22
162: dup
163: invokespecial #23
166: ldc           #24
168: invokevirtual #25
171: lload         4
173: invokevirtual #26
176: ldc           #27
178: invokevirtual #25
181: lconst_0
182: invokevirtual #26
185: ldc           #24
187: invokevirtual #25
190: invokevirtual #28
193: lload         4
195: lconst_0
196: lcmp
197: ifne          204
200: iconst_1
201: goto          205
204: iconst_0
205: invokestatic  #29
208: new           #22
211: dup
212: invokespecial #23
215: ldc           #24
217: invokevirtual #25
220: lload         6
222: invokevirtual #26
225: ldc           #27
227: invokevirtual #25
230: lconst_0
231: invokevirtual #26
234: ldc           #24
236: invokevirtual #25
239: invokevirtual #28
242: lload         6
244: lconst_0
245: lcmp
246: ifne          253
249: iconst_1
250: goto          254
253: iconst_0
254: invokestatic  #29
257: aload         10
259: invokestatic  #168
262: aload         11
264: invokestatic  #168
267: aload         13
269: invokestatic  #53
272: return
Exception table:
from    to  target type
133   154   157   Class java/nio/charset/IllegalCharsetNameException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test215
Start line: 8014
End line: 0
Method source code: 
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        tarArchiveEntry1.setDevMajor((int) (short) 10);
        long long15 = tarArchiveEntry1.getRealSize();
        tarArchiveEntry1.setSize((long) 2048);
        int int18 = tarArchiveEntry1.getDevMinor();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry21 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry21.setName("");
        java.util.Date date24 = tarArchiveEntry21.getLastModifiedDate();
        tarArchiveEntry1.setModTime(date24);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(date24);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #692
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: bipush        10
97: invokevirtual #287
100: aload_1
101: invokevirtual #327
104: lstore        11
106: aload_1
107: ldc2_w        #328
110: invokevirtual #330
113: aload_1
114: invokevirtual #129
117: istore        13
119: new           #112
122: dup
123: ldc           #61
125: iconst_0
126: invokespecial #113
129: astore        14
131: aload         14
133: ldc           #61
135: invokevirtual #275
138: aload         14
140: invokevirtual #122
143: astore        15
145: aload_1
146: aload         15
148: invokevirtual #693
151: new           #22
154: dup
155: invokespecial #23
158: ldc           #24
160: invokevirtual #25
163: lload         5
165: invokevirtual #26
168: ldc           #27
170: invokevirtual #25
173: lconst_0
174: invokevirtual #26
177: ldc           #24
179: invokevirtual #25
182: invokevirtual #28
185: lload         5
187: lconst_0
188: lcmp
189: ifne          196
192: iconst_1
193: goto          197
196: iconst_0
197: invokestatic  #29
200: aload         7
202: invokestatic  #53
205: new           #22
208: dup
209: invokespecial #23
212: ldc           #24
214: invokevirtual #25
217: iload         8
219: invokevirtual #69
222: ldc           #27
224: invokevirtual #25
227: iconst_0
228: invokevirtual #69
231: ldc           #24
233: invokevirtual #25
236: invokevirtual #28
239: iload         8
241: ifne          248
244: iconst_1
245: goto          249
248: iconst_0
249: invokestatic  #29
252: new           #22
255: dup
256: invokespecial #23
259: ldc           #24
261: invokevirtual #25
264: lload         9
266: invokevirtual #26
269: ldc           #27
271: invokevirtual #25
274: lconst_0
275: invokevirtual #26
278: ldc           #24
280: invokevirtual #25
283: invokevirtual #28
286: lload         9
288: lconst_0
289: lcmp
290: ifne          297
293: iconst_1
294: goto          298
297: iconst_0
298: invokestatic  #29
301: new           #22
304: dup
305: invokespecial #23
308: ldc           #24
310: invokevirtual #25
313: lload         11
315: invokevirtual #26
318: ldc           #27
320: invokevirtual #25
323: lconst_0
324: invokevirtual #26
327: ldc           #24
329: invokevirtual #25
332: invokevirtual #28
335: lload         11
337: lconst_0
338: lcmp
339: ifne          346
342: iconst_1
343: goto          347
346: iconst_0
347: invokestatic  #29
350: new           #22
353: dup
354: invokespecial #23
357: ldc           #24
359: invokevirtual #25
362: iload         13
364: invokevirtual #41
367: ldc           #27
369: invokevirtual #25
372: iconst_0
373: invokevirtual #41
376: ldc           #24
378: invokevirtual #25
381: invokevirtual #28
384: iload         13
386: ifne          393
389: iconst_1
390: goto          394
393: iconst_0
394: invokestatic  #29
397: aload         15
399: invokestatic  #53
402: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test216
Start line: 8045
End line: 0
Method source code: 
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9);
        java.io.InputStream inputStream11 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream11);
        long long13 = jarArchiveInputStream12.getBytesRead();
        long long14 = jarArchiveInputStream12.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream12);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream16 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream12);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream17 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream16);
        int int18 = cpioArchiveInputStream17.available();
        int int19 = cpioArchiveInputStream17.getCount();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream20 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream17);
        cpioArchiveInputStream17.count((long) (byte) 1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream24 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream17, "070707");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry26 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int27 = tarArchiveEntry26.getDevMinor();
        tarArchiveEntry26.setIds((int) (short) 3, 0);
        int int31 = tarArchiveEntry26.getDevMajor();
        boolean boolean32 = tarArchiveEntry26.isFile();
        java.io.InputStream inputStream33 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream33);
        long long35 = jarArchiveInputStream34.getBytesRead();
        long long36 = jarArchiveInputStream34.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream37 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream34);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream38 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream34);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream39 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream38);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream43 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream39, "070702", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry46 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry46.setDevMinor((int) ' ');
        boolean boolean49 = cpioArchiveInputStream39.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry46);
        boolean boolean50 = tarArchiveEntry26.equals((java.lang.Object) tarArchiveEntry46);
        boolean boolean51 = tarArchiveInputStream24.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry46);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream52 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream24);
        java.io.InputStream inputStream53 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream54 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream53);
        long long55 = jarArchiveInputStream54.getBytesRead();
        long long56 = jarArchiveInputStream54.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream57 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream54);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream58 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream54);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry59 = tarArchiveInputStream58.getNextEntry();
        long long60 = tarArchiveInputStream58.getBytesRead();
        byte[] byteArray65 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean66 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray65);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong67 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray65);
        boolean boolean69 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray65, (int) (byte) 50);
        int int72 = tarArchiveInputStream58.read(byteArray65, 0, 2048);
        byte[] byteArray74 = org.apache.commons.compress.utils.ArchiveUtils.toAsciiBytes("always");
        int int77 = tarArchiveInputStream58.read(byteArray74, 49152, (int) (byte) 100);
        byte[] byteArray82 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean83 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray82);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong84 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray82);
        boolean boolean86 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray82, (int) (byte) 50);
        boolean boolean87 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray82);
        int int90 = tarArchiveInputStream58.read(byteArray82, (int) (byte) 48, 504);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong91 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray82);
        boolean boolean93 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray82, (-1));
        int int94 = tarArchiveInputStream24.read(byteArray82);
        try {
            jarArchiveOutputStream10.write(byteArray82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNull(archiveEntry59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[97, 108, 119, 97, 121, 115]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #694
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: new           #222
80: dup
81: aload         7
83: invokespecial #223
86: astore        8
88: aconst_null
89: astore        9
91: new           #10
94: dup
95: aload         9
97: invokespecial #11
100: astore        10
102: aload         10
104: invokevirtual #12
107: lstore        11
109: aload         10
111: invokevirtual #12
114: lstore        13
116: new           #13
119: dup
120: aload         10
122: invokespecial #14
125: astore        15
127: new           #31
130: dup
131: aload         10
133: invokespecial #32
136: astore        16
138: new           #33
141: dup
142: aload         16
144: invokespecial #34
147: astore        17
149: aload         17
151: invokevirtual #35
154: istore        18
156: aload         17
158: invokevirtual #36
161: istore        19
163: new           #10
166: dup
167: aload         17
169: invokespecial #11
172: astore        20
174: aload         17
176: lconst_1
177: invokevirtual #695
180: new           #31
183: dup
184: aload         17
186: ldc_w         #642
189: invokespecial #575
192: astore        21
194: new           #112
197: dup
198: ldc           #44
200: invokespecial #120
203: astore        22
205: aload         22
207: invokevirtual #129
210: istore        23
212: aload         22
214: iconst_3
215: iconst_0
216: invokevirtual #130
219: aload         22
221: invokevirtual #131
224: istore        24
226: aload         22
228: invokevirtual #132
231: istore        25
233: aconst_null
234: astore        26
236: new           #10
239: dup
240: aload         26
242: invokespecial #11
245: astore        27
247: aload         27
249: invokevirtual #12
252: lstore        28
254: aload         27
256: invokevirtual #12
259: lstore        30
261: new           #13
264: dup
265: aload         27
267: invokespecial #14
270: astore        32
272: new           #31
275: dup
276: aload         27
278: invokespecial #32
281: astore        33
283: new           #33
286: dup
287: aload         33
289: invokespecial #34
292: astore        34
294: new           #15
297: dup
298: aload         34
300: ldc           #111
302: iconst_0
303: iconst_0
304: invokespecial #17
307: astore        35
309: new           #112
312: dup
313: ldc           #61
315: iconst_0
316: invokespecial #113
319: astore        36
321: aload         36
323: bipush        32
325: invokevirtual #114
328: aload         34
330: aload         36
332: invokevirtual #115
335: istore        37
337: aload         22
339: aload         36
341: invokevirtual #133
344: istore        38
346: aload         21
348: aload         36
350: invokevirtual #116
353: istore        39
355: new           #15
358: dup
359: aload         21
361: invokespecial #300
364: astore        40
366: aconst_null
367: astore        41
369: new           #10
372: dup
373: aload         41
375: invokespecial #11
378: astore        42
380: aload         42
382: invokevirtual #12
385: lstore        43
387: aload         42
389: invokevirtual #12
392: lstore        45
394: new           #13
397: dup
398: aload         42
400: invokespecial #14
403: astore        47
405: new           #31
408: dup
409: aload         42
411: invokespecial #32
414: astore        48
416: aload         48
418: invokevirtual #199
421: astore        49
423: aload         48
425: invokevirtual #573
428: lstore        50
430: iconst_4
431: newarray       byte
433: dup
434: iconst_0
435: bipush        54
437: bastore
438: dup
439: iconst_1
440: bipush        53
442: bastore
443: dup
444: iconst_2
445: iconst_1
446: bastore
447: dup
448: iconst_3
449: bipush        10
451: bastore
452: astore        52
454: aload         52
456: invokestatic  #192
459: istore        53
461: new           #73
464: dup
465: aload         52
467: invokespecial #406
470: astore        54
472: aload         52
474: bipush        50
476: invokestatic  #523
479: istore        55
481: aload         48
483: aload         52
485: iconst_0
486: sipush        2048
489: invokevirtual #174
492: istore        56
494: ldc           #79
496: invokestatic  #594
499: astore        57
501: aload         48
503: aload         57
505: ldc_w         #595
508: bipush        100
510: invokevirtual #174
513: istore        58
515: iconst_4
516: newarray       byte
518: dup
519: iconst_0
520: bipush        54
522: bastore
523: dup
524: iconst_1
525: bipush        53
527: bastore
528: dup
529: iconst_2
530: iconst_1
531: bastore
532: dup
533: iconst_3
534: bipush        10
536: bastore
537: astore        59
539: aload         59
541: invokestatic  #192
544: istore        60
546: new           #73
549: dup
550: aload         59
552: invokespecial #406
555: astore        61
557: aload         59
559: bipush        50
561: invokestatic  #523
564: istore        62
566: aload         59
568: invokestatic  #192
571: istore        63
573: aload         48
575: aload         59
577: bipush        48
579: sipush        504
582: invokevirtual #174
585: istore        64
587: new           #73
590: dup
591: aload         59
593: invokespecial #406
596: astore        65
598: aload         59
600: iconst_m1
601: invokestatic  #523
604: istore        66
606: aload         21
608: aload         59
610: invokevirtual #696
613: istore        67
615: aload         8
617: aload         59
619: invokevirtual #697
622: ldc           #51
624: invokestatic  #20
627: goto          632
630: astore        68
632: new           #22
635: dup
636: invokespecial #23
639: ldc           #24
641: invokevirtual #25
644: lload         4
646: invokevirtual #26
649: ldc           #27
651: invokevirtual #25
654: lconst_0
655: invokevirtual #26
658: ldc           #24
660: invokevirtual #25
663: invokevirtual #28
666: lload         4
668: lconst_0
669: lcmp
670: ifne          677
673: iconst_1
674: goto          678
677: iconst_0
678: invokestatic  #29
681: aload         6
683: invokestatic  #53
686: new           #22
689: dup
690: invokespecial #23
693: ldc           #24
695: invokevirtual #25
698: lload         11
700: invokevirtual #26
703: ldc           #27
705: invokevirtual #25
708: lconst_0
709: invokevirtual #26
712: ldc           #24
714: invokevirtual #25
717: invokevirtual #28
720: lload         11
722: lconst_0
723: lcmp
724: ifne          731
727: iconst_1
728: goto          732
731: iconst_0
732: invokestatic  #29
735: new           #22
738: dup
739: invokespecial #23
742: ldc           #24
744: invokevirtual #25
747: lload         13
749: invokevirtual #26
752: ldc           #27
754: invokevirtual #25
757: lconst_0
758: invokevirtual #26
761: ldc           #24
763: invokevirtual #25
766: invokevirtual #28
769: lload         13
771: lconst_0
772: lcmp
773: ifne          780
776: iconst_1
777: goto          781
780: iconst_0
781: invokestatic  #29
784: new           #22
787: dup
788: invokespecial #23
791: ldc           #24
793: invokevirtual #25
796: iload         18
798: invokevirtual #41
801: ldc           #27
803: invokevirtual #25
806: iconst_1
807: invokevirtual #41
810: ldc           #24
812: invokevirtual #25
815: invokevirtual #28
818: iload         18
820: iconst_1
821: if_icmpne     828
824: iconst_1
825: goto          829
828: iconst_0
829: invokestatic  #29
832: new           #22
835: dup
836: invokespecial #23
839: ldc           #24
841: invokevirtual #25
844: iload         19
846: invokevirtual #41
849: ldc           #27
851: invokevirtual #25
854: iconst_0
855: invokevirtual #41
858: ldc           #24
860: invokevirtual #25
863: invokevirtual #28
866: iload         19
868: ifne          875
871: iconst_1
872: goto          876
875: iconst_0
876: invokestatic  #29
879: new           #22
882: dup
883: invokespecial #23
886: ldc           #24
888: invokevirtual #25
891: iload         23
893: invokevirtual #41
896: ldc           #27
898: invokevirtual #25
901: iconst_0
902: invokevirtual #41
905: ldc           #24
907: invokevirtual #25
910: invokevirtual #28
913: iload         23
915: ifne          922
918: iconst_1
919: goto          923
922: iconst_0
923: invokestatic  #29
926: new           #22
929: dup
930: invokespecial #23
933: ldc           #24
935: invokevirtual #25
938: iload         24
940: invokevirtual #41
943: ldc           #27
945: invokevirtual #25
948: iconst_0
949: invokevirtual #41
952: ldc           #24
954: invokevirtual #25
957: invokevirtual #28
960: iload         24
962: ifne          969
965: iconst_1
966: goto          970
969: iconst_0
970: invokestatic  #29
973: new           #22
976: dup
977: invokespecial #23
980: ldc           #24
982: invokevirtual #25
985: iload         25
987: invokevirtual #69
990: ldc           #27
992: invokevirtual #25
995: iconst_1
996: invokevirtual #69
999: ldc           #24
1001: invokevirtual #25
1004: invokevirtual #28
1007: iload         25
1009: iconst_1
1010: if_icmpne     1017
1013: iconst_1
1014: goto          1018
1017: iconst_0
1018: invokestatic  #29
1021: new           #22
1024: dup
1025: invokespecial #23
1028: ldc           #24
1030: invokevirtual #25
1033: lload         28
1035: invokevirtual #26
1038: ldc           #27
1040: invokevirtual #25
1043: lconst_0
1044: invokevirtual #26
1047: ldc           #24
1049: invokevirtual #25
1052: invokevirtual #28
1055: lload         28
1057: lconst_0
1058: lcmp
1059: ifne          1066
1062: iconst_1
1063: goto          1067
1066: iconst_0
1067: invokestatic  #29
1070: new           #22
1073: dup
1074: invokespecial #23
1077: ldc           #24
1079: invokevirtual #25
1082: lload         30
1084: invokevirtual #26
1087: ldc           #27
1089: invokevirtual #25
1092: lconst_0
1093: invokevirtual #26
1096: ldc           #24
1098: invokevirtual #25
1101: invokevirtual #28
1104: lload         30
1106: lconst_0
1107: lcmp
1108: ifne          1115
1111: iconst_1
1112: goto          1116
1115: iconst_0
1116: invokestatic  #29
1119: new           #22
1122: dup
1123: invokespecial #23
1126: ldc           #24
1128: invokevirtual #25
1131: iload         37
1133: invokevirtual #69
1136: ldc           #27
1138: invokevirtual #25
1141: iconst_1
1142: invokevirtual #69
1145: ldc           #24
1147: invokevirtual #25
1150: invokevirtual #28
1153: iload         37
1155: iconst_1
1156: if_icmpne     1163
1159: iconst_1
1160: goto          1164
1163: iconst_0
1164: invokestatic  #29
1167: new           #22
1170: dup
1171: invokespecial #23
1174: ldc           #24
1176: invokevirtual #25
1179: iload         38
1181: invokevirtual #69
1184: ldc           #27
1186: invokevirtual #25
1189: iconst_0
1190: invokevirtual #69
1193: ldc           #24
1195: invokevirtual #25
1198: invokevirtual #28
1201: iload         38
1203: ifne          1210
1206: iconst_1
1207: goto          1211
1210: iconst_0
1211: invokestatic  #29
1214: new           #22
1217: dup
1218: invokespecial #23
1221: ldc           #24
1223: invokevirtual #25
1226: iload         39
1228: invokevirtual #69
1231: ldc           #27
1233: invokevirtual #25
1236: iconst_1
1237: invokevirtual #69
1240: ldc           #24
1242: invokevirtual #25
1245: invokevirtual #28
1248: iload         39
1250: iconst_1
1251: if_icmpne     1258
1254: iconst_1
1255: goto          1259
1258: iconst_0
1259: invokestatic  #29
1262: new           #22
1265: dup
1266: invokespecial #23
1269: ldc           #24
1271: invokevirtual #25
1274: lload         43
1276: invokevirtual #26
1279: ldc           #27
1281: invokevirtual #25
1284: lconst_0
1285: invokevirtual #26
1288: ldc           #24
1290: invokevirtual #25
1293: invokevirtual #28
1296: lload         43
1298: lconst_0
1299: lcmp
1300: ifne          1307
1303: iconst_1
1304: goto          1308
1307: iconst_0
1308: invokestatic  #29
1311: new           #22
1314: dup
1315: invokespecial #23
1318: ldc           #24
1320: invokevirtual #25
1323: lload         45
1325: invokevirtual #26
1328: ldc           #27
1330: invokevirtual #25
1333: lconst_0
1334: invokevirtual #26
1337: ldc           #24
1339: invokevirtual #25
1342: invokevirtual #28
1345: lload         45
1347: lconst_0
1348: lcmp
1349: ifne          1356
1352: iconst_1
1353: goto          1357
1356: iconst_0
1357: invokestatic  #29
1360: aload         49
1362: invokestatic  #168
1365: new           #22
1368: dup
1369: invokespecial #23
1372: ldc           #24
1374: invokevirtual #25
1377: lload         50
1379: invokevirtual #26
1382: ldc           #27
1384: invokevirtual #25
1387: lconst_0
1388: invokevirtual #26
1391: ldc           #24
1393: invokevirtual #25
1396: invokevirtual #28
1399: lload         50
1401: lconst_0
1402: lcmp
1403: ifne          1410
1406: iconst_1
1407: goto          1411
1410: iconst_0
1411: invokestatic  #29
1414: aload         52
1416: invokestatic  #53
1419: aload         52
1421: invokestatic  #66
1424: ldc_w         #409
1427: invokestatic  #68
1430: new           #22
1433: dup
1434: invokespecial #23
1437: ldc           #24
1439: invokevirtual #25
1442: iload         53
1444: invokevirtual #69
1447: ldc           #27
1449: invokevirtual #25
1452: iconst_0
1453: invokevirtual #69
1456: ldc           #24
1458: invokevirtual #25
1461: invokevirtual #28
1464: iload         53
1466: ifne          1473
1469: iconst_1
1470: goto          1474
1473: iconst_0
1474: invokestatic  #29
1477: new           #22
1480: dup
1481: invokespecial #23
1484: ldc           #24
1486: invokevirtual #25
1489: iload         55
1491: invokevirtual #69
1494: ldc           #27
1496: invokevirtual #25
1499: iconst_0
1500: invokevirtual #69
1503: ldc           #24
1505: invokevirtual #25
1508: invokevirtual #28
1511: iload         55
1513: ifne          1520
1516: iconst_1
1517: goto          1521
1520: iconst_0
1521: invokestatic  #29
1524: new           #22
1527: dup
1528: invokespecial #23
1531: ldc           #24
1533: invokevirtual #25
1536: iload         56
1538: invokevirtual #41
1541: ldc           #27
1543: invokevirtual #25
1546: iconst_m1
1547: invokevirtual #41
1550: ldc           #24
1552: invokevirtual #25
1555: invokevirtual #28
1558: iload         56
1560: iconst_m1
1561: if_icmpne     1568
1564: iconst_1
1565: goto          1569
1568: iconst_0
1569: invokestatic  #29
1572: aload         57
1574: invokestatic  #53
1577: aload         57
1579: invokestatic  #66
1582: ldc_w         #597
1585: invokestatic  #68
1588: new           #22
1591: dup
1592: invokespecial #23
1595: ldc           #24
1597: invokevirtual #25
1600: iload         58
1602: invokevirtual #41
1605: ldc           #27
1607: invokevirtual #25
1610: iconst_m1
1611: invokevirtual #41
1614: ldc           #24
1616: invokevirtual #25
1619: invokevirtual #28
1622: iload         58
1624: iconst_m1
1625: if_icmpne     1632
1628: iconst_1
1629: goto          1633
1632: iconst_0
1633: invokestatic  #29
1636: aload         59
1638: invokestatic  #53
1641: aload         59
1643: invokestatic  #66
1646: ldc_w         #409
1649: invokestatic  #68
1652: new           #22
1655: dup
1656: invokespecial #23
1659: ldc           #24
1661: invokevirtual #25
1664: iload         60
1666: invokevirtual #69
1669: ldc           #27
1671: invokevirtual #25
1674: iconst_0
1675: invokevirtual #69
1678: ldc           #24
1680: invokevirtual #25
1683: invokevirtual #28
1686: iload         60
1688: ifne          1695
1691: iconst_1
1692: goto          1696
1695: iconst_0
1696: invokestatic  #29
1699: new           #22
1702: dup
1703: invokespecial #23
1706: ldc           #24
1708: invokevirtual #25
1711: iload         62
1713: invokevirtual #69
1716: ldc           #27
1718: invokevirtual #25
1721: iconst_0
1722: invokevirtual #69
1725: ldc           #24
1727: invokevirtual #25
1730: invokevirtual #28
1733: iload         62
1735: ifne          1742
1738: iconst_1
1739: goto          1743
1742: iconst_0
1743: invokestatic  #29
1746: new           #22
1749: dup
1750: invokespecial #23
1753: ldc           #24
1755: invokevirtual #25
1758: iload         63
1760: invokevirtual #69
1763: ldc           #27
1765: invokevirtual #25
1768: iconst_0
1769: invokevirtual #69
1772: ldc           #24
1774: invokevirtual #25
1777: invokevirtual #28
1780: iload         63
1782: ifne          1789
1785: iconst_1
1786: goto          1790
1789: iconst_0
1790: invokestatic  #29
1793: new           #22
1796: dup
1797: invokespecial #23
1800: ldc           #24
1802: invokevirtual #25
1805: iload         64
1807: invokevirtual #41
1810: ldc           #27
1812: invokevirtual #25
1815: iconst_m1
1816: invokevirtual #41
1819: ldc           #24
1821: invokevirtual #25
1824: invokevirtual #28
1827: iload         64
1829: iconst_m1
1830: if_icmpne     1837
1833: iconst_1
1834: goto          1838
1837: iconst_0
1838: invokestatic  #29
1841: new           #22
1844: dup
1845: invokespecial #23
1848: ldc           #24
1850: invokevirtual #25
1853: iload         66
1855: invokevirtual #69
1858: ldc           #27
1860: invokevirtual #25
1863: iconst_0
1864: invokevirtual #69
1867: ldc           #24
1869: invokevirtual #25
1872: invokevirtual #28
1875: iload         66
1877: ifne          1884
1880: iconst_1
1881: goto          1885
1884: iconst_0
1885: invokestatic  #29
1888: new           #22
1891: dup
1892: invokespecial #23
1895: ldc           #24
1897: invokevirtual #25
1900: iload         67
1902: invokevirtual #41
1905: ldc           #27
1907: invokevirtual #25
1910: iconst_m1
1911: invokevirtual #41
1914: ldc           #24
1916: invokevirtual #25
1919: invokevirtual #28
1922: iload         67
1924: iconst_m1
1925: if_icmpne     1932
1928: iconst_1
1929: goto          1933
1932: iconst_0
1933: invokestatic  #29
1936: return
Exception table:
from    to  target type
615   627   630   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test217
Start line: 8155
End line: 0
Method source code: 
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        arArchiveOutputStream10.flush();
        arArchiveOutputStream10.setLongFileMode(32);
        arArchiveOutputStream10.setLongFileMode((int) (byte) 54);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream19 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) arArchiveOutputStream10);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #698
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: invokevirtual #528
100: aload         9
102: bipush        32
104: invokevirtual #399
107: aload         9
109: bipush        54
111: invokevirtual #399
114: new           #240
117: dup
118: aload         9
120: invokespecial #241
123: astore        10
125: new           #22
128: dup
129: invokespecial #23
132: ldc           #24
134: invokevirtual #25
137: lload         4
139: invokevirtual #26
142: ldc           #27
144: invokevirtual #25
147: lconst_0
148: invokevirtual #26
151: ldc           #24
153: invokevirtual #25
156: invokevirtual #28
159: lload         4
161: lconst_0
162: lcmp
163: ifne          170
166: iconst_1
167: goto          171
170: iconst_0
171: invokestatic  #29
174: aload         6
176: invokestatic  #53
179: new           #22
182: dup
183: invokespecial #23
186: ldc           #24
188: invokevirtual #25
191: lload         7
193: invokevirtual #26
196: ldc           #27
198: invokevirtual #25
201: lconst_0
202: invokevirtual #26
205: ldc           #24
207: invokevirtual #25
210: invokevirtual #28
213: lload         7
215: lconst_0
216: lcmp
217: ifne          224
220: iconst_1
221: goto          225
224: iconst_0
225: invokestatic  #29
228: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test218
Start line: 8178
End line: 0
Method source code: 
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(false);
        long long27 = tarArchiveOutputStream4.getBytesWritten();
        int int28 = tarArchiveOutputStream4.getRecordSize();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 512 + "'", int28 == 512);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #699
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: new           #73
81: dup
82: lconst_0
83: invokespecial #74
86: astore        9
88: aload         9
90: invokevirtual #75
93: astore        10
95: new           #73
98: dup
99: lconst_0
100: invokespecial #74
103: astore        11
105: aload         11
107: invokevirtual #75
110: astore        12
112: aload         10
114: aload         12
116: iconst_1
117: invokestatic  #177
120: istore        13
122: aload         10
124: invokestatic  #192
127: istore        14
129: aload_3
130: aload         10
132: iconst_4
133: iconst_m1
134: invokevirtual #63
137: aload_3
138: iconst_1
139: invokevirtual #148
142: aload_3
143: iconst_0
144: invokevirtual #148
147: aload_3
148: invokevirtual #47
151: lstore        15
153: aload_3
154: invokevirtual #247
157: istore        17
159: new           #22
162: dup
163: invokespecial #23
166: ldc           #24
168: invokevirtual #25
171: lload         4
173: invokevirtual #26
176: ldc           #27
178: invokevirtual #25
181: lconst_0
182: invokevirtual #26
185: ldc           #24
187: invokevirtual #25
190: invokevirtual #28
193: lload         4
195: lconst_0
196: lcmp
197: ifne          204
200: iconst_1
201: goto          205
204: iconst_0
205: invokestatic  #29
208: aload         6
210: invokestatic  #53
213: new           #22
216: dup
217: invokespecial #23
220: ldc           #24
222: invokevirtual #25
225: iload         7
227: invokevirtual #41
230: ldc           #27
232: invokevirtual #25
235: iconst_0
236: invokevirtual #41
239: ldc           #24
241: invokevirtual #25
244: invokevirtual #28
247: iload         7
249: ifne          256
252: iconst_1
253: goto          257
256: iconst_0
257: invokestatic  #29
260: new           #22
263: dup
264: invokespecial #23
267: ldc           #24
269: invokevirtual #25
272: iload         8
274: invokevirtual #41
277: ldc           #27
279: invokevirtual #25
282: iconst_0
283: invokevirtual #41
286: ldc           #24
288: invokevirtual #25
291: invokevirtual #28
294: iload         8
296: ifne          303
299: iconst_1
300: goto          304
303: iconst_0
304: invokestatic  #29
307: aload         10
309: invokestatic  #53
312: aload         10
314: invokestatic  #66
317: ldc           #77
319: invokestatic  #68
322: aload         12
324: invokestatic  #53
327: aload         12
329: invokestatic  #66
332: ldc           #77
334: invokestatic  #68
337: new           #22
340: dup
341: invokespecial #23
344: ldc           #24
346: invokevirtual #25
349: iload         13
351: invokevirtual #69
354: ldc           #27
356: invokevirtual #25
359: iconst_1
360: invokevirtual #69
363: ldc           #24
365: invokevirtual #25
368: invokevirtual #28
371: iload         13
373: iconst_1
374: if_icmpne     381
377: iconst_1
378: goto          382
381: iconst_0
382: invokestatic  #29
385: new           #22
388: dup
389: invokespecial #23
392: ldc           #24
394: invokevirtual #25
397: iload         14
399: invokevirtual #69
402: ldc           #27
404: invokevirtual #25
407: iconst_1
408: invokevirtual #69
411: ldc           #24
413: invokevirtual #25
416: invokevirtual #28
419: iload         14
421: iconst_1
422: if_icmpne     429
425: iconst_1
426: goto          430
429: iconst_0
430: invokestatic  #29
433: new           #22
436: dup
437: invokespecial #23
440: ldc           #24
442: invokevirtual #25
445: lload         15
447: invokevirtual #26
450: ldc           #27
452: invokevirtual #25
455: lconst_0
456: invokevirtual #26
459: ldc           #24
461: invokevirtual #25
464: invokevirtual #28
467: lload         15
469: lconst_0
470: lcmp
471: ifne          478
474: iconst_1
475: goto          479
478: iconst_0
479: invokestatic  #29
482: new           #22
485: dup
486: invokespecial #23
489: ldc           #24
491: invokevirtual #25
494: iload         17
496: invokevirtual #41
499: ldc           #27
501: invokevirtual #25
504: sipush        512
507: invokevirtual #41
510: ldc           #24
512: invokevirtual #25
515: invokevirtual #28
518: iload         17
520: sipush        512
523: if_icmpne     530
526: iconst_1
527: goto          531
530: iconst_0
531: invokestatic  #29
534: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test219
Start line: 8215
End line: 0
Method source code: 
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        jarArchiveOutputStream12.setEncoding("5");
        jarArchiveOutputStream12.setFallbackToUTF8(true);
        int int17 = jarArchiveOutputStream12.getCount();
        try {
            jarArchiveOutputStream12.write(120);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #700
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: aload         10
105: ldc_w         #458
108: invokevirtual #459
111: aload         10
113: iconst_1
114: invokevirtual #501
117: aload         10
119: invokevirtual #701
122: istore        11
124: aload         10
126: bipush        120
128: invokevirtual #702
131: ldc           #51
133: invokestatic  #20
136: goto          141
139: astore        12
141: new           #22
144: dup
145: invokespecial #23
148: ldc           #24
150: invokevirtual #25
153: lload         4
155: invokevirtual #26
158: ldc           #27
160: invokevirtual #25
163: lconst_0
164: invokevirtual #26
167: ldc           #24
169: invokevirtual #25
172: invokevirtual #28
175: lload         4
177: lconst_0
178: lcmp
179: ifne          186
182: iconst_1
183: goto          187
186: iconst_0
187: invokestatic  #29
190: aload         6
192: invokestatic  #53
195: new           #22
198: dup
199: invokespecial #23
202: ldc           #24
204: invokevirtual #25
207: iload         7
209: invokevirtual #41
212: ldc           #27
214: invokevirtual #25
217: iconst_0
218: invokevirtual #41
221: ldc           #24
223: invokevirtual #25
226: invokevirtual #28
229: iload         7
231: ifne          238
234: iconst_1
235: goto          239
238: iconst_0
239: invokestatic  #29
242: new           #22
245: dup
246: invokespecial #23
249: ldc           #24
251: invokevirtual #25
254: iload         11
256: invokevirtual #41
259: ldc           #27
261: invokevirtual #25
264: iconst_0
265: invokevirtual #41
268: ldc           #24
270: invokevirtual #25
273: invokevirtual #28
276: iload         11
278: ifne          285
281: iconst_1
282: goto          286
285: iconst_0
286: invokestatic  #29
289: return
Exception table:
from    to  target type
124   136   139   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test220
Start line: 8245
End line: 0
Method source code: 
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(false);
        long long27 = tarArchiveOutputStream4.getBytesWritten();
        try {
            tarArchiveOutputStream4.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #703
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: new           #73
81: dup
82: lconst_0
83: invokespecial #74
86: astore        9
88: aload         9
90: invokevirtual #75
93: astore        10
95: new           #73
98: dup
99: lconst_0
100: invokespecial #74
103: astore        11
105: aload         11
107: invokevirtual #75
110: astore        12
112: aload         10
114: aload         12
116: iconst_1
117: invokestatic  #177
120: istore        13
122: aload         10
124: invokestatic  #192
127: istore        14
129: aload_3
130: aload         10
132: iconst_4
133: iconst_m1
134: invokevirtual #63
137: aload_3
138: iconst_1
139: invokevirtual #148
142: aload_3
143: iconst_0
144: invokevirtual #148
147: aload_3
148: invokevirtual #47
151: lstore        15
153: aload_3
154: invokevirtual #250
157: ldc           #51
159: invokestatic  #20
162: goto          167
165: astore        17
167: new           #22
170: dup
171: invokespecial #23
174: ldc           #24
176: invokevirtual #25
179: lload         4
181: invokevirtual #26
184: ldc           #27
186: invokevirtual #25
189: lconst_0
190: invokevirtual #26
193: ldc           #24
195: invokevirtual #25
198: invokevirtual #28
201: lload         4
203: lconst_0
204: lcmp
205: ifne          212
208: iconst_1
209: goto          213
212: iconst_0
213: invokestatic  #29
216: aload         6
218: invokestatic  #53
221: new           #22
224: dup
225: invokespecial #23
228: ldc           #24
230: invokevirtual #25
233: iload         7
235: invokevirtual #41
238: ldc           #27
240: invokevirtual #25
243: iconst_0
244: invokevirtual #41
247: ldc           #24
249: invokevirtual #25
252: invokevirtual #28
255: iload         7
257: ifne          264
260: iconst_1
261: goto          265
264: iconst_0
265: invokestatic  #29
268: new           #22
271: dup
272: invokespecial #23
275: ldc           #24
277: invokevirtual #25
280: iload         8
282: invokevirtual #41
285: ldc           #27
287: invokevirtual #25
290: iconst_0
291: invokevirtual #41
294: ldc           #24
296: invokevirtual #25
299: invokevirtual #28
302: iload         8
304: ifne          311
307: iconst_1
308: goto          312
311: iconst_0
312: invokestatic  #29
315: aload         10
317: invokestatic  #53
320: aload         10
322: invokestatic  #66
325: ldc           #77
327: invokestatic  #68
330: aload         12
332: invokestatic  #53
335: aload         12
337: invokestatic  #66
340: ldc           #77
342: invokestatic  #68
345: new           #22
348: dup
349: invokespecial #23
352: ldc           #24
354: invokevirtual #25
357: iload         13
359: invokevirtual #69
362: ldc           #27
364: invokevirtual #25
367: iconst_1
368: invokevirtual #69
371: ldc           #24
373: invokevirtual #25
376: invokevirtual #28
379: iload         13
381: iconst_1
382: if_icmpne     389
385: iconst_1
386: goto          390
389: iconst_0
390: invokestatic  #29
393: new           #22
396: dup
397: invokespecial #23
400: ldc           #24
402: invokevirtual #25
405: iload         14
407: invokevirtual #69
410: ldc           #27
412: invokevirtual #25
415: iconst_1
416: invokevirtual #69
419: ldc           #24
421: invokevirtual #25
424: invokevirtual #28
427: iload         14
429: iconst_1
430: if_icmpne     437
433: iconst_1
434: goto          438
437: iconst_0
438: invokestatic  #29
441: new           #22
444: dup
445: invokespecial #23
448: ldc           #24
450: invokevirtual #25
453: lload         15
455: invokevirtual #26
458: ldc           #27
460: invokevirtual #25
463: lconst_0
464: invokevirtual #26
467: ldc           #24
469: invokevirtual #25
472: invokevirtual #28
475: lload         15
477: lconst_0
478: lcmp
479: ifne          486
482: iconst_1
483: goto          487
486: iconst_0
487: invokestatic  #29
490: return
Exception table:
from    to  target type
153   162   165   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test221
Start line: 8287
End line: 0
Method source code: 
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        tarArchiveOutputStream4.setLongFileMode((int) (byte) 83);
        try {
            tarArchiveOutputStream4.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #704
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: aload_3
79: bipush        83
81: invokevirtual #195
84: aload_3
85: invokevirtual #207
88: ldc           #83
90: invokestatic  #20
93: goto          98
96: astore        9
98: new           #22
101: dup
102: invokespecial #23
105: ldc           #24
107: invokevirtual #25
110: lload         4
112: invokevirtual #26
115: ldc           #27
117: invokevirtual #25
120: lconst_0
121: invokevirtual #26
124: ldc           #24
126: invokevirtual #25
129: invokevirtual #28
132: lload         4
134: lconst_0
135: lcmp
136: ifne          143
139: iconst_1
140: goto          144
143: iconst_0
144: invokestatic  #29
147: aload         6
149: invokestatic  #53
152: new           #22
155: dup
156: invokespecial #23
159: ldc           #24
161: invokevirtual #25
164: iload         7
166: invokevirtual #41
169: ldc           #27
171: invokevirtual #25
174: iconst_0
175: invokevirtual #41
178: ldc           #24
180: invokevirtual #25
183: invokevirtual #28
186: iload         7
188: ifne          195
191: iconst_1
192: goto          196
195: iconst_0
196: invokestatic  #29
199: new           #22
202: dup
203: invokespecial #23
206: ldc           #24
208: invokevirtual #25
211: iload         8
213: invokevirtual #41
216: ldc           #27
218: invokevirtual #25
221: iconst_0
222: invokevirtual #41
225: ldc           #24
227: invokevirtual #25
230: invokevirtual #28
233: iload         8
235: ifne          242
238: iconst_1
239: goto          243
242: iconst_0
243: invokestatic  #29
246: return
Exception table:
from    to  target type
84    93    96   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test222
Start line: 8313
End line: 0
Method source code: 
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        jarArchiveOutputStream12.setEncoding("5");
        try {
            jarArchiveOutputStream12.write(10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #705
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: aload         10
105: ldc_w         #458
108: invokevirtual #459
111: aload         10
113: bipush        10
115: invokevirtual #702
118: ldc           #51
120: invokestatic  #20
123: goto          128
126: astore        11
128: new           #22
131: dup
132: invokespecial #23
135: ldc           #24
137: invokevirtual #25
140: lload         4
142: invokevirtual #26
145: ldc           #27
147: invokevirtual #25
150: lconst_0
151: invokevirtual #26
154: ldc           #24
156: invokevirtual #25
159: invokevirtual #28
162: lload         4
164: lconst_0
165: lcmp
166: ifne          173
169: iconst_1
170: goto          174
173: iconst_0
174: invokestatic  #29
177: aload         6
179: invokestatic  #53
182: new           #22
185: dup
186: invokespecial #23
189: ldc           #24
191: invokevirtual #25
194: iload         7
196: invokevirtual #41
199: ldc           #27
201: invokevirtual #25
204: iconst_0
205: invokevirtual #41
208: ldc           #24
210: invokevirtual #25
213: invokevirtual #28
216: iload         7
218: ifne          225
221: iconst_1
222: goto          226
225: iconst_0
226: invokestatic  #29
229: return
Exception table:
from    to  target type
111   123   126   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test223
Start line: 8340
End line: 0
Method source code: 
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong12 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray13 = zipLong12.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong15 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray16 = zipLong15.getBytes();
        boolean boolean18 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray13, byteArray16, true);
        boolean boolean19 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray13);
        tarArchiveOutputStream4.write(byteArray13, (int) (short) 4, (int) (byte) -1);
        tarArchiveOutputStream4.setAddPaxHeadersForNonAsciiNames(true);
        try {
            tarArchiveOutputStream4.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #706
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: new           #73
81: dup
82: lconst_0
83: invokespecial #74
86: astore        9
88: aload         9
90: invokevirtual #75
93: astore        10
95: new           #73
98: dup
99: lconst_0
100: invokespecial #74
103: astore        11
105: aload         11
107: invokevirtual #75
110: astore        12
112: aload         10
114: aload         12
116: iconst_1
117: invokestatic  #177
120: istore        13
122: aload         10
124: invokestatic  #192
127: istore        14
129: aload_3
130: aload         10
132: iconst_4
133: iconst_m1
134: invokevirtual #63
137: aload_3
138: iconst_1
139: invokevirtual #148
142: aload_3
143: invokevirtual #250
146: ldc           #51
148: invokestatic  #20
151: goto          156
154: astore        15
156: new           #22
159: dup
160: invokespecial #23
163: ldc           #24
165: invokevirtual #25
168: lload         4
170: invokevirtual #26
173: ldc           #27
175: invokevirtual #25
178: lconst_0
179: invokevirtual #26
182: ldc           #24
184: invokevirtual #25
187: invokevirtual #28
190: lload         4
192: lconst_0
193: lcmp
194: ifne          201
197: iconst_1
198: goto          202
201: iconst_0
202: invokestatic  #29
205: aload         6
207: invokestatic  #53
210: new           #22
213: dup
214: invokespecial #23
217: ldc           #24
219: invokevirtual #25
222: iload         7
224: invokevirtual #41
227: ldc           #27
229: invokevirtual #25
232: iconst_0
233: invokevirtual #41
236: ldc           #24
238: invokevirtual #25
241: invokevirtual #28
244: iload         7
246: ifne          253
249: iconst_1
250: goto          254
253: iconst_0
254: invokestatic  #29
257: new           #22
260: dup
261: invokespecial #23
264: ldc           #24
266: invokevirtual #25
269: iload         8
271: invokevirtual #41
274: ldc           #27
276: invokevirtual #25
279: iconst_0
280: invokevirtual #41
283: ldc           #24
285: invokevirtual #25
288: invokevirtual #28
291: iload         8
293: ifne          300
296: iconst_1
297: goto          301
300: iconst_0
301: invokestatic  #29
304: aload         10
306: invokestatic  #53
309: aload         10
311: invokestatic  #66
314: ldc           #77
316: invokestatic  #68
319: aload         12
321: invokestatic  #53
324: aload         12
326: invokestatic  #66
329: ldc           #77
331: invokestatic  #68
334: new           #22
337: dup
338: invokespecial #23
341: ldc           #24
343: invokevirtual #25
346: iload         13
348: invokevirtual #69
351: ldc           #27
353: invokevirtual #25
356: iconst_1
357: invokevirtual #69
360: ldc           #24
362: invokevirtual #25
365: invokevirtual #28
368: iload         13
370: iconst_1
371: if_icmpne     378
374: iconst_1
375: goto          379
378: iconst_0
379: invokestatic  #29
382: new           #22
385: dup
386: invokespecial #23
389: ldc           #24
391: invokevirtual #25
394: iload         14
396: invokevirtual #69
399: ldc           #27
401: invokevirtual #25
404: iconst_1
405: invokevirtual #69
408: ldc           #24
410: invokevirtual #25
413: invokevirtual #28
416: iload         14
418: iconst_1
419: if_icmpne     426
422: iconst_1
423: goto          427
426: iconst_0
427: invokestatic  #29
430: return
Exception table:
from    to  target type
142   151   154   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test224
Start line: 8379
End line: 0
Method source code: 
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream19 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) archiveInputStream18);
        boolean boolean20 = archiveInputStream18.markSupported();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #707
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: new           #33
139: dup
140: aload         15
142: invokespecial #34
145: astore        16
147: aload         15
149: invokevirtual #708
152: istore        17
154: new           #22
157: dup
158: invokespecial #23
161: ldc           #24
163: invokevirtual #25
166: lload         4
168: invokevirtual #26
171: ldc           #27
173: invokevirtual #25
176: lconst_0
177: invokevirtual #26
180: ldc           #24
182: invokevirtual #25
185: invokevirtual #28
188: lload         4
190: lconst_0
191: lcmp
192: ifne          199
195: iconst_1
196: goto          200
199: iconst_0
200: invokestatic  #29
203: aload         6
205: invokestatic  #53
208: new           #22
211: dup
212: invokespecial #23
215: ldc           #24
217: invokevirtual #25
220: lload         9
222: invokevirtual #26
225: ldc           #27
227: invokevirtual #25
230: lconst_0
231: invokevirtual #26
234: ldc           #24
236: invokevirtual #25
239: invokevirtual #28
242: lload         9
244: lconst_0
245: lcmp
246: ifne          253
249: iconst_1
250: goto          254
253: iconst_0
254: invokestatic  #29
257: new           #22
260: dup
261: invokespecial #23
264: ldc           #24
266: invokevirtual #25
269: lload         11
271: invokevirtual #26
274: ldc           #27
276: invokevirtual #25
279: lconst_0
280: invokevirtual #26
283: ldc           #24
285: invokevirtual #25
288: invokevirtual #28
291: lload         11
293: lconst_0
294: lcmp
295: ifne          302
298: iconst_1
299: goto          303
302: iconst_0
303: invokestatic  #29
306: aload         15
308: invokestatic  #53
311: new           #22
314: dup
315: invokespecial #23
318: ldc           #24
320: invokevirtual #25
323: iload         17
325: invokevirtual #69
328: ldc           #27
330: invokevirtual #25
333: iconst_0
334: invokevirtual #69
337: ldc           #24
339: invokevirtual #25
342: invokevirtual #28
345: iload         17
347: ifne          354
350: iconst_1
351: goto          355
354: iconst_0
355: invokestatic  #29
358: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test225
Start line: 8408
End line: 0
Method source code: 
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9);
        boolean boolean11 = zipArchiveOutputStream9.isSeekable();
        zipArchiveOutputStream9.flush();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #709
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: new           #222
80: dup
81: aload         7
83: invokespecial #223
86: astore        8
88: aload         7
90: invokevirtual #185
93: istore        9
95: aload         7
97: invokevirtual #313
100: new           #22
103: dup
104: invokespecial #23
107: ldc           #24
109: invokevirtual #25
112: lload         4
114: invokevirtual #26
117: ldc           #27
119: invokevirtual #25
122: lconst_0
123: invokevirtual #26
126: ldc           #24
128: invokevirtual #25
131: invokevirtual #28
134: lload         4
136: lconst_0
137: lcmp
138: ifne          145
141: iconst_1
142: goto          146
145: iconst_0
146: invokestatic  #29
149: aload         6
151: invokestatic  #53
154: new           #22
157: dup
158: invokespecial #23
161: ldc           #24
163: invokevirtual #25
166: iload         9
168: invokevirtual #69
171: ldc           #27
173: invokevirtual #25
176: iconst_0
177: invokevirtual #69
180: ldc           #24
182: invokevirtual #25
185: invokevirtual #28
188: iload         9
190: ifne          197
193: iconst_1
194: goto          198
197: iconst_0
198: invokestatic  #29
201: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test226
Start line: 8427
End line: 0
Method source code: 
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream19 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) archiveInputStream18);
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry20 = cpioArchiveInputStream19.getNextCPIOEntry();
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #710
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: new           #33
139: dup
140: aload         15
142: invokespecial #34
145: astore        16
147: aload         16
149: invokevirtual #711
152: astore        17
154: ldc_w         #333
157: invokestatic  #20
160: goto          165
163: astore        17
165: new           #22
168: dup
169: invokespecial #23
172: ldc           #24
174: invokevirtual #25
177: lload         4
179: invokevirtual #26
182: ldc           #27
184: invokevirtual #25
187: lconst_0
188: invokevirtual #26
191: ldc           #24
193: invokevirtual #25
196: invokevirtual #28
199: lload         4
201: lconst_0
202: lcmp
203: ifne          210
206: iconst_1
207: goto          211
210: iconst_0
211: invokestatic  #29
214: aload         6
216: invokestatic  #53
219: new           #22
222: dup
223: invokespecial #23
226: ldc           #24
228: invokevirtual #25
231: lload         9
233: invokevirtual #26
236: ldc           #27
238: invokevirtual #25
241: lconst_0
242: invokevirtual #26
245: ldc           #24
247: invokevirtual #25
250: invokevirtual #28
253: lload         9
255: lconst_0
256: lcmp
257: ifne          264
260: iconst_1
261: goto          265
264: iconst_0
265: invokestatic  #29
268: new           #22
271: dup
272: invokespecial #23
275: ldc           #24
277: invokevirtual #25
280: lload         11
282: invokevirtual #26
285: ldc           #27
287: invokevirtual #25
290: lconst_0
291: invokevirtual #26
294: ldc           #24
296: invokevirtual #25
299: invokevirtual #28
302: lload         11
304: lconst_0
305: lcmp
306: ifne          313
309: iconst_1
310: goto          314
313: iconst_0
314: invokestatic  #29
317: aload         15
319: invokestatic  #53
322: return
Exception table:
from    to  target type
147   160   163   Class java/io/EOFException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test227
Start line: 8461
End line: 0
Method source code: 
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.InputStream inputStream27 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream28 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream27);
        long long29 = jarArchiveInputStream28.getBytesRead();
        long long30 = jarArchiveInputStream28.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream31 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream28);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream32 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream28);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream33 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream32);
        int int34 = cpioArchiveInputStream33.available();
        int int35 = cpioArchiveInputStream33.getCount();
        cpioArchiveInputStream33.close();
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream39 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream33, "x5S", false);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream40 = archiveStreamFactory0.createArchiveInputStream("org.apache.commons.compress.archivers.ArchiveException: 070707", (java.io.InputStream) zipArchiveInputStream39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.ArchiveException: 070707 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #712
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #10
200: dup
201: aload         24
203: invokespecial #11
206: astore        25
208: aload         25
210: invokevirtual #12
213: lstore        26
215: aload         25
217: invokevirtual #12
220: lstore        28
222: new           #13
225: dup
226: aload         25
228: invokespecial #14
231: astore        30
233: new           #31
236: dup
237: aload         25
239: invokespecial #32
242: astore        31
244: new           #33
247: dup
248: aload         31
250: invokespecial #34
253: astore        32
255: aload         32
257: invokevirtual #35
260: istore        33
262: aload         32
264: invokevirtual #36
267: istore        34
269: aload         32
271: invokevirtual #127
274: new           #15
277: dup
278: aload         32
280: ldc           #153
282: iconst_0
283: invokespecial #203
286: astore        35
288: aload_1
289: ldc_w         #713
292: aload         35
294: invokevirtual #38
297: astore        36
299: ldc_w         #714
302: invokestatic  #20
305: goto          310
308: astore        36
310: new           #22
313: dup
314: invokespecial #23
317: ldc           #24
319: invokevirtual #25
322: lload         4
324: invokevirtual #26
327: ldc           #27
329: invokevirtual #25
332: lconst_0
333: invokevirtual #26
336: ldc           #24
338: invokevirtual #25
341: invokevirtual #28
344: lload         4
346: lconst_0
347: lcmp
348: ifne          355
351: iconst_1
352: goto          356
355: iconst_0
356: invokestatic  #29
359: new           #22
362: dup
363: invokespecial #23
366: ldc           #24
368: invokevirtual #25
371: lload         6
373: invokevirtual #26
376: ldc           #27
378: invokevirtual #25
381: lconst_0
382: invokevirtual #26
385: ldc           #24
387: invokevirtual #25
390: invokevirtual #28
393: lload         6
395: lconst_0
396: lcmp
397: ifne          404
400: iconst_1
401: goto          405
404: iconst_0
405: invokestatic  #29
408: aload         10
410: invokestatic  #168
413: aload         11
415: invokestatic  #168
418: aload         13
420: invokestatic  #53
423: new           #22
426: dup
427: invokespecial #23
430: ldc           #24
432: invokevirtual #25
435: lload         16
437: invokevirtual #26
440: ldc           #27
442: invokevirtual #25
445: lconst_0
446: invokevirtual #26
449: ldc           #24
451: invokevirtual #25
454: invokevirtual #28
457: lload         16
459: lconst_0
460: lcmp
461: ifne          468
464: iconst_1
465: goto          469
468: iconst_0
469: invokestatic  #29
472: new           #22
475: dup
476: invokespecial #23
479: ldc           #24
481: invokevirtual #25
484: lload         18
486: invokevirtual #26
489: ldc           #27
491: invokevirtual #25
494: lconst_0
495: invokevirtual #26
498: ldc           #24
500: invokevirtual #25
503: invokevirtual #28
506: lload         18
508: lconst_0
509: lcmp
510: ifne          517
513: iconst_1
514: goto          518
517: iconst_0
518: invokestatic  #29
521: aload         21
523: invokestatic  #168
526: aload         23
528: invokestatic  #53
531: new           #22
534: dup
535: invokespecial #23
538: ldc           #24
540: invokevirtual #25
543: lload         26
545: invokevirtual #26
548: ldc           #27
550: invokevirtual #25
553: lconst_0
554: invokevirtual #26
557: ldc           #24
559: invokevirtual #25
562: invokevirtual #28
565: lload         26
567: lconst_0
568: lcmp
569: ifne          576
572: iconst_1
573: goto          577
576: iconst_0
577: invokestatic  #29
580: new           #22
583: dup
584: invokespecial #23
587: ldc           #24
589: invokevirtual #25
592: lload         28
594: invokevirtual #26
597: ldc           #27
599: invokevirtual #25
602: lconst_0
603: invokevirtual #26
606: ldc           #24
608: invokevirtual #25
611: invokevirtual #28
614: lload         28
616: lconst_0
617: lcmp
618: ifne          625
621: iconst_1
622: goto          626
625: iconst_0
626: invokestatic  #29
629: new           #22
632: dup
633: invokespecial #23
636: ldc           #24
638: invokevirtual #25
641: iload         33
643: invokevirtual #41
646: ldc           #27
648: invokevirtual #25
651: iconst_1
652: invokevirtual #41
655: ldc           #24
657: invokevirtual #25
660: invokevirtual #28
663: iload         33
665: iconst_1
666: if_icmpne     673
669: iconst_1
670: goto          674
673: iconst_0
674: invokestatic  #29
677: new           #22
680: dup
681: invokespecial #23
684: ldc           #24
686: invokevirtual #25
689: iload         34
691: invokevirtual #41
694: ldc           #27
696: invokevirtual #25
699: iconst_0
700: invokevirtual #41
703: ldc           #24
705: invokevirtual #25
708: invokevirtual #28
711: iload         34
713: ifne          720
716: iconst_1
717: goto          721
720: iconst_0
721: invokestatic  #29
724: return
Exception table:
from    to  target type
288   305   308   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test228
Start line: 8519
End line: 0
Method source code: 
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream23 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream22);
        int int24 = cpioArchiveInputStream23.available();
        int int25 = cpioArchiveInputStream23.getCount();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream26 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream23);
        cpioArchiveInputStream23.count((long) (byte) 1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream30 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream23, "070707");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry32 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int33 = tarArchiveEntry32.getDevMinor();
        tarArchiveEntry32.setIds((int) (short) 3, 0);
        int int37 = tarArchiveEntry32.getDevMajor();
        boolean boolean38 = tarArchiveEntry32.isFile();
        java.io.InputStream inputStream39 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream40 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream39);
        long long41 = jarArchiveInputStream40.getBytesRead();
        long long42 = jarArchiveInputStream40.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream43 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream40);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream44 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream40);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream45 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream44);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream49 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream45, "070702", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry52 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry52.setDevMinor((int) ' ');
        boolean boolean55 = cpioArchiveInputStream45.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry52);
        boolean boolean56 = tarArchiveEntry32.equals((java.lang.Object) tarArchiveEntry52);
        boolean boolean57 = tarArchiveInputStream30.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry52);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream58 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream30);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream59 = archiveStreamFactory0.createArchiveInputStream("", (java.io.InputStream) zipArchiveInputStream58);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver:  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #715
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: new           #31
164: dup
165: aload         15
167: invokespecial #32
170: astore        21
172: new           #33
175: dup
176: aload         21
178: invokespecial #34
181: astore        22
183: aload         22
185: invokevirtual #35
188: istore        23
190: aload         22
192: invokevirtual #36
195: istore        24
197: new           #10
200: dup
201: aload         22
203: invokespecial #11
206: astore        25
208: aload         22
210: lconst_1
211: invokevirtual #695
214: new           #31
217: dup
218: aload         22
220: ldc_w         #642
223: invokespecial #575
226: astore        26
228: new           #112
231: dup
232: ldc           #44
234: invokespecial #120
237: astore        27
239: aload         27
241: invokevirtual #129
244: istore        28
246: aload         27
248: iconst_3
249: iconst_0
250: invokevirtual #130
253: aload         27
255: invokevirtual #131
258: istore        29
260: aload         27
262: invokevirtual #132
265: istore        30
267: aconst_null
268: astore        31
270: new           #10
273: dup
274: aload         31
276: invokespecial #11
279: astore        32
281: aload         32
283: invokevirtual #12
286: lstore        33
288: aload         32
290: invokevirtual #12
293: lstore        35
295: new           #13
298: dup
299: aload         32
301: invokespecial #14
304: astore        37
306: new           #31
309: dup
310: aload         32
312: invokespecial #32
315: astore        38
317: new           #33
320: dup
321: aload         38
323: invokespecial #34
326: astore        39
328: new           #15
331: dup
332: aload         39
334: ldc           #111
336: iconst_0
337: iconst_0
338: invokespecial #17
341: astore        40
343: new           #112
346: dup
347: ldc           #61
349: iconst_0
350: invokespecial #113
353: astore        41
355: aload         41
357: bipush        32
359: invokevirtual #114
362: aload         39
364: aload         41
366: invokevirtual #115
369: istore        42
371: aload         27
373: aload         41
375: invokevirtual #133
378: istore        43
380: aload         26
382: aload         41
384: invokevirtual #116
387: istore        44
389: new           #15
392: dup
393: aload         26
395: invokespecial #300
398: astore        45
400: aload_1
401: ldc           #61
403: aload         45
405: invokevirtual #38
408: astore        46
410: ldc           #204
412: invokestatic  #20
415: goto          420
418: astore        46
420: new           #22
423: dup
424: invokespecial #23
427: ldc           #24
429: invokevirtual #25
432: lload         4
434: invokevirtual #26
437: ldc           #27
439: invokevirtual #25
442: lconst_0
443: invokevirtual #26
446: ldc           #24
448: invokevirtual #25
451: invokevirtual #28
454: lload         4
456: lconst_0
457: lcmp
458: ifne          465
461: iconst_1
462: goto          466
465: iconst_0
466: invokestatic  #29
469: new           #22
472: dup
473: invokespecial #23
476: ldc           #24
478: invokevirtual #25
481: lload         6
483: invokevirtual #26
486: ldc           #27
488: invokevirtual #25
491: lconst_0
492: invokevirtual #26
495: ldc           #24
497: invokevirtual #25
500: invokevirtual #28
503: lload         6
505: lconst_0
506: lcmp
507: ifne          514
510: iconst_1
511: goto          515
514: iconst_0
515: invokestatic  #29
518: aload         10
520: invokestatic  #168
523: aload         11
525: invokestatic  #168
528: aload         13
530: invokestatic  #53
533: new           #22
536: dup
537: invokespecial #23
540: ldc           #24
542: invokevirtual #25
545: lload         16
547: invokevirtual #26
550: ldc           #27
552: invokevirtual #25
555: lconst_0
556: invokevirtual #26
559: ldc           #24
561: invokevirtual #25
564: invokevirtual #28
567: lload         16
569: lconst_0
570: lcmp
571: ifne          578
574: iconst_1
575: goto          579
578: iconst_0
579: invokestatic  #29
582: new           #22
585: dup
586: invokespecial #23
589: ldc           #24
591: invokevirtual #25
594: lload         18
596: invokevirtual #26
599: ldc           #27
601: invokevirtual #25
604: lconst_0
605: invokevirtual #26
608: ldc           #24
610: invokevirtual #25
613: invokevirtual #28
616: lload         18
618: lconst_0
619: lcmp
620: ifne          627
623: iconst_1
624: goto          628
627: iconst_0
628: invokestatic  #29
631: new           #22
634: dup
635: invokespecial #23
638: ldc           #24
640: invokevirtual #25
643: iload         23
645: invokevirtual #41
648: ldc           #27
650: invokevirtual #25
653: iconst_1
654: invokevirtual #41
657: ldc           #24
659: invokevirtual #25
662: invokevirtual #28
665: iload         23
667: iconst_1
668: if_icmpne     675
671: iconst_1
672: goto          676
675: iconst_0
676: invokestatic  #29
679: new           #22
682: dup
683: invokespecial #23
686: ldc           #24
688: invokevirtual #25
691: iload         24
693: invokevirtual #41
696: ldc           #27
698: invokevirtual #25
701: iconst_0
702: invokevirtual #41
705: ldc           #24
707: invokevirtual #25
710: invokevirtual #28
713: iload         24
715: ifne          722
718: iconst_1
719: goto          723
722: iconst_0
723: invokestatic  #29
726: new           #22
729: dup
730: invokespecial #23
733: ldc           #24
735: invokevirtual #25
738: iload         28
740: invokevirtual #41
743: ldc           #27
745: invokevirtual #25
748: iconst_0
749: invokevirtual #41
752: ldc           #24
754: invokevirtual #25
757: invokevirtual #28
760: iload         28
762: ifne          769
765: iconst_1
766: goto          770
769: iconst_0
770: invokestatic  #29
773: new           #22
776: dup
777: invokespecial #23
780: ldc           #24
782: invokevirtual #25
785: iload         29
787: invokevirtual #41
790: ldc           #27
792: invokevirtual #25
795: iconst_0
796: invokevirtual #41
799: ldc           #24
801: invokevirtual #25
804: invokevirtual #28
807: iload         29
809: ifne          816
812: iconst_1
813: goto          817
816: iconst_0
817: invokestatic  #29
820: new           #22
823: dup
824: invokespecial #23
827: ldc           #24
829: invokevirtual #25
832: iload         30
834: invokevirtual #69
837: ldc           #27
839: invokevirtual #25
842: iconst_1
843: invokevirtual #69
846: ldc           #24
848: invokevirtual #25
851: invokevirtual #28
854: iload         30
856: iconst_1
857: if_icmpne     864
860: iconst_1
861: goto          865
864: iconst_0
865: invokestatic  #29
868: new           #22
871: dup
872: invokespecial #23
875: ldc           #24
877: invokevirtual #25
880: lload         33
882: invokevirtual #26
885: ldc           #27
887: invokevirtual #25
890: lconst_0
891: invokevirtual #26
894: ldc           #24
896: invokevirtual #25
899: invokevirtual #28
902: lload         33
904: lconst_0
905: lcmp
906: ifne          913
909: iconst_1
910: goto          914
913: iconst_0
914: invokestatic  #29
917: new           #22
920: dup
921: invokespecial #23
924: ldc           #24
926: invokevirtual #25
929: lload         35
931: invokevirtual #26
934: ldc           #27
936: invokevirtual #25
939: lconst_0
940: invokevirtual #26
943: ldc           #24
945: invokevirtual #25
948: invokevirtual #28
951: lload         35
953: lconst_0
954: lcmp
955: ifne          962
958: iconst_1
959: goto          963
962: iconst_0
963: invokestatic  #29
966: new           #22
969: dup
970: invokespecial #23
973: ldc           #24
975: invokevirtual #25
978: iload         42
980: invokevirtual #69
983: ldc           #27
985: invokevirtual #25
988: iconst_1
989: invokevirtual #69
992: ldc           #24
994: invokevirtual #25
997: invokevirtual #28
1000: iload         42
1002: iconst_1
1003: if_icmpne     1010
1006: iconst_1
1007: goto          1011
1010: iconst_0
1011: invokestatic  #29
1014: new           #22
1017: dup
1018: invokespecial #23
1021: ldc           #24
1023: invokevirtual #25
1026: iload         43
1028: invokevirtual #69
1031: ldc           #27
1033: invokevirtual #25
1036: iconst_0
1037: invokevirtual #69
1040: ldc           #24
1042: invokevirtual #25
1045: invokevirtual #28
1048: iload         43
1050: ifne          1057
1053: iconst_1
1054: goto          1058
1057: iconst_0
1058: invokestatic  #29
1061: new           #22
1064: dup
1065: invokespecial #23
1068: ldc           #24
1070: invokevirtual #25
1073: iload         44
1075: invokevirtual #69
1078: ldc           #27
1080: invokevirtual #25
1083: iconst_1
1084: invokevirtual #69
1087: ldc           #24
1089: invokevirtual #25
1092: invokevirtual #28
1095: iload         44
1097: iconst_1
1098: if_icmpne     1105
1101: iconst_1
1102: goto          1106
1105: iconst_0
1106: invokestatic  #29
1109: return
Exception table:
from    to  target type
400   415   418   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test229
Start line: 8592
End line: 0
Method source code: 
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        tarArchiveEntry1.setDevMajor((int) (short) 10);
        boolean boolean15 = tarArchiveEntry1.isDirectory();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #716
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: bipush        10
97: invokevirtual #287
100: aload_1
101: invokevirtual #378
104: istore        11
106: new           #22
109: dup
110: invokespecial #23
113: ldc           #24
115: invokevirtual #25
118: lload         5
120: invokevirtual #26
123: ldc           #27
125: invokevirtual #25
128: lconst_0
129: invokevirtual #26
132: ldc           #24
134: invokevirtual #25
137: invokevirtual #28
140: lload         5
142: lconst_0
143: lcmp
144: ifne          151
147: iconst_1
148: goto          152
151: iconst_0
152: invokestatic  #29
155: aload         7
157: invokestatic  #53
160: new           #22
163: dup
164: invokespecial #23
167: ldc           #24
169: invokevirtual #25
172: iload         8
174: invokevirtual #69
177: ldc           #27
179: invokevirtual #25
182: iconst_0
183: invokevirtual #69
186: ldc           #24
188: invokevirtual #25
191: invokevirtual #28
194: iload         8
196: ifne          203
199: iconst_1
200: goto          204
203: iconst_0
204: invokestatic  #29
207: new           #22
210: dup
211: invokespecial #23
214: ldc           #24
216: invokevirtual #25
219: lload         9
221: invokevirtual #26
224: ldc           #27
226: invokevirtual #25
229: lconst_0
230: invokevirtual #26
233: ldc           #24
235: invokevirtual #25
238: invokevirtual #28
241: lload         9
243: lconst_0
244: lcmp
245: ifne          252
248: iconst_1
249: goto          253
252: iconst_0
253: invokestatic  #29
256: new           #22
259: dup
260: invokespecial #23
263: ldc           #24
265: invokevirtual #25
268: iload         11
270: invokevirtual #69
273: ldc           #27
275: invokevirtual #25
278: iconst_0
279: invokevirtual #69
282: ldc           #24
284: invokevirtual #25
287: invokevirtual #28
290: iload         11
292: ifne          299
295: iconst_1
296: goto          300
299: iconst_0
300: invokestatic  #29
303: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test230
Start line: 8614
End line: 0
Method source code: 
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream11 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream11);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong14 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray15 = zipLong14.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong17 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray18 = zipLong17.getBytes();
        boolean boolean20 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray15, byteArray18, true);
        int int23 = tarArchiveInputStream12.read(byteArray15, 0, 32);
        tarArchiveInputStream12.mark((int) '#');
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream26 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream12);
        java.io.OutputStream outputStream27 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar");
        tarArchiveOutputStream29.count(0L);
        int int32 = tarArchiveOutputStream29.getCount();
        tarArchiveOutputStream29.setBigNumberMode(2);
        tarArchiveOutputStream29.setAddPaxHeadersForNonAsciiNames(true);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry38 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int39 = tarArchiveEntry38.getDevMinor();
        boolean boolean40 = tarArchiveOutputStream29.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry38);
        boolean boolean41 = tarArchiveInputStream12.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry38);
        java.lang.String str42 = tarArchiveEntry38.getLinkName();
        try {
            tarArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry38);
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar");
        } catch (java.io.UnsupportedEncodingException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #717
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: aconst_null
83: astore        9
85: new           #31
88: dup
89: aload         9
91: invokespecial #32
94: astore        10
96: new           #73
99: dup
100: lconst_0
101: invokespecial #74
104: astore        11
106: aload         11
108: invokevirtual #75
111: astore        12
113: new           #73
116: dup
117: lconst_0
118: invokespecial #74
121: astore        13
123: aload         13
125: invokevirtual #75
128: astore        14
130: aload         12
132: aload         14
134: iconst_1
135: invokestatic  #177
138: istore        15
140: aload         10
142: aload         12
144: iconst_0
145: bipush        32
147: invokevirtual #174
150: istore        16
152: aload         10
154: bipush        35
156: invokevirtual #178
159: new           #13
162: dup
163: aload         10
165: invokespecial #14
168: astore        17
170: aconst_null
171: astore        18
173: new           #43
176: dup
177: aload         18
179: ldc           #44
181: invokespecial #45
184: astore        19
186: aload         19
188: lconst_0
189: invokevirtual #46
192: aload         19
194: invokevirtual #60
197: istore        20
199: aload         19
201: iconst_2
202: invokevirtual #281
205: aload         19
207: iconst_1
208: invokevirtual #148
211: new           #112
214: dup
215: ldc           #44
217: invokespecial #120
220: astore        21
222: aload         21
224: invokevirtual #129
227: istore        22
229: aload         19
231: aload         21
233: invokevirtual #379
236: istore        23
238: aload         10
240: aload         21
242: invokevirtual #116
245: istore        24
247: aload         21
249: invokevirtual #423
252: astore        25
254: aload_3
255: aload         21
257: invokevirtual #136
260: ldc           #137
262: invokestatic  #20
265: goto          270
268: astore        26
270: new           #22
273: dup
274: invokespecial #23
277: ldc           #24
279: invokevirtual #25
282: lload         4
284: invokevirtual #26
287: ldc           #27
289: invokevirtual #25
292: lconst_0
293: invokevirtual #26
296: ldc           #24
298: invokevirtual #25
301: invokevirtual #28
304: lload         4
306: lconst_0
307: lcmp
308: ifne          315
311: iconst_1
312: goto          316
315: iconst_0
316: invokestatic  #29
319: aload         6
321: invokestatic  #53
324: new           #22
327: dup
328: invokespecial #23
331: ldc           #24
333: invokevirtual #25
336: iload         7
338: invokevirtual #41
341: ldc           #27
343: invokevirtual #25
346: iconst_0
347: invokevirtual #41
350: ldc           #24
352: invokevirtual #25
355: invokevirtual #28
358: iload         7
360: ifne          367
363: iconst_1
364: goto          368
367: iconst_0
368: invokestatic  #29
371: aload         12
373: invokestatic  #53
376: aload         12
378: invokestatic  #66
381: ldc           #77
383: invokestatic  #68
386: aload         14
388: invokestatic  #53
391: aload         14
393: invokestatic  #66
396: ldc           #77
398: invokestatic  #68
401: new           #22
404: dup
405: invokespecial #23
408: ldc           #24
410: invokevirtual #25
413: iload         15
415: invokevirtual #69
418: ldc           #27
420: invokevirtual #25
423: iconst_1
424: invokevirtual #69
427: ldc           #24
429: invokevirtual #25
432: invokevirtual #28
435: iload         15
437: iconst_1
438: if_icmpne     445
441: iconst_1
442: goto          446
445: iconst_0
446: invokestatic  #29
449: new           #22
452: dup
453: invokespecial #23
456: ldc           #24
458: invokevirtual #25
461: iload         16
463: invokevirtual #41
466: ldc           #27
468: invokevirtual #25
471: iconst_m1
472: invokevirtual #41
475: ldc           #24
477: invokevirtual #25
480: invokevirtual #28
483: iload         16
485: iconst_m1
486: if_icmpne     493
489: iconst_1
490: goto          494
493: iconst_0
494: invokestatic  #29
497: new           #22
500: dup
501: invokespecial #23
504: ldc           #24
506: invokevirtual #25
509: iload         20
511: invokevirtual #41
514: ldc           #27
516: invokevirtual #25
519: iconst_0
520: invokevirtual #41
523: ldc           #24
525: invokevirtual #25
528: invokevirtual #28
531: iload         20
533: ifne          540
536: iconst_1
537: goto          541
540: iconst_0
541: invokestatic  #29
544: new           #22
547: dup
548: invokespecial #23
551: ldc           #24
553: invokevirtual #25
556: iload         22
558: invokevirtual #41
561: ldc           #27
563: invokevirtual #25
566: iconst_0
567: invokevirtual #41
570: ldc           #24
572: invokevirtual #25
575: invokevirtual #28
578: iload         22
580: ifne          587
583: iconst_1
584: goto          588
587: iconst_0
588: invokestatic  #29
591: new           #22
594: dup
595: invokespecial #23
598: ldc           #24
600: invokevirtual #25
603: iload         23
605: invokevirtual #69
608: ldc           #27
610: invokevirtual #25
613: iconst_1
614: invokevirtual #69
617: ldc           #24
619: invokevirtual #25
622: invokevirtual #28
625: iload         23
627: iconst_1
628: if_icmpne     635
631: iconst_1
632: goto          636
635: iconst_0
636: invokestatic  #29
639: new           #22
642: dup
643: invokespecial #23
646: ldc           #24
648: invokevirtual #25
651: iload         24
653: invokevirtual #69
656: ldc           #27
658: invokevirtual #25
661: iconst_1
662: invokevirtual #69
665: ldc           #24
667: invokevirtual #25
670: invokevirtual #28
673: iload         24
675: iconst_1
676: if_icmpne     683
679: iconst_1
680: goto          684
683: iconst_0
684: invokestatic  #29
687: new           #22
690: dup
691: invokespecial #23
694: ldc           #24
696: invokevirtual #25
699: aload         25
701: invokevirtual #25
704: ldc           #219
706: invokevirtual #25
709: invokevirtual #28
712: aload         25
714: ldc           #61
716: invokestatic  #154
719: return
Exception table:
from    to  target type
254   265   268   Class java/io/UnsupportedEncodingException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test231
Start line: 8670
End line: 0
Method source code: 
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream16 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream17 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream16);
        long long18 = jarArchiveInputStream17.getBytesRead();
        long long19 = jarArchiveInputStream17.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream20 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream17);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream17);
        long long23 = jarArchiveInputStream17.skip((long) 24576);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream17);
        org.apache.commons.compress.archivers.jar.JarArchiveEntry jarArchiveEntry25 = jarArchiveInputStream24.getNextJarEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry26 = jarArchiveInputStream24.getNextEntry();
        jarArchiveInputStream24.count(0L);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry29 = jarArchiveInputStream24.getNextEntry();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream30 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) jarArchiveInputStream24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNull(jarArchiveEntry25);
        org.junit.Assert.assertNull(archiveEntry26);
        org.junit.Assert.assertNull(archiveEntry29);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #718
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: new           #31
164: dup
165: aload         15
167: invokespecial #32
170: astore        21
172: aload         15
174: ldc2_w        #561
177: invokevirtual #563
180: lstore        22
182: new           #10
185: dup
186: aload         15
188: invokespecial #11
191: astore        24
193: aload         24
195: invokevirtual #499
198: astore        25
200: aload         24
202: invokevirtual #166
205: astore        26
207: aload         24
209: lconst_0
210: invokevirtual #569
213: aload         24
215: invokevirtual #166
218: astore        27
220: aload_1
221: aload         24
223: invokevirtual #18
226: astore        28
228: ldc           #19
230: invokestatic  #20
233: goto          238
236: astore        28
238: new           #22
241: dup
242: invokespecial #23
245: ldc           #24
247: invokevirtual #25
250: lload         4
252: invokevirtual #26
255: ldc           #27
257: invokevirtual #25
260: lconst_0
261: invokevirtual #26
264: ldc           #24
266: invokevirtual #25
269: invokevirtual #28
272: lload         4
274: lconst_0
275: lcmp
276: ifne          283
279: iconst_1
280: goto          284
283: iconst_0
284: invokestatic  #29
287: new           #22
290: dup
291: invokespecial #23
294: ldc           #24
296: invokevirtual #25
299: lload         6
301: invokevirtual #26
304: ldc           #27
306: invokevirtual #25
309: lconst_0
310: invokevirtual #26
313: ldc           #24
315: invokevirtual #25
318: invokevirtual #28
321: lload         6
323: lconst_0
324: lcmp
325: ifne          332
328: iconst_1
329: goto          333
332: iconst_0
333: invokestatic  #29
336: aload         10
338: invokestatic  #168
341: aload         11
343: invokestatic  #168
346: aload         13
348: invokestatic  #53
351: new           #22
354: dup
355: invokespecial #23
358: ldc           #24
360: invokevirtual #25
363: lload         16
365: invokevirtual #26
368: ldc           #27
370: invokevirtual #25
373: lconst_0
374: invokevirtual #26
377: ldc           #24
379: invokevirtual #25
382: invokevirtual #28
385: lload         16
387: lconst_0
388: lcmp
389: ifne          396
392: iconst_1
393: goto          397
396: iconst_0
397: invokestatic  #29
400: new           #22
403: dup
404: invokespecial #23
407: ldc           #24
409: invokevirtual #25
412: lload         18
414: invokevirtual #26
417: ldc           #27
419: invokevirtual #25
422: lconst_0
423: invokevirtual #26
426: ldc           #24
428: invokevirtual #25
431: invokevirtual #28
434: lload         18
436: lconst_0
437: lcmp
438: ifne          445
441: iconst_1
442: goto          446
445: iconst_0
446: invokestatic  #29
449: new           #22
452: dup
453: invokespecial #23
456: ldc           #24
458: invokevirtual #25
461: lload         22
463: invokevirtual #26
466: ldc           #27
468: invokevirtual #25
471: lconst_0
472: invokevirtual #26
475: ldc           #24
477: invokevirtual #25
480: invokevirtual #28
483: lload         22
485: lconst_0
486: lcmp
487: ifne          494
490: iconst_1
491: goto          495
494: iconst_0
495: invokestatic  #29
498: aload         25
500: invokestatic  #168
503: aload         26
505: invokestatic  #168
508: aload         27
510: invokestatic  #168
513: return
Exception table:
from    to  target type
220   233   236   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test232
Start line: 8718
End line: 0
Method source code: 
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        boolean boolean15 = tarArchiveEntry14.isGNUSparse();
        tarArchiveEntry14.setUserId(4096);
        tarArchiveEntry14.setMode(4096);
        try {
            arArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry14);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #719
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: new           #112
90: dup
91: ldc           #61
93: iconst_0
94: invokespecial #113
97: astore        10
99: aload         10
101: invokevirtual #422
104: istore        11
106: aload         10
108: sipush        4096
111: invokevirtual #272
114: aload         10
116: sipush        4096
119: invokevirtual #121
122: aload         9
124: aload         10
126: invokevirtual #288
129: ldc_w         #289
132: invokestatic  #20
135: goto          140
138: astore        12
140: new           #22
143: dup
144: invokespecial #23
147: ldc           #24
149: invokevirtual #25
152: lload         4
154: invokevirtual #26
157: ldc           #27
159: invokevirtual #25
162: lconst_0
163: invokevirtual #26
166: ldc           #24
168: invokevirtual #25
171: invokevirtual #28
174: lload         4
176: lconst_0
177: lcmp
178: ifne          185
181: iconst_1
182: goto          186
185: iconst_0
186: invokestatic  #29
189: aload         6
191: invokestatic  #53
194: new           #22
197: dup
198: invokespecial #23
201: ldc           #24
203: invokevirtual #25
206: lload         7
208: invokevirtual #26
211: ldc           #27
213: invokevirtual #25
216: lconst_0
217: invokevirtual #26
220: ldc           #24
222: invokevirtual #25
225: invokevirtual #28
228: lload         7
230: lconst_0
231: lcmp
232: ifne          239
235: iconst_1
236: goto          240
239: iconst_0
240: invokestatic  #29
243: new           #22
246: dup
247: invokespecial #23
250: ldc           #24
252: invokevirtual #25
255: iload         11
257: invokevirtual #69
260: ldc           #27
262: invokevirtual #25
265: iconst_0
266: invokevirtual #69
269: ldc           #24
271: invokevirtual #25
274: invokevirtual #28
277: iload         11
279: ifne          286
282: iconst_1
283: goto          287
286: iconst_0
287: invokestatic  #29
290: return
Exception table:
from    to  target type
122   135   138   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test233
Start line: 8748
End line: 0
Method source code: 
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        java.lang.String str20 = zipArchiveOutputStream13.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21);
        java.io.InputStream inputStream24 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24);
        long long26 = jarArchiveInputStream25.getBytesRead();
        long long27 = jarArchiveInputStream25.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25);
        arArchiveInputStream28.close();
        arArchiveInputStream28.pushedBackBytes((-1L));
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream28);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream33);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream33, "always", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream38, (int) (short) 8);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray43 = zipLong42.getBytes();
        long long44 = zipLong42.getValue();
        java.io.InputStream inputStream45 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45);
        long long47 = jarArchiveInputStream46.getBytesRead();
        long long48 = jarArchiveInputStream46.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46);
        boolean boolean51 = zipLong42.equals((java.lang.Object) jarArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46, 1000, 1);
        byte[] byteArray59 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean60 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray59);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong61 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray59);
        boolean boolean63 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray59, (int) (byte) 50);
        int int66 = tarArchiveInputStream54.read(byteArray59, (int) (byte) -1, 24576);
        int int69 = tarArchiveInputStream40.read(byteArray59, 504, (int) 'a');
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream70 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) tarArchiveInputStream40);
        java.io.OutputStream outputStream72 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream73 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.dump.InvalidFormatException: there was an error decoding a tape segment header at offset 103.", outputStream72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: OutputStream must not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(archiveInputStream70);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #720
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: aload         9
125: invokevirtual #310
128: astore        13
130: new           #143
133: dup
134: aload         9
136: invokespecial #144
139: astore        14
141: aload_1
142: ldc           #164
144: aload         14
146: invokevirtual #49
149: astore        15
151: aconst_null
152: astore        16
154: new           #10
157: dup
158: aload         16
160: invokespecial #11
163: astore        17
165: aload         17
167: invokevirtual #12
170: lstore        18
172: aload         17
174: invokevirtual #12
177: lstore        20
179: new           #13
182: dup
183: aload         17
185: invokespecial #14
188: astore        22
190: aload         22
192: invokevirtual #140
195: aload         22
197: ldc2_w        #297
200: invokevirtual #299
203: new           #33
206: dup
207: aload         22
209: invokespecial #34
212: astore        23
214: new           #15
217: dup
218: aload         22
220: invokespecial #300
223: astore        24
225: new           #10
228: dup
229: aload         24
231: invokespecial #11
234: astore        25
236: new           #15
239: dup
240: aload         24
242: ldc           #79
244: iconst_0
245: iconst_0
246: invokespecial #17
249: astore        26
251: new           #31
254: dup
255: aload         26
257: bipush        8
259: invokespecial #141
262: astore        27
264: new           #73
267: dup
268: lconst_0
269: invokespecial #74
272: astore        28
274: aload         28
276: invokevirtual #75
279: astore        29
281: aload         28
283: invokevirtual #336
286: lstore        30
288: aconst_null
289: astore        32
291: new           #10
294: dup
295: aload         32
297: invokespecial #11
300: astore        33
302: aload         33
304: invokevirtual #12
307: lstore        34
309: aload         33
311: invokevirtual #12
314: lstore        36
316: new           #13
319: dup
320: aload         33
322: invokespecial #14
325: astore        38
327: new           #31
330: dup
331: aload         33
333: invokespecial #32
336: astore        39
338: aload         28
340: aload         33
342: invokevirtual #337
345: istore        40
347: new           #31
350: dup
351: aload         33
353: sipush        1000
356: iconst_1
357: invokespecial #108
360: astore        41
362: iconst_4
363: newarray       byte
365: dup
366: iconst_0
367: bipush        54
369: bastore
370: dup
371: iconst_1
372: bipush        53
374: bastore
375: dup
376: iconst_2
377: iconst_1
378: bastore
379: dup
380: iconst_3
381: bipush        10
383: bastore
384: astore        42
386: aload         42
388: invokestatic  #192
391: istore        43
393: new           #73
396: dup
397: aload         42
399: invokespecial #406
402: astore        44
404: aload         42
406: bipush        50
408: invokestatic  #523
411: istore        45
413: aload         41
415: aload         42
417: iconst_m1
418: sipush        24576
421: invokevirtual #174
424: istore        46
426: aload         27
428: aload         42
430: sipush        504
433: bipush        97
435: invokevirtual #174
438: istore        47
440: aload_1
441: ldc           #164
443: aload         27
445: invokevirtual #38
448: astore        48
450: aconst_null
451: astore        49
453: aload_1
454: ldc           #196
456: aload         49
458: invokevirtual #49
461: astore        50
463: ldc           #106
465: invokestatic  #20
468: goto          473
471: astore        50
473: new           #22
476: dup
477: invokespecial #23
480: ldc           #24
482: invokevirtual #25
485: lload         4
487: invokevirtual #26
490: ldc           #27
492: invokevirtual #25
495: lconst_0
496: invokevirtual #26
499: ldc           #24
501: invokevirtual #25
504: invokevirtual #28
507: lload         4
509: lconst_0
510: lcmp
511: ifne          518
514: iconst_1
515: goto          519
518: iconst_0
519: invokestatic  #29
522: aload         6
524: invokestatic  #53
527: new           #22
530: dup
531: invokespecial #23
534: ldc           #24
536: invokevirtual #25
539: iload         11
541: invokevirtual #69
544: ldc           #27
546: invokevirtual #25
549: iconst_0
550: invokevirtual #69
553: ldc           #24
555: invokevirtual #25
558: invokevirtual #28
561: iload         11
563: ifne          570
566: iconst_1
567: goto          571
570: iconst_0
571: invokestatic  #29
574: new           #22
577: dup
578: invokespecial #23
581: ldc           #24
583: invokevirtual #25
586: iload         12
588: invokevirtual #69
591: ldc           #27
593: invokevirtual #25
596: iconst_0
597: invokevirtual #69
600: ldc           #24
602: invokevirtual #25
605: invokevirtual #28
608: iload         12
610: ifne          617
613: iconst_1
614: goto          618
617: iconst_0
618: invokestatic  #29
621: new           #22
624: dup
625: invokespecial #23
628: ldc           #24
630: invokevirtual #25
633: aload         13
635: invokevirtual #25
638: ldc_w         #317
641: invokevirtual #25
644: invokevirtual #28
647: aload         13
649: ldc           #85
651: invokestatic  #154
654: aload         15
656: invokestatic  #53
659: new           #22
662: dup
663: invokespecial #23
666: ldc           #24
668: invokevirtual #25
671: lload         18
673: invokevirtual #26
676: ldc           #27
678: invokevirtual #25
681: lconst_0
682: invokevirtual #26
685: ldc           #24
687: invokevirtual #25
690: invokevirtual #28
693: lload         18
695: lconst_0
696: lcmp
697: ifne          704
700: iconst_1
701: goto          705
704: iconst_0
705: invokestatic  #29
708: new           #22
711: dup
712: invokespecial #23
715: ldc           #24
717: invokevirtual #25
720: lload         20
722: invokevirtual #26
725: ldc           #27
727: invokevirtual #25
730: lconst_0
731: invokevirtual #26
734: ldc           #24
736: invokevirtual #25
739: invokevirtual #28
742: lload         20
744: lconst_0
745: lcmp
746: ifne          753
749: iconst_1
750: goto          754
753: iconst_0
754: invokestatic  #29
757: aload         29
759: invokestatic  #53
762: aload         29
764: invokestatic  #66
767: ldc           #77
769: invokestatic  #68
772: new           #22
775: dup
776: invokespecial #23
779: ldc           #24
781: invokevirtual #25
784: lload         30
786: invokevirtual #26
789: ldc           #27
791: invokevirtual #25
794: lconst_0
795: invokevirtual #26
798: ldc           #24
800: invokevirtual #25
803: invokevirtual #28
806: lload         30
808: lconst_0
809: lcmp
810: ifne          817
813: iconst_1
814: goto          818
817: iconst_0
818: invokestatic  #29
821: new           #22
824: dup
825: invokespecial #23
828: ldc           #24
830: invokevirtual #25
833: lload         34
835: invokevirtual #26
838: ldc           #27
840: invokevirtual #25
843: lconst_0
844: invokevirtual #26
847: ldc           #24
849: invokevirtual #25
852: invokevirtual #28
855: lload         34
857: lconst_0
858: lcmp
859: ifne          866
862: iconst_1
863: goto          867
866: iconst_0
867: invokestatic  #29
870: new           #22
873: dup
874: invokespecial #23
877: ldc           #24
879: invokevirtual #25
882: lload         36
884: invokevirtual #26
887: ldc           #27
889: invokevirtual #25
892: lconst_0
893: invokevirtual #26
896: ldc           #24
898: invokevirtual #25
901: invokevirtual #28
904: lload         36
906: lconst_0
907: lcmp
908: ifne          915
911: iconst_1
912: goto          916
915: iconst_0
916: invokestatic  #29
919: new           #22
922: dup
923: invokespecial #23
926: ldc           #24
928: invokevirtual #25
931: iload         40
933: invokevirtual #69
936: ldc           #27
938: invokevirtual #25
941: iconst_0
942: invokevirtual #69
945: ldc           #24
947: invokevirtual #25
950: invokevirtual #28
953: iload         40
955: ifne          962
958: iconst_1
959: goto          963
962: iconst_0
963: invokestatic  #29
966: aload         42
968: invokestatic  #53
971: aload         42
973: invokestatic  #66
976: ldc_w         #409
979: invokestatic  #68
982: new           #22
985: dup
986: invokespecial #23
989: ldc           #24
991: invokevirtual #25
994: iload         43
996: invokevirtual #69
999: ldc           #27
1001: invokevirtual #25
1004: iconst_0
1005: invokevirtual #69
1008: ldc           #24
1010: invokevirtual #25
1013: invokevirtual #28
1016: iload         43
1018: ifne          1025
1021: iconst_1
1022: goto          1026
1025: iconst_0
1026: invokestatic  #29
1029: new           #22
1032: dup
1033: invokespecial #23
1036: ldc           #24
1038: invokevirtual #25
1041: iload         45
1043: invokevirtual #69
1046: ldc           #27
1048: invokevirtual #25
1051: iconst_0
1052: invokevirtual #69
1055: ldc           #24
1057: invokevirtual #25
1060: invokevirtual #28
1063: iload         45
1065: ifne          1072
1068: iconst_1
1069: goto          1073
1072: iconst_0
1073: invokestatic  #29
1076: new           #22
1079: dup
1080: invokespecial #23
1083: ldc           #24
1085: invokevirtual #25
1088: iload         46
1090: invokevirtual #41
1093: ldc           #27
1095: invokevirtual #25
1098: iconst_m1
1099: invokevirtual #41
1102: ldc           #24
1104: invokevirtual #25
1107: invokevirtual #28
1110: iload         46
1112: iconst_m1
1113: if_icmpne     1120
1116: iconst_1
1117: goto          1121
1120: iconst_0
1121: invokestatic  #29
1124: new           #22
1127: dup
1128: invokespecial #23
1131: ldc           #24
1133: invokevirtual #25
1136: iload         47
1138: invokevirtual #41
1141: ldc           #27
1143: invokevirtual #25
1146: iconst_m1
1147: invokevirtual #41
1150: ldc           #24
1152: invokevirtual #25
1155: invokevirtual #28
1158: iload         47
1160: iconst_m1
1161: if_icmpne     1168
1164: iconst_1
1165: goto          1169
1168: iconst_0
1169: invokestatic  #29
1172: aload         48
1174: invokestatic  #53
1177: return
Exception table:
from    to  target type
453   468   471   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test234
Start line: 8830
End line: 0
Method source code: 
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13, (short) 2);
        cpioArchiveOutputStream21.flush();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream24 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) cpioArchiveOutputStream21, 504);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream27 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream24, (short) (byte) 1, (int) (short) 100);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream28 = archiveStreamFactory0.createArchiveOutputStream("\000\ufffd\000\000", (java.io.OutputStream) tarArchiveOutputStream24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #721
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: new           #143
126: dup
127: aload         9
129: iconst_2
130: invokespecial #474
133: astore        13
135: aload         13
137: invokevirtual #722
140: new           #43
143: dup
144: aload         13
146: sipush        504
149: invokespecial #340
152: astore        14
154: new           #143
157: dup
158: aload         14
160: iconst_1
161: bipush        100
163: invokespecial #551
166: astore        15
168: aload_1
169: ldc_w         #353
172: aload         14
174: invokevirtual #49
177: astore        16
179: ldc           #118
181: invokestatic  #20
184: goto          189
187: astore        16
189: new           #22
192: dup
193: invokespecial #23
196: ldc           #24
198: invokevirtual #25
201: lload         4
203: invokevirtual #26
206: ldc           #27
208: invokevirtual #25
211: lconst_0
212: invokevirtual #26
215: ldc           #24
217: invokevirtual #25
220: invokevirtual #28
223: lload         4
225: lconst_0
226: lcmp
227: ifne          234
230: iconst_1
231: goto          235
234: iconst_0
235: invokestatic  #29
238: aload         6
240: invokestatic  #53
243: new           #22
246: dup
247: invokespecial #23
250: ldc           #24
252: invokevirtual #25
255: iload         11
257: invokevirtual #69
260: ldc           #27
262: invokevirtual #25
265: iconst_0
266: invokevirtual #69
269: ldc           #24
271: invokevirtual #25
274: invokevirtual #28
277: iload         11
279: ifne          286
282: iconst_1
283: goto          287
286: iconst_0
287: invokestatic  #29
290: new           #22
293: dup
294: invokespecial #23
297: ldc           #24
299: invokevirtual #25
302: iload         12
304: invokevirtual #69
307: ldc           #27
309: invokevirtual #25
312: iconst_0
313: invokevirtual #69
316: ldc           #24
318: invokevirtual #25
321: invokevirtual #28
324: iload         12
326: ifne          333
329: iconst_1
330: goto          334
333: iconst_0
334: invokestatic  #29
337: return
Exception table:
from    to  target type
168   184   187   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test235
Start line: 8865
End line: 0
Method source code: 
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        tarArchiveOutputStream4.count(0);
        try {
            tarArchiveOutputStream4.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #723
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: iconst_0
68: invokevirtual #356
71: aload_3
72: invokevirtual #250
75: ldc           #51
77: invokestatic  #20
80: goto          85
83: astore        7
85: new           #22
88: dup
89: invokespecial #23
92: ldc           #24
94: invokevirtual #25
97: lload         4
99: invokevirtual #26
102: ldc           #27
104: invokevirtual #25
107: lconst_0
108: invokevirtual #26
111: ldc           #24
113: invokevirtual #25
116: invokevirtual #28
119: lload         4
121: lconst_0
122: lcmp
123: ifne          130
126: iconst_1
127: goto          131
130: iconst_0
131: invokestatic  #29
134: aload         6
136: invokestatic  #53
139: return
Exception table:
from    to  target type
71    80    83   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test236
Start line: 8887
End line: 0
Method source code: 
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int13 = tarArchiveEntry12.getDevMinor();
        tarArchiveEntry12.setIds((int) (short) 3, 0);
        int int17 = tarArchiveEntry12.getDevMajor();
        boolean boolean18 = tarArchiveEntry12.isFile();
        tarArchiveEntry12.setSize((long) 100);
        boolean boolean21 = tarArchiveEntry12.isCharacterDevice();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry23 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        tarArchiveEntry23.setMode((int) (short) 10);
        java.util.Date date26 = tarArchiveEntry23.getLastModifiedDate();
        tarArchiveEntry23.setMode((int) (byte) 120);
        java.util.Date date29 = tarArchiveEntry23.getModTime();
        boolean boolean30 = tarArchiveEntry12.equals(tarArchiveEntry23);
        tarArchiveEntry23.setSize((long) 16);
        boolean boolean33 = tarArchiveEntry23.isGNUSparse();
        java.io.File file34 = tarArchiveEntry23.getFile();
        tarArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry23);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry38 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        boolean boolean39 = tarArchiveEntry38.isGNUSparse();
        boolean boolean40 = tarArchiveEntry38.isBlockDevice();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry[] tarArchiveEntryArray41 = tarArchiveEntry38.getDirectoryEntries();
        java.lang.String str42 = tarArchiveEntry38.getLinkName();
        tarArchiveEntry38.setIds((int) (short) 100, (int) ' ');
        int int46 = tarArchiveEntry38.getUserId();
        tarArchiveEntry38.setNames("ZipLong value: 0", "");
        java.util.Date date50 = tarArchiveEntry38.getModTime();
        boolean boolean51 = tarArchiveOutputStream10.canWriteEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry38);
        try {
            tarArchiveOutputStream10.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: entry 'jar' closed at '0' before the '16' bytes specified in the header were written");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(file34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(tarArchiveEntryArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #724
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #112
85: dup
86: ldc           #44
88: invokespecial #120
91: astore        9
93: aload         9
95: invokevirtual #129
98: istore        10
100: aload         9
102: iconst_3
103: iconst_0
104: invokevirtual #130
107: aload         9
109: invokevirtual #131
112: istore        11
114: aload         9
116: invokevirtual #132
119: istore        12
121: aload         9
123: ldc2_w        #200
126: invokevirtual #330
129: aload         9
131: invokevirtual #344
134: istore        13
136: new           #112
139: dup
140: ldc           #44
142: invokespecial #120
145: astore        14
147: aload         14
149: bipush        10
151: invokevirtual #121
154: aload         14
156: invokevirtual #122
159: astore        15
161: aload         14
163: bipush        120
165: invokevirtual #121
168: aload         14
170: invokevirtual #123
173: astore        16
175: aload         9
177: aload         14
179: invokevirtual #377
182: istore        17
184: aload         14
186: ldc2_w        #725
189: invokevirtual #330
192: aload         14
194: invokevirtual #422
197: istore        18
199: aload         14
201: invokevirtual #395
204: astore        19
206: aload         8
208: aload         14
210: invokevirtual #136
213: new           #112
216: dup
217: ldc           #61
219: iconst_0
220: invokespecial #113
223: astore        20
225: aload         20
227: invokevirtual #422
230: istore        21
232: aload         20
234: invokevirtual #727
237: istore        22
239: aload         20
241: invokevirtual #728
244: astore        23
246: aload         20
248: invokevirtual #423
251: astore        24
253: aload         20
255: bipush        100
257: bipush        32
259: invokevirtual #130
262: aload         20
264: invokevirtual #489
267: istore        25
269: aload         20
271: ldc           #105
273: ldc           #61
275: invokevirtual #125
278: aload         20
280: invokevirtual #123
283: astore        26
285: aload         8
287: aload         20
289: invokevirtual #379
292: istore        27
294: aload         8
296: invokevirtual #207
299: ldc_w         #729
302: invokestatic  #20
305: goto          310
308: astore        28
310: new           #22
313: dup
314: invokespecial #23
317: ldc           #24
319: invokevirtual #25
322: lload         4
324: invokevirtual #26
327: ldc           #27
329: invokevirtual #25
332: lconst_0
333: invokevirtual #26
336: ldc           #24
338: invokevirtual #25
341: invokevirtual #28
344: lload         4
346: lconst_0
347: lcmp
348: ifne          355
351: iconst_1
352: goto          356
355: iconst_0
356: invokestatic  #29
359: aload         6
361: invokestatic  #53
364: new           #22
367: dup
368: invokespecial #23
371: ldc           #24
373: invokevirtual #25
376: iload         7
378: invokevirtual #41
381: ldc           #27
383: invokevirtual #25
386: iconst_0
387: invokevirtual #41
390: ldc           #24
392: invokevirtual #25
395: invokevirtual #28
398: iload         7
400: ifne          407
403: iconst_1
404: goto          408
407: iconst_0
408: invokestatic  #29
411: new           #22
414: dup
415: invokespecial #23
418: ldc           #24
420: invokevirtual #25
423: iload         10
425: invokevirtual #41
428: ldc           #27
430: invokevirtual #25
433: iconst_0
434: invokevirtual #41
437: ldc           #24
439: invokevirtual #25
442: invokevirtual #28
445: iload         10
447: ifne          454
450: iconst_1
451: goto          455
454: iconst_0
455: invokestatic  #29
458: new           #22
461: dup
462: invokespecial #23
465: ldc           #24
467: invokevirtual #25
470: iload         11
472: invokevirtual #41
475: ldc           #27
477: invokevirtual #25
480: iconst_0
481: invokevirtual #41
484: ldc           #24
486: invokevirtual #25
489: invokevirtual #28
492: iload         11
494: ifne          501
497: iconst_1
498: goto          502
501: iconst_0
502: invokestatic  #29
505: new           #22
508: dup
509: invokespecial #23
512: ldc           #24
514: invokevirtual #25
517: iload         12
519: invokevirtual #69
522: ldc           #27
524: invokevirtual #25
527: iconst_1
528: invokevirtual #69
531: ldc           #24
533: invokevirtual #25
536: invokevirtual #28
539: iload         12
541: iconst_1
542: if_icmpne     549
545: iconst_1
546: goto          550
549: iconst_0
550: invokestatic  #29
553: new           #22
556: dup
557: invokespecial #23
560: ldc           #24
562: invokevirtual #25
565: iload         13
567: invokevirtual #69
570: ldc           #27
572: invokevirtual #25
575: iconst_0
576: invokevirtual #69
579: ldc           #24
581: invokevirtual #25
584: invokevirtual #28
587: iload         13
589: ifne          596
592: iconst_1
593: goto          597
596: iconst_0
597: invokestatic  #29
600: aload         15
602: invokestatic  #53
605: aload         16
607: invokestatic  #53
610: new           #22
613: dup
614: invokespecial #23
617: ldc           #24
619: invokevirtual #25
622: iload         17
624: invokevirtual #69
627: ldc           #27
629: invokevirtual #25
632: iconst_1
633: invokevirtual #69
636: ldc           #24
638: invokevirtual #25
641: invokevirtual #28
644: iload         17
646: iconst_1
647: if_icmpne     654
650: iconst_1
651: goto          655
654: iconst_0
655: invokestatic  #29
658: new           #22
661: dup
662: invokespecial #23
665: ldc           #24
667: invokevirtual #25
670: iload         18
672: invokevirtual #69
675: ldc           #27
677: invokevirtual #25
680: iconst_0
681: invokevirtual #69
684: ldc           #24
686: invokevirtual #25
689: invokevirtual #28
692: iload         18
694: ifne          701
697: iconst_1
698: goto          702
701: iconst_0
702: invokestatic  #29
705: aload         19
707: invokestatic  #168
710: new           #22
713: dup
714: invokespecial #23
717: ldc           #24
719: invokevirtual #25
722: iload         21
724: invokevirtual #69
727: ldc           #27
729: invokevirtual #25
732: iconst_0
733: invokevirtual #69
736: ldc           #24
738: invokevirtual #25
741: invokevirtual #28
744: iload         21
746: ifne          753
749: iconst_1
750: goto          754
753: iconst_0
754: invokestatic  #29
757: new           #22
760: dup
761: invokespecial #23
764: ldc           #24
766: invokevirtual #25
769: iload         22
771: invokevirtual #69
774: ldc           #27
776: invokevirtual #25
779: iconst_0
780: invokevirtual #69
783: ldc           #24
785: invokevirtual #25
788: invokevirtual #28
791: iload         22
793: ifne          800
796: iconst_1
797: goto          801
800: iconst_0
801: invokestatic  #29
804: aload         23
806: invokestatic  #53
809: new           #22
812: dup
813: invokespecial #23
816: ldc           #24
818: invokevirtual #25
821: aload         24
823: invokevirtual #25
826: ldc           #219
828: invokevirtual #25
831: invokevirtual #28
834: aload         24
836: ldc           #61
838: invokestatic  #154
841: new           #22
844: dup
845: invokespecial #23
848: ldc           #24
850: invokevirtual #25
853: iload         25
855: invokevirtual #41
858: ldc           #27
860: invokevirtual #25
863: bipush        100
865: invokevirtual #41
868: ldc           #24
870: invokevirtual #25
873: invokevirtual #28
876: iload         25
878: bipush        100
880: if_icmpne     887
883: iconst_1
884: goto          888
887: iconst_0
888: invokestatic  #29
891: aload         26
893: invokestatic  #53
896: new           #22
899: dup
900: invokespecial #23
903: ldc           #24
905: invokevirtual #25
908: iload         27
910: invokevirtual #69
913: ldc           #27
915: invokevirtual #25
918: iconst_1
919: invokevirtual #69
922: ldc           #24
924: invokevirtual #25
927: invokevirtual #28
930: iload         27
932: iconst_1
933: if_icmpne     940
936: iconst_1
937: goto          941
940: iconst_0
941: invokestatic  #29
944: return
Exception table:
from    to  target type
294   305   308   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test237
Start line: 8957
End line: 0
Method source code: 
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(4);
        arArchiveOutputStream10.setLongFileMode(40960);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding16 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("UTF8");
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream20 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        java.io.InputStream inputStream22 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream23 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream22);
        long long24 = jarArchiveInputStream23.getBytesRead();
        long long25 = jarArchiveInputStream23.getBytesRead();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong27 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray28 = zipLong27.getBytes();
        int int31 = jarArchiveInputStream23.read(byteArray28, 0, 96);
        boolean boolean32 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("00", byteArray28);
        int int35 = arArchiveInputStream20.read(byteArray28, 6, 8);
        byte[] byteArray40 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean41 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray40);
        int int44 = arArchiveInputStream20.read(byteArray40, 0, 2048);
        java.lang.String str45 = zipEncoding16.decode(byteArray40);
        boolean boolean47 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray40, 31);
        try {
            arArchiveOutputStream10.write(byteArray40, (int) (short) 2, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '100' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(zipEncoding16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "65\001\n" + "'", str45, "65\001\n");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #730
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: iconst_4
85: invokevirtual #399
88: aload         9
90: ldc           #109
92: invokevirtual #399
95: ldc           #85
97: invokestatic  #211
100: astore        10
102: aconst_null
103: astore        11
105: new           #10
108: dup
109: aload         11
111: invokespecial #11
114: astore        12
116: aload         12
118: invokevirtual #12
121: lstore        13
123: new           #13
126: dup
127: aload         12
129: invokespecial #14
132: astore        15
134: aconst_null
135: astore        16
137: new           #10
140: dup
141: aload         16
143: invokespecial #11
146: astore        17
148: aload         17
150: invokevirtual #12
153: lstore        18
155: aload         17
157: invokevirtual #12
160: lstore        20
162: new           #73
165: dup
166: lconst_0
167: invokespecial #74
170: astore        22
172: aload         22
174: invokevirtual #75
177: astore        23
179: aload         17
181: aload         23
183: iconst_0
184: bipush        96
186: invokevirtual #76
189: istore        24
191: ldc           #16
193: aload         23
195: invokestatic  #525
198: istore        25
200: aload         15
202: aload         23
204: bipush        6
206: bipush        8
208: invokevirtual #232
211: istore        26
213: iconst_4
214: newarray       byte
216: dup
217: iconst_0
218: bipush        54
220: bastore
221: dup
222: iconst_1
223: bipush        53
225: bastore
226: dup
227: iconst_2
228: iconst_1
229: bastore
230: dup
231: iconst_3
232: bipush        10
234: bastore
235: astore        27
237: aload         27
239: invokestatic  #192
242: istore        28
244: aload         15
246: aload         27
248: iconst_0
249: sipush        2048
252: invokevirtual #232
255: istore        29
257: aload         10
259: aload         27
261: invokeinterface #233,  2
266: astore        30
268: aload         27
270: bipush        31
272: invokestatic  #523
275: istore        31
277: aload         9
279: aload         27
281: iconst_2
282: bipush        100
284: invokevirtual #402
287: ldc_w         #367
290: invokestatic  #20
293: goto          298
296: astore        32
298: new           #22
301: dup
302: invokespecial #23
305: ldc           #24
307: invokevirtual #25
310: lload         4
312: invokevirtual #26
315: ldc           #27
317: invokevirtual #25
320: lconst_0
321: invokevirtual #26
324: ldc           #24
326: invokevirtual #25
329: invokevirtual #28
332: lload         4
334: lconst_0
335: lcmp
336: ifne          343
339: iconst_1
340: goto          344
343: iconst_0
344: invokestatic  #29
347: aload         6
349: invokestatic  #53
352: new           #22
355: dup
356: invokespecial #23
359: ldc           #24
361: invokevirtual #25
364: lload         7
366: invokevirtual #26
369: ldc           #27
371: invokevirtual #25
374: lconst_0
375: invokevirtual #26
378: ldc           #24
380: invokevirtual #25
383: invokevirtual #28
386: lload         7
388: lconst_0
389: lcmp
390: ifne          397
393: iconst_1
394: goto          398
397: iconst_0
398: invokestatic  #29
401: aload         10
403: invokestatic  #53
406: new           #22
409: dup
410: invokespecial #23
413: ldc           #24
415: invokevirtual #25
418: lload         13
420: invokevirtual #26
423: ldc           #27
425: invokevirtual #25
428: lconst_0
429: invokevirtual #26
432: ldc           #24
434: invokevirtual #25
437: invokevirtual #28
440: lload         13
442: lconst_0
443: lcmp
444: ifne          451
447: iconst_1
448: goto          452
451: iconst_0
452: invokestatic  #29
455: new           #22
458: dup
459: invokespecial #23
462: ldc           #24
464: invokevirtual #25
467: lload         18
469: invokevirtual #26
472: ldc           #27
474: invokevirtual #25
477: lconst_0
478: invokevirtual #26
481: ldc           #24
483: invokevirtual #25
486: invokevirtual #28
489: lload         18
491: lconst_0
492: lcmp
493: ifne          500
496: iconst_1
497: goto          501
500: iconst_0
501: invokestatic  #29
504: new           #22
507: dup
508: invokespecial #23
511: ldc           #24
513: invokevirtual #25
516: lload         20
518: invokevirtual #26
521: ldc           #27
523: invokevirtual #25
526: lconst_0
527: invokevirtual #26
530: ldc           #24
532: invokevirtual #25
535: invokevirtual #28
538: lload         20
540: lconst_0
541: lcmp
542: ifne          549
545: iconst_1
546: goto          550
549: iconst_0
550: invokestatic  #29
553: aload         23
555: invokestatic  #53
558: aload         23
560: invokestatic  #66
563: ldc           #77
565: invokestatic  #68
568: new           #22
571: dup
572: invokespecial #23
575: ldc           #24
577: invokevirtual #25
580: iload         24
582: invokevirtual #41
585: ldc           #27
587: invokevirtual #25
590: iconst_m1
591: invokevirtual #41
594: ldc           #24
596: invokevirtual #25
599: invokevirtual #28
602: iload         24
604: iconst_m1
605: if_icmpne     612
608: iconst_1
609: goto          613
612: iconst_0
613: invokestatic  #29
616: new           #22
619: dup
620: invokespecial #23
623: ldc           #24
625: invokevirtual #25
628: iload         25
630: invokevirtual #69
633: ldc           #27
635: invokevirtual #25
638: iconst_0
639: invokevirtual #69
642: ldc           #24
644: invokevirtual #25
647: invokevirtual #28
650: iload         25
652: ifne          659
655: iconst_1
656: goto          660
659: iconst_0
660: invokestatic  #29
663: new           #22
666: dup
667: invokespecial #23
670: ldc           #24
672: invokevirtual #25
675: iload         26
677: invokevirtual #41
680: ldc           #27
682: invokevirtual #25
685: iconst_m1
686: invokevirtual #41
689: ldc           #24
691: invokevirtual #25
694: invokevirtual #28
697: iload         26
699: iconst_m1
700: if_icmpne     707
703: iconst_1
704: goto          708
707: iconst_0
708: invokestatic  #29
711: aload         27
713: invokestatic  #53
716: aload         27
718: invokestatic  #66
721: ldc_w         #409
724: invokestatic  #68
727: new           #22
730: dup
731: invokespecial #23
734: ldc           #24
736: invokevirtual #25
739: iload         28
741: invokevirtual #69
744: ldc           #27
746: invokevirtual #25
749: iconst_0
750: invokevirtual #69
753: ldc           #24
755: invokevirtual #25
758: invokevirtual #28
761: iload         28
763: ifne          770
766: iconst_1
767: goto          771
770: iconst_0
771: invokestatic  #29
774: new           #22
777: dup
778: invokespecial #23
781: ldc           #24
783: invokevirtual #25
786: iload         29
788: invokevirtual #41
791: ldc           #27
793: invokevirtual #25
796: iconst_m1
797: invokevirtual #41
800: ldc           #24
802: invokevirtual #25
805: invokevirtual #28
808: iload         29
810: iconst_m1
811: if_icmpne     818
814: iconst_1
815: goto          819
818: iconst_0
819: invokestatic  #29
822: new           #22
825: dup
826: invokespecial #23
829: ldc           #24
831: invokevirtual #25
834: aload         30
836: invokevirtual #25
839: ldc_w         #731
842: invokevirtual #25
845: invokevirtual #28
848: aload         30
850: ldc_w         #586
853: invokestatic  #154
856: new           #22
859: dup
860: invokespecial #23
863: ldc           #24
865: invokevirtual #25
868: iload         31
870: invokevirtual #69
873: ldc           #27
875: invokevirtual #25
878: iconst_0
879: invokevirtual #69
882: ldc           #24
884: invokevirtual #25
887: invokevirtual #28
890: iload         31
892: ifne          899
895: iconst_1
896: goto          900
899: iconst_0
900: invokestatic  #29
903: return
Exception table:
from    to  target type
277   293   296   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test238
Start line: 9017
End line: 0
Method source code: 
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        java.lang.String str20 = zipArchiveOutputStream13.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21);
        java.io.InputStream inputStream24 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24);
        long long26 = jarArchiveInputStream25.getBytesRead();
        long long27 = jarArchiveInputStream25.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25);
        arArchiveInputStream28.close();
        arArchiveInputStream28.pushedBackBytes((-1L));
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream28);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream33);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream33, "always", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream38, (int) (short) 8);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray43 = zipLong42.getBytes();
        long long44 = zipLong42.getValue();
        java.io.InputStream inputStream45 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45);
        long long47 = jarArchiveInputStream46.getBytesRead();
        long long48 = jarArchiveInputStream46.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46);
        boolean boolean51 = zipLong42.equals((java.lang.Object) jarArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46, 1000, 1);
        byte[] byteArray59 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean60 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray59);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong61 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray59);
        boolean boolean63 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray59, (int) (byte) 50);
        int int66 = tarArchiveInputStream54.read(byteArray59, (int) (byte) -1, 24576);
        int int69 = tarArchiveInputStream40.read(byteArray59, 504, (int) 'a');
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream70 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) tarArchiveInputStream40);
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory72 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream74 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream76 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream74, "jar");
        tarArchiveOutputStream76.count(0L);
        long long79 = tarArchiveOutputStream76.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream80 = archiveStreamFactory72.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream76);
        int int81 = tarArchiveOutputStream76.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream82 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream76);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream83 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream76);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream84 = archiveStreamFactory0.createArchiveOutputStream("cpio", (java.io.OutputStream) tarArchiveOutputStream76);
        java.io.OutputStream outputStream86 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream88 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream86, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream89 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream86);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy90 = null;
        zipArchiveOutputStream89.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy90);
        int int92 = zipArchiveOutputStream89.getCount();
        java.lang.String str93 = zipArchiveOutputStream89.getEncoding();
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode94 = null;
        zipArchiveOutputStream89.setUseZip64(zip64Mode94);
        zipArchiveOutputStream89.setFallbackToUTF8(false);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream98 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream89);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream99 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) zipArchiveOutputStream89);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(archiveInputStream70);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(archiveOutputStream84);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "UTF8" + "'", str93, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream99);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #732
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: aload         9
125: invokevirtual #310
128: astore        13
130: new           #143
133: dup
134: aload         9
136: invokespecial #144
139: astore        14
141: aload_1
142: ldc           #164
144: aload         14
146: invokevirtual #49
149: astore        15
151: aconst_null
152: astore        16
154: new           #10
157: dup
158: aload         16
160: invokespecial #11
163: astore        17
165: aload         17
167: invokevirtual #12
170: lstore        18
172: aload         17
174: invokevirtual #12
177: lstore        20
179: new           #13
182: dup
183: aload         17
185: invokespecial #14
188: astore        22
190: aload         22
192: invokevirtual #140
195: aload         22
197: ldc2_w        #297
200: invokevirtual #299
203: new           #33
206: dup
207: aload         22
209: invokespecial #34
212: astore        23
214: new           #15
217: dup
218: aload         22
220: invokespecial #300
223: astore        24
225: new           #10
228: dup
229: aload         24
231: invokespecial #11
234: astore        25
236: new           #15
239: dup
240: aload         24
242: ldc           #79
244: iconst_0
245: iconst_0
246: invokespecial #17
249: astore        26
251: new           #31
254: dup
255: aload         26
257: bipush        8
259: invokespecial #141
262: astore        27
264: new           #73
267: dup
268: lconst_0
269: invokespecial #74
272: astore        28
274: aload         28
276: invokevirtual #75
279: astore        29
281: aload         28
283: invokevirtual #336
286: lstore        30
288: aconst_null
289: astore        32
291: new           #10
294: dup
295: aload         32
297: invokespecial #11
300: astore        33
302: aload         33
304: invokevirtual #12
307: lstore        34
309: aload         33
311: invokevirtual #12
314: lstore        36
316: new           #13
319: dup
320: aload         33
322: invokespecial #14
325: astore        38
327: new           #31
330: dup
331: aload         33
333: invokespecial #32
336: astore        39
338: aload         28
340: aload         33
342: invokevirtual #337
345: istore        40
347: new           #31
350: dup
351: aload         33
353: sipush        1000
356: iconst_1
357: invokespecial #108
360: astore        41
362: iconst_4
363: newarray       byte
365: dup
366: iconst_0
367: bipush        54
369: bastore
370: dup
371: iconst_1
372: bipush        53
374: bastore
375: dup
376: iconst_2
377: iconst_1
378: bastore
379: dup
380: iconst_3
381: bipush        10
383: bastore
384: astore        42
386: aload         42
388: invokestatic  #192
391: istore        43
393: new           #73
396: dup
397: aload         42
399: invokespecial #406
402: astore        44
404: aload         42
406: bipush        50
408: invokestatic  #523
411: istore        45
413: aload         41
415: aload         42
417: iconst_m1
418: sipush        24576
421: invokevirtual #174
424: istore        46
426: aload         27
428: aload         42
430: sipush        504
433: bipush        97
435: invokevirtual #174
438: istore        47
440: aload_1
441: ldc           #164
443: aload         27
445: invokevirtual #38
448: astore        48
450: new           #8
453: dup
454: invokespecial #9
457: astore        49
459: aconst_null
460: astore        50
462: new           #43
465: dup
466: aload         50
468: ldc           #44
470: invokespecial #45
473: astore        51
475: aload         51
477: lconst_0
478: invokevirtual #46
481: aload         51
483: invokevirtual #47
486: lstore        52
488: aload         49
490: ldc           #48
492: aload         51
494: invokevirtual #49
497: astore        54
499: aload         51
501: invokevirtual #60
504: istore        55
506: new           #43
509: dup
510: aload         51
512: invokespecial #95
515: astore        56
517: new           #240
520: dup
521: aload         51
523: invokespecial #241
526: astore        57
528: aload_1
529: ldc_w         #273
532: aload         51
534: invokevirtual #49
537: astore        58
539: aconst_null
540: astore        59
542: new           #43
545: dup
546: aload         59
548: ldc           #44
550: invokespecial #45
553: astore        60
555: new           #182
558: dup
559: aload         59
561: invokespecial #183
564: astore        61
566: aconst_null
567: astore        62
569: aload         61
571: aload         62
573: invokevirtual #184
576: aload         61
578: invokevirtual #309
581: istore        63
583: aload         61
585: invokevirtual #310
588: astore        64
590: aconst_null
591: astore        65
593: aload         61
595: aload         65
597: invokevirtual #224
600: aload         61
602: iconst_0
603: invokevirtual #316
606: new           #182
609: dup
610: aload         61
612: invokespecial #183
615: astore        66
617: aload_1
618: ldc           #48
620: aload         61
622: invokevirtual #49
625: astore        67
627: new           #22
630: dup
631: invokespecial #23
634: ldc           #24
636: invokevirtual #25
639: lload         4
641: invokevirtual #26
644: ldc           #27
646: invokevirtual #25
649: lconst_0
650: invokevirtual #26
653: ldc           #24
655: invokevirtual #25
658: invokevirtual #28
661: lload         4
663: lconst_0
664: lcmp
665: ifne          672
668: iconst_1
669: goto          673
672: iconst_0
673: invokestatic  #29
676: aload         6
678: invokestatic  #53
681: new           #22
684: dup
685: invokespecial #23
688: ldc           #24
690: invokevirtual #25
693: iload         11
695: invokevirtual #69
698: ldc           #27
700: invokevirtual #25
703: iconst_0
704: invokevirtual #69
707: ldc           #24
709: invokevirtual #25
712: invokevirtual #28
715: iload         11
717: ifne          724
720: iconst_1
721: goto          725
724: iconst_0
725: invokestatic  #29
728: new           #22
731: dup
732: invokespecial #23
735: ldc           #24
737: invokevirtual #25
740: iload         12
742: invokevirtual #69
745: ldc           #27
747: invokevirtual #25
750: iconst_0
751: invokevirtual #69
754: ldc           #24
756: invokevirtual #25
759: invokevirtual #28
762: iload         12
764: ifne          771
767: iconst_1
768: goto          772
771: iconst_0
772: invokestatic  #29
775: new           #22
778: dup
779: invokespecial #23
782: ldc           #24
784: invokevirtual #25
787: aload         13
789: invokevirtual #25
792: ldc_w         #317
795: invokevirtual #25
798: invokevirtual #28
801: aload         13
803: ldc           #85
805: invokestatic  #154
808: aload         15
810: invokestatic  #53
813: new           #22
816: dup
817: invokespecial #23
820: ldc           #24
822: invokevirtual #25
825: lload         18
827: invokevirtual #26
830: ldc           #27
832: invokevirtual #25
835: lconst_0
836: invokevirtual #26
839: ldc           #24
841: invokevirtual #25
844: invokevirtual #28
847: lload         18
849: lconst_0
850: lcmp
851: ifne          858
854: iconst_1
855: goto          859
858: iconst_0
859: invokestatic  #29
862: new           #22
865: dup
866: invokespecial #23
869: ldc           #24
871: invokevirtual #25
874: lload         20
876: invokevirtual #26
879: ldc           #27
881: invokevirtual #25
884: lconst_0
885: invokevirtual #26
888: ldc           #24
890: invokevirtual #25
893: invokevirtual #28
896: lload         20
898: lconst_0
899: lcmp
900: ifne          907
903: iconst_1
904: goto          908
907: iconst_0
908: invokestatic  #29
911: aload         29
913: invokestatic  #53
916: aload         29
918: invokestatic  #66
921: ldc           #77
923: invokestatic  #68
926: new           #22
929: dup
930: invokespecial #23
933: ldc           #24
935: invokevirtual #25
938: lload         30
940: invokevirtual #26
943: ldc           #27
945: invokevirtual #25
948: lconst_0
949: invokevirtual #26
952: ldc           #24
954: invokevirtual #25
957: invokevirtual #28
960: lload         30
962: lconst_0
963: lcmp
964: ifne          971
967: iconst_1
968: goto          972
971: iconst_0
972: invokestatic  #29
975: new           #22
978: dup
979: invokespecial #23
982: ldc           #24
984: invokevirtual #25
987: lload         34
989: invokevirtual #26
992: ldc           #27
994: invokevirtual #25
997: lconst_0
998: invokevirtual #26
1001: ldc           #24
1003: invokevirtual #25
1006: invokevirtual #28
1009: lload         34
1011: lconst_0
1012: lcmp
1013: ifne          1020
1016: iconst_1
1017: goto          1021
1020: iconst_0
1021: invokestatic  #29
1024: new           #22
1027: dup
1028: invokespecial #23
1031: ldc           #24
1033: invokevirtual #25
1036: lload         36
1038: invokevirtual #26
1041: ldc           #27
1043: invokevirtual #25
1046: lconst_0
1047: invokevirtual #26
1050: ldc           #24
1052: invokevirtual #25
1055: invokevirtual #28
1058: lload         36
1060: lconst_0
1061: lcmp
1062: ifne          1069
1065: iconst_1
1066: goto          1070
1069: iconst_0
1070: invokestatic  #29
1073: new           #22
1076: dup
1077: invokespecial #23
1080: ldc           #24
1082: invokevirtual #25
1085: iload         40
1087: invokevirtual #69
1090: ldc           #27
1092: invokevirtual #25
1095: iconst_0
1096: invokevirtual #69
1099: ldc           #24
1101: invokevirtual #25
1104: invokevirtual #28
1107: iload         40
1109: ifne          1116
1112: iconst_1
1113: goto          1117
1116: iconst_0
1117: invokestatic  #29
1120: aload         42
1122: invokestatic  #53
1125: aload         42
1127: invokestatic  #66
1130: ldc_w         #409
1133: invokestatic  #68
1136: new           #22
1139: dup
1140: invokespecial #23
1143: ldc           #24
1145: invokevirtual #25
1148: iload         43
1150: invokevirtual #69
1153: ldc           #27
1155: invokevirtual #25
1158: iconst_0
1159: invokevirtual #69
1162: ldc           #24
1164: invokevirtual #25
1167: invokevirtual #28
1170: iload         43
1172: ifne          1179
1175: iconst_1
1176: goto          1180
1179: iconst_0
1180: invokestatic  #29
1183: new           #22
1186: dup
1187: invokespecial #23
1190: ldc           #24
1192: invokevirtual #25
1195: iload         45
1197: invokevirtual #69
1200: ldc           #27
1202: invokevirtual #25
1205: iconst_0
1206: invokevirtual #69
1209: ldc           #24
1211: invokevirtual #25
1214: invokevirtual #28
1217: iload         45
1219: ifne          1226
1222: iconst_1
1223: goto          1227
1226: iconst_0
1227: invokestatic  #29
1230: new           #22
1233: dup
1234: invokespecial #23
1237: ldc           #24
1239: invokevirtual #25
1242: iload         46
1244: invokevirtual #41
1247: ldc           #27
1249: invokevirtual #25
1252: iconst_m1
1253: invokevirtual #41
1256: ldc           #24
1258: invokevirtual #25
1261: invokevirtual #28
1264: iload         46
1266: iconst_m1
1267: if_icmpne     1274
1270: iconst_1
1271: goto          1275
1274: iconst_0
1275: invokestatic  #29
1278: new           #22
1281: dup
1282: invokespecial #23
1285: ldc           #24
1287: invokevirtual #25
1290: iload         47
1292: invokevirtual #41
1295: ldc           #27
1297: invokevirtual #25
1300: iconst_m1
1301: invokevirtual #41
1304: ldc           #24
1306: invokevirtual #25
1309: invokevirtual #28
1312: iload         47
1314: iconst_m1
1315: if_icmpne     1322
1318: iconst_1
1319: goto          1323
1322: iconst_0
1323: invokestatic  #29
1326: aload         48
1328: invokestatic  #53
1331: new           #22
1334: dup
1335: invokespecial #23
1338: ldc           #24
1340: invokevirtual #25
1343: lload         52
1345: invokevirtual #26
1348: ldc           #27
1350: invokevirtual #25
1353: lconst_0
1354: invokevirtual #26
1357: ldc           #24
1359: invokevirtual #25
1362: invokevirtual #28
1365: lload         52
1367: lconst_0
1368: lcmp
1369: ifne          1376
1372: iconst_1
1373: goto          1377
1376: iconst_0
1377: invokestatic  #29
1380: aload         54
1382: invokestatic  #53
1385: new           #22
1388: dup
1389: invokespecial #23
1392: ldc           #24
1394: invokevirtual #25
1397: iload         55
1399: invokevirtual #41
1402: ldc           #27
1404: invokevirtual #25
1407: iconst_0
1408: invokevirtual #41
1411: ldc           #24
1413: invokevirtual #25
1416: invokevirtual #28
1419: iload         55
1421: ifne          1428
1424: iconst_1
1425: goto          1429
1428: iconst_0
1429: invokestatic  #29
1432: aload         58
1434: invokestatic  #53
1437: new           #22
1440: dup
1441: invokespecial #23
1444: ldc           #24
1446: invokevirtual #25
1449: iload         63
1451: invokevirtual #41
1454: ldc           #27
1456: invokevirtual #25
1459: iconst_0
1460: invokevirtual #41
1463: ldc           #24
1465: invokevirtual #25
1468: invokevirtual #28
1471: iload         63
1473: ifne          1480
1476: iconst_1
1477: goto          1481
1480: iconst_0
1481: invokestatic  #29
1484: new           #22
1487: dup
1488: invokespecial #23
1491: ldc           #24
1493: invokevirtual #25
1496: aload         64
1498: invokevirtual #25
1501: ldc_w         #317
1504: invokevirtual #25
1507: invokevirtual #28
1510: aload         64
1512: ldc           #85
1514: invokestatic  #154
1517: aload         67
1519: invokestatic  #53
1522: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test239
Start line: 9120
End line: 0
Method source code: 
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream1 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream2 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream1);
        long long3 = jarArchiveInputStream2.getBytesRead();
        long long4 = jarArchiveInputStream2.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream5 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream2);
        arArchiveInputStream5.close();
        arArchiveInputStream5.pushedBackBytes((-1L));
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream9 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream5);
        arArchiveInputStream5.count((int) (byte) 54);
        boolean boolean12 = arArchiveInputStream5.markSupported();
        arArchiveInputStream5.mark(33188);
        arArchiveInputStream5.close();
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream5);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream17 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) zipArchiveInputStream16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #733
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: aload         8
68: invokevirtual #140
71: aload         8
73: ldc2_w        #297
76: invokevirtual #299
79: new           #33
82: dup
83: aload         8
85: invokespecial #34
88: astore        9
90: aload         8
92: bipush        54
94: invokevirtual #734
97: aload         8
99: invokevirtual #426
102: istore        10
104: aload         8
106: ldc_w         #420
109: invokevirtual #735
112: aload         8
114: invokevirtual #140
117: new           #15
120: dup
121: aload         8
123: invokespecial #300
126: astore        11
128: aload_1
129: aload         11
131: invokevirtual #18
134: astore        12
136: ldc           #19
138: invokestatic  #20
141: goto          146
144: astore        12
146: new           #22
149: dup
150: invokespecial #23
153: ldc           #24
155: invokevirtual #25
158: lload         4
160: invokevirtual #26
163: ldc           #27
165: invokevirtual #25
168: lconst_0
169: invokevirtual #26
172: ldc           #24
174: invokevirtual #25
177: invokevirtual #28
180: lload         4
182: lconst_0
183: lcmp
184: ifne          191
187: iconst_1
188: goto          192
191: iconst_0
192: invokestatic  #29
195: new           #22
198: dup
199: invokespecial #23
202: ldc           #24
204: invokevirtual #25
207: lload         6
209: invokevirtual #26
212: ldc           #27
214: invokevirtual #25
217: lconst_0
218: invokevirtual #26
221: ldc           #24
223: invokevirtual #25
226: invokevirtual #28
229: lload         6
231: lconst_0
232: lcmp
233: ifne          240
236: iconst_1
237: goto          241
240: iconst_0
241: invokestatic  #29
244: new           #22
247: dup
248: invokespecial #23
251: ldc           #24
253: invokevirtual #25
256: iload         10
258: invokevirtual #69
261: ldc           #27
263: invokevirtual #25
266: iconst_0
267: invokevirtual #69
270: ldc           #24
272: invokevirtual #25
275: invokevirtual #28
278: iload         10
280: ifne          287
283: iconst_1
284: goto          288
287: iconst_0
288: invokestatic  #29
291: return
Exception table:
from    to  target type
128   141   144   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test240
Start line: 9150
End line: 0
Method source code: 
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        java.lang.String str20 = zipArchiveOutputStream13.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21);
        java.io.InputStream inputStream24 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24);
        long long26 = jarArchiveInputStream25.getBytesRead();
        long long27 = jarArchiveInputStream25.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25);
        arArchiveInputStream28.close();
        arArchiveInputStream28.pushedBackBytes((-1L));
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream28);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream33);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream33, "always", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream38, (int) (short) 8);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray43 = zipLong42.getBytes();
        long long44 = zipLong42.getValue();
        java.io.InputStream inputStream45 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45);
        long long47 = jarArchiveInputStream46.getBytesRead();
        long long48 = jarArchiveInputStream46.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46);
        boolean boolean51 = zipLong42.equals((java.lang.Object) jarArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46, 1000, 1);
        byte[] byteArray59 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean60 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray59);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong61 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray59);
        boolean boolean63 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray59, (int) (byte) 50);
        int int66 = tarArchiveInputStream54.read(byteArray59, (int) (byte) -1, 24576);
        int int69 = tarArchiveInputStream40.read(byteArray59, 504, (int) 'a');
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream70 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) tarArchiveInputStream40);
        java.io.InputStream inputStream72 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream73 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream72);
        long long74 = jarArchiveInputStream73.getBytesRead();
        long long75 = jarArchiveInputStream73.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream76 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream73);
        arArchiveInputStream76.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream80 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream76, 24576, 255);
        int int81 = tarArchiveInputStream80.available();
        int int82 = tarArchiveInputStream80.getRecordSize();
        int int83 = tarArchiveInputStream80.available();
        long long85 = tarArchiveInputStream80.skip((long) 31);
        tarArchiveInputStream80.pushedBackBytes((long) 504);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream88 = archiveStreamFactory0.createArchiveInputStream("ZipLong value: 8", (java.io.InputStream) tarArchiveInputStream80);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ZipLong value: 8 not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(archiveInputStream70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 255 + "'", int82 == 255);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #736
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: aload         9
125: invokevirtual #310
128: astore        13
130: new           #143
133: dup
134: aload         9
136: invokespecial #144
139: astore        14
141: aload_1
142: ldc           #164
144: aload         14
146: invokevirtual #49
149: astore        15
151: aconst_null
152: astore        16
154: new           #10
157: dup
158: aload         16
160: invokespecial #11
163: astore        17
165: aload         17
167: invokevirtual #12
170: lstore        18
172: aload         17
174: invokevirtual #12
177: lstore        20
179: new           #13
182: dup
183: aload         17
185: invokespecial #14
188: astore        22
190: aload         22
192: invokevirtual #140
195: aload         22
197: ldc2_w        #297
200: invokevirtual #299
203: new           #33
206: dup
207: aload         22
209: invokespecial #34
212: astore        23
214: new           #15
217: dup
218: aload         22
220: invokespecial #300
223: astore        24
225: new           #10
228: dup
229: aload         24
231: invokespecial #11
234: astore        25
236: new           #15
239: dup
240: aload         24
242: ldc           #79
244: iconst_0
245: iconst_0
246: invokespecial #17
249: astore        26
251: new           #31
254: dup
255: aload         26
257: bipush        8
259: invokespecial #141
262: astore        27
264: new           #73
267: dup
268: lconst_0
269: invokespecial #74
272: astore        28
274: aload         28
276: invokevirtual #75
279: astore        29
281: aload         28
283: invokevirtual #336
286: lstore        30
288: aconst_null
289: astore        32
291: new           #10
294: dup
295: aload         32
297: invokespecial #11
300: astore        33
302: aload         33
304: invokevirtual #12
307: lstore        34
309: aload         33
311: invokevirtual #12
314: lstore        36
316: new           #13
319: dup
320: aload         33
322: invokespecial #14
325: astore        38
327: new           #31
330: dup
331: aload         33
333: invokespecial #32
336: astore        39
338: aload         28
340: aload         33
342: invokevirtual #337
345: istore        40
347: new           #31
350: dup
351: aload         33
353: sipush        1000
356: iconst_1
357: invokespecial #108
360: astore        41
362: iconst_4
363: newarray       byte
365: dup
366: iconst_0
367: bipush        54
369: bastore
370: dup
371: iconst_1
372: bipush        53
374: bastore
375: dup
376: iconst_2
377: iconst_1
378: bastore
379: dup
380: iconst_3
381: bipush        10
383: bastore
384: astore        42
386: aload         42
388: invokestatic  #192
391: istore        43
393: new           #73
396: dup
397: aload         42
399: invokespecial #406
402: astore        44
404: aload         42
406: bipush        50
408: invokestatic  #523
411: istore        45
413: aload         41
415: aload         42
417: iconst_m1
418: sipush        24576
421: invokevirtual #174
424: istore        46
426: aload         27
428: aload         42
430: sipush        504
433: bipush        97
435: invokevirtual #174
438: istore        47
440: aload_1
441: ldc           #164
443: aload         27
445: invokevirtual #38
448: astore        48
450: aconst_null
451: astore        49
453: new           #10
456: dup
457: aload         49
459: invokespecial #11
462: astore        50
464: aload         50
466: invokevirtual #12
469: lstore        51
471: aload         50
473: invokevirtual #12
476: lstore        53
478: new           #13
481: dup
482: aload         50
484: invokespecial #14
487: astore        55
489: aload         55
491: invokevirtual #140
494: new           #31
497: dup
498: aload         55
500: sipush        24576
503: sipush        255
506: invokespecial #108
509: astore        56
511: aload         56
513: invokevirtual #158
516: istore        57
518: aload         56
520: invokevirtual #737
523: istore        58
525: aload         56
527: invokevirtual #158
530: istore        59
532: aload         56
534: ldc2_w        #738
537: invokevirtual #514
540: lstore        60
542: aload         56
544: ldc2_w        #740
547: invokevirtual #742
550: aload_1
551: ldc_w         #357
554: aload         56
556: invokevirtual #38
559: astore        62
561: ldc_w         #358
564: invokestatic  #20
567: goto          572
570: astore        62
572: new           #22
575: dup
576: invokespecial #23
579: ldc           #24
581: invokevirtual #25
584: lload         4
586: invokevirtual #26
589: ldc           #27
591: invokevirtual #25
594: lconst_0
595: invokevirtual #26
598: ldc           #24
600: invokevirtual #25
603: invokevirtual #28
606: lload         4
608: lconst_0
609: lcmp
610: ifne          617
613: iconst_1
614: goto          618
617: iconst_0
618: invokestatic  #29
621: aload         6
623: invokestatic  #53
626: new           #22
629: dup
630: invokespecial #23
633: ldc           #24
635: invokevirtual #25
638: iload         11
640: invokevirtual #69
643: ldc           #27
645: invokevirtual #25
648: iconst_0
649: invokevirtual #69
652: ldc           #24
654: invokevirtual #25
657: invokevirtual #28
660: iload         11
662: ifne          669
665: iconst_1
666: goto          670
669: iconst_0
670: invokestatic  #29
673: new           #22
676: dup
677: invokespecial #23
680: ldc           #24
682: invokevirtual #25
685: iload         12
687: invokevirtual #69
690: ldc           #27
692: invokevirtual #25
695: iconst_0
696: invokevirtual #69
699: ldc           #24
701: invokevirtual #25
704: invokevirtual #28
707: iload         12
709: ifne          716
712: iconst_1
713: goto          717
716: iconst_0
717: invokestatic  #29
720: new           #22
723: dup
724: invokespecial #23
727: ldc           #24
729: invokevirtual #25
732: aload         13
734: invokevirtual #25
737: ldc_w         #317
740: invokevirtual #25
743: invokevirtual #28
746: aload         13
748: ldc           #85
750: invokestatic  #154
753: aload         15
755: invokestatic  #53
758: new           #22
761: dup
762: invokespecial #23
765: ldc           #24
767: invokevirtual #25
770: lload         18
772: invokevirtual #26
775: ldc           #27
777: invokevirtual #25
780: lconst_0
781: invokevirtual #26
784: ldc           #24
786: invokevirtual #25
789: invokevirtual #28
792: lload         18
794: lconst_0
795: lcmp
796: ifne          803
799: iconst_1
800: goto          804
803: iconst_0
804: invokestatic  #29
807: new           #22
810: dup
811: invokespecial #23
814: ldc           #24
816: invokevirtual #25
819: lload         20
821: invokevirtual #26
824: ldc           #27
826: invokevirtual #25
829: lconst_0
830: invokevirtual #26
833: ldc           #24
835: invokevirtual #25
838: invokevirtual #28
841: lload         20
843: lconst_0
844: lcmp
845: ifne          852
848: iconst_1
849: goto          853
852: iconst_0
853: invokestatic  #29
856: aload         29
858: invokestatic  #53
861: aload         29
863: invokestatic  #66
866: ldc           #77
868: invokestatic  #68
871: new           #22
874: dup
875: invokespecial #23
878: ldc           #24
880: invokevirtual #25
883: lload         30
885: invokevirtual #26
888: ldc           #27
890: invokevirtual #25
893: lconst_0
894: invokevirtual #26
897: ldc           #24
899: invokevirtual #25
902: invokevirtual #28
905: lload         30
907: lconst_0
908: lcmp
909: ifne          916
912: iconst_1
913: goto          917
916: iconst_0
917: invokestatic  #29
920: new           #22
923: dup
924: invokespecial #23
927: ldc           #24
929: invokevirtual #25
932: lload         34
934: invokevirtual #26
937: ldc           #27
939: invokevirtual #25
942: lconst_0
943: invokevirtual #26
946: ldc           #24
948: invokevirtual #25
951: invokevirtual #28
954: lload         34
956: lconst_0
957: lcmp
958: ifne          965
961: iconst_1
962: goto          966
965: iconst_0
966: invokestatic  #29
969: new           #22
972: dup
973: invokespecial #23
976: ldc           #24
978: invokevirtual #25
981: lload         36
983: invokevirtual #26
986: ldc           #27
988: invokevirtual #25
991: lconst_0
992: invokevirtual #26
995: ldc           #24
997: invokevirtual #25
1000: invokevirtual #28
1003: lload         36
1005: lconst_0
1006: lcmp
1007: ifne          1014
1010: iconst_1
1011: goto          1015
1014: iconst_0
1015: invokestatic  #29
1018: new           #22
1021: dup
1022: invokespecial #23
1025: ldc           #24
1027: invokevirtual #25
1030: iload         40
1032: invokevirtual #69
1035: ldc           #27
1037: invokevirtual #25
1040: iconst_0
1041: invokevirtual #69
1044: ldc           #24
1046: invokevirtual #25
1049: invokevirtual #28
1052: iload         40
1054: ifne          1061
1057: iconst_1
1058: goto          1062
1061: iconst_0
1062: invokestatic  #29
1065: aload         42
1067: invokestatic  #53
1070: aload         42
1072: invokestatic  #66
1075: ldc_w         #409
1078: invokestatic  #68
1081: new           #22
1084: dup
1085: invokespecial #23
1088: ldc           #24
1090: invokevirtual #25
1093: iload         43
1095: invokevirtual #69
1098: ldc           #27
1100: invokevirtual #25
1103: iconst_0
1104: invokevirtual #69
1107: ldc           #24
1109: invokevirtual #25
1112: invokevirtual #28
1115: iload         43
1117: ifne          1124
1120: iconst_1
1121: goto          1125
1124: iconst_0
1125: invokestatic  #29
1128: new           #22
1131: dup
1132: invokespecial #23
1135: ldc           #24
1137: invokevirtual #25
1140: iload         45
1142: invokevirtual #69
1145: ldc           #27
1147: invokevirtual #25
1150: iconst_0
1151: invokevirtual #69
1154: ldc           #24
1156: invokevirtual #25
1159: invokevirtual #28
1162: iload         45
1164: ifne          1171
1167: iconst_1
1168: goto          1172
1171: iconst_0
1172: invokestatic  #29
1175: new           #22
1178: dup
1179: invokespecial #23
1182: ldc           #24
1184: invokevirtual #25
1187: iload         46
1189: invokevirtual #41
1192: ldc           #27
1194: invokevirtual #25
1197: iconst_m1
1198: invokevirtual #41
1201: ldc           #24
1203: invokevirtual #25
1206: invokevirtual #28
1209: iload         46
1211: iconst_m1
1212: if_icmpne     1219
1215: iconst_1
1216: goto          1220
1219: iconst_0
1220: invokestatic  #29
1223: new           #22
1226: dup
1227: invokespecial #23
1230: ldc           #24
1232: invokevirtual #25
1235: iload         47
1237: invokevirtual #41
1240: ldc           #27
1242: invokevirtual #25
1245: iconst_m1
1246: invokevirtual #41
1249: ldc           #24
1251: invokevirtual #25
1254: invokevirtual #28
1257: iload         47
1259: iconst_m1
1260: if_icmpne     1267
1263: iconst_1
1264: goto          1268
1267: iconst_0
1268: invokestatic  #29
1271: aload         48
1273: invokestatic  #53
1276: new           #22
1279: dup
1280: invokespecial #23
1283: ldc           #24
1285: invokevirtual #25
1288: lload         51
1290: invokevirtual #26
1293: ldc           #27
1295: invokevirtual #25
1298: lconst_0
1299: invokevirtual #26
1302: ldc           #24
1304: invokevirtual #25
1307: invokevirtual #28
1310: lload         51
1312: lconst_0
1313: lcmp
1314: ifne          1321
1317: iconst_1
1318: goto          1322
1321: iconst_0
1322: invokestatic  #29
1325: new           #22
1328: dup
1329: invokespecial #23
1332: ldc           #24
1334: invokevirtual #25
1337: lload         53
1339: invokevirtual #26
1342: ldc           #27
1344: invokevirtual #25
1347: lconst_0
1348: invokevirtual #26
1351: ldc           #24
1353: invokevirtual #25
1356: invokevirtual #28
1359: lload         53
1361: lconst_0
1362: lcmp
1363: ifne          1370
1366: iconst_1
1367: goto          1371
1370: iconst_0
1371: invokestatic  #29
1374: new           #22
1377: dup
1378: invokespecial #23
1381: ldc           #24
1383: invokevirtual #25
1386: iload         57
1388: invokevirtual #41
1391: ldc           #27
1393: invokevirtual #25
1396: iconst_0
1397: invokevirtual #41
1400: ldc           #24
1402: invokevirtual #25
1405: invokevirtual #28
1408: iload         57
1410: ifne          1417
1413: iconst_1
1414: goto          1418
1417: iconst_0
1418: invokestatic  #29
1421: new           #22
1424: dup
1425: invokespecial #23
1428: ldc           #24
1430: invokevirtual #25
1433: iload         58
1435: invokevirtual #41
1438: ldc           #27
1440: invokevirtual #25
1443: sipush        255
1446: invokevirtual #41
1449: ldc           #24
1451: invokevirtual #25
1454: invokevirtual #28
1457: iload         58
1459: sipush        255
1462: if_icmpne     1469
1465: iconst_1
1466: goto          1470
1469: iconst_0
1470: invokestatic  #29
1473: new           #22
1476: dup
1477: invokespecial #23
1480: ldc           #24
1482: invokevirtual #25
1485: iload         59
1487: invokevirtual #41
1490: ldc           #27
1492: invokevirtual #25
1495: iconst_0
1496: invokevirtual #41
1499: ldc           #24
1501: invokevirtual #25
1504: invokevirtual #28
1507: iload         59
1509: ifne          1516
1512: iconst_1
1513: goto          1517
1516: iconst_0
1517: invokestatic  #29
1520: new           #22
1523: dup
1524: invokespecial #23
1527: ldc           #24
1529: invokevirtual #25
1532: lload         60
1534: invokevirtual #26
1537: ldc           #27
1539: invokevirtual #25
1542: lconst_0
1543: invokevirtual #26
1546: ldc           #24
1548: invokevirtual #25
1551: invokevirtual #28
1554: lload         60
1556: lconst_0
1557: lcmp
1558: ifne          1565
1561: iconst_1
1562: goto          1566
1565: iconst_0
1566: invokestatic  #29
1569: return
Exception table:
from    to  target type
550   567   570   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test241
Start line: 9249
End line: 0
Method source code: 
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(83);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry14 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int15 = tarArchiveEntry14.getDevMinor();
        tarArchiveEntry14.setIds((int) (short) 3, 0);
        long long19 = tarArchiveEntry14.getSize();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry21 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int22 = tarArchiveEntry21.getDevMinor();
        tarArchiveEntry21.setUserId(0);
        java.io.File file25 = tarArchiveEntry21.getFile();
        java.util.Date date26 = tarArchiveEntry21.getLastModifiedDate();
        tarArchiveEntry21.setMode(0);
        java.lang.String str29 = org.apache.commons.compress.utils.ArchiveUtils.toString((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry21);
        boolean boolean30 = tarArchiveEntry21.isPaxHeader();
        boolean boolean31 = tarArchiveEntry14.isDescendent(tarArchiveEntry21);
        try {
            arArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry14);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.compress.archivers.tar.TarArchiveEntry cannot be cast to org.apache.commons.compress.archivers.ar.ArArchiveEntry");
        } catch (java.lang.ClassCastException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNull(file25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "-       0 jar" + "'", str29, "-       0 jar");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #743
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: bipush        83
86: invokevirtual #399
89: new           #112
92: dup
93: ldc           #44
95: invokespecial #120
98: astore        10
100: aload         10
102: invokevirtual #129
105: istore        11
107: aload         10
109: iconst_3
110: iconst_0
111: invokevirtual #130
114: aload         10
116: invokevirtual #156
119: lstore        12
121: new           #112
124: dup
125: ldc           #44
127: invokespecial #120
130: astore        14
132: aload         14
134: invokevirtual #129
137: istore        15
139: aload         14
141: iconst_0
142: invokevirtual #272
145: aload         14
147: invokevirtual #395
150: astore        16
152: aload         14
154: invokevirtual #122
157: astore        17
159: aload         14
161: iconst_0
162: invokevirtual #121
165: aload         14
167: invokestatic  #449
170: astore        18
172: aload         14
174: invokevirtual #620
177: istore        19
179: aload         10
181: aload         14
183: invokevirtual #277
186: istore        20
188: aload         9
190: aload         10
192: invokevirtual #288
195: ldc_w         #452
198: invokestatic  #20
201: goto          206
204: astore        21
206: new           #22
209: dup
210: invokespecial #23
213: ldc           #24
215: invokevirtual #25
218: lload         4
220: invokevirtual #26
223: ldc           #27
225: invokevirtual #25
228: lconst_0
229: invokevirtual #26
232: ldc           #24
234: invokevirtual #25
237: invokevirtual #28
240: lload         4
242: lconst_0
243: lcmp
244: ifne          251
247: iconst_1
248: goto          252
251: iconst_0
252: invokestatic  #29
255: aload         6
257: invokestatic  #53
260: new           #22
263: dup
264: invokespecial #23
267: ldc           #24
269: invokevirtual #25
272: lload         7
274: invokevirtual #26
277: ldc           #27
279: invokevirtual #25
282: lconst_0
283: invokevirtual #26
286: ldc           #24
288: invokevirtual #25
291: invokevirtual #28
294: lload         7
296: lconst_0
297: lcmp
298: ifne          305
301: iconst_1
302: goto          306
305: iconst_0
306: invokestatic  #29
309: new           #22
312: dup
313: invokespecial #23
316: ldc           #24
318: invokevirtual #25
321: iload         11
323: invokevirtual #41
326: ldc           #27
328: invokevirtual #25
331: iconst_0
332: invokevirtual #41
335: ldc           #24
337: invokevirtual #25
340: invokevirtual #28
343: iload         11
345: ifne          352
348: iconst_1
349: goto          353
352: iconst_0
353: invokestatic  #29
356: new           #22
359: dup
360: invokespecial #23
363: ldc           #24
365: invokevirtual #25
368: lload         12
370: invokevirtual #26
373: ldc           #27
375: invokevirtual #25
378: lconst_0
379: invokevirtual #26
382: ldc           #24
384: invokevirtual #25
387: invokevirtual #28
390: lload         12
392: lconst_0
393: lcmp
394: ifne          401
397: iconst_1
398: goto          402
401: iconst_0
402: invokestatic  #29
405: new           #22
408: dup
409: invokespecial #23
412: ldc           #24
414: invokevirtual #25
417: iload         15
419: invokevirtual #41
422: ldc           #27
424: invokevirtual #25
427: iconst_0
428: invokevirtual #41
431: ldc           #24
433: invokevirtual #25
436: invokevirtual #28
439: iload         15
441: ifne          448
444: iconst_1
445: goto          449
448: iconst_0
449: invokestatic  #29
452: aload         16
454: invokestatic  #168
457: aload         17
459: invokestatic  #53
462: new           #22
465: dup
466: invokespecial #23
469: ldc           #24
471: invokevirtual #25
474: aload         18
476: invokevirtual #25
479: ldc_w         #744
482: invokevirtual #25
485: invokevirtual #28
488: aload         18
490: ldc           #90
492: invokestatic  #154
495: new           #22
498: dup
499: invokespecial #23
502: ldc           #24
504: invokevirtual #25
507: iload         19
509: invokevirtual #69
512: ldc           #27
514: invokevirtual #25
517: iconst_0
518: invokevirtual #69
521: ldc           #24
523: invokevirtual #25
526: invokevirtual #28
529: iload         19
531: ifne          538
534: iconst_1
535: goto          539
538: iconst_0
539: invokestatic  #29
542: new           #22
545: dup
546: invokespecial #23
549: ldc           #24
551: invokevirtual #25
554: iload         20
556: invokevirtual #69
559: ldc           #27
561: invokevirtual #25
564: iconst_1
565: invokevirtual #69
568: ldc           #24
570: invokevirtual #25
573: invokevirtual #28
576: iload         20
578: iconst_1
579: if_icmpne     586
582: iconst_1
583: goto          587
586: iconst_0
587: invokestatic  #29
590: return
Exception table:
from    to  target type
188   201   204   Class java/lang/ClassCastException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test242
Start line: 9296
End line: 0
Method source code: 
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        arArchiveOutputStream10.flush();
        arArchiveOutputStream10.setLongFileMode((int) (byte) -1);
        try {
            arArchiveOutputStream10.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #745
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: invokevirtual #528
100: aload         9
102: iconst_m1
103: invokevirtual #399
106: aload         9
108: invokevirtual #539
111: ldc_w         #289
114: invokestatic  #20
117: goto          122
120: astore        10
122: new           #22
125: dup
126: invokespecial #23
129: ldc           #24
131: invokevirtual #25
134: lload         4
136: invokevirtual #26
139: ldc           #27
141: invokevirtual #25
144: lconst_0
145: invokevirtual #26
148: ldc           #24
150: invokevirtual #25
153: invokevirtual #28
156: lload         4
158: lconst_0
159: lcmp
160: ifne          167
163: iconst_1
164: goto          168
167: iconst_0
168: invokestatic  #29
171: aload         6
173: invokestatic  #53
176: new           #22
179: dup
180: invokespecial #23
183: ldc           #24
185: invokevirtual #25
188: lload         7
190: invokevirtual #26
193: ldc           #27
195: invokevirtual #25
198: lconst_0
199: invokevirtual #26
202: ldc           #24
204: invokevirtual #25
207: invokevirtual #28
210: lload         7
212: lconst_0
213: lcmp
214: ifne          221
217: iconst_1
218: goto          222
221: iconst_0
222: invokestatic  #29
225: return
Exception table:
from    to  target type
106   117   120   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test243
Start line: 9324
End line: 0
Method source code: 
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        jarArchiveOutputStream12.setEncoding("5");
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode15 = null;
        jarArchiveOutputStream12.setUseZip64(zip64Mode15);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry17 = null;
        try {
            jarArchiveOutputStream12.putArchiveEntry(archiveEntry17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #746
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: aload         10
105: ldc_w         #458
108: invokevirtual #459
111: aconst_null
112: astore        11
114: aload         10
116: aload         11
118: invokevirtual #460
121: aconst_null
122: astore        12
124: aload         10
126: aload         12
128: invokevirtual #396
131: ldc           #51
133: invokestatic  #20
136: goto          141
139: astore        13
141: new           #22
144: dup
145: invokespecial #23
148: ldc           #24
150: invokevirtual #25
153: lload         4
155: invokevirtual #26
158: ldc           #27
160: invokevirtual #25
163: lconst_0
164: invokevirtual #26
167: ldc           #24
169: invokevirtual #25
172: invokevirtual #28
175: lload         4
177: lconst_0
178: lcmp
179: ifne          186
182: iconst_1
183: goto          187
186: iconst_0
187: invokestatic  #29
190: aload         6
192: invokestatic  #53
195: new           #22
198: dup
199: invokespecial #23
202: ldc           #24
204: invokevirtual #25
207: iload         7
209: invokevirtual #41
212: ldc           #27
214: invokevirtual #25
217: iconst_0
218: invokevirtual #41
221: ldc           #24
223: invokevirtual #25
226: invokevirtual #28
229: iload         7
231: ifne          238
234: iconst_1
235: goto          239
238: iconst_0
239: invokestatic  #29
242: return
Exception table:
from    to  target type
124   136   139   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test244
Start line: 9354
End line: 0
Method source code: 
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        java.lang.String str20 = zipArchiveOutputStream13.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21);
        java.io.InputStream inputStream23 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream23);
        long long25 = jarArchiveInputStream24.getBytesRead();
        long long26 = jarArchiveInputStream24.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream27 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream24);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream28 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream24);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry29 = tarArchiveInputStream28.getNextEntry();
        long long30 = tarArchiveInputStream28.getBytesRead();
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream31 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream28);
        boolean boolean32 = zipArchiveInputStream31.markSupported();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream33 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream31);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream34 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) jarArchiveInputStream33);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry36 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int37 = tarArchiveEntry36.getDevMinor();
        tarArchiveEntry36.setUserId(0);
        java.io.File file40 = tarArchiveEntry36.getFile();
        tarArchiveEntry36.setLinkName("org.apache.commons.compress.archivers.ArchiveException:  \000");
        long long43 = tarArchiveEntry36.getSize();
        boolean boolean44 = zipArchiveInputStream34.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry36);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream45 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) zipArchiveInputStream34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNull(archiveEntry29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(file40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #747
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: aload         9
125: invokevirtual #310
128: astore        13
130: new           #143
133: dup
134: aload         9
136: invokespecial #144
139: astore        14
141: aload_1
142: ldc           #164
144: aload         14
146: invokevirtual #49
149: astore        15
151: aconst_null
152: astore        16
154: new           #10
157: dup
158: aload         16
160: invokespecial #11
163: astore        17
165: aload         17
167: invokevirtual #12
170: lstore        18
172: aload         17
174: invokevirtual #12
177: lstore        20
179: new           #13
182: dup
183: aload         17
185: invokespecial #14
188: astore        22
190: new           #31
193: dup
194: aload         17
196: invokespecial #32
199: astore        23
201: aload         23
203: invokevirtual #199
206: astore        24
208: aload         23
210: invokevirtual #573
213: lstore        25
215: new           #15
218: dup
219: aload         23
221: invokespecial #300
224: astore        27
226: aload         27
228: invokevirtual #519
231: istore        28
233: new           #10
236: dup
237: aload         27
239: invokespecial #11
242: astore        29
244: new           #15
247: dup
248: aload         29
250: invokespecial #300
253: astore        30
255: new           #112
258: dup
259: ldc           #44
261: invokespecial #120
264: astore        31
266: aload         31
268: invokevirtual #129
271: istore        32
273: aload         31
275: iconst_0
276: invokevirtual #272
279: aload         31
281: invokevirtual #395
284: astore        33
286: aload         31
288: ldc           #186
290: invokevirtual #433
293: aload         31
295: invokevirtual #156
298: lstore        34
300: aload         30
302: aload         31
304: invokevirtual #135
307: istore        36
309: aload_1
310: aload         30
312: invokevirtual #18
315: astore        37
317: ldc           #19
319: invokestatic  #20
322: goto          327
325: astore        37
327: new           #22
330: dup
331: invokespecial #23
334: ldc           #24
336: invokevirtual #25
339: lload         4
341: invokevirtual #26
344: ldc           #27
346: invokevirtual #25
349: lconst_0
350: invokevirtual #26
353: ldc           #24
355: invokevirtual #25
358: invokevirtual #28
361: lload         4
363: lconst_0
364: lcmp
365: ifne          372
368: iconst_1
369: goto          373
372: iconst_0
373: invokestatic  #29
376: aload         6
378: invokestatic  #53
381: new           #22
384: dup
385: invokespecial #23
388: ldc           #24
390: invokevirtual #25
393: iload         11
395: invokevirtual #69
398: ldc           #27
400: invokevirtual #25
403: iconst_0
404: invokevirtual #69
407: ldc           #24
409: invokevirtual #25
412: invokevirtual #28
415: iload         11
417: ifne          424
420: iconst_1
421: goto          425
424: iconst_0
425: invokestatic  #29
428: new           #22
431: dup
432: invokespecial #23
435: ldc           #24
437: invokevirtual #25
440: iload         12
442: invokevirtual #69
445: ldc           #27
447: invokevirtual #25
450: iconst_0
451: invokevirtual #69
454: ldc           #24
456: invokevirtual #25
459: invokevirtual #28
462: iload         12
464: ifne          471
467: iconst_1
468: goto          472
471: iconst_0
472: invokestatic  #29
475: new           #22
478: dup
479: invokespecial #23
482: ldc           #24
484: invokevirtual #25
487: aload         13
489: invokevirtual #25
492: ldc_w         #317
495: invokevirtual #25
498: invokevirtual #28
501: aload         13
503: ldc           #85
505: invokestatic  #154
508: aload         15
510: invokestatic  #53
513: new           #22
516: dup
517: invokespecial #23
520: ldc           #24
522: invokevirtual #25
525: lload         18
527: invokevirtual #26
530: ldc           #27
532: invokevirtual #25
535: lconst_0
536: invokevirtual #26
539: ldc           #24
541: invokevirtual #25
544: invokevirtual #28
547: lload         18
549: lconst_0
550: lcmp
551: ifne          558
554: iconst_1
555: goto          559
558: iconst_0
559: invokestatic  #29
562: new           #22
565: dup
566: invokespecial #23
569: ldc           #24
571: invokevirtual #25
574: lload         20
576: invokevirtual #26
579: ldc           #27
581: invokevirtual #25
584: lconst_0
585: invokevirtual #26
588: ldc           #24
590: invokevirtual #25
593: invokevirtual #28
596: lload         20
598: lconst_0
599: lcmp
600: ifne          607
603: iconst_1
604: goto          608
607: iconst_0
608: invokestatic  #29
611: aload         24
613: invokestatic  #168
616: new           #22
619: dup
620: invokespecial #23
623: ldc           #24
625: invokevirtual #25
628: lload         25
630: invokevirtual #26
633: ldc           #27
635: invokevirtual #25
638: lconst_0
639: invokevirtual #26
642: ldc           #24
644: invokevirtual #25
647: invokevirtual #28
650: lload         25
652: lconst_0
653: lcmp
654: ifne          661
657: iconst_1
658: goto          662
661: iconst_0
662: invokestatic  #29
665: new           #22
668: dup
669: invokespecial #23
672: ldc           #24
674: invokevirtual #25
677: iload         28
679: invokevirtual #69
682: ldc           #27
684: invokevirtual #25
687: iconst_0
688: invokevirtual #69
691: ldc           #24
693: invokevirtual #25
696: invokevirtual #28
699: iload         28
701: ifne          708
704: iconst_1
705: goto          709
708: iconst_0
709: invokestatic  #29
712: new           #22
715: dup
716: invokespecial #23
719: ldc           #24
721: invokevirtual #25
724: iload         32
726: invokevirtual #41
729: ldc           #27
731: invokevirtual #25
734: iconst_0
735: invokevirtual #41
738: ldc           #24
740: invokevirtual #25
743: invokevirtual #28
746: iload         32
748: ifne          755
751: iconst_1
752: goto          756
755: iconst_0
756: invokestatic  #29
759: aload         33
761: invokestatic  #168
764: new           #22
767: dup
768: invokespecial #23
771: ldc           #24
773: invokevirtual #25
776: lload         34
778: invokevirtual #26
781: ldc           #27
783: invokevirtual #25
786: lconst_0
787: invokevirtual #26
790: ldc           #24
792: invokevirtual #25
795: invokevirtual #28
798: lload         34
800: lconst_0
801: lcmp
802: ifne          809
805: iconst_1
806: goto          810
809: iconst_0
810: invokestatic  #29
813: new           #22
816: dup
817: invokespecial #23
820: ldc           #24
822: invokevirtual #25
825: iload         36
827: invokevirtual #69
830: ldc           #27
832: invokevirtual #25
835: iconst_0
836: invokevirtual #69
839: ldc           #24
841: invokevirtual #25
844: invokevirtual #28
847: iload         36
849: ifne          856
852: iconst_1
853: goto          857
856: iconst_0
857: invokestatic  #29
860: return
Exception table:
from    to  target type
309   322   325   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test245
Start line: 9418
End line: 0
Method source code: 
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream19 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream15, 64);
        int int20 = tarArchiveInputStream19.available();
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream19, "tar", false, false);
        int int25 = tarArchiveInputStream19.getRecordSize();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream26 = archiveStreamFactory0.createArchiveInputStream("", (java.io.InputStream) tarArchiveInputStream19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver:  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 512 + "'", int25 == 512);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #748
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: new           #31
129: dup
130: aload         14
132: bipush        64
134: invokespecial #141
137: astore        15
139: aload         15
141: invokevirtual #158
144: istore        16
146: new           #15
149: dup
150: aload         15
152: ldc           #164
154: iconst_0
155: iconst_0
156: invokespecial #17
159: astore        17
161: aload         15
163: invokevirtual #737
166: istore        18
168: aload_1
169: ldc           #61
171: aload         15
173: invokevirtual #38
176: astore        19
178: ldc           #204
180: invokestatic  #20
183: goto          188
186: astore        19
188: new           #22
191: dup
192: invokespecial #23
195: ldc           #24
197: invokevirtual #25
200: lload         4
202: invokevirtual #26
205: ldc           #27
207: invokevirtual #25
210: lconst_0
211: invokevirtual #26
214: ldc           #24
216: invokevirtual #25
219: invokevirtual #28
222: lload         4
224: lconst_0
225: lcmp
226: ifne          233
229: iconst_1
230: goto          234
233: iconst_0
234: invokestatic  #29
237: aload         6
239: invokestatic  #53
242: new           #22
245: dup
246: invokespecial #23
249: ldc           #24
251: invokevirtual #25
254: lload         9
256: invokevirtual #26
259: ldc           #27
261: invokevirtual #25
264: lconst_0
265: invokevirtual #26
268: ldc           #24
270: invokevirtual #25
273: invokevirtual #28
276: lload         9
278: lconst_0
279: lcmp
280: ifne          287
283: iconst_1
284: goto          288
287: iconst_0
288: invokestatic  #29
291: new           #22
294: dup
295: invokespecial #23
298: ldc           #24
300: invokevirtual #25
303: lload         11
305: invokevirtual #26
308: ldc           #27
310: invokevirtual #25
313: lconst_0
314: invokevirtual #26
317: ldc           #24
319: invokevirtual #25
322: invokevirtual #28
325: lload         11
327: lconst_0
328: lcmp
329: ifne          336
332: iconst_1
333: goto          337
336: iconst_0
337: invokestatic  #29
340: new           #22
343: dup
344: invokespecial #23
347: ldc           #24
349: invokevirtual #25
352: iload         16
354: invokevirtual #41
357: ldc           #27
359: invokevirtual #25
362: iconst_0
363: invokevirtual #41
366: ldc           #24
368: invokevirtual #25
371: invokevirtual #28
374: iload         16
376: ifne          383
379: iconst_1
380: goto          384
383: iconst_0
384: invokestatic  #29
387: new           #22
390: dup
391: invokespecial #23
394: ldc           #24
396: invokevirtual #25
399: iload         18
401: invokevirtual #41
404: ldc           #27
406: invokevirtual #25
409: sipush        512
412: invokevirtual #41
415: ldc           #24
417: invokevirtual #25
420: invokevirtual #28
423: iload         18
425: sipush        512
428: if_icmpne     435
431: iconst_1
432: goto          436
435: iconst_0
436: invokestatic  #29
439: return
Exception table:
from    to  target type
168   183   186   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test246
Start line: 9455
End line: 0
Method source code: 
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.OutputStream outputStream27 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream28 = archiveStreamFactory0.createArchiveOutputStream("ZipLong value: 0", outputStream27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: OutputStream must not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #749
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: aload_1
198: ldc           #105
200: aload         24
202: invokevirtual #49
205: astore        25
207: ldc           #106
209: invokestatic  #20
212: goto          217
215: astore        25
217: new           #22
220: dup
221: invokespecial #23
224: ldc           #24
226: invokevirtual #25
229: lload         4
231: invokevirtual #26
234: ldc           #27
236: invokevirtual #25
239: lconst_0
240: invokevirtual #26
243: ldc           #24
245: invokevirtual #25
248: invokevirtual #28
251: lload         4
253: lconst_0
254: lcmp
255: ifne          262
258: iconst_1
259: goto          263
262: iconst_0
263: invokestatic  #29
266: new           #22
269: dup
270: invokespecial #23
273: ldc           #24
275: invokevirtual #25
278: lload         6
280: invokevirtual #26
283: ldc           #27
285: invokevirtual #25
288: lconst_0
289: invokevirtual #26
292: ldc           #24
294: invokevirtual #25
297: invokevirtual #28
300: lload         6
302: lconst_0
303: lcmp
304: ifne          311
307: iconst_1
308: goto          312
311: iconst_0
312: invokestatic  #29
315: aload         10
317: invokestatic  #168
320: aload         11
322: invokestatic  #168
325: aload         13
327: invokestatic  #53
330: new           #22
333: dup
334: invokespecial #23
337: ldc           #24
339: invokevirtual #25
342: lload         16
344: invokevirtual #26
347: ldc           #27
349: invokevirtual #25
352: lconst_0
353: invokevirtual #26
356: ldc           #24
358: invokevirtual #25
361: invokevirtual #28
364: lload         16
366: lconst_0
367: lcmp
368: ifne          375
371: iconst_1
372: goto          376
375: iconst_0
376: invokestatic  #29
379: new           #22
382: dup
383: invokespecial #23
386: ldc           #24
388: invokevirtual #25
391: lload         18
393: invokevirtual #26
396: ldc           #27
398: invokevirtual #25
401: lconst_0
402: invokevirtual #26
405: ldc           #24
407: invokevirtual #25
410: invokevirtual #28
413: lload         18
415: lconst_0
416: lcmp
417: ifne          424
420: iconst_1
421: goto          425
424: iconst_0
425: invokestatic  #29
428: aload         21
430: invokestatic  #168
433: aload         23
435: invokestatic  #53
438: return
Exception table:
from    to  target type
197   212   215   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test247
Start line: 9499
End line: 0
Method source code: 
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        zipArchiveOutputStream9.setLevel((int) (short) 4);
        zipArchiveOutputStream9.setMethod((int) (byte) 88);
        zipArchiveOutputStream9.setUseLanguageEncodingFlag(true);
        java.io.File file16 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry18 = zipArchiveOutputStream9.createArchiveEntry(file16, "org.apache.commons.compress.archivers.ArchiveException: org.apache.commons.compress.archivers.ArchiveException:  \000");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #750
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: aload         7
79: iconst_4
80: invokevirtual #291
83: aload         7
85: bipush        88
87: invokevirtual #339
90: aload         7
92: iconst_1
93: invokevirtual #285
96: aconst_null
97: astore        8
99: aload         7
101: aload         8
103: ldc_w         #751
106: invokevirtual #752
109: astore        9
111: ldc           #51
113: invokestatic  #20
116: goto          121
119: astore        9
121: new           #22
124: dup
125: invokespecial #23
128: ldc           #24
130: invokevirtual #25
133: lload         4
135: invokevirtual #26
138: ldc           #27
140: invokevirtual #25
143: lconst_0
144: invokevirtual #26
147: ldc           #24
149: invokevirtual #25
152: invokevirtual #28
155: lload         4
157: lconst_0
158: lcmp
159: ifne          166
162: iconst_1
163: goto          167
166: iconst_0
167: invokestatic  #29
170: aload         6
172: invokestatic  #53
175: return
Exception table:
from    to  target type
99   116   119   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test248
Start line: 9525
End line: 0
Method source code: 
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.InputStream inputStream26 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream27 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream26);
        long long28 = jarArchiveInputStream27.getBytesRead();
        long long29 = jarArchiveInputStream27.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream30 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream27);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream27);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream34 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream31, (int) (byte) 53, (int) (short) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream37 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream34, 40960, "jar");
        java.io.InputStream inputStream38 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream39 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream38);
        long long40 = jarArchiveInputStream39.getBytesRead();
        long long41 = jarArchiveInputStream39.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream42 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream39);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream43 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream39);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream44 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream43);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream48 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream44, "070702", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry51 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry51.setDevMinor((int) ' ');
        boolean boolean54 = cpioArchiveInputStream44.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry51);
        boolean boolean55 = tarArchiveInputStream34.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry51);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry57 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int58 = tarArchiveEntry57.getDevMinor();
        tarArchiveEntry57.setIds((int) (short) 3, 0);
        java.lang.String str62 = tarArchiveEntry57.getGroupName();
        tarArchiveEntry57.setDevMinor(0);
        tarArchiveEntry57.setLinkName("PK\003\004");
        boolean boolean67 = tarArchiveInputStream34.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry57);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream68 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #753
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #10
200: dup
201: aload         24
203: invokespecial #11
206: astore        25
208: aload         25
210: invokevirtual #12
213: lstore        26
215: aload         25
217: invokevirtual #12
220: lstore        28
222: new           #13
225: dup
226: aload         25
228: invokespecial #14
231: astore        30
233: new           #31
236: dup
237: aload         25
239: invokespecial #32
242: astore        31
244: new           #31
247: dup
248: aload         31
250: bipush        53
252: iconst_m1
253: invokespecial #108
256: astore        32
258: new           #31
261: dup
262: aload         32
264: ldc           #109
266: ldc           #44
268: invokespecial #110
271: astore        33
273: aconst_null
274: astore        34
276: new           #10
279: dup
280: aload         34
282: invokespecial #11
285: astore        35
287: aload         35
289: invokevirtual #12
292: lstore        36
294: aload         35
296: invokevirtual #12
299: lstore        38
301: new           #13
304: dup
305: aload         35
307: invokespecial #14
310: astore        40
312: new           #31
315: dup
316: aload         35
318: invokespecial #32
321: astore        41
323: new           #33
326: dup
327: aload         41
329: invokespecial #34
332: astore        42
334: new           #15
337: dup
338: aload         42
340: ldc           #111
342: iconst_0
343: iconst_0
344: invokespecial #17
347: astore        43
349: new           #112
352: dup
353: ldc           #61
355: iconst_0
356: invokespecial #113
359: astore        44
361: aload         44
363: bipush        32
365: invokevirtual #114
368: aload         42
370: aload         44
372: invokevirtual #115
375: istore        45
377: aload         32
379: aload         44
381: invokevirtual #116
384: istore        46
386: new           #112
389: dup
390: ldc           #44
392: invokespecial #120
395: astore        47
397: aload         47
399: invokevirtual #129
402: istore        48
404: aload         47
406: iconst_3
407: iconst_0
408: invokevirtual #130
411: aload         47
413: invokevirtual #376
416: astore        49
418: aload         47
420: iconst_0
421: invokevirtual #114
424: aload         47
426: ldc_w         #323
429: invokevirtual #433
432: aload         32
434: aload         47
436: invokevirtual #116
439: istore        50
441: aload_1
442: aload         32
444: invokevirtual #18
447: astore        51
449: ldc           #19
451: invokestatic  #20
454: goto          459
457: astore        51
459: new           #22
462: dup
463: invokespecial #23
466: ldc           #24
468: invokevirtual #25
471: lload         4
473: invokevirtual #26
476: ldc           #27
478: invokevirtual #25
481: lconst_0
482: invokevirtual #26
485: ldc           #24
487: invokevirtual #25
490: invokevirtual #28
493: lload         4
495: lconst_0
496: lcmp
497: ifne          504
500: iconst_1
501: goto          505
504: iconst_0
505: invokestatic  #29
508: new           #22
511: dup
512: invokespecial #23
515: ldc           #24
517: invokevirtual #25
520: lload         6
522: invokevirtual #26
525: ldc           #27
527: invokevirtual #25
530: lconst_0
531: invokevirtual #26
534: ldc           #24
536: invokevirtual #25
539: invokevirtual #28
542: lload         6
544: lconst_0
545: lcmp
546: ifne          553
549: iconst_1
550: goto          554
553: iconst_0
554: invokestatic  #29
557: aload         10
559: invokestatic  #168
562: aload         11
564: invokestatic  #168
567: aload         13
569: invokestatic  #53
572: new           #22
575: dup
576: invokespecial #23
579: ldc           #24
581: invokevirtual #25
584: lload         16
586: invokevirtual #26
589: ldc           #27
591: invokevirtual #25
594: lconst_0
595: invokevirtual #26
598: ldc           #24
600: invokevirtual #25
603: invokevirtual #28
606: lload         16
608: lconst_0
609: lcmp
610: ifne          617
613: iconst_1
614: goto          618
617: iconst_0
618: invokestatic  #29
621: new           #22
624: dup
625: invokespecial #23
628: ldc           #24
630: invokevirtual #25
633: lload         18
635: invokevirtual #26
638: ldc           #27
640: invokevirtual #25
643: lconst_0
644: invokevirtual #26
647: ldc           #24
649: invokevirtual #25
652: invokevirtual #28
655: lload         18
657: lconst_0
658: lcmp
659: ifne          666
662: iconst_1
663: goto          667
666: iconst_0
667: invokestatic  #29
670: aload         21
672: invokestatic  #168
675: aload         23
677: invokestatic  #53
680: new           #22
683: dup
684: invokespecial #23
687: ldc           #24
689: invokevirtual #25
692: lload         26
694: invokevirtual #26
697: ldc           #27
699: invokevirtual #25
702: lconst_0
703: invokevirtual #26
706: ldc           #24
708: invokevirtual #25
711: invokevirtual #28
714: lload         26
716: lconst_0
717: lcmp
718: ifne          725
721: iconst_1
722: goto          726
725: iconst_0
726: invokestatic  #29
729: new           #22
732: dup
733: invokespecial #23
736: ldc           #24
738: invokevirtual #25
741: lload         28
743: invokevirtual #26
746: ldc           #27
748: invokevirtual #25
751: lconst_0
752: invokevirtual #26
755: ldc           #24
757: invokevirtual #25
760: invokevirtual #28
763: lload         28
765: lconst_0
766: lcmp
767: ifne          774
770: iconst_1
771: goto          775
774: iconst_0
775: invokestatic  #29
778: new           #22
781: dup
782: invokespecial #23
785: ldc           #24
787: invokevirtual #25
790: lload         36
792: invokevirtual #26
795: ldc           #27
797: invokevirtual #25
800: lconst_0
801: invokevirtual #26
804: ldc           #24
806: invokevirtual #25
809: invokevirtual #28
812: lload         36
814: lconst_0
815: lcmp
816: ifne          823
819: iconst_1
820: goto          824
823: iconst_0
824: invokestatic  #29
827: new           #22
830: dup
831: invokespecial #23
834: ldc           #24
836: invokevirtual #25
839: lload         38
841: invokevirtual #26
844: ldc           #27
846: invokevirtual #25
849: lconst_0
850: invokevirtual #26
853: ldc           #24
855: invokevirtual #25
858: invokevirtual #28
861: lload         38
863: lconst_0
864: lcmp
865: ifne          872
868: iconst_1
869: goto          873
872: iconst_0
873: invokestatic  #29
876: new           #22
879: dup
880: invokespecial #23
883: ldc           #24
885: invokevirtual #25
888: iload         45
890: invokevirtual #69
893: ldc           #27
895: invokevirtual #25
898: iconst_1
899: invokevirtual #69
902: ldc           #24
904: invokevirtual #25
907: invokevirtual #28
910: iload         45
912: iconst_1
913: if_icmpne     920
916: iconst_1
917: goto          921
920: iconst_0
921: invokestatic  #29
924: new           #22
927: dup
928: invokespecial #23
931: ldc           #24
933: invokevirtual #25
936: iload         46
938: invokevirtual #69
941: ldc           #27
943: invokevirtual #25
946: iconst_1
947: invokevirtual #69
950: ldc           #24
952: invokevirtual #25
955: invokevirtual #28
958: iload         46
960: iconst_1
961: if_icmpne     968
964: iconst_1
965: goto          969
968: iconst_0
969: invokestatic  #29
972: new           #22
975: dup
976: invokespecial #23
979: ldc           #24
981: invokevirtual #25
984: iload         48
986: invokevirtual #41
989: ldc           #27
991: invokevirtual #25
994: iconst_0
995: invokevirtual #41
998: ldc           #24
1000: invokevirtual #25
1003: invokevirtual #28
1006: iload         48
1008: ifne          1015
1011: iconst_1
1012: goto          1016
1015: iconst_0
1016: invokestatic  #29
1019: new           #22
1022: dup
1023: invokespecial #23
1026: ldc           #24
1028: invokevirtual #25
1031: aload         49
1033: invokevirtual #25
1036: ldc           #219
1038: invokevirtual #25
1041: invokevirtual #28
1044: aload         49
1046: ldc           #61
1048: invokestatic  #154
1051: new           #22
1054: dup
1055: invokespecial #23
1058: ldc           #24
1060: invokevirtual #25
1063: iload         50
1065: invokevirtual #69
1068: ldc           #27
1070: invokevirtual #25
1073: iconst_1
1074: invokevirtual #69
1077: ldc           #24
1079: invokevirtual #25
1082: invokevirtual #28
1085: iload         50
1087: iconst_1
1088: if_icmpne     1095
1091: iconst_1
1092: goto          1096
1095: iconst_0
1096: invokestatic  #29
1099: return
Exception table:
from    to  target type
441   454   457   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test249
Start line: 9604
End line: 0
Method source code: 
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.InputStream inputStream27 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream28 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream27);
        long long29 = jarArchiveInputStream28.getBytesRead();
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) jarArchiveInputStream28);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry31 = zipArchiveInputStream30.getNextZipEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry32 = zipArchiveInputStream30.getNextEntry();
        java.io.InputStream inputStream33 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream33);
        long long35 = jarArchiveInputStream34.getBytesRead();
        long long36 = jarArchiveInputStream34.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream37 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream34);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream38 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream34);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream41 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream38, (int) (byte) 53, (int) (short) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream44 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream41, 40960, "jar");
        int int45 = tarArchiveInputStream44.available();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry46 = tarArchiveInputStream44.getNextEntry();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry49 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        boolean boolean50 = tarArchiveEntry49.isGNUSparse();
        java.lang.String str51 = tarArchiveEntry49.getLinkName();
        tarArchiveEntry49.setNames("0\000", "jar");
        java.lang.String str55 = tarArchiveEntry49.getName();
        boolean boolean56 = tarArchiveInputStream44.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry49);
        java.io.InputStream inputStream57 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream58 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream57);
        long long59 = jarArchiveInputStream58.getBytesRead();
        long long60 = jarArchiveInputStream58.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream61 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream58);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream62 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream58);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream63 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream62);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream64 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream62);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong66 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray67 = zipLong66.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong69 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray70 = zipLong69.getBytes();
        boolean boolean72 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray67, byteArray70, true);
        boolean boolean73 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray67);
        int int76 = tarArchiveInputStream62.read(byteArray67, (int) (short) 100, 100);
        long long77 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray67);
        int int78 = tarArchiveInputStream44.read(byteArray67);
        int int81 = zipArchiveInputStream30.read(byteArray67, 2048, (int) (byte) 10);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream82 = archiveStreamFactory0.createArchiveInputStream("\ufffd\003\000\000", (java.io.InputStream) zipArchiveInputStream30);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.zip.Zip64RequiredException: ???? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNull(zipArchiveEntry31);
        org.junit.Assert.assertNull(archiveEntry32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(archiveEntry46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #754
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #10
200: dup
201: aload         24
203: invokespecial #11
206: astore        25
208: aload         25
210: invokevirtual #12
213: lstore        26
215: new           #15
218: dup
219: aload         25
221: invokespecial #300
224: astore        28
226: aload         28
228: invokevirtual #755
231: astore        29
233: aload         28
235: invokevirtual #756
238: astore        30
240: aconst_null
241: astore        31
243: new           #10
246: dup
247: aload         31
249: invokespecial #11
252: astore        32
254: aload         32
256: invokevirtual #12
259: lstore        33
261: aload         32
263: invokevirtual #12
266: lstore        35
268: new           #13
271: dup
272: aload         32
274: invokespecial #14
277: astore        37
279: new           #31
282: dup
283: aload         32
285: invokespecial #32
288: astore        38
290: new           #31
293: dup
294: aload         38
296: bipush        53
298: iconst_m1
299: invokespecial #108
302: astore        39
304: new           #31
307: dup
308: aload         39
310: ldc           #109
312: ldc           #44
314: invokespecial #110
317: astore        40
319: aload         40
321: invokevirtual #158
324: istore        41
326: aload         40
328: invokevirtual #199
331: astore        42
333: new           #112
336: dup
337: ldc           #61
339: iconst_0
340: invokespecial #113
343: astore        43
345: aload         43
347: invokevirtual #422
350: istore        44
352: aload         43
354: invokevirtual #423
357: astore        45
359: aload         43
361: ldc_w         #424
364: ldc           #44
366: invokevirtual #125
369: aload         43
371: invokevirtual #276
374: astore        46
376: aload         40
378: aload         43
380: invokevirtual #116
383: istore        47
385: aconst_null
386: astore        48
388: new           #10
391: dup
392: aload         48
394: invokespecial #11
397: astore        49
399: aload         49
401: invokevirtual #12
404: lstore        50
406: aload         49
408: invokevirtual #12
411: lstore        52
413: new           #13
416: dup
417: aload         49
419: invokespecial #14
422: astore        54
424: new           #31
427: dup
428: aload         49
430: invokespecial #32
433: astore        55
435: new           #33
438: dup
439: aload         55
441: invokespecial #34
444: astore        56
446: new           #13
449: dup
450: aload         55
452: invokespecial #14
455: astore        57
457: new           #73
460: dup
461: lconst_0
462: invokespecial #74
465: astore        58
467: aload         58
469: invokevirtual #75
472: astore        59
474: new           #73
477: dup
478: lconst_0
479: invokespecial #74
482: astore        60
484: aload         60
486: invokevirtual #75
489: astore        61
491: aload         59
493: aload         61
495: iconst_1
496: invokestatic  #177
499: istore        62
501: aload         59
503: invokestatic  #192
506: istore        63
508: aload         55
510: aload         59
512: bipush        100
514: bipush        100
516: invokevirtual #174
519: istore        64
521: aload         59
523: invokestatic  #209
526: lstore        65
528: aload         40
530: aload         59
532: invokevirtual #696
535: istore        67
537: aload         28
539: aload         59
541: sipush        2048
544: bipush        10
546: invokevirtual #757
549: istore        68
551: aload_1
552: ldc_w         #567
555: aload         28
557: invokevirtual #38
560: astore        69
562: ldc_w         #758
565: invokestatic  #20
568: goto          573
571: astore        69
573: new           #22
576: dup
577: invokespecial #23
580: ldc           #24
582: invokevirtual #25
585: lload         4
587: invokevirtual #26
590: ldc           #27
592: invokevirtual #25
595: lconst_0
596: invokevirtual #26
599: ldc           #24
601: invokevirtual #25
604: invokevirtual #28
607: lload         4
609: lconst_0
610: lcmp
611: ifne          618
614: iconst_1
615: goto          619
618: iconst_0
619: invokestatic  #29
622: new           #22
625: dup
626: invokespecial #23
629: ldc           #24
631: invokevirtual #25
634: lload         6
636: invokevirtual #26
639: ldc           #27
641: invokevirtual #25
644: lconst_0
645: invokevirtual #26
648: ldc           #24
650: invokevirtual #25
653: invokevirtual #28
656: lload         6
658: lconst_0
659: lcmp
660: ifne          667
663: iconst_1
664: goto          668
667: iconst_0
668: invokestatic  #29
671: aload         10
673: invokestatic  #168
676: aload         11
678: invokestatic  #168
681: aload         13
683: invokestatic  #53
686: new           #22
689: dup
690: invokespecial #23
693: ldc           #24
695: invokevirtual #25
698: lload         16
700: invokevirtual #26
703: ldc           #27
705: invokevirtual #25
708: lconst_0
709: invokevirtual #26
712: ldc           #24
714: invokevirtual #25
717: invokevirtual #28
720: lload         16
722: lconst_0
723: lcmp
724: ifne          731
727: iconst_1
728: goto          732
731: iconst_0
732: invokestatic  #29
735: new           #22
738: dup
739: invokespecial #23
742: ldc           #24
744: invokevirtual #25
747: lload         18
749: invokevirtual #26
752: ldc           #27
754: invokevirtual #25
757: lconst_0
758: invokevirtual #26
761: ldc           #24
763: invokevirtual #25
766: invokevirtual #28
769: lload         18
771: lconst_0
772: lcmp
773: ifne          780
776: iconst_1
777: goto          781
780: iconst_0
781: invokestatic  #29
784: aload         21
786: invokestatic  #168
789: aload         23
791: invokestatic  #53
794: new           #22
797: dup
798: invokespecial #23
801: ldc           #24
803: invokevirtual #25
806: lload         26
808: invokevirtual #26
811: ldc           #27
813: invokevirtual #25
816: lconst_0
817: invokevirtual #26
820: ldc           #24
822: invokevirtual #25
825: invokevirtual #28
828: lload         26
830: lconst_0
831: lcmp
832: ifne          839
835: iconst_1
836: goto          840
839: iconst_0
840: invokestatic  #29
843: aload         29
845: invokestatic  #168
848: aload         30
850: invokestatic  #168
853: new           #22
856: dup
857: invokespecial #23
860: ldc           #24
862: invokevirtual #25
865: lload         33
867: invokevirtual #26
870: ldc           #27
872: invokevirtual #25
875: lconst_0
876: invokevirtual #26
879: ldc           #24
881: invokevirtual #25
884: invokevirtual #28
887: lload         33
889: lconst_0
890: lcmp
891: ifne          898
894: iconst_1
895: goto          899
898: iconst_0
899: invokestatic  #29
902: new           #22
905: dup
906: invokespecial #23
909: ldc           #24
911: invokevirtual #25
914: lload         35
916: invokevirtual #26
919: ldc           #27
921: invokevirtual #25
924: lconst_0
925: invokevirtual #26
928: ldc           #24
930: invokevirtual #25
933: invokevirtual #28
936: lload         35
938: lconst_0
939: lcmp
940: ifne          947
943: iconst_1
944: goto          948
947: iconst_0
948: invokestatic  #29
951: new           #22
954: dup
955: invokespecial #23
958: ldc           #24
960: invokevirtual #25
963: iload         41
965: invokevirtual #41
968: ldc           #27
970: invokevirtual #25
973: iconst_0
974: invokevirtual #41
977: ldc           #24
979: invokevirtual #25
982: invokevirtual #28
985: iload         41
987: ifne          994
990: iconst_1
991: goto          995
994: iconst_0
995: invokestatic  #29
998: aload         42
1000: invokestatic  #168
1003: new           #22
1006: dup
1007: invokespecial #23
1010: ldc           #24
1012: invokevirtual #25
1015: iload         44
1017: invokevirtual #69
1020: ldc           #27
1022: invokevirtual #25
1025: iconst_0
1026: invokevirtual #69
1029: ldc           #24
1031: invokevirtual #25
1034: invokevirtual #28
1037: iload         44
1039: ifne          1046
1042: iconst_1
1043: goto          1047
1046: iconst_0
1047: invokestatic  #29
1050: new           #22
1053: dup
1054: invokespecial #23
1057: ldc           #24
1059: invokevirtual #25
1062: aload         45
1064: invokevirtual #25
1067: ldc           #219
1069: invokevirtual #25
1072: invokevirtual #28
1075: aload         45
1077: ldc           #61
1079: invokestatic  #154
1082: new           #22
1085: dup
1086: invokespecial #23
1089: ldc           #24
1091: invokevirtual #25
1094: aload         46
1096: invokevirtual #25
1099: ldc           #219
1101: invokevirtual #25
1104: invokevirtual #28
1107: aload         46
1109: ldc           #61
1111: invokestatic  #154
1114: new           #22
1117: dup
1118: invokespecial #23
1121: ldc           #24
1123: invokevirtual #25
1126: iload         47
1128: invokevirtual #69
1131: ldc           #27
1133: invokevirtual #25
1136: iconst_1
1137: invokevirtual #69
1140: ldc           #24
1142: invokevirtual #25
1145: invokevirtual #28
1148: iload         47
1150: iconst_1
1151: if_icmpne     1158
1154: iconst_1
1155: goto          1159
1158: iconst_0
1159: invokestatic  #29
1162: new           #22
1165: dup
1166: invokespecial #23
1169: ldc           #24
1171: invokevirtual #25
1174: lload         50
1176: invokevirtual #26
1179: ldc           #27
1181: invokevirtual #25
1184: lconst_0
1185: invokevirtual #26
1188: ldc           #24
1190: invokevirtual #25
1193: invokevirtual #28
1196: lload         50
1198: lconst_0
1199: lcmp
1200: ifne          1207
1203: iconst_1
1204: goto          1208
1207: iconst_0
1208: invokestatic  #29
1211: new           #22
1214: dup
1215: invokespecial #23
1218: ldc           #24
1220: invokevirtual #25
1223: lload         52
1225: invokevirtual #26
1228: ldc           #27
1230: invokevirtual #25
1233: lconst_0
1234: invokevirtual #26
1237: ldc           #24
1239: invokevirtual #25
1242: invokevirtual #28
1245: lload         52
1247: lconst_0
1248: lcmp
1249: ifne          1256
1252: iconst_1
1253: goto          1257
1256: iconst_0
1257: invokestatic  #29
1260: aload         59
1262: invokestatic  #53
1265: aload         59
1267: invokestatic  #66
1270: ldc           #77
1272: invokestatic  #68
1275: aload         61
1277: invokestatic  #53
1280: aload         61
1282: invokestatic  #66
1285: ldc           #77
1287: invokestatic  #68
1290: new           #22
1293: dup
1294: invokespecial #23
1297: ldc           #24
1299: invokevirtual #25
1302: iload         62
1304: invokevirtual #69
1307: ldc           #27
1309: invokevirtual #25
1312: iconst_1
1313: invokevirtual #69
1316: ldc           #24
1318: invokevirtual #25
1321: invokevirtual #28
1324: iload         62
1326: iconst_1
1327: if_icmpne     1334
1330: iconst_1
1331: goto          1335
1334: iconst_0
1335: invokestatic  #29
1338: new           #22
1341: dup
1342: invokespecial #23
1345: ldc           #24
1347: invokevirtual #25
1350: iload         63
1352: invokevirtual #69
1355: ldc           #27
1357: invokevirtual #25
1360: iconst_1
1361: invokevirtual #69
1364: ldc           #24
1366: invokevirtual #25
1369: invokevirtual #28
1372: iload         63
1374: iconst_1
1375: if_icmpne     1382
1378: iconst_1
1379: goto          1383
1382: iconst_0
1383: invokestatic  #29
1386: new           #22
1389: dup
1390: invokespecial #23
1393: ldc           #24
1395: invokevirtual #25
1398: iload         64
1400: invokevirtual #41
1403: ldc           #27
1405: invokevirtual #25
1408: iconst_m1
1409: invokevirtual #41
1412: ldc           #24
1414: invokevirtual #25
1417: invokevirtual #28
1420: iload         64
1422: iconst_m1
1423: if_icmpne     1430
1426: iconst_1
1427: goto          1431
1430: iconst_0
1431: invokestatic  #29
1434: new           #22
1437: dup
1438: invokespecial #23
1441: ldc           #24
1443: invokevirtual #25
1446: lload         65
1448: invokevirtual #26
1451: ldc           #27
1453: invokevirtual #25
1456: lconst_0
1457: invokevirtual #26
1460: ldc           #24
1462: invokevirtual #25
1465: invokevirtual #28
1468: lload         65
1470: lconst_0
1471: lcmp
1472: ifne          1479
1475: iconst_1
1476: goto          1480
1479: iconst_0
1480: invokestatic  #29
1483: new           #22
1486: dup
1487: invokespecial #23
1490: ldc           #24
1492: invokevirtual #25
1495: iload         67
1497: invokevirtual #41
1500: ldc           #27
1502: invokevirtual #25
1505: iconst_m1
1506: invokevirtual #41
1509: ldc           #24
1511: invokevirtual #25
1514: invokevirtual #28
1517: iload         67
1519: iconst_m1
1520: if_icmpne     1527
1523: iconst_1
1524: goto          1528
1527: iconst_0
1528: invokestatic  #29
1531: new           #22
1534: dup
1535: invokespecial #23
1538: ldc           #24
1540: invokevirtual #25
1543: iload         68
1545: invokevirtual #41
1548: ldc           #27
1550: invokevirtual #25
1553: iconst_m1
1554: invokevirtual #41
1557: ldc           #24
1559: invokevirtual #25
1562: invokevirtual #28
1565: iload         68
1567: iconst_m1
1568: if_icmpne     1575
1571: iconst_1
1572: goto          1576
1575: iconst_0
1576: invokestatic  #29
1579: return
Exception table:
from    to  target type
551   568   571   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test250
Start line: 9710
End line: 0
Method source code: 
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        long long13 = tarArchiveEntry1.getSize();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry[] tarArchiveEntryArray14 = tarArchiveEntry1.getDirectoryEntries();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(tarArchiveEntryArray14);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #759
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: invokevirtual #156
98: lstore        11
100: aload_1
101: invokevirtual #728
104: astore        13
106: new           #22
109: dup
110: invokespecial #23
113: ldc           #24
115: invokevirtual #25
118: lload         5
120: invokevirtual #26
123: ldc           #27
125: invokevirtual #25
128: lconst_0
129: invokevirtual #26
132: ldc           #24
134: invokevirtual #25
137: invokevirtual #28
140: lload         5
142: lconst_0
143: lcmp
144: ifne          151
147: iconst_1
148: goto          152
151: iconst_0
152: invokestatic  #29
155: aload         7
157: invokestatic  #53
160: new           #22
163: dup
164: invokespecial #23
167: ldc           #24
169: invokevirtual #25
172: iload         8
174: invokevirtual #69
177: ldc           #27
179: invokevirtual #25
182: iconst_0
183: invokevirtual #69
186: ldc           #24
188: invokevirtual #25
191: invokevirtual #28
194: iload         8
196: ifne          203
199: iconst_1
200: goto          204
203: iconst_0
204: invokestatic  #29
207: new           #22
210: dup
211: invokespecial #23
214: ldc           #24
216: invokevirtual #25
219: lload         9
221: invokevirtual #26
224: ldc           #27
226: invokevirtual #25
229: lconst_0
230: invokevirtual #26
233: ldc           #24
235: invokevirtual #25
238: invokevirtual #28
241: lload         9
243: lconst_0
244: lcmp
245: ifne          252
248: iconst_1
249: goto          253
252: iconst_0
253: invokestatic  #29
256: new           #22
259: dup
260: invokespecial #23
263: ldc           #24
265: invokevirtual #25
268: lload         11
270: invokevirtual #26
273: ldc           #27
275: invokevirtual #25
278: lconst_0
279: invokevirtual #26
282: ldc           #24
284: invokevirtual #25
287: invokevirtual #28
290: lload         11
292: lconst_0
293: lcmp
294: ifne          301
297: iconst_1
298: goto          302
301: iconst_0
302: invokestatic  #29
305: aload         13
307: invokestatic  #53
310: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test251
Start line: 9733
End line: 0
Method source code: 
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        tarArchiveEntry1.setDevMajor((int) (short) 10);
        long long15 = tarArchiveEntry1.getRealSize();
        tarArchiveEntry1.setSize((long) 2048);
        tarArchiveEntry1.setDevMinor(49152);
        int int20 = tarArchiveEntry1.getGroupId();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #760
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: bipush        10
97: invokevirtual #287
100: aload_1
101: invokevirtual #327
104: lstore        11
106: aload_1
107: ldc2_w        #328
110: invokevirtual #330
113: aload_1
114: ldc_w         #595
117: invokevirtual #114
120: aload_1
121: invokevirtual #502
124: istore        13
126: new           #22
129: dup
130: invokespecial #23
133: ldc           #24
135: invokevirtual #25
138: lload         5
140: invokevirtual #26
143: ldc           #27
145: invokevirtual #25
148: lconst_0
149: invokevirtual #26
152: ldc           #24
154: invokevirtual #25
157: invokevirtual #28
160: lload         5
162: lconst_0
163: lcmp
164: ifne          171
167: iconst_1
168: goto          172
171: iconst_0
172: invokestatic  #29
175: aload         7
177: invokestatic  #53
180: new           #22
183: dup
184: invokespecial #23
187: ldc           #24
189: invokevirtual #25
192: iload         8
194: invokevirtual #69
197: ldc           #27
199: invokevirtual #25
202: iconst_0
203: invokevirtual #69
206: ldc           #24
208: invokevirtual #25
211: invokevirtual #28
214: iload         8
216: ifne          223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #29
227: new           #22
230: dup
231: invokespecial #23
234: ldc           #24
236: invokevirtual #25
239: lload         9
241: invokevirtual #26
244: ldc           #27
246: invokevirtual #25
249: lconst_0
250: invokevirtual #26
253: ldc           #24
255: invokevirtual #25
258: invokevirtual #28
261: lload         9
263: lconst_0
264: lcmp
265: ifne          272
268: iconst_1
269: goto          273
272: iconst_0
273: invokestatic  #29
276: new           #22
279: dup
280: invokespecial #23
283: ldc           #24
285: invokevirtual #25
288: lload         11
290: invokevirtual #26
293: ldc           #27
295: invokevirtual #25
298: lconst_0
299: invokevirtual #26
302: ldc           #24
304: invokevirtual #25
307: invokevirtual #28
310: lload         11
312: lconst_0
313: lcmp
314: ifne          321
317: iconst_1
318: goto          322
321: iconst_0
322: invokestatic  #29
325: new           #22
328: dup
329: invokespecial #23
332: ldc           #24
334: invokevirtual #25
337: iload         13
339: invokevirtual #41
342: ldc           #27
344: invokevirtual #25
347: iconst_0
348: invokevirtual #41
351: ldc           #24
353: invokevirtual #25
356: invokevirtual #28
359: iload         13
361: ifne          368
364: iconst_1
365: goto          369
368: iconst_0
369: invokestatic  #29
372: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test252
Start line: 9759
End line: 0
Method source code: 
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        int int13 = tarArchiveEntry1.getGroupId();
        java.io.File file14 = tarArchiveEntry1.getFile();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(file14);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #761
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: invokevirtual #502
98: istore        11
100: aload_1
101: invokevirtual #395
104: astore        12
106: new           #22
109: dup
110: invokespecial #23
113: ldc           #24
115: invokevirtual #25
118: lload         5
120: invokevirtual #26
123: ldc           #27
125: invokevirtual #25
128: lconst_0
129: invokevirtual #26
132: ldc           #24
134: invokevirtual #25
137: invokevirtual #28
140: lload         5
142: lconst_0
143: lcmp
144: ifne          151
147: iconst_1
148: goto          152
151: iconst_0
152: invokestatic  #29
155: aload         7
157: invokestatic  #53
160: new           #22
163: dup
164: invokespecial #23
167: ldc           #24
169: invokevirtual #25
172: iload         8
174: invokevirtual #69
177: ldc           #27
179: invokevirtual #25
182: iconst_0
183: invokevirtual #69
186: ldc           #24
188: invokevirtual #25
191: invokevirtual #28
194: iload         8
196: ifne          203
199: iconst_1
200: goto          204
203: iconst_0
204: invokestatic  #29
207: new           #22
210: dup
211: invokespecial #23
214: ldc           #24
216: invokevirtual #25
219: lload         9
221: invokevirtual #26
224: ldc           #27
226: invokevirtual #25
229: lconst_0
230: invokevirtual #26
233: ldc           #24
235: invokevirtual #25
238: invokevirtual #28
241: lload         9
243: lconst_0
244: lcmp
245: ifne          252
248: iconst_1
249: goto          253
252: iconst_0
253: invokestatic  #29
256: new           #22
259: dup
260: invokespecial #23
263: ldc           #24
265: invokevirtual #25
268: iload         11
270: invokevirtual #41
273: ldc           #27
275: invokevirtual #25
278: iconst_0
279: invokevirtual #41
282: ldc           #24
284: invokevirtual #25
287: invokevirtual #28
290: iload         11
292: ifne          299
295: iconst_1
296: goto          300
299: iconst_0
300: invokestatic  #29
303: aload         12
305: invokestatic  #168
308: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test253
Start line: 9782
End line: 0
Method source code: 
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        arArchiveOutputStream10.setLongFileMode((int) ' ');
        arArchiveOutputStream10.setLongFileMode((-1));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #762
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: bipush        32
99: invokevirtual #399
102: aload         9
104: iconst_m1
105: invokevirtual #399
108: new           #22
111: dup
112: invokespecial #23
115: ldc           #24
117: invokevirtual #25
120: lload         4
122: invokevirtual #26
125: ldc           #27
127: invokevirtual #25
130: lconst_0
131: invokevirtual #26
134: ldc           #24
136: invokevirtual #25
139: invokevirtual #28
142: lload         4
144: lconst_0
145: lcmp
146: ifne          153
149: iconst_1
150: goto          154
153: iconst_0
154: invokestatic  #29
157: aload         6
159: invokestatic  #53
162: new           #22
165: dup
166: invokespecial #23
169: ldc           #24
171: invokevirtual #25
174: lload         7
176: invokevirtual #26
179: ldc           #27
181: invokevirtual #25
184: lconst_0
185: invokevirtual #26
188: ldc           #24
190: invokevirtual #25
193: invokevirtual #28
196: lload         7
198: lconst_0
199: lcmp
200: ifne          207
203: iconst_1
204: goto          208
207: iconst_0
208: invokestatic  #29
211: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test254
Start line: 9803
End line: 0
Method source code: 
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        arArchiveOutputStream10.setLongFileMode((int) ' ');
        byte[] byteArray17 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes(8192L);
        try {
            arArchiveOutputStream10.write(byteArray17, (int) 'a', 504);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '504' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 32, 0, 0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #763
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: bipush        32
99: invokevirtual #399
102: ldc2_w        #341
105: invokestatic  #259
108: astore        10
110: aload         9
112: aload         10
114: bipush        97
116: sipush        504
119: invokevirtual #402
122: ldc_w         #764
125: invokestatic  #20
128: goto          133
131: astore        11
133: new           #22
136: dup
137: invokespecial #23
140: ldc           #24
142: invokevirtual #25
145: lload         4
147: invokevirtual #26
150: ldc           #27
152: invokevirtual #25
155: lconst_0
156: invokevirtual #26
159: ldc           #24
161: invokevirtual #25
164: invokevirtual #28
167: lload         4
169: lconst_0
170: lcmp
171: ifne          178
174: iconst_1
175: goto          179
178: iconst_0
179: invokestatic  #29
182: aload         6
184: invokestatic  #53
187: new           #22
190: dup
191: invokespecial #23
194: ldc           #24
196: invokevirtual #25
199: lload         7
201: invokevirtual #26
204: ldc           #27
206: invokevirtual #25
209: lconst_0
210: invokevirtual #26
213: ldc           #24
215: invokevirtual #25
218: invokevirtual #28
221: lload         7
223: lconst_0
224: lcmp
225: ifne          232
228: iconst_1
229: goto          233
232: iconst_0
233: invokestatic  #29
236: aload         10
238: invokestatic  #53
241: aload         10
243: invokestatic  #66
246: ldc_w         #765
249: invokestatic  #68
252: return
Exception table:
from    to  target type
110   128   131   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test255
Start line: 9833
End line: 0
Method source code: 
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        zipArchiveOutputStream9.setLevel((int) (short) 4);
        zipArchiveOutputStream9.setMethod((int) (byte) 88);
        zipArchiveOutputStream9.setUseLanguageEncodingFlag(true);
        java.io.OutputStream outputStream16 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream18 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream16, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream19 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream16);
        zipArchiveOutputStream19.setUseLanguageEncodingFlag(true);
        zipArchiveOutputStream19.count((long) (short) 2);
        java.io.OutputStream outputStream24 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream26 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream24, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream27 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream24);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy28 = null;
        zipArchiveOutputStream27.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy28);
        int int30 = zipArchiveOutputStream27.getCount();
        java.lang.String str31 = zipArchiveOutputStream27.getEncoding();
        zipArchiveOutputStream27.count(0);
        zipArchiveOutputStream27.setLevel((int) (byte) 1);
        java.io.OutputStream outputStream36 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream38 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream36, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream39 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream36);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy40 = null;
        zipArchiveOutputStream39.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy40);
        int int42 = zipArchiveOutputStream39.getCount();
        zipArchiveOutputStream39.setEncoding("cpio");
        zipArchiveOutputStream39.flush();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy46 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        java.lang.String str47 = unicodeExtraFieldPolicy46.toString();
        zipArchiveOutputStream39.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy46);
        zipArchiveOutputStream27.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy46);
        zipArchiveOutputStream19.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy46);
        zipArchiveOutputStream9.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy46);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "UTF8" + "'", str31, "UTF8");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "always" + "'", str47, "always");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #766
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: aload         7
79: iconst_4
80: invokevirtual #291
83: aload         7
85: bipush        88
87: invokevirtual #339
90: aload         7
92: iconst_1
93: invokevirtual #285
96: aconst_null
97: astore        8
99: new           #43
102: dup
103: aload         8
105: ldc           #44
107: invokespecial #45
110: astore        9
112: new           #182
115: dup
116: aload         8
118: invokespecial #183
121: astore        10
123: aload         10
125: iconst_1
126: invokevirtual #285
129: aload         10
131: ldc2_w        #461
134: invokevirtual #387
137: aconst_null
138: astore        11
140: new           #43
143: dup
144: aload         11
146: ldc           #44
148: invokespecial #45
151: astore        12
153: new           #182
156: dup
157: aload         11
159: invokespecial #183
162: astore        13
164: aconst_null
165: astore        14
167: aload         13
169: aload         14
171: invokevirtual #184
174: aload         13
176: invokevirtual #309
179: istore        15
181: aload         13
183: invokevirtual #310
186: astore        16
188: aload         13
190: iconst_0
191: invokevirtual #311
194: aload         13
196: iconst_1
197: invokevirtual #291
200: aconst_null
201: astore        17
203: new           #43
206: dup
207: aload         17
209: ldc           #44
211: invokespecial #45
214: astore        18
216: new           #182
219: dup
220: aload         17
222: invokespecial #183
225: astore        19
227: aconst_null
228: astore        20
230: aload         19
232: aload         20
234: invokevirtual #184
237: aload         19
239: invokevirtual #309
242: istore        21
244: aload         19
246: ldc_w         #273
249: invokevirtual #312
252: aload         19
254: invokevirtual #313
257: getstatic     #314
260: astore        22
262: aload         22
264: invokevirtual #315
267: astore        23
269: aload         19
271: aload         22
273: invokevirtual #184
276: aload         13
278: aload         22
280: invokevirtual #184
283: aload         10
285: aload         22
287: invokevirtual #184
290: aload         7
292: aload         22
294: invokevirtual #184
297: new           #22
300: dup
301: invokespecial #23
304: ldc           #24
306: invokevirtual #25
309: lload         4
311: invokevirtual #26
314: ldc           #27
316: invokevirtual #25
319: lconst_0
320: invokevirtual #26
323: ldc           #24
325: invokevirtual #25
328: invokevirtual #28
331: lload         4
333: lconst_0
334: lcmp
335: ifne          342
338: iconst_1
339: goto          343
342: iconst_0
343: invokestatic  #29
346: aload         6
348: invokestatic  #53
351: new           #22
354: dup
355: invokespecial #23
358: ldc           #24
360: invokevirtual #25
363: iload         15
365: invokevirtual #41
368: ldc           #27
370: invokevirtual #25
373: iconst_0
374: invokevirtual #41
377: ldc           #24
379: invokevirtual #25
382: invokevirtual #28
385: iload         15
387: ifne          394
390: iconst_1
391: goto          395
394: iconst_0
395: invokestatic  #29
398: new           #22
401: dup
402: invokespecial #23
405: ldc           #24
407: invokevirtual #25
410: aload         16
412: invokevirtual #25
415: ldc_w         #317
418: invokevirtual #25
421: invokevirtual #28
424: aload         16
426: ldc           #85
428: invokestatic  #154
431: new           #22
434: dup
435: invokespecial #23
438: ldc           #24
440: invokevirtual #25
443: iload         21
445: invokevirtual #41
448: ldc           #27
450: invokevirtual #25
453: iconst_0
454: invokevirtual #41
457: ldc           #24
459: invokevirtual #25
462: invokevirtual #28
465: iload         21
467: ifne          474
470: iconst_1
471: goto          475
474: iconst_0
475: invokestatic  #29
478: aload         22
480: invokestatic  #53
483: new           #22
486: dup
487: invokespecial #23
490: ldc           #24
492: invokevirtual #25
495: aload         23
497: invokevirtual #25
500: ldc_w         #318
503: invokevirtual #25
506: invokevirtual #28
509: aload         23
511: ldc           #79
513: invokestatic  #154
516: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test256
Start line: 9884
End line: 0
Method source code: 
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream19 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) archiveInputStream15, "encryption", true, true);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry20 = zipArchiveInputStream19.getNextEntry();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong22 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray23 = zipLong22.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong25 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray26 = zipLong25.getBytes();
        boolean boolean28 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray23, byteArray26, true);
        int int31 = zipArchiveInputStream19.read(byteArray23, (int) (byte) 76, (int) 'a');
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream34 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream19, (int) (byte) 55, "-       0 070701");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: -       0 070701");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertNull(archiveEntry20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #767
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: new           #15
125: dup
126: aload         13
128: ldc_w         #393
131: iconst_1
132: iconst_1
133: invokespecial #17
136: astore        14
138: aload         14
140: invokevirtual #756
143: astore        15
145: new           #73
148: dup
149: lconst_0
150: invokespecial #74
153: astore        16
155: aload         16
157: invokevirtual #75
160: astore        17
162: new           #73
165: dup
166: lconst_0
167: invokespecial #74
170: astore        18
172: aload         18
174: invokevirtual #75
177: astore        19
179: aload         17
181: aload         19
183: iconst_1
184: invokestatic  #177
187: istore        20
189: aload         14
191: aload         17
193: bipush        76
195: bipush        97
197: invokevirtual #757
200: istore        21
202: new           #31
205: dup
206: aload         14
208: bipush        55
210: ldc_w         #483
213: invokespecial #110
216: astore        22
218: ldc_w         #768
221: invokestatic  #20
224: goto          229
227: astore        22
229: new           #22
232: dup
233: invokespecial #23
236: ldc           #24
238: invokevirtual #25
241: lload         4
243: invokevirtual #26
246: ldc           #27
248: invokevirtual #25
251: lconst_0
252: invokevirtual #26
255: ldc           #24
257: invokevirtual #25
260: invokevirtual #28
263: lload         4
265: lconst_0
266: lcmp
267: ifne          274
270: iconst_1
271: goto          275
274: iconst_0
275: invokestatic  #29
278: new           #22
281: dup
282: invokespecial #23
285: ldc           #24
287: invokevirtual #25
290: lload         6
292: invokevirtual #26
295: ldc           #27
297: invokevirtual #25
300: lconst_0
301: invokevirtual #26
304: ldc           #24
306: invokevirtual #25
309: invokevirtual #28
312: lload         6
314: lconst_0
315: lcmp
316: ifne          323
319: iconst_1
320: goto          324
323: iconst_0
324: invokestatic  #29
327: aload         10
329: invokestatic  #168
332: aload         11
334: invokestatic  #168
337: aload         13
339: invokestatic  #53
342: aload         15
344: invokestatic  #168
347: aload         17
349: invokestatic  #53
352: aload         17
354: invokestatic  #66
357: ldc           #77
359: invokestatic  #68
362: aload         19
364: invokestatic  #53
367: aload         19
369: invokestatic  #66
372: ldc           #77
374: invokestatic  #68
377: new           #22
380: dup
381: invokespecial #23
384: ldc           #24
386: invokevirtual #25
389: iload         20
391: invokevirtual #69
394: ldc           #27
396: invokevirtual #25
399: iconst_1
400: invokevirtual #69
403: ldc           #24
405: invokevirtual #25
408: invokevirtual #28
411: iload         20
413: iconst_1
414: if_icmpne     421
417: iconst_1
418: goto          422
421: iconst_0
422: invokestatic  #29
425: new           #22
428: dup
429: invokespecial #23
432: ldc           #24
434: invokevirtual #25
437: iload         21
439: invokevirtual #41
442: ldc           #27
444: invokevirtual #25
447: iconst_m1
448: invokevirtual #41
451: ldc           #24
453: invokevirtual #25
456: invokevirtual #28
459: iload         21
461: iconst_m1
462: if_icmpne     469
465: iconst_1
466: goto          470
469: iconst_0
470: invokestatic  #29
473: return
Exception table:
from    to  target type
202   224   227   Class java/nio/charset/IllegalCharsetNameException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test257
Start line: 9929
End line: 0
Method source code: 
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        arArchiveOutputStream10.flush();
        arArchiveOutputStream10.setLongFileMode(32);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry18 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int19 = tarArchiveEntry18.getDevMinor();
        tarArchiveEntry18.setUserId(0);
        java.io.File file22 = tarArchiveEntry18.getFile();
        tarArchiveEntry18.setLinkName("org.apache.commons.compress.archivers.ArchiveException:  \000");
        boolean boolean25 = tarArchiveEntry18.isDirectory();
        tarArchiveEntry18.setUserName("");
        java.lang.String str28 = tarArchiveEntry18.getName();
        try {
            arArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry18);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(file22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "jar" + "'", str28, "jar");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #769
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: invokevirtual #528
100: aload         9
102: bipush        32
104: invokevirtual #399
107: new           #112
110: dup
111: ldc           #44
113: invokespecial #120
116: astore        10
118: aload         10
120: invokevirtual #129
123: istore        11
125: aload         10
127: iconst_0
128: invokevirtual #272
131: aload         10
133: invokevirtual #395
136: astore        12
138: aload         10
140: ldc           #186
142: invokevirtual #433
145: aload         10
147: invokevirtual #378
150: istore        13
152: aload         10
154: ldc           #61
156: invokevirtual #274
159: aload         10
161: invokevirtual #276
164: astore        14
166: aload         9
168: aload         10
170: invokevirtual #288
173: ldc_w         #289
176: invokestatic  #20
179: goto          184
182: astore        15
184: new           #22
187: dup
188: invokespecial #23
191: ldc           #24
193: invokevirtual #25
196: lload         4
198: invokevirtual #26
201: ldc           #27
203: invokevirtual #25
206: lconst_0
207: invokevirtual #26
210: ldc           #24
212: invokevirtual #25
215: invokevirtual #28
218: lload         4
220: lconst_0
221: lcmp
222: ifne          229
225: iconst_1
226: goto          230
229: iconst_0
230: invokestatic  #29
233: aload         6
235: invokestatic  #53
238: new           #22
241: dup
242: invokespecial #23
245: ldc           #24
247: invokevirtual #25
250: lload         7
252: invokevirtual #26
255: ldc           #27
257: invokevirtual #25
260: lconst_0
261: invokevirtual #26
264: ldc           #24
266: invokevirtual #25
269: invokevirtual #28
272: lload         7
274: lconst_0
275: lcmp
276: ifne          283
279: iconst_1
280: goto          284
283: iconst_0
284: invokestatic  #29
287: new           #22
290: dup
291: invokespecial #23
294: ldc           #24
296: invokevirtual #25
299: iload         11
301: invokevirtual #41
304: ldc           #27
306: invokevirtual #25
309: iconst_0
310: invokevirtual #41
313: ldc           #24
315: invokevirtual #25
318: invokevirtual #28
321: iload         11
323: ifne          330
326: iconst_1
327: goto          331
330: iconst_0
331: invokestatic  #29
334: aload         12
336: invokestatic  #168
339: new           #22
342: dup
343: invokespecial #23
346: ldc           #24
348: invokevirtual #25
351: iload         13
353: invokevirtual #69
356: ldc           #27
358: invokevirtual #25
361: iconst_0
362: invokevirtual #69
365: ldc           #24
367: invokevirtual #25
370: invokevirtual #28
373: iload         13
375: ifne          382
378: iconst_1
379: goto          383
382: iconst_0
383: invokestatic  #29
386: new           #22
389: dup
390: invokespecial #23
393: ldc           #24
395: invokevirtual #25
398: aload         14
400: invokevirtual #25
403: ldc_w         #350
406: invokevirtual #25
409: invokevirtual #28
412: aload         14
414: ldc           #44
416: invokestatic  #154
419: return
Exception table:
from    to  target type
166   179   182   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test258
Start line: 9969
End line: 0
Method source code: 
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream19 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) archiveInputStream18);
        cpioArchiveInputStream19.mark(512);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #770
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: new           #33
139: dup
140: aload         15
142: invokespecial #34
145: astore        16
147: aload         16
149: sipush        512
152: invokevirtual #771
155: new           #22
158: dup
159: invokespecial #23
162: ldc           #24
164: invokevirtual #25
167: lload         4
169: invokevirtual #26
172: ldc           #27
174: invokevirtual #25
177: lconst_0
178: invokevirtual #26
181: ldc           #24
183: invokevirtual #25
186: invokevirtual #28
189: lload         4
191: lconst_0
192: lcmp
193: ifne          200
196: iconst_1
197: goto          201
200: iconst_0
201: invokestatic  #29
204: aload         6
206: invokestatic  #53
209: new           #22
212: dup
213: invokespecial #23
216: ldc           #24
218: invokevirtual #25
221: lload         9
223: invokevirtual #26
226: ldc           #27
228: invokevirtual #25
231: lconst_0
232: invokevirtual #26
235: ldc           #24
237: invokevirtual #25
240: invokevirtual #28
243: lload         9
245: lconst_0
246: lcmp
247: ifne          254
250: iconst_1
251: goto          255
254: iconst_0
255: invokestatic  #29
258: new           #22
261: dup
262: invokespecial #23
265: ldc           #24
267: invokevirtual #25
270: lload         11
272: invokevirtual #26
275: ldc           #27
277: invokevirtual #25
280: lconst_0
281: invokevirtual #26
284: ldc           #24
286: invokevirtual #25
289: invokevirtual #28
292: lload         11
294: lconst_0
295: lcmp
296: ifne          303
299: iconst_1
300: goto          304
303: iconst_0
304: invokestatic  #29
307: aload         15
309: invokestatic  #53
312: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test259
Start line: 9997
End line: 0
Method source code: 
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        boolean boolean13 = tarArchiveEntry1.isFile();
        int int14 = tarArchiveEntry1.getDevMinor();
        boolean boolean15 = tarArchiveEntry1.isLink();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #772
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: invokevirtual #132
98: istore        11
100: aload_1
101: invokevirtual #129
104: istore        12
106: aload_1
107: invokevirtual #394
110: istore        13
112: new           #22
115: dup
116: invokespecial #23
119: ldc           #24
121: invokevirtual #25
124: lload         5
126: invokevirtual #26
129: ldc           #27
131: invokevirtual #25
134: lconst_0
135: invokevirtual #26
138: ldc           #24
140: invokevirtual #25
143: invokevirtual #28
146: lload         5
148: lconst_0
149: lcmp
150: ifne          157
153: iconst_1
154: goto          158
157: iconst_0
158: invokestatic  #29
161: aload         7
163: invokestatic  #53
166: new           #22
169: dup
170: invokespecial #23
173: ldc           #24
175: invokevirtual #25
178: iload         8
180: invokevirtual #69
183: ldc           #27
185: invokevirtual #25
188: iconst_0
189: invokevirtual #69
192: ldc           #24
194: invokevirtual #25
197: invokevirtual #28
200: iload         8
202: ifne          209
205: iconst_1
206: goto          210
209: iconst_0
210: invokestatic  #29
213: new           #22
216: dup
217: invokespecial #23
220: ldc           #24
222: invokevirtual #25
225: lload         9
227: invokevirtual #26
230: ldc           #27
232: invokevirtual #25
235: lconst_0
236: invokevirtual #26
239: ldc           #24
241: invokevirtual #25
244: invokevirtual #28
247: lload         9
249: lconst_0
250: lcmp
251: ifne          258
254: iconst_1
255: goto          259
258: iconst_0
259: invokestatic  #29
262: new           #22
265: dup
266: invokespecial #23
269: ldc           #24
271: invokevirtual #25
274: iload         11
276: invokevirtual #69
279: ldc           #27
281: invokevirtual #25
284: iconst_1
285: invokevirtual #69
288: ldc           #24
290: invokevirtual #25
293: invokevirtual #28
296: iload         11
298: iconst_1
299: if_icmpne     306
302: iconst_1
303: goto          307
306: iconst_0
307: invokestatic  #29
310: new           #22
313: dup
314: invokespecial #23
317: ldc           #24
319: invokevirtual #25
322: iload         12
324: invokevirtual #41
327: ldc           #27
329: invokevirtual #25
332: iconst_0
333: invokevirtual #41
336: ldc           #24
338: invokevirtual #25
341: invokevirtual #28
344: iload         12
346: ifne          353
349: iconst_1
350: goto          354
353: iconst_0
354: invokestatic  #29
357: new           #22
360: dup
361: invokespecial #23
364: ldc           #24
366: invokevirtual #25
369: iload         13
371: invokevirtual #69
374: ldc           #27
376: invokevirtual #25
379: iconst_0
380: invokevirtual #69
383: ldc           #24
385: invokevirtual #25
388: invokevirtual #28
391: iload         13
393: ifne          400
396: iconst_1
397: goto          401
400: iconst_0
401: invokestatic  #29
404: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test260
Start line: 10022
End line: 0
Method source code: 
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        boolean boolean19 = arArchiveInputStream15.markSupported();
        try {
            arArchiveInputStream15.reset();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: mark/reset not supported");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #773
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aload         14
138: invokevirtual #426
141: istore        16
143: aload         14
145: invokevirtual #774
148: ldc_w         #775
151: invokestatic  #20
154: goto          159
157: astore        17
159: new           #22
162: dup
163: invokespecial #23
166: ldc           #24
168: invokevirtual #25
171: lload         4
173: invokevirtual #26
176: ldc           #27
178: invokevirtual #25
181: lconst_0
182: invokevirtual #26
185: ldc           #24
187: invokevirtual #25
190: invokevirtual #28
193: lload         4
195: lconst_0
196: lcmp
197: ifne          204
200: iconst_1
201: goto          205
204: iconst_0
205: invokestatic  #29
208: aload         6
210: invokestatic  #53
213: new           #22
216: dup
217: invokespecial #23
220: ldc           #24
222: invokevirtual #25
225: lload         9
227: invokevirtual #26
230: ldc           #27
232: invokevirtual #25
235: lconst_0
236: invokevirtual #26
239: ldc           #24
241: invokevirtual #25
244: invokevirtual #28
247: lload         9
249: lconst_0
250: lcmp
251: ifne          258
254: iconst_1
255: goto          259
258: iconst_0
259: invokestatic  #29
262: new           #22
265: dup
266: invokespecial #23
269: ldc           #24
271: invokevirtual #25
274: lload         11
276: invokevirtual #26
279: ldc           #27
281: invokevirtual #25
284: lconst_0
285: invokevirtual #26
288: ldc           #24
290: invokevirtual #25
293: invokevirtual #28
296: lload         11
298: lconst_0
299: lcmp
300: ifne          307
303: iconst_1
304: goto          308
307: iconst_0
308: invokestatic  #29
311: aload         15
313: invokestatic  #53
316: new           #22
319: dup
320: invokespecial #23
323: ldc           #24
325: invokevirtual #25
328: iload         16
330: invokevirtual #69
333: ldc           #27
335: invokevirtual #25
338: iconst_0
339: invokevirtual #69
342: ldc           #24
344: invokevirtual #25
347: invokevirtual #28
350: iload         16
352: ifne          359
355: iconst_1
356: goto          360
359: iconst_0
360: invokestatic  #29
363: return
Exception table:
from    to  target type
143   154   157   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test261
Start line: 10057
End line: 0
Method source code: 
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        try {
            jarArchiveOutputStream10.finish();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: request to write '4' bytes exceeds size in header of '0' bytes for entry 'null'");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #776
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: new           #222
80: dup
81: aload         6
83: invokespecial #223
86: astore        8
88: aload         8
90: invokevirtual #504
93: ldc_w         #414
96: invokestatic  #20
99: goto          104
102: astore        9
104: new           #22
107: dup
108: invokespecial #23
111: ldc           #24
113: invokevirtual #25
116: lload         4
118: invokevirtual #26
121: ldc           #27
123: invokevirtual #25
126: lconst_0
127: invokevirtual #26
130: ldc           #24
132: invokevirtual #25
135: invokevirtual #28
138: lload         4
140: lconst_0
141: lcmp
142: ifne          149
145: iconst_1
146: goto          150
149: iconst_0
150: invokestatic  #29
153: aload         6
155: invokestatic  #53
158: return
Exception table:
from    to  target type
88    99   102   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test262
Start line: 10080
End line: 0
Method source code: 
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        int int12 = tarArchiveEntry1.getMode();
        java.lang.String str13 = org.apache.commons.compress.utils.ArchiveUtils.toString((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 33188 + "'", int12 == 33188);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-       0 org.apache.commons.compress.archivers.ArchiveException: ustar\000" + "'", str13, "-       0 org.apache.commons.compress.archivers.ArchiveException: ustar\000");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #777
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #419
92: istore        9
94: aload_1
95: invokestatic  #449
98: astore        10
100: new           #22
103: dup
104: invokespecial #23
107: ldc           #24
109: invokevirtual #25
112: lload         5
114: invokevirtual #26
117: ldc           #27
119: invokevirtual #25
122: lconst_0
123: invokevirtual #26
126: ldc           #24
128: invokevirtual #25
131: invokevirtual #28
134: lload         5
136: lconst_0
137: lcmp
138: ifne          145
141: iconst_1
142: goto          146
145: iconst_0
146: invokestatic  #29
149: aload         7
151: invokestatic  #53
154: new           #22
157: dup
158: invokespecial #23
161: ldc           #24
163: invokevirtual #25
166: iload         8
168: invokevirtual #69
171: ldc           #27
173: invokevirtual #25
176: iconst_0
177: invokevirtual #69
180: ldc           #24
182: invokevirtual #25
185: invokevirtual #28
188: iload         8
190: ifne          197
193: iconst_1
194: goto          198
197: iconst_0
198: invokestatic  #29
201: new           #22
204: dup
205: invokespecial #23
208: ldc           #24
210: invokevirtual #25
213: iload         9
215: invokevirtual #41
218: ldc           #27
220: invokevirtual #25
223: ldc_w         #420
226: invokevirtual #41
229: ldc           #24
231: invokevirtual #25
234: invokevirtual #28
237: iload         9
239: ldc_w         #420
242: if_icmpne     249
245: iconst_1
246: goto          250
249: iconst_0
250: invokestatic  #29
253: new           #22
256: dup
257: invokespecial #23
260: ldc           #24
262: invokevirtual #25
265: aload         10
267: invokevirtual #25
270: ldc_w         #778
273: invokevirtual #25
276: invokevirtual #28
279: aload         10
281: ldc_w         #779
284: invokestatic  #154
287: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test263
Start line: 10101
End line: 0
Method source code: 
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        jarArchiveOutputStream11.setUseLanguageEncodingFlag(false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #780
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: aload         9
105: iconst_0
106: invokevirtual #781
109: new           #22
112: dup
113: invokespecial #23
116: ldc           #24
118: invokevirtual #25
121: lload         4
123: invokevirtual #26
126: ldc           #27
128: invokevirtual #25
131: lconst_0
132: invokevirtual #26
135: ldc           #24
137: invokevirtual #25
140: invokevirtual #28
143: lload         4
145: lconst_0
146: lcmp
147: ifne          154
150: iconst_1
151: goto          155
154: iconst_0
155: invokestatic  #29
158: aload         6
160: invokestatic  #53
163: new           #22
166: dup
167: invokespecial #23
170: ldc           #24
172: invokevirtual #25
175: iload         7
177: invokevirtual #41
180: ldc           #27
182: invokevirtual #25
185: iconst_0
186: invokevirtual #41
189: ldc           #24
191: invokevirtual #25
194: invokevirtual #28
197: iload         7
199: ifne          206
202: iconst_1
203: goto          207
206: iconst_0
207: invokestatic  #29
210: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test264
Start line: 10121
End line: 0
Method source code: 
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        tarArchiveEntry1.setDevMajor((int) (short) 10);
        long long15 = tarArchiveEntry1.getRealSize();
        java.io.File file16 = tarArchiveEntry1.getFile();
        java.lang.String str17 = tarArchiveEntry1.getName();
        long long18 = tarArchiveEntry1.getSize();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNull(file16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "org.apache.commons.compress.archivers.ArchiveException: ustar\000" + "'", str17, "org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #782
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: bipush        10
97: invokevirtual #287
100: aload_1
101: invokevirtual #327
104: lstore        11
106: aload_1
107: invokevirtual #395
110: astore        13
112: aload_1
113: invokevirtual #276
116: astore        14
118: aload_1
119: invokevirtual #156
122: lstore        15
124: new           #22
127: dup
128: invokespecial #23
131: ldc           #24
133: invokevirtual #25
136: lload         5
138: invokevirtual #26
141: ldc           #27
143: invokevirtual #25
146: lconst_0
147: invokevirtual #26
150: ldc           #24
152: invokevirtual #25
155: invokevirtual #28
158: lload         5
160: lconst_0
161: lcmp
162: ifne          169
165: iconst_1
166: goto          170
169: iconst_0
170: invokestatic  #29
173: aload         7
175: invokestatic  #53
178: new           #22
181: dup
182: invokespecial #23
185: ldc           #24
187: invokevirtual #25
190: iload         8
192: invokevirtual #69
195: ldc           #27
197: invokevirtual #25
200: iconst_0
201: invokevirtual #69
204: ldc           #24
206: invokevirtual #25
209: invokevirtual #28
212: iload         8
214: ifne          221
217: iconst_1
218: goto          222
221: iconst_0
222: invokestatic  #29
225: new           #22
228: dup
229: invokespecial #23
232: ldc           #24
234: invokevirtual #25
237: lload         9
239: invokevirtual #26
242: ldc           #27
244: invokevirtual #25
247: lconst_0
248: invokevirtual #26
251: ldc           #24
253: invokevirtual #25
256: invokevirtual #28
259: lload         9
261: lconst_0
262: lcmp
263: ifne          270
266: iconst_1
267: goto          271
270: iconst_0
271: invokestatic  #29
274: new           #22
277: dup
278: invokespecial #23
281: ldc           #24
283: invokevirtual #25
286: lload         11
288: invokevirtual #26
291: ldc           #27
293: invokevirtual #25
296: lconst_0
297: invokevirtual #26
300: ldc           #24
302: invokevirtual #25
305: invokevirtual #28
308: lload         11
310: lconst_0
311: lcmp
312: ifne          319
315: iconst_1
316: goto          320
319: iconst_0
320: invokestatic  #29
323: aload         13
325: invokestatic  #168
328: new           #22
331: dup
332: invokespecial #23
335: ldc           #24
337: invokevirtual #25
340: aload         14
342: invokevirtual #25
345: ldc_w         #496
348: invokevirtual #25
351: invokevirtual #28
354: aload         14
356: ldc           #225
358: invokestatic  #154
361: new           #22
364: dup
365: invokespecial #23
368: ldc           #24
370: invokevirtual #25
373: lload         15
375: invokevirtual #26
378: ldc           #27
380: invokevirtual #25
383: lconst_0
384: invokevirtual #26
387: ldc           #24
389: invokevirtual #25
392: invokevirtual #28
395: lload         15
397: lconst_0
398: lcmp
399: ifne          406
402: iconst_1
403: goto          407
406: iconst_0
407: invokestatic  #29
410: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test265
Start line: 10149
End line: 0
Method source code: 
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream20, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream23 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream20);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy24 = null;
        zipArchiveOutputStream23.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy24);
        boolean boolean26 = zipArchiveOutputStream23.isSeekable();
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream27 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream23);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream28 = archiveStreamFactory0.createArchiveOutputStream("TRAILER!!!", (java.io.OutputStream) zipArchiveOutputStream23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: TRAILER!!! not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #783
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aconst_null
137: astore        16
139: new           #43
142: dup
143: aload         16
145: ldc           #44
147: invokespecial #45
150: astore        17
152: new           #182
155: dup
156: aload         16
158: invokespecial #183
161: astore        18
163: aconst_null
164: astore        19
166: aload         18
168: aload         19
170: invokevirtual #184
173: aload         18
175: invokevirtual #185
178: istore        20
180: new           #182
183: dup
184: aload         18
186: invokespecial #183
189: astore        21
191: aload_1
192: ldc_w         #784
195: aload         18
197: invokevirtual #49
200: astore        22
202: ldc_w         #785
205: invokestatic  #20
208: goto          213
211: astore        22
213: new           #22
216: dup
217: invokespecial #23
220: ldc           #24
222: invokevirtual #25
225: lload         4
227: invokevirtual #26
230: ldc           #27
232: invokevirtual #25
235: lconst_0
236: invokevirtual #26
239: ldc           #24
241: invokevirtual #25
244: invokevirtual #28
247: lload         4
249: lconst_0
250: lcmp
251: ifne          258
254: iconst_1
255: goto          259
258: iconst_0
259: invokestatic  #29
262: aload         6
264: invokestatic  #53
267: new           #22
270: dup
271: invokespecial #23
274: ldc           #24
276: invokevirtual #25
279: lload         9
281: invokevirtual #26
284: ldc           #27
286: invokevirtual #25
289: lconst_0
290: invokevirtual #26
293: ldc           #24
295: invokevirtual #25
298: invokevirtual #28
301: lload         9
303: lconst_0
304: lcmp
305: ifne          312
308: iconst_1
309: goto          313
312: iconst_0
313: invokestatic  #29
316: new           #22
319: dup
320: invokespecial #23
323: ldc           #24
325: invokevirtual #25
328: lload         11
330: invokevirtual #26
333: ldc           #27
335: invokevirtual #25
338: lconst_0
339: invokevirtual #26
342: ldc           #24
344: invokevirtual #25
347: invokevirtual #28
350: lload         11
352: lconst_0
353: lcmp
354: ifne          361
357: iconst_1
358: goto          362
361: iconst_0
362: invokestatic  #29
365: aload         15
367: invokestatic  #53
370: new           #22
373: dup
374: invokespecial #23
377: ldc           #24
379: invokevirtual #25
382: iload         20
384: invokevirtual #69
387: ldc           #27
389: invokevirtual #25
392: iconst_0
393: invokevirtual #69
396: ldc           #24
398: invokevirtual #25
401: invokevirtual #28
404: iload         20
406: ifne          413
409: iconst_1
410: goto          414
413: iconst_0
414: invokestatic  #29
417: return
Exception table:
from    to  target type
191   208   211   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test266
Start line: 10190
End line: 0
Method source code: 
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        java.io.OutputStream outputStream13 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream13, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream16 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream13);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy17 = null;
        zipArchiveOutputStream16.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy17);
        boolean boolean19 = zipArchiveOutputStream16.isSeekable();
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode20 = null;
        zipArchiveOutputStream16.setUseZip64(zip64Mode20);
        zipArchiveOutputStream16.flush();
        zipArchiveOutputStream16.setMethod(0);
        zipArchiveOutputStream16.setMethod((int) (short) 100);
        zipArchiveOutputStream16.setFallbackToUTF8(false);
        java.io.OutputStream outputStream29 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream31 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream29, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream32 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream29);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy33 = null;
        zipArchiveOutputStream32.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy33);
        boolean boolean35 = zipArchiveOutputStream32.isSeekable();
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode36 = null;
        zipArchiveOutputStream32.setUseZip64(zip64Mode36);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream38 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream32);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy39 = org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy.ALWAYS;
        java.lang.String str40 = unicodeExtraFieldPolicy39.toString();
        jarArchiveOutputStream38.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy39);
        zipArchiveOutputStream16.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy39);
        jarArchiveOutputStream11.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy39);
        java.lang.String str44 = unicodeExtraFieldPolicy39.toString();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(unicodeExtraFieldPolicy39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "always" + "'", str40, "always");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "always" + "'", str44, "always");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #786
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: aconst_null
104: astore        11
106: new           #43
109: dup
110: aload         11
112: ldc           #44
114: invokespecial #45
117: astore        12
119: new           #182
122: dup
123: aload         11
125: invokespecial #183
128: astore        13
130: aconst_null
131: astore        14
133: aload         13
135: aload         14
137: invokevirtual #184
140: aload         13
142: invokevirtual #185
145: istore        15
147: aconst_null
148: astore        16
150: aload         13
152: aload         16
154: invokevirtual #224
157: aload         13
159: invokevirtual #313
162: aload         13
164: iconst_0
165: invokevirtual #339
168: aload         13
170: bipush        100
172: invokevirtual #339
175: aload         13
177: iconst_0
178: invokevirtual #316
181: aconst_null
182: astore        17
184: new           #43
187: dup
188: aload         17
190: ldc           #44
192: invokespecial #45
195: astore        18
197: new           #182
200: dup
201: aload         17
203: invokespecial #183
206: astore        19
208: aconst_null
209: astore        20
211: aload         19
213: aload         20
215: invokevirtual #184
218: aload         19
220: invokevirtual #185
223: istore        21
225: aconst_null
226: astore        22
228: aload         19
230: aload         22
232: invokevirtual #224
235: new           #222
238: dup
239: aload         19
241: invokespecial #223
244: astore        23
246: getstatic     #314
249: astore        24
251: aload         24
253: invokevirtual #315
256: astore        25
258: aload         23
260: aload         24
262: invokevirtual #787
265: aload         13
267: aload         24
269: invokevirtual #184
272: aload         9
274: aload         24
276: invokevirtual #787
279: aload         24
281: invokevirtual #315
284: astore        26
286: new           #22
289: dup
290: invokespecial #23
293: ldc           #24
295: invokevirtual #25
298: lload         4
300: invokevirtual #26
303: ldc           #27
305: invokevirtual #25
308: lconst_0
309: invokevirtual #26
312: ldc           #24
314: invokevirtual #25
317: invokevirtual #28
320: lload         4
322: lconst_0
323: lcmp
324: ifne          331
327: iconst_1
328: goto          332
331: iconst_0
332: invokestatic  #29
335: aload         6
337: invokestatic  #53
340: new           #22
343: dup
344: invokespecial #23
347: ldc           #24
349: invokevirtual #25
352: iload         7
354: invokevirtual #41
357: ldc           #27
359: invokevirtual #25
362: iconst_0
363: invokevirtual #41
366: ldc           #24
368: invokevirtual #25
371: invokevirtual #28
374: iload         7
376: ifne          383
379: iconst_1
380: goto          384
383: iconst_0
384: invokestatic  #29
387: new           #22
390: dup
391: invokespecial #23
394: ldc           #24
396: invokevirtual #25
399: iload         15
401: invokevirtual #69
404: ldc           #27
406: invokevirtual #25
409: iconst_0
410: invokevirtual #69
413: ldc           #24
415: invokevirtual #25
418: invokevirtual #28
421: iload         15
423: ifne          430
426: iconst_1
427: goto          431
430: iconst_0
431: invokestatic  #29
434: new           #22
437: dup
438: invokespecial #23
441: ldc           #24
443: invokevirtual #25
446: iload         21
448: invokevirtual #69
451: ldc           #27
453: invokevirtual #25
456: iconst_0
457: invokevirtual #69
460: ldc           #24
462: invokevirtual #25
465: invokevirtual #28
468: iload         21
470: ifne          477
473: iconst_1
474: goto          478
477: iconst_0
478: invokestatic  #29
481: aload         24
483: invokestatic  #53
486: new           #22
489: dup
490: invokespecial #23
493: ldc           #24
495: invokevirtual #25
498: aload         25
500: invokevirtual #25
503: ldc_w         #318
506: invokevirtual #25
509: invokevirtual #28
512: aload         25
514: ldc           #79
516: invokestatic  #154
519: new           #22
522: dup
523: invokespecial #23
526: ldc           #24
528: invokevirtual #25
531: aload         26
533: invokevirtual #25
536: ldc_w         #318
539: invokevirtual #25
542: invokevirtual #28
545: aload         26
547: ldc           #79
549: invokestatic  #154
552: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test267
Start line: 10241
End line: 0
Method source code: 
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        java.lang.String str13 = tarArchiveEntry1.getName();
        boolean boolean14 = tarArchiveEntry1.isExtended();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.compress.archivers.ArchiveException: ustar\000" + "'", str13, "org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #788
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: invokevirtual #276
98: astore        11
100: aload_1
101: invokevirtual #134
104: istore        12
106: new           #22
109: dup
110: invokespecial #23
113: ldc           #24
115: invokevirtual #25
118: lload         5
120: invokevirtual #26
123: ldc           #27
125: invokevirtual #25
128: lconst_0
129: invokevirtual #26
132: ldc           #24
134: invokevirtual #25
137: invokevirtual #28
140: lload         5
142: lconst_0
143: lcmp
144: ifne          151
147: iconst_1
148: goto          152
151: iconst_0
152: invokestatic  #29
155: aload         7
157: invokestatic  #53
160: new           #22
163: dup
164: invokespecial #23
167: ldc           #24
169: invokevirtual #25
172: iload         8
174: invokevirtual #69
177: ldc           #27
179: invokevirtual #25
182: iconst_0
183: invokevirtual #69
186: ldc           #24
188: invokevirtual #25
191: invokevirtual #28
194: iload         8
196: ifne          203
199: iconst_1
200: goto          204
203: iconst_0
204: invokestatic  #29
207: new           #22
210: dup
211: invokespecial #23
214: ldc           #24
216: invokevirtual #25
219: lload         9
221: invokevirtual #26
224: ldc           #27
226: invokevirtual #25
229: lconst_0
230: invokevirtual #26
233: ldc           #24
235: invokevirtual #25
238: invokevirtual #28
241: lload         9
243: lconst_0
244: lcmp
245: ifne          252
248: iconst_1
249: goto          253
252: iconst_0
253: invokestatic  #29
256: new           #22
259: dup
260: invokespecial #23
263: ldc           #24
265: invokevirtual #25
268: aload         11
270: invokevirtual #25
273: ldc_w         #496
276: invokevirtual #25
279: invokevirtual #28
282: aload         11
284: ldc           #225
286: invokestatic  #154
289: new           #22
292: dup
293: invokespecial #23
296: ldc           #24
298: invokevirtual #25
301: iload         12
303: invokevirtual #69
306: ldc           #27
308: invokevirtual #25
311: iconst_0
312: invokevirtual #69
315: ldc           #24
317: invokevirtual #25
320: invokevirtual #28
323: iload         12
325: ifne          332
328: iconst_1
329: goto          333
332: iconst_0
333: invokestatic  #29
336: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test268
Start line: 10264
End line: 0
Method source code: 
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream17 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16);
        try {
            org.apache.commons.compress.archivers.cpio.CpioArchiveEntry cpioArchiveEntry18 = cpioArchiveInputStream16.getNextCPIOEntry();
            org.junit.Assert.fail("Expected exception of type java.io.EOFException; message: null");
        } catch (java.io.EOFException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #789
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: new           #33
125: dup
126: aload         12
128: invokespecial #34
131: astore        14
133: new           #13
136: dup
137: aload         14
139: invokespecial #14
142: astore        15
144: aload         14
146: invokevirtual #711
149: astore        16
151: ldc_w         #333
154: invokestatic  #20
157: goto          162
160: astore        16
162: new           #22
165: dup
166: invokespecial #23
169: ldc           #24
171: invokevirtual #25
174: lload         4
176: invokevirtual #26
179: ldc           #27
181: invokevirtual #25
184: lconst_0
185: invokevirtual #26
188: ldc           #24
190: invokevirtual #25
193: invokevirtual #28
196: lload         4
198: lconst_0
199: lcmp
200: ifne          207
203: iconst_1
204: goto          208
207: iconst_0
208: invokestatic  #29
211: new           #22
214: dup
215: invokespecial #23
218: ldc           #24
220: invokevirtual #25
223: lload         6
225: invokevirtual #26
228: ldc           #27
230: invokevirtual #25
233: lconst_0
234: invokevirtual #26
237: ldc           #24
239: invokevirtual #25
242: invokevirtual #28
245: lload         6
247: lconst_0
248: lcmp
249: ifne          256
252: iconst_1
253: goto          257
256: iconst_0
257: invokestatic  #29
260: aload         10
262: invokestatic  #168
265: aload         11
267: invokestatic  #168
270: aload         13
272: invokestatic  #53
275: return
Exception table:
from    to  target type
144   157   160   Class java/io/EOFException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test269
Start line: 10296
End line: 0
Method source code: 
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        arArchiveOutputStream10.flush();
        arArchiveOutputStream10.setLongFileMode((int) (byte) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream18 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) arArchiveOutputStream10, 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #790
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: invokevirtual #528
100: aload         9
102: iconst_m1
103: invokevirtual #399
106: new           #43
109: dup
110: aload         9
112: iconst_1
113: invokespecial #340
116: astore        10
118: new           #22
121: dup
122: invokespecial #23
125: ldc           #24
127: invokevirtual #25
130: lload         4
132: invokevirtual #26
135: ldc           #27
137: invokevirtual #25
140: lconst_0
141: invokevirtual #26
144: ldc           #24
146: invokevirtual #25
149: invokevirtual #28
152: lload         4
154: lconst_0
155: lcmp
156: ifne          163
159: iconst_1
160: goto          164
163: iconst_0
164: invokestatic  #29
167: aload         6
169: invokestatic  #53
172: new           #22
175: dup
176: invokespecial #23
179: ldc           #24
181: invokevirtual #25
184: lload         7
186: invokevirtual #26
189: ldc           #27
191: invokevirtual #25
194: lconst_0
195: invokevirtual #26
198: ldc           #24
200: invokevirtual #25
203: invokevirtual #28
206: lload         7
208: lconst_0
209: lcmp
210: ifne          217
213: iconst_1
214: goto          218
217: iconst_0
218: invokestatic  #29
221: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test270
Start line: 10318
End line: 0
Method source code: 
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        arArchiveOutputStream10.setLongFileMode((int) ' ');
        java.io.File file16 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry18 = arArchiveOutputStream10.createArchiveEntry(file16, "org.apache.commons.compress.archivers.dump.DumpArchiveException");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #791
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: bipush        32
99: invokevirtual #399
102: aconst_null
103: astore        10
105: aload         9
107: aload         10
109: ldc_w         #683
112: invokevirtual #400
115: astore        11
117: ldc_w         #289
120: invokestatic  #20
123: goto          128
126: astore        11
128: new           #22
131: dup
132: invokespecial #23
135: ldc           #24
137: invokevirtual #25
140: lload         4
142: invokevirtual #26
145: ldc           #27
147: invokevirtual #25
150: lconst_0
151: invokevirtual #26
154: ldc           #24
156: invokevirtual #25
159: invokevirtual #28
162: lload         4
164: lconst_0
165: lcmp
166: ifne          173
169: iconst_1
170: goto          174
173: iconst_0
174: invokestatic  #29
177: aload         6
179: invokestatic  #53
182: new           #22
185: dup
186: invokespecial #23
189: ldc           #24
191: invokevirtual #25
194: lload         7
196: invokevirtual #26
199: ldc           #27
201: invokevirtual #25
204: lconst_0
205: invokevirtual #26
208: ldc           #24
210: invokevirtual #25
213: invokevirtual #28
216: lload         7
218: lconst_0
219: lcmp
220: ifne          227
223: iconst_1
224: goto          228
227: iconst_0
228: invokestatic  #29
231: return
Exception table:
from    to  target type
105   123   126   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test271
Start line: 10346
End line: 0
Method source code: 
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream20 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16, 0, 128, "x5S");
        java.io.OutputStream outputStream21 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream23 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream21, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream21);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy25 = null;
        zipArchiveOutputStream24.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy25);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream27 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream24);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream28 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream27);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry30 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("encryption");
        boolean boolean31 = tarArchiveEntry30.isLink();
        java.io.File file32 = tarArchiveEntry30.getFile();
        tarArchiveOutputStream27.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry30);
        java.io.InputStream inputStream34 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream35 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream34);
        long long36 = jarArchiveInputStream35.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream37 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream35);
        java.io.InputStream inputStream39 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream40 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream39);
        long long41 = jarArchiveInputStream40.getBytesRead();
        long long42 = jarArchiveInputStream40.getBytesRead();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong44 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray45 = zipLong44.getBytes();
        int int48 = jarArchiveInputStream40.read(byteArray45, 0, 96);
        boolean boolean49 = org.apache.commons.compress.utils.ArchiveUtils.matchAsciiBuffer("00", byteArray45);
        int int52 = arArchiveInputStream37.read(byteArray45, 6, 8);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong53 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray45);
        byte[] byteArray54 = zipLong53.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong55 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray54);
        tarArchiveOutputStream27.write(byteArray54, (int) (byte) 103, 0);
        java.lang.String str61 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray54, 49152, 0);
        try {
            int int64 = cpioArchiveInputStream16.read(byteArray54, (int) (byte) 52, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(file32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[0, 0, 0, 0]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #792
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: new           #33
125: dup
126: aload         12
128: invokespecial #34
131: astore        14
133: new           #31
136: dup
137: aload         14
139: iconst_0
140: sipush        128
143: ldc           #153
145: invokespecial #665
148: astore        15
150: aconst_null
151: astore        16
153: new           #43
156: dup
157: aload         16
159: ldc           #44
161: invokespecial #45
164: astore        17
166: new           #182
169: dup
170: aload         16
172: invokespecial #183
175: astore        18
177: aconst_null
178: astore        19
180: aload         18
182: aload         19
184: invokevirtual #184
187: new           #43
190: dup
191: aload         18
193: invokespecial #95
196: astore        20
198: new           #182
201: dup
202: aload         20
204: invokespecial #183
207: astore        21
209: new           #112
212: dup
213: ldc_w         #393
216: invokespecial #120
219: astore        22
221: aload         22
223: invokevirtual #394
226: istore        23
228: aload         22
230: invokevirtual #395
233: astore        24
235: aload         20
237: aload         22
239: invokevirtual #136
242: aconst_null
243: astore        25
245: new           #10
248: dup
249: aload         25
251: invokespecial #11
254: astore        26
256: aload         26
258: invokevirtual #12
261: lstore        27
263: new           #13
266: dup
267: aload         26
269: invokespecial #14
272: astore        29
274: aconst_null
275: astore        30
277: new           #10
280: dup
281: aload         30
283: invokespecial #11
286: astore        31
288: aload         31
290: invokevirtual #12
293: lstore        32
295: aload         31
297: invokevirtual #12
300: lstore        34
302: new           #73
305: dup
306: lconst_0
307: invokespecial #74
310: astore        36
312: aload         36
314: invokevirtual #75
317: astore        37
319: aload         31
321: aload         37
323: iconst_0
324: bipush        96
326: invokevirtual #76
329: istore        38
331: ldc           #16
333: aload         37
335: invokestatic  #525
338: istore        39
340: aload         29
342: aload         37
344: bipush        6
346: bipush        8
348: invokevirtual #232
351: istore        40
353: new           #73
356: dup
357: aload         37
359: invokespecial #406
362: astore        41
364: aload         41
366: invokevirtual #75
369: astore        42
371: new           #73
374: dup
375: aload         42
377: invokespecial #406
380: astore        43
382: aload         20
384: aload         42
386: bipush        103
388: iconst_0
389: invokevirtual #63
392: aload         42
394: ldc_w         #595
397: iconst_0
398: invokestatic  #793
401: astore        44
403: aload         14
405: aload         42
407: bipush        52
409: iconst_0
410: invokevirtual #794
413: istore        45
415: ldc           #236
417: invokestatic  #20
420: goto          425
423: astore        45
425: new           #22
428: dup
429: invokespecial #23
432: ldc           #24
434: invokevirtual #25
437: lload         4
439: invokevirtual #26
442: ldc           #27
444: invokevirtual #25
447: lconst_0
448: invokevirtual #26
451: ldc           #24
453: invokevirtual #25
456: invokevirtual #28
459: lload         4
461: lconst_0
462: lcmp
463: ifne          470
466: iconst_1
467: goto          471
470: iconst_0
471: invokestatic  #29
474: new           #22
477: dup
478: invokespecial #23
481: ldc           #24
483: invokevirtual #25
486: lload         6
488: invokevirtual #26
491: ldc           #27
493: invokevirtual #25
496: lconst_0
497: invokevirtual #26
500: ldc           #24
502: invokevirtual #25
505: invokevirtual #28
508: lload         6
510: lconst_0
511: lcmp
512: ifne          519
515: iconst_1
516: goto          520
519: iconst_0
520: invokestatic  #29
523: aload         10
525: invokestatic  #168
528: aload         11
530: invokestatic  #168
533: aload         13
535: invokestatic  #53
538: new           #22
541: dup
542: invokespecial #23
545: ldc           #24
547: invokevirtual #25
550: iload         23
552: invokevirtual #69
555: ldc           #27
557: invokevirtual #25
560: iconst_0
561: invokevirtual #69
564: ldc           #24
566: invokevirtual #25
569: invokevirtual #28
572: iload         23
574: ifne          581
577: iconst_1
578: goto          582
581: iconst_0
582: invokestatic  #29
585: aload         24
587: invokestatic  #168
590: new           #22
593: dup
594: invokespecial #23
597: ldc           #24
599: invokevirtual #25
602: lload         27
604: invokevirtual #26
607: ldc           #27
609: invokevirtual #25
612: lconst_0
613: invokevirtual #26
616: ldc           #24
618: invokevirtual #25
621: invokevirtual #28
624: lload         27
626: lconst_0
627: lcmp
628: ifne          635
631: iconst_1
632: goto          636
635: iconst_0
636: invokestatic  #29
639: new           #22
642: dup
643: invokespecial #23
646: ldc           #24
648: invokevirtual #25
651: lload         32
653: invokevirtual #26
656: ldc           #27
658: invokevirtual #25
661: lconst_0
662: invokevirtual #26
665: ldc           #24
667: invokevirtual #25
670: invokevirtual #28
673: lload         32
675: lconst_0
676: lcmp
677: ifne          684
680: iconst_1
681: goto          685
684: iconst_0
685: invokestatic  #29
688: new           #22
691: dup
692: invokespecial #23
695: ldc           #24
697: invokevirtual #25
700: lload         34
702: invokevirtual #26
705: ldc           #27
707: invokevirtual #25
710: lconst_0
711: invokevirtual #26
714: ldc           #24
716: invokevirtual #25
719: invokevirtual #28
722: lload         34
724: lconst_0
725: lcmp
726: ifne          733
729: iconst_1
730: goto          734
733: iconst_0
734: invokestatic  #29
737: aload         37
739: invokestatic  #53
742: aload         37
744: invokestatic  #66
747: ldc           #77
749: invokestatic  #68
752: new           #22
755: dup
756: invokespecial #23
759: ldc           #24
761: invokevirtual #25
764: iload         38
766: invokevirtual #41
769: ldc           #27
771: invokevirtual #25
774: iconst_m1
775: invokevirtual #41
778: ldc           #24
780: invokevirtual #25
783: invokevirtual #28
786: iload         38
788: iconst_m1
789: if_icmpne     796
792: iconst_1
793: goto          797
796: iconst_0
797: invokestatic  #29
800: new           #22
803: dup
804: invokespecial #23
807: ldc           #24
809: invokevirtual #25
812: iload         39
814: invokevirtual #69
817: ldc           #27
819: invokevirtual #25
822: iconst_0
823: invokevirtual #69
826: ldc           #24
828: invokevirtual #25
831: invokevirtual #28
834: iload         39
836: ifne          843
839: iconst_1
840: goto          844
843: iconst_0
844: invokestatic  #29
847: new           #22
850: dup
851: invokespecial #23
854: ldc           #24
856: invokevirtual #25
859: iload         40
861: invokevirtual #41
864: ldc           #27
866: invokevirtual #25
869: iconst_m1
870: invokevirtual #41
873: ldc           #24
875: invokevirtual #25
878: invokevirtual #28
881: iload         40
883: iconst_m1
884: if_icmpne     891
887: iconst_1
888: goto          892
891: iconst_0
892: invokestatic  #29
895: aload         42
897: invokestatic  #53
900: aload         42
902: invokestatic  #66
905: ldc           #77
907: invokestatic  #68
910: new           #22
913: dup
914: invokespecial #23
917: ldc           #24
919: invokevirtual #25
922: aload         44
924: invokevirtual #25
927: ldc           #219
929: invokevirtual #25
932: invokevirtual #28
935: aload         44
937: ldc           #61
939: invokestatic  #154
942: return
Exception table:
from    to  target type
403   420   423   Class java/lang/IndexOutOfBoundsException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test272
Start line: 10420
End line: 0
Method source code: 
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream11 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        try {
            arArchiveOutputStream11.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #795
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #240
85: dup
86: aload_3
87: invokespecial #241
90: astore        9
92: aload         9
94: invokevirtual #539
97: ldc           #83
99: invokestatic  #20
102: goto          107
105: astore        10
107: new           #22
110: dup
111: invokespecial #23
114: ldc           #24
116: invokevirtual #25
119: lload         4
121: invokevirtual #26
124: ldc           #27
126: invokevirtual #25
129: lconst_0
130: invokevirtual #26
133: ldc           #24
135: invokevirtual #25
138: invokevirtual #28
141: lload         4
143: lconst_0
144: lcmp
145: ifne          152
148: iconst_1
149: goto          153
152: iconst_0
153: invokestatic  #29
156: aload         6
158: invokestatic  #53
161: new           #22
164: dup
165: invokespecial #23
168: ldc           #24
170: invokevirtual #25
173: iload         7
175: invokevirtual #41
178: ldc           #27
180: invokevirtual #25
183: iconst_0
184: invokevirtual #41
187: ldc           #24
189: invokevirtual #25
192: invokevirtual #28
195: iload         7
197: ifne          204
200: iconst_1
201: goto          205
204: iconst_0
205: invokestatic  #29
208: return
Exception table:
from    to  target type
92   102   105   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test273
Start line: 10445
End line: 0
Method source code: 
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        boolean boolean19 = arArchiveInputStream15.markSupported();
        long long20 = arArchiveInputStream15.getBytesRead();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #796
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aload         14
138: invokevirtual #426
141: istore        16
143: aload         14
145: invokevirtual #797
148: lstore        17
150: new           #22
153: dup
154: invokespecial #23
157: ldc           #24
159: invokevirtual #25
162: lload         4
164: invokevirtual #26
167: ldc           #27
169: invokevirtual #25
172: lconst_0
173: invokevirtual #26
176: ldc           #24
178: invokevirtual #25
181: invokevirtual #28
184: lload         4
186: lconst_0
187: lcmp
188: ifne          195
191: iconst_1
192: goto          196
195: iconst_0
196: invokestatic  #29
199: aload         6
201: invokestatic  #53
204: new           #22
207: dup
208: invokespecial #23
211: ldc           #24
213: invokevirtual #25
216: lload         9
218: invokevirtual #26
221: ldc           #27
223: invokevirtual #25
226: lconst_0
227: invokevirtual #26
230: ldc           #24
232: invokevirtual #25
235: invokevirtual #28
238: lload         9
240: lconst_0
241: lcmp
242: ifne          249
245: iconst_1
246: goto          250
249: iconst_0
250: invokestatic  #29
253: new           #22
256: dup
257: invokespecial #23
260: ldc           #24
262: invokevirtual #25
265: lload         11
267: invokevirtual #26
270: ldc           #27
272: invokevirtual #25
275: lconst_0
276: invokevirtual #26
279: ldc           #24
281: invokevirtual #25
284: invokevirtual #28
287: lload         11
289: lconst_0
290: lcmp
291: ifne          298
294: iconst_1
295: goto          299
298: iconst_0
299: invokestatic  #29
302: aload         15
304: invokestatic  #53
307: new           #22
310: dup
311: invokespecial #23
314: ldc           #24
316: invokevirtual #25
319: iload         16
321: invokevirtual #69
324: ldc           #27
326: invokevirtual #25
329: iconst_0
330: invokevirtual #69
333: ldc           #24
335: invokevirtual #25
338: invokevirtual #28
341: iload         16
343: ifne          350
346: iconst_1
347: goto          351
350: iconst_0
351: invokestatic  #29
354: new           #22
357: dup
358: invokespecial #23
361: ldc           #24
363: invokevirtual #25
366: lload         17
368: invokevirtual #26
371: ldc           #27
373: invokevirtual #25
376: lconst_0
377: invokevirtual #26
380: ldc           #24
382: invokevirtual #25
385: invokevirtual #28
388: lload         17
390: lconst_0
391: lcmp
392: ifne          399
395: iconst_1
396: goto          400
399: iconst_0
400: invokestatic  #29
403: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test274
Start line: 10475
End line: 0
Method source code: 
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        java.io.File file11 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry13 = arArchiveOutputStream10.createArchiveEntry(file11, "65\001\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #798
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aconst_null
83: astore        10
85: aload         9
87: aload         10
89: ldc_w         #586
92: invokevirtual #400
95: astore        11
97: ldc           #51
99: invokestatic  #20
102: goto          107
105: astore        11
107: new           #22
110: dup
111: invokespecial #23
114: ldc           #24
116: invokevirtual #25
119: lload         4
121: invokevirtual #26
124: ldc           #27
126: invokevirtual #25
129: lconst_0
130: invokevirtual #26
133: ldc           #24
135: invokevirtual #25
138: invokevirtual #28
141: lload         4
143: lconst_0
144: lcmp
145: ifne          152
148: iconst_1
149: goto          153
152: iconst_0
153: invokestatic  #29
156: aload         6
158: invokestatic  #53
161: new           #22
164: dup
165: invokespecial #23
168: ldc           #24
170: invokevirtual #25
173: lload         7
175: invokevirtual #26
178: ldc           #27
180: invokevirtual #25
183: lconst_0
184: invokevirtual #26
187: ldc           #24
189: invokevirtual #25
192: invokevirtual #28
195: lload         7
197: lconst_0
198: lcmp
199: ifne          206
202: iconst_1
203: goto          207
206: iconst_0
207: invokestatic  #29
210: return
Exception table:
from    to  target type
85   102   105   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test275
Start line: 10500
End line: 0
Method source code: 
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        jarArchiveOutputStream12.setEncoding("5");
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode15 = null;
        jarArchiveOutputStream12.setUseZip64(zip64Mode15);
        try {
            jarArchiveOutputStream12.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #799
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: aload         10
105: ldc_w         #458
108: invokevirtual #459
111: aconst_null
112: astore        11
114: aload         10
116: aload         11
118: invokevirtual #460
121: aload         10
123: invokevirtual #581
126: ldc           #51
128: invokestatic  #20
131: goto          136
134: astore        12
136: new           #22
139: dup
140: invokespecial #23
143: ldc           #24
145: invokevirtual #25
148: lload         4
150: invokevirtual #26
153: ldc           #27
155: invokevirtual #25
158: lconst_0
159: invokevirtual #26
162: ldc           #24
164: invokevirtual #25
167: invokevirtual #28
170: lload         4
172: lconst_0
173: lcmp
174: ifne          181
177: iconst_1
178: goto          182
181: iconst_0
182: invokestatic  #29
185: aload         6
187: invokestatic  #53
190: new           #22
193: dup
194: invokespecial #23
197: ldc           #24
199: invokevirtual #25
202: iload         7
204: invokevirtual #41
207: ldc           #27
209: invokevirtual #25
212: iconst_0
213: invokevirtual #41
216: ldc           #24
218: invokevirtual #25
221: invokevirtual #28
224: iload         7
226: ifne          233
229: iconst_1
230: goto          234
233: iconst_0
234: invokestatic  #29
237: return
Exception table:
from    to  target type
121   131   134   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test276
Start line: 10529
End line: 0
Method source code: 
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        int int10 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int13 = tarArchiveEntry12.getDevMinor();
        tarArchiveEntry12.setIds((int) (short) 3, 0);
        long long17 = tarArchiveEntry12.getSize();
        tarArchiveEntry12.setSize((long) (short) 3);
        java.lang.String str20 = org.apache.commons.compress.utils.ArchiveUtils.toString((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry12);
        boolean boolean21 = tarArchiveEntry12.isExtended();
        boolean boolean22 = tarArchiveEntry12.isLink();
        int int23 = tarArchiveEntry12.getDevMinor();
        try {
            tarArchiveOutputStream4.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry12);
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: jar");
        } catch (java.io.UnsupportedEncodingException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-       3 jar" + "'", str20, "-       3 jar");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #800
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #60
76: istore        8
78: new           #112
81: dup
82: ldc           #44
84: invokespecial #120
87: astore        9
89: aload         9
91: invokevirtual #129
94: istore        10
96: aload         9
98: iconst_3
99: iconst_0
100: invokevirtual #130
103: aload         9
105: invokevirtual #156
108: lstore        11
110: aload         9
112: ldc2_w        #447
115: invokevirtual #330
118: aload         9
120: invokestatic  #449
123: astore        13
125: aload         9
127: invokevirtual #134
130: istore        14
132: aload         9
134: invokevirtual #394
137: istore        15
139: aload         9
141: invokevirtual #129
144: istore        16
146: aload_3
147: aload         9
149: invokevirtual #136
152: ldc           #137
154: invokestatic  #20
157: goto          162
160: astore        17
162: new           #22
165: dup
166: invokespecial #23
169: ldc           #24
171: invokevirtual #25
174: lload         4
176: invokevirtual #26
179: ldc           #27
181: invokevirtual #25
184: lconst_0
185: invokevirtual #26
188: ldc           #24
190: invokevirtual #25
193: invokevirtual #28
196: lload         4
198: lconst_0
199: lcmp
200: ifne          207
203: iconst_1
204: goto          208
207: iconst_0
208: invokestatic  #29
211: aload         6
213: invokestatic  #53
216: new           #22
219: dup
220: invokespecial #23
223: ldc           #24
225: invokevirtual #25
228: iload         7
230: invokevirtual #41
233: ldc           #27
235: invokevirtual #25
238: iconst_0
239: invokevirtual #41
242: ldc           #24
244: invokevirtual #25
247: invokevirtual #28
250: iload         7
252: ifne          259
255: iconst_1
256: goto          260
259: iconst_0
260: invokestatic  #29
263: new           #22
266: dup
267: invokespecial #23
270: ldc           #24
272: invokevirtual #25
275: iload         8
277: invokevirtual #41
280: ldc           #27
282: invokevirtual #25
285: iconst_0
286: invokevirtual #41
289: ldc           #24
291: invokevirtual #25
294: invokevirtual #28
297: iload         8
299: ifne          306
302: iconst_1
303: goto          307
306: iconst_0
307: invokestatic  #29
310: new           #22
313: dup
314: invokespecial #23
317: ldc           #24
319: invokevirtual #25
322: iload         10
324: invokevirtual #41
327: ldc           #27
329: invokevirtual #25
332: iconst_0
333: invokevirtual #41
336: ldc           #24
338: invokevirtual #25
341: invokevirtual #28
344: iload         10
346: ifne          353
349: iconst_1
350: goto          354
353: iconst_0
354: invokestatic  #29
357: new           #22
360: dup
361: invokespecial #23
364: ldc           #24
366: invokevirtual #25
369: lload         11
371: invokevirtual #26
374: ldc           #27
376: invokevirtual #25
379: lconst_0
380: invokevirtual #26
383: ldc           #24
385: invokevirtual #25
388: invokevirtual #28
391: lload         11
393: lconst_0
394: lcmp
395: ifne          402
398: iconst_1
399: goto          403
402: iconst_0
403: invokestatic  #29
406: new           #22
409: dup
410: invokespecial #23
413: ldc           #24
415: invokevirtual #25
418: aload         13
420: invokevirtual #25
423: ldc_w         #453
426: invokevirtual #25
429: invokevirtual #28
432: aload         13
434: ldc           #102
436: invokestatic  #154
439: new           #22
442: dup
443: invokespecial #23
446: ldc           #24
448: invokevirtual #25
451: iload         14
453: invokevirtual #69
456: ldc           #27
458: invokevirtual #25
461: iconst_0
462: invokevirtual #69
465: ldc           #24
467: invokevirtual #25
470: invokevirtual #28
473: iload         14
475: ifne          482
478: iconst_1
479: goto          483
482: iconst_0
483: invokestatic  #29
486: new           #22
489: dup
490: invokespecial #23
493: ldc           #24
495: invokevirtual #25
498: iload         15
500: invokevirtual #69
503: ldc           #27
505: invokevirtual #25
508: iconst_0
509: invokevirtual #69
512: ldc           #24
514: invokevirtual #25
517: invokevirtual #28
520: iload         15
522: ifne          529
525: iconst_1
526: goto          530
529: iconst_0
530: invokestatic  #29
533: new           #22
536: dup
537: invokespecial #23
540: ldc           #24
542: invokevirtual #25
545: iload         16
547: invokevirtual #41
550: ldc           #27
552: invokevirtual #25
555: iconst_0
556: invokevirtual #41
559: ldc           #24
561: invokevirtual #25
564: invokevirtual #28
567: iload         16
569: ifne          576
572: iconst_1
573: goto          577
576: iconst_0
577: invokestatic  #29
580: return
Exception table:
from    to  target type
146   157   160   Class java/io/UnsupportedEncodingException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test277
Start line: 10569
End line: 0
Method source code: 
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.setLongFileMode(257);
        try {
            arArchiveOutputStream10.close();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #801
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: sipush        257
92: invokevirtual #399
95: aload         9
97: invokevirtual #242
100: ldc           #51
102: invokestatic  #20
105: goto          110
108: astore        10
110: new           #22
113: dup
114: invokespecial #23
117: ldc           #24
119: invokevirtual #25
122: lload         4
124: invokevirtual #26
127: ldc           #27
129: invokevirtual #25
132: lconst_0
133: invokevirtual #26
136: ldc           #24
138: invokevirtual #25
141: invokevirtual #28
144: lload         4
146: lconst_0
147: lcmp
148: ifne          155
151: iconst_1
152: goto          156
155: iconst_0
156: invokestatic  #29
159: aload         6
161: invokestatic  #53
164: new           #22
167: dup
168: invokespecial #23
171: ldc           #24
173: invokevirtual #25
176: lload         7
178: invokevirtual #26
181: ldc           #27
183: invokevirtual #25
186: lconst_0
187: invokevirtual #26
190: ldc           #24
192: invokevirtual #25
195: invokevirtual #28
198: lload         7
200: lconst_0
201: lcmp
202: ifne          209
205: iconst_1
206: goto          210
209: iconst_0
210: invokestatic  #29
213: return
Exception table:
from    to  target type
95   105   108   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test278
Start line: 10595
End line: 0
Method source code: 
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        java.lang.String str20 = zipArchiveOutputStream13.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21);
        java.io.InputStream inputStream24 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream25 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream24);
        long long26 = jarArchiveInputStream25.getBytesRead();
        long long27 = jarArchiveInputStream25.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream28 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream25);
        arArchiveInputStream28.close();
        arArchiveInputStream28.pushedBackBytes((-1L));
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream32 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) arArchiveInputStream28);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream33 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) arArchiveInputStream28);
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream34 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream33);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream38 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) zipArchiveInputStream33, "always", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) zipArchiveInputStream38, (int) (short) 8);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong42 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray43 = zipLong42.getBytes();
        long long44 = zipLong42.getValue();
        java.io.InputStream inputStream45 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream46 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream45);
        long long47 = jarArchiveInputStream46.getBytesRead();
        long long48 = jarArchiveInputStream46.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream49 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46);
        boolean boolean51 = zipLong42.equals((java.lang.Object) jarArchiveInputStream46);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream54 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream46, 1000, 1);
        byte[] byteArray59 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean60 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray59);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong61 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray59);
        boolean boolean63 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray59, (int) (byte) 50);
        int int66 = tarArchiveInputStream54.read(byteArray59, (int) (byte) -1, 24576);
        int int69 = tarArchiveInputStream40.read(byteArray59, 504, (int) 'a');
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream70 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) tarArchiveInputStream40);
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory72 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream74 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream76 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream74, "jar");
        tarArchiveOutputStream76.count(0L);
        long long79 = tarArchiveOutputStream76.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream80 = archiveStreamFactory72.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream76);
        int int81 = tarArchiveOutputStream76.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream82 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream76);
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream83 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream76);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream84 = archiveStreamFactory0.createArchiveOutputStream("cpio", (java.io.OutputStream) tarArchiveOutputStream76);
        java.io.OutputStream outputStream86 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream88 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream86, 8192);
        int int89 = tarArchiveOutputStream88.getCount();
        int int90 = tarArchiveOutputStream88.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream93 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream88, 64, (int) (short) 3);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream94 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream88);
        tarArchiveOutputStream88.setLongFileMode((int) (byte) 100);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream97 = archiveStreamFactory0.createArchiveOutputStream("org.apache.commons.compress.archivers.ArchiveException:  \000", (java.io.OutputStream) tarArchiveOutputStream88);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: org.apache.commons.compress.archivers.ArchiveException:  ? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(archiveInputStream70);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(archiveOutputStream84);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #802
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: aload         9
125: invokevirtual #310
128: astore        13
130: new           #143
133: dup
134: aload         9
136: invokespecial #144
139: astore        14
141: aload_1
142: ldc           #164
144: aload         14
146: invokevirtual #49
149: astore        15
151: aconst_null
152: astore        16
154: new           #10
157: dup
158: aload         16
160: invokespecial #11
163: astore        17
165: aload         17
167: invokevirtual #12
170: lstore        18
172: aload         17
174: invokevirtual #12
177: lstore        20
179: new           #13
182: dup
183: aload         17
185: invokespecial #14
188: astore        22
190: aload         22
192: invokevirtual #140
195: aload         22
197: ldc2_w        #297
200: invokevirtual #299
203: new           #33
206: dup
207: aload         22
209: invokespecial #34
212: astore        23
214: new           #15
217: dup
218: aload         22
220: invokespecial #300
223: astore        24
225: new           #10
228: dup
229: aload         24
231: invokespecial #11
234: astore        25
236: new           #15
239: dup
240: aload         24
242: ldc           #79
244: iconst_0
245: iconst_0
246: invokespecial #17
249: astore        26
251: new           #31
254: dup
255: aload         26
257: bipush        8
259: invokespecial #141
262: astore        27
264: new           #73
267: dup
268: lconst_0
269: invokespecial #74
272: astore        28
274: aload         28
276: invokevirtual #75
279: astore        29
281: aload         28
283: invokevirtual #336
286: lstore        30
288: aconst_null
289: astore        32
291: new           #10
294: dup
295: aload         32
297: invokespecial #11
300: astore        33
302: aload         33
304: invokevirtual #12
307: lstore        34
309: aload         33
311: invokevirtual #12
314: lstore        36
316: new           #13
319: dup
320: aload         33
322: invokespecial #14
325: astore        38
327: new           #31
330: dup
331: aload         33
333: invokespecial #32
336: astore        39
338: aload         28
340: aload         33
342: invokevirtual #337
345: istore        40
347: new           #31
350: dup
351: aload         33
353: sipush        1000
356: iconst_1
357: invokespecial #108
360: astore        41
362: iconst_4
363: newarray       byte
365: dup
366: iconst_0
367: bipush        54
369: bastore
370: dup
371: iconst_1
372: bipush        53
374: bastore
375: dup
376: iconst_2
377: iconst_1
378: bastore
379: dup
380: iconst_3
381: bipush        10
383: bastore
384: astore        42
386: aload         42
388: invokestatic  #192
391: istore        43
393: new           #73
396: dup
397: aload         42
399: invokespecial #406
402: astore        44
404: aload         42
406: bipush        50
408: invokestatic  #523
411: istore        45
413: aload         41
415: aload         42
417: iconst_m1
418: sipush        24576
421: invokevirtual #174
424: istore        46
426: aload         27
428: aload         42
430: sipush        504
433: bipush        97
435: invokevirtual #174
438: istore        47
440: aload_1
441: ldc           #164
443: aload         27
445: invokevirtual #38
448: astore        48
450: new           #8
453: dup
454: invokespecial #9
457: astore        49
459: aconst_null
460: astore        50
462: new           #43
465: dup
466: aload         50
468: ldc           #44
470: invokespecial #45
473: astore        51
475: aload         51
477: lconst_0
478: invokevirtual #46
481: aload         51
483: invokevirtual #47
486: lstore        52
488: aload         49
490: ldc           #48
492: aload         51
494: invokevirtual #49
497: astore        54
499: aload         51
501: invokevirtual #60
504: istore        55
506: new           #43
509: dup
510: aload         51
512: invokespecial #95
515: astore        56
517: new           #240
520: dup
521: aload         51
523: invokespecial #241
526: astore        57
528: aload_1
529: ldc_w         #273
532: aload         51
534: invokevirtual #49
537: astore        58
539: aconst_null
540: astore        59
542: new           #43
545: dup
546: aload         59
548: sipush        8192
551: invokespecial #340
554: astore        60
556: aload         60
558: invokevirtual #60
561: istore        61
563: aload         60
565: invokevirtual #60
568: istore        62
570: new           #43
573: dup
574: aload         60
576: bipush        64
578: iconst_3
579: invokespecial #346
582: astore        63
584: new           #43
587: dup
588: aload         60
590: invokespecial #95
593: astore        64
595: aload         60
597: bipush        100
599: invokevirtual #195
602: aload_1
603: ldc           #186
605: aload         60
607: invokevirtual #49
610: astore        65
612: ldc           #187
614: invokestatic  #20
617: goto          622
620: astore        65
622: new           #22
625: dup
626: invokespecial #23
629: ldc           #24
631: invokevirtual #25
634: lload         4
636: invokevirtual #26
639: ldc           #27
641: invokevirtual #25
644: lconst_0
645: invokevirtual #26
648: ldc           #24
650: invokevirtual #25
653: invokevirtual #28
656: lload         4
658: lconst_0
659: lcmp
660: ifne          667
663: iconst_1
664: goto          668
667: iconst_0
668: invokestatic  #29
671: aload         6
673: invokestatic  #53
676: new           #22
679: dup
680: invokespecial #23
683: ldc           #24
685: invokevirtual #25
688: iload         11
690: invokevirtual #69
693: ldc           #27
695: invokevirtual #25
698: iconst_0
699: invokevirtual #69
702: ldc           #24
704: invokevirtual #25
707: invokevirtual #28
710: iload         11
712: ifne          719
715: iconst_1
716: goto          720
719: iconst_0
720: invokestatic  #29
723: new           #22
726: dup
727: invokespecial #23
730: ldc           #24
732: invokevirtual #25
735: iload         12
737: invokevirtual #69
740: ldc           #27
742: invokevirtual #25
745: iconst_0
746: invokevirtual #69
749: ldc           #24
751: invokevirtual #25
754: invokevirtual #28
757: iload         12
759: ifne          766
762: iconst_1
763: goto          767
766: iconst_0
767: invokestatic  #29
770: new           #22
773: dup
774: invokespecial #23
777: ldc           #24
779: invokevirtual #25
782: aload         13
784: invokevirtual #25
787: ldc_w         #317
790: invokevirtual #25
793: invokevirtual #28
796: aload         13
798: ldc           #85
800: invokestatic  #154
803: aload         15
805: invokestatic  #53
808: new           #22
811: dup
812: invokespecial #23
815: ldc           #24
817: invokevirtual #25
820: lload         18
822: invokevirtual #26
825: ldc           #27
827: invokevirtual #25
830: lconst_0
831: invokevirtual #26
834: ldc           #24
836: invokevirtual #25
839: invokevirtual #28
842: lload         18
844: lconst_0
845: lcmp
846: ifne          853
849: iconst_1
850: goto          854
853: iconst_0
854: invokestatic  #29
857: new           #22
860: dup
861: invokespecial #23
864: ldc           #24
866: invokevirtual #25
869: lload         20
871: invokevirtual #26
874: ldc           #27
876: invokevirtual #25
879: lconst_0
880: invokevirtual #26
883: ldc           #24
885: invokevirtual #25
888: invokevirtual #28
891: lload         20
893: lconst_0
894: lcmp
895: ifne          902
898: iconst_1
899: goto          903
902: iconst_0
903: invokestatic  #29
906: aload         29
908: invokestatic  #53
911: aload         29
913: invokestatic  #66
916: ldc           #77
918: invokestatic  #68
921: new           #22
924: dup
925: invokespecial #23
928: ldc           #24
930: invokevirtual #25
933: lload         30
935: invokevirtual #26
938: ldc           #27
940: invokevirtual #25
943: lconst_0
944: invokevirtual #26
947: ldc           #24
949: invokevirtual #25
952: invokevirtual #28
955: lload         30
957: lconst_0
958: lcmp
959: ifne          966
962: iconst_1
963: goto          967
966: iconst_0
967: invokestatic  #29
970: new           #22
973: dup
974: invokespecial #23
977: ldc           #24
979: invokevirtual #25
982: lload         34
984: invokevirtual #26
987: ldc           #27
989: invokevirtual #25
992: lconst_0
993: invokevirtual #26
996: ldc           #24
998: invokevirtual #25
1001: invokevirtual #28
1004: lload         34
1006: lconst_0
1007: lcmp
1008: ifne          1015
1011: iconst_1
1012: goto          1016
1015: iconst_0
1016: invokestatic  #29
1019: new           #22
1022: dup
1023: invokespecial #23
1026: ldc           #24
1028: invokevirtual #25
1031: lload         36
1033: invokevirtual #26
1036: ldc           #27
1038: invokevirtual #25
1041: lconst_0
1042: invokevirtual #26
1045: ldc           #24
1047: invokevirtual #25
1050: invokevirtual #28
1053: lload         36
1055: lconst_0
1056: lcmp
1057: ifne          1064
1060: iconst_1
1061: goto          1065
1064: iconst_0
1065: invokestatic  #29
1068: new           #22
1071: dup
1072: invokespecial #23
1075: ldc           #24
1077: invokevirtual #25
1080: iload         40
1082: invokevirtual #69
1085: ldc           #27
1087: invokevirtual #25
1090: iconst_0
1091: invokevirtual #69
1094: ldc           #24
1096: invokevirtual #25
1099: invokevirtual #28
1102: iload         40
1104: ifne          1111
1107: iconst_1
1108: goto          1112
1111: iconst_0
1112: invokestatic  #29
1115: aload         42
1117: invokestatic  #53
1120: aload         42
1122: invokestatic  #66
1125: ldc_w         #409
1128: invokestatic  #68
1131: new           #22
1134: dup
1135: invokespecial #23
1138: ldc           #24
1140: invokevirtual #25
1143: iload         43
1145: invokevirtual #69
1148: ldc           #27
1150: invokevirtual #25
1153: iconst_0
1154: invokevirtual #69
1157: ldc           #24
1159: invokevirtual #25
1162: invokevirtual #28
1165: iload         43
1167: ifne          1174
1170: iconst_1
1171: goto          1175
1174: iconst_0
1175: invokestatic  #29
1178: new           #22
1181: dup
1182: invokespecial #23
1185: ldc           #24
1187: invokevirtual #25
1190: iload         45
1192: invokevirtual #69
1195: ldc           #27
1197: invokevirtual #25
1200: iconst_0
1201: invokevirtual #69
1204: ldc           #24
1206: invokevirtual #25
1209: invokevirtual #28
1212: iload         45
1214: ifne          1221
1217: iconst_1
1218: goto          1222
1221: iconst_0
1222: invokestatic  #29
1225: new           #22
1228: dup
1229: invokespecial #23
1232: ldc           #24
1234: invokevirtual #25
1237: iload         46
1239: invokevirtual #41
1242: ldc           #27
1244: invokevirtual #25
1247: iconst_m1
1248: invokevirtual #41
1251: ldc           #24
1253: invokevirtual #25
1256: invokevirtual #28
1259: iload         46
1261: iconst_m1
1262: if_icmpne     1269
1265: iconst_1
1266: goto          1270
1269: iconst_0
1270: invokestatic  #29
1273: new           #22
1276: dup
1277: invokespecial #23
1280: ldc           #24
1282: invokevirtual #25
1285: iload         47
1287: invokevirtual #41
1290: ldc           #27
1292: invokevirtual #25
1295: iconst_m1
1296: invokevirtual #41
1299: ldc           #24
1301: invokevirtual #25
1304: invokevirtual #28
1307: iload         47
1309: iconst_m1
1310: if_icmpne     1317
1313: iconst_1
1314: goto          1318
1317: iconst_0
1318: invokestatic  #29
1321: aload         48
1323: invokestatic  #53
1326: new           #22
1329: dup
1330: invokespecial #23
1333: ldc           #24
1335: invokevirtual #25
1338: lload         52
1340: invokevirtual #26
1343: ldc           #27
1345: invokevirtual #25
1348: lconst_0
1349: invokevirtual #26
1352: ldc           #24
1354: invokevirtual #25
1357: invokevirtual #28
1360: lload         52
1362: lconst_0
1363: lcmp
1364: ifne          1371
1367: iconst_1
1368: goto          1372
1371: iconst_0
1372: invokestatic  #29
1375: aload         54
1377: invokestatic  #53
1380: new           #22
1383: dup
1384: invokespecial #23
1387: ldc           #24
1389: invokevirtual #25
1392: iload         55
1394: invokevirtual #41
1397: ldc           #27
1399: invokevirtual #25
1402: iconst_0
1403: invokevirtual #41
1406: ldc           #24
1408: invokevirtual #25
1411: invokevirtual #28
1414: iload         55
1416: ifne          1423
1419: iconst_1
1420: goto          1424
1423: iconst_0
1424: invokestatic  #29
1427: aload         58
1429: invokestatic  #53
1432: new           #22
1435: dup
1436: invokespecial #23
1439: ldc           #24
1441: invokevirtual #25
1444: iload         61
1446: invokevirtual #41
1449: ldc           #27
1451: invokevirtual #25
1454: iconst_0
1455: invokevirtual #41
1458: ldc           #24
1460: invokevirtual #25
1463: invokevirtual #28
1466: iload         61
1468: ifne          1475
1471: iconst_1
1472: goto          1476
1475: iconst_0
1476: invokestatic  #29
1479: new           #22
1482: dup
1483: invokespecial #23
1486: ldc           #24
1488: invokevirtual #25
1491: iload         62
1493: invokevirtual #41
1496: ldc           #27
1498: invokevirtual #25
1501: iconst_0
1502: invokevirtual #41
1505: ldc           #24
1507: invokevirtual #25
1510: invokevirtual #28
1513: iload         62
1515: ifne          1522
1518: iconst_1
1519: goto          1523
1522: iconst_0
1523: invokestatic  #29
1526: return
Exception table:
from    to  target type
602   617   620   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test279
Start line: 10699
End line: 0
Method source code: 
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream17 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) cpioArchiveInputStream16);
        int int18 = cpioArchiveInputStream16.available();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #803
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: new           #33
125: dup
126: aload         12
128: invokespecial #34
131: astore        14
133: new           #13
136: dup
137: aload         14
139: invokespecial #14
142: astore        15
144: aload         14
146: invokevirtual #35
149: istore        16
151: new           #22
154: dup
155: invokespecial #23
158: ldc           #24
160: invokevirtual #25
163: lload         4
165: invokevirtual #26
168: ldc           #27
170: invokevirtual #25
173: lconst_0
174: invokevirtual #26
177: ldc           #24
179: invokevirtual #25
182: invokevirtual #28
185: lload         4
187: lconst_0
188: lcmp
189: ifne          196
192: iconst_1
193: goto          197
196: iconst_0
197: invokestatic  #29
200: new           #22
203: dup
204: invokespecial #23
207: ldc           #24
209: invokevirtual #25
212: lload         6
214: invokevirtual #26
217: ldc           #27
219: invokevirtual #25
222: lconst_0
223: invokevirtual #26
226: ldc           #24
228: invokevirtual #25
231: invokevirtual #28
234: lload         6
236: lconst_0
237: lcmp
238: ifne          245
241: iconst_1
242: goto          246
245: iconst_0
246: invokestatic  #29
249: aload         10
251: invokestatic  #168
254: aload         11
256: invokestatic  #168
259: aload         13
261: invokestatic  #53
264: new           #22
267: dup
268: invokespecial #23
271: ldc           #24
273: invokevirtual #25
276: iload         16
278: invokevirtual #41
281: ldc           #27
283: invokevirtual #25
286: iconst_1
287: invokevirtual #41
290: ldc           #24
292: invokevirtual #25
295: invokevirtual #28
298: iload         16
300: iconst_1
301: if_icmpne     308
304: iconst_1
305: goto          309
308: iconst_0
309: invokestatic  #29
312: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test280
Start line: 10726
End line: 0
Method source code: 
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        arArchiveOutputStream10.setLongFileMode((int) ' ');
        arArchiveOutputStream10.setLongFileMode((int) (byte) 83);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream20 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) arArchiveOutputStream10, (int) (byte) 55, (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #804
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: bipush        32
99: invokevirtual #399
102: aload         9
104: bipush        83
106: invokevirtual #399
109: new           #43
112: dup
113: aload         9
115: bipush        55
117: bipush        100
119: invokespecial #346
122: astore        10
124: new           #22
127: dup
128: invokespecial #23
131: ldc           #24
133: invokevirtual #25
136: lload         4
138: invokevirtual #26
141: ldc           #27
143: invokevirtual #25
146: lconst_0
147: invokevirtual #26
150: ldc           #24
152: invokevirtual #25
155: invokevirtual #28
158: lload         4
160: lconst_0
161: lcmp
162: ifne          169
165: iconst_1
166: goto          170
169: iconst_0
170: invokestatic  #29
173: aload         6
175: invokestatic  #53
178: new           #22
181: dup
182: invokespecial #23
185: ldc           #24
187: invokevirtual #25
190: lload         7
192: invokevirtual #26
195: ldc           #27
197: invokevirtual #25
200: lconst_0
201: invokevirtual #26
204: ldc           #24
206: invokevirtual #25
209: invokevirtual #28
212: lload         7
214: lconst_0
215: lcmp
216: ifne          223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #29
227: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test281
Start line: 10748
End line: 0
Method source code: 
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        tarArchiveEntry12.setModTime((long) 1024);
        java.lang.String str15 = tarArchiveEntry12.getUserName();
        java.lang.String str16 = tarArchiveEntry12.getName();
        boolean boolean17 = tarArchiveEntry12.isGlobalPaxHeader();
        tarArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry12);
        boolean boolean19 = tarArchiveEntry12.isCharacterDevice();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "jar" + "'", str16, "jar");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #805
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #112
85: dup
86: ldc           #44
88: invokespecial #120
91: astore        9
93: aload         9
95: ldc2_w        #469
98: invokevirtual #806
101: aload         9
103: invokevirtual #677
106: astore        10
108: aload         9
110: invokevirtual #276
113: astore        11
115: aload         9
117: invokevirtual #511
120: istore        12
122: aload         8
124: aload         9
126: invokevirtual #136
129: aload         9
131: invokevirtual #344
134: istore        13
136: new           #22
139: dup
140: invokespecial #23
143: ldc           #24
145: invokevirtual #25
148: lload         4
150: invokevirtual #26
153: ldc           #27
155: invokevirtual #25
158: lconst_0
159: invokevirtual #26
162: ldc           #24
164: invokevirtual #25
167: invokevirtual #28
170: lload         4
172: lconst_0
173: lcmp
174: ifne          181
177: iconst_1
178: goto          182
181: iconst_0
182: invokestatic  #29
185: aload         6
187: invokestatic  #53
190: new           #22
193: dup
194: invokespecial #23
197: ldc           #24
199: invokevirtual #25
202: iload         7
204: invokevirtual #41
207: ldc           #27
209: invokevirtual #25
212: iconst_0
213: invokevirtual #41
216: ldc           #24
218: invokevirtual #25
221: invokevirtual #28
224: iload         7
226: ifne          233
229: iconst_1
230: goto          234
233: iconst_0
234: invokestatic  #29
237: new           #22
240: dup
241: invokespecial #23
244: ldc           #24
246: invokevirtual #25
249: aload         10
251: invokevirtual #25
254: ldc           #219
256: invokevirtual #25
259: invokevirtual #28
262: aload         10
264: ldc           #61
266: invokestatic  #154
269: new           #22
272: dup
273: invokespecial #23
276: ldc           #24
278: invokevirtual #25
281: aload         11
283: invokevirtual #25
286: ldc_w         #350
289: invokevirtual #25
292: invokevirtual #28
295: aload         11
297: ldc           #44
299: invokestatic  #154
302: new           #22
305: dup
306: invokespecial #23
309: ldc           #24
311: invokevirtual #25
314: iload         12
316: invokevirtual #69
319: ldc           #27
321: invokevirtual #25
324: iconst_0
325: invokevirtual #69
328: ldc           #24
330: invokevirtual #25
333: invokevirtual #28
336: iload         12
338: ifne          345
341: iconst_1
342: goto          346
345: iconst_0
346: invokestatic  #29
349: new           #22
352: dup
353: invokespecial #23
356: ldc           #24
358: invokevirtual #25
361: iload         13
363: invokevirtual #69
366: ldc           #27
368: invokevirtual #25
371: iconst_0
372: invokevirtual #69
375: ldc           #24
377: invokevirtual #25
380: invokevirtual #28
383: iload         13
385: ifne          392
388: iconst_1
389: goto          393
392: iconst_0
393: invokestatic  #29
396: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test282
Start line: 10776
End line: 0
Method source code: 
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.setLongFileMode(4);
        arArchiveOutputStream10.setLongFileMode(40960);
        arArchiveOutputStream10.finish();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #807
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: iconst_4
85: invokevirtual #399
88: aload         9
90: ldc           #109
92: invokevirtual #399
95: aload         9
97: invokevirtual #286
100: new           #22
103: dup
104: invokespecial #23
107: ldc           #24
109: invokevirtual #25
112: lload         4
114: invokevirtual #26
117: ldc           #27
119: invokevirtual #25
122: lconst_0
123: invokevirtual #26
126: ldc           #24
128: invokevirtual #25
131: invokevirtual #28
134: lload         4
136: lconst_0
137: lcmp
138: ifne          145
141: iconst_1
142: goto          146
145: iconst_0
146: invokestatic  #29
149: aload         6
151: invokestatic  #53
154: new           #22
157: dup
158: invokespecial #23
161: ldc           #24
163: invokevirtual #25
166: lload         7
168: invokevirtual #26
171: ldc           #27
173: invokevirtual #25
176: lconst_0
177: invokevirtual #26
180: ldc           #24
182: invokevirtual #25
185: invokevirtual #28
188: lload         7
190: lconst_0
191: lcmp
192: ifne          199
195: iconst_1
196: goto          200
199: iconst_0
200: invokestatic  #29
203: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test283
Start line: 10796
End line: 0
Method source code: 
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int2 = tarArchiveEntry1.getDevMinor();
        tarArchiveEntry1.setIds((int) (short) 3, 0);
        java.lang.String str6 = tarArchiveEntry1.getGroupName();
        tarArchiveEntry1.setDevMinor(0);
        boolean boolean9 = tarArchiveEntry1.isSymbolicLink();
        tarArchiveEntry1.setGroupId((int) (short) 2);
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory12 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream14 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream16 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream14, "jar");
        tarArchiveOutputStream16.count(0L);
        long long19 = tarArchiveOutputStream16.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream20 = archiveStreamFactory12.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream16);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream21 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream20);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream22 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream21);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream23 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream22);
        java.lang.String str24 = jarArchiveOutputStream22.getEncoding();
        boolean boolean25 = tarArchiveEntry1.equals((java.lang.Object) jarArchiveOutputStream22);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream27 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream22, (int) (short) 1);
        tarArchiveOutputStream27.setAddPaxHeadersForNonAsciiNames(true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream20);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTF8" + "'", str24, "UTF8");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #808
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #44
31: invokespecial #120
34: astore_1
35: aload_1
36: invokevirtual #129
39: istore_2
40: aload_1
41: iconst_3
42: iconst_0
43: invokevirtual #130
46: aload_1
47: invokevirtual #376
50: astore_3
51: aload_1
52: iconst_0
53: invokevirtual #114
56: aload_1
57: invokevirtual #494
60: istore        4
62: aload_1
63: iconst_2
64: invokevirtual #429
67: new           #8
70: dup
71: invokespecial #9
74: astore        5
76: aconst_null
77: astore        6
79: new           #43
82: dup
83: aload         6
85: ldc           #44
87: invokespecial #45
90: astore        7
92: aload         7
94: lconst_0
95: invokevirtual #46
98: aload         7
100: invokevirtual #47
103: lstore        8
105: aload         5
107: ldc           #48
109: aload         7
111: invokevirtual #49
114: astore        10
116: new           #182
119: dup
120: aload         10
122: invokespecial #183
125: astore        11
127: new           #222
130: dup
131: aload         11
133: invokespecial #223
136: astore        12
138: new           #143
141: dup
142: aload         12
144: invokespecial #144
147: astore        13
149: aload         12
151: invokevirtual #809
154: astore        14
156: aload_1
157: aload         12
159: invokevirtual #133
162: istore        15
164: new           #43
167: dup
168: aload         12
170: iconst_1
171: invokespecial #340
174: astore        16
176: aload         16
178: iconst_1
179: invokevirtual #148
182: new           #22
185: dup
186: invokespecial #23
189: ldc           #24
191: invokevirtual #25
194: iload_2
195: invokevirtual #41
198: ldc           #27
200: invokevirtual #25
203: iconst_0
204: invokevirtual #41
207: ldc           #24
209: invokevirtual #25
212: invokevirtual #28
215: iload_2
216: ifne          223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #29
227: new           #22
230: dup
231: invokespecial #23
234: ldc           #24
236: invokevirtual #25
239: aload_3
240: invokevirtual #25
243: ldc           #219
245: invokevirtual #25
248: invokevirtual #28
251: aload_3
252: ldc           #61
254: invokestatic  #154
257: new           #22
260: dup
261: invokespecial #23
264: ldc           #24
266: invokevirtual #25
269: iload         4
271: invokevirtual #69
274: ldc           #27
276: invokevirtual #25
279: iconst_0
280: invokevirtual #69
283: ldc           #24
285: invokevirtual #25
288: invokevirtual #28
291: iload         4
293: ifne          300
296: iconst_1
297: goto          301
300: iconst_0
301: invokestatic  #29
304: new           #22
307: dup
308: invokespecial #23
311: ldc           #24
313: invokevirtual #25
316: lload         8
318: invokevirtual #26
321: ldc           #27
323: invokevirtual #25
326: lconst_0
327: invokevirtual #26
330: ldc           #24
332: invokevirtual #25
335: invokevirtual #28
338: lload         8
340: lconst_0
341: lcmp
342: ifne          349
345: iconst_1
346: goto          350
349: iconst_0
350: invokestatic  #29
353: aload         10
355: invokestatic  #53
358: new           #22
361: dup
362: invokespecial #23
365: ldc           #24
367: invokevirtual #25
370: aload         14
372: invokevirtual #25
375: ldc_w         #317
378: invokevirtual #25
381: invokevirtual #28
384: aload         14
386: ldc           #85
388: invokestatic  #154
391: new           #22
394: dup
395: invokespecial #23
398: ldc           #24
400: invokevirtual #25
403: iload         15
405: invokevirtual #69
408: ldc           #27
410: invokevirtual #25
413: iconst_0
414: invokevirtual #69
417: ldc           #24
419: invokevirtual #25
422: invokevirtual #28
425: iload         15
427: ifne          434
430: iconst_1
431: goto          435
434: iconst_0
435: invokestatic  #29
438: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test284
Start line: 10829
End line: 0
Method source code: 
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9);
        int int11 = zipArchiveOutputStream9.getCount();
        try {
            zipArchiveOutputStream9.write(0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #810
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: new           #222
80: dup
81: aload         7
83: invokespecial #223
86: astore        8
88: aload         7
90: invokevirtual #309
93: istore        9
95: aload         7
97: iconst_0
98: invokevirtual #811
101: ldc           #51
103: invokestatic  #20
106: goto          111
109: astore        10
111: new           #22
114: dup
115: invokespecial #23
118: ldc           #24
120: invokevirtual #25
123: lload         4
125: invokevirtual #26
128: ldc           #27
130: invokevirtual #25
133: lconst_0
134: invokevirtual #26
137: ldc           #24
139: invokevirtual #25
142: invokevirtual #28
145: lload         4
147: lconst_0
148: lcmp
149: ifne          156
152: iconst_1
153: goto          157
156: iconst_0
157: invokestatic  #29
160: aload         6
162: invokestatic  #53
165: new           #22
168: dup
169: invokespecial #23
172: ldc           #24
174: invokevirtual #25
177: iload         9
179: invokevirtual #41
182: ldc           #27
184: invokevirtual #25
187: iconst_0
188: invokevirtual #41
191: ldc           #24
193: invokevirtual #25
196: invokevirtual #28
199: iload         9
201: ifne          208
204: iconst_1
205: goto          209
208: iconst_0
209: invokestatic  #29
212: return
Exception table:
from    to  target type
95   106   109   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test285
Start line: 10854
End line: 0
Method source code: 
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.OutputStream outputStream10 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream12 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream10, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream13 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream10);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy14 = null;
        zipArchiveOutputStream13.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy14);
        boolean boolean16 = zipArchiveOutputStream13.isSeekable();
        zipArchiveOutputStream13.setLevel((int) (short) 2);
        boolean boolean19 = zipArchiveOutputStream13.isSeekable();
        java.lang.String str20 = zipArchiveOutputStream13.getEncoding();
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream21 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream13);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream22 = archiveStreamFactory0.createArchiveOutputStream("tar", (java.io.OutputStream) cpioArchiveOutputStream21);
        java.io.InputStream inputStream24 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream25 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream(inputStream24);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong27 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray28 = zipLong27.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong30 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray31 = zipLong30.getBytes();
        boolean boolean33 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray28, byteArray31, true);
        int int36 = tarArchiveInputStream25.read(byteArray28, 0, 32);
        tarArchiveInputStream25.mark((int) '#');
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream39 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) tarArchiveInputStream25);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream40 = archiveStreamFactory0.createArchiveInputStream("-       0 ar", (java.io.InputStream) tarArchiveInputStream25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: -       0 ar not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTF8" + "'", str20, "UTF8");
        org.junit.Assert.assertNotNull(archiveOutputStream22);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #812
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #43
72: dup
73: aload         7
75: ldc           #44
77: invokespecial #45
80: astore        8
82: new           #182
85: dup
86: aload         7
88: invokespecial #183
91: astore        9
93: aconst_null
94: astore        10
96: aload         9
98: aload         10
100: invokevirtual #184
103: aload         9
105: invokevirtual #185
108: istore        11
110: aload         9
112: iconst_2
113: invokevirtual #291
116: aload         9
118: invokevirtual #185
121: istore        12
123: aload         9
125: invokevirtual #310
128: astore        13
130: new           #143
133: dup
134: aload         9
136: invokespecial #144
139: astore        14
141: aload_1
142: ldc           #164
144: aload         14
146: invokevirtual #49
149: astore        15
151: aconst_null
152: astore        16
154: new           #31
157: dup
158: aload         16
160: invokespecial #32
163: astore        17
165: new           #73
168: dup
169: lconst_0
170: invokespecial #74
173: astore        18
175: aload         18
177: invokevirtual #75
180: astore        19
182: new           #73
185: dup
186: lconst_0
187: invokespecial #74
190: astore        20
192: aload         20
194: invokevirtual #75
197: astore        21
199: aload         19
201: aload         21
203: iconst_1
204: invokestatic  #177
207: istore        22
209: aload         17
211: aload         19
213: iconst_0
214: bipush        32
216: invokevirtual #174
219: istore        23
221: aload         17
223: bipush        35
225: invokevirtual #178
228: new           #13
231: dup
232: aload         17
234: invokespecial #14
237: astore        24
239: aload_1
240: ldc_w         #643
243: aload         17
245: invokevirtual #38
248: astore        25
250: ldc_w         #813
253: invokestatic  #20
256: goto          261
259: astore        25
261: new           #22
264: dup
265: invokespecial #23
268: ldc           #24
270: invokevirtual #25
273: lload         4
275: invokevirtual #26
278: ldc           #27
280: invokevirtual #25
283: lconst_0
284: invokevirtual #26
287: ldc           #24
289: invokevirtual #25
292: invokevirtual #28
295: lload         4
297: lconst_0
298: lcmp
299: ifne          306
302: iconst_1
303: goto          307
306: iconst_0
307: invokestatic  #29
310: aload         6
312: invokestatic  #53
315: new           #22
318: dup
319: invokespecial #23
322: ldc           #24
324: invokevirtual #25
327: iload         11
329: invokevirtual #69
332: ldc           #27
334: invokevirtual #25
337: iconst_0
338: invokevirtual #69
341: ldc           #24
343: invokevirtual #25
346: invokevirtual #28
349: iload         11
351: ifne          358
354: iconst_1
355: goto          359
358: iconst_0
359: invokestatic  #29
362: new           #22
365: dup
366: invokespecial #23
369: ldc           #24
371: invokevirtual #25
374: iload         12
376: invokevirtual #69
379: ldc           #27
381: invokevirtual #25
384: iconst_0
385: invokevirtual #69
388: ldc           #24
390: invokevirtual #25
393: invokevirtual #28
396: iload         12
398: ifne          405
401: iconst_1
402: goto          406
405: iconst_0
406: invokestatic  #29
409: new           #22
412: dup
413: invokespecial #23
416: ldc           #24
418: invokevirtual #25
421: aload         13
423: invokevirtual #25
426: ldc_w         #317
429: invokevirtual #25
432: invokevirtual #28
435: aload         13
437: ldc           #85
439: invokestatic  #154
442: aload         15
444: invokestatic  #53
447: aload         19
449: invokestatic  #53
452: aload         19
454: invokestatic  #66
457: ldc           #77
459: invokestatic  #68
462: aload         21
464: invokestatic  #53
467: aload         21
469: invokestatic  #66
472: ldc           #77
474: invokestatic  #68
477: new           #22
480: dup
481: invokespecial #23
484: ldc           #24
486: invokevirtual #25
489: iload         22
491: invokevirtual #69
494: ldc           #27
496: invokevirtual #25
499: iconst_1
500: invokevirtual #69
503: ldc           #24
505: invokevirtual #25
508: invokevirtual #28
511: iload         22
513: iconst_1
514: if_icmpne     521
517: iconst_1
518: goto          522
521: iconst_0
522: invokestatic  #29
525: new           #22
528: dup
529: invokespecial #23
532: ldc           #24
534: invokevirtual #25
537: iload         23
539: invokevirtual #41
542: ldc           #27
544: invokevirtual #25
547: iconst_m1
548: invokevirtual #41
551: ldc           #24
553: invokevirtual #25
556: invokevirtual #28
559: iload         23
561: iconst_m1
562: if_icmpne     569
565: iconst_1
566: goto          570
569: iconst_0
570: invokestatic  #29
573: return
Exception table:
from    to  target type
239   256   259   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test286
Start line: 10906
End line: 0
Method source code: 
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        int int12 = tarArchiveEntry1.getMode();
        tarArchiveEntry1.setSize((long) (short) 8);
        tarArchiveEntry1.setSize(3L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 33188 + "'", int12 == 33188);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #814
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #419
92: istore        9
94: aload_1
95: ldc2_w        #542
98: invokevirtual #330
101: aload_1
102: ldc2_w        #447
105: invokevirtual #330
108: new           #22
111: dup
112: invokespecial #23
115: ldc           #24
117: invokevirtual #25
120: lload         5
122: invokevirtual #26
125: ldc           #27
127: invokevirtual #25
130: lconst_0
131: invokevirtual #26
134: ldc           #24
136: invokevirtual #25
139: invokevirtual #28
142: lload         5
144: lconst_0
145: lcmp
146: ifne          153
149: iconst_1
150: goto          154
153: iconst_0
154: invokestatic  #29
157: aload         7
159: invokestatic  #53
162: new           #22
165: dup
166: invokespecial #23
169: ldc           #24
171: invokevirtual #25
174: iload         8
176: invokevirtual #69
179: ldc           #27
181: invokevirtual #25
184: iconst_0
185: invokevirtual #69
188: ldc           #24
190: invokevirtual #25
193: invokevirtual #28
196: iload         8
198: ifne          205
201: iconst_1
202: goto          206
205: iconst_0
206: invokestatic  #29
209: new           #22
212: dup
213: invokespecial #23
216: ldc           #24
218: invokevirtual #25
221: iload         9
223: invokevirtual #41
226: ldc           #27
228: invokevirtual #25
231: ldc_w         #420
234: invokevirtual #41
237: ldc           #24
239: invokevirtual #25
242: invokevirtual #28
245: iload         9
247: ldc_w         #420
250: if_icmpne     257
253: iconst_1
254: goto          258
257: iconst_0
258: invokestatic  #29
261: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test287
Start line: 10927
End line: 0
Method source code: 
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream16 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.zip.ZipArchiveEntry zipArchiveEntry17 = zipArchiveInputStream14.getNextZipEntry();
        zipArchiveInputStream14.close();
        int int19 = zipArchiveInputStream14.getCount();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertNull(zipArchiveEntry17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #815
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: new           #33
125: dup
126: aload         12
128: invokespecial #34
131: astore        14
133: aload         12
135: invokevirtual #755
138: astore        15
140: aload         12
142: invokevirtual #520
145: aload         12
147: invokevirtual #255
150: istore        16
152: new           #22
155: dup
156: invokespecial #23
159: ldc           #24
161: invokevirtual #25
164: lload         4
166: invokevirtual #26
169: ldc           #27
171: invokevirtual #25
174: lconst_0
175: invokevirtual #26
178: ldc           #24
180: invokevirtual #25
183: invokevirtual #28
186: lload         4
188: lconst_0
189: lcmp
190: ifne          197
193: iconst_1
194: goto          198
197: iconst_0
198: invokestatic  #29
201: new           #22
204: dup
205: invokespecial #23
208: ldc           #24
210: invokevirtual #25
213: lload         6
215: invokevirtual #26
218: ldc           #27
220: invokevirtual #25
223: lconst_0
224: invokevirtual #26
227: ldc           #24
229: invokevirtual #25
232: invokevirtual #28
235: lload         6
237: lconst_0
238: lcmp
239: ifne          246
242: iconst_1
243: goto          247
246: iconst_0
247: invokestatic  #29
250: aload         10
252: invokestatic  #168
255: aload         11
257: invokestatic  #168
260: aload         13
262: invokestatic  #53
265: aload         15
267: invokestatic  #168
270: new           #22
273: dup
274: invokespecial #23
277: ldc           #24
279: invokevirtual #25
282: iload         16
284: invokevirtual #41
287: ldc           #27
289: invokevirtual #25
292: iconst_0
293: invokevirtual #41
296: ldc           #24
298: invokevirtual #25
301: invokevirtual #28
304: iload         16
306: ifne          313
309: iconst_1
310: goto          314
313: iconst_0
314: invokestatic  #29
317: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test288
Start line: 10956
End line: 0
Method source code: 
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.OutputStream outputStream27 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream27);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy31 = null;
        zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy31);
        boolean boolean33 = zipArchiveOutputStream30.isSeekable();
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode34 = null;
        zipArchiveOutputStream30.setUseZip64(zip64Mode34);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream36 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream30);
        zipArchiveOutputStream30.setUseLanguageEncodingFlag(false);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream39 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream30);
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream40 = archiveStreamFactory0.createArchiveOutputStream("jar", (java.io.OutputStream) jarArchiveOutputStream39);
        java.io.InputStream inputStream42 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream43 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream42);
        long long44 = jarArchiveInputStream43.getBytesRead();
        long long45 = jarArchiveInputStream43.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream46 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream43);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream47 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream43);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream50 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream47, (int) (byte) 53, (int) (short) -1);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream53 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream50, 40960, "jar");
        java.io.InputStream inputStream54 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream55 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream54);
        long long56 = jarArchiveInputStream55.getBytesRead();
        long long57 = jarArchiveInputStream55.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream58 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream55);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream59 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream55);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream60 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream59);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream64 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) cpioArchiveInputStream60, "070702", false, false);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry67 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("", (byte) 0);
        tarArchiveEntry67.setDevMinor((int) ' ');
        boolean boolean70 = cpioArchiveInputStream60.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry67);
        boolean boolean71 = tarArchiveInputStream50.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry67);
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream72 = archiveStreamFactory0.createArchiveInputStream("encryption", (java.io.InputStream) tarArchiveInputStream50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: encryption not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(archiveOutputStream40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #816
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #43
200: dup
201: aload         24
203: ldc           #44
205: invokespecial #45
208: astore        25
210: new           #182
213: dup
214: aload         24
216: invokespecial #183
219: astore        26
221: aconst_null
222: astore        27
224: aload         26
226: aload         27
228: invokevirtual #184
231: aload         26
233: invokevirtual #185
236: istore        28
238: aconst_null
239: astore        29
241: aload         26
243: aload         29
245: invokevirtual #224
248: new           #182
251: dup
252: aload         26
254: invokespecial #183
257: astore        30
259: aload         26
261: iconst_0
262: invokevirtual #285
265: new           #222
268: dup
269: aload         26
271: invokespecial #223
274: astore        31
276: aload_1
277: ldc           #44
279: aload         31
281: invokevirtual #49
284: astore        32
286: aconst_null
287: astore        33
289: new           #10
292: dup
293: aload         33
295: invokespecial #11
298: astore        34
300: aload         34
302: invokevirtual #12
305: lstore        35
307: aload         34
309: invokevirtual #12
312: lstore        37
314: new           #13
317: dup
318: aload         34
320: invokespecial #14
323: astore        39
325: new           #31
328: dup
329: aload         34
331: invokespecial #32
334: astore        40
336: new           #31
339: dup
340: aload         40
342: bipush        53
344: iconst_m1
345: invokespecial #108
348: astore        41
350: new           #31
353: dup
354: aload         41
356: ldc           #109
358: ldc           #44
360: invokespecial #110
363: astore        42
365: aconst_null
366: astore        43
368: new           #10
371: dup
372: aload         43
374: invokespecial #11
377: astore        44
379: aload         44
381: invokevirtual #12
384: lstore        45
386: aload         44
388: invokevirtual #12
391: lstore        47
393: new           #13
396: dup
397: aload         44
399: invokespecial #14
402: astore        49
404: new           #31
407: dup
408: aload         44
410: invokespecial #32
413: astore        50
415: new           #33
418: dup
419: aload         50
421: invokespecial #34
424: astore        51
426: new           #15
429: dup
430: aload         51
432: ldc           #111
434: iconst_0
435: iconst_0
436: invokespecial #17
439: astore        52
441: new           #112
444: dup
445: ldc           #61
447: iconst_0
448: invokespecial #113
451: astore        53
453: aload         53
455: bipush        32
457: invokevirtual #114
460: aload         51
462: aload         53
464: invokevirtual #115
467: istore        54
469: aload         41
471: aload         53
473: invokevirtual #116
476: istore        55
478: aload_1
479: ldc_w         #393
482: aload         41
484: invokevirtual #38
487: astore        56
489: ldc_w         #817
492: invokestatic  #20
495: goto          500
498: astore        56
500: new           #22
503: dup
504: invokespecial #23
507: ldc           #24
509: invokevirtual #25
512: lload         4
514: invokevirtual #26
517: ldc           #27
519: invokevirtual #25
522: lconst_0
523: invokevirtual #26
526: ldc           #24
528: invokevirtual #25
531: invokevirtual #28
534: lload         4
536: lconst_0
537: lcmp
538: ifne          545
541: iconst_1
542: goto          546
545: iconst_0
546: invokestatic  #29
549: new           #22
552: dup
553: invokespecial #23
556: ldc           #24
558: invokevirtual #25
561: lload         6
563: invokevirtual #26
566: ldc           #27
568: invokevirtual #25
571: lconst_0
572: invokevirtual #26
575: ldc           #24
577: invokevirtual #25
580: invokevirtual #28
583: lload         6
585: lconst_0
586: lcmp
587: ifne          594
590: iconst_1
591: goto          595
594: iconst_0
595: invokestatic  #29
598: aload         10
600: invokestatic  #168
603: aload         11
605: invokestatic  #168
608: aload         13
610: invokestatic  #53
613: new           #22
616: dup
617: invokespecial #23
620: ldc           #24
622: invokevirtual #25
625: lload         16
627: invokevirtual #26
630: ldc           #27
632: invokevirtual #25
635: lconst_0
636: invokevirtual #26
639: ldc           #24
641: invokevirtual #25
644: invokevirtual #28
647: lload         16
649: lconst_0
650: lcmp
651: ifne          658
654: iconst_1
655: goto          659
658: iconst_0
659: invokestatic  #29
662: new           #22
665: dup
666: invokespecial #23
669: ldc           #24
671: invokevirtual #25
674: lload         18
676: invokevirtual #26
679: ldc           #27
681: invokevirtual #25
684: lconst_0
685: invokevirtual #26
688: ldc           #24
690: invokevirtual #25
693: invokevirtual #28
696: lload         18
698: lconst_0
699: lcmp
700: ifne          707
703: iconst_1
704: goto          708
707: iconst_0
708: invokestatic  #29
711: aload         21
713: invokestatic  #168
716: aload         23
718: invokestatic  #53
721: new           #22
724: dup
725: invokespecial #23
728: ldc           #24
730: invokevirtual #25
733: iload         28
735: invokevirtual #69
738: ldc           #27
740: invokevirtual #25
743: iconst_0
744: invokevirtual #69
747: ldc           #24
749: invokevirtual #25
752: invokevirtual #28
755: iload         28
757: ifne          764
760: iconst_1
761: goto          765
764: iconst_0
765: invokestatic  #29
768: aload         32
770: invokestatic  #53
773: new           #22
776: dup
777: invokespecial #23
780: ldc           #24
782: invokevirtual #25
785: lload         35
787: invokevirtual #26
790: ldc           #27
792: invokevirtual #25
795: lconst_0
796: invokevirtual #26
799: ldc           #24
801: invokevirtual #25
804: invokevirtual #28
807: lload         35
809: lconst_0
810: lcmp
811: ifne          818
814: iconst_1
815: goto          819
818: iconst_0
819: invokestatic  #29
822: new           #22
825: dup
826: invokespecial #23
829: ldc           #24
831: invokevirtual #25
834: lload         37
836: invokevirtual #26
839: ldc           #27
841: invokevirtual #25
844: lconst_0
845: invokevirtual #26
848: ldc           #24
850: invokevirtual #25
853: invokevirtual #28
856: lload         37
858: lconst_0
859: lcmp
860: ifne          867
863: iconst_1
864: goto          868
867: iconst_0
868: invokestatic  #29
871: new           #22
874: dup
875: invokespecial #23
878: ldc           #24
880: invokevirtual #25
883: lload         45
885: invokevirtual #26
888: ldc           #27
890: invokevirtual #25
893: lconst_0
894: invokevirtual #26
897: ldc           #24
899: invokevirtual #25
902: invokevirtual #28
905: lload         45
907: lconst_0
908: lcmp
909: ifne          916
912: iconst_1
913: goto          917
916: iconst_0
917: invokestatic  #29
920: new           #22
923: dup
924: invokespecial #23
927: ldc           #24
929: invokevirtual #25
932: lload         47
934: invokevirtual #26
937: ldc           #27
939: invokevirtual #25
942: lconst_0
943: invokevirtual #26
946: ldc           #24
948: invokevirtual #25
951: invokevirtual #28
954: lload         47
956: lconst_0
957: lcmp
958: ifne          965
961: iconst_1
962: goto          966
965: iconst_0
966: invokestatic  #29
969: new           #22
972: dup
973: invokespecial #23
976: ldc           #24
978: invokevirtual #25
981: iload         54
983: invokevirtual #69
986: ldc           #27
988: invokevirtual #25
991: iconst_1
992: invokevirtual #69
995: ldc           #24
997: invokevirtual #25
1000: invokevirtual #28
1003: iload         54
1005: iconst_1
1006: if_icmpne     1013
1009: iconst_1
1010: goto          1014
1013: iconst_0
1014: invokestatic  #29
1017: new           #22
1020: dup
1021: invokespecial #23
1024: ldc           #24
1026: invokevirtual #25
1029: iload         55
1031: invokevirtual #69
1034: ldc           #27
1036: invokevirtual #25
1039: iconst_1
1040: invokevirtual #69
1043: ldc           #24
1045: invokevirtual #25
1048: invokevirtual #28
1051: iload         55
1053: iconst_1
1054: if_icmpne     1061
1057: iconst_1
1058: goto          1062
1061: iconst_0
1062: invokestatic  #29
1065: return
Exception table:
from    to  target type
478   495   498   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test289
Start line: 11039
End line: 0
Method source code: 
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        java.io.OutputStream outputStream20 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream20, "jar");
        tarArchiveOutputStream22.count(0L);
        int int25 = tarArchiveOutputStream22.getCount();
        tarArchiveOutputStream22.setBigNumberMode(2);
        int int28 = tarArchiveOutputStream22.getRecordSize();
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream29 = archiveStreamFactory0.createArchiveOutputStream("", (java.io.OutputStream) tarArchiveOutputStream22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver:  not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 512 + "'", int28 == 512);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #818
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aconst_null
137: astore        16
139: new           #43
142: dup
143: aload         16
145: ldc           #44
147: invokespecial #45
150: astore        17
152: aload         17
154: lconst_0
155: invokevirtual #46
158: aload         17
160: invokevirtual #60
163: istore        18
165: aload         17
167: iconst_2
168: invokevirtual #281
171: aload         17
173: invokevirtual #247
176: istore        19
178: aload_1
179: ldc           #61
181: aload         17
183: invokevirtual #49
186: astore        20
188: ldc           #204
190: invokestatic  #20
193: goto          198
196: astore        20
198: new           #22
201: dup
202: invokespecial #23
205: ldc           #24
207: invokevirtual #25
210: lload         4
212: invokevirtual #26
215: ldc           #27
217: invokevirtual #25
220: lconst_0
221: invokevirtual #26
224: ldc           #24
226: invokevirtual #25
229: invokevirtual #28
232: lload         4
234: lconst_0
235: lcmp
236: ifne          243
239: iconst_1
240: goto          244
243: iconst_0
244: invokestatic  #29
247: aload         6
249: invokestatic  #53
252: new           #22
255: dup
256: invokespecial #23
259: ldc           #24
261: invokevirtual #25
264: lload         9
266: invokevirtual #26
269: ldc           #27
271: invokevirtual #25
274: lconst_0
275: invokevirtual #26
278: ldc           #24
280: invokevirtual #25
283: invokevirtual #28
286: lload         9
288: lconst_0
289: lcmp
290: ifne          297
293: iconst_1
294: goto          298
297: iconst_0
298: invokestatic  #29
301: new           #22
304: dup
305: invokespecial #23
308: ldc           #24
310: invokevirtual #25
313: lload         11
315: invokevirtual #26
318: ldc           #27
320: invokevirtual #25
323: lconst_0
324: invokevirtual #26
327: ldc           #24
329: invokevirtual #25
332: invokevirtual #28
335: lload         11
337: lconst_0
338: lcmp
339: ifne          346
342: iconst_1
343: goto          347
346: iconst_0
347: invokestatic  #29
350: aload         15
352: invokestatic  #53
355: new           #22
358: dup
359: invokespecial #23
362: ldc           #24
364: invokevirtual #25
367: iload         18
369: invokevirtual #41
372: ldc           #27
374: invokevirtual #25
377: iconst_0
378: invokevirtual #41
381: ldc           #24
383: invokevirtual #25
386: invokevirtual #28
389: iload         18
391: ifne          398
394: iconst_1
395: goto          399
398: iconst_0
399: invokestatic  #29
402: new           #22
405: dup
406: invokespecial #23
409: ldc           #24
411: invokevirtual #25
414: iload         19
416: invokevirtual #41
419: ldc           #27
421: invokevirtual #25
424: sipush        512
427: invokevirtual #41
430: ldc           #24
432: invokevirtual #25
435: invokevirtual #28
438: iload         19
440: sipush        512
443: if_icmpne     450
446: iconst_1
447: goto          451
450: iconst_0
451: invokestatic  #29
454: return
Exception table:
from    to  target type
178   193   196   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test290
Start line: 11080
End line: 0
Method source code: 
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        java.io.InputStream inputStream20 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream21 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream20);
        long long22 = jarArchiveInputStream21.getBytesRead();
        long long23 = jarArchiveInputStream21.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream24 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream21);
        arArchiveInputStream24.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream26 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream24);
        tarArchiveInputStream26.mark((int) (byte) 53);
        boolean boolean29 = tarArchiveInputStream26.markSupported();
        long long31 = tarArchiveInputStream26.skip((-1L));
        tarArchiveInputStream26.close();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream33 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) tarArchiveInputStream26);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry34 = jarArchiveInputStream33.getNextEntry();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream35 = archiveStreamFactory0.createArchiveInputStream("always", (java.io.InputStream) jarArchiveInputStream33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: always not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNull(archiveEntry34);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #819
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aconst_null
137: astore        16
139: new           #10
142: dup
143: aload         16
145: invokespecial #11
148: astore        17
150: aload         17
152: invokevirtual #12
155: lstore        18
157: aload         17
159: invokevirtual #12
162: lstore        20
164: new           #13
167: dup
168: aload         17
170: invokespecial #14
173: astore        22
175: aload         22
177: invokevirtual #140
180: new           #31
183: dup
184: aload         22
186: invokespecial #32
189: astore        23
191: aload         23
193: bipush        53
195: invokevirtual #178
198: aload         23
200: invokevirtual #513
203: istore        24
205: aload         23
207: ldc2_w        #297
210: invokevirtual #514
213: lstore        25
215: aload         23
217: invokevirtual #363
220: new           #10
223: dup
224: aload         23
226: invokespecial #11
229: astore        27
231: aload         27
233: invokevirtual #166
236: astore        28
238: aload_1
239: ldc           #79
241: aload         27
243: invokevirtual #38
246: astore        29
248: ldc           #80
250: invokestatic  #20
253: goto          258
256: astore        29
258: new           #22
261: dup
262: invokespecial #23
265: ldc           #24
267: invokevirtual #25
270: lload         4
272: invokevirtual #26
275: ldc           #27
277: invokevirtual #25
280: lconst_0
281: invokevirtual #26
284: ldc           #24
286: invokevirtual #25
289: invokevirtual #28
292: lload         4
294: lconst_0
295: lcmp
296: ifne          303
299: iconst_1
300: goto          304
303: iconst_0
304: invokestatic  #29
307: aload         6
309: invokestatic  #53
312: new           #22
315: dup
316: invokespecial #23
319: ldc           #24
321: invokevirtual #25
324: lload         9
326: invokevirtual #26
329: ldc           #27
331: invokevirtual #25
334: lconst_0
335: invokevirtual #26
338: ldc           #24
340: invokevirtual #25
343: invokevirtual #28
346: lload         9
348: lconst_0
349: lcmp
350: ifne          357
353: iconst_1
354: goto          358
357: iconst_0
358: invokestatic  #29
361: new           #22
364: dup
365: invokespecial #23
368: ldc           #24
370: invokevirtual #25
373: lload         11
375: invokevirtual #26
378: ldc           #27
380: invokevirtual #25
383: lconst_0
384: invokevirtual #26
387: ldc           #24
389: invokevirtual #25
392: invokevirtual #28
395: lload         11
397: lconst_0
398: lcmp
399: ifne          406
402: iconst_1
403: goto          407
406: iconst_0
407: invokestatic  #29
410: aload         15
412: invokestatic  #53
415: new           #22
418: dup
419: invokespecial #23
422: ldc           #24
424: invokevirtual #25
427: lload         18
429: invokevirtual #26
432: ldc           #27
434: invokevirtual #25
437: lconst_0
438: invokevirtual #26
441: ldc           #24
443: invokevirtual #25
446: invokevirtual #28
449: lload         18
451: lconst_0
452: lcmp
453: ifne          460
456: iconst_1
457: goto          461
460: iconst_0
461: invokestatic  #29
464: new           #22
467: dup
468: invokespecial #23
471: ldc           #24
473: invokevirtual #25
476: lload         20
478: invokevirtual #26
481: ldc           #27
483: invokevirtual #25
486: lconst_0
487: invokevirtual #26
490: ldc           #24
492: invokevirtual #25
495: invokevirtual #28
498: lload         20
500: lconst_0
501: lcmp
502: ifne          509
505: iconst_1
506: goto          510
509: iconst_0
510: invokestatic  #29
513: new           #22
516: dup
517: invokespecial #23
520: ldc           #24
522: invokevirtual #25
525: iload         24
527: invokevirtual #69
530: ldc           #27
532: invokevirtual #25
535: iconst_0
536: invokevirtual #69
539: ldc           #24
541: invokevirtual #25
544: invokevirtual #28
547: iload         24
549: ifne          556
552: iconst_1
553: goto          557
556: iconst_0
557: invokestatic  #29
560: new           #22
563: dup
564: invokespecial #23
567: ldc           #24
569: invokevirtual #25
572: lload         25
574: invokevirtual #26
577: ldc           #27
579: invokevirtual #25
582: lconst_0
583: invokevirtual #26
586: ldc           #24
588: invokevirtual #25
591: invokevirtual #28
594: lload         25
596: lconst_0
597: lcmp
598: ifne          605
601: iconst_1
602: goto          606
605: iconst_0
606: invokestatic  #29
609: aload         28
611: invokestatic  #168
614: return
Exception table:
from    to  target type
238   253   256   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test291
Start line: 11131
End line: 0
Method source code: 
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        zipArchiveOutputStream9.setLevel((int) (short) 4);
        zipArchiveOutputStream9.setMethod((int) (byte) 88);
        zipArchiveOutputStream9.setUseLanguageEncodingFlag(true);
        try {
            zipArchiveOutputStream9.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No current entry to close");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #820
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: aload         7
79: iconst_4
80: invokevirtual #291
83: aload         7
85: bipush        88
87: invokevirtual #339
90: aload         7
92: iconst_1
93: invokevirtual #285
96: aload         7
98: invokevirtual #821
101: ldc           #83
103: invokestatic  #20
106: goto          111
109: astore        8
111: new           #22
114: dup
115: invokespecial #23
118: ldc           #24
120: invokevirtual #25
123: lload         4
125: invokevirtual #26
128: ldc           #27
130: invokevirtual #25
133: lconst_0
134: invokevirtual #26
137: ldc           #24
139: invokevirtual #25
142: invokevirtual #28
145: lload         4
147: lconst_0
148: lcmp
149: ifne          156
152: iconst_1
153: goto          157
156: iconst_0
157: invokestatic  #29
160: aload         6
162: invokestatic  #53
165: return
Exception table:
from    to  target type
96   106   109   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test292
Start line: 11156
End line: 0
Method source code: 
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream19 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) archiveInputStream15, "encryption", true, true);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry20 = zipArchiveInputStream19.getNextEntry();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong22 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray23 = zipLong22.getBytes();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong25 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray26 = zipLong25.getBytes();
        boolean boolean28 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray23, byteArray26, true);
        int int31 = zipArchiveInputStream19.read(byteArray23, (int) (byte) 76, (int) 'a');
        try {
            zipArchiveInputStream19.reset();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: mark/reset not supported");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertNull(archiveEntry20);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #822
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: new           #15
125: dup
126: aload         13
128: ldc_w         #393
131: iconst_1
132: iconst_1
133: invokespecial #17
136: astore        14
138: aload         14
140: invokevirtual #756
143: astore        15
145: new           #73
148: dup
149: lconst_0
150: invokespecial #74
153: astore        16
155: aload         16
157: invokevirtual #75
160: astore        17
162: new           #73
165: dup
166: lconst_0
167: invokespecial #74
170: astore        18
172: aload         18
174: invokevirtual #75
177: astore        19
179: aload         17
181: aload         19
183: iconst_1
184: invokestatic  #177
187: istore        20
189: aload         14
191: aload         17
193: bipush        76
195: bipush        97
197: invokevirtual #757
200: istore        21
202: aload         14
204: invokevirtual #823
207: ldc_w         #775
210: invokestatic  #20
213: goto          218
216: astore        22
218: new           #22
221: dup
222: invokespecial #23
225: ldc           #24
227: invokevirtual #25
230: lload         4
232: invokevirtual #26
235: ldc           #27
237: invokevirtual #25
240: lconst_0
241: invokevirtual #26
244: ldc           #24
246: invokevirtual #25
249: invokevirtual #28
252: lload         4
254: lconst_0
255: lcmp
256: ifne          263
259: iconst_1
260: goto          264
263: iconst_0
264: invokestatic  #29
267: new           #22
270: dup
271: invokespecial #23
274: ldc           #24
276: invokevirtual #25
279: lload         6
281: invokevirtual #26
284: ldc           #27
286: invokevirtual #25
289: lconst_0
290: invokevirtual #26
293: ldc           #24
295: invokevirtual #25
298: invokevirtual #28
301: lload         6
303: lconst_0
304: lcmp
305: ifne          312
308: iconst_1
309: goto          313
312: iconst_0
313: invokestatic  #29
316: aload         10
318: invokestatic  #168
321: aload         11
323: invokestatic  #168
326: aload         13
328: invokestatic  #53
331: aload         15
333: invokestatic  #168
336: aload         17
338: invokestatic  #53
341: aload         17
343: invokestatic  #66
346: ldc           #77
348: invokestatic  #68
351: aload         19
353: invokestatic  #53
356: aload         19
358: invokestatic  #66
361: ldc           #77
363: invokestatic  #68
366: new           #22
369: dup
370: invokespecial #23
373: ldc           #24
375: invokevirtual #25
378: iload         20
380: invokevirtual #69
383: ldc           #27
385: invokevirtual #25
388: iconst_1
389: invokevirtual #69
392: ldc           #24
394: invokevirtual #25
397: invokevirtual #28
400: iload         20
402: iconst_1
403: if_icmpne     410
406: iconst_1
407: goto          411
410: iconst_0
411: invokestatic  #29
414: new           #22
417: dup
418: invokespecial #23
421: ldc           #24
423: invokevirtual #25
426: iload         21
428: invokevirtual #41
431: ldc           #27
433: invokevirtual #25
436: iconst_m1
437: invokevirtual #41
440: ldc           #24
442: invokevirtual #25
445: invokevirtual #28
448: iload         21
450: iconst_m1
451: if_icmpne     458
454: iconst_1
455: goto          459
458: iconst_0
459: invokestatic  #29
462: return
Exception table:
from    to  target type
202   213   216   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test293
Start line: 11201
End line: 0
Method source code: 
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        jarArchiveInputStream18.close();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = jarArchiveInputStream18.getNextEntry();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream24 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream25 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) jarArchiveInputStream18);
        java.io.OutputStream outputStream27 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream29 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream27, "jar");
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream30 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream(outputStream27);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream.UnicodeExtraFieldPolicy unicodeExtraFieldPolicy31 = null;
        zipArchiveOutputStream30.setCreateUnicodeExtraFields(unicodeExtraFieldPolicy31);
        boolean boolean33 = zipArchiveOutputStream30.isSeekable();
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode34 = null;
        zipArchiveOutputStream30.setUseZip64(zip64Mode34);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream36 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream30);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream40 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream36, (int) (byte) 88, 40960, "070702");
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream41 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream36);
        zipArchiveOutputStream36.count((long) (byte) 103);
        zipArchiveOutputStream36.count((int) (byte) 54);
        zipArchiveOutputStream36.flush();
        java.lang.String str47 = zipArchiveOutputStream36.getEncoding();
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream48 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream36);
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream49 = archiveStreamFactory0.createArchiveOutputStream("\000\ufffd\000\000", (java.io.OutputStream) jarArchiveOutputStream48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: ???? not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertNotNull(archiveInputStream25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "UTF8" + "'", str47, "UTF8");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #824
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: aload         15
163: invokevirtual #165
166: aload         15
168: invokevirtual #166
171: astore        21
173: new           #10
176: dup
177: aload         15
179: invokespecial #11
182: astore        22
184: aload_1
185: ldc           #44
187: aload         15
189: invokevirtual #38
192: astore        23
194: aconst_null
195: astore        24
197: new           #43
200: dup
201: aload         24
203: ldc           #44
205: invokespecial #45
208: astore        25
210: new           #182
213: dup
214: aload         24
216: invokespecial #183
219: astore        26
221: aconst_null
222: astore        27
224: aload         26
226: aload         27
228: invokevirtual #184
231: aload         26
233: invokevirtual #185
236: istore        28
238: aconst_null
239: astore        29
241: aload         26
243: aload         29
245: invokevirtual #224
248: new           #182
251: dup
252: aload         26
254: invokespecial #183
257: astore        30
259: new           #43
262: dup
263: aload         30
265: bipush        88
267: ldc           #109
269: ldc           #111
271: invokespecial #388
274: astore        31
276: new           #143
279: dup
280: aload         30
282: invokespecial #144
285: astore        32
287: aload         30
289: ldc2_w        #825
292: invokevirtual #387
295: aload         30
297: bipush        54
299: invokevirtual #311
302: aload         30
304: invokevirtual #313
307: aload         30
309: invokevirtual #310
312: astore        33
314: new           #222
317: dup
318: aload         30
320: invokespecial #223
323: astore        34
325: aload_1
326: ldc_w         #353
329: aload         34
331: invokevirtual #49
334: astore        35
336: ldc           #118
338: invokestatic  #20
341: goto          346
344: astore        35
346: new           #22
349: dup
350: invokespecial #23
353: ldc           #24
355: invokevirtual #25
358: lload         4
360: invokevirtual #26
363: ldc           #27
365: invokevirtual #25
368: lconst_0
369: invokevirtual #26
372: ldc           #24
374: invokevirtual #25
377: invokevirtual #28
380: lload         4
382: lconst_0
383: lcmp
384: ifne          391
387: iconst_1
388: goto          392
391: iconst_0
392: invokestatic  #29
395: new           #22
398: dup
399: invokespecial #23
402: ldc           #24
404: invokevirtual #25
407: lload         6
409: invokevirtual #26
412: ldc           #27
414: invokevirtual #25
417: lconst_0
418: invokevirtual #26
421: ldc           #24
423: invokevirtual #25
426: invokevirtual #28
429: lload         6
431: lconst_0
432: lcmp
433: ifne          440
436: iconst_1
437: goto          441
440: iconst_0
441: invokestatic  #29
444: aload         10
446: invokestatic  #168
449: aload         11
451: invokestatic  #168
454: aload         13
456: invokestatic  #53
459: new           #22
462: dup
463: invokespecial #23
466: ldc           #24
468: invokevirtual #25
471: lload         16
473: invokevirtual #26
476: ldc           #27
478: invokevirtual #25
481: lconst_0
482: invokevirtual #26
485: ldc           #24
487: invokevirtual #25
490: invokevirtual #28
493: lload         16
495: lconst_0
496: lcmp
497: ifne          504
500: iconst_1
501: goto          505
504: iconst_0
505: invokestatic  #29
508: new           #22
511: dup
512: invokespecial #23
515: ldc           #24
517: invokevirtual #25
520: lload         18
522: invokevirtual #26
525: ldc           #27
527: invokevirtual #25
530: lconst_0
531: invokevirtual #26
534: ldc           #24
536: invokevirtual #25
539: invokevirtual #28
542: lload         18
544: lconst_0
545: lcmp
546: ifne          553
549: iconst_1
550: goto          554
553: iconst_0
554: invokestatic  #29
557: aload         21
559: invokestatic  #168
562: aload         23
564: invokestatic  #53
567: new           #22
570: dup
571: invokespecial #23
574: ldc           #24
576: invokevirtual #25
579: iload         28
581: invokevirtual #69
584: ldc           #27
586: invokevirtual #25
589: iconst_0
590: invokevirtual #69
593: ldc           #24
595: invokevirtual #25
598: invokevirtual #28
601: iload         28
603: ifne          610
606: iconst_1
607: goto          611
610: iconst_0
611: invokestatic  #29
614: new           #22
617: dup
618: invokespecial #23
621: ldc           #24
623: invokevirtual #25
626: aload         33
628: invokevirtual #25
631: ldc_w         #317
634: invokevirtual #25
637: invokevirtual #28
640: aload         33
642: ldc           #85
644: invokestatic  #154
647: return
Exception table:
from    to  target type
325   341   344   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test294
Start line: 11262
End line: 0
Method source code: 
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        zipArchiveOutputStream9.setLevel((int) (short) 4);
        zipArchiveOutputStream9.setMethod((int) (byte) 88);
        zipArchiveOutputStream9.setUseLanguageEncodingFlag(true);
        org.apache.commons.compress.archivers.zip.Zip64Mode zip64Mode16 = null;
        zipArchiveOutputStream9.setUseZip64(zip64Mode16);
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream19 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9, (int) (short) 8);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #827
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: aload         7
79: iconst_4
80: invokevirtual #291
83: aload         7
85: bipush        88
87: invokevirtual #339
90: aload         7
92: iconst_1
93: invokevirtual #285
96: aconst_null
97: astore        8
99: aload         7
101: aload         8
103: invokevirtual #224
106: new           #43
109: dup
110: aload         7
112: bipush        8
114: invokespecial #340
117: astore        9
119: new           #22
122: dup
123: invokespecial #23
126: ldc           #24
128: invokevirtual #25
131: lload         4
133: invokevirtual #26
136: ldc           #27
138: invokevirtual #25
141: lconst_0
142: invokevirtual #26
145: ldc           #24
147: invokevirtual #25
150: invokevirtual #28
153: lload         4
155: lconst_0
156: lcmp
157: ifne          164
160: iconst_1
161: goto          165
164: iconst_0
165: invokestatic  #29
168: aload         6
170: invokestatic  #53
173: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test295
Start line: 11283
End line: 0
Method source code: 
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        tarArchiveOutputStream10.setBigNumberMode(3);
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream14 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream10, "org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!!");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: org.apache.commons.compress.archivers.dump.DumpArchiveException: TRAILER!!!");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #828
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: aload         8
84: iconst_3
85: invokevirtual #281
88: new           #43
91: dup
92: aload         8
94: ldc_w         #485
97: invokespecial #45
100: astore        9
102: ldc_w         #829
105: invokestatic  #20
108: goto          113
111: astore        9
113: new           #22
116: dup
117: invokespecial #23
120: ldc           #24
122: invokevirtual #25
125: lload         4
127: invokevirtual #26
130: ldc           #27
132: invokevirtual #25
135: lconst_0
136: invokevirtual #26
139: ldc           #24
141: invokevirtual #25
144: invokevirtual #28
147: lload         4
149: lconst_0
150: lcmp
151: ifne          158
154: iconst_1
155: goto          159
158: iconst_0
159: invokestatic  #29
162: aload         6
164: invokestatic  #53
167: new           #22
170: dup
171: invokespecial #23
174: ldc           #24
176: invokevirtual #25
179: iload         7
181: invokevirtual #41
184: ldc           #27
186: invokevirtual #25
189: iconst_0
190: invokevirtual #41
193: ldc           #24
195: invokevirtual #25
198: invokevirtual #28
201: iload         7
203: ifne          210
206: iconst_1
207: goto          211
210: iconst_0
211: invokestatic  #29
214: return
Exception table:
from    to  target type
88   108   111   Class java/nio/charset/IllegalCharsetNameException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test296
Start line: 11308
End line: 0
Method source code: 
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        long long10 = tarArchiveOutputStream4.getBytesWritten();
        java.io.File file11 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry13 = tarArchiveOutputStream4.createArchiveEntry(file11, "org.apache.commons.compress.archivers.ArchiveException: 070707");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #830
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: aload_3
73: invokevirtual #47
76: lstore        8
78: aconst_null
79: astore        10
81: aload_3
82: aload         10
84: ldc_w         #713
87: invokevirtual #86
90: astore        11
92: ldc           #51
94: invokestatic  #20
97: goto          102
100: astore        11
102: new           #22
105: dup
106: invokespecial #23
109: ldc           #24
111: invokevirtual #25
114: lload         4
116: invokevirtual #26
119: ldc           #27
121: invokevirtual #25
124: lconst_0
125: invokevirtual #26
128: ldc           #24
130: invokevirtual #25
133: invokevirtual #28
136: lload         4
138: lconst_0
139: lcmp
140: ifne          147
143: iconst_1
144: goto          148
147: iconst_0
148: invokestatic  #29
151: aload         6
153: invokestatic  #53
156: new           #22
159: dup
160: invokespecial #23
163: ldc           #24
165: invokevirtual #25
168: iload         7
170: invokevirtual #41
173: ldc           #27
175: invokevirtual #25
178: iconst_0
179: invokevirtual #41
182: ldc           #24
184: invokevirtual #25
187: invokevirtual #28
190: iload         7
192: ifne          199
195: iconst_1
196: goto          200
199: iconst_0
200: invokestatic  #29
203: new           #22
206: dup
207: invokespecial #23
210: ldc           #24
212: invokevirtual #25
215: lload         8
217: invokevirtual #26
220: ldc           #27
222: invokevirtual #25
225: lconst_0
226: invokevirtual #26
229: ldc           #24
231: invokevirtual #25
234: invokevirtual #28
237: lload         8
239: lconst_0
240: lcmp
241: ifne          248
244: iconst_1
245: goto          249
248: iconst_0
249: invokestatic  #29
252: return
Exception table:
from    to  target type
81    97   100   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test297
Start line: 11334
End line: 0
Method source code: 
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry23 = tarArchiveInputStream22.getNextEntry();
        long long24 = tarArchiveInputStream22.getBytesRead();
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream25 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream22);
        int int26 = zipArchiveInputStream25.available();
        int int27 = zipArchiveInputStream25.getCount();
        int int28 = zipArchiveInputStream25.available();
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream29 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream((java.io.InputStream) zipArchiveInputStream25);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream30 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) zipArchiveInputStream25);
        long long32 = cpioArchiveInputStream30.skip(10L);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream33 = archiveStreamFactory0.createArchiveInputStream("cpio", (java.io.InputStream) cpioArchiveInputStream30);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNull(archiveEntry23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream33);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #831
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: new           #31
164: dup
165: aload         15
167: invokespecial #32
170: astore        21
172: aload         21
174: invokevirtual #199
177: astore        22
179: aload         21
181: invokevirtual #573
184: lstore        23
186: new           #15
189: dup
190: aload         21
192: invokespecial #300
195: astore        25
197: aload         25
199: invokevirtual #832
202: istore        26
204: aload         25
206: invokevirtual #255
209: istore        27
211: aload         25
213: invokevirtual #832
216: istore        28
218: new           #10
221: dup
222: aload         25
224: invokespecial #11
227: astore        29
229: new           #33
232: dup
233: aload         25
235: invokespecial #34
238: astore        30
240: aload         30
242: ldc2_w        #833
245: invokevirtual #162
248: lstore        31
250: aload_1
251: ldc_w         #273
254: aload         30
256: invokevirtual #38
259: astore        33
261: new           #22
264: dup
265: invokespecial #23
268: ldc           #24
270: invokevirtual #25
273: lload         4
275: invokevirtual #26
278: ldc           #27
280: invokevirtual #25
283: lconst_0
284: invokevirtual #26
287: ldc           #24
289: invokevirtual #25
292: invokevirtual #28
295: lload         4
297: lconst_0
298: lcmp
299: ifne          306
302: iconst_1
303: goto          307
306: iconst_0
307: invokestatic  #29
310: new           #22
313: dup
314: invokespecial #23
317: ldc           #24
319: invokevirtual #25
322: lload         6
324: invokevirtual #26
327: ldc           #27
329: invokevirtual #25
332: lconst_0
333: invokevirtual #26
336: ldc           #24
338: invokevirtual #25
341: invokevirtual #28
344: lload         6
346: lconst_0
347: lcmp
348: ifne          355
351: iconst_1
352: goto          356
355: iconst_0
356: invokestatic  #29
359: aload         10
361: invokestatic  #168
364: aload         11
366: invokestatic  #168
369: aload         13
371: invokestatic  #53
374: new           #22
377: dup
378: invokespecial #23
381: ldc           #24
383: invokevirtual #25
386: lload         16
388: invokevirtual #26
391: ldc           #27
393: invokevirtual #25
396: lconst_0
397: invokevirtual #26
400: ldc           #24
402: invokevirtual #25
405: invokevirtual #28
408: lload         16
410: lconst_0
411: lcmp
412: ifne          419
415: iconst_1
416: goto          420
419: iconst_0
420: invokestatic  #29
423: new           #22
426: dup
427: invokespecial #23
430: ldc           #24
432: invokevirtual #25
435: lload         18
437: invokevirtual #26
440: ldc           #27
442: invokevirtual #25
445: lconst_0
446: invokevirtual #26
449: ldc           #24
451: invokevirtual #25
454: invokevirtual #28
457: lload         18
459: lconst_0
460: lcmp
461: ifne          468
464: iconst_1
465: goto          469
468: iconst_0
469: invokestatic  #29
472: aload         22
474: invokestatic  #168
477: new           #22
480: dup
481: invokespecial #23
484: ldc           #24
486: invokevirtual #25
489: lload         23
491: invokevirtual #26
494: ldc           #27
496: invokevirtual #25
499: lconst_0
500: invokevirtual #26
503: ldc           #24
505: invokevirtual #25
508: invokevirtual #28
511: lload         23
513: lconst_0
514: lcmp
515: ifne          522
518: iconst_1
519: goto          523
522: iconst_0
523: invokestatic  #29
526: new           #22
529: dup
530: invokespecial #23
533: ldc           #24
535: invokevirtual #25
538: iload         26
540: invokevirtual #41
543: ldc           #27
545: invokevirtual #25
548: iconst_0
549: invokevirtual #41
552: ldc           #24
554: invokevirtual #25
557: invokevirtual #28
560: iload         26
562: ifne          569
565: iconst_1
566: goto          570
569: iconst_0
570: invokestatic  #29
573: new           #22
576: dup
577: invokespecial #23
580: ldc           #24
582: invokevirtual #25
585: iload         27
587: invokevirtual #41
590: ldc           #27
592: invokevirtual #25
595: iconst_0
596: invokevirtual #41
599: ldc           #24
601: invokevirtual #25
604: invokevirtual #28
607: iload         27
609: ifne          616
612: iconst_1
613: goto          617
616: iconst_0
617: invokestatic  #29
620: new           #22
623: dup
624: invokespecial #23
627: ldc           #24
629: invokevirtual #25
632: iload         28
634: invokevirtual #41
637: ldc           #27
639: invokevirtual #25
642: iconst_0
643: invokevirtual #41
646: ldc           #24
648: invokevirtual #25
651: invokevirtual #28
654: iload         28
656: ifne          663
659: iconst_1
660: goto          664
663: iconst_0
664: invokestatic  #29
667: new           #22
670: dup
671: invokespecial #23
674: ldc           #24
676: invokevirtual #25
679: lload         31
681: invokevirtual #26
684: ldc           #27
686: invokevirtual #25
689: lconst_0
690: invokevirtual #26
693: ldc           #24
695: invokevirtual #25
698: invokevirtual #28
701: lload         31
703: lconst_0
704: lcmp
705: ifne          712
708: iconst_1
709: goto          713
712: iconst_0
713: invokestatic  #29
716: aload         33
718: invokestatic  #53
721: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test298
Start line: 11382
End line: 0
Method source code: 
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        long long19 = archiveInputStream18.getBytesRead();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #835
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aload         15
138: invokevirtual #836
141: lstore        16
143: new           #22
146: dup
147: invokespecial #23
150: ldc           #24
152: invokevirtual #25
155: lload         4
157: invokevirtual #26
160: ldc           #27
162: invokevirtual #25
165: lconst_0
166: invokevirtual #26
169: ldc           #24
171: invokevirtual #25
174: invokevirtual #28
177: lload         4
179: lconst_0
180: lcmp
181: ifne          188
184: iconst_1
185: goto          189
188: iconst_0
189: invokestatic  #29
192: aload         6
194: invokestatic  #53
197: new           #22
200: dup
201: invokespecial #23
204: ldc           #24
206: invokevirtual #25
209: lload         9
211: invokevirtual #26
214: ldc           #27
216: invokevirtual #25
219: lconst_0
220: invokevirtual #26
223: ldc           #24
225: invokevirtual #25
228: invokevirtual #28
231: lload         9
233: lconst_0
234: lcmp
235: ifne          242
238: iconst_1
239: goto          243
242: iconst_0
243: invokestatic  #29
246: new           #22
249: dup
250: invokespecial #23
253: ldc           #24
255: invokevirtual #25
258: lload         11
260: invokevirtual #26
263: ldc           #27
265: invokevirtual #25
268: lconst_0
269: invokevirtual #26
272: ldc           #24
274: invokevirtual #25
277: invokevirtual #28
280: lload         11
282: lconst_0
283: lcmp
284: ifne          291
287: iconst_1
288: goto          292
291: iconst_0
292: invokestatic  #29
295: aload         15
297: invokestatic  #53
300: new           #22
303: dup
304: invokespecial #23
307: ldc           #24
309: invokevirtual #25
312: lload         16
314: invokevirtual #26
317: ldc           #27
319: invokevirtual #25
322: lconst_0
323: invokevirtual #26
326: ldc           #24
328: invokevirtual #25
331: invokevirtual #28
334: lload         16
336: lconst_0
337: lcmp
338: ifne          345
341: iconst_1
342: goto          346
345: iconst_0
346: invokestatic  #29
349: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test299
Start line: 11410
End line: 0
Method source code: 
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        tarArchiveOutputStream4.setLongFileMode((int) '4');
        try {
            tarArchiveOutputStream4.flush();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #837
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: bipush        52
69: invokevirtual #195
72: aload_3
73: invokevirtual #248
76: ldc           #51
78: invokestatic  #20
81: goto          86
84: astore        7
86: new           #22
89: dup
90: invokespecial #23
93: ldc           #24
95: invokevirtual #25
98: lload         4
100: invokevirtual #26
103: ldc           #27
105: invokevirtual #25
108: lconst_0
109: invokevirtual #26
112: ldc           #24
114: invokevirtual #25
117: invokevirtual #28
120: lload         4
122: lconst_0
123: lcmp
124: ifne          131
127: iconst_1
128: goto          132
131: iconst_0
132: invokestatic  #29
135: aload         6
137: invokestatic  #53
140: return
Exception table:
from    to  target type
72    81    84   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test300
Start line: 11432
End line: 0
Method source code: 
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        int int11 = tarArchiveOutputStream4.getCount();
        try {
            tarArchiveOutputStream4.finish();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #838
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload_3
83: invokevirtual #60
86: istore        10
88: aload_3
89: invokevirtual #250
92: ldc           #51
94: invokestatic  #20
97: goto          102
100: astore        11
102: new           #22
105: dup
106: invokespecial #23
109: ldc           #24
111: invokevirtual #25
114: lload         4
116: invokevirtual #26
119: ldc           #27
121: invokevirtual #25
124: lconst_0
125: invokevirtual #26
128: ldc           #24
130: invokevirtual #25
133: invokevirtual #28
136: lload         4
138: lconst_0
139: lcmp
140: ifne          147
143: iconst_1
144: goto          148
147: iconst_0
148: invokestatic  #29
151: aload         6
153: invokestatic  #53
156: new           #22
159: dup
160: invokespecial #23
163: ldc           #24
165: invokevirtual #25
168: lload         7
170: invokevirtual #26
173: ldc           #27
175: invokevirtual #25
178: lconst_0
179: invokevirtual #26
182: ldc           #24
184: invokevirtual #25
187: invokevirtual #28
190: lload         7
192: lconst_0
193: lcmp
194: ifne          201
197: iconst_1
198: goto          202
201: iconst_0
202: invokestatic  #29
205: new           #22
208: dup
209: invokespecial #23
212: ldc           #24
214: invokevirtual #25
217: iload         10
219: invokevirtual #41
222: ldc           #27
224: invokevirtual #25
227: iconst_0
228: invokevirtual #41
231: ldc           #24
233: invokevirtual #25
236: invokevirtual #28
239: iload         10
241: ifne          248
244: iconst_1
245: goto          249
248: iconst_0
249: invokestatic  #29
252: return
Exception table:
from    to  target type
88    97   100   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test301
Start line: 11458
End line: 0
Method source code: 
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        zipArchiveOutputStream9.setMethod(4);
        java.io.File file12 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveEntry archiveEntry14 = zipArchiveOutputStream9.createArchiveEntry(file12, "ar");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #839
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: aload         7
79: iconst_4
80: invokevirtual #339
83: aconst_null
84: astore        8
86: aload         7
88: aload         8
90: ldc           #48
92: invokevirtual #752
95: astore        9
97: ldc           #51
99: invokestatic  #20
102: goto          107
105: astore        9
107: new           #22
110: dup
111: invokespecial #23
114: ldc           #24
116: invokevirtual #25
119: lload         4
121: invokevirtual #26
124: ldc           #27
126: invokevirtual #25
129: lconst_0
130: invokevirtual #26
133: ldc           #24
135: invokevirtual #25
138: invokevirtual #28
141: lload         4
143: lconst_0
144: lcmp
145: ifne          152
148: iconst_1
149: goto          153
152: iconst_0
153: invokestatic  #29
156: aload         6
158: invokestatic  #53
161: return
Exception table:
from    to  target type
86   102   105   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test302
Start line: 11482
End line: 0
Method source code: 
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        tarArchiveOutputStream4.setBigNumberMode(256);
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream13 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4, "ZipLong value: 1000");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: ZipLong value: 1000");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #840
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: aload_3
73: sipush        256
76: invokevirtual #281
79: new           #43
82: dup
83: aload_3
84: ldc_w         #841
87: invokespecial #45
90: astore        9
92: ldc_w         #842
95: invokestatic  #20
98: goto          103
101: astore        9
103: new           #22
106: dup
107: invokespecial #23
110: ldc           #24
112: invokevirtual #25
115: lload         4
117: invokevirtual #26
120: ldc           #27
122: invokevirtual #25
125: lconst_0
126: invokevirtual #26
129: ldc           #24
131: invokevirtual #25
134: invokevirtual #28
137: lload         4
139: lconst_0
140: lcmp
141: ifne          148
144: iconst_1
145: goto          149
148: iconst_0
149: invokestatic  #29
152: aload         6
154: invokestatic  #53
157: new           #22
160: dup
161: invokespecial #23
164: ldc           #24
166: invokevirtual #25
169: lload         7
171: invokevirtual #26
174: ldc           #27
176: invokevirtual #25
179: lconst_0
180: invokevirtual #26
183: ldc           #24
185: invokevirtual #25
188: invokevirtual #28
191: lload         7
193: lconst_0
194: lcmp
195: ifne          202
198: iconst_1
199: goto          203
202: iconst_0
203: invokestatic  #29
206: return
Exception table:
from    to  target type
79    98   101   Class java/nio/charset/IllegalCharsetNameException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test303
Start line: 11506
End line: 0
Method source code: 
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream16 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream17 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream16);
        long long18 = jarArchiveInputStream17.getBytesRead();
        long long19 = jarArchiveInputStream17.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream20 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream17);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream17);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry22 = tarArchiveInputStream21.getNextEntry();
        long long23 = tarArchiveInputStream21.getBytesRead();
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream24 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream21);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry25 = tarArchiveInputStream21.getNextEntry();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream26 = archiveStreamFactory0.createArchiveInputStream((java.io.InputStream) tarArchiveInputStream21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Mark is not supported.");
        } catch (java.lang.IllegalArgumentException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNull(archiveEntry22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNull(archiveEntry25);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #843
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: new           #31
164: dup
165: aload         15
167: invokespecial #32
170: astore        21
172: aload         21
174: invokevirtual #199
177: astore        22
179: aload         21
181: invokevirtual #573
184: lstore        23
186: new           #15
189: dup
190: aload         21
192: invokespecial #300
195: astore        25
197: aload         21
199: invokevirtual #199
202: astore        26
204: aload_1
205: aload         21
207: invokevirtual #18
210: astore        27
212: ldc           #19
214: invokestatic  #20
217: goto          222
220: astore        27
222: new           #22
225: dup
226: invokespecial #23
229: ldc           #24
231: invokevirtual #25
234: lload         4
236: invokevirtual #26
239: ldc           #27
241: invokevirtual #25
244: lconst_0
245: invokevirtual #26
248: ldc           #24
250: invokevirtual #25
253: invokevirtual #28
256: lload         4
258: lconst_0
259: lcmp
260: ifne          267
263: iconst_1
264: goto          268
267: iconst_0
268: invokestatic  #29
271: new           #22
274: dup
275: invokespecial #23
278: ldc           #24
280: invokevirtual #25
283: lload         6
285: invokevirtual #26
288: ldc           #27
290: invokevirtual #25
293: lconst_0
294: invokevirtual #26
297: ldc           #24
299: invokevirtual #25
302: invokevirtual #28
305: lload         6
307: lconst_0
308: lcmp
309: ifne          316
312: iconst_1
313: goto          317
316: iconst_0
317: invokestatic  #29
320: aload         10
322: invokestatic  #168
325: aload         11
327: invokestatic  #168
330: aload         13
332: invokestatic  #53
335: new           #22
338: dup
339: invokespecial #23
342: ldc           #24
344: invokevirtual #25
347: lload         16
349: invokevirtual #26
352: ldc           #27
354: invokevirtual #25
357: lconst_0
358: invokevirtual #26
361: ldc           #24
363: invokevirtual #25
366: invokevirtual #28
369: lload         16
371: lconst_0
372: lcmp
373: ifne          380
376: iconst_1
377: goto          381
380: iconst_0
381: invokestatic  #29
384: new           #22
387: dup
388: invokespecial #23
391: ldc           #24
393: invokevirtual #25
396: lload         18
398: invokevirtual #26
401: ldc           #27
403: invokevirtual #25
406: lconst_0
407: invokevirtual #26
410: ldc           #24
412: invokevirtual #25
415: invokevirtual #28
418: lload         18
420: lconst_0
421: lcmp
422: ifne          429
425: iconst_1
426: goto          430
429: iconst_0
430: invokestatic  #29
433: aload         22
435: invokestatic  #168
438: new           #22
441: dup
442: invokespecial #23
445: ldc           #24
447: invokevirtual #25
450: lload         23
452: invokevirtual #26
455: ldc           #27
457: invokevirtual #25
460: lconst_0
461: invokevirtual #26
464: ldc           #24
466: invokevirtual #25
469: invokevirtual #28
472: lload         23
474: lconst_0
475: lcmp
476: ifne          483
479: iconst_1
480: goto          484
483: iconst_0
484: invokestatic  #29
487: aload         26
489: invokestatic  #168
492: return
Exception table:
from    to  target type
204   217   220   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test304
Start line: 11551
End line: 0
Method source code: 
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        try {
            org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream3 = archiveStreamFactory0.createArchiveOutputStream(" \000", outputStream2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: OutputStream must not be null.");
        } catch (java.lang.IllegalArgumentException e) {
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #844
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: aload_1
36: ldc_w         #845
39: aload_2
40: invokevirtual #49
43: astore_3
44: ldc           #106
46: invokestatic  #20
49: goto          53
52: astore_3
53: return
Exception table:
from    to  target type
35    49    52   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test305
Start line: 11566
End line: 0
Method source code: 
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        arArchiveOutputStream10.count((long) (byte) 48);
        arArchiveOutputStream10.flush();
        arArchiveOutputStream10.setLongFileMode((int) (byte) -1);
        int int17 = arArchiveOutputStream10.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry20 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("ar", (byte) 0);
        long long21 = tarArchiveEntry20.getSize();
        tarArchiveEntry20.setSize((long) 256);
        byte[] byteArray25 = org.apache.commons.compress.archivers.zip.ZipLong.getBytes((long) 61440);
        boolean boolean26 = tarArchiveEntry20.equals((java.lang.Object) 61440);
        tarArchiveEntry20.setSize((long) 16384);
        java.util.Date date29 = tarArchiveEntry20.getLastModifiedDate();
        try {
            arArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry20);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, -16, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(date29);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #846
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: ldc2_w        #464
92: invokevirtual #466
95: aload         9
97: invokevirtual #528
100: aload         9
102: iconst_m1
103: invokevirtual #399
106: aload         9
108: invokevirtual #847
111: istore        10
113: new           #112
116: dup
117: ldc           #48
119: iconst_0
120: invokespecial #113
123: astore        11
125: aload         11
127: invokevirtual #156
130: lstore        12
132: aload         11
134: ldc2_w        #268
137: invokevirtual #330
140: ldc2_w        #848
143: invokestatic  #259
146: astore        14
148: aload         11
150: ldc_w         #850
153: invokestatic  #851
156: invokevirtual #133
159: istore        15
161: aload         11
163: ldc2_w        #852
166: invokevirtual #330
169: aload         11
171: invokevirtual #122
174: astore        16
176: aload         9
178: aload         11
180: invokevirtual #288
183: ldc_w         #289
186: invokestatic  #20
189: goto          194
192: astore        17
194: new           #22
197: dup
198: invokespecial #23
201: ldc           #24
203: invokevirtual #25
206: lload         4
208: invokevirtual #26
211: ldc           #27
213: invokevirtual #25
216: lconst_0
217: invokevirtual #26
220: ldc           #24
222: invokevirtual #25
225: invokevirtual #28
228: lload         4
230: lconst_0
231: lcmp
232: ifne          239
235: iconst_1
236: goto          240
239: iconst_0
240: invokestatic  #29
243: aload         6
245: invokestatic  #53
248: new           #22
251: dup
252: invokespecial #23
255: ldc           #24
257: invokevirtual #25
260: lload         7
262: invokevirtual #26
265: ldc           #27
267: invokevirtual #25
270: lconst_0
271: invokevirtual #26
274: ldc           #24
276: invokevirtual #25
279: invokevirtual #28
282: lload         7
284: lconst_0
285: lcmp
286: ifne          293
289: iconst_1
290: goto          294
293: iconst_0
294: invokestatic  #29
297: new           #22
300: dup
301: invokespecial #23
304: ldc           #24
306: invokevirtual #25
309: iload         10
311: invokevirtual #41
314: ldc           #27
316: invokevirtual #25
319: bipush        48
321: invokevirtual #41
324: ldc           #24
326: invokevirtual #25
329: invokevirtual #28
332: iload         10
334: bipush        48
336: if_icmpne     343
339: iconst_1
340: goto          344
343: iconst_0
344: invokestatic  #29
347: new           #22
350: dup
351: invokespecial #23
354: ldc           #24
356: invokevirtual #25
359: lload         12
361: invokevirtual #26
364: ldc           #27
366: invokevirtual #25
369: lconst_0
370: invokevirtual #26
373: ldc           #24
375: invokevirtual #25
378: invokevirtual #28
381: lload         12
383: lconst_0
384: lcmp
385: ifne          392
388: iconst_1
389: goto          393
392: iconst_0
393: invokestatic  #29
396: aload         14
398: invokestatic  #53
401: aload         14
403: invokestatic  #66
406: ldc_w         #854
409: invokestatic  #68
412: new           #22
415: dup
416: invokespecial #23
419: ldc           #24
421: invokevirtual #25
424: iload         15
426: invokevirtual #69
429: ldc           #27
431: invokevirtual #25
434: iconst_0
435: invokevirtual #69
438: ldc           #24
440: invokevirtual #25
443: invokevirtual #28
446: iload         15
448: ifne          455
451: iconst_1
452: goto          456
455: iconst_0
456: invokestatic  #29
459: aload         16
461: invokestatic  #53
464: return
Exception table:
from    to  target type
176   189   192   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test306
Start line: 11609
End line: 0
Method source code: 
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream15 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) arArchiveInputStream14);
        arArchiveInputStream15.close();
        arArchiveInputStream15.close();
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream18 = archiveStreamFactory0.createArchiveInputStream("tar", (java.io.InputStream) arArchiveInputStream15);
        archiveInputStream18.reset();
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream20 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) archiveInputStream18);
        try {
            org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) archiveInputStream18, "-       0 ");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.IllegalCharsetNameException; message: -       0 ");
        } catch (java.nio.charset.IllegalCharsetNameException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(archiveInputStream18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #855
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #13
108: dup
109: aload         13
111: invokespecial #14
114: astore        14
116: aload         14
118: invokevirtual #140
121: aload         14
123: invokevirtual #140
126: aload_1
127: ldc           #164
129: aload         14
131: invokevirtual #38
134: astore        15
136: aload         15
138: invokevirtual #608
141: new           #15
144: dup
145: aload         15
147: invokespecial #300
150: astore        16
152: new           #31
155: dup
156: aload         15
158: ldc_w         #531
161: invokespecial #575
164: astore        17
166: ldc_w         #856
169: invokestatic  #20
172: goto          177
175: astore        17
177: new           #22
180: dup
181: invokespecial #23
184: ldc           #24
186: invokevirtual #25
189: lload         4
191: invokevirtual #26
194: ldc           #27
196: invokevirtual #25
199: lconst_0
200: invokevirtual #26
203: ldc           #24
205: invokevirtual #25
208: invokevirtual #28
211: lload         4
213: lconst_0
214: lcmp
215: ifne          222
218: iconst_1
219: goto          223
222: iconst_0
223: invokestatic  #29
226: aload         6
228: invokestatic  #53
231: new           #22
234: dup
235: invokespecial #23
238: ldc           #24
240: invokevirtual #25
243: lload         9
245: invokevirtual #26
248: ldc           #27
250: invokevirtual #25
253: lconst_0
254: invokevirtual #26
257: ldc           #24
259: invokevirtual #25
262: invokevirtual #28
265: lload         9
267: lconst_0
268: lcmp
269: ifne          276
272: iconst_1
273: goto          277
276: iconst_0
277: invokestatic  #29
280: new           #22
283: dup
284: invokespecial #23
287: ldc           #24
289: invokevirtual #25
292: lload         11
294: invokevirtual #26
297: ldc           #27
299: invokevirtual #25
302: lconst_0
303: invokevirtual #26
306: ldc           #24
308: invokevirtual #25
311: invokevirtual #28
314: lload         11
316: lconst_0
317: lcmp
318: ifne          325
321: iconst_1
322: goto          326
325: iconst_0
326: invokestatic  #29
329: aload         15
331: invokestatic  #53
334: return
Exception table:
from    to  target type
152   172   175   Class java/nio/charset/IllegalCharsetNameException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test307
Start line: 11644
End line: 0
Method source code: 
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.InputStream inputStream2 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream3 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream2);
        long long4 = jarArchiveInputStream3.getBytesRead();
        long long5 = jarArchiveInputStream3.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream6 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream7 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream3);
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry8 = tarArchiveInputStream7.getNextEntry();
        org.apache.commons.compress.archivers.ArchiveEntry archiveEntry9 = tarArchiveInputStream7.getNextEntry();
        tarArchiveInputStream7.count((long) 100);
        org.apache.commons.compress.archivers.zip.ZipArchiveInputStream zipArchiveInputStream14 = new org.apache.commons.compress.archivers.zip.ZipArchiveInputStream((java.io.InputStream) tarArchiveInputStream7, "tar", true);
        org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream15 = archiveStreamFactory0.createArchiveInputStream("jar", (java.io.InputStream) zipArchiveInputStream14);
        java.io.InputStream inputStream17 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream18 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream17);
        long long19 = jarArchiveInputStream18.getBytesRead();
        long long20 = jarArchiveInputStream18.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream21 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream18);
        org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream cpioArchiveInputStream23 = new org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream((java.io.InputStream) tarArchiveInputStream22);
        int int24 = cpioArchiveInputStream23.available();
        int int25 = cpioArchiveInputStream23.available();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream26 = archiveStreamFactory0.createArchiveInputStream("data descriptor", (java.io.InputStream) cpioArchiveInputStream23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: data descriptor not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNull(archiveEntry8);
        org.junit.Assert.assertNull(archiveEntry9);
        org.junit.Assert.assertNotNull(archiveInputStream15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #857
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #10
38: dup
39: aload_2
40: invokespecial #11
43: astore_3
44: aload_3
45: invokevirtual #12
48: lstore        4
50: aload_3
51: invokevirtual #12
54: lstore        6
56: new           #13
59: dup
60: aload_3
61: invokespecial #14
64: astore        8
66: new           #31
69: dup
70: aload_3
71: invokespecial #32
74: astore        9
76: aload         9
78: invokevirtual #199
81: astore        10
83: aload         9
85: invokevirtual #199
88: astore        11
90: aload         9
92: ldc2_w        #200
95: invokevirtual #202
98: new           #15
101: dup
102: aload         9
104: ldc           #164
106: iconst_1
107: invokespecial #203
110: astore        12
112: aload_1
113: ldc           #44
115: aload         12
117: invokevirtual #38
120: astore        13
122: aconst_null
123: astore        14
125: new           #10
128: dup
129: aload         14
131: invokespecial #11
134: astore        15
136: aload         15
138: invokevirtual #12
141: lstore        16
143: aload         15
145: invokevirtual #12
148: lstore        18
150: new           #13
153: dup
154: aload         15
156: invokespecial #14
159: astore        20
161: new           #31
164: dup
165: aload         15
167: invokespecial #32
170: astore        21
172: new           #33
175: dup
176: aload         21
178: invokespecial #34
181: astore        22
183: aload         22
185: invokevirtual #35
188: istore        23
190: aload         22
192: invokevirtual #35
195: istore        24
197: aload_1
198: ldc           #170
200: aload         22
202: invokevirtual #38
205: astore        25
207: ldc_w         #858
210: invokestatic  #20
213: goto          218
216: astore        25
218: new           #22
221: dup
222: invokespecial #23
225: ldc           #24
227: invokevirtual #25
230: lload         4
232: invokevirtual #26
235: ldc           #27
237: invokevirtual #25
240: lconst_0
241: invokevirtual #26
244: ldc           #24
246: invokevirtual #25
249: invokevirtual #28
252: lload         4
254: lconst_0
255: lcmp
256: ifne          263
259: iconst_1
260: goto          264
263: iconst_0
264: invokestatic  #29
267: new           #22
270: dup
271: invokespecial #23
274: ldc           #24
276: invokevirtual #25
279: lload         6
281: invokevirtual #26
284: ldc           #27
286: invokevirtual #25
289: lconst_0
290: invokevirtual #26
293: ldc           #24
295: invokevirtual #25
298: invokevirtual #28
301: lload         6
303: lconst_0
304: lcmp
305: ifne          312
308: iconst_1
309: goto          313
312: iconst_0
313: invokestatic  #29
316: aload         10
318: invokestatic  #168
321: aload         11
323: invokestatic  #168
326: aload         13
328: invokestatic  #53
331: new           #22
334: dup
335: invokespecial #23
338: ldc           #24
340: invokevirtual #25
343: lload         16
345: invokevirtual #26
348: ldc           #27
350: invokevirtual #25
353: lconst_0
354: invokevirtual #26
357: ldc           #24
359: invokevirtual #25
362: invokevirtual #28
365: lload         16
367: lconst_0
368: lcmp
369: ifne          376
372: iconst_1
373: goto          377
376: iconst_0
377: invokestatic  #29
380: new           #22
383: dup
384: invokespecial #23
387: ldc           #24
389: invokevirtual #25
392: lload         18
394: invokevirtual #26
397: ldc           #27
399: invokevirtual #25
402: lconst_0
403: invokevirtual #26
406: ldc           #24
408: invokevirtual #25
411: invokevirtual #28
414: lload         18
416: lconst_0
417: lcmp
418: ifne          425
421: iconst_1
422: goto          426
425: iconst_0
426: invokestatic  #29
429: new           #22
432: dup
433: invokespecial #23
436: ldc           #24
438: invokevirtual #25
441: iload         23
443: invokevirtual #41
446: ldc           #27
448: invokevirtual #25
451: iconst_1
452: invokevirtual #41
455: ldc           #24
457: invokevirtual #25
460: invokevirtual #28
463: iload         23
465: iconst_1
466: if_icmpne     473
469: iconst_1
470: goto          474
473: iconst_0
474: invokestatic  #29
477: new           #22
480: dup
481: invokespecial #23
484: ldc           #24
486: invokevirtual #25
489: iload         24
491: invokevirtual #41
494: ldc           #27
496: invokevirtual #25
499: iconst_1
500: invokevirtual #41
503: ldc           #24
505: invokevirtual #25
508: invokevirtual #28
511: iload         24
513: iconst_1
514: if_icmpne     521
517: iconst_1
518: goto          522
521: iconst_0
522: invokestatic  #29
525: return
Exception table:
from    to  target type
197   213   216   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test308
Start line: 11687
End line: 0
Method source code: 
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry1 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("org.apache.commons.compress.archivers.ArchiveException: ustar\000");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory2 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream4 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream6 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream4, "jar");
        tarArchiveOutputStream6.count(0L);
        long long9 = tarArchiveOutputStream6.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream10 = archiveStreamFactory2.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream6);
        boolean boolean11 = tarArchiveEntry1.equals((java.lang.Object) "ar");
        long long12 = tarArchiveEntry1.getSize();
        long long13 = tarArchiveEntry1.getRealSize();
        org.apache.commons.compress.archivers.zip.ZipLong zipLong14 = org.apache.commons.compress.archivers.zip.ZipLong.LFH_SIG;
        byte[] byteArray15 = zipLong14.getBytes();
        boolean boolean17 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray15, 16877);
        long long18 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray15);
        long long19 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray15);
        byte[] byteArray26 = new byte[] { (byte) 54, (byte) 53, (byte) 1, (byte) 10 };
        boolean boolean27 = org.apache.commons.compress.archivers.tar.TarUtils.verifyCheckSum(byteArray26);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong28 = new org.apache.commons.compress.archivers.zip.ZipLong(byteArray26);
        boolean boolean30 = org.apache.commons.compress.archivers.jar.JarArchiveInputStream.matches(byteArray26, (int) (byte) 50);
        java.io.InputStream inputStream31 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream32 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream31);
        long long33 = jarArchiveInputStream32.getBytesRead();
        long long34 = jarArchiveInputStream32.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream35 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream32);
        arArchiveInputStream35.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream37 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream35);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong39 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray40 = zipLong39.getBytes();
        long long41 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray40);
        int int44 = tarArchiveInputStream37.read(byteArray40, 0, (int) (short) 0);
        boolean boolean46 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray40, (int) (short) -1);
        boolean boolean48 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray26, byteArray40, false);
        boolean boolean50 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray40, 0);
        boolean boolean53 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray15, (int) (byte) 51, (-1), byteArray40, 1, (int) '#');
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding55 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("5");
        try {
            tarArchiveEntry1.writeEntryHeader(byteArray15, zipEncoding55, false);
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 5");
        } catch (java.io.UnsupportedEncodingException e) {
        }
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(zipLong14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[80, 75, 3, 4]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 67324752L + "'", long18 == 67324752L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 162L + "'", long19 == 162L);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[54, 53, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(zipEncoding55);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #859
20: aastore
21: invokevirtual #7
24: pop
25: new           #112
28: dup
29: ldc           #225
31: invokespecial #120
34: astore_1
35: new           #8
38: dup
39: invokespecial #9
42: astore_2
43: aconst_null
44: astore_3
45: new           #43
48: dup
49: aload_3
50: ldc           #44
52: invokespecial #45
55: astore        4
57: aload         4
59: lconst_0
60: invokevirtual #46
63: aload         4
65: invokevirtual #47
68: lstore        5
70: aload_2
71: ldc           #48
73: aload         4
75: invokevirtual #49
78: astore        7
80: aload_1
81: ldc           #48
83: invokevirtual #133
86: istore        8
88: aload_1
89: invokevirtual #156
92: lstore        9
94: aload_1
95: invokevirtual #327
98: lstore        11
100: getstatic     #860
103: astore        13
105: aload         13
107: invokevirtual #75
110: astore        14
112: aload         14
114: sipush        16877
117: invokestatic  #325
120: istore        15
122: aload         14
124: invokestatic  #209
127: lstore        16
129: aload         14
131: invokestatic  #260
134: lstore        18
136: iconst_4
137: newarray       byte
139: dup
140: iconst_0
141: bipush        54
143: bastore
144: dup
145: iconst_1
146: bipush        53
148: bastore
149: dup
150: iconst_2
151: iconst_1
152: bastore
153: dup
154: iconst_3
155: bipush        10
157: bastore
158: astore        20
160: aload         20
162: invokestatic  #192
165: istore        21
167: new           #73
170: dup
171: aload         20
173: invokespecial #406
176: astore        22
178: aload         20
180: bipush        50
182: invokestatic  #523
185: istore        23
187: aconst_null
188: astore        24
190: new           #10
193: dup
194: aload         24
196: invokespecial #11
199: astore        25
201: aload         25
203: invokevirtual #12
206: lstore        26
208: aload         25
210: invokevirtual #12
213: lstore        28
215: new           #13
218: dup
219: aload         25
221: invokespecial #14
224: astore        30
226: aload         30
228: invokevirtual #140
231: new           #31
234: dup
235: aload         30
237: invokespecial #32
240: astore        31
242: new           #73
245: dup
246: lconst_0
247: invokespecial #74
250: astore        32
252: aload         32
254: invokevirtual #75
257: astore        33
259: aload         33
261: invokestatic  #209
264: lstore        34
266: aload         31
268: aload         33
270: iconst_0
271: iconst_0
272: invokevirtual #174
275: istore        36
277: aload         33
279: iconst_m1
280: invokestatic  #210
283: istore        37
285: aload         20
287: aload         33
289: iconst_0
290: invokestatic  #177
293: istore        38
295: aload         33
297: iconst_0
298: invokestatic  #210
301: istore        39
303: aload         14
305: bipush        51
307: iconst_m1
308: aload         33
310: iconst_1
311: bipush        35
313: invokestatic  #685
316: istore        40
318: ldc_w         #458
321: invokestatic  #211
324: astore        41
326: aload_1
327: aload         14
329: aload         41
331: iconst_0
332: invokevirtual #408
335: ldc_w         #861
338: invokestatic  #20
341: goto          346
344: astore        42
346: new           #22
349: dup
350: invokespecial #23
353: ldc           #24
355: invokevirtual #25
358: lload         5
360: invokevirtual #26
363: ldc           #27
365: invokevirtual #25
368: lconst_0
369: invokevirtual #26
372: ldc           #24
374: invokevirtual #25
377: invokevirtual #28
380: lload         5
382: lconst_0
383: lcmp
384: ifne          391
387: iconst_1
388: goto          392
391: iconst_0
392: invokestatic  #29
395: aload         7
397: invokestatic  #53
400: new           #22
403: dup
404: invokespecial #23
407: ldc           #24
409: invokevirtual #25
412: iload         8
414: invokevirtual #69
417: ldc           #27
419: invokevirtual #25
422: iconst_0
423: invokevirtual #69
426: ldc           #24
428: invokevirtual #25
431: invokevirtual #28
434: iload         8
436: ifne          443
439: iconst_1
440: goto          444
443: iconst_0
444: invokestatic  #29
447: new           #22
450: dup
451: invokespecial #23
454: ldc           #24
456: invokevirtual #25
459: lload         9
461: invokevirtual #26
464: ldc           #27
466: invokevirtual #25
469: lconst_0
470: invokevirtual #26
473: ldc           #24
475: invokevirtual #25
478: invokevirtual #28
481: lload         9
483: lconst_0
484: lcmp
485: ifne          492
488: iconst_1
489: goto          493
492: iconst_0
493: invokestatic  #29
496: new           #22
499: dup
500: invokespecial #23
503: ldc           #24
505: invokevirtual #25
508: lload         11
510: invokevirtual #26
513: ldc           #27
515: invokevirtual #25
518: lconst_0
519: invokevirtual #26
522: ldc           #24
524: invokevirtual #25
527: invokevirtual #28
530: lload         11
532: lconst_0
533: lcmp
534: ifne          541
537: iconst_1
538: goto          542
541: iconst_0
542: invokestatic  #29
545: aload         13
547: invokestatic  #53
550: aload         14
552: invokestatic  #53
555: aload         14
557: invokestatic  #66
560: ldc_w         #862
563: invokestatic  #68
566: new           #22
569: dup
570: invokespecial #23
573: ldc           #24
575: invokevirtual #25
578: iload         15
580: invokevirtual #69
583: ldc           #27
585: invokevirtual #25
588: iconst_1
589: invokevirtual #69
592: ldc           #24
594: invokevirtual #25
597: invokevirtual #28
600: iload         15
602: iconst_1
603: if_icmpne     610
606: iconst_1
607: goto          611
610: iconst_0
611: invokestatic  #29
614: new           #22
617: dup
618: invokespecial #23
621: ldc           #24
623: invokevirtual #25
626: lload         16
628: invokevirtual #26
631: ldc           #27
633: invokevirtual #25
636: ldc2_w        #863
639: invokevirtual #26
642: ldc           #24
644: invokevirtual #25
647: invokevirtual #28
650: lload         16
652: ldc2_w        #863
655: lcmp
656: ifne          663
659: iconst_1
660: goto          664
663: iconst_0
664: invokestatic  #29
667: new           #22
670: dup
671: invokespecial #23
674: ldc           #24
676: invokevirtual #25
679: lload         18
681: invokevirtual #26
684: ldc           #27
686: invokevirtual #25
689: ldc2_w        #160
692: invokevirtual #26
695: ldc           #24
697: invokevirtual #25
700: invokevirtual #28
703: lload         18
705: ldc2_w        #160
708: lcmp
709: ifne          716
712: iconst_1
713: goto          717
716: iconst_0
717: invokestatic  #29
720: aload         20
722: invokestatic  #53
725: aload         20
727: invokestatic  #66
730: ldc_w         #409
733: invokestatic  #68
736: new           #22
739: dup
740: invokespecial #23
743: ldc           #24
745: invokevirtual #25
748: iload         21
750: invokevirtual #69
753: ldc           #27
755: invokevirtual #25
758: iconst_0
759: invokevirtual #69
762: ldc           #24
764: invokevirtual #25
767: invokevirtual #28
770: iload         21
772: ifne          779
775: iconst_1
776: goto          780
779: iconst_0
780: invokestatic  #29
783: new           #22
786: dup
787: invokespecial #23
790: ldc           #24
792: invokevirtual #25
795: iload         23
797: invokevirtual #69
800: ldc           #27
802: invokevirtual #25
805: iconst_0
806: invokevirtual #69
809: ldc           #24
811: invokevirtual #25
814: invokevirtual #28
817: iload         23
819: ifne          826
822: iconst_1
823: goto          827
826: iconst_0
827: invokestatic  #29
830: new           #22
833: dup
834: invokespecial #23
837: ldc           #24
839: invokevirtual #25
842: lload         26
844: invokevirtual #26
847: ldc           #27
849: invokevirtual #25
852: lconst_0
853: invokevirtual #26
856: ldc           #24
858: invokevirtual #25
861: invokevirtual #28
864: lload         26
866: lconst_0
867: lcmp
868: ifne          875
871: iconst_1
872: goto          876
875: iconst_0
876: invokestatic  #29
879: new           #22
882: dup
883: invokespecial #23
886: ldc           #24
888: invokevirtual #25
891: lload         28
893: invokevirtual #26
896: ldc           #27
898: invokevirtual #25
901: lconst_0
902: invokevirtual #26
905: ldc           #24
907: invokevirtual #25
910: invokevirtual #28
913: lload         28
915: lconst_0
916: lcmp
917: ifne          924
920: iconst_1
921: goto          925
924: iconst_0
925: invokestatic  #29
928: aload         33
930: invokestatic  #53
933: aload         33
935: invokestatic  #66
938: ldc           #77
940: invokestatic  #68
943: new           #22
946: dup
947: invokespecial #23
950: ldc           #24
952: invokevirtual #25
955: lload         34
957: invokevirtual #26
960: ldc           #27
962: invokevirtual #25
965: lconst_0
966: invokevirtual #26
969: ldc           #24
971: invokevirtual #25
974: invokevirtual #28
977: lload         34
979: lconst_0
980: lcmp
981: ifne          988
984: iconst_1
985: goto          989
988: iconst_0
989: invokestatic  #29
992: new           #22
995: dup
996: invokespecial #23
999: ldc           #24
1001: invokevirtual #25
1004: iload         36
1006: invokevirtual #41
1009: ldc           #27
1011: invokevirtual #25
1014: iconst_m1
1015: invokevirtual #41
1018: ldc           #24
1020: invokevirtual #25
1023: invokevirtual #28
1026: iload         36
1028: iconst_m1
1029: if_icmpne     1036
1032: iconst_1
1033: goto          1037
1036: iconst_0
1037: invokestatic  #29
1040: new           #22
1043: dup
1044: invokespecial #23
1047: ldc           #24
1049: invokevirtual #25
1052: iload         37
1054: invokevirtual #69
1057: ldc           #27
1059: invokevirtual #25
1062: iconst_0
1063: invokevirtual #69
1066: ldc           #24
1068: invokevirtual #25
1071: invokevirtual #28
1074: iload         37
1076: ifne          1083
1079: iconst_1
1080: goto          1084
1083: iconst_0
1084: invokestatic  #29
1087: new           #22
1090: dup
1091: invokespecial #23
1094: ldc           #24
1096: invokevirtual #25
1099: iload         38
1101: invokevirtual #69
1104: ldc           #27
1106: invokevirtual #25
1109: iconst_0
1110: invokevirtual #69
1113: ldc           #24
1115: invokevirtual #25
1118: invokevirtual #28
1121: iload         38
1123: ifne          1130
1126: iconst_1
1127: goto          1131
1130: iconst_0
1131: invokestatic  #29
1134: new           #22
1137: dup
1138: invokespecial #23
1141: ldc           #24
1143: invokevirtual #25
1146: iload         39
1148: invokevirtual #69
1151: ldc           #27
1153: invokevirtual #25
1156: iconst_0
1157: invokevirtual #69
1160: ldc           #24
1162: invokevirtual #25
1165: invokevirtual #28
1168: iload         39
1170: ifne          1177
1173: iconst_1
1174: goto          1178
1177: iconst_0
1178: invokestatic  #29
1181: new           #22
1184: dup
1185: invokespecial #23
1188: ldc           #24
1190: invokevirtual #25
1193: iload         40
1195: invokevirtual #69
1198: ldc           #27
1200: invokevirtual #25
1203: iconst_0
1204: invokevirtual #69
1207: ldc           #24
1209: invokevirtual #25
1212: invokevirtual #28
1215: iload         40
1217: ifne          1224
1220: iconst_1
1221: goto          1225
1224: iconst_0
1225: invokestatic  #29
1228: aload         41
1230: invokestatic  #53
1233: return
Exception table:
from    to  target type
326   341   344   Class java/io/UnsupportedEncodingException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test309
Start line: 11761
End line: 0
Method source code: 
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        java.io.InputStream inputStream10 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream10);
        long long12 = jarArchiveInputStream11.getBytesRead();
        long long13 = jarArchiveInputStream11.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream14 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream15 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) jarArchiveInputStream11);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry17 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int18 = tarArchiveEntry17.getDevMinor();
        tarArchiveEntry17.setUserId(0);
        boolean boolean21 = tarArchiveInputStream15.canReadEntryData((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry17);
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream22 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) tarArchiveInputStream15);
        tarArchiveInputStream22.reset();
        try {
            org.apache.commons.compress.archivers.ArchiveInputStream archiveInputStream24 = archiveStreamFactory0.createArchiveInputStream("-       0 TRAILER!!!", (java.io.InputStream) tarArchiveInputStream22);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.compress.archivers.ArchiveException; message: Archiver: -       0 TRAILER!!! not found.");
        } catch (org.apache.commons.compress.archivers.ArchiveException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #865
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aconst_null
67: astore        7
69: new           #10
72: dup
73: aload         7
75: invokespecial #11
78: astore        8
80: aload         8
82: invokevirtual #12
85: lstore        9
87: aload         8
89: invokevirtual #12
92: lstore        11
94: new           #13
97: dup
98: aload         8
100: invokespecial #14
103: astore        13
105: new           #31
108: dup
109: aload         8
111: invokespecial #32
114: astore        14
116: new           #112
119: dup
120: ldc           #44
122: invokespecial #120
125: astore        15
127: aload         15
129: invokevirtual #129
132: istore        16
134: aload         15
136: iconst_0
137: invokevirtual #272
140: aload         14
142: aload         15
144: invokevirtual #116
147: istore        17
149: new           #31
152: dup
153: aload         14
155: invokespecial #32
158: astore        18
160: aload         18
162: invokevirtual #256
165: aload_1
166: ldc_w         #866
169: aload         18
171: invokevirtual #38
174: astore        19
176: ldc_w         #867
179: invokestatic  #20
182: goto          187
185: astore        19
187: new           #22
190: dup
191: invokespecial #23
194: ldc           #24
196: invokevirtual #25
199: lload         4
201: invokevirtual #26
204: ldc           #27
206: invokevirtual #25
209: lconst_0
210: invokevirtual #26
213: ldc           #24
215: invokevirtual #25
218: invokevirtual #28
221: lload         4
223: lconst_0
224: lcmp
225: ifne          232
228: iconst_1
229: goto          233
232: iconst_0
233: invokestatic  #29
236: aload         6
238: invokestatic  #53
241: new           #22
244: dup
245: invokespecial #23
248: ldc           #24
250: invokevirtual #25
253: lload         9
255: invokevirtual #26
258: ldc           #27
260: invokevirtual #25
263: lconst_0
264: invokevirtual #26
267: ldc           #24
269: invokevirtual #25
272: invokevirtual #28
275: lload         9
277: lconst_0
278: lcmp
279: ifne          286
282: iconst_1
283: goto          287
286: iconst_0
287: invokestatic  #29
290: new           #22
293: dup
294: invokespecial #23
297: ldc           #24
299: invokevirtual #25
302: lload         11
304: invokevirtual #26
307: ldc           #27
309: invokevirtual #25
312: lconst_0
313: invokevirtual #26
316: ldc           #24
318: invokevirtual #25
321: invokevirtual #28
324: lload         11
326: lconst_0
327: lcmp
328: ifne          335
331: iconst_1
332: goto          336
335: iconst_0
336: invokestatic  #29
339: new           #22
342: dup
343: invokespecial #23
346: ldc           #24
348: invokevirtual #25
351: iload         16
353: invokevirtual #41
356: ldc           #27
358: invokevirtual #25
361: iconst_0
362: invokevirtual #41
365: ldc           #24
367: invokevirtual #25
370: invokevirtual #28
373: iload         16
375: ifne          382
378: iconst_1
379: goto          383
382: iconst_0
383: invokestatic  #29
386: new           #22
389: dup
390: invokespecial #23
393: ldc           #24
395: invokevirtual #25
398: iload         17
400: invokevirtual #69
403: ldc           #27
405: invokevirtual #25
408: iconst_1
409: invokevirtual #69
412: ldc           #24
414: invokevirtual #25
417: invokevirtual #28
420: iload         17
422: iconst_1
423: if_icmpne     430
426: iconst_1
427: goto          431
430: iconst_0
431: invokestatic  #29
434: return
Exception table:
from    to  target type
165   182   185   Class org/apache/commons/compress/archivers/ArchiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test310
Start line: 11798
End line: 0
Method source code: 
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        long long9 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ar.ArArchiveOutputStream arArchiveOutputStream10 = new org.apache.commons.compress.archivers.ar.ArArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        arArchiveOutputStream10.finish();
        try {
            arArchiveOutputStream10.closeArchiveEntry();
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: Stream has already been finished");
        } catch (java.io.IOException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #868
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #47
70: lstore        7
72: new           #240
75: dup
76: aload_3
77: invokespecial #241
80: astore        9
82: aload         9
84: invokevirtual #286
87: aload         9
89: invokevirtual #539
92: ldc_w         #289
95: invokestatic  #20
98: goto          103
101: astore        10
103: new           #22
106: dup
107: invokespecial #23
110: ldc           #24
112: invokevirtual #25
115: lload         4
117: invokevirtual #26
120: ldc           #27
122: invokevirtual #25
125: lconst_0
126: invokevirtual #26
129: ldc           #24
131: invokevirtual #25
134: invokevirtual #28
137: lload         4
139: lconst_0
140: lcmp
141: ifne          148
144: iconst_1
145: goto          149
148: iconst_0
149: invokestatic  #29
152: aload         6
154: invokestatic  #53
157: new           #22
160: dup
161: invokespecial #23
164: ldc           #24
166: invokevirtual #25
169: lload         7
171: invokevirtual #26
174: ldc           #27
176: invokevirtual #25
179: lconst_0
180: invokevirtual #26
183: ldc           #24
185: invokevirtual #25
188: invokevirtual #28
191: lload         7
193: lconst_0
194: lcmp
195: ifne          202
198: iconst_1
199: goto          203
202: iconst_0
203: invokestatic  #29
206: return
Exception table:
from    to  target type
87    98   101   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test311
Start line: 11823
End line: 0
Method source code: 
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry12 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        int int13 = tarArchiveEntry12.getDevMinor();
        tarArchiveEntry12.setIds((int) (short) 3, 0);
        int int17 = tarArchiveEntry12.getDevMajor();
        boolean boolean18 = tarArchiveEntry12.isFile();
        tarArchiveEntry12.setSize((long) 100);
        boolean boolean21 = tarArchiveEntry12.isCharacterDevice();
        org.apache.commons.compress.archivers.tar.TarArchiveEntry tarArchiveEntry23 = new org.apache.commons.compress.archivers.tar.TarArchiveEntry("jar");
        tarArchiveEntry23.setMode((int) (short) 10);
        java.util.Date date26 = tarArchiveEntry23.getLastModifiedDate();
        tarArchiveEntry23.setMode((int) (byte) 120);
        java.util.Date date29 = tarArchiveEntry23.getModTime();
        boolean boolean30 = tarArchiveEntry12.equals(tarArchiveEntry23);
        tarArchiveEntry23.setSize((long) 16);
        boolean boolean33 = tarArchiveEntry23.isGNUSparse();
        java.io.File file34 = tarArchiveEntry23.getFile();
        tarArchiveOutputStream10.putArchiveEntry((org.apache.commons.compress.archivers.ArchiveEntry) tarArchiveEntry23);
        tarArchiveEntry23.setModTime(50L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(file34);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #869
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #112
85: dup
86: ldc           #44
88: invokespecial #120
91: astore        9
93: aload         9
95: invokevirtual #129
98: istore        10
100: aload         9
102: iconst_3
103: iconst_0
104: invokevirtual #130
107: aload         9
109: invokevirtual #131
112: istore        11
114: aload         9
116: invokevirtual #132
119: istore        12
121: aload         9
123: ldc2_w        #200
126: invokevirtual #330
129: aload         9
131: invokevirtual #344
134: istore        13
136: new           #112
139: dup
140: ldc           #44
142: invokespecial #120
145: astore        14
147: aload         14
149: bipush        10
151: invokevirtual #121
154: aload         14
156: invokevirtual #122
159: astore        15
161: aload         14
163: bipush        120
165: invokevirtual #121
168: aload         14
170: invokevirtual #123
173: astore        16
175: aload         9
177: aload         14
179: invokevirtual #377
182: istore        17
184: aload         14
186: ldc2_w        #725
189: invokevirtual #330
192: aload         14
194: invokevirtual #422
197: istore        18
199: aload         14
201: invokevirtual #395
204: astore        19
206: aload         8
208: aload         14
210: invokevirtual #136
213: aload         14
215: ldc2_w        #870
218: invokevirtual #806
221: new           #22
224: dup
225: invokespecial #23
228: ldc           #24
230: invokevirtual #25
233: lload         4
235: invokevirtual #26
238: ldc           #27
240: invokevirtual #25
243: lconst_0
244: invokevirtual #26
247: ldc           #24
249: invokevirtual #25
252: invokevirtual #28
255: lload         4
257: lconst_0
258: lcmp
259: ifne          266
262: iconst_1
263: goto          267
266: iconst_0
267: invokestatic  #29
270: aload         6
272: invokestatic  #53
275: new           #22
278: dup
279: invokespecial #23
282: ldc           #24
284: invokevirtual #25
287: iload         7
289: invokevirtual #41
292: ldc           #27
294: invokevirtual #25
297: iconst_0
298: invokevirtual #41
301: ldc           #24
303: invokevirtual #25
306: invokevirtual #28
309: iload         7
311: ifne          318
314: iconst_1
315: goto          319
318: iconst_0
319: invokestatic  #29
322: new           #22
325: dup
326: invokespecial #23
329: ldc           #24
331: invokevirtual #25
334: iload         10
336: invokevirtual #41
339: ldc           #27
341: invokevirtual #25
344: iconst_0
345: invokevirtual #41
348: ldc           #24
350: invokevirtual #25
353: invokevirtual #28
356: iload         10
358: ifne          365
361: iconst_1
362: goto          366
365: iconst_0
366: invokestatic  #29
369: new           #22
372: dup
373: invokespecial #23
376: ldc           #24
378: invokevirtual #25
381: iload         11
383: invokevirtual #41
386: ldc           #27
388: invokevirtual #25
391: iconst_0
392: invokevirtual #41
395: ldc           #24
397: invokevirtual #25
400: invokevirtual #28
403: iload         11
405: ifne          412
408: iconst_1
409: goto          413
412: iconst_0
413: invokestatic  #29
416: new           #22
419: dup
420: invokespecial #23
423: ldc           #24
425: invokevirtual #25
428: iload         12
430: invokevirtual #69
433: ldc           #27
435: invokevirtual #25
438: iconst_1
439: invokevirtual #69
442: ldc           #24
444: invokevirtual #25
447: invokevirtual #28
450: iload         12
452: iconst_1
453: if_icmpne     460
456: iconst_1
457: goto          461
460: iconst_0
461: invokestatic  #29
464: new           #22
467: dup
468: invokespecial #23
471: ldc           #24
473: invokevirtual #25
476: iload         13
478: invokevirtual #69
481: ldc           #27
483: invokevirtual #25
486: iconst_0
487: invokevirtual #69
490: ldc           #24
492: invokevirtual #25
495: invokevirtual #28
498: iload         13
500: ifne          507
503: iconst_1
504: goto          508
507: iconst_0
508: invokestatic  #29
511: aload         15
513: invokestatic  #53
516: aload         16
518: invokestatic  #53
521: new           #22
524: dup
525: invokespecial #23
528: ldc           #24
530: invokevirtual #25
533: iload         17
535: invokevirtual #69
538: ldc           #27
540: invokevirtual #25
543: iconst_1
544: invokevirtual #69
547: ldc           #24
549: invokevirtual #25
552: invokevirtual #28
555: iload         17
557: iconst_1
558: if_icmpne     565
561: iconst_1
562: goto          566
565: iconst_0
566: invokestatic  #29
569: new           #22
572: dup
573: invokespecial #23
576: ldc           #24
578: invokevirtual #25
581: iload         18
583: invokevirtual #69
586: ldc           #27
588: invokevirtual #25
591: iconst_0
592: invokevirtual #69
595: ldc           #24
597: invokevirtual #25
600: invokevirtual #28
603: iload         18
605: ifne          612
608: iconst_1
609: goto          613
612: iconst_0
613: invokestatic  #29
616: aload         19
618: invokestatic  #168
621: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test312
Start line: 11869
End line: 0
Method source code: 
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        int int9 = tarArchiveOutputStream4.getCount();
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream10 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream11 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream12 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream11);
        java.lang.String str13 = jarArchiveOutputStream12.getEncoding();
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTF8" + "'", str13, "UTF8");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #872
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: aload_3
67: invokevirtual #60
70: istore        7
72: new           #43
75: dup
76: aload_3
77: invokespecial #95
80: astore        8
82: new           #222
85: dup
86: aload_3
87: invokespecial #223
90: astore        9
92: new           #222
95: dup
96: aload         9
98: invokespecial #223
101: astore        10
103: aload         10
105: invokevirtual #809
108: astore        11
110: new           #22
113: dup
114: invokespecial #23
117: ldc           #24
119: invokevirtual #25
122: lload         4
124: invokevirtual #26
127: ldc           #27
129: invokevirtual #25
132: lconst_0
133: invokevirtual #26
136: ldc           #24
138: invokevirtual #25
141: invokevirtual #28
144: lload         4
146: lconst_0
147: lcmp
148: ifne          155
151: iconst_1
152: goto          156
155: iconst_0
156: invokestatic  #29
159: aload         6
161: invokestatic  #53
164: new           #22
167: dup
168: invokespecial #23
171: ldc           #24
173: invokevirtual #25
176: iload         7
178: invokevirtual #41
181: ldc           #27
183: invokevirtual #25
186: iconst_0
187: invokevirtual #41
190: ldc           #24
192: invokevirtual #25
195: invokevirtual #28
198: iload         7
200: ifne          207
203: iconst_1
204: goto          208
207: iconst_0
208: invokestatic  #29
211: new           #22
214: dup
215: invokespecial #23
218: ldc           #24
220: invokevirtual #25
223: aload         11
225: invokevirtual #25
228: ldc_w         #317
231: invokevirtual #25
234: invokevirtual #28
237: aload         11
239: ldc           #85
241: invokestatic  #154
244: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/src/test/java/org/apache/commons/compress/archivers/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/16/target/test-classes/org/apache/commons/compress/archivers/RegressionTest0.class
Class name: RegressionTest0
Method name: test313
Start line: 11890
End line: 0
Method source code: 
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        org.apache.commons.compress.archivers.ArchiveStreamFactory archiveStreamFactory0 = new org.apache.commons.compress.archivers.ArchiveStreamFactory();
        java.io.OutputStream outputStream2 = null;
        org.apache.commons.compress.archivers.tar.TarArchiveOutputStream tarArchiveOutputStream4 = new org.apache.commons.compress.archivers.tar.TarArchiveOutputStream(outputStream2, "jar");
        tarArchiveOutputStream4.count(0L);
        long long7 = tarArchiveOutputStream4.getBytesWritten();
        org.apache.commons.compress.archivers.ArchiveOutputStream archiveOutputStream8 = archiveStreamFactory0.createArchiveOutputStream("ar", (java.io.OutputStream) tarArchiveOutputStream4);
        org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream zipArchiveOutputStream9 = new org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream((java.io.OutputStream) archiveOutputStream8);
        org.apache.commons.compress.archivers.jar.JarArchiveOutputStream jarArchiveOutputStream10 = new org.apache.commons.compress.archivers.jar.JarArchiveOutputStream((java.io.OutputStream) zipArchiveOutputStream9);
        org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream cpioArchiveOutputStream11 = new org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream((java.io.OutputStream) jarArchiveOutputStream10);
        byte[] byteArray12 = null;
        java.io.InputStream inputStream15 = null;
        org.apache.commons.compress.archivers.jar.JarArchiveInputStream jarArchiveInputStream16 = new org.apache.commons.compress.archivers.jar.JarArchiveInputStream(inputStream15);
        long long17 = jarArchiveInputStream16.getBytesRead();
        long long18 = jarArchiveInputStream16.getBytesRead();
        org.apache.commons.compress.archivers.ar.ArArchiveInputStream arArchiveInputStream19 = new org.apache.commons.compress.archivers.ar.ArArchiveInputStream((java.io.InputStream) jarArchiveInputStream16);
        arArchiveInputStream19.close();
        org.apache.commons.compress.archivers.tar.TarArchiveInputStream tarArchiveInputStream21 = new org.apache.commons.compress.archivers.tar.TarArchiveInputStream((java.io.InputStream) arArchiveInputStream19);
        org.apache.commons.compress.archivers.zip.ZipLong zipLong23 = new org.apache.commons.compress.archivers.zip.ZipLong((long) (short) 0);
        byte[] byteArray24 = zipLong23.getBytes();
        long long25 = org.apache.commons.compress.archivers.zip.ZipLong.getValue(byteArray24);
        int int28 = tarArchiveInputStream21.read(byteArray24, 0, (int) (short) 0);
        boolean boolean30 = org.apache.commons.compress.archivers.ar.ArArchiveInputStream.matches(byteArray24, (int) (short) -1);
        org.apache.commons.compress.archivers.zip.ZipEncoding zipEncoding34 = org.apache.commons.compress.archivers.zip.ZipEncodingHelper.getZipEncoding("UTF8");
        boolean boolean36 = zipEncoding34.canEncode("00");
        java.lang.String str37 = org.apache.commons.compress.archivers.tar.TarUtils.parseName(byteArray24, 8, 0, zipEncoding34);
        boolean boolean40 = org.apache.commons.compress.utils.ArchiveUtils.isEqual(byteArray12, (int) (byte) 88, 8, byteArray24, (int) (byte) 103, 0);
        long long41 = org.apache.commons.compress.archivers.tar.TarUtils.computeCheckSum(byteArray24);
        boolean boolean43 = org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches(byteArray24, 40960);
        try {
            cpioArchiveOutputStream11.write(byteArray24, 0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(archiveOutputStream8);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(zipEncoding34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #873
20: aastore
21: invokevirtual #7
24: pop
25: new           #8
28: dup
29: invokespecial #9
32: astore_1
33: aconst_null
34: astore_2
35: new           #43
38: dup
39: aload_2
40: ldc           #44
42: invokespecial #45
45: astore_3
46: aload_3
47: lconst_0
48: invokevirtual #46
51: aload_3
52: invokevirtual #47
55: lstore        4
57: aload_1
58: ldc           #48
60: aload_3
61: invokevirtual #49
64: astore        6
66: new           #182
69: dup
70: aload         6
72: invokespecial #183
75: astore        7
77: new           #222
80: dup
81: aload         7
83: invokespecial #223
86: astore        8
88: new           #143
91: dup
92: aload         8
94: invokespecial #144
97: astore        9
99: aconst_null
100: astore        10
102: aconst_null
103: astore        11
105: new           #10
108: dup
109: aload         11
111: invokespecial #11
114: astore        12
116: aload         12
118: invokevirtual #12
121: lstore        13
123: aload         12
125: invokevirtual #12
128: lstore        15
130: new           #13
133: dup
134: aload         12
136: invokespecial #14
139: astore        17
141: aload         17
143: invokevirtual #140
146: new           #31
149: dup
150: aload         17
152: invokespecial #32
155: astore        18
157: new           #73
160: dup
161: lconst_0
162: invokespecial #74
165: astore        19
167: aload         19
169: invokevirtual #75
172: astore        20
174: aload         20
176: invokestatic  #209
179: lstore        21
181: aload         18
183: aload         20
185: iconst_0
186: iconst_0
187: invokevirtual #174
190: istore        23
192: aload         20
194: iconst_m1
195: invokestatic  #210
198: istore        24
200: ldc           #85
202: invokestatic  #211
205: astore        25
207: aload         25
209: ldc           #16
211: invokeinterface #212,  2
216: istore        26
218: aload         20
220: bipush        8
222: iconst_0
223: aload         25
225: invokestatic  #213
228: astore        27
230: aload         10
232: bipush        88
234: bipush        8
236: aload         20
238: bipush        103
240: iconst_0
241: invokestatic  #685
244: istore        28
246: aload         20
248: invokestatic  #260
251: lstore        29
253: aload         20
255: ldc           #109
257: invokestatic  #325
260: istore        31
262: aload         9
264: aload         20
266: iconst_0
267: bipush        100
269: invokevirtual #235
272: ldc           #236
274: invokestatic  #20
277: goto          282
280: astore        32
282: new           #22
285: dup
286: invokespecial #23
289: ldc           #24
291: invokevirtual #25
294: lload         4
296: invokevirtual #26
299: ldc           #27
301: invokevirtual #25
304: lconst_0
305: invokevirtual #26
308: ldc           #24
310: invokevirtual #25
313: invokevirtual #28
316: lload         4
318: lconst_0
319: lcmp
320: ifne          327
323: iconst_1
324: goto          328
327: iconst_0
328: invokestatic  #29
331: aload         6
333: invokestatic  #53
336: new           #22
339: dup
340: invokespecial #23
343: ldc           #24
345: invokevirtual #25
348: lload         13
350: invokevirtual #26
353: ldc           #27
355: invokevirtual #25
358: lconst_0
359: invokevirtual #26
362: ldc           #24
364: invokevirtual #25
367: invokevirtual #28
370: lload         13
372: lconst_0
373: lcmp
374: ifne          381
377: iconst_1
378: goto          382
381: iconst_0
382: invokestatic  #29
385: new           #22
388: dup
389: invokespecial #23
392: ldc           #24
394: invokevirtual #25
397: lload         15
399: invokevirtual #26
402: ldc           #27
404: invokevirtual #25
407: lconst_0
408: invokevirtual #26
411: ldc           #24
413: invokevirtual #25
416: invokevirtual #28
419: lload         15
421: lconst_0
422: lcmp
423: ifne          430
426: iconst_1
427: goto          431
430: iconst_0
431: invokestatic  #29
434: aload         20
436: invokestatic  #53
439: aload         20
441: invokestatic  #66
444: ldc           #77
446: invokestatic  #68
449: new           #22
452: dup
453: invokespecial #23
456: ldc           #24
458: invokevirtual #25
461: lload         21
463: invokevirtual #26
466: ldc           #27
468: invokevirtual #25
471: lconst_0
472: invokevirtual #26
475: ldc           #24
477: invokevirtual #25
480: invokevirtual #28
483: lload         21
485: lconst_0
486: lcmp
487: ifne          494
490: iconst_1
491: goto          495
494: iconst_0
495: invokestatic  #29
498: new           #22
501: dup
502: invokespecial #23
505: ldc           #24
507: invokevirtual #25
510: iload         23
512: invokevirtual #41
515: ldc           #27
517: invokevirtual #25
520: iconst_m1
521: invokevirtual #41
524: ldc           #24
526: invokevirtual #25
529: invokevirtual #28
532: iload         23
534: iconst_m1
535: if_icmpne     542
538: iconst_1
539: goto          543
542: iconst_0
543: invokestatic  #29
546: new           #22
549: dup
550: invokespecial #23
553: ldc           #24
555: invokevirtual #25
558: iload         24
560: invokevirtual #69
563: ldc           #27
565: invokevirtual #25
568: iconst_0
569: invokevirtual #69
572: ldc           #24
574: invokevirtual #25
577: invokevirtual #28
580: iload         24
582: ifne          589
585: iconst_1
586: goto          590
589: iconst_0
590: invokestatic  #29
593: aload         25
595: invokestatic  #53
598: new           #22
601: dup
602: invokespecial #23
605: ldc           #24
607: invokevirtual #25
610: iload         26
612: invokevirtual #69
615: ldc           #27
617: invokevirtual #25
620: iconst_1
621: invokevirtual #69
624: ldc           #24
626: invokevirtual #25
629: invokevirtual #28
632: iload         26
634: iconst_1
635: if_icmpne     642
638: iconst_1
639: goto          643
642: iconst_0
643: invokestatic  #29
646: new           #22
649: dup
650: invokespecial #23
653: ldc           #24
655: invokevirtual #25
658: aload         27
660: invokevirtual #25
663: ldc           #219
665: invokevirtual #25
668: invokevirtual #28
671: aload         27
673: ldc           #61
675: invokestatic  #154
678: new           #22
681: dup
682: invokespecial #23
685: ldc           #24
687: invokevirtual #25
690: iload         28
692: invokevirtual #69
695: ldc           #27
697: invokevirtual #25
700: iconst_0
701: invokevirtual #69
704: ldc           #24
706: invokevirtual #25
709: invokevirtual #28
712: iload         28
714: ifne          721
717: iconst_1
718: goto          722
721: iconst_0
722: invokestatic  #29
725: new           #22
728: dup
729: invokespecial #23
732: ldc           #24
734: invokevirtual #25
737: lload         29
739: invokevirtual #26
742: ldc           #27
744: invokevirtual #25
747: lconst_0
748: invokevirtual #26
751: ldc           #24
753: invokevirtual #25
756: invokevirtual #28
759: lload         29
761: lconst_0
762: lcmp
763: ifne          770
766: iconst_1
767: goto          771
770: iconst_0
771: invokestatic  #29
774: new           #22
777: dup
778: invokespecial #23
781: ldc           #24
783: invokevirtual #25
786: iload         31
788: invokevirtual #69
791: ldc           #27
793: invokevirtual #25
796: iconst_0
797: invokevirtual #69
800: ldc           #24
802: invokevirtual #25
805: invokevirtual #28
808: iload         31
810: ifne          817
813: iconst_1
814: goto          818
817: iconst_0
818: invokestatic  #29
821: return
Exception table:
from    to  target type
262   277   280   Class java/lang/IndexOutOfBoundsException
