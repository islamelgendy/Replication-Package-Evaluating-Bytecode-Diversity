Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.class
Class name: PythonTruncatedBzip2Test
Method name: testTruncatedData
Start line: 75
End line: 79
Method source code: 
    public void testTruncatedData() throws IOException {
        System.out.println("Attempt to read the whole thing in, should throw ...");
        ByteBuffer buffer = ByteBuffer.allocate(8192);
        bz2Channel.read(buffer);
    }
Method byte code: 
0: getstatic     #19
3: ldc           #20
5: invokevirtual #21
8: sipush        8192
11: invokestatic  #22
14: astore_1
15: aload_0
16: getfield      #17
19: aload_1
20: invokeinterface #23,  2
25: pop
26: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/PythonTruncatedBzip2Test.class
Class name: PythonTruncatedBzip2Test
Method name: testPartialReadTruncatedData
Start line: 84
End line: 99
Method source code: 
    public void testPartialReadTruncatedData() throws IOException {

        final int length = TEXT.length();
        ByteBuffer buffer = ByteBuffer.allocate(length);
        bz2Channel.read(buffer);

        assertArrayEquals(Arrays.copyOfRange(TEXT.getBytes(), 0, length),
                buffer.array());

        buffer = ByteBuffer.allocate(1);
        try {
            bz2Channel.read(buffer);
            Assert.fail("The read should have thrown.");
        } catch (IOException e) {
        }
    }
Method byte code: 
0: getstatic     #6
3: invokevirtual #24
6: istore_1
7: iload_1
8: invokestatic  #22
11: astore_2
12: aload_0
13: getfield      #17
16: aload_2
17: invokeinterface #23,  2
22: pop
23: getstatic     #6
26: invokevirtual #7
29: iconst_0
30: iload_1
31: invokestatic  #12
34: aload_2
35: invokevirtual #25
38: invokestatic  #26
41: iconst_1
42: invokestatic  #22
45: astore_2
46: aload_0
47: getfield      #17
50: aload_2
51: invokeinterface #23,  2
56: pop
57: ldc           #27
59: invokestatic  #28
62: goto          66
65: astore_3
66: return
Exception table:
from    to  target type
46    62    65   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.class
Class name: BZip2CompressorInputStream_ESTest
Method name: test0
Start line: 20
End line: 0
Method source code: 
  public void test0()  throws Throwable  {
      BZip2CompressorInputStream bZip2CompressorInputStream0 = null;
      try {
        bZip2CompressorInputStream0 = new BZip2CompressorInputStream((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream", e);
      }
  }
Method byte code: 
0: aconst_null
1: astore_1
2: new           #2
5: dup
6: aconst_null
7: checkcast     #3
10: invokespecial #4
13: astore_1
14: ldc           #5
16: invokestatic  #6
19: goto          29
22: astore_2
23: ldc           #8
25: aload_2
26: invokestatic  #9
29: return
Exception table:
from    to  target type
2    19    22   Class java/lang/Throwable
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.class
Class name: BZip2CompressorInputStream_ESTest
Method name: test1
Start line: 35
End line: 0
Method source code: 
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BZip2CompressorInputStream bZip2CompressorInputStream0 = null;
      try {
        bZip2CompressorInputStream0 = new BZip2CompressorInputStream(byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream", e);
      }
  }
Method byte code: 
0: iconst_0
1: newarray       byte
3: astore_1
4: new           #10
7: dup
8: aload_1
9: invokespecial #11
12: astore_2
13: aconst_null
14: astore_3
15: new           #2
18: dup
19: aload_2
20: invokespecial #4
23: astore_3
24: ldc           #5
26: invokestatic  #6
29: goto          41
32: astore        4
34: ldc           #8
36: aload         4
38: invokestatic  #9
41: return
Exception table:
from    to  target type
15    29    32   Class java/lang/Throwable
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.class
Class name: BZip2CompressorInputStream_ESTest
Method name: test2
Start line: 52
End line: 0
Method source code: 
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BZip2CompressorInputStream bZip2CompressorInputStream0 = null;
      try {
        bZip2CompressorInputStream0 = new BZip2CompressorInputStream(byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream", e);
      }
  }
Method byte code: 
0: iconst_1
1: newarray       byte
3: astore_1
4: aload_1
5: iconst_0
6: bipush        66
8: bastore
9: new           #10
12: dup
13: aload_1
14: invokespecial #11
17: astore_2
18: aconst_null
19: astore_3
20: new           #2
23: dup
24: aload_2
25: invokespecial #4
28: astore_3
29: ldc           #5
31: invokestatic  #6
34: goto          46
37: astore        4
39: ldc           #8
41: aload         4
43: invokestatic  #9
46: return
Exception table:
from    to  target type
20    34    37   Class java/lang/Throwable
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.class
Class name: BZip2CompressorInputStream_ESTest
Method name: test3
Start line: 70
End line: 0
Method source code: 
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)90;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BZip2CompressorInputStream bZip2CompressorInputStream0 = null;
      try {
        bZip2CompressorInputStream0 = new BZip2CompressorInputStream(byteArrayInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream", e);
      }
  }
Method byte code: 
0: iconst_2
1: newarray       byte
3: astore_1
4: aload_1
5: iconst_0
6: bipush        66
8: bastore
9: aload_1
10: iconst_1
11: bipush        90
13: bastore
14: new           #10
17: dup
18: aload_1
19: invokespecial #11
22: astore_2
23: aconst_null
24: astore_3
25: new           #2
28: dup
29: aload_2
30: invokespecial #4
33: astore_3
34: ldc           #5
36: invokestatic  #6
39: goto          51
42: astore        4
44: ldc           #8
46: aload         4
48: invokestatic  #9
51: return
Exception table:
from    to  target type
25    39    42   Class java/lang/Throwable
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.class
Class name: BZip2CompressorInputStream_ESTest
Method name: test4
Start line: 89
End line: 0
Method source code: 
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = BZip2CompressorInputStream.matches(byteArray0, (byte)90);
      assertFalse(boolean0);
  }
Method byte code: 
0: iconst_2
1: newarray       byte
3: astore_1
4: aload_1
5: bipush        90
7: invokestatic  #12
10: istore_2
11: iload_2
12: invokestatic  #13
15: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.class
Class name: BZip2CompressorInputStream_ESTest
Method name: test5
Start line: 96
End line: 0
Method source code: 
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = BZip2CompressorInputStream.matches(byteArray0, (byte)0);
      assertFalse(boolean0);
  }
Method byte code: 
0: iconst_1
1: newarray       byte
3: astore_1
4: aload_1
5: iconst_0
6: invokestatic  #12
9: istore_2
10: iload_2
11: invokestatic  #13
14: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.class
Class name: BZip2CompressorInputStream_ESTest
Method name: test6
Start line: 103
End line: 0
Method source code: 
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      boolean boolean0 = BZip2CompressorInputStream.matches(byteArray0, (byte)90);
      assertFalse(boolean0);
  }
Method byte code: 
0: iconst_2
1: newarray       byte
3: astore_1
4: aload_1
5: iconst_0
6: bipush        66
8: bastore
9: aload_1
10: bipush        90
12: invokestatic  #12
15: istore_2
16: iload_2
17: invokestatic  #13
20: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream_ESTest.class
Class name: BZip2CompressorInputStream_ESTest
Method name: test7
Start line: 111
End line: 0
Method source code: 
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)90;
      try { 
        BZip2CompressorInputStream.matches(byteArray0, (byte)90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         verifyException("org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream", e);
      }
  }
Method byte code: 
0: iconst_2
1: newarray       byte
3: astore_1
4: aload_1
5: iconst_0
6: bipush        66
8: bastore
9: aload_1
10: iconst_1
11: bipush        90
13: bastore
14: aload_1
15: bipush        90
17: invokestatic  #12
20: pop
21: ldc           #14
23: invokestatic  #6
26: goto          36
29: astore_2
30: ldc           #8
32: aload_2
33: invokestatic  #9
36: return
Exception table:
from    to  target type
14    26    29   Class java/lang/ArrayIndexOutOfBoundsException
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test01
Start line: 12
End line: 0
Method source code: 
    public void test01() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test01");
        java.io.InputStream inputStream0 = null;
        try {
            org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream bZip2CompressorInputStream2 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream(inputStream0, false);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No InputStream");
        } catch (java.io.IOException e) {
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #6
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: iconst_0
32: invokespecial #9
35: astore_2
36: ldc           #10
38: invokestatic  #11
41: goto          45
44: astore_2
45: return
Exception table:
from    to  target type
26    41    44   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test02
Start line: 26
End line: 0
Method source code: 
    public void test02() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test02");
        byte[] byteArray0 = new byte[] {};
        boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (short) 0);
        java.lang.Class<?> wildcardClass3 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #13
19: aastore
20: invokevirtual #7
23: pop
24: iconst_0
25: newarray       byte
27: astore_1
28: aload_1
29: iconst_0
30: invokestatic  #14
33: istore_2
34: aload_1
35: invokevirtual #15
38: astore_3
39: aload_1
40: invokestatic  #16
43: aload_1
44: invokestatic  #17
47: ldc           #18
49: invokestatic  #19
52: new           #20
55: dup
56: invokespecial #21
59: ldc           #22
61: invokevirtual #23
64: iload_2
65: invokevirtual #24
68: ldc           #25
70: invokevirtual #23
73: iconst_0
74: invokevirtual #24
77: ldc           #22
79: invokevirtual #23
82: invokevirtual #26
85: iload_2
86: ifne          93
89: iconst_1
90: goto          94
93: iconst_0
94: invokestatic  #27
97: aload_3
98: invokestatic  #16
101: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test03
Start line: 39
End line: 0
Method source code: 
    public void test03() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test03");
        java.io.InputStream inputStream0 = null;
        try {
            org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream bZip2CompressorInputStream1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No InputStream");
        } catch (java.io.IOException e) {
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #28
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #29
34: astore_2
35: ldc           #10
37: invokestatic  #11
40: goto          44
43: astore_2
44: return
Exception table:
from    to  target type
26    40    43   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test04
Start line: 53
End line: 0
Method source code: 
    public void test04() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test04");
        java.io.InputStream inputStream0 = null;
        try {
            org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream bZip2CompressorInputStream2 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream(inputStream0, true);
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: No InputStream");
        } catch (java.io.IOException e) {
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #30
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: iconst_1
32: invokespecial #9
35: astore_2
36: ldc           #10
38: invokestatic  #11
41: goto          45
44: astore_2
45: return
Exception table:
from    to  target type
26    41    44   Class java/io/IOException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test05
Start line: 67
End line: 0
Method source code: 
    public void test05() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test05");
        byte[] byteArray0 = null;
        try {
            boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #31
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: aload_1
27: bipush        9
29: invokestatic  #14
32: istore_2
33: ldc           #32
35: invokestatic  #11
38: goto          42
41: astore_2
42: return
Exception table:
from    to  target type
26    38    41   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test06
Start line: 81
End line: 0
Method source code: 
    public void test06() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test06");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int2 = data1.origPtr;
        byte[] byteArray3 = data1.sendMTFValues2_pos;
        byte[] byteArray4 = data1.generateMTFValues_yy;
        byte[] byteArray5 = data1.generateMTFValues_yy;
        boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #34
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #37
37: istore_2
38: aload_1
39: getfield      #38
42: astore_3
43: aload_1
44: getfield      #39
47: astore        4
49: aload_1
50: getfield      #39
53: astore        5
55: aload         5
57: bipush        100
59: invokestatic  #14
62: istore        6
64: new           #20
67: dup
68: invokespecial #21
71: ldc           #22
73: invokevirtual #23
76: iload_2
77: invokevirtual #40
80: ldc           #25
82: invokevirtual #23
85: iconst_0
86: invokevirtual #40
89: ldc           #22
91: invokevirtual #23
94: invokevirtual #26
97: iload_2
98: ifne          105
101: iconst_1
102: goto          106
105: iconst_0
106: invokestatic  #27
109: aload_3
110: invokestatic  #16
113: aload_3
114: invokestatic  #17
117: ldc           #41
119: invokestatic  #19
122: aload         4
124: invokestatic  #16
127: aload         4
129: invokestatic  #17
132: ldc           #42
134: invokestatic  #19
137: aload         5
139: invokestatic  #16
142: aload         5
144: invokestatic  #17
147: ldc           #42
149: invokestatic  #19
152: new           #20
155: dup
156: invokespecial #21
159: ldc           #22
161: invokevirtual #23
164: iload         6
166: invokevirtual #24
169: ldc           #25
171: invokevirtual #23
174: iconst_0
175: invokevirtual #24
178: ldc           #22
180: invokevirtual #23
183: invokevirtual #26
186: iload         6
188: ifne          195
191: iconst_1
192: goto          196
195: iconst_0
196: invokestatic  #27
199: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test07
Start line: 101
End line: 0
Method source code: 
    public void test07() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test07");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int2 = data1.origPtr;
        byte[] byteArray3 = data1.sendMTFValues2_pos;
        byte[] byteArray4 = data1.generateMTFValues_yy;
        byte[] byteArray5 = data1.generateMTFValues_yy;
        boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, (int) '#');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #43
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #37
37: istore_2
38: aload_1
39: getfield      #38
42: astore_3
43: aload_1
44: getfield      #39
47: astore        4
49: aload_1
50: getfield      #39
53: astore        5
55: aload         5
57: bipush        35
59: invokestatic  #14
62: istore        6
64: new           #20
67: dup
68: invokespecial #21
71: ldc           #22
73: invokevirtual #23
76: iload_2
77: invokevirtual #40
80: ldc           #25
82: invokevirtual #23
85: iconst_0
86: invokevirtual #40
89: ldc           #22
91: invokevirtual #23
94: invokevirtual #26
97: iload_2
98: ifne          105
101: iconst_1
102: goto          106
105: iconst_0
106: invokestatic  #27
109: aload_3
110: invokestatic  #16
113: aload_3
114: invokestatic  #17
117: ldc           #41
119: invokestatic  #19
122: aload         4
124: invokestatic  #16
127: aload         4
129: invokestatic  #17
132: ldc           #42
134: invokestatic  #19
137: aload         5
139: invokestatic  #16
142: aload         5
144: invokestatic  #17
147: ldc           #42
149: invokestatic  #19
152: new           #20
155: dup
156: invokespecial #21
159: ldc           #22
161: invokevirtual #23
164: iload         6
166: invokevirtual #24
169: ldc           #25
171: invokevirtual #23
174: iconst_0
175: invokevirtual #24
178: ldc           #22
180: invokevirtual #23
183: invokevirtual #26
186: iload         6
188: ifne          195
191: iconst_1
192: goto          196
195: iconst_0
196: invokestatic  #27
199: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test08
Start line: 121
End line: 0
Method source code: 
    public void test08() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test08");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int2 = data1.origPtr;
        org.apache.commons.compress.compressors.bzip2.BlockSort blockSort3 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data1);
        data1.origPtr = 20;
        org.apache.commons.compress.compressors.bzip2.BlockSort blockSort6 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data1);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data8 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        short[] shortArray9 = data8.sendMTFValues_cost;
        int[] intArray10 = data8.parent;
        blockSort6.fallbackSort(data8, (int) ' ');
        int[] intArray13 = null;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data15 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int16 = data15.origPtr;
        byte[] byteArray17 = data15.sendMTFValues2_pos;
        byte[] byteArray18 = data15.generateMTFValues_yy;
        byte[] byteArray19 = data15.generateMTFValues_yy;
        byte[] byteArray20 = data15.unseqToSeq;
        boolean boolean22 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray20, (int) (byte) 1);
        try {
            blockSort6.fallbackSort(intArray13, byteArray20, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #44
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #37
37: istore_2
38: new           #45
41: dup
42: aload_1
43: invokespecial #46
46: astore_3
47: aload_1
48: bipush        20
50: putfield      #37
53: new           #45
56: dup
57: aload_1
58: invokespecial #46
61: astore        4
63: new           #35
66: dup
67: iconst_4
68: invokespecial #36
71: astore        5
73: aload         5
75: getfield      #47
78: astore        6
80: aload         5
82: getfield      #48
85: astore        7
87: aload         4
89: aload         5
91: bipush        32
93: invokevirtual #49
96: aconst_null
97: astore        8
99: new           #35
102: dup
103: iconst_4
104: invokespecial #36
107: astore        9
109: aload         9
111: getfield      #37
114: istore        10
116: aload         9
118: getfield      #38
121: astore        11
123: aload         9
125: getfield      #39
128: astore        12
130: aload         9
132: getfield      #39
135: astore        13
137: aload         9
139: getfield      #50
142: astore        14
144: aload         14
146: iconst_1
147: invokestatic  #14
150: istore        15
152: aload         4
154: aload         8
156: aload         14
158: iconst_1
159: invokevirtual #51
162: ldc           #32
164: invokestatic  #11
167: goto          172
170: astore        16
172: new           #20
175: dup
176: invokespecial #21
179: ldc           #22
181: invokevirtual #23
184: iload_2
185: invokevirtual #40
188: ldc           #25
190: invokevirtual #23
193: iconst_0
194: invokevirtual #40
197: ldc           #22
199: invokevirtual #23
202: invokevirtual #26
205: iload_2
206: ifne          213
209: iconst_1
210: goto          214
213: iconst_0
214: invokestatic  #27
217: aload         6
219: invokestatic  #16
222: aload         6
224: invokestatic  #52
227: ldc           #41
229: invokestatic  #19
232: aload         7
234: invokestatic  #16
237: aload         7
239: invokestatic  #53
242: ldc           #54
244: invokestatic  #19
247: new           #20
250: dup
251: invokespecial #21
254: ldc           #22
256: invokevirtual #23
259: iload         10
261: invokevirtual #40
264: ldc           #25
266: invokevirtual #23
269: iconst_0
270: invokevirtual #40
273: ldc           #22
275: invokevirtual #23
278: invokevirtual #26
281: iload         10
283: ifne          290
286: iconst_1
287: goto          291
290: iconst_0
291: invokestatic  #27
294: aload         11
296: invokestatic  #16
299: aload         11
301: invokestatic  #17
304: ldc           #41
306: invokestatic  #19
309: aload         12
311: invokestatic  #16
314: aload         12
316: invokestatic  #17
319: ldc           #42
321: invokestatic  #19
324: aload         13
326: invokestatic  #16
329: aload         13
331: invokestatic  #17
334: ldc           #42
336: invokestatic  #19
339: aload         14
341: invokestatic  #16
344: aload         14
346: invokestatic  #17
349: ldc           #42
351: invokestatic  #19
354: new           #20
357: dup
358: invokespecial #21
361: ldc           #22
363: invokevirtual #23
366: iload         15
368: invokevirtual #24
371: ldc           #25
373: invokevirtual #23
376: iconst_0
377: invokevirtual #24
380: ldc           #22
382: invokevirtual #23
385: invokevirtual #26
388: iload         15
390: ifne          397
393: iconst_1
394: goto          398
397: iconst_0
398: invokestatic  #27
401: return
Exception table:
from    to  target type
152   167   170   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test09
Start line: 166
End line: 0
Method source code: 
    public void test09() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test09");
        byte[] byteArray0 = new byte[] {};
        boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (short) 0);
        boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (-594764567));
        try {
            boolean boolean6 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #55
19: aastore
20: invokevirtual #7
23: pop
24: iconst_0
25: newarray       byte
27: astore_1
28: aload_1
29: iconst_0
30: invokestatic  #14
33: istore_2
34: aload_1
35: ldc           #56
37: invokestatic  #14
40: istore_3
41: aload_1
42: bipush        100
44: invokestatic  #14
47: istore        4
49: ldc           #57
51: invokestatic  #11
54: goto          59
57: astore        4
59: aload_1
60: invokestatic  #16
63: aload_1
64: invokestatic  #17
67: ldc           #18
69: invokestatic  #19
72: new           #20
75: dup
76: invokespecial #21
79: ldc           #22
81: invokevirtual #23
84: iload_2
85: invokevirtual #24
88: ldc           #25
90: invokevirtual #23
93: iconst_0
94: invokevirtual #24
97: ldc           #22
99: invokevirtual #23
102: invokevirtual #26
105: iload_2
106: ifne          113
109: iconst_1
110: goto          114
113: iconst_0
114: invokestatic  #27
117: new           #20
120: dup
121: invokespecial #21
124: ldc           #22
126: invokevirtual #23
129: iload_3
130: invokevirtual #24
133: ldc           #25
135: invokevirtual #23
138: iconst_0
139: invokevirtual #24
142: ldc           #22
144: invokevirtual #23
147: invokevirtual #26
150: iload_3
151: ifne          158
154: iconst_1
155: goto          159
158: iconst_0
159: invokestatic  #27
162: return
Exception table:
from    to  target type
41    54    57   Class java/lang/ArrayIndexOutOfBoundsException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test10
Start line: 186
End line: 0
Method source code: 
    public void test10() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test10");
        byte[] byteArray0 = null;
        boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #59
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: aload_1
27: iconst_1
28: invokestatic  #14
31: istore_2
32: new           #20
35: dup
36: invokespecial #21
39: ldc           #22
41: invokevirtual #23
44: iload_2
45: invokevirtual #24
48: ldc           #25
50: invokevirtual #23
53: iconst_0
54: invokevirtual #24
57: ldc           #22
59: invokevirtual #23
62: invokevirtual #26
65: iload_2
66: ifne          73
69: iconst_1
70: goto          74
73: iconst_0
74: invokestatic  #27
77: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test11
Start line: 195
End line: 0
Method source code: 
    public void test11() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test11");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int2 = data1.origPtr;
        byte[] byteArray3 = data1.sendMTFValues2_pos;
        int[] intArray4 = data1.mtfFreq;
        byte[] byteArray5 = data1.unseqToSeq;
        boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, 1254728195);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #60
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #37
37: istore_2
38: aload_1
39: getfield      #38
42: astore_3
43: aload_1
44: getfield      #61
47: astore        4
49: aload_1
50: getfield      #50
53: astore        5
55: aload         5
57: ldc           #62
59: invokestatic  #14
62: istore        6
64: new           #20
67: dup
68: invokespecial #21
71: ldc           #22
73: invokevirtual #23
76: iload_2
77: invokevirtual #40
80: ldc           #25
82: invokevirtual #23
85: iconst_0
86: invokevirtual #40
89: ldc           #22
91: invokevirtual #23
94: invokevirtual #26
97: iload_2
98: ifne          105
101: iconst_1
102: goto          106
105: iconst_0
106: invokestatic  #27
109: aload_3
110: invokestatic  #16
113: aload_3
114: invokestatic  #17
117: ldc           #41
119: invokestatic  #19
122: aload         4
124: invokestatic  #16
127: aload         4
129: invokestatic  #53
132: ldc           #63
134: invokestatic  #19
137: aload         5
139: invokestatic  #16
142: aload         5
144: invokestatic  #17
147: ldc           #42
149: invokestatic  #19
152: new           #20
155: dup
156: invokespecial #21
159: ldc           #22
161: invokevirtual #23
164: iload         6
166: invokevirtual #24
169: ldc           #25
171: invokevirtual #23
174: iconst_0
175: invokevirtual #24
178: ldc           #22
180: invokevirtual #23
183: invokevirtual #26
186: iload         6
188: ifne          195
191: iconst_1
192: goto          196
195: iconst_0
196: invokestatic  #27
199: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test12
Start line: 215
End line: 0
Method source code: 
    public void test12() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test12");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int2 = data1.origPtr;
        byte[] byteArray3 = data1.sendMTFValues2_pos;
        byte[] byteArray4 = data1.generateMTFValues_yy;
        byte[] byteArray5 = data1.generateMTFValues_yy;
        byte[] byteArray6 = data1.unseqToSeq;
        boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, 0);
        java.lang.Class<?> wildcardClass9 = byteArray6.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #64
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #37
37: istore_2
38: aload_1
39: getfield      #38
42: astore_3
43: aload_1
44: getfield      #39
47: astore        4
49: aload_1
50: getfield      #39
53: astore        5
55: aload_1
56: getfield      #50
59: astore        6
61: aload         6
63: iconst_0
64: invokestatic  #14
67: istore        7
69: aload         6
71: invokevirtual #15
74: astore        8
76: new           #20
79: dup
80: invokespecial #21
83: ldc           #22
85: invokevirtual #23
88: iload_2
89: invokevirtual #40
92: ldc           #25
94: invokevirtual #23
97: iconst_0
98: invokevirtual #40
101: ldc           #22
103: invokevirtual #23
106: invokevirtual #26
109: iload_2
110: ifne          117
113: iconst_1
114: goto          118
117: iconst_0
118: invokestatic  #27
121: aload_3
122: invokestatic  #16
125: aload_3
126: invokestatic  #17
129: ldc           #41
131: invokestatic  #19
134: aload         4
136: invokestatic  #16
139: aload         4
141: invokestatic  #17
144: ldc           #42
146: invokestatic  #19
149: aload         5
151: invokestatic  #16
154: aload         5
156: invokestatic  #17
159: ldc           #42
161: invokestatic  #19
164: aload         6
166: invokestatic  #16
169: aload         6
171: invokestatic  #17
174: ldc           #42
176: invokestatic  #19
179: new           #20
182: dup
183: invokespecial #21
186: ldc           #22
188: invokevirtual #23
191: iload         7
193: invokevirtual #24
196: ldc           #25
198: invokevirtual #23
201: iconst_0
202: invokevirtual #24
205: ldc           #22
207: invokevirtual #23
210: invokevirtual #26
213: iload         7
215: ifne          222
218: iconst_1
219: goto          223
222: iconst_0
223: invokestatic  #27
226: aload         8
228: invokestatic  #16
231: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test13
Start line: 240
End line: 0
Method source code: 
    public void test13() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test13");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        short[] shortArray2 = data1.sendMTFValues_cost;
        byte[] byteArray3 = data1.unseqToSeq;
        boolean boolean5 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray3, (int) (short) 1);
        java.lang.Class<?> wildcardClass6 = byteArray3.getClass();
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #65
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #47
37: astore_2
38: aload_1
39: getfield      #50
42: astore_3
43: aload_3
44: iconst_1
45: invokestatic  #14
48: istore        4
50: aload_3
51: invokevirtual #15
54: astore        5
56: aload_2
57: invokestatic  #16
60: aload_2
61: invokestatic  #52
64: ldc           #41
66: invokestatic  #19
69: aload_3
70: invokestatic  #16
73: aload_3
74: invokestatic  #17
77: ldc           #42
79: invokestatic  #19
82: new           #20
85: dup
86: invokespecial #21
89: ldc           #22
91: invokevirtual #23
94: iload         4
96: invokevirtual #24
99: ldc           #25
101: invokevirtual #23
104: iconst_0
105: invokevirtual #24
108: ldc           #22
110: invokevirtual #23
113: invokevirtual #26
116: iload         4
118: ifne          125
121: iconst_1
122: goto          126
125: iconst_0
126: invokestatic  #27
129: aload         5
131: invokestatic  #16
134: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test14
Start line: 257
End line: 0
Method source code: 
    public void test14() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test14");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int2 = data1.origPtr;
        byte[][] byteArray3 = data1.sendMTFValues_len;
        short[] shortArray4 = data1.sendMTFValues_cost;
        byte[] byteArray5 = data1.sendMTFValues2_pos;
        org.apache.commons.compress.compressors.bzip2.BlockSort blockSort6 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data1);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data8 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int9 = data8.origPtr;
        byte[] byteArray10 = data8.sendMTFValues2_pos;
        byte[] byteArray11 = data8.generateMTFValues_yy;
        blockSort6.fallbackSort(data8, 0);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data15 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int16 = data15.origPtr;
        byte[] byteArray17 = data15.sendMTFValues2_pos;
        byte[] byteArray18 = data15.generateMTFValues_yy;
        byte[] byteArray19 = data15.unseqToSeq;
        int[] intArray20 = data15.parent;
        boolean[] booleanArray21 = data15.sentMTFValues4_inUse16;
        blockSort6.fallbackSort(data15, 1);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data25 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int26 = data25.origPtr;
        byte[] byteArray27 = data25.sendMTFValues2_pos;
        int int28 = data25.origPtr;
        blockSort6.mainSort(data25, 50);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data32 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int33 = data32.origPtr;
        byte[] byteArray34 = data32.sendMTFValues2_pos;
        byte[] byteArray35 = data32.generateMTFValues_yy;
        byte[] byteArray36 = data32.unseqToSeq;
        int[] intArray37 = data32.parent;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data39 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int40 = data39.origPtr;
        byte[] byteArray41 = data39.unseqToSeq;
        boolean boolean43 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray41, 0);
        blockSort6.fallbackSort(intArray37, byteArray41, 4);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data47 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        byte[][] byteArray48 = data47.sendMTFValues_len;
        boolean[] booleanArray49 = data47.inUse;
        int[] intArray50 = data47.mtfFreq;
        byte[][] byteArray51 = data47.sendMTFValues_len;
        blockSort6.mainSort(data47, (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray51);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #66
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #37
37: istore_2
38: aload_1
39: getfield      #67
42: astore_3
43: aload_1
44: getfield      #47
47: astore        4
49: aload_1
50: getfield      #38
53: astore        5
55: new           #45
58: dup
59: aload_1
60: invokespecial #46
63: astore        6
65: new           #35
68: dup
69: iconst_4
70: invokespecial #36
73: astore        7
75: aload         7
77: getfield      #37
80: istore        8
82: aload         7
84: getfield      #38
87: astore        9
89: aload         7
91: getfield      #39
94: astore        10
96: aload         6
98: aload         7
100: iconst_0
101: invokevirtual #49
104: new           #35
107: dup
108: iconst_4
109: invokespecial #36
112: astore        11
114: aload         11
116: getfield      #37
119: istore        12
121: aload         11
123: getfield      #38
126: astore        13
128: aload         11
130: getfield      #39
133: astore        14
135: aload         11
137: getfield      #50
140: astore        15
142: aload         11
144: getfield      #48
147: astore        16
149: aload         11
151: getfield      #68
154: astore        17
156: aload         6
158: aload         11
160: iconst_1
161: invokevirtual #49
164: new           #35
167: dup
168: iconst_4
169: invokespecial #36
172: astore        18
174: aload         18
176: getfield      #37
179: istore        19
181: aload         18
183: getfield      #38
186: astore        20
188: aload         18
190: getfield      #37
193: istore        21
195: aload         6
197: aload         18
199: bipush        50
201: invokevirtual #69
204: new           #35
207: dup
208: iconst_4
209: invokespecial #36
212: astore        22
214: aload         22
216: getfield      #37
219: istore        23
221: aload         22
223: getfield      #38
226: astore        24
228: aload         22
230: getfield      #39
233: astore        25
235: aload         22
237: getfield      #50
240: astore        26
242: aload         22
244: getfield      #48
247: astore        27
249: new           #35
252: dup
253: iconst_4
254: invokespecial #36
257: astore        28
259: aload         28
261: getfield      #37
264: istore        29
266: aload         28
268: getfield      #50
271: astore        30
273: aload         30
275: iconst_0
276: invokestatic  #14
279: istore        31
281: aload         6
283: aload         27
285: aload         30
287: iconst_4
288: invokevirtual #51
291: new           #35
294: dup
295: iconst_4
296: invokespecial #36
299: astore        32
301: aload         32
303: getfield      #67
306: astore        33
308: aload         32
310: getfield      #70
313: astore        34
315: aload         32
317: getfield      #61
320: astore        35
322: aload         32
324: getfield      #67
327: astore        36
329: aload         6
331: aload         32
333: iconst_1
334: invokevirtual #69
337: new           #20
340: dup
341: invokespecial #21
344: ldc           #22
346: invokevirtual #23
349: iload_2
350: invokevirtual #40
353: ldc           #25
355: invokevirtual #23
358: iconst_0
359: invokevirtual #40
362: ldc           #22
364: invokevirtual #23
367: invokevirtual #26
370: iload_2
371: ifne          378
374: iconst_1
375: goto          379
378: iconst_0
379: invokestatic  #27
382: aload_3
383: invokestatic  #16
386: aload         4
388: invokestatic  #16
391: aload         4
393: invokestatic  #52
396: ldc           #41
398: invokestatic  #19
401: aload         5
403: invokestatic  #16
406: aload         5
408: invokestatic  #17
411: ldc           #41
413: invokestatic  #19
416: new           #20
419: dup
420: invokespecial #21
423: ldc           #22
425: invokevirtual #23
428: iload         8
430: invokevirtual #40
433: ldc           #25
435: invokevirtual #23
438: iconst_0
439: invokevirtual #40
442: ldc           #22
444: invokevirtual #23
447: invokevirtual #26
450: iload         8
452: ifne          459
455: iconst_1
456: goto          460
459: iconst_0
460: invokestatic  #27
463: aload         9
465: invokestatic  #16
468: aload         9
470: invokestatic  #17
473: ldc           #41
475: invokestatic  #19
478: aload         10
480: invokestatic  #16
483: aload         10
485: invokestatic  #17
488: ldc           #42
490: invokestatic  #19
493: new           #20
496: dup
497: invokespecial #21
500: ldc           #22
502: invokevirtual #23
505: iload         12
507: invokevirtual #40
510: ldc           #25
512: invokevirtual #23
515: iconst_0
516: invokevirtual #40
519: ldc           #22
521: invokevirtual #23
524: invokevirtual #26
527: iload         12
529: ifne          536
532: iconst_1
533: goto          537
536: iconst_0
537: invokestatic  #27
540: aload         13
542: invokestatic  #16
545: aload         13
547: invokestatic  #17
550: ldc           #41
552: invokestatic  #19
555: aload         14
557: invokestatic  #16
560: aload         14
562: invokestatic  #17
565: ldc           #42
567: invokestatic  #19
570: aload         15
572: invokestatic  #16
575: aload         15
577: invokestatic  #17
580: ldc           #42
582: invokestatic  #19
585: aload         16
587: invokestatic  #16
590: aload         16
592: invokestatic  #53
595: ldc           #54
597: invokestatic  #19
600: aload         17
602: invokestatic  #16
605: aload         17
607: invokestatic  #71
610: ldc           #72
612: invokestatic  #19
615: new           #20
618: dup
619: invokespecial #21
622: ldc           #22
624: invokevirtual #23
627: iload         19
629: invokevirtual #40
632: ldc           #25
634: invokevirtual #23
637: iconst_0
638: invokevirtual #40
641: ldc           #22
643: invokevirtual #23
646: invokevirtual #26
649: iload         19
651: ifne          658
654: iconst_1
655: goto          659
658: iconst_0
659: invokestatic  #27
662: aload         20
664: invokestatic  #16
667: aload         20
669: invokestatic  #17
672: ldc           #41
674: invokestatic  #19
677: new           #20
680: dup
681: invokespecial #21
684: ldc           #22
686: invokevirtual #23
689: iload         21
691: invokevirtual #40
694: ldc           #25
696: invokevirtual #23
699: iconst_0
700: invokevirtual #40
703: ldc           #22
705: invokevirtual #23
708: invokevirtual #26
711: iload         21
713: ifne          720
716: iconst_1
717: goto          721
720: iconst_0
721: invokestatic  #27
724: new           #20
727: dup
728: invokespecial #21
731: ldc           #22
733: invokevirtual #23
736: iload         23
738: invokevirtual #40
741: ldc           #25
743: invokevirtual #23
746: iconst_0
747: invokevirtual #40
750: ldc           #22
752: invokevirtual #23
755: invokevirtual #26
758: iload         23
760: ifne          767
763: iconst_1
764: goto          768
767: iconst_0
768: invokestatic  #27
771: aload         24
773: invokestatic  #16
776: aload         24
778: invokestatic  #17
781: ldc           #41
783: invokestatic  #19
786: aload         25
788: invokestatic  #16
791: aload         25
793: invokestatic  #17
796: ldc           #42
798: invokestatic  #19
801: aload         26
803: invokestatic  #16
806: aload         26
808: invokestatic  #17
811: ldc           #42
813: invokestatic  #19
816: aload         27
818: invokestatic  #16
821: aload         27
823: invokestatic  #53
826: ldc           #73
828: invokestatic  #19
831: new           #20
834: dup
835: invokespecial #21
838: ldc           #22
840: invokevirtual #23
843: iload         29
845: invokevirtual #40
848: ldc           #25
850: invokevirtual #23
853: iconst_0
854: invokevirtual #40
857: ldc           #22
859: invokevirtual #23
862: invokevirtual #26
865: iload         29
867: ifne          874
870: iconst_1
871: goto          875
874: iconst_0
875: invokestatic  #27
878: aload         30
880: invokestatic  #16
883: aload         30
885: invokestatic  #17
888: ldc           #42
890: invokestatic  #19
893: new           #20
896: dup
897: invokespecial #21
900: ldc           #22
902: invokevirtual #23
905: iload         31
907: invokevirtual #24
910: ldc           #25
912: invokevirtual #23
915: iconst_0
916: invokevirtual #24
919: ldc           #22
921: invokevirtual #23
924: invokevirtual #26
927: iload         31
929: ifne          936
932: iconst_1
933: goto          937
936: iconst_0
937: invokestatic  #27
940: aload         33
942: invokestatic  #16
945: aload         34
947: invokestatic  #16
950: aload         34
952: invokestatic  #71
955: ldc           #74
957: invokestatic  #19
960: aload         35
962: invokestatic  #16
965: aload         35
967: invokestatic  #53
970: ldc           #63
972: invokestatic  #19
975: aload         36
977: invokestatic  #16
980: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test15
Start line: 349
End line: 0
Method source code: 
    public void test15() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test15");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int2 = data1.origPtr;
        byte[] byteArray3 = data1.sendMTFValues2_pos;
        byte[] byteArray4 = data1.unseqToSeq;
        boolean boolean6 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray4, 10);
        boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray4, (int) (byte) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #75
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #37
37: istore_2
38: aload_1
39: getfield      #38
42: astore_3
43: aload_1
44: getfield      #50
47: astore        4
49: aload         4
51: bipush        10
53: invokestatic  #14
56: istore        5
58: aload         4
60: iconst_m1
61: invokestatic  #14
64: istore        6
66: new           #20
69: dup
70: invokespecial #21
73: ldc           #22
75: invokevirtual #23
78: iload_2
79: invokevirtual #40
82: ldc           #25
84: invokevirtual #23
87: iconst_0
88: invokevirtual #40
91: ldc           #22
93: invokevirtual #23
96: invokevirtual #26
99: iload_2
100: ifne          107
103: iconst_1
104: goto          108
107: iconst_0
108: invokestatic  #27
111: aload_3
112: invokestatic  #16
115: aload_3
116: invokestatic  #17
119: ldc           #41
121: invokestatic  #19
124: aload         4
126: invokestatic  #16
129: aload         4
131: invokestatic  #17
134: ldc           #42
136: invokestatic  #19
139: new           #20
142: dup
143: invokespecial #21
146: ldc           #22
148: invokevirtual #23
151: iload         5
153: invokevirtual #24
156: ldc           #25
158: invokevirtual #23
161: iconst_0
162: invokevirtual #24
165: ldc           #22
167: invokevirtual #23
170: invokevirtual #26
173: iload         5
175: ifne          182
178: iconst_1
179: goto          183
182: iconst_0
183: invokestatic  #27
186: new           #20
189: dup
190: invokespecial #21
193: ldc           #22
195: invokevirtual #23
198: iload         6
200: invokevirtual #24
203: ldc           #25
205: invokevirtual #23
208: iconst_0
209: invokevirtual #24
212: ldc           #22
214: invokevirtual #23
217: invokevirtual #26
220: iload         6
222: ifne          229
225: iconst_1
226: goto          230
229: iconst_0
230: invokestatic  #27
233: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test16
Start line: 368
End line: 0
Method source code: 
    public void test16() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test16");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int2 = data1.origPtr;
        byte[] byteArray3 = data1.sendMTFValues2_pos;
        byte[] byteArray4 = data1.generateMTFValues_yy;
        byte[] byteArray5 = data1.generateMTFValues_yy;
        byte[] byteArray6 = data1.unseqToSeq;
        boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (int) (byte) 0);
        boolean boolean10 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (int) (short) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #76
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #37
37: istore_2
38: aload_1
39: getfield      #38
42: astore_3
43: aload_1
44: getfield      #39
47: astore        4
49: aload_1
50: getfield      #39
53: astore        5
55: aload_1
56: getfield      #50
59: astore        6
61: aload         6
63: iconst_0
64: invokestatic  #14
67: istore        7
69: aload         6
71: iconst_m1
72: invokestatic  #14
75: istore        8
77: new           #20
80: dup
81: invokespecial #21
84: ldc           #22
86: invokevirtual #23
89: iload_2
90: invokevirtual #40
93: ldc           #25
95: invokevirtual #23
98: iconst_0
99: invokevirtual #40
102: ldc           #22
104: invokevirtual #23
107: invokevirtual #26
110: iload_2
111: ifne          118
114: iconst_1
115: goto          119
118: iconst_0
119: invokestatic  #27
122: aload_3
123: invokestatic  #16
126: aload_3
127: invokestatic  #17
130: ldc           #41
132: invokestatic  #19
135: aload         4
137: invokestatic  #16
140: aload         4
142: invokestatic  #17
145: ldc           #42
147: invokestatic  #19
150: aload         5
152: invokestatic  #16
155: aload         5
157: invokestatic  #17
160: ldc           #42
162: invokestatic  #19
165: aload         6
167: invokestatic  #16
170: aload         6
172: invokestatic  #17
175: ldc           #42
177: invokestatic  #19
180: new           #20
183: dup
184: invokespecial #21
187: ldc           #22
189: invokevirtual #23
192: iload         7
194: invokevirtual #24
197: ldc           #25
199: invokevirtual #23
202: iconst_0
203: invokevirtual #24
206: ldc           #22
208: invokevirtual #23
211: invokevirtual #26
214: iload         7
216: ifne          223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #27
227: new           #20
230: dup
231: invokespecial #21
234: ldc           #22
236: invokevirtual #23
239: iload         8
241: invokevirtual #24
244: ldc           #25
246: invokevirtual #23
249: iconst_0
250: invokevirtual #24
253: ldc           #22
255: invokevirtual #23
258: invokevirtual #26
261: iload         8
263: ifne          270
266: iconst_1
267: goto          271
270: iconst_0
271: invokestatic  #27
274: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test17
Start line: 393
End line: 0
Method source code: 
    public void test17() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test17");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(50);
        byte[] byteArray2 = data1.generateMTFValues_yy;
        boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray2, 75997786);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #77
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: bipush        50
30: invokespecial #36
33: astore_1
34: aload_1
35: getfield      #39
38: astore_2
39: aload_2
40: ldc           #78
42: invokestatic  #14
45: istore_3
46: aload_2
47: invokestatic  #16
50: aload_2
51: invokestatic  #17
54: ldc           #42
56: invokestatic  #19
59: new           #20
62: dup
63: invokespecial #21
66: ldc           #22
68: invokevirtual #23
71: iload_3
72: invokevirtual #24
75: ldc           #25
77: invokevirtual #23
80: iconst_0
81: invokevirtual #24
84: ldc           #22
86: invokevirtual #23
89: invokevirtual #26
92: iload_3
93: ifne          100
96: iconst_1
97: goto          101
100: iconst_0
101: invokestatic  #27
104: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test18
Start line: 405
End line: 0
Method source code: 
    public void test18() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test18");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        byte[][] byteArray2 = data1.sendMTFValues_len;
        boolean[] booleanArray3 = data1.inUse;
        org.apache.commons.compress.compressors.bzip2.BlockSort blockSort4 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data1);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data6 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int7 = data6.origPtr;
        byte[] byteArray8 = data6.sendMTFValues2_pos;
        byte[] byteArray9 = data6.generateMTFValues_yy;
        byte[][] byteArray10 = data6.sendMTFValues_len;
        byte[] byteArray11 = data6.sendMTFValues2_pos;
        int[] intArray12 = data6.heap;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data14 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int15 = data14.origPtr;
        byte[] byteArray16 = data14.unseqToSeq;
        boolean boolean18 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray16, (int) (byte) 10);
        blockSort4.fallbackSort(intArray12, byteArray16, 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #79
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #67
37: astore_2
38: aload_1
39: getfield      #70
42: astore_3
43: new           #45
46: dup
47: aload_1
48: invokespecial #46
51: astore        4
53: new           #35
56: dup
57: iconst_4
58: invokespecial #36
61: astore        5
63: aload         5
65: getfield      #37
68: istore        6
70: aload         5
72: getfield      #38
75: astore        7
77: aload         5
79: getfield      #39
82: astore        8
84: aload         5
86: getfield      #67
89: astore        9
91: aload         5
93: getfield      #38
96: astore        10
98: aload         5
100: getfield      #80
103: astore        11
105: new           #35
108: dup
109: iconst_4
110: invokespecial #36
113: astore        12
115: aload         12
117: getfield      #37
120: istore        13
122: aload         12
124: getfield      #50
127: astore        14
129: aload         14
131: bipush        10
133: invokestatic  #14
136: istore        15
138: aload         4
140: aload         11
142: aload         14
144: iconst_0
145: invokevirtual #51
148: aload_2
149: invokestatic  #16
152: aload_3
153: invokestatic  #16
156: aload_3
157: invokestatic  #71
160: ldc           #74
162: invokestatic  #19
165: new           #20
168: dup
169: invokespecial #21
172: ldc           #22
174: invokevirtual #23
177: iload         6
179: invokevirtual #40
182: ldc           #25
184: invokevirtual #23
187: iconst_0
188: invokevirtual #40
191: ldc           #22
193: invokevirtual #23
196: invokevirtual #26
199: iload         6
201: ifne          208
204: iconst_1
205: goto          209
208: iconst_0
209: invokestatic  #27
212: aload         7
214: invokestatic  #16
217: aload         7
219: invokestatic  #17
222: ldc           #41
224: invokestatic  #19
227: aload         8
229: invokestatic  #16
232: aload         8
234: invokestatic  #17
237: ldc           #42
239: invokestatic  #19
242: aload         9
244: invokestatic  #16
247: aload         10
249: invokestatic  #16
252: aload         10
254: invokestatic  #17
257: ldc           #41
259: invokestatic  #19
262: aload         11
264: invokestatic  #16
267: aload         11
269: invokestatic  #53
272: ldc           #81
274: invokestatic  #19
277: new           #20
280: dup
281: invokespecial #21
284: ldc           #22
286: invokevirtual #23
289: iload         13
291: invokevirtual #40
294: ldc           #25
296: invokevirtual #23
299: iconst_0
300: invokevirtual #40
303: ldc           #22
305: invokevirtual #23
308: invokevirtual #26
311: iload         13
313: ifne          320
316: iconst_1
317: goto          321
320: iconst_0
321: invokestatic  #27
324: aload         14
326: invokestatic  #16
329: aload         14
331: invokestatic  #17
334: ldc           #42
336: invokestatic  #19
339: new           #20
342: dup
343: invokespecial #21
346: ldc           #22
348: invokevirtual #23
351: iload         15
353: invokevirtual #24
356: ldc           #25
358: invokevirtual #23
361: iconst_0
362: invokevirtual #24
365: ldc           #22
367: invokevirtual #23
370: invokevirtual #26
373: iload         15
375: ifne          382
378: iconst_1
379: goto          383
382: iconst_0
383: invokestatic  #27
386: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test19
Start line: 444
End line: 0
Method source code: 
    public void test19() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test19");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int2 = data1.origPtr;
        byte[] byteArray3 = data1.sendMTFValues2_pos;
        byte[] byteArray4 = data1.generateMTFValues_yy;
        int int5 = data1.origPtr;
        byte[] byteArray6 = data1.unseqToSeq;
        byte[] byteArray7 = data1.generateMTFValues_yy;
        byte[] byteArray8 = data1.generateMTFValues_yy;
        boolean boolean10 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray8, 100000);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #82
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #37
37: istore_2
38: aload_1
39: getfield      #38
42: astore_3
43: aload_1
44: getfield      #39
47: astore        4
49: aload_1
50: getfield      #37
53: istore        5
55: aload_1
56: getfield      #50
59: astore        6
61: aload_1
62: getfield      #39
65: astore        7
67: aload_1
68: getfield      #39
71: astore        8
73: aload         8
75: ldc           #83
77: invokestatic  #14
80: istore        9
82: new           #20
85: dup
86: invokespecial #21
89: ldc           #22
91: invokevirtual #23
94: iload_2
95: invokevirtual #40
98: ldc           #25
100: invokevirtual #23
103: iconst_0
104: invokevirtual #40
107: ldc           #22
109: invokevirtual #23
112: invokevirtual #26
115: iload_2
116: ifne          123
119: iconst_1
120: goto          124
123: iconst_0
124: invokestatic  #27
127: aload_3
128: invokestatic  #16
131: aload_3
132: invokestatic  #17
135: ldc           #41
137: invokestatic  #19
140: aload         4
142: invokestatic  #16
145: aload         4
147: invokestatic  #17
150: ldc           #42
152: invokestatic  #19
155: new           #20
158: dup
159: invokespecial #21
162: ldc           #22
164: invokevirtual #23
167: iload         5
169: invokevirtual #40
172: ldc           #25
174: invokevirtual #23
177: iconst_0
178: invokevirtual #40
181: ldc           #22
183: invokevirtual #23
186: invokevirtual #26
189: iload         5
191: ifne          198
194: iconst_1
195: goto          199
198: iconst_0
199: invokestatic  #27
202: aload         6
204: invokestatic  #16
207: aload         6
209: invokestatic  #17
212: ldc           #42
214: invokestatic  #19
217: aload         7
219: invokestatic  #16
222: aload         7
224: invokestatic  #17
227: ldc           #42
229: invokestatic  #19
232: aload         8
234: invokestatic  #16
237: aload         8
239: invokestatic  #17
242: ldc           #42
244: invokestatic  #19
247: new           #20
250: dup
251: invokespecial #21
254: ldc           #22
256: invokevirtual #23
259: iload         9
261: invokevirtual #24
264: ldc           #25
266: invokevirtual #23
269: iconst_0
270: invokevirtual #24
273: ldc           #22
275: invokevirtual #23
278: invokevirtual #26
281: iload         9
283: ifne          290
286: iconst_1
287: goto          291
290: iconst_0
291: invokestatic  #27
294: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test20
Start line: 472
End line: 0
Method source code: 
    public void test20() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test20");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        short[] shortArray2 = data1.sendMTFValues_cost;
        byte[] byteArray3 = data1.generateMTFValues_yy;
        boolean boolean5 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray3, 31);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #84
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #47
37: astore_2
38: aload_1
39: getfield      #39
42: astore_3
43: aload_3
44: bipush        31
46: invokestatic  #14
49: istore        4
51: aload_2
52: invokestatic  #16
55: aload_2
56: invokestatic  #52
59: ldc           #41
61: invokestatic  #19
64: aload_3
65: invokestatic  #16
68: aload_3
69: invokestatic  #17
72: ldc           #42
74: invokestatic  #19
77: new           #20
80: dup
81: invokespecial #21
84: ldc           #22
86: invokevirtual #23
89: iload         4
91: invokevirtual #24
94: ldc           #25
96: invokevirtual #23
99: iconst_0
100: invokevirtual #24
103: ldc           #22
105: invokevirtual #23
108: invokevirtual #26
111: iload         4
113: ifne          120
116: iconst_1
117: goto          121
120: iconst_0
121: invokestatic  #27
124: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test21
Start line: 487
End line: 0
Method source code: 
    public void test21() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test21");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        byte[][] byteArray2 = data1.sendMTFValues_len;
        boolean[] booleanArray3 = data1.inUse;
        org.apache.commons.compress.compressors.bzip2.BlockSort blockSort4 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data1);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data6 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        byte[][] byteArray7 = data6.sendMTFValues_len;
        boolean[] booleanArray8 = data6.inUse;
        org.apache.commons.compress.compressors.bzip2.BlockSort blockSort9 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data6);
        blockSort4.mainSort(data6, 258);
        byte[][] byteArray12 = data6.sendMTFValues_len;
        byte[] byteArray13 = data6.sendMTFValues2_pos;
        boolean boolean15 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray13, (int) 'a');
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #85
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #67
37: astore_2
38: aload_1
39: getfield      #70
42: astore_3
43: new           #45
46: dup
47: aload_1
48: invokespecial #46
51: astore        4
53: new           #35
56: dup
57: iconst_4
58: invokespecial #36
61: astore        5
63: aload         5
65: getfield      #67
68: astore        6
70: aload         5
72: getfield      #70
75: astore        7
77: new           #45
80: dup
81: aload         5
83: invokespecial #46
86: astore        8
88: aload         4
90: aload         5
92: sipush        258
95: invokevirtual #69
98: aload         5
100: getfield      #67
103: astore        9
105: aload         5
107: getfield      #38
110: astore        10
112: aload         10
114: bipush        97
116: invokestatic  #14
119: istore        11
121: aload_2
122: invokestatic  #16
125: aload_3
126: invokestatic  #16
129: aload_3
130: invokestatic  #71
133: ldc           #74
135: invokestatic  #19
138: aload         6
140: invokestatic  #16
143: aload         7
145: invokestatic  #16
148: aload         7
150: invokestatic  #71
153: ldc           #74
155: invokestatic  #19
158: aload         9
160: invokestatic  #16
163: aload         10
165: invokestatic  #16
168: aload         10
170: invokestatic  #17
173: ldc           #41
175: invokestatic  #19
178: new           #20
181: dup
182: invokespecial #21
185: ldc           #22
187: invokevirtual #23
190: iload         11
192: invokevirtual #24
195: ldc           #25
197: invokevirtual #23
200: iconst_0
201: invokevirtual #24
204: ldc           #22
206: invokevirtual #23
209: invokevirtual #26
212: iload         11
214: ifne          221
217: iconst_1
218: goto          222
221: iconst_0
222: invokestatic  #27
225: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test22
Start line: 515
End line: 0
Method source code: 
    public void test22() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test22");
        byte[] byteArray0 = null;
        boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #86
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: aload_1
27: iconst_m1
28: invokestatic  #14
31: istore_2
32: new           #20
35: dup
36: invokespecial #21
39: ldc           #22
41: invokevirtual #23
44: iload_2
45: invokevirtual #24
48: ldc           #25
50: invokevirtual #23
53: iconst_0
54: invokevirtual #24
57: ldc           #22
59: invokevirtual #23
62: invokevirtual #26
65: iload_2
66: ifne          73
69: iconst_1
70: goto          74
73: iconst_0
74: invokestatic  #27
77: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test23
Start line: 524
End line: 0
Method source code: 
    public void test23() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test23");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int2 = data1.origPtr;
        byte[] byteArray3 = data1.sendMTFValues2_pos;
        byte[] byteArray4 = data1.generateMTFValues_yy;
        int int5 = data1.origPtr;
        byte[] byteArray6 = data1.unseqToSeq;
        boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (-1418654215));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #87
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #37
37: istore_2
38: aload_1
39: getfield      #38
42: astore_3
43: aload_1
44: getfield      #39
47: astore        4
49: aload_1
50: getfield      #37
53: istore        5
55: aload_1
56: getfield      #50
59: astore        6
61: aload         6
63: ldc           #88
65: invokestatic  #14
68: istore        7
70: new           #20
73: dup
74: invokespecial #21
77: ldc           #22
79: invokevirtual #23
82: iload_2
83: invokevirtual #40
86: ldc           #25
88: invokevirtual #23
91: iconst_0
92: invokevirtual #40
95: ldc           #22
97: invokevirtual #23
100: invokevirtual #26
103: iload_2
104: ifne          111
107: iconst_1
108: goto          112
111: iconst_0
112: invokestatic  #27
115: aload_3
116: invokestatic  #16
119: aload_3
120: invokestatic  #17
123: ldc           #41
125: invokestatic  #19
128: aload         4
130: invokestatic  #16
133: aload         4
135: invokestatic  #17
138: ldc           #42
140: invokestatic  #19
143: new           #20
146: dup
147: invokespecial #21
150: ldc           #22
152: invokevirtual #23
155: iload         5
157: invokevirtual #40
160: ldc           #25
162: invokevirtual #23
165: iconst_0
166: invokevirtual #40
169: ldc           #22
171: invokevirtual #23
174: invokevirtual #26
177: iload         5
179: ifne          186
182: iconst_1
183: goto          187
186: iconst_0
187: invokestatic  #27
190: aload         6
192: invokestatic  #16
195: aload         6
197: invokestatic  #17
200: ldc           #42
202: invokestatic  #19
205: new           #20
208: dup
209: invokespecial #21
212: ldc           #22
214: invokevirtual #23
217: iload         7
219: invokevirtual #24
222: ldc           #25
224: invokevirtual #23
227: iconst_0
228: invokevirtual #24
231: ldc           #22
233: invokevirtual #23
236: invokevirtual #26
239: iload         7
241: ifne          248
244: iconst_1
245: goto          249
248: iconst_0
249: invokestatic  #27
252: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test24
Start line: 546
End line: 0
Method source code: 
    public void test24() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test24");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int2 = data1.origPtr;
        byte[] byteArray3 = data1.sendMTFValues2_pos;
        byte[] byteArray4 = data1.generateMTFValues_yy;
        byte[] byteArray5 = data1.generateMTFValues_yy;
        byte[] byteArray6 = data1.unseqToSeq;
        boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (int) (byte) 1);
        boolean boolean10 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #89
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #37
37: istore_2
38: aload_1
39: getfield      #38
42: astore_3
43: aload_1
44: getfield      #39
47: astore        4
49: aload_1
50: getfield      #39
53: astore        5
55: aload_1
56: getfield      #50
59: astore        6
61: aload         6
63: iconst_1
64: invokestatic  #14
67: istore        7
69: aload         6
71: iconst_0
72: invokestatic  #14
75: istore        8
77: new           #20
80: dup
81: invokespecial #21
84: ldc           #22
86: invokevirtual #23
89: iload_2
90: invokevirtual #40
93: ldc           #25
95: invokevirtual #23
98: iconst_0
99: invokevirtual #40
102: ldc           #22
104: invokevirtual #23
107: invokevirtual #26
110: iload_2
111: ifne          118
114: iconst_1
115: goto          119
118: iconst_0
119: invokestatic  #27
122: aload_3
123: invokestatic  #16
126: aload_3
127: invokestatic  #17
130: ldc           #41
132: invokestatic  #19
135: aload         4
137: invokestatic  #16
140: aload         4
142: invokestatic  #17
145: ldc           #42
147: invokestatic  #19
150: aload         5
152: invokestatic  #16
155: aload         5
157: invokestatic  #17
160: ldc           #42
162: invokestatic  #19
165: aload         6
167: invokestatic  #16
170: aload         6
172: invokestatic  #17
175: ldc           #42
177: invokestatic  #19
180: new           #20
183: dup
184: invokespecial #21
187: ldc           #22
189: invokevirtual #23
192: iload         7
194: invokevirtual #24
197: ldc           #25
199: invokevirtual #23
202: iconst_0
203: invokevirtual #24
206: ldc           #22
208: invokevirtual #23
211: invokevirtual #26
214: iload         7
216: ifne          223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #27
227: new           #20
230: dup
231: invokespecial #21
234: ldc           #22
236: invokevirtual #23
239: iload         8
241: invokevirtual #24
244: ldc           #25
246: invokevirtual #23
249: iconst_0
250: invokevirtual #24
253: ldc           #22
255: invokevirtual #23
258: invokevirtual #26
261: iload         8
263: ifne          270
266: iconst_1
267: goto          271
270: iconst_0
271: invokestatic  #27
274: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test25
Start line: 571
End line: 0
Method source code: 
    public void test25() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test25");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int2 = data1.origPtr;
        byte[] byteArray3 = data1.sendMTFValues2_pos;
        byte[] byteArray4 = data1.generateMTFValues_yy;
        byte[] byteArray5 = data1.generateMTFValues_yy;
        byte[] byteArray6 = data1.generateMTFValues_yy;
        boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (-287117849));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #90
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #37
37: istore_2
38: aload_1
39: getfield      #38
42: astore_3
43: aload_1
44: getfield      #39
47: astore        4
49: aload_1
50: getfield      #39
53: astore        5
55: aload_1
56: getfield      #39
59: astore        6
61: aload         6
63: ldc           #91
65: invokestatic  #14
68: istore        7
70: new           #20
73: dup
74: invokespecial #21
77: ldc           #22
79: invokevirtual #23
82: iload_2
83: invokevirtual #40
86: ldc           #25
88: invokevirtual #23
91: iconst_0
92: invokevirtual #40
95: ldc           #22
97: invokevirtual #23
100: invokevirtual #26
103: iload_2
104: ifne          111
107: iconst_1
108: goto          112
111: iconst_0
112: invokestatic  #27
115: aload_3
116: invokestatic  #16
119: aload_3
120: invokestatic  #17
123: ldc           #41
125: invokestatic  #19
128: aload         4
130: invokestatic  #16
133: aload         4
135: invokestatic  #17
138: ldc           #42
140: invokestatic  #19
143: aload         5
145: invokestatic  #16
148: aload         5
150: invokestatic  #17
153: ldc           #42
155: invokestatic  #19
158: aload         6
160: invokestatic  #16
163: aload         6
165: invokestatic  #17
168: ldc           #42
170: invokestatic  #19
173: new           #20
176: dup
177: invokespecial #21
180: ldc           #22
182: invokevirtual #23
185: iload         7
187: invokevirtual #24
190: ldc           #25
192: invokevirtual #23
195: iconst_0
196: invokevirtual #24
199: ldc           #22
201: invokevirtual #23
204: invokevirtual #26
207: iload         7
209: ifne          216
212: iconst_1
213: goto          217
216: iconst_0
217: invokestatic  #27
220: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test26
Start line: 594
End line: 0
Method source code: 
    public void test26() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test26");
        byte[] byteArray0 = null;
        boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #92
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: aload_1
27: iconst_0
28: invokestatic  #14
31: istore_2
32: new           #20
35: dup
36: invokespecial #21
39: ldc           #22
41: invokevirtual #23
44: iload_2
45: invokevirtual #24
48: ldc           #25
50: invokevirtual #23
53: iconst_0
54: invokevirtual #24
57: ldc           #22
59: invokevirtual #23
62: invokevirtual #26
65: iload_2
66: ifne          73
69: iconst_1
70: goto          74
73: iconst_0
74: invokestatic  #27
77: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test27
Start line: 603
End line: 0
Method source code: 
    public void test27() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test27");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int2 = data1.origPtr;
        byte[][] byteArray3 = data1.sendMTFValues_len;
        short[] shortArray4 = data1.sendMTFValues_cost;
        byte[] byteArray5 = data1.sendMTFValues2_pos;
        org.apache.commons.compress.compressors.bzip2.BlockSort blockSort6 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data1);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data8 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int9 = data8.origPtr;
        byte[] byteArray10 = data8.sendMTFValues2_pos;
        byte[] byteArray11 = data8.generateMTFValues_yy;
        blockSort6.fallbackSort(data8, 0);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data15 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int16 = data15.origPtr;
        byte[] byteArray17 = data15.sendMTFValues2_pos;
        byte[] byteArray18 = data15.generateMTFValues_yy;
        byte[] byteArray19 = data15.unseqToSeq;
        int[] intArray20 = data15.parent;
        boolean[] booleanArray21 = data15.sentMTFValues4_inUse16;
        blockSort6.fallbackSort(data15, 1);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data25 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int26 = data25.origPtr;
        byte[] byteArray27 = data25.sendMTFValues2_pos;
        int int28 = data25.origPtr;
        blockSort6.mainSort(data25, 50);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data32 = null; // flaky: new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data((-594764567));
        int[] intArray33 = null; // flaky: data32.heap;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data35 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int36 = data35.origPtr;
        byte[] byteArray37 = data35.sendMTFValues2_pos;
        byte[] byteArray38 = data35.generateMTFValues_yy;
        byte[] byteArray39 = data35.unseqToSeq;
        boolean boolean41 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray39, 20);
        try {
            blockSort6.fallbackSort(intArray33, byteArray39, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: bitIndex < 0: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #93
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #37
37: istore_2
38: aload_1
39: getfield      #67
42: astore_3
43: aload_1
44: getfield      #47
47: astore        4
49: aload_1
50: getfield      #38
53: astore        5
55: new           #45
58: dup
59: aload_1
60: invokespecial #46
63: astore        6
65: new           #35
68: dup
69: iconst_4
70: invokespecial #36
73: astore        7
75: aload         7
77: getfield      #37
80: istore        8
82: aload         7
84: getfield      #38
87: astore        9
89: aload         7
91: getfield      #39
94: astore        10
96: aload         6
98: aload         7
100: iconst_0
101: invokevirtual #49
104: new           #35
107: dup
108: iconst_4
109: invokespecial #36
112: astore        11
114: aload         11
116: getfield      #37
119: istore        12
121: aload         11
123: getfield      #38
126: astore        13
128: aload         11
130: getfield      #39
133: astore        14
135: aload         11
137: getfield      #50
140: astore        15
142: aload         11
144: getfield      #48
147: astore        16
149: aload         11
151: getfield      #68
154: astore        17
156: aload         6
158: aload         11
160: iconst_1
161: invokevirtual #49
164: new           #35
167: dup
168: iconst_4
169: invokespecial #36
172: astore        18
174: aload         18
176: getfield      #37
179: istore        19
181: aload         18
183: getfield      #38
186: astore        20
188: aload         18
190: getfield      #37
193: istore        21
195: aload         6
197: aload         18
199: bipush        50
201: invokevirtual #69
204: aconst_null
205: astore        22
207: aconst_null
208: astore        23
210: new           #35
213: dup
214: iconst_4
215: invokespecial #36
218: astore        24
220: aload         24
222: getfield      #37
225: istore        25
227: aload         24
229: getfield      #38
232: astore        26
234: aload         24
236: getfield      #39
239: astore        27
241: aload         24
243: getfield      #50
246: astore        28
248: aload         28
250: bipush        20
252: invokestatic  #14
255: istore        29
257: aload         6
259: aload         23
261: aload         28
263: iconst_m1
264: invokevirtual #51
267: ldc           #94
269: invokestatic  #11
272: goto          277
275: astore        30
277: new           #20
280: dup
281: invokespecial #21
284: ldc           #22
286: invokevirtual #23
289: iload_2
290: invokevirtual #40
293: ldc           #25
295: invokevirtual #23
298: iconst_0
299: invokevirtual #40
302: ldc           #22
304: invokevirtual #23
307: invokevirtual #26
310: iload_2
311: ifne          318
314: iconst_1
315: goto          319
318: iconst_0
319: invokestatic  #27
322: aload_3
323: invokestatic  #16
326: aload         4
328: invokestatic  #16
331: aload         4
333: invokestatic  #52
336: ldc           #41
338: invokestatic  #19
341: aload         5
343: invokestatic  #16
346: aload         5
348: invokestatic  #17
351: ldc           #41
353: invokestatic  #19
356: new           #20
359: dup
360: invokespecial #21
363: ldc           #22
365: invokevirtual #23
368: iload         8
370: invokevirtual #40
373: ldc           #25
375: invokevirtual #23
378: iconst_0
379: invokevirtual #40
382: ldc           #22
384: invokevirtual #23
387: invokevirtual #26
390: iload         8
392: ifne          399
395: iconst_1
396: goto          400
399: iconst_0
400: invokestatic  #27
403: aload         9
405: invokestatic  #16
408: aload         9
410: invokestatic  #17
413: ldc           #41
415: invokestatic  #19
418: aload         10
420: invokestatic  #16
423: aload         10
425: invokestatic  #17
428: ldc           #42
430: invokestatic  #19
433: new           #20
436: dup
437: invokespecial #21
440: ldc           #22
442: invokevirtual #23
445: iload         12
447: invokevirtual #40
450: ldc           #25
452: invokevirtual #23
455: iconst_0
456: invokevirtual #40
459: ldc           #22
461: invokevirtual #23
464: invokevirtual #26
467: iload         12
469: ifne          476
472: iconst_1
473: goto          477
476: iconst_0
477: invokestatic  #27
480: aload         13
482: invokestatic  #16
485: aload         13
487: invokestatic  #17
490: ldc           #41
492: invokestatic  #19
495: aload         14
497: invokestatic  #16
500: aload         14
502: invokestatic  #17
505: ldc           #42
507: invokestatic  #19
510: aload         15
512: invokestatic  #16
515: aload         15
517: invokestatic  #17
520: ldc           #42
522: invokestatic  #19
525: aload         16
527: invokestatic  #16
530: aload         16
532: invokestatic  #53
535: ldc           #54
537: invokestatic  #19
540: aload         17
542: invokestatic  #16
545: aload         17
547: invokestatic  #71
550: ldc           #72
552: invokestatic  #19
555: new           #20
558: dup
559: invokespecial #21
562: ldc           #22
564: invokevirtual #23
567: iload         19
569: invokevirtual #40
572: ldc           #25
574: invokevirtual #23
577: iconst_0
578: invokevirtual #40
581: ldc           #22
583: invokevirtual #23
586: invokevirtual #26
589: iload         19
591: ifne          598
594: iconst_1
595: goto          599
598: iconst_0
599: invokestatic  #27
602: aload         20
604: invokestatic  #16
607: aload         20
609: invokestatic  #17
612: ldc           #41
614: invokestatic  #19
617: new           #20
620: dup
621: invokespecial #21
624: ldc           #22
626: invokevirtual #23
629: iload         21
631: invokevirtual #40
634: ldc           #25
636: invokevirtual #23
639: iconst_0
640: invokevirtual #40
643: ldc           #22
645: invokevirtual #23
648: invokevirtual #26
651: iload         21
653: ifne          660
656: iconst_1
657: goto          661
660: iconst_0
661: invokestatic  #27
664: new           #20
667: dup
668: invokespecial #21
671: ldc           #22
673: invokevirtual #23
676: iload         25
678: invokevirtual #40
681: ldc           #25
683: invokevirtual #23
686: iconst_0
687: invokevirtual #40
690: ldc           #22
692: invokevirtual #23
695: invokevirtual #26
698: iload         25
700: ifne          707
703: iconst_1
704: goto          708
707: iconst_0
708: invokestatic  #27
711: aload         26
713: invokestatic  #16
716: aload         26
718: invokestatic  #17
721: ldc           #41
723: invokestatic  #19
726: aload         27
728: invokestatic  #16
731: aload         27
733: invokestatic  #17
736: ldc           #42
738: invokestatic  #19
741: aload         28
743: invokestatic  #16
746: aload         28
748: invokestatic  #17
751: ldc           #42
753: invokestatic  #19
756: new           #20
759: dup
760: invokespecial #21
763: ldc           #22
765: invokevirtual #23
768: iload         29
770: invokevirtual #24
773: ldc           #25
775: invokevirtual #23
778: iconst_0
779: invokevirtual #24
782: ldc           #22
784: invokevirtual #23
787: invokevirtual #26
790: iload         29
792: ifne          799
795: iconst_1
796: goto          800
799: iconst_0
800: invokestatic  #27
803: return
Exception table:
from    to  target type
257   272   275   Class java/lang/IndexOutOfBoundsException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test28
Start line: 684
End line: 0
Method source code: 
    public void test28() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test28");
        byte[] byteArray0 = new byte[] {};
        boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (short) 1);
        try {
            boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #96
19: aastore
20: invokevirtual #7
23: pop
24: iconst_0
25: newarray       byte
27: astore_1
28: aload_1
29: iconst_1
30: invokestatic  #14
33: istore_2
34: aload_1
35: bipush        10
37: invokestatic  #14
40: istore_3
41: ldc           #57
43: invokestatic  #11
46: goto          50
49: astore_3
50: aload_1
51: invokestatic  #16
54: aload_1
55: invokestatic  #17
58: ldc           #18
60: invokestatic  #19
63: new           #20
66: dup
67: invokespecial #21
70: ldc           #22
72: invokevirtual #23
75: iload_2
76: invokevirtual #24
79: ldc           #25
81: invokevirtual #23
84: iconst_0
85: invokevirtual #24
88: ldc           #22
90: invokevirtual #23
93: invokevirtual #26
96: iload_2
97: ifne          104
100: iconst_1
101: goto          105
104: iconst_0
105: invokestatic  #27
108: return
Exception table:
from    to  target type
34    46    49   Class java/lang/ArrayIndexOutOfBoundsException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test29
Start line: 702
End line: 0
Method source code: 
    public void test29() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test29");
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data1 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int2 = data1.origPtr;
        org.apache.commons.compress.compressors.bzip2.BlockSort blockSort3 = new org.apache.commons.compress.compressors.bzip2.BlockSort(data1);
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data5 = null; // flaky: new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data((-594764567));
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data9 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        int int10 = data9.origPtr;
        byte[] byteArray11 = data9.sendMTFValues2_pos;
        byte[] byteArray12 = data9.generateMTFValues_yy;
        int[][] intArray13 = data9.sendMTFValues_rfreq;
        int[] intArray14 = data9.sendMTFValues_fave;
        org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data data16 = new org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream.Data(4);
        short[] shortArray17 = data16.sendMTFValues_cost;
        byte[] byteArray18 = data16.generateMTFValues_yy;
        blockSort3.fallbackSort(intArray14, byteArray18, (int) (byte) 1);
        boolean boolean22 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray18, (int) '4');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #97
19: aastore
20: invokevirtual #7
23: pop
24: new           #35
27: dup
28: iconst_4
29: invokespecial #36
32: astore_1
33: aload_1
34: getfield      #37
37: istore_2
38: new           #45
41: dup
42: aload_1
43: invokespecial #46
46: astore_3
47: aconst_null
48: astore        4
50: new           #35
53: dup
54: iconst_4
55: invokespecial #36
58: astore        5
60: aload         5
62: getfield      #37
65: istore        6
67: aload         5
69: getfield      #38
72: astore        7
74: aload         5
76: getfield      #39
79: astore        8
81: aload         5
83: getfield      #98
86: astore        9
88: aload         5
90: getfield      #99
93: astore        10
95: new           #35
98: dup
99: iconst_4
100: invokespecial #36
103: astore        11
105: aload         11
107: getfield      #47
110: astore        12
112: aload         11
114: getfield      #39
117: astore        13
119: aload_3
120: aload         10
122: aload         13
124: iconst_1
125: invokevirtual #51
128: aload         13
130: bipush        52
132: invokestatic  #14
135: istore        14
137: new           #20
140: dup
141: invokespecial #21
144: ldc           #22
146: invokevirtual #23
149: iload_2
150: invokevirtual #40
153: ldc           #25
155: invokevirtual #23
158: iconst_0
159: invokevirtual #40
162: ldc           #22
164: invokevirtual #23
167: invokevirtual #26
170: iload_2
171: ifne          178
174: iconst_1
175: goto          179
178: iconst_0
179: invokestatic  #27
182: new           #20
185: dup
186: invokespecial #21
189: ldc           #22
191: invokevirtual #23
194: iload         6
196: invokevirtual #40
199: ldc           #25
201: invokevirtual #23
204: iconst_0
205: invokevirtual #40
208: ldc           #22
210: invokevirtual #23
213: invokevirtual #26
216: iload         6
218: ifne          225
221: iconst_1
222: goto          226
225: iconst_0
226: invokestatic  #27
229: aload         7
231: invokestatic  #16
234: aload         7
236: invokestatic  #17
239: ldc           #41
241: invokestatic  #19
244: aload         8
246: invokestatic  #16
249: aload         8
251: invokestatic  #17
254: ldc           #42
256: invokestatic  #19
259: aload         9
261: invokestatic  #16
264: aload         10
266: invokestatic  #16
269: aload         10
271: invokestatic  #53
274: ldc           #41
276: invokestatic  #19
279: aload         12
281: invokestatic  #16
284: aload         12
286: invokestatic  #52
289: ldc           #41
291: invokestatic  #19
294: aload         13
296: invokestatic  #16
299: aload         13
301: invokestatic  #17
304: ldc           #42
306: invokestatic  #19
309: new           #20
312: dup
313: invokespecial #21
316: ldc           #22
318: invokevirtual #23
321: iload         14
323: invokevirtual #24
326: ldc           #25
328: invokevirtual #23
331: iconst_0
332: invokevirtual #24
335: ldc           #22
337: invokevirtual #23
340: invokevirtual #26
343: iload         14
345: ifne          352
348: iconst_1
349: goto          353
352: iconst_0
353: invokestatic  #27
356: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test30
Start line: 738
End line: 0
Method source code: 
    public void test30() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test30");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 0, (byte) 0, (byte) 100, (byte) 1 };
        boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 0, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #100
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: newarray       byte
27: dup
28: iconst_0
29: bipush        10
31: bastore
32: dup
33: iconst_1
34: iconst_0
35: bastore
36: dup
37: iconst_2
38: iconst_0
39: bastore
40: dup
41: iconst_3
42: bipush        100
44: bastore
45: dup
46: iconst_4
47: iconst_1
48: bastore
49: astore_1
50: aload_1
51: iconst_0
52: invokestatic  #14
55: istore_2
56: aload_1
57: invokestatic  #16
60: aload_1
61: invokestatic  #17
64: ldc           #101
66: invokestatic  #19
69: new           #20
72: dup
73: invokespecial #21
76: ldc           #22
78: invokevirtual #23
81: iload_2
82: invokevirtual #24
85: ldc           #25
87: invokevirtual #23
90: iconst_0
91: invokevirtual #24
94: ldc           #22
96: invokevirtual #23
99: invokevirtual #26
102: iload_2
103: ifne          110
106: iconst_1
107: goto          111
110: iconst_0
111: invokestatic  #27
114: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test31
Start line: 749
End line: 0
Method source code: 
    public void test31() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test31");
        byte[] byteArray1 = new byte[] { (byte) 10 };
        boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, 10);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[10]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #102
19: aastore
20: invokevirtual #7
23: pop
24: iconst_1
25: newarray       byte
27: dup
28: iconst_0
29: bipush        10
31: bastore
32: astore_1
33: aload_1
34: bipush        10
36: invokestatic  #14
39: istore_2
40: aload_1
41: invokestatic  #16
44: aload_1
45: invokestatic  #17
48: ldc           #103
50: invokestatic  #19
53: new           #20
56: dup
57: invokespecial #21
60: ldc           #22
62: invokevirtual #23
65: iload_2
66: invokevirtual #24
69: ldc           #25
71: invokevirtual #23
74: iconst_0
75: invokevirtual #24
78: ldc           #22
80: invokevirtual #23
83: invokevirtual #26
86: iload_2
87: ifne          94
90: iconst_1
91: goto          95
94: iconst_0
95: invokestatic  #27
98: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test32
Start line: 760
End line: 0
Method source code: 
    public void test32() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test32");
        byte[] byteArray1 = new byte[] { (byte) -1 };
        boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, (int) (short) -1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[-1]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #104
19: aastore
20: invokevirtual #7
23: pop
24: iconst_1
25: newarray       byte
27: dup
28: iconst_0
29: iconst_m1
30: bastore
31: astore_1
32: aload_1
33: iconst_m1
34: invokestatic  #14
37: istore_2
38: aload_1
39: invokestatic  #16
42: aload_1
43: invokestatic  #17
46: ldc           #105
48: invokestatic  #19
51: new           #20
54: dup
55: invokespecial #21
58: ldc           #22
60: invokevirtual #23
63: iload_2
64: invokevirtual #24
67: ldc           #25
69: invokevirtual #23
72: iconst_0
73: invokevirtual #24
76: ldc           #22
78: invokevirtual #23
81: invokevirtual #26
84: iload_2
85: ifne          92
88: iconst_1
89: goto          93
92: iconst_0
93: invokestatic  #27
96: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test33
Start line: 771
End line: 0
Method source code: 
    public void test33() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test33");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, 1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #106
19: aastore
20: invokevirtual #7
23: pop
24: iconst_1
25: newarray       byte
27: dup
28: iconst_0
29: iconst_0
30: bastore
31: astore_1
32: aload_1
33: iconst_1
34: invokestatic  #14
37: istore_2
38: aload_1
39: invokestatic  #16
42: aload_1
43: invokestatic  #17
46: ldc           #107
48: invokestatic  #19
51: new           #20
54: dup
55: invokespecial #21
58: ldc           #22
60: invokevirtual #23
63: iload_2
64: invokevirtual #24
67: ldc           #25
69: invokevirtual #23
72: iconst_0
73: invokevirtual #24
76: ldc           #22
78: invokevirtual #23
81: invokevirtual #26
84: iload_2
85: ifne          92
88: iconst_1
89: goto          93
92: iconst_0
93: invokestatic  #27
96: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test34
Start line: 782
End line: 0
Method source code: 
    public void test34() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test34");
        byte[] byteArray6 = new byte[] { (byte) 100, (byte) 1, (byte) 100, (byte) 100, (byte) 1, (byte) 100 };
        boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 1, 100, 100, 1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #108
19: aastore
20: invokevirtual #7
23: pop
24: bipush        6
26: newarray       byte
28: dup
29: iconst_0
30: bipush        100
32: bastore
33: dup
34: iconst_1
35: iconst_1
36: bastore
37: dup
38: iconst_2
39: bipush        100
41: bastore
42: dup
43: iconst_3
44: bipush        100
46: bastore
47: dup
48: iconst_4
49: iconst_1
50: bastore
51: dup
52: iconst_5
53: bipush        100
55: bastore
56: astore_1
57: aload_1
58: iconst_0
59: invokestatic  #14
62: istore_2
63: aload_1
64: invokestatic  #16
67: aload_1
68: invokestatic  #17
71: ldc           #109
73: invokestatic  #19
76: new           #20
79: dup
80: invokespecial #21
83: ldc           #22
85: invokevirtual #23
88: iload_2
89: invokevirtual #24
92: ldc           #25
94: invokevirtual #23
97: iconst_0
98: invokevirtual #24
101: ldc           #22
103: invokevirtual #23
106: invokevirtual #26
109: iload_2
110: ifne          117
113: iconst_1
114: goto          118
117: iconst_0
118: invokestatic  #27
121: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test35
Start line: 793
End line: 0
Method source code: 
    public void test35() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test35");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, 0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #110
19: aastore
20: invokevirtual #7
23: pop
24: iconst_1
25: newarray       byte
27: dup
28: iconst_0
29: iconst_0
30: bastore
31: astore_1
32: aload_1
33: iconst_0
34: invokestatic  #14
37: istore_2
38: aload_1
39: invokestatic  #16
42: aload_1
43: invokestatic  #17
46: ldc           #107
48: invokestatic  #19
51: new           #20
54: dup
55: invokespecial #21
58: ldc           #22
60: invokevirtual #23
63: iload_2
64: invokevirtual #24
67: ldc           #25
69: invokevirtual #23
72: iconst_0
73: invokevirtual #24
76: ldc           #22
78: invokevirtual #23
81: invokevirtual #26
84: iload_2
85: ifne          92
88: iconst_1
89: goto          93
92: iconst_0
93: invokestatic  #27
96: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test36
Start line: 804
End line: 0
Method source code: 
    public void test36() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test36");
        byte[] byteArray2 = new byte[] { (byte) 0, (byte) 0 };
        boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray2, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #111
19: aastore
20: invokevirtual #7
23: pop
24: iconst_2
25: newarray       byte
27: dup
28: iconst_0
29: iconst_0
30: bastore
31: dup
32: iconst_1
33: iconst_0
34: bastore
35: astore_1
36: aload_1
37: iconst_1
38: invokestatic  #14
41: istore_2
42: aload_1
43: invokestatic  #16
46: aload_1
47: invokestatic  #17
50: ldc           #112
52: invokestatic  #19
55: new           #20
58: dup
59: invokespecial #21
62: ldc           #22
64: invokevirtual #23
67: iload_2
68: invokevirtual #24
71: ldc           #25
73: invokevirtual #23
76: iconst_0
77: invokevirtual #24
80: ldc           #22
82: invokevirtual #23
85: invokevirtual #26
88: iload_2
89: ifne          96
92: iconst_1
93: goto          97
96: iconst_0
97: invokestatic  #27
100: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test37
Start line: 815
End line: 0
Method source code: 
    public void test37() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test37");
        byte[] byteArray6 = new byte[] { (byte) 0, (byte) 10, (byte) 0, (byte) 1, (byte) -1, (byte) 10 };
        boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (int) (byte) 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, 10, 0, 1, -1, 10]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #113
19: aastore
20: invokevirtual #7
23: pop
24: bipush        6
26: newarray       byte
28: dup
29: iconst_0
30: iconst_0
31: bastore
32: dup
33: iconst_1
34: bipush        10
36: bastore
37: dup
38: iconst_2
39: iconst_0
40: bastore
41: dup
42: iconst_3
43: iconst_1
44: bastore
45: dup
46: iconst_4
47: iconst_m1
48: bastore
49: dup
50: iconst_5
51: bipush        10
53: bastore
54: astore_1
55: aload_1
56: iconst_0
57: invokestatic  #14
60: istore_2
61: aload_1
62: invokestatic  #16
65: aload_1
66: invokestatic  #17
69: ldc           #114
71: invokestatic  #19
74: new           #20
77: dup
78: invokespecial #21
81: ldc           #22
83: invokevirtual #23
86: iload_2
87: invokevirtual #24
90: ldc           #25
92: invokevirtual #23
95: iconst_0
96: invokevirtual #24
99: ldc           #22
101: invokevirtual #23
104: invokevirtual #26
107: iload_2
108: ifne          115
111: iconst_1
112: goto          116
115: iconst_0
116: invokestatic  #27
119: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test38
Start line: 826
End line: 0
Method source code: 
    public void test38() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test38");
        byte[] byteArray2 = new byte[] { (byte) -1, (byte) 1 };
        boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray2, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #115
19: aastore
20: invokevirtual #7
23: pop
24: iconst_2
25: newarray       byte
27: dup
28: iconst_0
29: iconst_m1
30: bastore
31: dup
32: iconst_1
33: iconst_1
34: bastore
35: astore_1
36: aload_1
37: iconst_1
38: invokestatic  #14
41: istore_2
42: aload_1
43: invokestatic  #16
46: aload_1
47: invokestatic  #17
50: ldc           #116
52: invokestatic  #19
55: new           #20
58: dup
59: invokespecial #21
62: ldc           #22
64: invokevirtual #23
67: iload_2
68: invokevirtual #24
71: ldc           #25
73: invokevirtual #23
76: iconst_0
77: invokevirtual #24
80: ldc           #22
82: invokevirtual #23
85: invokevirtual #26
88: iload_2
89: ifne          96
92: iconst_1
93: goto          97
96: iconst_0
97: invokestatic  #27
100: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test39
Start line: 837
End line: 0
Method source code: 
    public void test39() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test39");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 100, (byte) 100 };
        boolean boolean5 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray3, 0);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #117
19: aastore
20: invokevirtual #7
23: pop
24: iconst_3
25: newarray       byte
27: dup
28: iconst_0
29: iconst_1
30: bastore
31: dup
32: iconst_1
33: bipush        100
35: bastore
36: dup
37: iconst_2
38: bipush        100
40: bastore
41: astore_1
42: aload_1
43: iconst_0
44: invokestatic  #14
47: istore_2
48: aload_1
49: invokestatic  #16
52: aload_1
53: invokestatic  #17
56: ldc           #118
58: invokestatic  #19
61: new           #20
64: dup
65: invokespecial #21
68: ldc           #22
70: invokevirtual #23
73: iload_2
74: invokevirtual #24
77: ldc           #25
79: invokevirtual #23
82: iconst_0
83: invokevirtual #24
86: ldc           #22
88: invokevirtual #23
91: invokevirtual #26
94: iload_2
95: ifne          102
98: iconst_1
99: goto          103
102: iconst_0
103: invokestatic  #27
106: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test40
Start line: 848
End line: 0
Method source code: 
    public void test40() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test40");
        byte[] byteArray2 = new byte[] { (byte) 0, (byte) -1 };
        boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray2, 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, -1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #119
19: aastore
20: invokevirtual #7
23: pop
24: iconst_2
25: newarray       byte
27: dup
28: iconst_0
29: iconst_0
30: bastore
31: dup
32: iconst_1
33: iconst_m1
34: bastore
35: astore_1
36: aload_1
37: iconst_0
38: invokestatic  #14
41: istore_2
42: aload_1
43: invokestatic  #16
46: aload_1
47: invokestatic  #17
50: ldc           #120
52: invokestatic  #19
55: new           #20
58: dup
59: invokespecial #21
62: ldc           #22
64: invokevirtual #23
67: iload_2
68: invokevirtual #24
71: ldc           #25
73: invokevirtual #23
76: iconst_0
77: invokevirtual #24
80: ldc           #22
82: invokevirtual #23
85: invokevirtual #26
88: iload_2
89: ifne          96
92: iconst_1
93: goto          97
96: iconst_0
97: invokestatic  #27
100: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test41
Start line: 859
End line: 0
Method source code: 
    public void test41() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test41");
        byte[] byteArray5 = new byte[] { (byte) 1, (byte) 100, (byte) -1, (byte) 1, (byte) 0 };
        boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, (int) ' ');
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, 100, -1, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #121
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: newarray       byte
27: dup
28: iconst_0
29: iconst_1
30: bastore
31: dup
32: iconst_1
33: bipush        100
35: bastore
36: dup
37: iconst_2
38: iconst_m1
39: bastore
40: dup
41: iconst_3
42: iconst_1
43: bastore
44: dup
45: iconst_4
46: iconst_0
47: bastore
48: astore_1
49: aload_1
50: bipush        32
52: invokestatic  #14
55: istore_2
56: aload_1
57: invokestatic  #16
60: aload_1
61: invokestatic  #17
64: ldc           #122
66: invokestatic  #19
69: new           #20
72: dup
73: invokespecial #21
76: ldc           #22
78: invokevirtual #23
81: iload_2
82: invokevirtual #24
85: ldc           #25
87: invokevirtual #23
90: iconst_0
91: invokevirtual #24
94: ldc           #22
96: invokevirtual #23
99: invokevirtual #26
102: iload_2
103: ifne          110
106: iconst_1
107: goto          111
110: iconst_0
111: invokestatic  #27
114: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test42
Start line: 870
End line: 0
Method source code: 
    public void test42() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test42");
        byte[] byteArray4 = new byte[] { (byte) 100, (byte) 10, (byte) 1, (byte) 10 };
        boolean boolean6 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray4, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #123
19: aastore
20: invokevirtual #7
23: pop
24: iconst_4
25: newarray       byte
27: dup
28: iconst_0
29: bipush        100
31: bastore
32: dup
33: iconst_1
34: bipush        10
36: bastore
37: dup
38: iconst_2
39: iconst_1
40: bastore
41: dup
42: iconst_3
43: bipush        10
45: bastore
46: astore_1
47: aload_1
48: iconst_1
49: invokestatic  #14
52: istore_2
53: aload_1
54: invokestatic  #16
57: aload_1
58: invokestatic  #17
61: ldc           #124
63: invokestatic  #19
66: new           #20
69: dup
70: invokespecial #21
73: ldc           #22
75: invokevirtual #23
78: iload_2
79: invokevirtual #24
82: ldc           #25
84: invokevirtual #23
87: iconst_0
88: invokevirtual #24
91: ldc           #22
93: invokevirtual #23
96: invokevirtual #26
99: iload_2
100: ifne          107
103: iconst_1
104: goto          108
107: iconst_0
108: invokestatic  #27
111: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test43
Start line: 881
End line: 0
Method source code: 
    public void test43() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test43");
        byte[] byteArray3 = new byte[] { (byte) 1, (byte) 10, (byte) -1 };
        boolean boolean5 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray3, (int) (byte) 100);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[1, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #125
19: aastore
20: invokevirtual #7
23: pop
24: iconst_3
25: newarray       byte
27: dup
28: iconst_0
29: iconst_1
30: bastore
31: dup
32: iconst_1
33: bipush        10
35: bastore
36: dup
37: iconst_2
38: iconst_m1
39: bastore
40: astore_1
41: aload_1
42: bipush        100
44: invokestatic  #14
47: istore_2
48: aload_1
49: invokestatic  #16
52: aload_1
53: invokestatic  #17
56: ldc           #126
58: invokestatic  #19
61: new           #20
64: dup
65: invokespecial #21
68: ldc           #22
70: invokevirtual #23
73: iload_2
74: invokevirtual #24
77: ldc           #25
79: invokevirtual #23
82: iconst_0
83: invokevirtual #24
86: ldc           #22
88: invokevirtual #23
91: invokevirtual #26
94: iload_2
95: ifne          102
98: iconst_1
99: goto          103
102: iconst_0
103: invokestatic  #27
106: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test44
Start line: 892
End line: 0
Method source code: 
    public void test44() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test44");
        byte[] byteArray5 = new byte[] { (byte) 100, (byte) 1, (byte) 1, (byte) 100, (byte) 10 };
        boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, (int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 1, 1, 100, 10]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #127
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: newarray       byte
27: dup
28: iconst_0
29: bipush        100
31: bastore
32: dup
33: iconst_1
34: iconst_1
35: bastore
36: dup
37: iconst_2
38: iconst_1
39: bastore
40: dup
41: iconst_3
42: bipush        100
44: bastore
45: dup
46: iconst_4
47: bipush        10
49: bastore
50: astore_1
51: aload_1
52: bipush        10
54: invokestatic  #14
57: istore_2
58: aload_1
59: invokestatic  #16
62: aload_1
63: invokestatic  #17
66: ldc           #128
68: invokestatic  #19
71: new           #20
74: dup
75: invokespecial #21
78: ldc           #22
80: invokevirtual #23
83: iload_2
84: invokevirtual #24
87: ldc           #25
89: invokevirtual #23
92: iconst_0
93: invokevirtual #24
96: ldc           #22
98: invokevirtual #23
101: invokevirtual #26
104: iload_2
105: ifne          112
108: iconst_1
109: goto          113
112: iconst_0
113: invokestatic  #27
116: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test45
Start line: 903
End line: 0
Method source code: 
    public void test45() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test45");
        byte[] byteArray4 = new byte[] { (byte) 1, (byte) -1, (byte) 10, (byte) 0 };
        boolean boolean6 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray4, (int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[1, -1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #129
19: aastore
20: invokevirtual #7
23: pop
24: iconst_4
25: newarray       byte
27: dup
28: iconst_0
29: iconst_1
30: bastore
31: dup
32: iconst_1
33: iconst_m1
34: bastore
35: dup
36: iconst_2
37: bipush        10
39: bastore
40: dup
41: iconst_3
42: iconst_0
43: bastore
44: astore_1
45: aload_1
46: bipush        10
48: invokestatic  #14
51: istore_2
52: aload_1
53: invokestatic  #16
56: aload_1
57: invokestatic  #17
60: ldc           #130
62: invokestatic  #19
65: new           #20
68: dup
69: invokespecial #21
72: ldc           #22
74: invokevirtual #23
77: iload_2
78: invokevirtual #24
81: ldc           #25
83: invokevirtual #23
86: iconst_0
87: invokevirtual #24
90: ldc           #22
92: invokevirtual #23
95: invokevirtual #26
98: iload_2
99: ifne          106
102: iconst_1
103: goto          107
106: iconst_0
107: invokestatic  #27
110: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test46
Start line: 914
End line: 0
Method source code: 
    public void test46() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test46");
        byte[] byteArray3 = new byte[] { (byte) 100, (byte) 1, (byte) 100 };
        boolean boolean5 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray3, (int) (byte) 100);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100, 1, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #131
19: aastore
20: invokevirtual #7
23: pop
24: iconst_3
25: newarray       byte
27: dup
28: iconst_0
29: bipush        100
31: bastore
32: dup
33: iconst_1
34: iconst_1
35: bastore
36: dup
37: iconst_2
38: bipush        100
40: bastore
41: astore_1
42: aload_1
43: bipush        100
45: invokestatic  #14
48: istore_2
49: aload_1
50: invokestatic  #16
53: aload_1
54: invokestatic  #17
57: ldc           #132
59: invokestatic  #19
62: new           #20
65: dup
66: invokespecial #21
69: ldc           #22
71: invokevirtual #23
74: iload_2
75: invokevirtual #24
78: ldc           #25
80: invokevirtual #23
83: iconst_0
84: invokevirtual #24
87: ldc           #22
89: invokevirtual #23
92: invokevirtual #26
95: iload_2
96: ifne          103
99: iconst_1
100: goto          104
103: iconst_0
104: invokestatic  #27
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test47
Start line: 925
End line: 0
Method source code: 
    public void test47() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test47");
        byte[] byteArray4 = new byte[] { (byte) 100, (byte) 100, (byte) 10, (byte) 10 };
        boolean boolean6 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray4, 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100, 100, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #133
19: aastore
20: invokevirtual #7
23: pop
24: iconst_4
25: newarray       byte
27: dup
28: iconst_0
29: bipush        100
31: bastore
32: dup
33: iconst_1
34: bipush        100
36: bastore
37: dup
38: iconst_2
39: bipush        10
41: bastore
42: dup
43: iconst_3
44: bipush        10
46: bastore
47: astore_1
48: aload_1
49: iconst_0
50: invokestatic  #14
53: istore_2
54: aload_1
55: invokestatic  #16
58: aload_1
59: invokestatic  #17
62: ldc           #134
64: invokestatic  #19
67: new           #20
70: dup
71: invokespecial #21
74: ldc           #22
76: invokevirtual #23
79: iload_2
80: invokevirtual #24
83: ldc           #25
85: invokevirtual #23
88: iconst_0
89: invokevirtual #24
92: ldc           #22
94: invokevirtual #23
97: invokevirtual #26
100: iload_2
101: ifne          108
104: iconst_1
105: goto          109
108: iconst_0
109: invokestatic  #27
112: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test48
Start line: 936
End line: 0
Method source code: 
    public void test48() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test48");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) 1 };
        boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray2, (int) (byte) -1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, 1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #135
19: aastore
20: invokevirtual #7
23: pop
24: iconst_2
25: newarray       byte
27: dup
28: iconst_0
29: bipush        10
31: bastore
32: dup
33: iconst_1
34: iconst_1
35: bastore
36: astore_1
37: aload_1
38: iconst_m1
39: invokestatic  #14
42: istore_2
43: aload_1
44: invokestatic  #16
47: aload_1
48: invokestatic  #17
51: ldc           #136
53: invokestatic  #19
56: new           #20
59: dup
60: invokespecial #21
63: ldc           #22
65: invokevirtual #23
68: iload_2
69: invokevirtual #24
72: ldc           #25
74: invokevirtual #23
77: iconst_0
78: invokevirtual #24
81: ldc           #22
83: invokevirtual #23
86: invokevirtual #26
89: iload_2
90: ifne          97
93: iconst_1
94: goto          98
97: iconst_0
98: invokestatic  #27
101: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test49
Start line: 947
End line: 0
Method source code: 
    public void test49() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test49");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 1, (byte) 0, (byte) 100, (byte) 1, (byte) 100 };
        boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (int) (short) 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 1, 0, 100, 1, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #137
19: aastore
20: invokevirtual #7
23: pop
24: bipush        6
26: newarray       byte
28: dup
29: iconst_0
30: bipush        10
32: bastore
33: dup
34: iconst_1
35: iconst_1
36: bastore
37: dup
38: iconst_2
39: iconst_0
40: bastore
41: dup
42: iconst_3
43: bipush        100
45: bastore
46: dup
47: iconst_4
48: iconst_1
49: bastore
50: dup
51: iconst_5
52: bipush        100
54: bastore
55: astore_1
56: aload_1
57: iconst_0
58: invokestatic  #14
61: istore_2
62: aload_1
63: invokestatic  #16
66: aload_1
67: invokestatic  #17
70: ldc           #138
72: invokestatic  #19
75: new           #20
78: dup
79: invokespecial #21
82: ldc           #22
84: invokevirtual #23
87: iload_2
88: invokevirtual #24
91: ldc           #25
93: invokevirtual #23
96: iconst_0
97: invokevirtual #24
100: ldc           #22
102: invokevirtual #23
105: invokevirtual #26
108: iload_2
109: ifne          116
112: iconst_1
113: goto          117
116: iconst_0
117: invokestatic  #27
120: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test50
Start line: 958
End line: 0
Method source code: 
    public void test50() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test50");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 100, (byte) 0, (byte) 0, (byte) 10, (byte) -1 };
        boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 100, 0, 0, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #139
19: aastore
20: invokevirtual #7
23: pop
24: bipush        6
26: newarray       byte
28: dup
29: iconst_0
30: iconst_m1
31: bastore
32: dup
33: iconst_1
34: bipush        100
36: bastore
37: dup
38: iconst_2
39: iconst_0
40: bastore
41: dup
42: iconst_3
43: iconst_0
44: bastore
45: dup
46: iconst_4
47: bipush        10
49: bastore
50: dup
51: iconst_5
52: iconst_m1
53: bastore
54: astore_1
55: aload_1
56: iconst_1
57: invokestatic  #14
60: istore_2
61: aload_1
62: invokestatic  #16
65: aload_1
66: invokestatic  #17
69: ldc           #140
71: invokestatic  #19
74: new           #20
77: dup
78: invokespecial #21
81: ldc           #22
83: invokevirtual #23
86: iload_2
87: invokevirtual #24
90: ldc           #25
92: invokevirtual #23
95: iconst_0
96: invokevirtual #24
99: ldc           #22
101: invokevirtual #23
104: invokevirtual #26
107: iload_2
108: ifne          115
111: iconst_1
112: goto          116
115: iconst_0
116: invokestatic  #27
119: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test51
Start line: 969
End line: 0
Method source code: 
    public void test51() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test51");
        byte[] byteArray6 = new byte[] { (byte) 1, (byte) 10, (byte) 100, (byte) 100, (byte) 10, (byte) -1 };
        boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10, 100, 100, 10, -1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #141
19: aastore
20: invokevirtual #7
23: pop
24: bipush        6
26: newarray       byte
28: dup
29: iconst_0
30: iconst_1
31: bastore
32: dup
33: iconst_1
34: bipush        10
36: bastore
37: dup
38: iconst_2
39: bipush        100
41: bastore
42: dup
43: iconst_3
44: bipush        100
46: bastore
47: dup
48: iconst_4
49: bipush        10
51: bastore
52: dup
53: iconst_5
54: iconst_m1
55: bastore
56: astore_1
57: aload_1
58: iconst_0
59: invokestatic  #14
62: istore_2
63: aload_1
64: invokestatic  #16
67: aload_1
68: invokestatic  #17
71: ldc           #142
73: invokestatic  #19
76: new           #20
79: dup
80: invokespecial #21
83: ldc           #22
85: invokevirtual #23
88: iload_2
89: invokevirtual #24
92: ldc           #25
94: invokevirtual #23
97: iconst_0
98: invokevirtual #24
101: ldc           #22
103: invokevirtual #23
106: invokevirtual #26
109: iload_2
110: ifne          117
113: iconst_1
114: goto          118
117: iconst_0
118: invokestatic  #27
121: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test52
Start line: 980
End line: 0
Method source code: 
    public void test52() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test52");
        byte[] byteArray0 = new byte[] {};
        boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (byte) -1);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #143
19: aastore
20: invokevirtual #7
23: pop
24: iconst_0
25: newarray       byte
27: astore_1
28: aload_1
29: iconst_m1
30: invokestatic  #14
33: istore_2
34: aload_1
35: invokestatic  #16
38: aload_1
39: invokestatic  #17
42: ldc           #18
44: invokestatic  #19
47: new           #20
50: dup
51: invokespecial #21
54: ldc           #22
56: invokevirtual #23
59: iload_2
60: invokevirtual #24
63: ldc           #25
65: invokevirtual #23
68: iconst_0
69: invokevirtual #24
72: ldc           #22
74: invokevirtual #23
77: invokevirtual #26
80: iload_2
81: ifne          88
84: iconst_1
85: goto          89
88: iconst_0
89: invokestatic  #27
92: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test53
Start line: 991
End line: 0
Method source code: 
    public void test53() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test53");
        byte[] byteArray0 = new byte[] {};
        boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, 0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #144
19: aastore
20: invokevirtual #7
23: pop
24: iconst_0
25: newarray       byte
27: astore_1
28: aload_1
29: iconst_0
30: invokestatic  #14
33: istore_2
34: aload_1
35: invokestatic  #16
38: aload_1
39: invokestatic  #17
42: ldc           #18
44: invokestatic  #19
47: new           #20
50: dup
51: invokespecial #21
54: ldc           #22
56: invokevirtual #23
59: iload_2
60: invokevirtual #24
63: ldc           #25
65: invokevirtual #23
68: iconst_0
69: invokevirtual #24
72: ldc           #22
74: invokevirtual #23
77: invokevirtual #26
80: iload_2
81: ifne          88
84: iconst_1
85: goto          89
88: iconst_0
89: invokestatic  #27
92: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test54
Start line: 1002
End line: 0
Method source code: 
    public void test54() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test54");
        byte[] byteArray1 = new byte[] { (byte) 10 };
        boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, (-1));
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[10]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #145
19: aastore
20: invokevirtual #7
23: pop
24: iconst_1
25: newarray       byte
27: dup
28: iconst_0
29: bipush        10
31: bastore
32: astore_1
33: aload_1
34: iconst_m1
35: invokestatic  #14
38: istore_2
39: aload_1
40: invokestatic  #16
43: aload_1
44: invokestatic  #17
47: ldc           #103
49: invokestatic  #19
52: new           #20
55: dup
56: invokespecial #21
59: ldc           #22
61: invokevirtual #23
64: iload_2
65: invokevirtual #24
68: ldc           #25
70: invokevirtual #23
73: iconst_0
74: invokevirtual #24
77: ldc           #22
79: invokevirtual #23
82: invokevirtual #26
85: iload_2
86: ifne          93
89: iconst_1
90: goto          94
93: iconst_0
94: invokestatic  #27
97: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test55
Start line: 1013
End line: 0
Method source code: 
    public void test55() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test55");
        byte[] byteArray0 = new byte[] {};
        boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, 1);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #146
19: aastore
20: invokevirtual #7
23: pop
24: iconst_0
25: newarray       byte
27: astore_1
28: aload_1
29: iconst_1
30: invokestatic  #14
33: istore_2
34: aload_1
35: invokestatic  #16
38: aload_1
39: invokestatic  #17
42: ldc           #18
44: invokestatic  #19
47: new           #20
50: dup
51: invokespecial #21
54: ldc           #22
56: invokevirtual #23
59: iload_2
60: invokevirtual #24
63: ldc           #25
65: invokevirtual #23
68: iconst_0
69: invokevirtual #24
72: ldc           #22
74: invokevirtual #23
77: invokevirtual #26
80: iload_2
81: ifne          88
84: iconst_1
85: goto          89
88: iconst_0
89: invokestatic  #27
92: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test56
Start line: 1024
End line: 0
Method source code: 
    public void test56() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test56");
        byte[] byteArray5 = new byte[] { (byte) -1, (byte) 100, (byte) 100, (byte) 0, (byte) 0 };
        boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, (int) 'a');
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-1, 100, 100, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #147
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: newarray       byte
27: dup
28: iconst_0
29: iconst_m1
30: bastore
31: dup
32: iconst_1
33: bipush        100
35: bastore
36: dup
37: iconst_2
38: bipush        100
40: bastore
41: dup
42: iconst_3
43: iconst_0
44: bastore
45: dup
46: iconst_4
47: iconst_0
48: bastore
49: astore_1
50: aload_1
51: bipush        97
53: invokestatic  #14
56: istore_2
57: aload_1
58: invokestatic  #16
61: aload_1
62: invokestatic  #17
65: ldc           #148
67: invokestatic  #19
70: new           #20
73: dup
74: invokespecial #21
77: ldc           #22
79: invokevirtual #23
82: iload_2
83: invokevirtual #24
86: ldc           #25
88: invokevirtual #23
91: iconst_0
92: invokevirtual #24
95: ldc           #22
97: invokevirtual #23
100: invokevirtual #26
103: iload_2
104: ifne          111
107: iconst_1
108: goto          112
111: iconst_0
112: invokestatic  #27
115: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test57
Start line: 1035
End line: 0
Method source code: 
    public void test57() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test57");
        byte[] byteArray1 = new byte[] { (byte) 10 };
        boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, (int) (short) -1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[10]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #149
19: aastore
20: invokevirtual #7
23: pop
24: iconst_1
25: newarray       byte
27: dup
28: iconst_0
29: bipush        10
31: bastore
32: astore_1
33: aload_1
34: iconst_m1
35: invokestatic  #14
38: istore_2
39: aload_1
40: invokestatic  #16
43: aload_1
44: invokestatic  #17
47: ldc           #103
49: invokestatic  #19
52: new           #20
55: dup
56: invokespecial #21
59: ldc           #22
61: invokevirtual #23
64: iload_2
65: invokevirtual #24
68: ldc           #25
70: invokevirtual #23
73: iconst_0
74: invokevirtual #24
77: ldc           #22
79: invokevirtual #23
82: invokevirtual #26
85: iload_2
86: ifne          93
89: iconst_1
90: goto          94
93: iconst_0
94: invokestatic  #27
97: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test58
Start line: 1046
End line: 0
Method source code: 
    public void test58() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test58");
        byte[] byteArray2 = new byte[] { (byte) 10, (byte) 1 };
        boolean boolean4 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray2, 0);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[10, 1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #150
19: aastore
20: invokevirtual #7
23: pop
24: iconst_2
25: newarray       byte
27: dup
28: iconst_0
29: bipush        10
31: bastore
32: dup
33: iconst_1
34: iconst_1
35: bastore
36: astore_1
37: aload_1
38: iconst_0
39: invokestatic  #14
42: istore_2
43: aload_1
44: invokestatic  #16
47: aload_1
48: invokestatic  #17
51: ldc           #136
53: invokestatic  #19
56: new           #20
59: dup
60: invokespecial #21
63: ldc           #22
65: invokevirtual #23
68: iload_2
69: invokevirtual #24
72: ldc           #25
74: invokevirtual #23
77: iconst_0
78: invokevirtual #24
81: ldc           #22
83: invokevirtual #23
86: invokevirtual #26
89: iload_2
90: ifne          97
93: iconst_1
94: goto          98
97: iconst_0
98: invokestatic  #27
101: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test59
Start line: 1057
End line: 0
Method source code: 
    public void test59() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test59");
        byte[] byteArray1 = new byte[] { (byte) 0 };
        boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, (int) (short) 1);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #151
19: aastore
20: invokevirtual #7
23: pop
24: iconst_1
25: newarray       byte
27: dup
28: iconst_0
29: iconst_0
30: bastore
31: astore_1
32: aload_1
33: iconst_1
34: invokestatic  #14
37: istore_2
38: aload_1
39: invokestatic  #16
42: aload_1
43: invokestatic  #17
46: ldc           #107
48: invokestatic  #19
51: new           #20
54: dup
55: invokespecial #21
58: ldc           #22
60: invokevirtual #23
63: iload_2
64: invokevirtual #24
67: ldc           #25
69: invokevirtual #23
72: iconst_0
73: invokevirtual #24
76: ldc           #22
78: invokevirtual #23
81: invokevirtual #26
84: iload_2
85: ifne          92
88: iconst_1
89: goto          93
92: iconst_0
93: invokestatic  #27
96: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test60
Start line: 1068
End line: 0
Method source code: 
    public void test60() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test60");
        byte[] byteArray0 = new byte[] {};
        boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) (byte) 0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #152
19: aastore
20: invokevirtual #7
23: pop
24: iconst_0
25: newarray       byte
27: astore_1
28: aload_1
29: iconst_0
30: invokestatic  #14
33: istore_2
34: aload_1
35: invokestatic  #16
38: aload_1
39: invokestatic  #17
42: ldc           #18
44: invokestatic  #19
47: new           #20
50: dup
51: invokespecial #21
54: ldc           #22
56: invokevirtual #23
59: iload_2
60: invokevirtual #24
63: ldc           #25
65: invokevirtual #23
68: iconst_0
69: invokevirtual #24
72: ldc           #22
74: invokevirtual #23
77: invokevirtual #26
80: iload_2
81: ifne          88
84: iconst_1
85: goto          89
88: iconst_0
89: invokestatic  #27
92: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test61
Start line: 1079
End line: 0
Method source code: 
    public void test61() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test61");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) -1, (byte) 10, (byte) 10, (byte) 1, (byte) 10 };
        boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, (int) (byte) -1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, -1, 10, 10, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #153
19: aastore
20: invokevirtual #7
23: pop
24: bipush        6
26: newarray       byte
28: dup
29: iconst_0
30: bipush        10
32: bastore
33: dup
34: iconst_1
35: iconst_m1
36: bastore
37: dup
38: iconst_2
39: bipush        10
41: bastore
42: dup
43: iconst_3
44: bipush        10
46: bastore
47: dup
48: iconst_4
49: iconst_1
50: bastore
51: dup
52: iconst_5
53: bipush        10
55: bastore
56: astore_1
57: aload_1
58: iconst_m1
59: invokestatic  #14
62: istore_2
63: aload_1
64: invokestatic  #16
67: aload_1
68: invokestatic  #17
71: ldc           #154
73: invokestatic  #19
76: new           #20
79: dup
80: invokespecial #21
83: ldc           #22
85: invokevirtual #23
88: iload_2
89: invokevirtual #24
92: ldc           #25
94: invokevirtual #23
97: iconst_0
98: invokevirtual #24
101: ldc           #22
103: invokevirtual #23
106: invokevirtual #26
109: iload_2
110: ifne          117
113: iconst_1
114: goto          118
117: iconst_0
118: invokestatic  #27
121: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test62
Start line: 1090
End line: 0
Method source code: 
    public void test62() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test62");
        byte[] byteArray6 = new byte[] { (byte) 100, (byte) 1, (byte) 1, (byte) 10, (byte) 100, (byte) -1 };
        boolean boolean8 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray6, 0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[100, 1, 1, 10, 100, -1]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #155
19: aastore
20: invokevirtual #7
23: pop
24: bipush        6
26: newarray       byte
28: dup
29: iconst_0
30: bipush        100
32: bastore
33: dup
34: iconst_1
35: iconst_1
36: bastore
37: dup
38: iconst_2
39: iconst_1
40: bastore
41: dup
42: iconst_3
43: bipush        10
45: bastore
46: dup
47: iconst_4
48: bipush        100
50: bastore
51: dup
52: iconst_5
53: iconst_m1
54: bastore
55: astore_1
56: aload_1
57: iconst_0
58: invokestatic  #14
61: istore_2
62: aload_1
63: invokestatic  #16
66: aload_1
67: invokestatic  #17
70: ldc           #156
72: invokestatic  #19
75: new           #20
78: dup
79: invokespecial #21
82: ldc           #22
84: invokevirtual #23
87: iload_2
88: invokevirtual #24
91: ldc           #25
93: invokevirtual #23
96: iconst_0
97: invokevirtual #24
100: ldc           #22
102: invokevirtual #23
105: invokevirtual #26
108: iload_2
109: ifne          116
112: iconst_1
113: goto          117
116: iconst_0
117: invokestatic  #27
120: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test63
Start line: 1101
End line: 0
Method source code: 
    public void test63() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test63");
        byte[] byteArray5 = new byte[] { (byte) 100, (byte) 0, (byte) -1, (byte) 1, (byte) -1 };
        boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, (int) (short) 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 0, -1, 1, -1]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #157
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: newarray       byte
27: dup
28: iconst_0
29: bipush        100
31: bastore
32: dup
33: iconst_1
34: iconst_0
35: bastore
36: dup
37: iconst_2
38: iconst_m1
39: bastore
40: dup
41: iconst_3
42: iconst_1
43: bastore
44: dup
45: iconst_4
46: iconst_m1
47: bastore
48: astore_1
49: aload_1
50: iconst_0
51: invokestatic  #14
54: istore_2
55: aload_1
56: invokestatic  #16
59: aload_1
60: invokestatic  #17
63: ldc           #158
65: invokestatic  #19
68: new           #20
71: dup
72: invokespecial #21
75: ldc           #22
77: invokevirtual #23
80: iload_2
81: invokevirtual #24
84: ldc           #25
86: invokevirtual #23
89: iconst_0
90: invokevirtual #24
93: ldc           #22
95: invokevirtual #23
98: invokevirtual #26
101: iload_2
102: ifne          109
105: iconst_1
106: goto          110
109: iconst_0
110: invokestatic  #27
113: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test64
Start line: 1112
End line: 0
Method source code: 
    public void test64() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test64");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, (int) (byte) 0);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #159
19: aastore
20: invokevirtual #7
23: pop
24: iconst_1
25: newarray       byte
27: dup
28: iconst_0
29: bipush        100
31: bastore
32: astore_1
33: aload_1
34: iconst_0
35: invokestatic  #14
38: istore_2
39: aload_1
40: invokestatic  #16
43: aload_1
44: invokestatic  #17
47: ldc           #160
49: invokestatic  #19
52: new           #20
55: dup
56: invokespecial #21
59: ldc           #22
61: invokevirtual #23
64: iload_2
65: invokevirtual #24
68: ldc           #25
70: invokevirtual #23
73: iconst_0
74: invokevirtual #24
77: ldc           #22
79: invokevirtual #23
82: invokevirtual #26
85: iload_2
86: ifne          93
89: iconst_1
90: goto          94
93: iconst_0
94: invokestatic  #27
97: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test65
Start line: 1123
End line: 0
Method source code: 
    public void test65() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test65");
        byte[] byteArray5 = new byte[] { (byte) 0, (byte) -1, (byte) 1, (byte) 1, (byte) 10 };
        boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, -1, 1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #161
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: newarray       byte
27: dup
28: iconst_0
29: iconst_0
30: bastore
31: dup
32: iconst_1
33: iconst_m1
34: bastore
35: dup
36: iconst_2
37: iconst_1
38: bastore
39: dup
40: iconst_3
41: iconst_1
42: bastore
43: dup
44: iconst_4
45: bipush        10
47: bastore
48: astore_1
49: aload_1
50: iconst_0
51: invokestatic  #14
54: istore_2
55: aload_1
56: invokestatic  #16
59: aload_1
60: invokestatic  #17
63: ldc           #162
65: invokestatic  #19
68: new           #20
71: dup
72: invokespecial #21
75: ldc           #22
77: invokevirtual #23
80: iload_2
81: invokevirtual #24
84: ldc           #25
86: invokevirtual #23
89: iconst_0
90: invokevirtual #24
93: ldc           #22
95: invokevirtual #23
98: invokevirtual #26
101: iload_2
102: ifne          109
105: iconst_1
106: goto          110
109: iconst_0
110: invokestatic  #27
113: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test66
Start line: 1134
End line: 0
Method source code: 
    public void test66() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test66");
        byte[] byteArray3 = new byte[] { (byte) 0, (byte) 10, (byte) 1 };
        boolean boolean5 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray3, (int) (byte) -1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #163
19: aastore
20: invokevirtual #7
23: pop
24: iconst_3
25: newarray       byte
27: dup
28: iconst_0
29: iconst_0
30: bastore
31: dup
32: iconst_1
33: bipush        10
35: bastore
36: dup
37: iconst_2
38: iconst_1
39: bastore
40: astore_1
41: aload_1
42: iconst_m1
43: invokestatic  #14
46: istore_2
47: aload_1
48: invokestatic  #16
51: aload_1
52: invokestatic  #17
55: ldc           #164
57: invokestatic  #19
60: new           #20
63: dup
64: invokespecial #21
67: ldc           #22
69: invokevirtual #23
72: iload_2
73: invokevirtual #24
76: ldc           #25
78: invokevirtual #23
81: iconst_0
82: invokevirtual #24
85: ldc           #22
87: invokevirtual #23
90: invokevirtual #26
93: iload_2
94: ifne          101
97: iconst_1
98: goto          102
101: iconst_0
102: invokestatic  #27
105: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test67
Start line: 1145
End line: 0
Method source code: 
    public void test67() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test67");
        byte[] byteArray4 = new byte[] { (byte) 100, (byte) 0, (byte) -1, (byte) 1 };
        boolean boolean6 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray4, (int) (byte) 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[100, 0, -1, 1]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #165
19: aastore
20: invokevirtual #7
23: pop
24: iconst_4
25: newarray       byte
27: dup
28: iconst_0
29: bipush        100
31: bastore
32: dup
33: iconst_1
34: iconst_0
35: bastore
36: dup
37: iconst_2
38: iconst_m1
39: bastore
40: dup
41: iconst_3
42: iconst_1
43: bastore
44: astore_1
45: aload_1
46: bipush        10
48: invokestatic  #14
51: istore_2
52: aload_1
53: invokestatic  #16
56: aload_1
57: invokestatic  #17
60: ldc           #166
62: invokestatic  #19
65: new           #20
68: dup
69: invokespecial #21
72: ldc           #22
74: invokevirtual #23
77: iload_2
78: invokevirtual #24
81: ldc           #25
83: invokevirtual #23
86: iconst_0
87: invokevirtual #24
90: ldc           #22
92: invokevirtual #23
95: invokevirtual #26
98: iload_2
99: ifne          106
102: iconst_1
103: goto          107
106: iconst_0
107: invokestatic  #27
110: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test68
Start line: 1156
End line: 0
Method source code: 
    public void test68() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test68");
        byte[] byteArray0 = null;
        try {
            boolean boolean2 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #167
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: aload_1
27: bipush        97
29: invokestatic  #14
32: istore_2
33: ldc           #32
35: invokestatic  #11
38: goto          42
41: astore_2
42: return
Exception table:
from    to  target type
26    38    41   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test69
Start line: 1170
End line: 0
Method source code: 
    public void test69() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test69");
        byte[] byteArray1 = new byte[] { (byte) 100 };
        boolean boolean3 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray1, (int) '4');
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[100]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #168
19: aastore
20: invokevirtual #7
23: pop
24: iconst_1
25: newarray       byte
27: dup
28: iconst_0
29: bipush        100
31: bastore
32: astore_1
33: aload_1
34: bipush        52
36: invokestatic  #14
39: istore_2
40: aload_1
41: invokestatic  #16
44: aload_1
45: invokestatic  #17
48: ldc           #160
50: invokestatic  #19
53: new           #20
56: dup
57: invokespecial #21
60: ldc           #22
62: invokevirtual #23
65: iload_2
66: invokevirtual #24
69: ldc           #25
71: invokevirtual #23
74: iconst_0
75: invokevirtual #24
78: ldc           #22
80: invokevirtual #23
83: invokevirtual #26
86: iload_2
87: ifne          94
90: iconst_1
91: goto          95
94: iconst_0
95: invokestatic  #27
98: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test70
Start line: 1181
End line: 0
Method source code: 
    public void test70() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test70");
        byte[] byteArray3 = new byte[] { (byte) -1, (byte) 100, (byte) 0 };
        boolean boolean5 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray3, (int) (byte) 100);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-1, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #169
19: aastore
20: invokevirtual #7
23: pop
24: iconst_3
25: newarray       byte
27: dup
28: iconst_0
29: iconst_m1
30: bastore
31: dup
32: iconst_1
33: bipush        100
35: bastore
36: dup
37: iconst_2
38: iconst_0
39: bastore
40: astore_1
41: aload_1
42: bipush        100
44: invokestatic  #14
47: istore_2
48: aload_1
49: invokestatic  #16
52: aload_1
53: invokestatic  #17
56: ldc           #170
58: invokestatic  #19
61: new           #20
64: dup
65: invokespecial #21
68: ldc           #22
70: invokevirtual #23
73: iload_2
74: invokevirtual #24
77: ldc           #25
79: invokevirtual #23
82: iconst_0
83: invokevirtual #24
86: ldc           #22
88: invokevirtual #23
91: invokevirtual #26
94: iload_2
95: ifne          102
98: iconst_1
99: goto          103
102: iconst_0
103: invokestatic  #27
106: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/src/test/java/org/apache/commons/compress/compressors/bzip2/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/compress/22/target/test-classes/org/apache/commons/compress/compressors/bzip2/RegressionTest0.class
Class name: RegressionTest0
Method name: test71
Start line: 1192
End line: 0
Method source code: 
    public void test71() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test71");
        byte[] byteArray5 = new byte[] { (byte) 100, (byte) 10, (byte) 10, (byte) 100, (byte) 0 };
        boolean boolean7 = org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream.matches(byteArray5, (int) ' ');
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[100, 10, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #171
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: newarray       byte
27: dup
28: iconst_0
29: bipush        100
31: bastore
32: dup
33: iconst_1
34: bipush        10
36: bastore
37: dup
38: iconst_2
39: bipush        10
41: bastore
42: dup
43: iconst_3
44: bipush        100
46: bastore
47: dup
48: iconst_4
49: iconst_0
50: bastore
51: astore_1
52: aload_1
53: bipush        32
55: invokestatic  #14
58: istore_2
59: aload_1
60: invokestatic  #16
63: aload_1
64: invokestatic  #17
67: ldc           #172
69: invokestatic  #19
72: new           #20
75: dup
76: invokespecial #21
79: ldc           #22
81: invokevirtual #23
84: iload_2
85: invokevirtual #24
88: ldc           #25
90: invokevirtual #23
93: iconst_0
94: invokevirtual #24
97: ldc           #22
99: invokevirtual #23
102: invokevirtual #26
105: iload_2
106: ifne          113
109: iconst_1
110: goto          114
113: iconst_0
114: invokestatic  #27
117: return
