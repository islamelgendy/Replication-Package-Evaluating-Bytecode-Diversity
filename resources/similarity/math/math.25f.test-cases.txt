Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test001
Start line: 12
End line: 27
Method source code: 
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        double[] doubleArray5 = new double[] { (-1.0f), '4', 35.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray6 = harmonicFitter1.fit(doubleArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 52.0, 35.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #6
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: iconst_3
36: newarray       double
38: dup
39: iconst_0
40: ldc2_w        #10
43: dastore
44: dup
45: iconst_1
46: ldc2_w        #12
49: dastore
50: dup
51: iconst_2
52: ldc2_w        #14
55: dastore
56: astore_3
57: aload_2
58: aload_3
59: invokevirtual #16
62: astore        4
64: ldc           #17
66: invokestatic  #18
69: goto          74
72: astore        4
74: aload_3
75: invokestatic  #20
78: aload_3
79: invokestatic  #21
82: ldc           #22
84: invokestatic  #23
87: return
Exception table:
from    to  target type
57    69    72   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test002
Start line: 30
End line: 44
Method source code: 
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray3 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #24
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: invokevirtual #26
44: astore        4
46: ldc           #27
48: invokestatic  #18
51: goto          56
54: astore        4
56: aload_3
57: invokestatic  #20
60: return
Exception table:
from    to  target type
40    51    54   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test003
Start line: 47
End line: 61
Method source code: 
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric2 = null;
        double[] doubleArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = harmonicFitter1.fit(parametric2, doubleArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #29
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aconst_null
36: astore_3
37: aconst_null
38: astore        4
40: aload_2
41: aload_3
42: aload         4
44: invokevirtual #30
47: astore        5
49: ldc           #17
51: invokestatic  #18
54: goto          59
57: astore        5
59: return
Exception table:
from    to  target type
40    54    57   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test004
Start line: 64
End line: 79
Method source code: 
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        double[] doubleArray7 = new double[] { 10L, 52.0d, 10L, (short) 100, 1.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = harmonicFitter1.fit(doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0, 52.0, 10.0, 100.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #31
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: iconst_5
36: newarray       double
38: dup
39: iconst_0
40: ldc2_w        #32
43: dastore
44: dup
45: iconst_1
46: ldc2_w        #12
49: dastore
50: dup
51: iconst_2
52: ldc2_w        #32
55: dastore
56: dup
57: iconst_3
58: ldc2_w        #34
61: dastore
62: dup
63: iconst_4
64: dconst_1
65: dastore
66: astore_3
67: aload_2
68: aload_3
69: invokevirtual #16
72: astore        4
74: ldc           #17
76: invokestatic  #18
79: goto          84
82: astore        4
84: aload_3
85: invokestatic  #20
88: aload_3
89: invokestatic  #21
92: ldc           #36
94: invokestatic  #23
97: return
Exception table:
from    to  target type
67    79    82   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test005
Start line: 82
End line: 98
Method source code: 
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric3 = null;
        double[] doubleArray10 = new double[] { (-1.0f), '4', (-1L), ' ', 10.0d, (-1.0d) };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = harmonicFitter1.fit((int) (byte) 0, parametric3, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 52.0, -1.0, 32.0, 10.0, -1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #37
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aconst_null
36: astore_3
37: bipush        6
39: newarray       double
41: dup
42: iconst_0
43: ldc2_w        #10
46: dastore
47: dup
48: iconst_1
49: ldc2_w        #12
52: dastore
53: dup
54: iconst_2
55: ldc2_w        #10
58: dastore
59: dup
60: iconst_3
61: ldc2_w        #38
64: dastore
65: dup
66: iconst_4
67: ldc2_w        #32
70: dastore
71: dup
72: iconst_5
73: ldc2_w        #10
76: dastore
77: astore        4
79: aload_2
80: iconst_0
81: aload_3
82: aload         4
84: invokevirtual #40
87: astore        5
89: ldc           #17
91: invokestatic  #18
94: goto          99
97: astore        5
99: aload         4
101: invokestatic  #20
104: aload         4
106: invokestatic  #21
109: ldc           #41
111: invokestatic  #23
114: return
Exception table:
from    to  target type
79    94    97   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test006
Start line: 101
End line: 118
Method source code: 
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric6 = null;
        double[] doubleArray10 = new double[] { 52.0d, 'a', (short) 100 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = harmonicFitter1.fit(0, parametric6, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[52.0, 97.0, 100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #42
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aconst_null
44: astore_3
45: iconst_3
46: newarray       double
48: dup
49: iconst_0
50: ldc2_w        #12
53: dastore
54: dup
55: iconst_1
56: ldc2_w        #44
59: dastore
60: dup
61: iconst_2
62: ldc2_w        #34
65: dastore
66: astore        4
68: aload_2
69: iconst_0
70: aload_3
71: aload         4
73: invokevirtual #40
76: astore        5
78: ldc           #17
80: invokestatic  #18
83: goto          88
86: astore        5
88: aload         4
90: invokestatic  #20
93: aload         4
95: invokestatic  #21
98: ldc           #46
100: invokestatic  #23
103: return
Exception table:
from    to  target type
68    83    86   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test007
Start line: 121
End line: 137
Method source code: 
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        double[] doubleArray11 = new double[] { '4', 0.0d, (short) 10, 10.0f, (short) 100, 1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = harmonicFitter1.fit(doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, 0.0, 10.0, 10.0, 100.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #47
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: bipush        6
45: newarray       double
47: dup
48: iconst_0
49: ldc2_w        #12
52: dastore
53: dup
54: iconst_1
55: dconst_0
56: dastore
57: dup
58: iconst_2
59: ldc2_w        #32
62: dastore
63: dup
64: iconst_3
65: ldc2_w        #32
68: dastore
69: dup
70: iconst_4
71: ldc2_w        #34
74: dastore
75: dup
76: iconst_5
77: dconst_1
78: dastore
79: astore_3
80: aload_2
81: aload_3
82: invokevirtual #16
85: astore        4
87: ldc           #17
89: invokestatic  #18
92: goto          97
95: astore        4
97: aload_3
98: invokestatic  #20
101: aload_3
102: invokestatic  #21
105: ldc           #48
107: invokestatic  #23
110: return
Exception table:
from    to  target type
80    92    95   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test008
Start line: 140
End line: 156
Method source code: 
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        double[] doubleArray11 = new double[] { ' ', (-1.0d), 35.0d, 'a', 10.0f, 100.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = harmonicFitter1.fit(doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[32.0, -1.0, 35.0, 97.0, 10.0, 100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #49
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: bipush        6
45: newarray       double
47: dup
48: iconst_0
49: ldc2_w        #38
52: dastore
53: dup
54: iconst_1
55: ldc2_w        #10
58: dastore
59: dup
60: iconst_2
61: ldc2_w        #14
64: dastore
65: dup
66: iconst_3
67: ldc2_w        #44
70: dastore
71: dup
72: iconst_4
73: ldc2_w        #32
76: dastore
77: dup
78: iconst_5
79: ldc2_w        #34
82: dastore
83: astore_3
84: aload_2
85: aload_3
86: invokevirtual #16
89: astore        4
91: ldc           #17
93: invokestatic  #18
96: goto          101
99: astore        4
101: aload_3
102: invokestatic  #20
105: aload_3
106: invokestatic  #21
109: ldc           #50
111: invokestatic  #23
114: return
Exception table:
from    to  target type
84    96    99   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test009
Start line: 159
End line: 176
Method source code: 
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric5 = null;
        double[] doubleArray10 = new double[] { (short) 1, (byte) 0, 10L, 1.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = harmonicFitter1.fit(parametric5, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 0.0, 10.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #51
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aconst_null
44: astore_3
45: iconst_4
46: newarray       double
48: dup
49: iconst_0
50: dconst_1
51: dastore
52: dup
53: iconst_1
54: dconst_0
55: dastore
56: dup
57: iconst_2
58: ldc2_w        #32
61: dastore
62: dup
63: iconst_3
64: dconst_1
65: dastore
66: astore        4
68: aload_2
69: aload_3
70: aload         4
72: invokevirtual #30
75: astore        5
77: ldc           #17
79: invokestatic  #18
82: goto          87
85: astore        5
87: aload         4
89: invokestatic  #20
92: aload         4
94: invokestatic  #21
97: ldc           #52
99: invokestatic  #23
102: return
Exception table:
from    to  target type
68    82    85   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test010
Start line: 179
End line: 198
Method source code: 
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric8 = null;
        double[] doubleArray15 = new double[] { (byte) 1, 100, (short) 10, (short) 0, 0L, 100L };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = harmonicFitter1.fit((int) (byte) 100, parametric8, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0, 10.0, 0.0, 0.0, 100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #53
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: ldc2_w        #32
44: ldc2_w        #10
47: dconst_0
48: invokevirtual #54
51: aconst_null
52: astore        4
54: bipush        6
56: newarray       double
58: dup
59: iconst_0
60: dconst_1
61: dastore
62: dup
63: iconst_1
64: ldc2_w        #34
67: dastore
68: dup
69: iconst_2
70: ldc2_w        #32
73: dastore
74: dup
75: iconst_3
76: dconst_0
77: dastore
78: dup
79: iconst_4
80: dconst_0
81: dastore
82: dup
83: iconst_5
84: ldc2_w        #34
87: dastore
88: astore        5
90: aload_2
91: bipush        100
93: aload         4
95: aload         5
97: invokevirtual #40
100: astore        6
102: ldc           #17
104: invokestatic  #18
107: goto          112
110: astore        6
112: aload_3
113: invokestatic  #20
116: aload         5
118: invokestatic  #20
121: aload         5
123: invokestatic  #21
126: ldc           #55
128: invokestatic  #23
131: return
Exception table:
from    to  target type
90   107   110   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test011
Start line: 201
End line: 221
Method source code: 
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter1.addObservedPoint((double) (short) 10, 0.0d);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric15 = null;
        double[] doubleArray19 = new double[] { 1, 100.0d, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray20 = harmonicFitter1.fit(parametric15, doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #56
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: ldc2_w        #34
55: ldc2_w        #34
58: ldc2_w        #32
61: invokevirtual #54
64: aload_2
65: ldc2_w        #32
68: dconst_0
69: invokevirtual #43
72: aconst_null
73: astore_3
74: iconst_3
75: newarray       double
77: dup
78: iconst_0
79: dconst_1
80: dastore
81: dup
82: iconst_1
83: ldc2_w        #34
86: dastore
87: dup
88: iconst_2
89: ldc2_w        #32
92: dastore
93: astore        4
95: aload_2
96: aload_3
97: aload         4
99: invokevirtual #30
102: astore        5
104: ldc           #17
106: invokestatic  #18
109: goto          114
112: astore        5
114: aload         4
116: invokestatic  #20
119: aload         4
121: invokestatic  #21
124: ldc           #57
126: invokestatic  #23
129: return
Exception table:
from    to  target type
95   109   112   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test012
Start line: 224
End line: 241
Method source code: 
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric9 = null;
        double[] doubleArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = harmonicFitter1.fit(parametric9, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #58
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #59
55: aconst_null
56: astore_3
57: aconst_null
58: astore        4
60: aload_2
61: aload_3
62: aload         4
64: invokevirtual #30
67: astore        5
69: ldc           #17
71: invokestatic  #18
74: goto          79
77: astore        5
79: return
Exception table:
from    to  target type
60    74    77   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test013
Start line: 244
End line: 260
Method source code: 
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #60
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: invokevirtual #25
44: astore        4
46: aload_2
47: invokevirtual #26
50: astore        5
52: ldc           #27
54: invokestatic  #18
57: goto          62
60: astore        5
62: aload_3
63: invokestatic  #20
66: aload         4
68: invokestatic  #20
71: return
Exception table:
from    to  target type
46    57    60   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test014
Start line: 263
End line: 281
Method source code: 
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric8 = null;
        double[] doubleArray10 = new double[] { 100L };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = harmonicFitter1.fit(parametric8, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #61
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aconst_null
52: astore_3
53: iconst_1
54: newarray       double
56: dup
57: iconst_0
58: ldc2_w        #34
61: dastore
62: astore        4
64: aload_2
65: aload_3
66: aload         4
68: invokevirtual #30
71: astore        5
73: ldc           #17
75: invokestatic  #18
78: goto          83
81: astore        5
83: aload         4
85: invokestatic  #20
88: aload         4
90: invokestatic  #21
93: ldc           #62
95: invokestatic  #23
98: return
Exception table:
from    to  target type
64    78    81   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test015
Start line: 284
End line: 297
Method source code: 
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray5 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #63
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: invokevirtual #26
47: astore_3
48: ldc           #64
50: invokestatic  #18
53: goto          57
56: astore_3
57: return
Exception table:
from    to  target type
43    53    56   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test016
Start line: 300
End line: 319
Method source code: 
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric8 = null;
        double[] doubleArray14 = new double[] { 10, 100.0d, '4', 0, 1.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = harmonicFitter1.fit(1, parametric8, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0, 52.0, 0.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #65
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: ldc2_w        #32
44: ldc2_w        #10
47: dconst_0
48: invokevirtual #54
51: aconst_null
52: astore        4
54: iconst_5
55: newarray       double
57: dup
58: iconst_0
59: ldc2_w        #32
62: dastore
63: dup
64: iconst_1
65: ldc2_w        #34
68: dastore
69: dup
70: iconst_2
71: ldc2_w        #12
74: dastore
75: dup
76: iconst_3
77: dconst_0
78: dastore
79: dup
80: iconst_4
81: dconst_1
82: dastore
83: astore        5
85: aload_2
86: iconst_1
87: aload         4
89: aload         5
91: invokevirtual #40
94: astore        6
96: ldc           #17
98: invokestatic  #18
101: goto          106
104: astore        6
106: aload_3
107: invokestatic  #20
110: aload         5
112: invokestatic  #20
115: aload         5
117: invokestatic  #21
120: ldc           #66
122: invokestatic  #23
125: return
Exception table:
from    to  target type
85   101   104   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test017
Start line: 322
End line: 334
Method source code: 
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray2 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #67
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #26
39: astore_3
40: ldc           #27
42: invokestatic  #18
45: goto          49
48: astore_3
49: return
Exception table:
from    to  target type
35    45    48   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test018
Start line: 337
End line: 351
Method source code: 
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser3 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray2);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #68
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: new           #69
43: dup
44: aload_3
45: invokespecial #70
48: astore        4
50: ldc           #27
52: invokestatic  #18
55: goto          60
58: astore        4
60: aload_3
61: invokestatic  #20
64: return
Exception table:
from    to  target type
40    55    58   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test019
Start line: 354
End line: 371
Method source code: 
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric5 = null;
        double[] doubleArray7 = new double[] { (-1.0f) };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = harmonicFitter1.fit(parametric5, doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #71
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aconst_null
44: astore_3
45: iconst_1
46: newarray       double
48: dup
49: iconst_0
50: ldc2_w        #10
53: dastore
54: astore        4
56: aload_2
57: aload_3
58: aload         4
60: invokevirtual #30
63: astore        5
65: ldc           #17
67: invokestatic  #18
70: goto          75
73: astore        5
75: aload         4
77: invokestatic  #20
80: aload         4
82: invokestatic  #21
85: ldc           #72
87: invokestatic  #23
90: return
Exception table:
from    to  target type
56    70    73   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test020
Start line: 374
End line: 395
Method source code: 
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        double[] doubleArray10 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = harmonicFitter1.fit(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #73
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: aload_2
57: invokevirtual #25
60: astore        4
62: iconst_0
63: newarray       double
65: astore        5
67: aload_2
68: aload         5
70: invokevirtual #16
73: astore        6
75: ldc           #17
77: invokestatic  #18
80: goto          85
83: astore        6
85: aload_3
86: invokestatic  #20
89: aload         4
91: invokestatic  #20
94: aload         5
96: invokestatic  #20
99: aload         5
101: invokestatic  #21
104: ldc           #74
106: invokestatic  #23
109: return
Exception table:
from    to  target type
67    80    83   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test021
Start line: 398
End line: 414
Method source code: 
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        double[] doubleArray10 = new double[] { (short) -1, 100.0f, 10, 1.0f, 35.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = harmonicFitter1.fit(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 10.0, 1.0, 35.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #75
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: iconst_5
44: newarray       double
46: dup
47: iconst_0
48: ldc2_w        #10
51: dastore
52: dup
53: iconst_1
54: ldc2_w        #34
57: dastore
58: dup
59: iconst_2
60: ldc2_w        #32
63: dastore
64: dup
65: iconst_3
66: dconst_1
67: dastore
68: dup
69: iconst_4
70: ldc2_w        #14
73: dastore
74: astore_3
75: aload_2
76: aload_3
77: invokevirtual #16
80: astore        4
82: ldc           #17
84: invokestatic  #18
87: goto          92
90: astore        4
92: aload_3
93: invokestatic  #20
96: aload_3
97: invokestatic  #21
100: ldc           #76
102: invokestatic  #23
105: return
Exception table:
from    to  target type
75    87    90   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test022
Start line: 417
End line: 441
Method source code: 
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        java.lang.Object[] objArray11 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray10);
        org.apache.commons.math3.exception.ZeroException zeroException12 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser13 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #77
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #78
27: astore_1
28: aconst_null
29: astore_2
30: new           #8
33: dup
34: aload_2
35: invokespecial #9
38: astore_3
39: aload_3
40: dconst_1
41: ldc2_w        #32
44: invokevirtual #43
47: aload_3
48: dconst_0
49: ldc2_w        #34
52: invokevirtual #43
55: aload_3
56: invokevirtual #59
59: aload_3
60: invokevirtual #25
63: astore        4
65: aload         4
67: checkcast     #79
70: invokestatic  #80
73: astore        5
75: new           #81
78: dup
79: aload_1
80: aload         4
82: checkcast     #79
85: invokespecial #82
88: astore        6
90: new           #69
93: dup
94: aload         4
96: invokespecial #70
99: astore        7
101: ldc           #27
103: invokestatic  #18
106: goto          111
109: astore        7
111: new           #83
114: dup
115: invokespecial #84
118: ldc           #85
120: invokevirtual #86
123: aload_1
124: invokevirtual #87
127: ldc           #88
129: invokevirtual #86
132: getstatic     #78
135: invokevirtual #87
138: ldc           #85
140: invokevirtual #86
143: invokevirtual #89
146: aload_1
147: getstatic     #78
150: invokevirtual #90
153: invokestatic  #91
156: aload         4
158: invokestatic  #20
161: aload         5
163: invokestatic  #20
166: aload         5
168: invokestatic  #92
171: ldc           #74
173: invokestatic  #23
176: aload         5
178: invokestatic  #93
181: ldc           #74
183: invokestatic  #23
186: return
Exception table:
from    to  target type
90   106   109   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test023
Start line: 444
End line: 465
Method source code: 
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric11 = null;
        double[] doubleArray15 = new double[] { 0.0d, (short) 10, 10L };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = harmonicFitter1.fit((int) '#', parametric11, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 10.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #94
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #59
55: aload_2
56: invokevirtual #25
59: astore_3
60: aconst_null
61: astore        4
63: iconst_3
64: newarray       double
66: dup
67: iconst_0
68: dconst_0
69: dastore
70: dup
71: iconst_1
72: ldc2_w        #32
75: dastore
76: dup
77: iconst_2
78: ldc2_w        #32
81: dastore
82: astore        5
84: aload_2
85: bipush        35
87: aload         4
89: aload         5
91: invokevirtual #40
94: astore        6
96: ldc           #17
98: invokestatic  #18
101: goto          106
104: astore        6
106: aload_3
107: invokestatic  #20
110: aload         5
112: invokestatic  #20
115: aload         5
117: invokestatic  #21
120: ldc           #95
122: invokestatic  #23
125: return
Exception table:
from    to  target type
84   101   104   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test024
Start line: 468
End line: 489
Method source code: 
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        java.lang.Object[] objArray10 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser11 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #96
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #59
55: aload_2
56: invokevirtual #25
59: astore_3
60: aload_3
61: checkcast     #79
64: invokestatic  #80
67: astore        4
69: new           #69
72: dup
73: aload_3
74: invokespecial #70
77: astore        5
79: ldc           #27
81: invokestatic  #18
84: goto          89
87: astore        5
89: aload_3
90: invokestatic  #20
93: aload         4
95: invokestatic  #20
98: aload         4
100: invokestatic  #92
103: ldc           #74
105: invokestatic  #23
108: aload         4
110: invokestatic  #93
113: ldc           #74
115: invokestatic  #23
118: return
Exception table:
from    to  target type
69    84    87   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test025
Start line: 492
End line: 503
Method source code: 
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        java.lang.Class<?> wildcardClass9 = harmonicFitter1.getClass();
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #97
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: aload_2
57: invokevirtual #98
60: astore        4
62: aload_3
63: invokestatic  #20
66: aload         4
68: invokestatic  #20
71: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test026
Start line: 506
End line: 523
Method source code: 
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser10 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #99
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #59
55: aload_2
56: invokevirtual #25
59: astore_3
60: new           #69
63: dup
64: aload_3
65: invokespecial #70
68: astore        4
70: ldc           #27
72: invokestatic  #18
75: goto          80
78: astore        4
80: aload_3
81: invokestatic  #20
84: return
Exception table:
from    to  target type
60    75    78   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test027
Start line: 526
End line: 542
Method source code: 
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #100
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: invokevirtual #59
44: aload_2
45: ldc2_w        #34
48: ldc2_w        #10
51: ldc2_w        #10
54: invokevirtual #54
57: aload_2
58: invokevirtual #26
61: astore        4
63: ldc           #64
65: invokestatic  #18
68: goto          73
71: astore        4
73: aload_3
74: invokestatic  #20
77: return
Exception table:
from    to  target type
57    68    71   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test028
Start line: 545
End line: 564
Method source code: 
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric10 = null;
        double[] doubleArray16 = new double[] { 10.0f, '4', 1.0f, (byte) 0, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = harmonicFitter1.fit((int) '4', parametric10, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 52.0, 1.0, 0.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #101
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #59
55: aconst_null
56: astore_3
57: iconst_5
58: newarray       double
60: dup
61: iconst_0
62: ldc2_w        #32
65: dastore
66: dup
67: iconst_1
68: ldc2_w        #12
71: dastore
72: dup
73: iconst_2
74: dconst_1
75: dastore
76: dup
77: iconst_3
78: dconst_0
79: dastore
80: dup
81: iconst_4
82: ldc2_w        #32
85: dastore
86: astore        4
88: aload_2
89: bipush        52
91: aload_3
92: aload         4
94: invokevirtual #40
97: astore        5
99: ldc           #17
101: invokestatic  #18
104: goto          109
107: astore        5
109: aload         4
111: invokestatic  #20
114: aload         4
116: invokestatic  #21
119: ldc           #102
121: invokestatic  #23
124: return
Exception table:
from    to  target type
88   104   107   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test029
Start line: 567
End line: 588
Method source code: 
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric11 = null;
        double[] doubleArray17 = new double[] { (short) -1, (short) 1, (short) -1, (short) 0, 0L };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = harmonicFitter1.fit(10, parametric11, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 1.0, -1.0, 0.0, 0.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #103
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #59
55: aload_2
56: invokevirtual #25
59: astore_3
60: aconst_null
61: astore        4
63: iconst_5
64: newarray       double
66: dup
67: iconst_0
68: ldc2_w        #10
71: dastore
72: dup
73: iconst_1
74: dconst_1
75: dastore
76: dup
77: iconst_2
78: ldc2_w        #10
81: dastore
82: dup
83: iconst_3
84: dconst_0
85: dastore
86: dup
87: iconst_4
88: dconst_0
89: dastore
90: astore        5
92: aload_2
93: bipush        10
95: aload         4
97: aload         5
99: invokevirtual #40
102: astore        6
104: ldc           #17
106: invokestatic  #18
109: goto          114
112: astore        6
114: aload_3
115: invokestatic  #20
118: aload         5
120: invokestatic  #20
123: aload         5
125: invokestatic  #21
128: ldc           #104
130: invokestatic  #23
133: return
Exception table:
from    to  target type
92   109   112   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test030
Start line: 591
End line: 607
Method source code: 
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint((double) 10, (double) 0, (double) '4');
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric9 = null;
        double[] doubleArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = harmonicFitter1.fit(parametric9, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #105
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: ldc2_w        #32
47: dconst_0
48: ldc2_w        #12
51: invokevirtual #54
54: aconst_null
55: astore_3
56: aconst_null
57: astore        4
59: aload_2
60: aload_3
61: aload         4
63: invokevirtual #30
66: astore        5
68: ldc           #17
70: invokestatic  #18
73: goto          78
76: astore        5
78: return
Exception table:
from    to  target type
59    73    76   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test031
Start line: 610
End line: 628
Method source code: 
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        double[] doubleArray8 = new double[] { (byte) 10, (short) 100, 100.0d, 10L };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray9 = harmonicFitter1.fit(doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0, 100.0, 100.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #106
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: invokevirtual #59
44: iconst_4
45: newarray       double
47: dup
48: iconst_0
49: ldc2_w        #32
52: dastore
53: dup
54: iconst_1
55: ldc2_w        #34
58: dastore
59: dup
60: iconst_2
61: ldc2_w        #34
64: dastore
65: dup
66: iconst_3
67: ldc2_w        #32
70: dastore
71: astore        4
73: aload_2
74: aload         4
76: invokevirtual #16
79: astore        5
81: ldc           #17
83: invokestatic  #18
86: goto          91
89: astore        5
91: aload_3
92: invokestatic  #20
95: aload         4
97: invokestatic  #20
100: aload         4
102: invokestatic  #21
105: ldc           #107
107: invokestatic  #23
110: return
Exception table:
from    to  target type
73    86    89   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test032
Start line: 631
End line: 648
Method source code: 
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray5 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #108
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: invokevirtual #59
44: aload_2
45: invokevirtual #25
48: astore        4
50: aload_2
51: invokevirtual #26
54: astore        5
56: ldc           #27
58: invokestatic  #18
61: goto          66
64: astore        5
66: aload_3
67: invokestatic  #20
70: aload         4
72: invokestatic  #20
75: return
Exception table:
from    to  target type
50    61    64   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test033
Start line: 651
End line: 668
Method source code: 
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint((double) 10, (double) 0, (double) '4');
        double[] doubleArray9 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray10 = harmonicFitter1.fit(doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #109
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: ldc2_w        #32
47: dconst_0
48: ldc2_w        #12
51: invokevirtual #54
54: iconst_0
55: newarray       double
57: astore_3
58: aload_2
59: aload_3
60: invokevirtual #16
63: astore        4
65: ldc           #17
67: invokestatic  #18
70: goto          75
73: astore        4
75: aload_3
76: invokestatic  #20
79: aload_3
80: invokestatic  #21
83: ldc           #74
85: invokestatic  #23
88: return
Exception table:
from    to  target type
58    70    73   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test034
Start line: 671
End line: 691
Method source code: 
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric10 = null;
        double[] doubleArray15 = new double[] { 52.0d, 10.0d, 0, 1.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = harmonicFitter1.fit(parametric10, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[52.0, 10.0, 0.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #110
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #59
55: aload_2
56: invokevirtual #59
59: aconst_null
60: astore_3
61: iconst_4
62: newarray       double
64: dup
65: iconst_0
66: ldc2_w        #12
69: dastore
70: dup
71: iconst_1
72: ldc2_w        #32
75: dastore
76: dup
77: iconst_2
78: dconst_0
79: dastore
80: dup
81: iconst_3
82: dconst_1
83: dastore
84: astore        4
86: aload_2
87: aload_3
88: aload         4
90: invokevirtual #30
93: astore        5
95: ldc           #17
97: invokestatic  #18
100: goto          105
103: astore        5
105: aload         4
107: invokestatic  #20
110: aload         4
112: invokestatic  #21
115: ldc           #111
117: invokestatic  #23
120: return
Exception table:
from    to  target type
86   100   103   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test035
Start line: 694
End line: 716
Method source code: 
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric11 = null;
        double[] doubleArray12 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = harmonicFitter1.fit(1, parametric11, doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #112
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: aload_2
57: invokevirtual #25
60: astore        4
62: aconst_null
63: astore        5
65: iconst_0
66: newarray       double
68: astore        6
70: aload_2
71: iconst_1
72: aload         5
74: aload         6
76: invokevirtual #40
79: astore        7
81: ldc           #17
83: invokestatic  #18
86: goto          91
89: astore        7
91: aload_3
92: invokestatic  #20
95: aload         4
97: invokestatic  #20
100: aload         6
102: invokestatic  #20
105: aload         6
107: invokestatic  #21
110: ldc           #74
112: invokestatic  #23
115: return
Exception table:
from    to  target type
70    86    89   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test036
Start line: 719
End line: 735
Method source code: 
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter1.addObservedPoint((double) (short) 10, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #113
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: ldc2_w        #34
55: ldc2_w        #34
58: ldc2_w        #32
61: invokevirtual #54
64: aload_2
65: ldc2_w        #32
68: dconst_0
69: invokevirtual #43
72: aload_2
73: invokevirtual #26
76: astore_3
77: ldc           #17
79: invokestatic  #18
82: goto          86
85: astore_3
86: return
Exception table:
from    to  target type
72    82    85   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test037
Start line: 738
End line: 755
Method source code: 
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter1.addObservedPoint((double) (short) 10, 0.0d);
        harmonicFitter1.addObservedPoint((double) (byte) 10, (-1.0d), (double) 'a');
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #114
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: ldc2_w        #34
55: ldc2_w        #34
58: ldc2_w        #32
61: invokevirtual #54
64: aload_2
65: ldc2_w        #32
68: dconst_0
69: invokevirtual #43
72: aload_2
73: ldc2_w        #32
76: ldc2_w        #10
79: ldc2_w        #44
82: invokevirtual #54
85: aload_2
86: invokevirtual #26
89: astore_3
90: ldc           #17
92: invokestatic  #18
95: goto          99
98: astore_3
99: return
Exception table:
from    to  target type
85    95    98   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test038
Start line: 758
End line: 778
Method source code: 
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        double[] doubleArray16 = new double[] { 100.0d, (short) 1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = harmonicFitter1.fit(doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #115
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: ldc2_w        #34
55: ldc2_w        #34
58: ldc2_w        #32
61: invokevirtual #54
64: aload_2
65: invokevirtual #59
68: aload_2
69: invokevirtual #59
72: iconst_2
73: newarray       double
75: dup
76: iconst_0
77: ldc2_w        #34
80: dastore
81: dup
82: iconst_1
83: dconst_1
84: dastore
85: astore_3
86: aload_2
87: aload_3
88: invokevirtual #16
91: astore        4
93: ldc           #17
95: invokestatic  #18
98: goto          103
101: astore        4
103: aload_3
104: invokestatic  #20
107: aload_3
108: invokestatic  #21
111: ldc           #116
113: invokestatic  #23
116: return
Exception table:
from    to  target type
86    98   101   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test039
Start line: 781
End line: 799
Method source code: 
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint((double) 10, (double) 0, (double) '4');
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric10 = null;
        double[] doubleArray15 = new double[] { 0L, 100.0d, 'a', (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = harmonicFitter1.fit((-1), parametric10, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0, 100.0, 97.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #117
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: ldc2_w        #32
47: dconst_0
48: ldc2_w        #12
51: invokevirtual #54
54: aconst_null
55: astore_3
56: iconst_4
57: newarray       double
59: dup
60: iconst_0
61: dconst_0
62: dastore
63: dup
64: iconst_1
65: ldc2_w        #34
68: dastore
69: dup
70: iconst_2
71: ldc2_w        #44
74: dastore
75: dup
76: iconst_3
77: dconst_1
78: dastore
79: astore        4
81: aload_2
82: iconst_m1
83: aload_3
84: aload         4
86: invokevirtual #40
89: astore        5
91: ldc           #17
93: invokestatic  #18
96: goto          101
99: astore        5
101: aload         4
103: invokestatic  #20
106: aload         4
108: invokestatic  #21
111: ldc           #118
113: invokestatic  #23
116: return
Exception table:
from    to  target type
81    96    99   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test040
Start line: 802
End line: 819
Method source code: 
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        harmonicFitter1.clearObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray9 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #119
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: invokevirtual #59
44: aload_2
45: ldc2_w        #34
48: ldc2_w        #10
51: ldc2_w        #10
54: invokevirtual #54
57: aload_2
58: invokevirtual #59
61: aload_2
62: invokevirtual #26
65: astore        4
67: ldc           #27
69: invokestatic  #18
72: goto          77
75: astore        4
77: aload_3
78: invokestatic  #20
81: return
Exception table:
from    to  target type
61    72    75   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test041
Start line: 822
End line: 840
Method source code: 
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        double[] doubleArray14 = new double[] { 1L, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = harmonicFitter1.fit(doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #120
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: ldc2_w        #34
55: ldc2_w        #34
58: ldc2_w        #32
61: invokevirtual #54
64: iconst_2
65: newarray       double
67: dup
68: iconst_0
69: dconst_1
70: dastore
71: dup
72: iconst_1
73: ldc2_w        #32
76: dastore
77: astore_3
78: aload_2
79: aload_3
80: invokevirtual #16
83: astore        4
85: ldc           #17
87: invokestatic  #18
90: goto          95
93: astore        4
95: aload_3
96: invokestatic  #20
99: aload_3
100: invokestatic  #21
103: ldc           #121
105: invokestatic  #23
108: return
Exception table:
from    to  target type
78    90    93   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test042
Start line: 843
End line: 855
Method source code: 
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint5 = null;
        harmonicFitter1.addObservedPoint(weightedObservedPoint5);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #122
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: invokevirtual #59
44: aload_2
45: invokevirtual #25
48: astore        4
50: aconst_null
51: astore        5
53: aload_2
54: aload         5
56: invokevirtual #123
59: aload_3
60: invokestatic  #20
63: aload         4
65: invokestatic  #20
68: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test043
Start line: 858
End line: 916
Method source code: 
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats3 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray5 = new java.lang.Object[] { localizedFormats3, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats2, objArray5);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray10 = new java.lang.Object[] { localizedFormats8, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats7, objArray10);
        mathIllegalArgumentException6.addSuppressed((java.lang.Throwable) mathIllegalArgumentException11);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray16 = new java.lang.Object[] { localizedFormats14, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException17 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException11, (org.apache.commons.math3.exception.util.Localizable) localizedFormats13, objArray16);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException18 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, objArray16);
        java.lang.Object[] objArray19 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray16);
        org.apache.commons.math3.exception.ZeroException zeroException20 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray19);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer22 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter23 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer22);
        harmonicFitter23.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter23.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter23.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray31 = harmonicFitter23.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException32 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) zeroException20, (org.apache.commons.math3.exception.util.Localizable) localizedFormats21, (java.lang.Object[]) weightedObservedPointArray31);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser33 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats3 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats3.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATION + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray31);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #124
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #125
27: astore_1
28: getstatic     #126
31: astore_2
32: getstatic     #127
35: astore_3
36: getstatic     #128
39: astore        4
41: iconst_2
42: anewarray     #5
45: dup
46: iconst_0
47: aload         4
49: aastore
50: dup
51: iconst_1
52: lconst_1
53: invokestatic  #129
56: aastore
57: astore        5
59: new           #130
62: dup
63: aload_3
64: aload         5
66: invokespecial #131
69: astore        6
71: getstatic     #127
74: astore        7
76: getstatic     #128
79: astore        8
81: iconst_2
82: anewarray     #5
85: dup
86: iconst_0
87: aload         8
89: aastore
90: dup
91: iconst_1
92: lconst_1
93: invokestatic  #129
96: aastore
97: astore        9
99: new           #130
102: dup
103: aload         7
105: aload         9
107: invokespecial #131
110: astore        10
112: aload         6
114: aload         10
116: invokevirtual #132
119: getstatic     #133
122: astore        11
124: getstatic     #134
127: astore        12
129: iconst_2
130: anewarray     #5
133: dup
134: iconst_0
135: aload         12
137: aastore
138: dup
139: iconst_1
140: bipush        10
142: invokestatic  #135
145: aastore
146: astore        13
148: new           #136
151: dup
152: aload         10
154: aload         11
156: aload         13
158: invokespecial #137
161: astore        14
163: new           #136
166: dup
167: aload_2
168: aload         13
170: invokespecial #138
173: astore        15
175: aload         13
177: invokestatic  #80
180: astore        16
182: new           #81
185: dup
186: aload_1
187: aload         16
189: invokespecial #82
192: astore        17
194: getstatic     #139
197: astore        18
199: aconst_null
200: astore        19
202: new           #8
205: dup
206: aload         19
208: invokespecial #9
211: astore        20
213: aload         20
215: dconst_1
216: ldc2_w        #32
219: invokevirtual #43
222: aload         20
224: dconst_0
225: ldc2_w        #34
228: invokevirtual #43
231: aload         20
233: invokevirtual #59
236: aload         20
238: invokevirtual #25
241: astore        21
243: new           #136
246: dup
247: aload         17
249: aload         18
251: aload         21
253: checkcast     #79
256: invokespecial #137
259: astore        22
261: new           #69
264: dup
265: aload         21
267: invokespecial #70
270: astore        23
272: ldc           #27
274: invokestatic  #18
277: goto          282
280: astore        23
282: new           #83
285: dup
286: invokespecial #84
289: ldc           #85
291: invokevirtual #86
294: aload_1
295: invokevirtual #87
298: ldc           #88
300: invokevirtual #86
303: getstatic     #125
306: invokevirtual #87
309: ldc           #85
311: invokevirtual #86
314: invokevirtual #89
317: aload_1
318: getstatic     #125
321: invokevirtual #90
324: invokestatic  #91
327: new           #83
330: dup
331: invokespecial #84
334: ldc           #85
336: invokevirtual #86
339: aload_2
340: invokevirtual #87
343: ldc           #88
345: invokevirtual #86
348: getstatic     #126
351: invokevirtual #87
354: ldc           #85
356: invokevirtual #86
359: invokevirtual #89
362: aload_2
363: getstatic     #126
366: invokevirtual #90
369: invokestatic  #91
372: new           #83
375: dup
376: invokespecial #84
379: ldc           #85
381: invokevirtual #86
384: aload_3
385: invokevirtual #87
388: ldc           #88
390: invokevirtual #86
393: getstatic     #127
396: invokevirtual #87
399: ldc           #85
401: invokevirtual #86
404: invokevirtual #89
407: aload_3
408: getstatic     #127
411: invokevirtual #90
414: invokestatic  #91
417: new           #83
420: dup
421: invokespecial #84
424: ldc           #85
426: invokevirtual #86
429: aload         4
431: invokevirtual #87
434: ldc           #88
436: invokevirtual #86
439: getstatic     #128
442: invokevirtual #87
445: ldc           #85
447: invokevirtual #86
450: invokevirtual #89
453: aload         4
455: getstatic     #128
458: invokevirtual #90
461: invokestatic  #91
464: aload         5
466: invokestatic  #20
469: aload         5
471: invokestatic  #92
474: ldc           #140
476: invokestatic  #23
479: aload         5
481: invokestatic  #93
484: ldc           #140
486: invokestatic  #23
489: new           #83
492: dup
493: invokespecial #84
496: ldc           #85
498: invokevirtual #86
501: aload         7
503: invokevirtual #87
506: ldc           #88
508: invokevirtual #86
511: getstatic     #127
514: invokevirtual #87
517: ldc           #85
519: invokevirtual #86
522: invokevirtual #89
525: aload         7
527: getstatic     #127
530: invokevirtual #90
533: invokestatic  #91
536: new           #83
539: dup
540: invokespecial #84
543: ldc           #85
545: invokevirtual #86
548: aload         8
550: invokevirtual #87
553: ldc           #88
555: invokevirtual #86
558: getstatic     #128
561: invokevirtual #87
564: ldc           #85
566: invokevirtual #86
569: invokevirtual #89
572: aload         8
574: getstatic     #128
577: invokevirtual #90
580: invokestatic  #91
583: aload         9
585: invokestatic  #20
588: aload         9
590: invokestatic  #92
593: ldc           #140
595: invokestatic  #23
598: aload         9
600: invokestatic  #93
603: ldc           #140
605: invokestatic  #23
608: new           #83
611: dup
612: invokespecial #84
615: ldc           #85
617: invokevirtual #86
620: aload         11
622: invokevirtual #87
625: ldc           #88
627: invokevirtual #86
630: getstatic     #133
633: invokevirtual #87
636: ldc           #85
638: invokevirtual #86
641: invokevirtual #89
644: aload         11
646: getstatic     #133
649: invokevirtual #90
652: invokestatic  #91
655: new           #83
658: dup
659: invokespecial #84
662: ldc           #85
664: invokevirtual #86
667: aload         12
669: invokevirtual #87
672: ldc           #88
674: invokevirtual #86
677: getstatic     #134
680: invokevirtual #87
683: ldc           #85
685: invokevirtual #86
688: invokevirtual #89
691: aload         12
693: getstatic     #134
696: invokevirtual #90
699: invokestatic  #91
702: aload         13
704: invokestatic  #20
707: aload         13
709: invokestatic  #92
712: ldc           #141
714: invokestatic  #23
717: aload         13
719: invokestatic  #93
722: ldc           #141
724: invokestatic  #23
727: aload         16
729: invokestatic  #20
732: aload         16
734: invokestatic  #92
737: ldc           #141
739: invokestatic  #23
742: aload         16
744: invokestatic  #93
747: ldc           #141
749: invokestatic  #23
752: new           #83
755: dup
756: invokespecial #84
759: ldc           #85
761: invokevirtual #86
764: aload         18
766: invokevirtual #87
769: ldc           #88
771: invokevirtual #86
774: getstatic     #139
777: invokevirtual #87
780: ldc           #85
782: invokevirtual #86
785: invokevirtual #89
788: aload         18
790: getstatic     #139
793: invokevirtual #90
796: invokestatic  #91
799: aload         21
801: invokestatic  #20
804: return
Exception table:
from    to  target type
261   277   280   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test044
Start line: 919
End line: 938
Method source code: 
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter1.clearObservations();
        double[] doubleArray17 = new double[] { (byte) -1, 1L, 0.0d, 100.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = harmonicFitter1.fit(doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 1.0, 0.0, 100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #142
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: ldc2_w        #34
55: ldc2_w        #34
58: ldc2_w        #32
61: invokevirtual #54
64: aload_2
65: invokevirtual #59
68: iconst_4
69: newarray       double
71: dup
72: iconst_0
73: ldc2_w        #10
76: dastore
77: dup
78: iconst_1
79: dconst_1
80: dastore
81: dup
82: iconst_2
83: dconst_0
84: dastore
85: dup
86: iconst_3
87: ldc2_w        #34
90: dastore
91: astore_3
92: aload_2
93: aload_3
94: invokevirtual #16
97: astore        4
99: ldc           #17
101: invokestatic  #18
104: goto          109
107: astore        4
109: aload_3
110: invokestatic  #20
113: aload_3
114: invokestatic  #21
117: ldc           #143
119: invokestatic  #23
122: return
Exception table:
from    to  target type
92   104   107   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test045
Start line: 941
End line: 963
Method source code: 
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        double double14 = weightedObservedPoint8.getWeight();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #144
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: invokevirtual #59
44: aload_2
45: invokevirtual #25
48: astore        4
50: new           #145
53: dup
54: ldc2_w        #14
57: ldc2_w        #12
60: ldc2_w        #12
63: invokespecial #146
66: astore        5
68: aload         5
70: invokevirtual #147
73: dstore        6
75: aload         5
77: invokevirtual #148
80: dstore        8
82: aload         5
84: invokevirtual #148
87: dstore        10
89: aload         5
91: invokevirtual #149
94: dstore        12
96: aload_2
97: aload         5
99: invokevirtual #123
102: aload         5
104: invokevirtual #148
107: dstore        14
109: aload_3
110: invokestatic  #20
113: aload         4
115: invokestatic  #20
118: new           #83
121: dup
122: invokespecial #84
125: ldc           #85
127: invokevirtual #86
130: dload         6
132: invokevirtual #150
135: ldc           #88
137: invokevirtual #86
140: ldc2_w        #12
143: invokevirtual #150
146: ldc           #85
148: invokevirtual #86
151: invokevirtual #89
154: dload         6
156: ldc2_w        #12
159: dcmpl
160: ifne          167
163: iconst_1
164: goto          168
167: iconst_0
168: invokestatic  #91
171: new           #83
174: dup
175: invokespecial #84
178: ldc           #85
180: invokevirtual #86
183: dload         8
185: invokevirtual #150
188: ldc           #88
190: invokevirtual #86
193: ldc2_w        #14
196: invokevirtual #150
199: ldc           #85
201: invokevirtual #86
204: invokevirtual #89
207: dload         8
209: ldc2_w        #14
212: dcmpl
213: ifne          220
216: iconst_1
217: goto          221
220: iconst_0
221: invokestatic  #91
224: new           #83
227: dup
228: invokespecial #84
231: ldc           #85
233: invokevirtual #86
236: dload         10
238: invokevirtual #150
241: ldc           #88
243: invokevirtual #86
246: ldc2_w        #14
249: invokevirtual #150
252: ldc           #85
254: invokevirtual #86
257: invokevirtual #89
260: dload         10
262: ldc2_w        #14
265: dcmpl
266: ifne          273
269: iconst_1
270: goto          274
273: iconst_0
274: invokestatic  #91
277: new           #83
280: dup
281: invokespecial #84
284: ldc           #85
286: invokevirtual #86
289: dload         12
291: invokevirtual #150
294: ldc           #88
296: invokevirtual #86
299: ldc2_w        #12
302: invokevirtual #150
305: ldc           #85
307: invokevirtual #86
310: invokevirtual #89
313: dload         12
315: ldc2_w        #12
318: dcmpl
319: ifne          326
322: iconst_1
323: goto          327
326: iconst_0
327: invokestatic  #91
330: new           #83
333: dup
334: invokespecial #84
337: ldc           #85
339: invokevirtual #86
342: dload         14
344: invokevirtual #150
347: ldc           #88
349: invokevirtual #86
352: ldc2_w        #14
355: invokevirtual #150
358: ldc           #85
360: invokevirtual #86
363: invokevirtual #89
366: dload         14
368: ldc2_w        #14
371: dcmpl
372: ifne          379
375: iconst_1
376: goto          380
379: iconst_0
380: invokestatic  #91
383: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test046
Start line: 966
End line: 985
Method source code: 
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric9 = null;
        double[] doubleArray15 = new double[] { 100.0d, (byte) 0, 52.0d, (-1.0d), '#' };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = harmonicFitter1.fit(parametric9, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 0.0, 52.0, -1.0, 35.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #151
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: invokevirtual #59
47: aload_2
48: dconst_0
49: ldc2_w        #10
52: invokevirtual #43
55: aconst_null
56: astore_3
57: iconst_5
58: newarray       double
60: dup
61: iconst_0
62: ldc2_w        #34
65: dastore
66: dup
67: iconst_1
68: dconst_0
69: dastore
70: dup
71: iconst_2
72: ldc2_w        #12
75: dastore
76: dup
77: iconst_3
78: ldc2_w        #10
81: dastore
82: dup
83: iconst_4
84: ldc2_w        #14
87: dastore
88: astore        4
90: aload_2
91: aload_3
92: aload         4
94: invokevirtual #30
97: astore        5
99: ldc           #17
101: invokestatic  #18
104: goto          109
107: astore        5
109: aload         4
111: invokestatic  #20
114: aload         4
116: invokestatic  #21
119: ldc           #152
121: invokestatic  #23
124: return
Exception table:
from    to  target type
90   104   107   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test047
Start line: 988
End line: 1009
Method source code: 
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric10 = null;
        double[] doubleArray12 = new double[] { 1L };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = harmonicFitter1.fit(100, parametric10, doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #153
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: invokevirtual #59
44: aload_2
45: ldc2_w        #34
48: ldc2_w        #10
51: ldc2_w        #10
54: invokevirtual #54
57: aload_2
58: invokevirtual #59
61: aconst_null
62: astore        4
64: iconst_1
65: newarray       double
67: dup
68: iconst_0
69: dconst_1
70: dastore
71: astore        5
73: aload_2
74: bipush        100
76: aload         4
78: aload         5
80: invokevirtual #40
83: astore        6
85: ldc           #17
87: invokestatic  #18
90: goto          95
93: astore        6
95: aload_3
96: invokestatic  #20
99: aload         5
101: invokestatic  #20
104: aload         5
106: invokestatic  #21
109: ldc           #154
111: invokestatic  #23
114: return
Exception table:
from    to  target type
73    90    93   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test048
Start line: 1012
End line: 1024
Method source code: 
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter2.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException4 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray3);
        java.lang.Class<?> wildcardClass5 = weightedObservedPointArray3.getClass();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #155
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #156
27: astore_1
28: aconst_null
29: astore_2
30: new           #8
33: dup
34: aload_2
35: invokespecial #9
38: astore_3
39: aload_3
40: invokevirtual #25
43: astore        4
45: new           #81
48: dup
49: aload_1
50: aload         4
52: checkcast     #79
55: invokespecial #82
58: astore        5
60: aload         4
62: invokevirtual #98
65: astore        6
67: new           #83
70: dup
71: invokespecial #84
74: ldc           #85
76: invokevirtual #86
79: aload_1
80: invokevirtual #87
83: ldc           #88
85: invokevirtual #86
88: getstatic     #156
91: invokevirtual #87
94: ldc           #85
96: invokevirtual #86
99: invokevirtual #89
102: aload_1
103: getstatic     #156
106: invokevirtual #90
109: invokestatic  #91
112: aload         4
114: invokestatic  #20
117: aload         6
119: invokestatic  #20
122: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test049
Start line: 1027
End line: 1044
Method source code: 
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric8 = null;
        double[] doubleArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray10 = harmonicFitter1.fit((int) (short) -1, parametric8, doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #157
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: ldc2_w        #32
44: ldc2_w        #10
47: dconst_0
48: invokevirtual #54
51: aconst_null
52: astore        4
54: aconst_null
55: astore        5
57: aload_2
58: iconst_m1
59: aload         4
61: aload         5
63: invokevirtual #40
66: astore        6
68: ldc           #17
70: invokestatic  #18
73: goto          78
76: astore        6
78: aload_3
79: invokestatic  #20
82: return
Exception table:
from    to  target type
57    73    76   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test050
Start line: 1047
End line: 1109
Method source code: 
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        java.lang.Number number1 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number1, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException6 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats4, objArray5);
        boolean boolean7 = numberIsTooSmallException3.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext8 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats10 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray12 = new java.lang.Object[] { localizedFormats10, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException13 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats9, objArray12);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray17 = new java.lang.Object[] { localizedFormats15, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException18 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats14, objArray17);
        mathIllegalArgumentException13.addSuppressed((java.lang.Throwable) mathIllegalArgumentException18);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext20 = mathIllegalArgumentException13.getContext();
        java.lang.Object obj22 = exceptionContext20.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer24 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter25 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer24);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray26 = harmonicFitter25.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter25.getObservations();
        exceptionContext20.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, (java.lang.Object[]) weightedObservedPointArray27);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer30 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter31 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer30);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray32 = harmonicFitter31.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException33 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats29, (java.lang.Object[]) weightedObservedPointArray32);
        exceptionContext8.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, (java.lang.Object[]) weightedObservedPointArray32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser35 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray32);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats10 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats10.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray26);
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray32);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #158
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #28
29: dup
30: bipush        100
32: invokestatic  #159
35: aload_1
36: iconst_0
37: invokespecial #160
40: astore_2
41: getstatic     #161
44: astore_3
45: iconst_0
46: anewarray     #5
49: astore        4
51: new           #136
54: dup
55: aload_2
56: aload_3
57: aload         4
59: invokespecial #137
62: astore        5
64: aload_2
65: invokevirtual #162
68: istore        6
70: new           #163
73: dup
74: aload_2
75: invokespecial #164
78: astore        7
80: getstatic     #127
83: astore        8
85: getstatic     #128
88: astore        9
90: iconst_2
91: anewarray     #5
94: dup
95: iconst_0
96: aload         9
98: aastore
99: dup
100: iconst_1
101: lconst_1
102: invokestatic  #129
105: aastore
106: astore        10
108: new           #130
111: dup
112: aload         8
114: aload         10
116: invokespecial #131
119: astore        11
121: getstatic     #127
124: astore        12
126: getstatic     #128
129: astore        13
131: iconst_2
132: anewarray     #5
135: dup
136: iconst_0
137: aload         13
139: aastore
140: dup
141: iconst_1
142: lconst_1
143: invokestatic  #129
146: aastore
147: astore        14
149: new           #130
152: dup
153: aload         12
155: aload         14
157: invokespecial #131
160: astore        15
162: aload         11
164: aload         15
166: invokevirtual #132
169: aload         11
171: invokevirtual #165
174: astore        16
176: aload         16
178: ldc           #166
180: invokevirtual #167
183: astore        17
185: getstatic     #168
188: astore        18
190: aconst_null
191: astore        19
193: new           #8
196: dup
197: aload         19
199: invokespecial #9
202: astore        20
204: aload         20
206: invokevirtual #25
209: astore        21
211: aload         20
213: invokevirtual #25
216: astore        22
218: aload         16
220: aload         18
222: aload         22
224: checkcast     #79
227: invokevirtual #169
230: getstatic     #156
233: astore        23
235: aconst_null
236: astore        24
238: new           #8
241: dup
242: aload         24
244: invokespecial #9
247: astore        25
249: aload         25
251: invokevirtual #25
254: astore        26
256: new           #81
259: dup
260: aload         23
262: aload         26
264: checkcast     #79
267: invokespecial #82
270: astore        27
272: aload         7
274: aload         18
276: aload         26
278: checkcast     #79
281: invokevirtual #169
284: new           #69
287: dup
288: aload         26
290: invokespecial #70
293: astore        28
295: ldc           #27
297: invokestatic  #18
300: goto          305
303: astore        28
305: new           #83
308: dup
309: invokespecial #84
312: ldc           #85
314: invokevirtual #86
317: aload_3
318: invokevirtual #87
321: ldc           #88
323: invokevirtual #86
326: getstatic     #161
329: invokevirtual #87
332: ldc           #85
334: invokevirtual #86
337: invokevirtual #89
340: aload_3
341: getstatic     #161
344: invokevirtual #90
347: invokestatic  #91
350: aload         4
352: invokestatic  #20
355: aload         4
357: invokestatic  #92
360: ldc           #74
362: invokestatic  #23
365: aload         4
367: invokestatic  #93
370: ldc           #74
372: invokestatic  #23
375: new           #83
378: dup
379: invokespecial #84
382: ldc           #85
384: invokevirtual #86
387: iload         6
389: invokevirtual #170
392: ldc           #88
394: invokevirtual #86
397: iconst_0
398: invokevirtual #170
401: ldc           #85
403: invokevirtual #86
406: invokevirtual #89
409: iload         6
411: ifne          418
414: iconst_1
415: goto          419
418: iconst_0
419: invokestatic  #91
422: new           #83
425: dup
426: invokespecial #84
429: ldc           #85
431: invokevirtual #86
434: aload         8
436: invokevirtual #87
439: ldc           #88
441: invokevirtual #86
444: getstatic     #127
447: invokevirtual #87
450: ldc           #85
452: invokevirtual #86
455: invokevirtual #89
458: aload         8
460: getstatic     #127
463: invokevirtual #90
466: invokestatic  #91
469: new           #83
472: dup
473: invokespecial #84
476: ldc           #85
478: invokevirtual #86
481: aload         9
483: invokevirtual #87
486: ldc           #88
488: invokevirtual #86
491: getstatic     #128
494: invokevirtual #87
497: ldc           #85
499: invokevirtual #86
502: invokevirtual #89
505: aload         9
507: getstatic     #128
510: invokevirtual #90
513: invokestatic  #91
516: aload         10
518: invokestatic  #20
521: aload         10
523: invokestatic  #92
526: ldc           #140
528: invokestatic  #23
531: aload         10
533: invokestatic  #93
536: ldc           #140
538: invokestatic  #23
541: new           #83
544: dup
545: invokespecial #84
548: ldc           #85
550: invokevirtual #86
553: aload         12
555: invokevirtual #87
558: ldc           #88
560: invokevirtual #86
563: getstatic     #127
566: invokevirtual #87
569: ldc           #85
571: invokevirtual #86
574: invokevirtual #89
577: aload         12
579: getstatic     #127
582: invokevirtual #90
585: invokestatic  #91
588: new           #83
591: dup
592: invokespecial #84
595: ldc           #85
597: invokevirtual #86
600: aload         13
602: invokevirtual #87
605: ldc           #88
607: invokevirtual #86
610: getstatic     #128
613: invokevirtual #87
616: ldc           #85
618: invokevirtual #86
621: invokevirtual #89
624: aload         13
626: getstatic     #128
629: invokevirtual #90
632: invokestatic  #91
635: aload         14
637: invokestatic  #20
640: aload         14
642: invokestatic  #92
645: ldc           #140
647: invokestatic  #23
650: aload         14
652: invokestatic  #93
655: ldc           #140
657: invokestatic  #23
660: aload         16
662: invokestatic  #20
665: aload         17
667: invokestatic  #171
670: new           #83
673: dup
674: invokespecial #84
677: ldc           #85
679: invokevirtual #86
682: aload         18
684: invokevirtual #87
687: ldc           #88
689: invokevirtual #86
692: getstatic     #168
695: invokevirtual #87
698: ldc           #85
700: invokevirtual #86
703: invokevirtual #89
706: aload         18
708: getstatic     #168
711: invokevirtual #90
714: invokestatic  #91
717: aload         21
719: invokestatic  #20
722: aload         22
724: invokestatic  #20
727: new           #83
730: dup
731: invokespecial #84
734: ldc           #85
736: invokevirtual #86
739: aload         23
741: invokevirtual #87
744: ldc           #88
746: invokevirtual #86
749: getstatic     #156
752: invokevirtual #87
755: ldc           #85
757: invokevirtual #86
760: invokevirtual #89
763: aload         23
765: getstatic     #156
768: invokevirtual #90
771: invokestatic  #91
774: aload         26
776: invokestatic  #20
779: return
Exception table:
from    to  target type
284   300   303   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test051
Start line: 1112
End line: 1127
Method source code: 
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray5 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser6 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #172
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: invokevirtual #25
47: astore_3
48: new           #69
51: dup
52: aload_3
53: invokespecial #70
56: astore        4
58: ldc           #64
60: invokestatic  #18
63: goto          68
66: astore        4
68: aload_3
69: invokestatic  #20
72: return
Exception table:
from    to  target type
48    63    66   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test052
Start line: 1130
End line: 1147
Method source code: 
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric6 = null;
        double[] doubleArray8 = new double[] { 10 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray9 = harmonicFitter1.fit((int) (short) 10, parametric6, doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #173
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aconst_null
44: astore_3
45: iconst_1
46: newarray       double
48: dup
49: iconst_0
50: ldc2_w        #32
53: dastore
54: astore        4
56: aload_2
57: bipush        10
59: aload_3
60: aload         4
62: invokevirtual #40
65: astore        5
67: ldc           #17
69: invokestatic  #18
72: goto          77
75: astore        5
77: aload         4
79: invokestatic  #20
82: aload         4
84: invokestatic  #21
87: ldc           #174
89: invokestatic  #23
92: return
Exception table:
from    to  target type
56    72    75   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test053
Start line: 1150
End line: 1169
Method source code: 
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray13 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 3 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray13);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #175
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: aload_2
57: dconst_0
58: dconst_1
59: ldc2_w        #34
62: invokevirtual #54
65: aload_2
66: invokevirtual #25
69: astore        4
71: aload_2
72: invokevirtual #26
75: astore        5
77: ldc           #176
79: invokestatic  #18
82: goto          87
85: astore        5
87: aload_3
88: invokestatic  #20
91: aload         4
93: invokestatic  #20
96: return
Exception table:
from    to  target type
71    82    85   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test054
Start line: 1172
End line: 1190
Method source code: 
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 3 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #177
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: new           #145
59: dup
60: dconst_1
61: dconst_0
62: ldc2_w        #34
65: invokespecial #146
68: astore        4
70: aload_2
71: aload         4
73: invokevirtual #123
76: aload_2
77: invokevirtual #26
80: astore        5
82: ldc           #176
84: invokestatic  #18
87: goto          92
90: astore        5
92: aload_3
93: invokestatic  #20
96: return
Exception table:
from    to  target type
76    87    90   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test055
Start line: 1193
End line: 1214
Method source code: 
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter1.addObservedPoint((double) (short) 10, 0.0d);
        harmonicFitter1.addObservedPoint((double) (byte) 10, (-1.0d), (double) 'a');
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric20 = null;
        double[] doubleArray27 = new double[] { 1.0d, ' ', '#', 10.0d, (byte) 0, (short) -1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray28 = harmonicFitter1.fit(0, parametric20, doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 32.0, 35.0, 10.0, 0.0, -1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #178
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: ldc2_w        #34
55: ldc2_w        #34
58: ldc2_w        #32
61: invokevirtual #54
64: aload_2
65: ldc2_w        #32
68: dconst_0
69: invokevirtual #43
72: aload_2
73: ldc2_w        #32
76: ldc2_w        #10
79: ldc2_w        #44
82: invokevirtual #54
85: aconst_null
86: astore_3
87: bipush        6
89: newarray       double
91: dup
92: iconst_0
93: dconst_1
94: dastore
95: dup
96: iconst_1
97: ldc2_w        #38
100: dastore
101: dup
102: iconst_2
103: ldc2_w        #14
106: dastore
107: dup
108: iconst_3
109: ldc2_w        #32
112: dastore
113: dup
114: iconst_4
115: dconst_0
116: dastore
117: dup
118: iconst_5
119: ldc2_w        #10
122: dastore
123: astore        4
125: aload_2
126: iconst_0
127: aload_3
128: aload         4
130: invokevirtual #40
133: astore        5
135: ldc           #17
137: invokestatic  #18
140: goto          145
143: astore        5
145: aload         4
147: invokestatic  #20
150: aload         4
152: invokestatic  #21
155: ldc           #179
157: invokestatic  #23
160: return
Exception table:
from    to  target type
125   140   143   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test056
Start line: 1217
End line: 1236
Method source code: 
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.clearObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #180
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: new           #145
59: dup
60: dconst_1
61: dconst_0
62: ldc2_w        #34
65: invokespecial #146
68: astore        4
70: aload_2
71: aload         4
73: invokevirtual #123
76: aload_2
77: invokevirtual #59
80: aload_2
81: invokevirtual #26
84: astore        5
86: ldc           #27
88: invokestatic  #18
91: goto          96
94: astore        5
96: aload_3
97: invokestatic  #20
100: return
Exception table:
from    to  target type
80    91    94   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test057
Start line: 1239
End line: 1264
Method source code: 
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint13 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double14 = weightedObservedPoint13.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint13);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric16 = null;
        double[] doubleArray17 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = harmonicFitter1.fit(parametric16, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #181
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #59
55: aload_2
56: invokevirtual #25
59: astore_3
60: new           #145
63: dup
64: ldc2_w        #14
67: ldc2_w        #12
70: ldc2_w        #12
73: invokespecial #146
76: astore        4
78: aload         4
80: invokevirtual #147
83: dstore        5
85: aload_2
86: aload         4
88: invokevirtual #123
91: aconst_null
92: astore        7
94: iconst_0
95: newarray       double
97: astore        8
99: aload_2
100: aload         7
102: aload         8
104: invokevirtual #30
107: astore        9
109: ldc           #17
111: invokestatic  #18
114: goto          119
117: astore        9
119: aload_3
120: invokestatic  #20
123: new           #83
126: dup
127: invokespecial #84
130: ldc           #85
132: invokevirtual #86
135: dload         5
137: invokevirtual #150
140: ldc           #88
142: invokevirtual #86
145: ldc2_w        #12
148: invokevirtual #150
151: ldc           #85
153: invokevirtual #86
156: invokevirtual #89
159: dload         5
161: ldc2_w        #12
164: dcmpl
165: ifne          172
168: iconst_1
169: goto          173
172: iconst_0
173: invokestatic  #91
176: aload         8
178: invokestatic  #20
181: aload         8
183: invokestatic  #21
186: ldc           #74
188: invokestatic  #23
191: return
Exception table:
from    to  target type
99   114   117   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test058
Start line: 1267
End line: 1288
Method source code: 
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(1.0d, 100.0d);
        double[] doubleArray13 = new double[] { (-1.0f) };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = harmonicFitter1.fit(doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[-1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #182
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: invokevirtual #59
44: aload_2
45: ldc2_w        #34
48: ldc2_w        #10
51: ldc2_w        #10
54: invokevirtual #54
57: aload_2
58: invokevirtual #59
61: aload_2
62: dconst_1
63: ldc2_w        #34
66: invokevirtual #43
69: iconst_1
70: newarray       double
72: dup
73: iconst_0
74: ldc2_w        #10
77: dastore
78: astore        4
80: aload_2
81: aload         4
83: invokevirtual #16
86: astore        5
88: ldc           #17
90: invokestatic  #18
93: goto          98
96: astore        5
98: aload_3
99: invokestatic  #20
102: aload         4
104: invokestatic  #20
107: aload         4
109: invokestatic  #21
112: ldc           #72
114: invokestatic  #23
117: return
Exception table:
from    to  target type
80    93    96   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test059
Start line: 1291
End line: 1312
Method source code: 
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(52.0d, 52.0d, 35.0d);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric15 = null;
        double[] doubleArray21 = new double[] { '4', 0.0f, (short) 1, (short) 0, 0.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = harmonicFitter1.fit(0, parametric15, doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[52.0, 0.0, 1.0, 0.0, 0.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #183
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #59
55: aload_2
56: invokevirtual #59
59: aload_2
60: ldc2_w        #12
63: ldc2_w        #12
66: ldc2_w        #14
69: invokevirtual #54
72: aconst_null
73: astore_3
74: iconst_5
75: newarray       double
77: dup
78: iconst_0
79: ldc2_w        #12
82: dastore
83: dup
84: iconst_1
85: dconst_0
86: dastore
87: dup
88: iconst_2
89: dconst_1
90: dastore
91: dup
92: iconst_3
93: dconst_0
94: dastore
95: dup
96: iconst_4
97: dconst_0
98: dastore
99: astore        4
101: aload_2
102: iconst_0
103: aload_3
104: aload         4
106: invokevirtual #40
109: astore        5
111: ldc           #17
113: invokestatic  #18
116: goto          121
119: astore        5
121: aload         4
123: invokestatic  #20
126: aload         4
128: invokestatic  #21
131: ldc           #184
133: invokestatic  #23
136: return
Exception table:
from    to  target type
101   116   119   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test060
Start line: 1315
End line: 1333
Method source code: 
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray10 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 2 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #185
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: aload_2
57: invokevirtual #25
60: astore        4
62: aload_2
63: invokevirtual #26
66: astore        5
68: ldc           #186
70: invokestatic  #18
73: goto          78
76: astore        5
78: aload_3
79: invokestatic  #20
82: aload         4
84: invokestatic  #20
87: return
Exception table:
from    to  target type
62    73    76   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test061
Start line: 1336
End line: 1358
Method source code: 
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((-1.0d), (double) 10, (double) 10);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric15 = null;
        double[] doubleArray16 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = harmonicFitter1.fit((int) (short) -1, parametric15, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #187
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #59
55: aload_2
56: invokevirtual #25
59: astore_3
60: aload_2
61: ldc2_w        #10
64: ldc2_w        #32
67: ldc2_w        #32
70: invokevirtual #54
73: aconst_null
74: astore        4
76: iconst_0
77: newarray       double
79: astore        5
81: aload_2
82: iconst_m1
83: aload         4
85: aload         5
87: invokevirtual #40
90: astore        6
92: ldc           #17
94: invokestatic  #18
97: goto          102
100: astore        6
102: aload_3
103: invokestatic  #20
106: aload         5
108: invokestatic  #20
111: aload         5
113: invokestatic  #21
116: ldc           #74
118: invokestatic  #23
121: return
Exception table:
from    to  target type
81    97   100   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test062
Start line: 1361
End line: 1393
Method source code: 
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.addObservedPoint((double) 0, (double) (short) 100, (double) (short) 0);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric19 = null;
        double[] doubleArray20 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = harmonicFitter1.fit(10, parametric19, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #188
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: invokevirtual #59
44: aload_2
45: invokevirtual #25
48: astore        4
50: new           #145
53: dup
54: ldc2_w        #14
57: ldc2_w        #12
60: ldc2_w        #12
63: invokespecial #146
66: astore        5
68: aload         5
70: invokevirtual #147
73: dstore        6
75: aload         5
77: invokevirtual #148
80: dstore        8
82: aload         5
84: invokevirtual #148
87: dstore        10
89: aload         5
91: invokevirtual #149
94: dstore        12
96: aload_2
97: aload         5
99: invokevirtual #123
102: aload_2
103: dconst_0
104: ldc2_w        #34
107: dconst_0
108: invokevirtual #54
111: aconst_null
112: astore        14
114: iconst_0
115: newarray       double
117: astore        15
119: aload_2
120: bipush        10
122: aload         14
124: aload         15
126: invokevirtual #40
129: astore        16
131: ldc           #17
133: invokestatic  #18
136: goto          141
139: astore        16
141: aload_3
142: invokestatic  #20
145: aload         4
147: invokestatic  #20
150: new           #83
153: dup
154: invokespecial #84
157: ldc           #85
159: invokevirtual #86
162: dload         6
164: invokevirtual #150
167: ldc           #88
169: invokevirtual #86
172: ldc2_w        #12
175: invokevirtual #150
178: ldc           #85
180: invokevirtual #86
183: invokevirtual #89
186: dload         6
188: ldc2_w        #12
191: dcmpl
192: ifne          199
195: iconst_1
196: goto          200
199: iconst_0
200: invokestatic  #91
203: new           #83
206: dup
207: invokespecial #84
210: ldc           #85
212: invokevirtual #86
215: dload         8
217: invokevirtual #150
220: ldc           #88
222: invokevirtual #86
225: ldc2_w        #14
228: invokevirtual #150
231: ldc           #85
233: invokevirtual #86
236: invokevirtual #89
239: dload         8
241: ldc2_w        #14
244: dcmpl
245: ifne          252
248: iconst_1
249: goto          253
252: iconst_0
253: invokestatic  #91
256: new           #83
259: dup
260: invokespecial #84
263: ldc           #85
265: invokevirtual #86
268: dload         10
270: invokevirtual #150
273: ldc           #88
275: invokevirtual #86
278: ldc2_w        #14
281: invokevirtual #150
284: ldc           #85
286: invokevirtual #86
289: invokevirtual #89
292: dload         10
294: ldc2_w        #14
297: dcmpl
298: ifne          305
301: iconst_1
302: goto          306
305: iconst_0
306: invokestatic  #91
309: new           #83
312: dup
313: invokespecial #84
316: ldc           #85
318: invokevirtual #86
321: dload         12
323: invokevirtual #150
326: ldc           #88
328: invokevirtual #86
331: ldc2_w        #12
334: invokevirtual #150
337: ldc           #85
339: invokevirtual #86
342: invokevirtual #89
345: dload         12
347: ldc2_w        #12
350: dcmpl
351: ifne          358
354: iconst_1
355: goto          359
358: iconst_0
359: invokestatic  #91
362: aload         15
364: invokestatic  #20
367: aload         15
369: invokestatic  #21
372: ldc           #74
374: invokestatic  #23
377: return
Exception table:
from    to  target type
119   136   139   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test063
Start line: 1396
End line: 1418
Method source code: 
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric15 = null;
        double[] doubleArray18 = new double[] { 100.0f, 10 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = harmonicFitter1.fit((int) (short) 1, parametric15, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #189
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: new           #145
59: dup
60: dconst_1
61: dconst_0
62: ldc2_w        #34
65: invokespecial #146
68: astore        4
70: aload_2
71: aload         4
73: invokevirtual #123
76: aconst_null
77: astore        5
79: iconst_2
80: newarray       double
82: dup
83: iconst_0
84: ldc2_w        #34
87: dastore
88: dup
89: iconst_1
90: ldc2_w        #32
93: dastore
94: astore        6
96: aload_2
97: iconst_1
98: aload         5
100: aload         6
102: invokevirtual #40
105: astore        7
107: ldc           #17
109: invokestatic  #18
112: goto          117
115: astore        7
117: aload_3
118: invokestatic  #20
121: aload         6
123: invokestatic  #20
126: aload         6
128: invokestatic  #21
131: ldc           #190
133: invokestatic  #23
136: return
Exception table:
from    to  target type
96   112   115   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test064
Start line: 1421
End line: 1440
Method source code: 
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint17 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double18 = weightedObservedPoint17.getX();
        double double19 = weightedObservedPoint17.getY();
        double double20 = weightedObservedPoint17.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint17);
        harmonicFitter1.addObservedPoint(10.0d, (double) (short) 1, (double) 10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #191
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: ldc2_w        #32
44: ldc2_w        #10
47: dconst_0
48: invokevirtual #54
51: aload_2
52: ldc2_w        #44
55: ldc2_w        #14
58: invokevirtual #43
61: aload_2
62: ldc2_w        #12
65: dconst_0
66: ldc2_w        #44
69: invokevirtual #54
72: new           #145
75: dup
76: ldc2_w        #14
79: ldc2_w        #12
82: ldc2_w        #12
85: invokespecial #146
88: astore        4
90: aload         4
92: invokevirtual #147
95: dstore        5
97: aload         4
99: invokevirtual #149
102: dstore        7
104: aload         4
106: invokevirtual #149
109: dstore        9
111: aload_2
112: aload         4
114: invokevirtual #123
117: aload_2
118: ldc2_w        #32
121: dconst_1
122: ldc2_w        #32
125: invokevirtual #54
128: aload_3
129: invokestatic  #20
132: new           #83
135: dup
136: invokespecial #84
139: ldc           #85
141: invokevirtual #86
144: dload         5
146: invokevirtual #150
149: ldc           #88
151: invokevirtual #86
154: ldc2_w        #12
157: invokevirtual #150
160: ldc           #85
162: invokevirtual #86
165: invokevirtual #89
168: dload         5
170: ldc2_w        #12
173: dcmpl
174: ifne          181
177: iconst_1
178: goto          182
181: iconst_0
182: invokestatic  #91
185: new           #83
188: dup
189: invokespecial #84
192: ldc           #85
194: invokevirtual #86
197: dload         7
199: invokevirtual #150
202: ldc           #88
204: invokevirtual #86
207: ldc2_w        #12
210: invokevirtual #150
213: ldc           #85
215: invokevirtual #86
218: invokevirtual #89
221: dload         7
223: ldc2_w        #12
226: dcmpl
227: ifne          234
230: iconst_1
231: goto          235
234: iconst_0
235: invokestatic  #91
238: new           #83
241: dup
242: invokespecial #84
245: ldc           #85
247: invokevirtual #86
250: dload         9
252: invokevirtual #150
255: ldc           #88
257: invokevirtual #86
260: ldc2_w        #12
263: invokevirtual #150
266: ldc           #85
268: invokevirtual #86
271: invokevirtual #89
274: dload         9
276: ldc2_w        #12
279: dcmpl
280: ifne          287
283: iconst_1
284: goto          288
287: iconst_0
288: invokestatic  #91
291: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test065
Start line: 1443
End line: 1458
Method source code: 
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter2.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray10);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException15 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Number) 100, (java.lang.Number) (short) 100, false);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #192
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #193
27: astore_1
28: aconst_null
29: astore_2
30: new           #8
33: dup
34: aload_2
35: invokespecial #9
38: astore_3
39: aload_3
40: dconst_1
41: ldc2_w        #32
44: invokevirtual #43
47: aload_3
48: dconst_0
49: ldc2_w        #34
52: invokevirtual #43
55: aload_3
56: invokevirtual #25
59: astore        4
61: aload_3
62: invokevirtual #25
65: astore        5
67: new           #130
70: dup
71: aload_1
72: aload         5
74: checkcast     #79
77: invokespecial #131
80: astore        6
82: new           #28
85: dup
86: aload_1
87: bipush        100
89: invokestatic  #135
92: bipush        100
94: invokestatic  #194
97: iconst_0
98: invokespecial #195
101: astore        7
103: new           #83
106: dup
107: invokespecial #84
110: ldc           #85
112: invokevirtual #86
115: aload_1
116: invokevirtual #87
119: ldc           #88
121: invokevirtual #86
124: getstatic     #193
127: invokevirtual #87
130: ldc           #85
132: invokevirtual #86
135: invokevirtual #89
138: aload_1
139: getstatic     #193
142: invokevirtual #90
145: invokestatic  #91
148: aload         4
150: invokestatic  #20
153: aload         5
155: invokestatic  #20
158: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test066
Start line: 1461
End line: 1481
Method source code: 
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric9 = null;
        double[] doubleArray14 = new double[] { (-1), (-1.0f), (short) 1, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = harmonicFitter1.fit((int) (byte) 0, parametric9, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, -1.0, 1.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #196
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: invokevirtual #59
44: aload_2
45: ldc2_w        #34
48: ldc2_w        #10
51: ldc2_w        #10
54: invokevirtual #54
57: aconst_null
58: astore        4
60: iconst_4
61: newarray       double
63: dup
64: iconst_0
65: ldc2_w        #10
68: dastore
69: dup
70: iconst_1
71: ldc2_w        #10
74: dastore
75: dup
76: iconst_2
77: dconst_1
78: dastore
79: dup
80: iconst_3
81: dconst_1
82: dastore
83: astore        5
85: aload_2
86: iconst_0
87: aload         4
89: aload         5
91: invokevirtual #40
94: astore        6
96: ldc           #17
98: invokestatic  #18
101: goto          106
104: astore        6
106: aload_3
107: invokestatic  #20
110: aload         5
112: invokestatic  #20
115: aload         5
117: invokestatic  #21
120: ldc           #197
122: invokestatic  #23
125: return
Exception table:
from    to  target type
85   101   104   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test067
Start line: 1484
End line: 1505
Method source code: 
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric11 = null;
        double[] doubleArray12 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = harmonicFitter1.fit(parametric11, doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #198
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: ldc2_w        #32
44: ldc2_w        #10
47: dconst_0
48: invokevirtual #54
51: aload_2
52: ldc2_w        #44
55: ldc2_w        #14
58: invokevirtual #43
61: aload_2
62: invokevirtual #59
65: aconst_null
66: astore        4
68: iconst_0
69: newarray       double
71: astore        5
73: aload_2
74: aload         4
76: aload         5
78: invokevirtual #30
81: astore        6
83: ldc           #17
85: invokestatic  #18
88: goto          93
91: astore        6
93: aload_3
94: invokestatic  #20
97: aload         5
99: invokestatic  #20
102: aload         5
104: invokestatic  #21
107: ldc           #74
109: invokestatic  #23
112: return
Exception table:
from    to  target type
73    88    91   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test068
Start line: 1508
End line: 1522
Method source code: 
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint((double) 10, (double) 0, (double) '4');
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray9 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 2 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #199
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: ldc2_w        #32
47: dconst_0
48: ldc2_w        #12
51: invokevirtual #54
54: aload_2
55: invokevirtual #26
58: astore_3
59: ldc           #186
61: invokestatic  #18
64: goto          68
67: astore_3
68: return
Exception table:
from    to  target type
54    64    67   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test069
Start line: 1525
End line: 1544
Method source code: 
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter1.getObservations();
        double[] doubleArray4 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray5 = harmonicFitter1.fit(doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #200
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: invokevirtual #25
44: astore        4
46: iconst_0
47: newarray       double
49: astore        5
51: aload_2
52: aload         5
54: invokevirtual #16
57: astore        6
59: ldc           #17
61: invokestatic  #18
64: goto          69
67: astore        6
69: aload_3
70: invokestatic  #20
73: aload         4
75: invokestatic  #20
78: aload         5
80: invokestatic  #20
83: aload         5
85: invokestatic  #21
88: ldc           #74
90: invokestatic  #23
93: return
Exception table:
from    to  target type
51    64    67   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test070
Start line: 1547
End line: 1570
Method source code: 
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray13 = harmonicFitter1.getObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric14 = null;
        double[] doubleArray19 = new double[] { 1.0d, 1.0f, 10, 10 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray20 = harmonicFitter1.fit(parametric14, doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 1.0, 10.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #201
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: aload_2
57: dconst_0
58: dconst_1
59: ldc2_w        #34
62: invokevirtual #54
65: aload_2
66: invokevirtual #25
69: astore        4
71: aconst_null
72: astore        5
74: iconst_4
75: newarray       double
77: dup
78: iconst_0
79: dconst_1
80: dastore
81: dup
82: iconst_1
83: dconst_1
84: dastore
85: dup
86: iconst_2
87: ldc2_w        #32
90: dastore
91: dup
92: iconst_3
93: ldc2_w        #32
96: dastore
97: astore        6
99: aload_2
100: aload         5
102: aload         6
104: invokevirtual #30
107: astore        7
109: ldc           #17
111: invokestatic  #18
114: goto          119
117: astore        7
119: aload_3
120: invokestatic  #20
123: aload         4
125: invokestatic  #20
128: aload         6
130: invokestatic  #20
133: aload         6
135: invokestatic  #21
138: ldc           #202
140: invokestatic  #23
143: return
Exception table:
from    to  target type
99   114   117   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test071
Start line: 1573
End line: 1590
Method source code: 
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter2.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException4 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser5 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray3);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #203
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #156
27: astore_1
28: aconst_null
29: astore_2
30: new           #8
33: dup
34: aload_2
35: invokespecial #9
38: astore_3
39: aload_3
40: invokevirtual #25
43: astore        4
45: new           #81
48: dup
49: aload_1
50: aload         4
52: checkcast     #79
55: invokespecial #82
58: astore        5
60: new           #69
63: dup
64: aload         4
66: invokespecial #70
69: astore        6
71: ldc           #27
73: invokestatic  #18
76: goto          81
79: astore        6
81: new           #83
84: dup
85: invokespecial #84
88: ldc           #85
90: invokevirtual #86
93: aload_1
94: invokevirtual #87
97: ldc           #88
99: invokevirtual #86
102: getstatic     #156
105: invokevirtual #87
108: ldc           #85
110: invokevirtual #86
113: invokevirtual #89
116: aload_1
117: getstatic     #156
120: invokevirtual #90
123: invokestatic  #91
126: aload         4
128: invokestatic  #20
131: return
Exception table:
from    to  target type
60    76    79   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test072
Start line: 1593
End line: 1616
Method source code: 
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint19 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter8.addObservedPoint(weightedObservedPoint19);
        harmonicFitter1.addObservedPoint(weightedObservedPoint19);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint25 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double26 = weightedObservedPoint25.getWeight();
        double double27 = weightedObservedPoint25.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint25);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #204
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: ldc2_w        #32
44: ldc2_w        #10
47: dconst_0
48: invokevirtual #54
51: aconst_null
52: astore        4
54: new           #8
57: dup
58: aload         4
60: invokespecial #9
63: astore        5
65: aload         5
67: dconst_1
68: ldc2_w        #32
71: invokevirtual #43
74: aload         5
76: dconst_0
77: ldc2_w        #34
80: invokevirtual #43
83: aload         5
85: invokevirtual #25
88: astore        6
90: new           #145
93: dup
94: dconst_1
95: dconst_0
96: ldc2_w        #34
99: invokespecial #146
102: astore        7
104: aload         5
106: aload         7
108: invokevirtual #123
111: aload_2
112: aload         7
114: invokevirtual #123
117: new           #145
120: dup
121: ldc2_w        #14
124: ldc2_w        #12
127: ldc2_w        #12
130: invokespecial #146
133: astore        8
135: aload         8
137: invokevirtual #148
140: dstore        9
142: aload         8
144: invokevirtual #148
147: dstore        11
149: aload_2
150: aload         8
152: invokevirtual #123
155: aload_3
156: invokestatic  #20
159: aload         6
161: invokestatic  #20
164: new           #83
167: dup
168: invokespecial #84
171: ldc           #85
173: invokevirtual #86
176: dload         9
178: invokevirtual #150
181: ldc           #88
183: invokevirtual #86
186: ldc2_w        #14
189: invokevirtual #150
192: ldc           #85
194: invokevirtual #86
197: invokevirtual #89
200: dload         9
202: ldc2_w        #14
205: dcmpl
206: ifne          213
209: iconst_1
210: goto          214
213: iconst_0
214: invokestatic  #91
217: new           #83
220: dup
221: invokespecial #84
224: ldc           #85
226: invokevirtual #86
229: dload         11
231: invokevirtual #150
234: ldc           #88
236: invokevirtual #86
239: ldc2_w        #14
242: invokevirtual #150
245: ldc           #85
247: invokevirtual #86
250: invokevirtual #89
253: dload         11
255: ldc2_w        #14
258: dcmpl
259: ifne          266
262: iconst_1
263: goto          267
266: iconst_0
267: invokestatic  #91
270: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test073
Start line: 1619
End line: 1639
Method source code: 
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric10 = null;
        double[] doubleArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = harmonicFitter1.fit(parametric10, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #205
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: aload_2
57: invokevirtual #25
60: astore        4
62: aconst_null
63: astore        5
65: aconst_null
66: astore        6
68: aload_2
69: aload         5
71: aload         6
73: invokevirtual #30
76: astore        7
78: ldc           #17
80: invokestatic  #18
83: goto          88
86: astore        7
88: aload_3
89: invokestatic  #20
92: aload         4
94: invokestatic  #20
97: return
Exception table:
from    to  target type
68    83    86   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test074
Start line: 1642
End line: 1662
Method source code: 
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 2 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #206
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: aload_2
57: invokevirtual #25
60: astore        4
62: aload_2
63: invokevirtual #25
66: astore        5
68: aload_2
69: invokevirtual #26
72: astore        6
74: ldc           #186
76: invokestatic  #18
79: goto          84
82: astore        6
84: aload_3
85: invokestatic  #20
88: aload         4
90: invokestatic  #20
93: aload         5
95: invokestatic  #20
98: return
Exception table:
from    to  target type
68    79    82   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test075
Start line: 1665
End line: 1687
Method source code: 
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric10 = null;
        double[] doubleArray13 = new double[] { 1, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = harmonicFitter1.fit(parametric10, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #207
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: aload_2
57: invokevirtual #25
60: astore        4
62: aconst_null
63: astore        5
65: iconst_2
66: newarray       double
68: dup
69: iconst_0
70: dconst_1
71: dastore
72: dup
73: iconst_1
74: dconst_1
75: dastore
76: astore        6
78: aload_2
79: aload         5
81: aload         6
83: invokevirtual #30
86: astore        7
88: ldc           #17
90: invokestatic  #18
93: goto          98
96: astore        7
98: aload_3
99: invokestatic  #20
102: aload         4
104: invokestatic  #20
107: aload         6
109: invokestatic  #20
112: aload         6
114: invokestatic  #21
117: ldc           #208
119: invokestatic  #23
122: return
Exception table:
from    to  target type
78    93    96   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test076
Start line: 1690
End line: 1708
Method source code: 
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint((double) 10, (double) 0, (double) '4');
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric10 = null;
        double[] doubleArray11 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = harmonicFitter1.fit(1, parametric10, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #209
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: ldc2_w        #32
47: dconst_0
48: ldc2_w        #12
51: invokevirtual #54
54: aconst_null
55: astore_3
56: iconst_0
57: newarray       double
59: astore        4
61: aload_2
62: iconst_1
63: aload_3
64: aload         4
66: invokevirtual #40
69: astore        5
71: ldc           #17
73: invokestatic  #18
76: goto          81
79: astore        5
81: aload         4
83: invokestatic  #20
86: aload         4
88: invokestatic  #21
91: ldc           #74
93: invokestatic  #23
96: return
Exception table:
from    to  target type
61    76    79   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test077
Start line: 1711
End line: 1727
Method source code: 
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser9 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 2 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #210
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: new           #69
59: dup
60: aload_3
61: invokespecial #70
64: astore        4
66: ldc           #186
68: invokestatic  #18
71: goto          76
74: astore        4
76: aload_3
77: invokestatic  #20
80: return
Exception table:
from    to  target type
56    71    74   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test078
Start line: 1730
End line: 1751
Method source code: 
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric5 = null;
        double[] doubleArray7 = new double[] { 100.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = harmonicFitter1.fit(parametric5, doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #211
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: invokevirtual #25
44: astore        4
46: aload_2
47: invokevirtual #59
50: aconst_null
51: astore        5
53: iconst_1
54: newarray       double
56: dup
57: iconst_0
58: ldc2_w        #34
61: dastore
62: astore        6
64: aload_2
65: aload         5
67: aload         6
69: invokevirtual #30
72: astore        7
74: ldc           #17
76: invokestatic  #18
79: goto          84
82: astore        7
84: aload_3
85: invokestatic  #20
88: aload         4
90: invokestatic  #20
93: aload         6
95: invokestatic  #20
98: aload         6
100: invokestatic  #21
103: ldc           #62
105: invokestatic  #23
108: return
Exception table:
from    to  target type
64    79    82   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test079
Start line: 1754
End line: 1773
Method source code: 
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 10, (double) 0);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 3 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #212
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: aload_2
57: invokevirtual #25
60: astore        4
62: aload_2
63: ldc2_w        #32
66: dconst_0
67: invokevirtual #43
70: aload_2
71: invokevirtual #26
74: astore        5
76: ldc           #176
78: invokestatic  #18
81: goto          86
84: astore        5
86: aload_3
87: invokestatic  #20
90: aload         4
92: invokestatic  #20
95: return
Exception table:
from    to  target type
70    81    84   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test080
Start line: 1776
End line: 1795
Method source code: 
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric7 = null;
        double[] doubleArray9 = new double[] { ' ' };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray10 = harmonicFitter1.fit(parametric7, doubleArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[32.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #213
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: ldc2_w        #32
44: ldc2_w        #10
47: dconst_0
48: invokevirtual #54
51: aconst_null
52: astore        4
54: iconst_1
55: newarray       double
57: dup
58: iconst_0
59: ldc2_w        #38
62: dastore
63: astore        5
65: aload_2
66: aload         4
68: aload         5
70: invokevirtual #30
73: astore        6
75: ldc           #17
77: invokestatic  #18
80: goto          85
83: astore        6
85: aload_3
86: invokestatic  #20
89: aload         5
91: invokestatic  #20
94: aload         5
96: invokestatic  #21
99: ldc           #214
101: invokestatic  #23
104: return
Exception table:
from    to  target type
65    80    83   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test081
Start line: 1798
End line: 1814
Method source code: 
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint((double) (-1), 0.0d, (double) (short) 0);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric9 = null;
        double[] doubleArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = harmonicFitter1.fit(parametric9, doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #215
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: ldc2_w        #10
47: dconst_0
48: dconst_0
49: invokevirtual #54
52: aconst_null
53: astore_3
54: aconst_null
55: astore        4
57: aload_2
58: aload_3
59: aload         4
61: invokevirtual #30
64: astore        5
66: ldc           #17
68: invokestatic  #18
71: goto          76
74: astore        5
76: return
Exception table:
from    to  target type
57    71    74   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test082
Start line: 1817
End line: 1827
Method source code: 
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        java.lang.Class<?> wildcardClass7 = harmonicFitter1.getClass();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #216
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: ldc2_w        #32
44: ldc2_w        #10
47: dconst_0
48: invokevirtual #54
51: aload_2
52: invokevirtual #98
55: astore        4
57: aload_3
58: invokestatic  #20
61: aload         4
63: invokestatic  #20
66: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test083
Start line: 1830
End line: 1845
Method source code: 
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray9 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #217
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #59
55: aload_2
56: invokevirtual #26
59: astore_3
60: ldc           #27
62: invokestatic  #18
65: goto          69
68: astore_3
69: return
Exception table:
from    to  target type
55    65    68   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test084
Start line: 1848
End line: 1875
Method source code: 
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_OBJECT_TO_FRACTION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer2 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter3 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer2);
        harmonicFitter3.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter3.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter3.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter3.getObservations();
        java.lang.Object[] objArray12 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray11);
        org.apache.commons.math3.exception.ZeroException zeroException13 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) weightedObservedPointArray11);
        org.apache.commons.math3.exception.ZeroException zeroException14 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser15 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray11);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_OBJECT_TO_FRACTION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_OBJECT_TO_FRACTION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED));
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #218
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #219
27: astore_1
28: getstatic     #220
31: astore_2
32: aconst_null
33: astore_3
34: new           #8
37: dup
38: aload_3
39: invokespecial #9
42: astore        4
44: aload         4
46: dconst_1
47: ldc2_w        #32
50: invokevirtual #43
53: aload         4
55: dconst_0
56: ldc2_w        #34
59: invokevirtual #43
62: aload         4
64: invokevirtual #59
67: aload         4
69: invokevirtual #25
72: astore        5
74: aload         5
76: checkcast     #79
79: invokestatic  #80
82: astore        6
84: new           #81
87: dup
88: aload_2
89: aload         5
91: checkcast     #79
94: invokespecial #82
97: astore        7
99: new           #81
102: dup
103: aload_1
104: aload         5
106: checkcast     #79
109: invokespecial #82
112: astore        8
114: new           #69
117: dup
118: aload         5
120: invokespecial #70
123: astore        9
125: ldc           #27
127: invokestatic  #18
130: goto          135
133: astore        9
135: new           #83
138: dup
139: invokespecial #84
142: ldc           #85
144: invokevirtual #86
147: aload_1
148: invokevirtual #87
151: ldc           #88
153: invokevirtual #86
156: getstatic     #219
159: invokevirtual #87
162: ldc           #85
164: invokevirtual #86
167: invokevirtual #89
170: aload_1
171: getstatic     #219
174: invokevirtual #90
177: invokestatic  #91
180: new           #83
183: dup
184: invokespecial #84
187: ldc           #85
189: invokevirtual #86
192: aload_2
193: invokevirtual #87
196: ldc           #88
198: invokevirtual #86
201: getstatic     #220
204: invokevirtual #87
207: ldc           #85
209: invokevirtual #86
212: invokevirtual #89
215: aload_2
216: getstatic     #220
219: invokevirtual #90
222: invokestatic  #91
225: aload         5
227: invokestatic  #20
230: aload         6
232: invokestatic  #20
235: aload         6
237: invokestatic  #92
240: ldc           #74
242: invokestatic  #23
245: aload         6
247: invokestatic  #93
250: ldc           #74
252: invokestatic  #23
255: return
Exception table:
from    to  target type
114   130   133   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test085
Start line: 1878
End line: 1895
Method source code: 
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.clearObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #221
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: ldc2_w        #32
44: ldc2_w        #10
47: dconst_0
48: invokevirtual #54
51: aload_2
52: ldc2_w        #44
55: ldc2_w        #14
58: invokevirtual #43
61: aload_2
62: invokevirtual #59
65: aload_2
66: invokevirtual #26
69: astore        4
71: ldc           #27
73: invokestatic  #18
76: goto          81
79: astore        4
81: aload_3
82: invokestatic  #20
85: return
Exception table:
from    to  target type
65    76    79   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test086
Start line: 1898
End line: 1936
Method source code: 
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint((double) (-1), 0.0d, (double) (short) 0);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer9 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter10 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer9);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter10.getObservations();
        harmonicFitter10.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter10.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter10.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint26 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double27 = weightedObservedPoint26.getX();
        double double28 = weightedObservedPoint26.getY();
        double double29 = weightedObservedPoint26.getY();
        harmonicFitter10.addObservedPoint(weightedObservedPoint26);
        double double31 = weightedObservedPoint26.getY();
        double double32 = weightedObservedPoint26.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint26);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric34 = null;
        double[] doubleArray41 = new double[] { 1L, 100.0d, (short) 1, (-1L), (short) 1, 0.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray42 = harmonicFitter1.fit(parametric34, doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0, 1.0, -1.0, 1.0, 0.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #222
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: ldc2_w        #10
47: dconst_0
48: dconst_0
49: invokevirtual #54
52: aconst_null
53: astore_3
54: new           #8
57: dup
58: aload_3
59: invokespecial #9
62: astore        4
64: aload         4
66: invokevirtual #25
69: astore        5
71: aload         4
73: ldc2_w        #32
76: ldc2_w        #10
79: dconst_0
80: invokevirtual #54
83: aload         4
85: ldc2_w        #44
88: ldc2_w        #14
91: invokevirtual #43
94: aload         4
96: ldc2_w        #12
99: dconst_0
100: ldc2_w        #44
103: invokevirtual #54
106: new           #145
109: dup
110: ldc2_w        #14
113: ldc2_w        #12
116: ldc2_w        #12
119: invokespecial #146
122: astore        6
124: aload         6
126: invokevirtual #147
129: dstore        7
131: aload         6
133: invokevirtual #149
136: dstore        9
138: aload         6
140: invokevirtual #149
143: dstore        11
145: aload         4
147: aload         6
149: invokevirtual #123
152: aload         6
154: invokevirtual #149
157: dstore        13
159: aload         6
161: invokevirtual #148
164: dstore        15
166: aload_2
167: aload         6
169: invokevirtual #123
172: aconst_null
173: astore        17
175: bipush        6
177: newarray       double
179: dup
180: iconst_0
181: dconst_1
182: dastore
183: dup
184: iconst_1
185: ldc2_w        #34
188: dastore
189: dup
190: iconst_2
191: dconst_1
192: dastore
193: dup
194: iconst_3
195: ldc2_w        #10
198: dastore
199: dup
200: iconst_4
201: dconst_1
202: dastore
203: dup
204: iconst_5
205: dconst_0
206: dastore
207: astore        18
209: aload_2
210: aload         17
212: aload         18
214: invokevirtual #30
217: astore        19
219: ldc           #17
221: invokestatic  #18
224: goto          229
227: astore        19
229: aload         5
231: invokestatic  #20
234: new           #83
237: dup
238: invokespecial #84
241: ldc           #85
243: invokevirtual #86
246: dload         7
248: invokevirtual #150
251: ldc           #88
253: invokevirtual #86
256: ldc2_w        #12
259: invokevirtual #150
262: ldc           #85
264: invokevirtual #86
267: invokevirtual #89
270: dload         7
272: ldc2_w        #12
275: dcmpl
276: ifne          283
279: iconst_1
280: goto          284
283: iconst_0
284: invokestatic  #91
287: new           #83
290: dup
291: invokespecial #84
294: ldc           #85
296: invokevirtual #86
299: dload         9
301: invokevirtual #150
304: ldc           #88
306: invokevirtual #86
309: ldc2_w        #12
312: invokevirtual #150
315: ldc           #85
317: invokevirtual #86
320: invokevirtual #89
323: dload         9
325: ldc2_w        #12
328: dcmpl
329: ifne          336
332: iconst_1
333: goto          337
336: iconst_0
337: invokestatic  #91
340: new           #83
343: dup
344: invokespecial #84
347: ldc           #85
349: invokevirtual #86
352: dload         11
354: invokevirtual #150
357: ldc           #88
359: invokevirtual #86
362: ldc2_w        #12
365: invokevirtual #150
368: ldc           #85
370: invokevirtual #86
373: invokevirtual #89
376: dload         11
378: ldc2_w        #12
381: dcmpl
382: ifne          389
385: iconst_1
386: goto          390
389: iconst_0
390: invokestatic  #91
393: new           #83
396: dup
397: invokespecial #84
400: ldc           #85
402: invokevirtual #86
405: dload         13
407: invokevirtual #150
410: ldc           #88
412: invokevirtual #86
415: ldc2_w        #12
418: invokevirtual #150
421: ldc           #85
423: invokevirtual #86
426: invokevirtual #89
429: dload         13
431: ldc2_w        #12
434: dcmpl
435: ifne          442
438: iconst_1
439: goto          443
442: iconst_0
443: invokestatic  #91
446: new           #83
449: dup
450: invokespecial #84
453: ldc           #85
455: invokevirtual #86
458: dload         15
460: invokevirtual #150
463: ldc           #88
465: invokevirtual #86
468: ldc2_w        #14
471: invokevirtual #150
474: ldc           #85
476: invokevirtual #86
479: invokevirtual #89
482: dload         15
484: ldc2_w        #14
487: dcmpl
488: ifne          495
491: iconst_1
492: goto          496
495: iconst_0
496: invokestatic  #91
499: aload         18
501: invokestatic  #20
504: aload         18
506: invokestatic  #21
509: ldc           #223
511: invokestatic  #23
514: return
Exception table:
from    to  target type
209   224   227   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test087
Start line: 1939
End line: 1959
Method source code: 
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint17 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double18 = weightedObservedPoint17.getX();
        double double19 = weightedObservedPoint17.getY();
        double double20 = weightedObservedPoint17.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint17);
        double double22 = weightedObservedPoint17.getX();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #224
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: ldc2_w        #32
44: ldc2_w        #10
47: dconst_0
48: invokevirtual #54
51: aload_2
52: ldc2_w        #44
55: ldc2_w        #14
58: invokevirtual #43
61: aload_2
62: ldc2_w        #12
65: dconst_0
66: ldc2_w        #44
69: invokevirtual #54
72: new           #145
75: dup
76: ldc2_w        #14
79: ldc2_w        #12
82: ldc2_w        #12
85: invokespecial #146
88: astore        4
90: aload         4
92: invokevirtual #147
95: dstore        5
97: aload         4
99: invokevirtual #149
102: dstore        7
104: aload         4
106: invokevirtual #149
109: dstore        9
111: aload_2
112: aload         4
114: invokevirtual #123
117: aload         4
119: invokevirtual #147
122: dstore        11
124: aload_3
125: invokestatic  #20
128: new           #83
131: dup
132: invokespecial #84
135: ldc           #85
137: invokevirtual #86
140: dload         5
142: invokevirtual #150
145: ldc           #88
147: invokevirtual #86
150: ldc2_w        #12
153: invokevirtual #150
156: ldc           #85
158: invokevirtual #86
161: invokevirtual #89
164: dload         5
166: ldc2_w        #12
169: dcmpl
170: ifne          177
173: iconst_1
174: goto          178
177: iconst_0
178: invokestatic  #91
181: new           #83
184: dup
185: invokespecial #84
188: ldc           #85
190: invokevirtual #86
193: dload         7
195: invokevirtual #150
198: ldc           #88
200: invokevirtual #86
203: ldc2_w        #12
206: invokevirtual #150
209: ldc           #85
211: invokevirtual #86
214: invokevirtual #89
217: dload         7
219: ldc2_w        #12
222: dcmpl
223: ifne          230
226: iconst_1
227: goto          231
230: iconst_0
231: invokestatic  #91
234: new           #83
237: dup
238: invokespecial #84
241: ldc           #85
243: invokevirtual #86
246: dload         9
248: invokevirtual #150
251: ldc           #88
253: invokevirtual #86
256: ldc2_w        #12
259: invokevirtual #150
262: ldc           #85
264: invokevirtual #86
267: invokevirtual #89
270: dload         9
272: ldc2_w        #12
275: dcmpl
276: ifne          283
279: iconst_1
280: goto          284
283: iconst_0
284: invokestatic  #91
287: new           #83
290: dup
291: invokespecial #84
294: ldc           #85
296: invokevirtual #86
299: dload         11
301: invokevirtual #150
304: ldc           #88
306: invokevirtual #86
309: ldc2_w        #12
312: invokevirtual #150
315: ldc           #85
317: invokevirtual #86
320: invokevirtual #89
323: dload         11
325: ldc2_w        #12
328: dcmpl
329: ifne          336
332: iconst_1
333: goto          337
336: iconst_0
337: invokestatic  #91
340: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test088
Start line: 1962
End line: 1989
Method source code: 
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint19 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter8.addObservedPoint(weightedObservedPoint19);
        harmonicFitter1.addObservedPoint(weightedObservedPoint19);
        double[] doubleArray25 = new double[] { 1, (-1.0d), 100L };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = harmonicFitter1.fit(doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, -1.0, 100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #225
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: ldc2_w        #32
44: ldc2_w        #10
47: dconst_0
48: invokevirtual #54
51: aconst_null
52: astore        4
54: new           #8
57: dup
58: aload         4
60: invokespecial #9
63: astore        5
65: aload         5
67: dconst_1
68: ldc2_w        #32
71: invokevirtual #43
74: aload         5
76: dconst_0
77: ldc2_w        #34
80: invokevirtual #43
83: aload         5
85: invokevirtual #25
88: astore        6
90: new           #145
93: dup
94: dconst_1
95: dconst_0
96: ldc2_w        #34
99: invokespecial #146
102: astore        7
104: aload         5
106: aload         7
108: invokevirtual #123
111: aload_2
112: aload         7
114: invokevirtual #123
117: iconst_3
118: newarray       double
120: dup
121: iconst_0
122: dconst_1
123: dastore
124: dup
125: iconst_1
126: ldc2_w        #10
129: dastore
130: dup
131: iconst_2
132: ldc2_w        #34
135: dastore
136: astore        8
138: aload_2
139: aload         8
141: invokevirtual #16
144: astore        9
146: ldc           #17
148: invokestatic  #18
151: goto          156
154: astore        9
156: aload_3
157: invokestatic  #20
160: aload         6
162: invokestatic  #20
165: aload         8
167: invokestatic  #20
170: aload         8
172: invokestatic  #21
175: ldc           #226
177: invokestatic  #23
180: return
Exception table:
from    to  target type
138   151   154   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test089
Start line: 1992
End line: 2024
Method source code: 
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.addObservedPoint((double) 0, (double) (short) 100, (double) (short) 0);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric19 = null;
        double[] doubleArray25 = new double[] { (-1L), (byte) -1, (short) -1, 1L, 0.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = harmonicFitter1.fit((-1), parametric19, doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, -1.0, -1.0, 1.0, 0.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #227
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: invokevirtual #59
44: aload_2
45: invokevirtual #25
48: astore        4
50: new           #145
53: dup
54: ldc2_w        #14
57: ldc2_w        #12
60: ldc2_w        #12
63: invokespecial #146
66: astore        5
68: aload         5
70: invokevirtual #147
73: dstore        6
75: aload         5
77: invokevirtual #148
80: dstore        8
82: aload         5
84: invokevirtual #148
87: dstore        10
89: aload         5
91: invokevirtual #149
94: dstore        12
96: aload_2
97: aload         5
99: invokevirtual #123
102: aload_2
103: dconst_0
104: ldc2_w        #34
107: dconst_0
108: invokevirtual #54
111: aconst_null
112: astore        14
114: iconst_5
115: newarray       double
117: dup
118: iconst_0
119: ldc2_w        #10
122: dastore
123: dup
124: iconst_1
125: ldc2_w        #10
128: dastore
129: dup
130: iconst_2
131: ldc2_w        #10
134: dastore
135: dup
136: iconst_3
137: dconst_1
138: dastore
139: dup
140: iconst_4
141: dconst_0
142: dastore
143: astore        15
145: aload_2
146: iconst_m1
147: aload         14
149: aload         15
151: invokevirtual #40
154: astore        16
156: ldc           #17
158: invokestatic  #18
161: goto          166
164: astore        16
166: aload_3
167: invokestatic  #20
170: aload         4
172: invokestatic  #20
175: new           #83
178: dup
179: invokespecial #84
182: ldc           #85
184: invokevirtual #86
187: dload         6
189: invokevirtual #150
192: ldc           #88
194: invokevirtual #86
197: ldc2_w        #12
200: invokevirtual #150
203: ldc           #85
205: invokevirtual #86
208: invokevirtual #89
211: dload         6
213: ldc2_w        #12
216: dcmpl
217: ifne          224
220: iconst_1
221: goto          225
224: iconst_0
225: invokestatic  #91
228: new           #83
231: dup
232: invokespecial #84
235: ldc           #85
237: invokevirtual #86
240: dload         8
242: invokevirtual #150
245: ldc           #88
247: invokevirtual #86
250: ldc2_w        #14
253: invokevirtual #150
256: ldc           #85
258: invokevirtual #86
261: invokevirtual #89
264: dload         8
266: ldc2_w        #14
269: dcmpl
270: ifne          277
273: iconst_1
274: goto          278
277: iconst_0
278: invokestatic  #91
281: new           #83
284: dup
285: invokespecial #84
288: ldc           #85
290: invokevirtual #86
293: dload         10
295: invokevirtual #150
298: ldc           #88
300: invokevirtual #86
303: ldc2_w        #14
306: invokevirtual #150
309: ldc           #85
311: invokevirtual #86
314: invokevirtual #89
317: dload         10
319: ldc2_w        #14
322: dcmpl
323: ifne          330
326: iconst_1
327: goto          331
330: iconst_0
331: invokestatic  #91
334: new           #83
337: dup
338: invokespecial #84
341: ldc           #85
343: invokevirtual #86
346: dload         12
348: invokevirtual #150
351: ldc           #88
353: invokevirtual #86
356: ldc2_w        #12
359: invokevirtual #150
362: ldc           #85
364: invokevirtual #86
367: invokevirtual #89
370: dload         12
372: ldc2_w        #12
375: dcmpl
376: ifne          383
379: iconst_1
380: goto          384
383: iconst_0
384: invokestatic  #91
387: aload         15
389: invokestatic  #20
392: aload         15
394: invokestatic  #21
397: ldc           #228
399: invokestatic  #23
402: return
Exception table:
from    to  target type
145   161   164   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test090
Start line: 2027
End line: 2095
Method source code: 
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.INDEX;
        java.lang.Number number3 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException5 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number3, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException8 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException5, (org.apache.commons.math3.exception.util.Localizable) localizedFormats6, objArray7);
        boolean boolean9 = numberIsTooSmallException5.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext10 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException5);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats11 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray14 = new java.lang.Object[] { localizedFormats12, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException15 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats11, objArray14);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray19 = new java.lang.Object[] { localizedFormats17, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException20 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats16, objArray19);
        mathIllegalArgumentException15.addSuppressed((java.lang.Throwable) mathIllegalArgumentException20);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext22 = mathIllegalArgumentException15.getContext();
        java.lang.Object obj24 = exceptionContext22.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats25 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer26 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter27 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer26);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray28 = harmonicFitter27.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray29 = harmonicFitter27.getObservations();
        exceptionContext22.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, (java.lang.Object[]) weightedObservedPointArray29);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats31 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer32 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter33 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer32);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray34 = harmonicFitter33.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException35 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats31, (java.lang.Object[]) weightedObservedPointArray34);
        exceptionContext10.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, (java.lang.Object[]) weightedObservedPointArray34);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException37 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) weightedObservedPointArray34);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException38 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser39 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray34);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INDEX + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats11 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats11.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + localizedFormats25 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats25.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray28);
        org.junit.Assert.assertNotNull(weightedObservedPointArray29);
        org.junit.Assert.assertTrue("'" + localizedFormats31 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats31.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray34);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #229
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #230
27: astore_1
28: getstatic     #231
31: astore_2
32: aconst_null
33: astore_3
34: new           #28
37: dup
38: bipush        100
40: invokestatic  #159
43: aload_3
44: iconst_0
45: invokespecial #160
48: astore        4
50: getstatic     #161
53: astore        5
55: iconst_0
56: anewarray     #5
59: astore        6
61: new           #136
64: dup
65: aload         4
67: aload         5
69: aload         6
71: invokespecial #137
74: astore        7
76: aload         4
78: invokevirtual #162
81: istore        8
83: new           #163
86: dup
87: aload         4
89: invokespecial #164
92: astore        9
94: getstatic     #127
97: astore        10
99: getstatic     #128
102: astore        11
104: iconst_2
105: anewarray     #5
108: dup
109: iconst_0
110: aload         11
112: aastore
113: dup
114: iconst_1
115: lconst_1
116: invokestatic  #129
119: aastore
120: astore        12
122: new           #130
125: dup
126: aload         10
128: aload         12
130: invokespecial #131
133: astore        13
135: getstatic     #127
138: astore        14
140: getstatic     #128
143: astore        15
145: iconst_2
146: anewarray     #5
149: dup
150: iconst_0
151: aload         15
153: aastore
154: dup
155: iconst_1
156: lconst_1
157: invokestatic  #129
160: aastore
161: astore        16
163: new           #130
166: dup
167: aload         14
169: aload         16
171: invokespecial #131
174: astore        17
176: aload         13
178: aload         17
180: invokevirtual #132
183: aload         13
185: invokevirtual #165
188: astore        18
190: aload         18
192: ldc           #166
194: invokevirtual #167
197: astore        19
199: getstatic     #168
202: astore        20
204: aconst_null
205: astore        21
207: new           #8
210: dup
211: aload         21
213: invokespecial #9
216: astore        22
218: aload         22
220: invokevirtual #25
223: astore        23
225: aload         22
227: invokevirtual #25
230: astore        24
232: aload         18
234: aload         20
236: aload         24
238: checkcast     #79
241: invokevirtual #169
244: getstatic     #156
247: astore        25
249: aconst_null
250: astore        26
252: new           #8
255: dup
256: aload         26
258: invokespecial #9
261: astore        27
263: aload         27
265: invokevirtual #25
268: astore        28
270: new           #81
273: dup
274: aload         25
276: aload         28
278: checkcast     #79
281: invokespecial #82
284: astore        29
286: aload         9
288: aload         20
290: aload         28
292: checkcast     #79
295: invokevirtual #169
298: new           #130
301: dup
302: aload_2
303: aload         28
305: checkcast     #79
308: invokespecial #131
311: astore        30
313: new           #130
316: dup
317: aload_1
318: aload         28
320: checkcast     #79
323: invokespecial #131
326: astore        31
328: new           #69
331: dup
332: aload         28
334: invokespecial #70
337: astore        32
339: ldc           #27
341: invokestatic  #18
344: goto          349
347: astore        32
349: new           #83
352: dup
353: invokespecial #84
356: ldc           #85
358: invokevirtual #86
361: aload_1
362: invokevirtual #87
365: ldc           #88
367: invokevirtual #86
370: getstatic     #230
373: invokevirtual #87
376: ldc           #85
378: invokevirtual #86
381: invokevirtual #89
384: aload_1
385: getstatic     #230
388: invokevirtual #90
391: invokestatic  #91
394: new           #83
397: dup
398: invokespecial #84
401: ldc           #85
403: invokevirtual #86
406: aload_2
407: invokevirtual #87
410: ldc           #88
412: invokevirtual #86
415: getstatic     #231
418: invokevirtual #87
421: ldc           #85
423: invokevirtual #86
426: invokevirtual #89
429: aload_2
430: getstatic     #231
433: invokevirtual #90
436: invokestatic  #91
439: new           #83
442: dup
443: invokespecial #84
446: ldc           #85
448: invokevirtual #86
451: aload         5
453: invokevirtual #87
456: ldc           #88
458: invokevirtual #86
461: getstatic     #161
464: invokevirtual #87
467: ldc           #85
469: invokevirtual #86
472: invokevirtual #89
475: aload         5
477: getstatic     #161
480: invokevirtual #90
483: invokestatic  #91
486: aload         6
488: invokestatic  #20
491: aload         6
493: invokestatic  #92
496: ldc           #74
498: invokestatic  #23
501: aload         6
503: invokestatic  #93
506: ldc           #74
508: invokestatic  #23
511: new           #83
514: dup
515: invokespecial #84
518: ldc           #85
520: invokevirtual #86
523: iload         8
525: invokevirtual #170
528: ldc           #88
530: invokevirtual #86
533: iconst_0
534: invokevirtual #170
537: ldc           #85
539: invokevirtual #86
542: invokevirtual #89
545: iload         8
547: ifne          554
550: iconst_1
551: goto          555
554: iconst_0
555: invokestatic  #91
558: new           #83
561: dup
562: invokespecial #84
565: ldc           #85
567: invokevirtual #86
570: aload         10
572: invokevirtual #87
575: ldc           #88
577: invokevirtual #86
580: getstatic     #127
583: invokevirtual #87
586: ldc           #85
588: invokevirtual #86
591: invokevirtual #89
594: aload         10
596: getstatic     #127
599: invokevirtual #90
602: invokestatic  #91
605: new           #83
608: dup
609: invokespecial #84
612: ldc           #85
614: invokevirtual #86
617: aload         11
619: invokevirtual #87
622: ldc           #88
624: invokevirtual #86
627: getstatic     #128
630: invokevirtual #87
633: ldc           #85
635: invokevirtual #86
638: invokevirtual #89
641: aload         11
643: getstatic     #128
646: invokevirtual #90
649: invokestatic  #91
652: aload         12
654: invokestatic  #20
657: aload         12
659: invokestatic  #92
662: ldc           #140
664: invokestatic  #23
667: aload         12
669: invokestatic  #93
672: ldc           #140
674: invokestatic  #23
677: new           #83
680: dup
681: invokespecial #84
684: ldc           #85
686: invokevirtual #86
689: aload         14
691: invokevirtual #87
694: ldc           #88
696: invokevirtual #86
699: getstatic     #127
702: invokevirtual #87
705: ldc           #85
707: invokevirtual #86
710: invokevirtual #89
713: aload         14
715: getstatic     #127
718: invokevirtual #90
721: invokestatic  #91
724: new           #83
727: dup
728: invokespecial #84
731: ldc           #85
733: invokevirtual #86
736: aload         15
738: invokevirtual #87
741: ldc           #88
743: invokevirtual #86
746: getstatic     #128
749: invokevirtual #87
752: ldc           #85
754: invokevirtual #86
757: invokevirtual #89
760: aload         15
762: getstatic     #128
765: invokevirtual #90
768: invokestatic  #91
771: aload         16
773: invokestatic  #20
776: aload         16
778: invokestatic  #92
781: ldc           #140
783: invokestatic  #23
786: aload         16
788: invokestatic  #93
791: ldc           #140
793: invokestatic  #23
796: aload         18
798: invokestatic  #20
801: aload         19
803: invokestatic  #171
806: new           #83
809: dup
810: invokespecial #84
813: ldc           #85
815: invokevirtual #86
818: aload         20
820: invokevirtual #87
823: ldc           #88
825: invokevirtual #86
828: getstatic     #168
831: invokevirtual #87
834: ldc           #85
836: invokevirtual #86
839: invokevirtual #89
842: aload         20
844: getstatic     #168
847: invokevirtual #90
850: invokestatic  #91
853: aload         23
855: invokestatic  #20
858: aload         24
860: invokestatic  #20
863: new           #83
866: dup
867: invokespecial #84
870: ldc           #85
872: invokevirtual #86
875: aload         25
877: invokevirtual #87
880: ldc           #88
882: invokevirtual #86
885: getstatic     #156
888: invokevirtual #87
891: ldc           #85
893: invokevirtual #86
896: invokevirtual #89
899: aload         25
901: getstatic     #156
904: invokevirtual #90
907: invokestatic  #91
910: aload         28
912: invokestatic  #20
915: return
Exception table:
from    to  target type
328   344   347   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test091
Start line: 2098
End line: 2136
Method source code: 
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray4 = new java.lang.Object[] { localizedFormats2, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException5 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, objArray4);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray9 = new java.lang.Object[] { localizedFormats7, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats6, objArray9);
        mathIllegalArgumentException5.addSuppressed((java.lang.Throwable) mathIllegalArgumentException10);
        java.lang.Throwable[] throwableArray12 = mathIllegalArgumentException5.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException13 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) throwableArray12);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer14 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter15 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer14);
        harmonicFitter15.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter15.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray22 = harmonicFitter15.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray23 = harmonicFitter15.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray24 = harmonicFitter15.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException25 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray24);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(weightedObservedPointArray22);
        org.junit.Assert.assertNotNull(weightedObservedPointArray23);
        org.junit.Assert.assertNotNull(weightedObservedPointArray24);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #232
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #233
27: astore_1
28: getstatic     #127
31: astore_2
32: getstatic     #128
35: astore_3
36: iconst_2
37: anewarray     #5
40: dup
41: iconst_0
42: aload_3
43: aastore
44: dup
45: iconst_1
46: lconst_1
47: invokestatic  #129
50: aastore
51: astore        4
53: new           #130
56: dup
57: aload_2
58: aload         4
60: invokespecial #131
63: astore        5
65: getstatic     #127
68: astore        6
70: getstatic     #128
73: astore        7
75: iconst_2
76: anewarray     #5
79: dup
80: iconst_0
81: aload         7
83: aastore
84: dup
85: iconst_1
86: lconst_1
87: invokestatic  #129
90: aastore
91: astore        8
93: new           #130
96: dup
97: aload         6
99: aload         8
101: invokespecial #131
104: astore        9
106: aload         5
108: aload         9
110: invokevirtual #132
113: aload         5
115: invokevirtual #234
118: astore        10
120: new           #136
123: dup
124: aload_1
125: aload         10
127: checkcast     #79
130: invokespecial #138
133: astore        11
135: aconst_null
136: astore        12
138: new           #8
141: dup
142: aload         12
144: invokespecial #9
147: astore        13
149: aload         13
151: dconst_1
152: ldc2_w        #32
155: invokevirtual #43
158: aload         13
160: dconst_0
161: ldc2_w        #34
164: invokevirtual #43
167: aload         13
169: invokevirtual #25
172: astore        14
174: aload         13
176: invokevirtual #25
179: astore        15
181: aload         13
183: invokevirtual #25
186: astore        16
188: new           #81
191: dup
192: aload_1
193: aload         16
195: checkcast     #79
198: invokespecial #82
201: astore        17
203: new           #83
206: dup
207: invokespecial #84
210: ldc           #85
212: invokevirtual #86
215: aload_1
216: invokevirtual #87
219: ldc           #88
221: invokevirtual #86
224: getstatic     #233
227: invokevirtual #87
230: ldc           #85
232: invokevirtual #86
235: invokevirtual #89
238: aload_1
239: getstatic     #233
242: invokevirtual #90
245: invokestatic  #91
248: new           #83
251: dup
252: invokespecial #84
255: ldc           #85
257: invokevirtual #86
260: aload_2
261: invokevirtual #87
264: ldc           #88
266: invokevirtual #86
269: getstatic     #127
272: invokevirtual #87
275: ldc           #85
277: invokevirtual #86
280: invokevirtual #89
283: aload_2
284: getstatic     #127
287: invokevirtual #90
290: invokestatic  #91
293: new           #83
296: dup
297: invokespecial #84
300: ldc           #85
302: invokevirtual #86
305: aload_3
306: invokevirtual #87
309: ldc           #88
311: invokevirtual #86
314: getstatic     #128
317: invokevirtual #87
320: ldc           #85
322: invokevirtual #86
325: invokevirtual #89
328: aload_3
329: getstatic     #128
332: invokevirtual #90
335: invokestatic  #91
338: aload         4
340: invokestatic  #20
343: aload         4
345: invokestatic  #92
348: ldc           #140
350: invokestatic  #23
353: aload         4
355: invokestatic  #93
358: ldc           #140
360: invokestatic  #23
363: new           #83
366: dup
367: invokespecial #84
370: ldc           #85
372: invokevirtual #86
375: aload         6
377: invokevirtual #87
380: ldc           #88
382: invokevirtual #86
385: getstatic     #127
388: invokevirtual #87
391: ldc           #85
393: invokevirtual #86
396: invokevirtual #89
399: aload         6
401: getstatic     #127
404: invokevirtual #90
407: invokestatic  #91
410: new           #83
413: dup
414: invokespecial #84
417: ldc           #85
419: invokevirtual #86
422: aload         7
424: invokevirtual #87
427: ldc           #88
429: invokevirtual #86
432: getstatic     #128
435: invokevirtual #87
438: ldc           #85
440: invokevirtual #86
443: invokevirtual #89
446: aload         7
448: getstatic     #128
451: invokevirtual #90
454: invokestatic  #91
457: aload         8
459: invokestatic  #20
462: aload         8
464: invokestatic  #92
467: ldc           #140
469: invokestatic  #23
472: aload         8
474: invokestatic  #93
477: ldc           #140
479: invokestatic  #23
482: aload         10
484: invokestatic  #20
487: aload         14
489: invokestatic  #20
492: aload         15
494: invokestatic  #20
497: aload         16
499: invokestatic  #20
502: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test092
Start line: 2139
End line: 2158
Method source code: 
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray13 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser14 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray13);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 3 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray13);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #235
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: aload_2
57: dconst_0
58: dconst_1
59: ldc2_w        #34
62: invokevirtual #54
65: aload_2
66: invokevirtual #25
69: astore        4
71: new           #69
74: dup
75: aload         4
77: invokespecial #70
80: astore        5
82: ldc           #176
84: invokestatic  #18
87: goto          92
90: astore        5
92: aload_3
93: invokestatic  #20
96: aload         4
98: invokestatic  #20
101: return
Exception table:
from    to  target type
71    87    90   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test093
Start line: 2161
End line: 2184
Method source code: 
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric16 = null;
        double[] doubleArray22 = new double[] { (byte) 1, 0.0d, (short) 100, 100L, (-1L) };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray23 = harmonicFitter1.fit((-1), parametric16, doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 0.0, 100.0, 100.0, -1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #236
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: invokevirtual #25
55: astore_3
56: new           #145
59: dup
60: dconst_1
61: dconst_0
62: ldc2_w        #34
65: invokespecial #146
68: astore        4
70: aload_2
71: aload         4
73: invokevirtual #123
76: aload_2
77: invokevirtual #59
80: aconst_null
81: astore        5
83: iconst_5
84: newarray       double
86: dup
87: iconst_0
88: dconst_1
89: dastore
90: dup
91: iconst_1
92: dconst_0
93: dastore
94: dup
95: iconst_2
96: ldc2_w        #34
99: dastore
100: dup
101: iconst_3
102: ldc2_w        #34
105: dastore
106: dup
107: iconst_4
108: ldc2_w        #10
111: dastore
112: astore        6
114: aload_2
115: iconst_m1
116: aload         5
118: aload         6
120: invokevirtual #40
123: astore        7
125: ldc           #17
127: invokestatic  #18
130: goto          135
133: astore        7
135: aload_3
136: invokestatic  #20
139: aload         6
141: invokestatic  #20
144: aload         6
146: invokestatic  #21
149: ldc           #237
151: invokestatic  #23
154: return
Exception table:
from    to  target type
114   130   133   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test094
Start line: 2187
End line: 2202
Method source code: 
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(35.0d, (double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray9 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #238
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: invokevirtual #59
47: aload_2
48: ldc2_w        #14
51: ldc2_w        #10
54: invokevirtual #43
57: aload_2
58: invokevirtual #26
61: astore_3
62: ldc           #64
64: invokestatic  #18
67: goto          71
70: astore_3
71: return
Exception table:
from    to  target type
57    67    70   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test095
Start line: 2205
End line: 2225
Method source code: 
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric10 = null;
        double[] doubleArray14 = new double[] { (-1.0d), (short) 10, 'a' };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = harmonicFitter1.fit(parametric10, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 10.0, 97.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #239
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: ldc2_w        #32
44: ldc2_w        #10
47: dconst_0
48: invokevirtual #54
51: aload_2
52: ldc2_w        #44
55: ldc2_w        #14
58: invokevirtual #43
61: aconst_null
62: astore        4
64: iconst_3
65: newarray       double
67: dup
68: iconst_0
69: ldc2_w        #10
72: dastore
73: dup
74: iconst_1
75: ldc2_w        #32
78: dastore
79: dup
80: iconst_2
81: ldc2_w        #44
84: dastore
85: astore        5
87: aload_2
88: aload         4
90: aload         5
92: invokevirtual #30
95: astore        6
97: ldc           #17
99: invokestatic  #18
102: goto          107
105: astore        6
107: aload_3
108: invokestatic  #20
111: aload         5
113: invokestatic  #20
116: aload         5
118: invokestatic  #21
121: ldc           #240
123: invokestatic  #23
126: return
Exception table:
from    to  target type
87   102   105   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test096
Start line: 2228
End line: 2248
Method source code: 
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint11 = null;
        harmonicFitter1.addObservedPoint(weightedObservedPoint11);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 3 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #241
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #25
39: astore_3
40: aload_2
41: ldc2_w        #32
44: ldc2_w        #10
47: dconst_0
48: invokevirtual #54
51: aload_2
52: ldc2_w        #44
55: ldc2_w        #14
58: invokevirtual #43
61: aload_2
62: invokevirtual #25
65: astore        4
67: aconst_null
68: astore        5
70: aload_2
71: aload         5
73: invokevirtual #123
76: aload_2
77: invokevirtual #26
80: astore        6
82: ldc           #176
84: invokestatic  #18
87: goto          92
90: astore        6
92: aload_3
93: invokestatic  #20
96: aload         4
98: invokestatic  #20
101: return
Exception table:
from    to  target type
76    87    90   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test097
Start line: 2251
End line: 2269
Method source code: 
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter2.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException4 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray3);
        java.lang.Number number5 = zeroException4.getArgument();
        java.lang.Number number6 = zeroException4.getArgument();
        java.lang.Number number7 = zeroException4.getArgument();
        java.lang.Number number8 = zeroException4.getArgument();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
        org.junit.Assert.assertEquals("'" + number5 + "' != '" + 0 + "'", number5, 0);
        org.junit.Assert.assertEquals("'" + number6 + "' != '" + 0 + "'", number6, 0);
        org.junit.Assert.assertEquals("'" + number7 + "' != '" + 0 + "'", number7, 0);
        org.junit.Assert.assertEquals("'" + number8 + "' != '" + 0 + "'", number8, 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #242
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #156
27: astore_1
28: aconst_null
29: astore_2
30: new           #8
33: dup
34: aload_2
35: invokespecial #9
38: astore_3
39: aload_3
40: invokevirtual #25
43: astore        4
45: new           #81
48: dup
49: aload_1
50: aload         4
52: checkcast     #79
55: invokespecial #82
58: astore        5
60: aload         5
62: invokevirtual #243
65: astore        6
67: aload         5
69: invokevirtual #243
72: astore        7
74: aload         5
76: invokevirtual #243
79: astore        8
81: aload         5
83: invokevirtual #243
86: astore        9
88: new           #83
91: dup
92: invokespecial #84
95: ldc           #85
97: invokevirtual #86
100: aload_1
101: invokevirtual #87
104: ldc           #88
106: invokevirtual #86
109: getstatic     #156
112: invokevirtual #87
115: ldc           #85
117: invokevirtual #86
120: invokevirtual #89
123: aload_1
124: getstatic     #156
127: invokevirtual #90
130: invokestatic  #91
133: aload         4
135: invokestatic  #20
138: new           #83
141: dup
142: invokespecial #84
145: ldc           #85
147: invokevirtual #86
150: aload         6
152: invokevirtual #87
155: ldc           #88
157: invokevirtual #86
160: iconst_0
161: invokevirtual #244
164: ldc           #85
166: invokevirtual #86
169: invokevirtual #89
172: aload         6
174: iconst_0
175: invokestatic  #135
178: invokestatic  #245
181: new           #83
184: dup
185: invokespecial #84
188: ldc           #85
190: invokevirtual #86
193: aload         7
195: invokevirtual #87
198: ldc           #88
200: invokevirtual #86
203: iconst_0
204: invokevirtual #244
207: ldc           #85
209: invokevirtual #86
212: invokevirtual #89
215: aload         7
217: iconst_0
218: invokestatic  #135
221: invokestatic  #245
224: new           #83
227: dup
228: invokespecial #84
231: ldc           #85
233: invokevirtual #86
236: aload         8
238: invokevirtual #87
241: ldc           #88
243: invokevirtual #86
246: iconst_0
247: invokevirtual #244
250: ldc           #85
252: invokevirtual #86
255: invokevirtual #89
258: aload         8
260: iconst_0
261: invokestatic  #135
264: invokestatic  #245
267: new           #83
270: dup
271: invokespecial #84
274: ldc           #85
276: invokevirtual #86
279: aload         9
281: invokevirtual #87
284: ldc           #88
286: invokevirtual #86
289: iconst_0
290: invokevirtual #244
293: ldc           #85
295: invokevirtual #86
298: invokevirtual #89
301: aload         9
303: iconst_0
304: invokestatic  #135
307: invokestatic  #245
310: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test098
Start line: 2272
End line: 2291
Method source code: 
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 1.0d, (java.lang.Number) (-1), false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer5 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter6 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer5);
        harmonicFitter6.addObservedPoint((double) 1.0f, (double) (short) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter6.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats4, (java.lang.Object[]) weightedObservedPointArray10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser12 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_64_BITS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #246
19: aastore
20: invokevirtual #7
23: pop
24: new           #28
27: dup
28: dconst_1
29: invokestatic  #247
32: iconst_m1
33: invokestatic  #135
36: iconst_0
37: invokespecial #160
40: astore_1
41: getstatic     #248
44: astore_2
45: aconst_null
46: astore_3
47: new           #8
50: dup
51: aload_3
52: invokespecial #9
55: astore        4
57: aload         4
59: dconst_1
60: ldc2_w        #32
63: invokevirtual #43
66: aload         4
68: invokevirtual #25
71: astore        5
73: new           #136
76: dup
77: aload_1
78: aload_2
79: aload         5
81: checkcast     #79
84: invokespecial #137
87: astore        6
89: new           #69
92: dup
93: aload         5
95: invokespecial #70
98: astore        7
100: ldc           #64
102: invokestatic  #18
105: goto          110
108: astore        7
110: new           #83
113: dup
114: invokespecial #84
117: ldc           #85
119: invokevirtual #86
122: aload_2
123: invokevirtual #87
126: ldc           #88
128: invokevirtual #86
131: getstatic     #248
134: invokevirtual #87
137: ldc           #85
139: invokevirtual #86
142: invokevirtual #89
145: aload_2
146: getstatic     #248
149: invokevirtual #90
152: invokestatic  #91
155: aload         5
157: invokestatic  #20
160: return
Exception table:
from    to  target type
89   105   108   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test099
Start line: 2294
End line: 2304
Method source code: 
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) '#', (double) 0L);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter1.getObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #249
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: dconst_1
37: ldc2_w        #32
40: invokevirtual #43
43: aload_2
44: dconst_0
45: ldc2_w        #34
48: invokevirtual #43
51: aload_2
52: ldc2_w        #14
55: dconst_0
56: invokevirtual #43
59: aload_2
60: invokevirtual #25
63: astore_3
64: aload_3
65: invokestatic  #20
68: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test100
Start line: 2307
End line: 2358
Method source code: 
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext11 = mathIllegalArgumentException4.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext12 = mathIllegalArgumentException4.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION;
        org.apache.commons.math3.exception.util.Localizable localizable14 = null;
        java.lang.Number number16 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException18 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number16, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats19 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer20 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter21 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer20);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray22 = harmonicFitter21.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray23 = harmonicFitter21.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray24 = harmonicFitter21.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException25 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException18, (org.apache.commons.math3.exception.util.Localizable) localizedFormats19, (java.lang.Object[]) weightedObservedPointArray24);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException26 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable14, (java.lang.Object[]) weightedObservedPointArray24);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException27 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException4, (org.apache.commons.math3.exception.util.Localizable) localizedFormats13, (java.lang.Object[]) weightedObservedPointArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser28 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext11);
        org.junit.Assert.assertNotNull(exceptionContext12);
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION));
        org.junit.Assert.assertTrue("'" + localizedFormats19 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats19.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray22);
        org.junit.Assert.assertNotNull(weightedObservedPointArray23);
        org.junit.Assert.assertNotNull(weightedObservedPointArray24);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #250
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #127
27: astore_1
28: getstatic     #128
31: astore_2
32: iconst_2
33: anewarray     #5
36: dup
37: iconst_0
38: aload_2
39: aastore
40: dup
41: iconst_1
42: lconst_1
43: invokestatic  #129
46: aastore
47: astore_3
48: new           #130
51: dup
52: aload_1
53: aload_3
54: invokespecial #131
57: astore        4
59: getstatic     #127
62: astore        5
64: getstatic     #128
67: astore        6
69: iconst_2
70: anewarray     #5
73: dup
74: iconst_0
75: aload         6
77: aastore
78: dup
79: iconst_1
80: lconst_1
81: invokestatic  #129
84: aastore
85: astore        7
87: new           #130
90: dup
91: aload         5
93: aload         7
95: invokespecial #131
98: astore        8
100: aload         4
102: aload         8
104: invokevirtual #132
107: aload         4
109: invokevirtual #165
112: astore        9
114: aload         4
116: invokevirtual #165
119: astore        10
121: getstatic     #251
124: astore        11
126: aconst_null
127: astore        12
129: aconst_null
130: astore        13
132: new           #28
135: dup
136: ldc2_w        #252
139: invokestatic  #129
142: aload         13
144: iconst_1
145: invokespecial #160
148: astore        14
150: getstatic     #254
153: astore        15
155: aconst_null
156: astore        16
158: new           #8
161: dup
162: aload         16
164: invokespecial #9
167: astore        17
169: aload         17
171: invokevirtual #25
174: astore        18
176: aload         17
178: invokevirtual #25
181: astore        19
183: aload         17
185: invokevirtual #25
188: astore        20
190: new           #136
193: dup
194: aload         14
196: aload         15
198: aload         20
200: checkcast     #79
203: invokespecial #137
206: astore        21
208: new           #130
211: dup
212: aload         12
214: aload         20
216: checkcast     #79
219: invokespecial #131
222: astore        22
224: new           #136
227: dup
228: aload         4
230: aload         11
232: aload         20
234: checkcast     #79
237: invokespecial #137
240: astore        23
242: new           #69
245: dup
246: aload         20
248: invokespecial #70
251: astore        24
253: ldc           #27
255: invokestatic  #18
258: goto          263
261: astore        24
263: new           #83
266: dup
267: invokespecial #84
270: ldc           #85
272: invokevirtual #86
275: aload_1
276: invokevirtual #87
279: ldc           #88
281: invokevirtual #86
284: getstatic     #127
287: invokevirtual #87
290: ldc           #85
292: invokevirtual #86
295: invokevirtual #89
298: aload_1
299: getstatic     #127
302: invokevirtual #90
305: invokestatic  #91
308: new           #83
311: dup
312: invokespecial #84
315: ldc           #85
317: invokevirtual #86
320: aload_2
321: invokevirtual #87
324: ldc           #88
326: invokevirtual #86
329: getstatic     #128
332: invokevirtual #87
335: ldc           #85
337: invokevirtual #86
340: invokevirtual #89
343: aload_2
344: getstatic     #128
347: invokevirtual #90
350: invokestatic  #91
353: aload_3
354: invokestatic  #20
357: aload_3
358: invokestatic  #92
361: ldc           #140
363: invokestatic  #23
366: aload_3
367: invokestatic  #93
370: ldc           #140
372: invokestatic  #23
375: new           #83
378: dup
379: invokespecial #84
382: ldc           #85
384: invokevirtual #86
387: aload         5
389: invokevirtual #87
392: ldc           #88
394: invokevirtual #86
397: getstatic     #127
400: invokevirtual #87
403: ldc           #85
405: invokevirtual #86
408: invokevirtual #89
411: aload         5
413: getstatic     #127
416: invokevirtual #90
419: invokestatic  #91
422: new           #83
425: dup
426: invokespecial #84
429: ldc           #85
431: invokevirtual #86
434: aload         6
436: invokevirtual #87
439: ldc           #88
441: invokevirtual #86
444: getstatic     #128
447: invokevirtual #87
450: ldc           #85
452: invokevirtual #86
455: invokevirtual #89
458: aload         6
460: getstatic     #128
463: invokevirtual #90
466: invokestatic  #91
469: aload         7
471: invokestatic  #20
474: aload         7
476: invokestatic  #92
479: ldc           #140
481: invokestatic  #23
484: aload         7
486: invokestatic  #93
489: ldc           #140
491: invokestatic  #23
494: aload         9
496: invokestatic  #20
499: aload         10
501: invokestatic  #20
504: new           #83
507: dup
508: invokespecial #84
511: ldc           #85
513: invokevirtual #86
516: aload         11
518: invokevirtual #87
521: ldc           #88
523: invokevirtual #86
526: getstatic     #251
529: invokevirtual #87
532: ldc           #85
534: invokevirtual #86
537: invokevirtual #89
540: aload         11
542: getstatic     #251
545: invokevirtual #90
548: invokestatic  #91
551: new           #83
554: dup
555: invokespecial #84
558: ldc           #85
560: invokevirtual #86
563: aload         15
565: invokevirtual #87
568: ldc           #88
570: invokevirtual #86
573: getstatic     #254
576: invokevirtual #87
579: ldc           #85
581: invokevirtual #86
584: invokevirtual #89
587: aload         15
589: getstatic     #254
592: invokevirtual #90
595: invokestatic  #91
598: aload         18
600: invokestatic  #20
603: aload         19
605: invokestatic  #20
608: aload         20
610: invokestatic  #20
613: return
Exception table:
from    to  target type
242   258   261   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test101
Start line: 2361
End line: 2382
Method source code: 
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter2.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser12 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 2 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #255
19: aastore
20: invokevirtual #7
23: pop
24: getstatic     #193
27: astore_1
28: aconst_null
29: astore_2
30: new           #8
33: dup
34: aload_2
35: invokespecial #9
38: astore_3
39: aload_3
40: dconst_1
41: ldc2_w        #32
44: invokevirtual #43
47: aload_3
48: dconst_0
49: ldc2_w        #34
52: invokevirtual #43
55: aload_3
56: invokevirtual #25
59: astore        4
61: aload_3
62: invokevirtual #25
65: astore        5
67: new           #130
70: dup
71: aload_1
72: aload         5
74: checkcast     #79
77: invokespecial #131
80: astore        6
82: new           #69
85: dup
86: aload         5
88: invokespecial #70
91: astore        7
93: ldc           #186
95: invokestatic  #18
98: goto          103
101: astore        7
103: new           #83
106: dup
107: invokespecial #84
110: ldc           #85
112: invokevirtual #86
115: aload_1
116: invokevirtual #87
119: ldc           #88
121: invokevirtual #86
124: getstatic     #193
127: invokevirtual #87
130: ldc           #85
132: invokevirtual #86
135: invokevirtual #89
138: aload_1
139: getstatic     #193
142: invokevirtual #90
145: invokestatic  #91
148: aload         4
150: invokestatic  #20
153: aload         5
155: invokestatic  #20
158: return
Exception table:
from    to  target type
82    98   101   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test102
Start line: 2385
End line: 2402
Method source code: 
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        double[] doubleArray5 = new double[] { (-1.0f), (short) 10 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray6 = harmonicFitter1.fit(doubleArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #256
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: iconst_2
42: newarray       double
44: dup
45: iconst_0
46: ldc2_w        #10
49: dastore
50: dup
51: iconst_1
52: ldc2_w        #32
55: dastore
56: astore        4
58: aload_2
59: aload         4
61: invokevirtual #16
64: astore        5
66: ldc           #17
68: invokestatic  #18
71: goto          76
74: astore        5
76: aload_3
77: invokestatic  #20
80: aload         4
82: invokestatic  #20
85: aload         4
87: invokestatic  #21
90: ldc_w         #257
93: invokestatic  #23
96: return
Exception table:
from    to  target type
58    71    74   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test103
Start line: 2405
End line: 2429
Method source code: 
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint13 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double14 = weightedObservedPoint13.getX();
        double double15 = weightedObservedPoint13.getY();
        double double16 = weightedObservedPoint13.getX();
        double double17 = weightedObservedPoint13.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint13);
        double double19 = weightedObservedPoint13.getWeight();
        double double20 = weightedObservedPoint13.getY();
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #258
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: new           #145
64: dup
65: ldc2_w        #14
68: ldc2_w        #12
71: ldc2_w        #12
74: invokespecial #146
77: astore        4
79: aload         4
81: invokevirtual #147
84: dstore        5
86: aload         4
88: invokevirtual #149
91: dstore        7
93: aload         4
95: invokevirtual #147
98: dstore        9
100: aload         4
102: invokevirtual #149
105: dstore        11
107: aload_2
108: aload         4
110: invokevirtual #123
113: aload         4
115: invokevirtual #148
118: dstore        13
120: aload         4
122: invokevirtual #149
125: dstore        15
127: aload_3
128: invokestatic  #20
131: new           #83
134: dup
135: invokespecial #84
138: ldc           #85
140: invokevirtual #86
143: dload         5
145: invokevirtual #150
148: ldc           #88
150: invokevirtual #86
153: ldc2_w        #12
156: invokevirtual #150
159: ldc           #85
161: invokevirtual #86
164: invokevirtual #89
167: dload         5
169: ldc2_w        #12
172: dcmpl
173: ifne          180
176: iconst_1
177: goto          181
180: iconst_0
181: invokestatic  #91
184: new           #83
187: dup
188: invokespecial #84
191: ldc           #85
193: invokevirtual #86
196: dload         7
198: invokevirtual #150
201: ldc           #88
203: invokevirtual #86
206: ldc2_w        #12
209: invokevirtual #150
212: ldc           #85
214: invokevirtual #86
217: invokevirtual #89
220: dload         7
222: ldc2_w        #12
225: dcmpl
226: ifne          233
229: iconst_1
230: goto          234
233: iconst_0
234: invokestatic  #91
237: new           #83
240: dup
241: invokespecial #84
244: ldc           #85
246: invokevirtual #86
249: dload         9
251: invokevirtual #150
254: ldc           #88
256: invokevirtual #86
259: ldc2_w        #12
262: invokevirtual #150
265: ldc           #85
267: invokevirtual #86
270: invokevirtual #89
273: dload         9
275: ldc2_w        #12
278: dcmpl
279: ifne          286
282: iconst_1
283: goto          287
286: iconst_0
287: invokestatic  #91
290: new           #83
293: dup
294: invokespecial #84
297: ldc           #85
299: invokevirtual #86
302: dload         11
304: invokevirtual #150
307: ldc           #88
309: invokevirtual #86
312: ldc2_w        #12
315: invokevirtual #150
318: ldc           #85
320: invokevirtual #86
323: invokevirtual #89
326: dload         11
328: ldc2_w        #12
331: dcmpl
332: ifne          339
335: iconst_1
336: goto          340
339: iconst_0
340: invokestatic  #91
343: new           #83
346: dup
347: invokespecial #84
350: ldc           #85
352: invokevirtual #86
355: dload         13
357: invokevirtual #150
360: ldc           #88
362: invokevirtual #86
365: ldc2_w        #14
368: invokevirtual #150
371: ldc           #85
373: invokevirtual #86
376: invokevirtual #89
379: dload         13
381: ldc2_w        #14
384: dcmpl
385: ifne          392
388: iconst_1
389: goto          393
392: iconst_0
393: invokestatic  #91
396: new           #83
399: dup
400: invokespecial #84
403: ldc           #85
405: invokevirtual #86
408: dload         15
410: invokevirtual #150
413: ldc           #88
415: invokevirtual #86
418: ldc2_w        #12
421: invokevirtual #150
424: ldc           #85
426: invokevirtual #86
429: invokevirtual #89
432: dload         15
434: ldc2_w        #12
437: dcmpl
438: ifne          445
441: iconst_1
442: goto          446
445: iconst_0
446: invokestatic  #91
449: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test104
Start line: 2432
End line: 2450
Method source code: 
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint13 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double14 = weightedObservedPoint13.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint13);
        double double16 = weightedObservedPoint13.getY();
        double double17 = weightedObservedPoint13.getWeight();
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #259
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: new           #145
64: dup
65: ldc2_w        #14
68: ldc2_w        #12
71: ldc2_w        #12
74: invokespecial #146
77: astore        4
79: aload         4
81: invokevirtual #147
84: dstore        5
86: aload_2
87: aload         4
89: invokevirtual #123
92: aload         4
94: invokevirtual #149
97: dstore        7
99: aload         4
101: invokevirtual #148
104: dstore        9
106: aload_3
107: invokestatic  #20
110: new           #83
113: dup
114: invokespecial #84
117: ldc           #85
119: invokevirtual #86
122: dload         5
124: invokevirtual #150
127: ldc           #88
129: invokevirtual #86
132: ldc2_w        #12
135: invokevirtual #150
138: ldc           #85
140: invokevirtual #86
143: invokevirtual #89
146: dload         5
148: ldc2_w        #12
151: dcmpl
152: ifne          159
155: iconst_1
156: goto          160
159: iconst_0
160: invokestatic  #91
163: new           #83
166: dup
167: invokespecial #84
170: ldc           #85
172: invokevirtual #86
175: dload         7
177: invokevirtual #150
180: ldc           #88
182: invokevirtual #86
185: ldc2_w        #12
188: invokevirtual #150
191: ldc           #85
193: invokevirtual #86
196: invokevirtual #89
199: dload         7
201: ldc2_w        #12
204: dcmpl
205: ifne          212
208: iconst_1
209: goto          213
212: iconst_0
213: invokestatic  #91
216: new           #83
219: dup
220: invokespecial #84
223: ldc           #85
225: invokevirtual #86
228: dload         9
230: invokevirtual #150
233: ldc           #88
235: invokevirtual #86
238: ldc2_w        #14
241: invokevirtual #150
244: ldc           #85
246: invokevirtual #86
249: invokevirtual #89
252: dload         9
254: ldc2_w        #14
257: dcmpl
258: ifne          265
261: iconst_1
262: goto          266
265: iconst_0
266: invokestatic  #91
269: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test105
Start line: 2453
End line: 2477
Method source code: 
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint17 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double18 = weightedObservedPoint17.getX();
        double double19 = weightedObservedPoint17.getY();
        double double20 = weightedObservedPoint17.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint17);
        double double22 = weightedObservedPoint17.getY();
        double double23 = weightedObservedPoint17.getY();
        double double24 = weightedObservedPoint17.getWeight();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #260
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: new           #145
76: dup
77: ldc2_w        #14
80: ldc2_w        #12
83: ldc2_w        #12
86: invokespecial #146
89: astore        4
91: aload         4
93: invokevirtual #147
96: dstore        5
98: aload         4
100: invokevirtual #149
103: dstore        7
105: aload         4
107: invokevirtual #149
110: dstore        9
112: aload_2
113: aload         4
115: invokevirtual #123
118: aload         4
120: invokevirtual #149
123: dstore        11
125: aload         4
127: invokevirtual #149
130: dstore        13
132: aload         4
134: invokevirtual #148
137: dstore        15
139: aload_3
140: invokestatic  #20
143: new           #83
146: dup
147: invokespecial #84
150: ldc           #85
152: invokevirtual #86
155: dload         5
157: invokevirtual #150
160: ldc           #88
162: invokevirtual #86
165: ldc2_w        #12
168: invokevirtual #150
171: ldc           #85
173: invokevirtual #86
176: invokevirtual #89
179: dload         5
181: ldc2_w        #12
184: dcmpl
185: ifne          192
188: iconst_1
189: goto          193
192: iconst_0
193: invokestatic  #91
196: new           #83
199: dup
200: invokespecial #84
203: ldc           #85
205: invokevirtual #86
208: dload         7
210: invokevirtual #150
213: ldc           #88
215: invokevirtual #86
218: ldc2_w        #12
221: invokevirtual #150
224: ldc           #85
226: invokevirtual #86
229: invokevirtual #89
232: dload         7
234: ldc2_w        #12
237: dcmpl
238: ifne          245
241: iconst_1
242: goto          246
245: iconst_0
246: invokestatic  #91
249: new           #83
252: dup
253: invokespecial #84
256: ldc           #85
258: invokevirtual #86
261: dload         9
263: invokevirtual #150
266: ldc           #88
268: invokevirtual #86
271: ldc2_w        #12
274: invokevirtual #150
277: ldc           #85
279: invokevirtual #86
282: invokevirtual #89
285: dload         9
287: ldc2_w        #12
290: dcmpl
291: ifne          298
294: iconst_1
295: goto          299
298: iconst_0
299: invokestatic  #91
302: new           #83
305: dup
306: invokespecial #84
309: ldc           #85
311: invokevirtual #86
314: dload         11
316: invokevirtual #150
319: ldc           #88
321: invokevirtual #86
324: ldc2_w        #12
327: invokevirtual #150
330: ldc           #85
332: invokevirtual #86
335: invokevirtual #89
338: dload         11
340: ldc2_w        #12
343: dcmpl
344: ifne          351
347: iconst_1
348: goto          352
351: iconst_0
352: invokestatic  #91
355: new           #83
358: dup
359: invokespecial #84
362: ldc           #85
364: invokevirtual #86
367: dload         13
369: invokevirtual #150
372: ldc           #88
374: invokevirtual #86
377: ldc2_w        #12
380: invokevirtual #150
383: ldc           #85
385: invokevirtual #86
388: invokevirtual #89
391: dload         13
393: ldc2_w        #12
396: dcmpl
397: ifne          404
400: iconst_1
401: goto          405
404: iconst_0
405: invokestatic  #91
408: new           #83
411: dup
412: invokespecial #84
415: ldc           #85
417: invokevirtual #86
420: dload         15
422: invokevirtual #150
425: ldc           #88
427: invokevirtual #86
430: ldc2_w        #14
433: invokevirtual #150
436: ldc           #85
438: invokevirtual #86
441: invokevirtual #89
444: dload         15
446: ldc2_w        #14
449: dcmpl
450: ifne          457
453: iconst_1
454: goto          458
457: iconst_0
458: invokestatic  #91
461: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test106
Start line: 2480
End line: 2512
Method source code: 
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.addObservedPoint((double) 0, (double) (short) 100, (double) (short) 0);
        harmonicFitter1.addObservedPoint((double) 10.0f, (double) (-1), (double) 10);
        double[] doubleArray24 = new double[] { (-1.0f), 1L };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray25 = harmonicFitter1.fit(doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #261
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: dconst_0
105: ldc2_w        #34
108: dconst_0
109: invokevirtual #54
112: aload_2
113: ldc2_w        #32
116: ldc2_w        #10
119: ldc2_w        #32
122: invokevirtual #54
125: iconst_2
126: newarray       double
128: dup
129: iconst_0
130: ldc2_w        #10
133: dastore
134: dup
135: iconst_1
136: dconst_1
137: dastore
138: astore        14
140: aload_2
141: aload         14
143: invokevirtual #16
146: astore        15
148: ldc           #17
150: invokestatic  #18
153: goto          158
156: astore        15
158: aload_3
159: invokestatic  #20
162: aload         4
164: invokestatic  #20
167: new           #83
170: dup
171: invokespecial #84
174: ldc           #85
176: invokevirtual #86
179: dload         6
181: invokevirtual #150
184: ldc           #88
186: invokevirtual #86
189: ldc2_w        #12
192: invokevirtual #150
195: ldc           #85
197: invokevirtual #86
200: invokevirtual #89
203: dload         6
205: ldc2_w        #12
208: dcmpl
209: ifne          216
212: iconst_1
213: goto          217
216: iconst_0
217: invokestatic  #91
220: new           #83
223: dup
224: invokespecial #84
227: ldc           #85
229: invokevirtual #86
232: dload         8
234: invokevirtual #150
237: ldc           #88
239: invokevirtual #86
242: ldc2_w        #14
245: invokevirtual #150
248: ldc           #85
250: invokevirtual #86
253: invokevirtual #89
256: dload         8
258: ldc2_w        #14
261: dcmpl
262: ifne          269
265: iconst_1
266: goto          270
269: iconst_0
270: invokestatic  #91
273: new           #83
276: dup
277: invokespecial #84
280: ldc           #85
282: invokevirtual #86
285: dload         10
287: invokevirtual #150
290: ldc           #88
292: invokevirtual #86
295: ldc2_w        #14
298: invokevirtual #150
301: ldc           #85
303: invokevirtual #86
306: invokevirtual #89
309: dload         10
311: ldc2_w        #14
314: dcmpl
315: ifne          322
318: iconst_1
319: goto          323
322: iconst_0
323: invokestatic  #91
326: new           #83
329: dup
330: invokespecial #84
333: ldc           #85
335: invokevirtual #86
338: dload         12
340: invokevirtual #150
343: ldc           #88
345: invokevirtual #86
348: ldc2_w        #12
351: invokevirtual #150
354: ldc           #85
356: invokevirtual #86
359: invokevirtual #89
362: dload         12
364: ldc2_w        #12
367: dcmpl
368: ifne          375
371: iconst_1
372: goto          376
375: iconst_0
376: invokestatic  #91
379: aload         14
381: invokestatic  #20
384: aload         14
386: invokestatic  #21
389: ldc_w         #262
392: invokestatic  #23
395: return
Exception table:
from    to  target type
140   153   156   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test107
Start line: 2515
End line: 2549
Method source code: 
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer9 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter10 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer9);
        harmonicFitter10.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter10.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter10.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint24 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double25 = weightedObservedPoint24.getX();
        double double26 = weightedObservedPoint24.getY();
        double double27 = weightedObservedPoint24.getX();
        double double28 = weightedObservedPoint24.getY();
        double double29 = weightedObservedPoint24.getX();
        double double30 = weightedObservedPoint24.getX();
        harmonicFitter10.addObservedPoint(weightedObservedPoint24);
        double double32 = weightedObservedPoint24.getWeight();
        double double33 = weightedObservedPoint24.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint24);
        double double35 = weightedObservedPoint24.getWeight();
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #263
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aconst_null
57: astore_3
58: new           #8
61: dup
62: aload_3
63: invokespecial #9
66: astore        4
68: aload         4
70: dconst_1
71: ldc2_w        #32
74: invokevirtual #43
77: aload         4
79: dconst_0
80: ldc2_w        #34
83: invokevirtual #43
86: aload         4
88: dconst_0
89: ldc2_w        #12
92: ldc2_w        #10
95: invokevirtual #54
98: new           #145
101: dup
102: ldc2_w        #14
105: ldc2_w        #12
108: ldc2_w        #12
111: invokespecial #146
114: astore        5
116: aload         5
118: invokevirtual #147
121: dstore        6
123: aload         5
125: invokevirtual #149
128: dstore        8
130: aload         5
132: invokevirtual #147
135: dstore        10
137: aload         5
139: invokevirtual #149
142: dstore        12
144: aload         5
146: invokevirtual #147
149: dstore        14
151: aload         5
153: invokevirtual #147
156: dstore        16
158: aload         4
160: aload         5
162: invokevirtual #123
165: aload         5
167: invokevirtual #148
170: dstore        18
172: aload         5
174: invokevirtual #147
177: dstore        20
179: aload_2
180: aload         5
182: invokevirtual #123
185: aload         5
187: invokevirtual #148
190: dstore        22
192: new           #83
195: dup
196: invokespecial #84
199: ldc           #85
201: invokevirtual #86
204: dload         6
206: invokevirtual #150
209: ldc           #88
211: invokevirtual #86
214: ldc2_w        #12
217: invokevirtual #150
220: ldc           #85
222: invokevirtual #86
225: invokevirtual #89
228: dload         6
230: ldc2_w        #12
233: dcmpl
234: ifne          241
237: iconst_1
238: goto          242
241: iconst_0
242: invokestatic  #91
245: new           #83
248: dup
249: invokespecial #84
252: ldc           #85
254: invokevirtual #86
257: dload         8
259: invokevirtual #150
262: ldc           #88
264: invokevirtual #86
267: ldc2_w        #12
270: invokevirtual #150
273: ldc           #85
275: invokevirtual #86
278: invokevirtual #89
281: dload         8
283: ldc2_w        #12
286: dcmpl
287: ifne          294
290: iconst_1
291: goto          295
294: iconst_0
295: invokestatic  #91
298: new           #83
301: dup
302: invokespecial #84
305: ldc           #85
307: invokevirtual #86
310: dload         10
312: invokevirtual #150
315: ldc           #88
317: invokevirtual #86
320: ldc2_w        #12
323: invokevirtual #150
326: ldc           #85
328: invokevirtual #86
331: invokevirtual #89
334: dload         10
336: ldc2_w        #12
339: dcmpl
340: ifne          347
343: iconst_1
344: goto          348
347: iconst_0
348: invokestatic  #91
351: new           #83
354: dup
355: invokespecial #84
358: ldc           #85
360: invokevirtual #86
363: dload         12
365: invokevirtual #150
368: ldc           #88
370: invokevirtual #86
373: ldc2_w        #12
376: invokevirtual #150
379: ldc           #85
381: invokevirtual #86
384: invokevirtual #89
387: dload         12
389: ldc2_w        #12
392: dcmpl
393: ifne          400
396: iconst_1
397: goto          401
400: iconst_0
401: invokestatic  #91
404: new           #83
407: dup
408: invokespecial #84
411: ldc           #85
413: invokevirtual #86
416: dload         14
418: invokevirtual #150
421: ldc           #88
423: invokevirtual #86
426: ldc2_w        #12
429: invokevirtual #150
432: ldc           #85
434: invokevirtual #86
437: invokevirtual #89
440: dload         14
442: ldc2_w        #12
445: dcmpl
446: ifne          453
449: iconst_1
450: goto          454
453: iconst_0
454: invokestatic  #91
457: new           #83
460: dup
461: invokespecial #84
464: ldc           #85
466: invokevirtual #86
469: dload         16
471: invokevirtual #150
474: ldc           #88
476: invokevirtual #86
479: ldc2_w        #12
482: invokevirtual #150
485: ldc           #85
487: invokevirtual #86
490: invokevirtual #89
493: dload         16
495: ldc2_w        #12
498: dcmpl
499: ifne          506
502: iconst_1
503: goto          507
506: iconst_0
507: invokestatic  #91
510: new           #83
513: dup
514: invokespecial #84
517: ldc           #85
519: invokevirtual #86
522: dload         18
524: invokevirtual #150
527: ldc           #88
529: invokevirtual #86
532: ldc2_w        #14
535: invokevirtual #150
538: ldc           #85
540: invokevirtual #86
543: invokevirtual #89
546: dload         18
548: ldc2_w        #14
551: dcmpl
552: ifne          559
555: iconst_1
556: goto          560
559: iconst_0
560: invokestatic  #91
563: new           #83
566: dup
567: invokespecial #84
570: ldc           #85
572: invokevirtual #86
575: dload         20
577: invokevirtual #150
580: ldc           #88
582: invokevirtual #86
585: ldc2_w        #12
588: invokevirtual #150
591: ldc           #85
593: invokevirtual #86
596: invokevirtual #89
599: dload         20
601: ldc2_w        #12
604: dcmpl
605: ifne          612
608: iconst_1
609: goto          613
612: iconst_0
613: invokestatic  #91
616: new           #83
619: dup
620: invokespecial #84
623: ldc           #85
625: invokevirtual #86
628: dload         22
630: invokevirtual #150
633: ldc           #88
635: invokevirtual #86
638: ldc2_w        #14
641: invokevirtual #150
644: ldc           #85
646: invokevirtual #86
649: invokevirtual #89
652: dload         22
654: ldc2_w        #14
657: dcmpl
658: ifne          665
661: iconst_1
662: goto          666
665: iconst_0
666: invokestatic  #91
669: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test108
Start line: 2552
End line: 2572
Method source code: 
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric10 = null;
        double[] doubleArray17 = new double[] { 0.0d, (short) 1, 10.0f, 10, 100, 52.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = harmonicFitter1.fit(parametric10, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 1.0, 10.0, 10.0, 100.0, 52.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #264
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aconst_null
63: astore        4
65: bipush        6
67: newarray       double
69: dup
70: iconst_0
71: dconst_0
72: dastore
73: dup
74: iconst_1
75: dconst_1
76: dastore
77: dup
78: iconst_2
79: ldc2_w        #32
82: dastore
83: dup
84: iconst_3
85: ldc2_w        #32
88: dastore
89: dup
90: iconst_4
91: ldc2_w        #34
94: dastore
95: dup
96: iconst_5
97: ldc2_w        #12
100: dastore
101: astore        5
103: aload_2
104: aload         4
106: aload         5
108: invokevirtual #30
111: astore        6
113: ldc           #17
115: invokestatic  #18
118: goto          123
121: astore        6
123: aload_3
124: invokestatic  #20
127: aload         5
129: invokestatic  #20
132: aload         5
134: invokestatic  #21
137: ldc_w         #265
140: invokestatic  #23
143: return
Exception table:
from    to  target type
103   118   121   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test109
Start line: 2575
End line: 2604
Method source code: 
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint13 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double14 = weightedObservedPoint13.getX();
        double double15 = weightedObservedPoint13.getY();
        double double16 = weightedObservedPoint13.getX();
        double double17 = weightedObservedPoint13.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint13);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray19 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser20 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray19);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #266
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: new           #145
64: dup
65: ldc2_w        #14
68: ldc2_w        #12
71: ldc2_w        #12
74: invokespecial #146
77: astore        4
79: aload         4
81: invokevirtual #147
84: dstore        5
86: aload         4
88: invokevirtual #149
91: dstore        7
93: aload         4
95: invokevirtual #147
98: dstore        9
100: aload         4
102: invokevirtual #149
105: dstore        11
107: aload_2
108: aload         4
110: invokevirtual #123
113: aload_2
114: invokevirtual #25
117: astore        13
119: new           #69
122: dup
123: aload         13
125: invokespecial #70
128: astore        14
130: ldc           #64
132: invokestatic  #18
135: goto          140
138: astore        14
140: aload_3
141: invokestatic  #20
144: new           #83
147: dup
148: invokespecial #84
151: ldc           #85
153: invokevirtual #86
156: dload         5
158: invokevirtual #150
161: ldc           #88
163: invokevirtual #86
166: ldc2_w        #12
169: invokevirtual #150
172: ldc           #85
174: invokevirtual #86
177: invokevirtual #89
180: dload         5
182: ldc2_w        #12
185: dcmpl
186: ifne          193
189: iconst_1
190: goto          194
193: iconst_0
194: invokestatic  #91
197: new           #83
200: dup
201: invokespecial #84
204: ldc           #85
206: invokevirtual #86
209: dload         7
211: invokevirtual #150
214: ldc           #88
216: invokevirtual #86
219: ldc2_w        #12
222: invokevirtual #150
225: ldc           #85
227: invokevirtual #86
230: invokevirtual #89
233: dload         7
235: ldc2_w        #12
238: dcmpl
239: ifne          246
242: iconst_1
243: goto          247
246: iconst_0
247: invokestatic  #91
250: new           #83
253: dup
254: invokespecial #84
257: ldc           #85
259: invokevirtual #86
262: dload         9
264: invokevirtual #150
267: ldc           #88
269: invokevirtual #86
272: ldc2_w        #12
275: invokevirtual #150
278: ldc           #85
280: invokevirtual #86
283: invokevirtual #89
286: dload         9
288: ldc2_w        #12
291: dcmpl
292: ifne          299
295: iconst_1
296: goto          300
299: iconst_0
300: invokestatic  #91
303: new           #83
306: dup
307: invokespecial #84
310: ldc           #85
312: invokevirtual #86
315: dload         11
317: invokevirtual #150
320: ldc           #88
322: invokevirtual #86
325: ldc2_w        #12
328: invokevirtual #150
331: ldc           #85
333: invokevirtual #86
336: invokevirtual #89
339: dload         11
341: ldc2_w        #12
344: dcmpl
345: ifne          352
348: iconst_1
349: goto          353
352: iconst_0
353: invokestatic  #91
356: aload         13
358: invokestatic  #20
361: return
Exception table:
from    to  target type
119   135   138   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test110
Start line: 2607
End line: 2650
Method source code: 
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint17 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double18 = weightedObservedPoint17.getX();
        double double19 = weightedObservedPoint17.getY();
        double double20 = weightedObservedPoint17.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint17);
        harmonicFitter1.addObservedPoint(0.0d, (double) 'a', (double) (-1L));
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer26 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter27 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer26);
        harmonicFitter27.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter27.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter27.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray35 = harmonicFitter27.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint39 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double40 = weightedObservedPoint39.getX();
        harmonicFitter27.addObservedPoint(weightedObservedPoint39);
        double double42 = weightedObservedPoint39.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint39);
        double[] doubleArray48 = new double[] { (byte) -1, (short) 10, (byte) 100, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray49 = harmonicFitter1.fit(doubleArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray35);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 10.0, 100.0, 0.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #267
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: new           #145
76: dup
77: ldc2_w        #14
80: ldc2_w        #12
83: ldc2_w        #12
86: invokespecial #146
89: astore        4
91: aload         4
93: invokevirtual #147
96: dstore        5
98: aload         4
100: invokevirtual #149
103: dstore        7
105: aload         4
107: invokevirtual #149
110: dstore        9
112: aload_2
113: aload         4
115: invokevirtual #123
118: aload_2
119: dconst_0
120: ldc2_w        #44
123: ldc2_w        #10
126: invokevirtual #54
129: aconst_null
130: astore        11
132: new           #8
135: dup
136: aload         11
138: invokespecial #9
141: astore        12
143: aload         12
145: dconst_1
146: ldc2_w        #32
149: invokevirtual #43
152: aload         12
154: dconst_0
155: ldc2_w        #34
158: invokevirtual #43
161: aload         12
163: invokevirtual #59
166: aload         12
168: invokevirtual #25
171: astore        13
173: new           #145
176: dup
177: ldc2_w        #14
180: ldc2_w        #12
183: ldc2_w        #12
186: invokespecial #146
189: astore        14
191: aload         14
193: invokevirtual #147
196: dstore        15
198: aload         12
200: aload         14
202: invokevirtual #123
205: aload         14
207: invokevirtual #149
210: dstore        17
212: aload_2
213: aload         14
215: invokevirtual #123
218: iconst_4
219: newarray       double
221: dup
222: iconst_0
223: ldc2_w        #10
226: dastore
227: dup
228: iconst_1
229: ldc2_w        #32
232: dastore
233: dup
234: iconst_2
235: ldc2_w        #34
238: dastore
239: dup
240: iconst_3
241: dconst_0
242: dastore
243: astore        19
245: aload_2
246: aload         19
248: invokevirtual #16
251: astore        20
253: ldc           #17
255: invokestatic  #18
258: goto          263
261: astore        20
263: aload_3
264: invokestatic  #20
267: new           #83
270: dup
271: invokespecial #84
274: ldc           #85
276: invokevirtual #86
279: dload         5
281: invokevirtual #150
284: ldc           #88
286: invokevirtual #86
289: ldc2_w        #12
292: invokevirtual #150
295: ldc           #85
297: invokevirtual #86
300: invokevirtual #89
303: dload         5
305: ldc2_w        #12
308: dcmpl
309: ifne          316
312: iconst_1
313: goto          317
316: iconst_0
317: invokestatic  #91
320: new           #83
323: dup
324: invokespecial #84
327: ldc           #85
329: invokevirtual #86
332: dload         7
334: invokevirtual #150
337: ldc           #88
339: invokevirtual #86
342: ldc2_w        #12
345: invokevirtual #150
348: ldc           #85
350: invokevirtual #86
353: invokevirtual #89
356: dload         7
358: ldc2_w        #12
361: dcmpl
362: ifne          369
365: iconst_1
366: goto          370
369: iconst_0
370: invokestatic  #91
373: new           #83
376: dup
377: invokespecial #84
380: ldc           #85
382: invokevirtual #86
385: dload         9
387: invokevirtual #150
390: ldc           #88
392: invokevirtual #86
395: ldc2_w        #12
398: invokevirtual #150
401: ldc           #85
403: invokevirtual #86
406: invokevirtual #89
409: dload         9
411: ldc2_w        #12
414: dcmpl
415: ifne          422
418: iconst_1
419: goto          423
422: iconst_0
423: invokestatic  #91
426: aload         13
428: invokestatic  #20
431: new           #83
434: dup
435: invokespecial #84
438: ldc           #85
440: invokevirtual #86
443: dload         15
445: invokevirtual #150
448: ldc           #88
450: invokevirtual #86
453: ldc2_w        #12
456: invokevirtual #150
459: ldc           #85
461: invokevirtual #86
464: invokevirtual #89
467: dload         15
469: ldc2_w        #12
472: dcmpl
473: ifne          480
476: iconst_1
477: goto          481
480: iconst_0
481: invokestatic  #91
484: new           #83
487: dup
488: invokespecial #84
491: ldc           #85
493: invokevirtual #86
496: dload         17
498: invokevirtual #150
501: ldc           #88
503: invokevirtual #86
506: ldc2_w        #12
509: invokevirtual #150
512: ldc           #85
514: invokevirtual #86
517: invokevirtual #89
520: dload         17
522: ldc2_w        #12
525: dcmpl
526: ifne          533
529: iconst_1
530: goto          534
533: iconst_0
534: invokestatic  #91
537: aload         19
539: invokestatic  #20
542: aload         19
544: invokestatic  #21
547: ldc_w         #268
550: invokestatic  #23
553: return
Exception table:
from    to  target type
245   258   261   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test111
Start line: 2653
End line: 2724
Method source code: 
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.INDEX;
        java.lang.Number number4 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException6 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number4, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException9 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException6, (org.apache.commons.math3.exception.util.Localizable) localizedFormats7, objArray8);
        boolean boolean10 = numberIsTooSmallException6.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext11 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException6);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray15 = new java.lang.Object[] { localizedFormats13, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException16 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats12, objArray15);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats18 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray20 = new java.lang.Object[] { localizedFormats18, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException21 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats17, objArray20);
        mathIllegalArgumentException16.addSuppressed((java.lang.Throwable) mathIllegalArgumentException21);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext23 = mathIllegalArgumentException16.getContext();
        java.lang.Object obj25 = exceptionContext23.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats26 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer27 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter28 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer27);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray29 = harmonicFitter28.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray30 = harmonicFitter28.getObservations();
        exceptionContext23.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats26, (java.lang.Object[]) weightedObservedPointArray30);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats32 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer33 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter34 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer33);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray35 = harmonicFitter34.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException36 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats32, (java.lang.Object[]) weightedObservedPointArray35);
        exceptionContext11.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats26, (java.lang.Object[]) weightedObservedPointArray35);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException38 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats2, (java.lang.Object[]) weightedObservedPointArray35);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException39 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) weightedObservedPointArray35);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException40 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser41 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray35);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INDEX + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats18 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats18.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + localizedFormats26 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats26.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray29);
        org.junit.Assert.assertNotNull(weightedObservedPointArray30);
        org.junit.Assert.assertTrue("'" + localizedFormats32 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats32.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray35);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #269
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #270
28: astore_1
29: getstatic     #230
32: astore_2
33: getstatic     #231
36: astore_3
37: aconst_null
38: astore        4
40: new           #28
43: dup
44: bipush        100
46: invokestatic  #159
49: aload         4
51: iconst_0
52: invokespecial #160
55: astore        5
57: getstatic     #161
60: astore        6
62: iconst_0
63: anewarray     #5
66: astore        7
68: new           #136
71: dup
72: aload         5
74: aload         6
76: aload         7
78: invokespecial #137
81: astore        8
83: aload         5
85: invokevirtual #162
88: istore        9
90: new           #163
93: dup
94: aload         5
96: invokespecial #164
99: astore        10
101: getstatic     #127
104: astore        11
106: getstatic     #128
109: astore        12
111: iconst_2
112: anewarray     #5
115: dup
116: iconst_0
117: aload         12
119: aastore
120: dup
121: iconst_1
122: lconst_1
123: invokestatic  #129
126: aastore
127: astore        13
129: new           #130
132: dup
133: aload         11
135: aload         13
137: invokespecial #131
140: astore        14
142: getstatic     #127
145: astore        15
147: getstatic     #128
150: astore        16
152: iconst_2
153: anewarray     #5
156: dup
157: iconst_0
158: aload         16
160: aastore
161: dup
162: iconst_1
163: lconst_1
164: invokestatic  #129
167: aastore
168: astore        17
170: new           #130
173: dup
174: aload         15
176: aload         17
178: invokespecial #131
181: astore        18
183: aload         14
185: aload         18
187: invokevirtual #132
190: aload         14
192: invokevirtual #165
195: astore        19
197: aload         19
199: ldc           #166
201: invokevirtual #167
204: astore        20
206: getstatic     #168
209: astore        21
211: aconst_null
212: astore        22
214: new           #8
217: dup
218: aload         22
220: invokespecial #9
223: astore        23
225: aload         23
227: invokevirtual #25
230: astore        24
232: aload         23
234: invokevirtual #25
237: astore        25
239: aload         19
241: aload         21
243: aload         25
245: checkcast     #79
248: invokevirtual #169
251: getstatic     #156
254: astore        26
256: aconst_null
257: astore        27
259: new           #8
262: dup
263: aload         27
265: invokespecial #9
268: astore        28
270: aload         28
272: invokevirtual #25
275: astore        29
277: new           #81
280: dup
281: aload         26
283: aload         29
285: checkcast     #79
288: invokespecial #82
291: astore        30
293: aload         10
295: aload         21
297: aload         29
299: checkcast     #79
302: invokevirtual #169
305: new           #130
308: dup
309: aload_3
310: aload         29
312: checkcast     #79
315: invokespecial #131
318: astore        31
320: new           #130
323: dup
324: aload_2
325: aload         29
327: checkcast     #79
330: invokespecial #131
333: astore        32
335: new           #130
338: dup
339: aload_1
340: aload         29
342: checkcast     #79
345: invokespecial #131
348: astore        33
350: new           #69
353: dup
354: aload         29
356: invokespecial #70
359: astore        34
361: ldc           #27
363: invokestatic  #18
366: goto          371
369: astore        34
371: new           #83
374: dup
375: invokespecial #84
378: ldc           #85
380: invokevirtual #86
383: aload_1
384: invokevirtual #87
387: ldc           #88
389: invokevirtual #86
392: getstatic     #270
395: invokevirtual #87
398: ldc           #85
400: invokevirtual #86
403: invokevirtual #89
406: aload_1
407: getstatic     #270
410: invokevirtual #90
413: invokestatic  #91
416: new           #83
419: dup
420: invokespecial #84
423: ldc           #85
425: invokevirtual #86
428: aload_2
429: invokevirtual #87
432: ldc           #88
434: invokevirtual #86
437: getstatic     #230
440: invokevirtual #87
443: ldc           #85
445: invokevirtual #86
448: invokevirtual #89
451: aload_2
452: getstatic     #230
455: invokevirtual #90
458: invokestatic  #91
461: new           #83
464: dup
465: invokespecial #84
468: ldc           #85
470: invokevirtual #86
473: aload_3
474: invokevirtual #87
477: ldc           #88
479: invokevirtual #86
482: getstatic     #231
485: invokevirtual #87
488: ldc           #85
490: invokevirtual #86
493: invokevirtual #89
496: aload_3
497: getstatic     #231
500: invokevirtual #90
503: invokestatic  #91
506: new           #83
509: dup
510: invokespecial #84
513: ldc           #85
515: invokevirtual #86
518: aload         6
520: invokevirtual #87
523: ldc           #88
525: invokevirtual #86
528: getstatic     #161
531: invokevirtual #87
534: ldc           #85
536: invokevirtual #86
539: invokevirtual #89
542: aload         6
544: getstatic     #161
547: invokevirtual #90
550: invokestatic  #91
553: aload         7
555: invokestatic  #20
558: aload         7
560: invokestatic  #92
563: ldc           #74
565: invokestatic  #23
568: aload         7
570: invokestatic  #93
573: ldc           #74
575: invokestatic  #23
578: new           #83
581: dup
582: invokespecial #84
585: ldc           #85
587: invokevirtual #86
590: iload         9
592: invokevirtual #170
595: ldc           #88
597: invokevirtual #86
600: iconst_0
601: invokevirtual #170
604: ldc           #85
606: invokevirtual #86
609: invokevirtual #89
612: iload         9
614: ifne          621
617: iconst_1
618: goto          622
621: iconst_0
622: invokestatic  #91
625: new           #83
628: dup
629: invokespecial #84
632: ldc           #85
634: invokevirtual #86
637: aload         11
639: invokevirtual #87
642: ldc           #88
644: invokevirtual #86
647: getstatic     #127
650: invokevirtual #87
653: ldc           #85
655: invokevirtual #86
658: invokevirtual #89
661: aload         11
663: getstatic     #127
666: invokevirtual #90
669: invokestatic  #91
672: new           #83
675: dup
676: invokespecial #84
679: ldc           #85
681: invokevirtual #86
684: aload         12
686: invokevirtual #87
689: ldc           #88
691: invokevirtual #86
694: getstatic     #128
697: invokevirtual #87
700: ldc           #85
702: invokevirtual #86
705: invokevirtual #89
708: aload         12
710: getstatic     #128
713: invokevirtual #90
716: invokestatic  #91
719: aload         13
721: invokestatic  #20
724: aload         13
726: invokestatic  #92
729: ldc           #140
731: invokestatic  #23
734: aload         13
736: invokestatic  #93
739: ldc           #140
741: invokestatic  #23
744: new           #83
747: dup
748: invokespecial #84
751: ldc           #85
753: invokevirtual #86
756: aload         15
758: invokevirtual #87
761: ldc           #88
763: invokevirtual #86
766: getstatic     #127
769: invokevirtual #87
772: ldc           #85
774: invokevirtual #86
777: invokevirtual #89
780: aload         15
782: getstatic     #127
785: invokevirtual #90
788: invokestatic  #91
791: new           #83
794: dup
795: invokespecial #84
798: ldc           #85
800: invokevirtual #86
803: aload         16
805: invokevirtual #87
808: ldc           #88
810: invokevirtual #86
813: getstatic     #128
816: invokevirtual #87
819: ldc           #85
821: invokevirtual #86
824: invokevirtual #89
827: aload         16
829: getstatic     #128
832: invokevirtual #90
835: invokestatic  #91
838: aload         17
840: invokestatic  #20
843: aload         17
845: invokestatic  #92
848: ldc           #140
850: invokestatic  #23
853: aload         17
855: invokestatic  #93
858: ldc           #140
860: invokestatic  #23
863: aload         19
865: invokestatic  #20
868: aload         20
870: invokestatic  #171
873: new           #83
876: dup
877: invokespecial #84
880: ldc           #85
882: invokevirtual #86
885: aload         21
887: invokevirtual #87
890: ldc           #88
892: invokevirtual #86
895: getstatic     #168
898: invokevirtual #87
901: ldc           #85
903: invokevirtual #86
906: invokevirtual #89
909: aload         21
911: getstatic     #168
914: invokevirtual #90
917: invokestatic  #91
920: aload         24
922: invokestatic  #20
925: aload         25
927: invokestatic  #20
930: new           #83
933: dup
934: invokespecial #84
937: ldc           #85
939: invokevirtual #86
942: aload         26
944: invokevirtual #87
947: ldc           #88
949: invokevirtual #86
952: getstatic     #156
955: invokevirtual #87
958: ldc           #85
960: invokevirtual #86
963: invokevirtual #89
966: aload         26
968: getstatic     #156
971: invokevirtual #90
974: invokestatic  #91
977: aload         29
979: invokestatic  #20
982: return
Exception table:
from    to  target type
350   366   369   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test112
Start line: 2727
End line: 2751
Method source code: 
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.addObservedPoint((double) (-1), (double) (byte) 1);
        harmonicFitter1.addObservedPoint((double) 10L, 52.0d);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric21 = null;
        double[] doubleArray27 = new double[] { (byte) -1, 1, 100.0d, 1L, (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray28 = harmonicFitter1.fit((-1), parametric21, doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 100.0, 1.0, 0.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #271
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload_2
78: ldc2_w        #10
81: dconst_1
82: invokevirtual #43
85: aload_2
86: ldc2_w        #32
89: ldc2_w        #12
92: invokevirtual #43
95: aconst_null
96: astore        5
98: iconst_5
99: newarray       double
101: dup
102: iconst_0
103: ldc2_w        #10
106: dastore
107: dup
108: iconst_1
109: dconst_1
110: dastore
111: dup
112: iconst_2
113: ldc2_w        #34
116: dastore
117: dup
118: iconst_3
119: dconst_1
120: dastore
121: dup
122: iconst_4
123: dconst_0
124: dastore
125: astore        6
127: aload_2
128: iconst_m1
129: aload         5
131: aload         6
133: invokevirtual #40
136: astore        7
138: ldc           #17
140: invokestatic  #18
143: goto          148
146: astore        7
148: aload_3
149: invokestatic  #20
152: aload         6
154: invokestatic  #20
157: aload         6
159: invokestatic  #21
162: ldc_w         #272
165: invokestatic  #23
168: return
Exception table:
from    to  target type
127   143   146   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test113
Start line: 2754
End line: 2775
Method source code: 
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint13 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double14 = weightedObservedPoint13.getWeight();
        double double15 = weightedObservedPoint13.getX();
        double double16 = weightedObservedPoint13.getWeight();
        double double17 = weightedObservedPoint13.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint13);
        double double19 = weightedObservedPoint13.getY();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #273
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: new           #145
65: dup
66: ldc2_w        #14
69: ldc2_w        #12
72: ldc2_w        #12
75: invokespecial #146
78: astore        4
80: aload         4
82: invokevirtual #148
85: dstore        5
87: aload         4
89: invokevirtual #147
92: dstore        7
94: aload         4
96: invokevirtual #148
99: dstore        9
101: aload         4
103: invokevirtual #148
106: dstore        11
108: aload_2
109: aload         4
111: invokevirtual #123
114: aload         4
116: invokevirtual #149
119: dstore        13
121: aload_3
122: invokestatic  #20
125: new           #83
128: dup
129: invokespecial #84
132: ldc           #85
134: invokevirtual #86
137: dload         5
139: invokevirtual #150
142: ldc           #88
144: invokevirtual #86
147: ldc2_w        #14
150: invokevirtual #150
153: ldc           #85
155: invokevirtual #86
158: invokevirtual #89
161: dload         5
163: ldc2_w        #14
166: dcmpl
167: ifne          174
170: iconst_1
171: goto          175
174: iconst_0
175: invokestatic  #91
178: new           #83
181: dup
182: invokespecial #84
185: ldc           #85
187: invokevirtual #86
190: dload         7
192: invokevirtual #150
195: ldc           #88
197: invokevirtual #86
200: ldc2_w        #12
203: invokevirtual #150
206: ldc           #85
208: invokevirtual #86
211: invokevirtual #89
214: dload         7
216: ldc2_w        #12
219: dcmpl
220: ifne          227
223: iconst_1
224: goto          228
227: iconst_0
228: invokestatic  #91
231: new           #83
234: dup
235: invokespecial #84
238: ldc           #85
240: invokevirtual #86
243: dload         9
245: invokevirtual #150
248: ldc           #88
250: invokevirtual #86
253: ldc2_w        #14
256: invokevirtual #150
259: ldc           #85
261: invokevirtual #86
264: invokevirtual #89
267: dload         9
269: ldc2_w        #14
272: dcmpl
273: ifne          280
276: iconst_1
277: goto          281
280: iconst_0
281: invokestatic  #91
284: new           #83
287: dup
288: invokespecial #84
291: ldc           #85
293: invokevirtual #86
296: dload         11
298: invokevirtual #150
301: ldc           #88
303: invokevirtual #86
306: ldc2_w        #14
309: invokevirtual #150
312: ldc           #85
314: invokevirtual #86
317: invokevirtual #89
320: dload         11
322: ldc2_w        #14
325: dcmpl
326: ifne          333
329: iconst_1
330: goto          334
333: iconst_0
334: invokestatic  #91
337: new           #83
340: dup
341: invokespecial #84
344: ldc           #85
346: invokevirtual #86
349: dload         13
351: invokevirtual #150
354: ldc           #88
356: invokevirtual #86
359: ldc2_w        #12
362: invokevirtual #150
365: ldc           #85
367: invokevirtual #86
370: invokevirtual #89
373: dload         13
375: ldc2_w        #12
378: dcmpl
379: ifne          386
382: iconst_1
383: goto          387
386: iconst_0
387: invokestatic  #91
390: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test114
Start line: 2778
End line: 2814
Method source code: 
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        java.lang.Number number1 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number1, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer5 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter6 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer5);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray7 = harmonicFitter6.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter6.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter6.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException10 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats4, (java.lang.Object[]) weightedObservedPointArray9);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats11 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_SUBTRACTION_COMPATIBLE_MATRICES;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.UNSUPPORTED_EXPANSION_MODE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException16 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED;
        java.lang.Number number19 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException21 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number19, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException24 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException21, (org.apache.commons.math3.exception.util.Localizable) localizedFormats22, objArray23);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException25 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException16, (org.apache.commons.math3.exception.util.Localizable) localizedFormats17, objArray23);
        org.apache.commons.math3.exception.ZeroException zeroException26 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats12, objArray23);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException27 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats11, objArray23);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException28 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats4, objArray23);
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray7);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertTrue("'" + localizedFormats11 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_SUBTRACTION_COMPATIBLE_MATRICES + "'", localizedFormats11.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_SUBTRACTION_COMPATIBLE_MATRICES));
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNSUPPORTED_EXPANSION_MODE + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNSUPPORTED_EXPANSION_MODE));
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED));
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #274
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #28
30: dup
31: ldc2_w        #252
34: invokestatic  #129
37: aload_1
38: iconst_1
39: invokespecial #160
42: astore_2
43: getstatic     #254
46: astore_3
47: aconst_null
48: astore        4
50: new           #8
53: dup
54: aload         4
56: invokespecial #9
59: astore        5
61: aload         5
63: invokevirtual #25
66: astore        6
68: aload         5
70: invokevirtual #25
73: astore        7
75: aload         5
77: invokevirtual #25
80: astore        8
82: new           #136
85: dup
86: aload_2
87: aload_3
88: aload         8
90: checkcast     #79
93: invokespecial #137
96: astore        9
98: getstatic     #275
101: astore        10
103: getstatic     #276
106: astore        11
108: new           #28
111: dup
112: ldc2_w        #277
115: invokestatic  #129
118: bipush        10
120: invokestatic  #159
123: iconst_1
124: invokespecial #160
127: astore        12
129: getstatic     #279
132: astore        13
134: aconst_null
135: astore        14
137: new           #28
140: dup
141: bipush        100
143: invokestatic  #159
146: aload         14
148: iconst_0
149: invokespecial #160
152: astore        15
154: getstatic     #161
157: astore        16
159: iconst_0
160: anewarray     #5
163: astore        17
165: new           #136
168: dup
169: aload         15
171: aload         16
173: aload         17
175: invokespecial #137
178: astore        18
180: new           #136
183: dup
184: aload         12
186: aload         13
188: aload         17
190: invokespecial #137
193: astore        19
195: new           #81
198: dup
199: aload         11
201: aload         17
203: invokespecial #82
206: astore        20
208: new           #130
211: dup
212: aload         10
214: aload         17
216: invokespecial #131
219: astore        21
221: new           #130
224: dup
225: aload_3
226: aload         17
228: invokespecial #131
231: astore        22
233: new           #83
236: dup
237: invokespecial #84
240: ldc           #85
242: invokevirtual #86
245: aload_3
246: invokevirtual #87
249: ldc           #88
251: invokevirtual #86
254: getstatic     #254
257: invokevirtual #87
260: ldc           #85
262: invokevirtual #86
265: invokevirtual #89
268: aload_3
269: getstatic     #254
272: invokevirtual #90
275: invokestatic  #91
278: aload         6
280: invokestatic  #20
283: aload         7
285: invokestatic  #20
288: aload         8
290: invokestatic  #20
293: new           #83
296: dup
297: invokespecial #84
300: ldc           #85
302: invokevirtual #86
305: aload         10
307: invokevirtual #87
310: ldc           #88
312: invokevirtual #86
315: getstatic     #275
318: invokevirtual #87
321: ldc           #85
323: invokevirtual #86
326: invokevirtual #89
329: aload         10
331: getstatic     #275
334: invokevirtual #90
337: invokestatic  #91
340: new           #83
343: dup
344: invokespecial #84
347: ldc           #85
349: invokevirtual #86
352: aload         11
354: invokevirtual #87
357: ldc           #88
359: invokevirtual #86
362: getstatic     #276
365: invokevirtual #87
368: ldc           #85
370: invokevirtual #86
373: invokevirtual #89
376: aload         11
378: getstatic     #276
381: invokevirtual #90
384: invokestatic  #91
387: new           #83
390: dup
391: invokespecial #84
394: ldc           #85
396: invokevirtual #86
399: aload         13
401: invokevirtual #87
404: ldc           #88
406: invokevirtual #86
409: getstatic     #279
412: invokevirtual #87
415: ldc           #85
417: invokevirtual #86
420: invokevirtual #89
423: aload         13
425: getstatic     #279
428: invokevirtual #90
431: invokestatic  #91
434: new           #83
437: dup
438: invokespecial #84
441: ldc           #85
443: invokevirtual #86
446: aload         16
448: invokevirtual #87
451: ldc           #88
453: invokevirtual #86
456: getstatic     #161
459: invokevirtual #87
462: ldc           #85
464: invokevirtual #86
467: invokevirtual #89
470: aload         16
472: getstatic     #161
475: invokevirtual #90
478: invokestatic  #91
481: aload         17
483: invokestatic  #20
486: aload         17
488: invokestatic  #92
491: ldc           #74
493: invokestatic  #23
496: aload         17
498: invokestatic  #93
501: ldc           #74
503: invokestatic  #23
506: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test115
Start line: 2817
End line: 2839
Method source code: 
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_RETRIEVE_AT_NEGATIVE_INDEX;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer2 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter3 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer2);
        harmonicFitter3.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter3.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter3.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter3.getObservations();
        java.lang.Object[] objArray12 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray11);
        org.apache.commons.math3.exception.ZeroException zeroException13 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) weightedObservedPointArray11);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException14 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray11);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext15 = mathIllegalStateException14.getContext();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_RETRIEVE_AT_NEGATIVE_INDEX + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_RETRIEVE_AT_NEGATIVE_INDEX));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(exceptionContext15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #280
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #281
28: astore_1
29: getstatic     #78
32: astore_2
33: aconst_null
34: astore_3
35: new           #8
38: dup
39: aload_3
40: invokespecial #9
43: astore        4
45: aload         4
47: dconst_1
48: ldc2_w        #32
51: invokevirtual #43
54: aload         4
56: dconst_0
57: ldc2_w        #34
60: invokevirtual #43
63: aload         4
65: invokevirtual #59
68: aload         4
70: invokevirtual #25
73: astore        5
75: aload         5
77: checkcast     #79
80: invokestatic  #80
83: astore        6
85: new           #81
88: dup
89: aload_2
90: aload         5
92: checkcast     #79
95: invokespecial #82
98: astore        7
100: new           #136
103: dup
104: aload_1
105: aload         5
107: checkcast     #79
110: invokespecial #138
113: astore        8
115: aload         8
117: invokevirtual #282
120: astore        9
122: new           #83
125: dup
126: invokespecial #84
129: ldc           #85
131: invokevirtual #86
134: aload_1
135: invokevirtual #87
138: ldc           #88
140: invokevirtual #86
143: getstatic     #281
146: invokevirtual #87
149: ldc           #85
151: invokevirtual #86
154: invokevirtual #89
157: aload_1
158: getstatic     #281
161: invokevirtual #90
164: invokestatic  #91
167: new           #83
170: dup
171: invokespecial #84
174: ldc           #85
176: invokevirtual #86
179: aload_2
180: invokevirtual #87
183: ldc           #88
185: invokevirtual #86
188: getstatic     #78
191: invokevirtual #87
194: ldc           #85
196: invokevirtual #86
199: invokevirtual #89
202: aload_2
203: getstatic     #78
206: invokevirtual #90
209: invokestatic  #91
212: aload         5
214: invokestatic  #20
217: aload         6
219: invokestatic  #20
222: aload         6
224: invokestatic  #92
227: ldc           #74
229: invokestatic  #23
232: aload         6
234: invokestatic  #93
237: ldc           #74
239: invokestatic  #23
242: aload         9
244: invokestatic  #20
247: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test116
Start line: 2842
End line: 2860
Method source code: 
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(52.0d, 52.0d, 35.0d);
        harmonicFitter1.clearObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #283
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: ldc2_w        #12
64: ldc2_w        #12
67: ldc2_w        #14
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: invokevirtual #26
81: astore_3
82: ldc           #27
84: invokestatic  #18
87: goto          91
90: astore_3
91: return
Exception table:
from    to  target type
77    87    90   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test117
Start line: 2863
End line: 2885
Method source code: 
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_OBJECT_TO_FRACTION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer2 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter3 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer2);
        harmonicFitter3.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter3.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter3.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter3.getObservations();
        java.lang.Object[] objArray12 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray11);
        org.apache.commons.math3.exception.ZeroException zeroException13 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) weightedObservedPointArray11);
        org.apache.commons.math3.exception.ZeroException zeroException14 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray11);
        java.lang.Number number15 = zeroException14.getArgument();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_OBJECT_TO_FRACTION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_OBJECT_TO_FRACTION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED));
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertEquals("'" + number15 + "' != '" + 0 + "'", number15, 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #284
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #219
28: astore_1
29: getstatic     #220
32: astore_2
33: aconst_null
34: astore_3
35: new           #8
38: dup
39: aload_3
40: invokespecial #9
43: astore        4
45: aload         4
47: dconst_1
48: ldc2_w        #32
51: invokevirtual #43
54: aload         4
56: dconst_0
57: ldc2_w        #34
60: invokevirtual #43
63: aload         4
65: invokevirtual #59
68: aload         4
70: invokevirtual #25
73: astore        5
75: aload         5
77: checkcast     #79
80: invokestatic  #80
83: astore        6
85: new           #81
88: dup
89: aload_2
90: aload         5
92: checkcast     #79
95: invokespecial #82
98: astore        7
100: new           #81
103: dup
104: aload_1
105: aload         5
107: checkcast     #79
110: invokespecial #82
113: astore        8
115: aload         8
117: invokevirtual #243
120: astore        9
122: new           #83
125: dup
126: invokespecial #84
129: ldc           #85
131: invokevirtual #86
134: aload_1
135: invokevirtual #87
138: ldc           #88
140: invokevirtual #86
143: getstatic     #219
146: invokevirtual #87
149: ldc           #85
151: invokevirtual #86
154: invokevirtual #89
157: aload_1
158: getstatic     #219
161: invokevirtual #90
164: invokestatic  #91
167: new           #83
170: dup
171: invokespecial #84
174: ldc           #85
176: invokevirtual #86
179: aload_2
180: invokevirtual #87
183: ldc           #88
185: invokevirtual #86
188: getstatic     #220
191: invokevirtual #87
194: ldc           #85
196: invokevirtual #86
199: invokevirtual #89
202: aload_2
203: getstatic     #220
206: invokevirtual #90
209: invokestatic  #91
212: aload         5
214: invokestatic  #20
217: aload         6
219: invokestatic  #20
222: aload         6
224: invokestatic  #92
227: ldc           #74
229: invokestatic  #23
232: aload         6
234: invokestatic  #93
237: ldc           #74
239: invokestatic  #23
242: new           #83
245: dup
246: invokespecial #84
249: ldc           #85
251: invokevirtual #86
254: aload         9
256: invokevirtual #87
259: ldc           #88
261: invokevirtual #86
264: iconst_0
265: invokevirtual #244
268: ldc           #85
270: invokevirtual #86
273: invokevirtual #89
276: aload         9
278: iconst_0
279: invokestatic  #135
282: invokestatic  #245
285: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test118
Start line: 2888
End line: 2918
Method source code: 
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint15 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double16 = weightedObservedPoint15.getX();
        double double17 = weightedObservedPoint15.getY();
        double double18 = weightedObservedPoint15.getX();
        double double19 = weightedObservedPoint15.getY();
        double double20 = weightedObservedPoint15.getX();
        double double21 = weightedObservedPoint15.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint15);
        harmonicFitter1.addObservedPoint((double) (short) 0, (double) (-1L));
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #285
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: dconst_0
54: ldc2_w        #12
57: ldc2_w        #10
60: invokevirtual #54
63: new           #145
66: dup
67: ldc2_w        #14
70: ldc2_w        #12
73: ldc2_w        #12
76: invokespecial #146
79: astore_3
80: aload_3
81: invokevirtual #147
84: dstore        4
86: aload_3
87: invokevirtual #149
90: dstore        6
92: aload_3
93: invokevirtual #147
96: dstore        8
98: aload_3
99: invokevirtual #149
102: dstore        10
104: aload_3
105: invokevirtual #147
108: dstore        12
110: aload_3
111: invokevirtual #147
114: dstore        14
116: aload_2
117: aload_3
118: invokevirtual #123
121: aload_2
122: dconst_0
123: ldc2_w        #10
126: invokevirtual #43
129: aload_2
130: invokevirtual #26
133: astore        16
135: ldc           #17
137: invokestatic  #18
140: goto          145
143: astore        16
145: new           #83
148: dup
149: invokespecial #84
152: ldc           #85
154: invokevirtual #86
157: dload         4
159: invokevirtual #150
162: ldc           #88
164: invokevirtual #86
167: ldc2_w        #12
170: invokevirtual #150
173: ldc           #85
175: invokevirtual #86
178: invokevirtual #89
181: dload         4
183: ldc2_w        #12
186: dcmpl
187: ifne          194
190: iconst_1
191: goto          195
194: iconst_0
195: invokestatic  #91
198: new           #83
201: dup
202: invokespecial #84
205: ldc           #85
207: invokevirtual #86
210: dload         6
212: invokevirtual #150
215: ldc           #88
217: invokevirtual #86
220: ldc2_w        #12
223: invokevirtual #150
226: ldc           #85
228: invokevirtual #86
231: invokevirtual #89
234: dload         6
236: ldc2_w        #12
239: dcmpl
240: ifne          247
243: iconst_1
244: goto          248
247: iconst_0
248: invokestatic  #91
251: new           #83
254: dup
255: invokespecial #84
258: ldc           #85
260: invokevirtual #86
263: dload         8
265: invokevirtual #150
268: ldc           #88
270: invokevirtual #86
273: ldc2_w        #12
276: invokevirtual #150
279: ldc           #85
281: invokevirtual #86
284: invokevirtual #89
287: dload         8
289: ldc2_w        #12
292: dcmpl
293: ifne          300
296: iconst_1
297: goto          301
300: iconst_0
301: invokestatic  #91
304: new           #83
307: dup
308: invokespecial #84
311: ldc           #85
313: invokevirtual #86
316: dload         10
318: invokevirtual #150
321: ldc           #88
323: invokevirtual #86
326: ldc2_w        #12
329: invokevirtual #150
332: ldc           #85
334: invokevirtual #86
337: invokevirtual #89
340: dload         10
342: ldc2_w        #12
345: dcmpl
346: ifne          353
349: iconst_1
350: goto          354
353: iconst_0
354: invokestatic  #91
357: new           #83
360: dup
361: invokespecial #84
364: ldc           #85
366: invokevirtual #86
369: dload         12
371: invokevirtual #150
374: ldc           #88
376: invokevirtual #86
379: ldc2_w        #12
382: invokevirtual #150
385: ldc           #85
387: invokevirtual #86
390: invokevirtual #89
393: dload         12
395: ldc2_w        #12
398: dcmpl
399: ifne          406
402: iconst_1
403: goto          407
406: iconst_0
407: invokestatic  #91
410: new           #83
413: dup
414: invokespecial #84
417: ldc           #85
419: invokevirtual #86
422: dload         14
424: invokevirtual #150
427: ldc           #88
429: invokevirtual #86
432: ldc2_w        #12
435: invokevirtual #150
438: ldc           #85
440: invokevirtual #86
443: invokevirtual #89
446: dload         14
448: ldc2_w        #12
451: dcmpl
452: ifne          459
455: iconst_1
456: goto          460
459: iconst_0
460: invokestatic  #91
463: return
Exception table:
from    to  target type
129   140   143   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test119
Start line: 2921
End line: 2936
Method source code: 
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter2.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter2.getObservations();
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException12 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) weightedObservedPointArray11);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #286
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aconst_null
28: astore_2
29: new           #8
32: dup
33: aload_2
34: invokespecial #9
37: astore_3
38: aload_3
39: dconst_1
40: ldc2_w        #32
43: invokevirtual #43
46: aload_3
47: dconst_0
48: ldc2_w        #34
51: invokevirtual #43
54: aload_3
55: invokevirtual #25
58: astore        4
60: aload_3
61: invokevirtual #25
64: astore        5
66: aload_3
67: invokevirtual #25
70: astore        6
72: new           #130
75: dup
76: aload_1
77: aload         6
79: checkcast     #79
82: invokespecial #131
85: astore        7
87: aload         4
89: invokestatic  #20
92: aload         5
94: invokestatic  #20
97: aload         6
99: invokestatic  #20
102: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test120
Start line: 2939
End line: 2979
Method source code: 
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext11 = mathIllegalArgumentException4.getContext();
        java.lang.Object obj13 = exceptionContext11.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer15 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter16 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer15);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray17 = harmonicFitter16.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray18 = harmonicFitter16.getObservations();
        exceptionContext11.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats14, (java.lang.Object[]) weightedObservedPointArray18);
        java.lang.Throwable throwable20 = exceptionContext11.getThrowable();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray17);
        org.junit.Assert.assertNotNull(weightedObservedPointArray18);
        org.junit.Assert.assertNotNull(throwable20);
        org.junit.Assert.assertEquals(throwable20.getLocalizedMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1: cannot convert NaN value");
        org.junit.Assert.assertEquals(throwable20.getMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1: cannot convert NaN value");
        org.junit.Assert.assertEquals(throwable20.toString(), "org.apache.commons.math3.exception.MathIllegalArgumentException: overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1: cannot convert NaN value");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #287
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: aload         4
110: invokevirtual #165
113: astore        9
115: aload         9
117: ldc           #166
119: invokevirtual #167
122: astore        10
124: getstatic     #168
127: astore        11
129: aconst_null
130: astore        12
132: new           #8
135: dup
136: aload         12
138: invokespecial #9
141: astore        13
143: aload         13
145: invokevirtual #25
148: astore        14
150: aload         13
152: invokevirtual #25
155: astore        15
157: aload         9
159: aload         11
161: aload         15
163: checkcast     #79
166: invokevirtual #169
169: aload         9
171: invokevirtual #288
174: astore        16
176: new           #83
179: dup
180: invokespecial #84
183: ldc           #85
185: invokevirtual #86
188: aload_1
189: invokevirtual #87
192: ldc           #88
194: invokevirtual #86
197: getstatic     #127
200: invokevirtual #87
203: ldc           #85
205: invokevirtual #86
208: invokevirtual #89
211: aload_1
212: getstatic     #127
215: invokevirtual #90
218: invokestatic  #91
221: new           #83
224: dup
225: invokespecial #84
228: ldc           #85
230: invokevirtual #86
233: aload_2
234: invokevirtual #87
237: ldc           #88
239: invokevirtual #86
242: getstatic     #128
245: invokevirtual #87
248: ldc           #85
250: invokevirtual #86
253: invokevirtual #89
256: aload_2
257: getstatic     #128
260: invokevirtual #90
263: invokestatic  #91
266: aload_3
267: invokestatic  #20
270: aload_3
271: invokestatic  #92
274: ldc           #140
276: invokestatic  #23
279: aload_3
280: invokestatic  #93
283: ldc           #140
285: invokestatic  #23
288: new           #83
291: dup
292: invokespecial #84
295: ldc           #85
297: invokevirtual #86
300: aload         5
302: invokevirtual #87
305: ldc           #88
307: invokevirtual #86
310: getstatic     #127
313: invokevirtual #87
316: ldc           #85
318: invokevirtual #86
321: invokevirtual #89
324: aload         5
326: getstatic     #127
329: invokevirtual #90
332: invokestatic  #91
335: new           #83
338: dup
339: invokespecial #84
342: ldc           #85
344: invokevirtual #86
347: aload         6
349: invokevirtual #87
352: ldc           #88
354: invokevirtual #86
357: getstatic     #128
360: invokevirtual #87
363: ldc           #85
365: invokevirtual #86
368: invokevirtual #89
371: aload         6
373: getstatic     #128
376: invokevirtual #90
379: invokestatic  #91
382: aload         7
384: invokestatic  #20
387: aload         7
389: invokestatic  #92
392: ldc           #140
394: invokestatic  #23
397: aload         7
399: invokestatic  #93
402: ldc           #140
404: invokestatic  #23
407: aload         9
409: invokestatic  #20
412: aload         10
414: invokestatic  #171
417: new           #83
420: dup
421: invokespecial #84
424: ldc           #85
426: invokevirtual #86
429: aload         11
431: invokevirtual #87
434: ldc           #88
436: invokevirtual #86
439: getstatic     #168
442: invokevirtual #87
445: ldc           #85
447: invokevirtual #86
450: invokevirtual #89
453: aload         11
455: getstatic     #168
458: invokevirtual #90
461: invokestatic  #91
464: aload         14
466: invokestatic  #20
469: aload         15
471: invokestatic  #20
474: aload         16
476: invokestatic  #20
479: aload         16
481: invokevirtual #289
484: ldc_w         #290
487: invokestatic  #23
490: aload         16
492: invokevirtual #291
495: ldc_w         #290
498: invokestatic  #23
501: aload         16
503: invokevirtual #292
506: ldc_w         #293
509: invokestatic  #23
512: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test121
Start line: 2982
End line: 3017
Method source code: 
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray13 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) 1L, (double) 1.0f);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer18 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter19 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer18);
        harmonicFitter19.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter19.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter19.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint33 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double34 = weightedObservedPoint33.getX();
        double double35 = weightedObservedPoint33.getY();
        double double36 = weightedObservedPoint33.getX();
        double double37 = weightedObservedPoint33.getY();
        double double38 = weightedObservedPoint33.getX();
        double double39 = weightedObservedPoint33.getX();
        harmonicFitter19.addObservedPoint(weightedObservedPoint33);
        double double41 = weightedObservedPoint33.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint33);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray13);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 52.0d + "'", double34 == 52.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 35.0d + "'", double41 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #294
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: dconst_0
59: dconst_1
60: ldc2_w        #34
63: invokevirtual #54
66: aload_2
67: invokevirtual #25
70: astore        4
72: aload_2
73: ldc2_w        #34
76: dconst_1
77: dconst_1
78: invokevirtual #54
81: aconst_null
82: astore        5
84: new           #8
87: dup
88: aload         5
90: invokespecial #9
93: astore        6
95: aload         6
97: dconst_1
98: ldc2_w        #32
101: invokevirtual #43
104: aload         6
106: dconst_0
107: ldc2_w        #34
110: invokevirtual #43
113: aload         6
115: dconst_0
116: ldc2_w        #12
119: ldc2_w        #10
122: invokevirtual #54
125: new           #145
128: dup
129: ldc2_w        #14
132: ldc2_w        #12
135: ldc2_w        #12
138: invokespecial #146
141: astore        7
143: aload         7
145: invokevirtual #147
148: dstore        8
150: aload         7
152: invokevirtual #149
155: dstore        10
157: aload         7
159: invokevirtual #147
162: dstore        12
164: aload         7
166: invokevirtual #149
169: dstore        14
171: aload         7
173: invokevirtual #147
176: dstore        16
178: aload         7
180: invokevirtual #147
183: dstore        18
185: aload         6
187: aload         7
189: invokevirtual #123
192: aload         7
194: invokevirtual #148
197: dstore        20
199: aload_2
200: aload         7
202: invokevirtual #123
205: aload_3
206: invokestatic  #20
209: aload         4
211: invokestatic  #20
214: new           #83
217: dup
218: invokespecial #84
221: ldc           #85
223: invokevirtual #86
226: dload         8
228: invokevirtual #150
231: ldc           #88
233: invokevirtual #86
236: ldc2_w        #12
239: invokevirtual #150
242: ldc           #85
244: invokevirtual #86
247: invokevirtual #89
250: dload         8
252: ldc2_w        #12
255: dcmpl
256: ifne          263
259: iconst_1
260: goto          264
263: iconst_0
264: invokestatic  #91
267: new           #83
270: dup
271: invokespecial #84
274: ldc           #85
276: invokevirtual #86
279: dload         10
281: invokevirtual #150
284: ldc           #88
286: invokevirtual #86
289: ldc2_w        #12
292: invokevirtual #150
295: ldc           #85
297: invokevirtual #86
300: invokevirtual #89
303: dload         10
305: ldc2_w        #12
308: dcmpl
309: ifne          316
312: iconst_1
313: goto          317
316: iconst_0
317: invokestatic  #91
320: new           #83
323: dup
324: invokespecial #84
327: ldc           #85
329: invokevirtual #86
332: dload         12
334: invokevirtual #150
337: ldc           #88
339: invokevirtual #86
342: ldc2_w        #12
345: invokevirtual #150
348: ldc           #85
350: invokevirtual #86
353: invokevirtual #89
356: dload         12
358: ldc2_w        #12
361: dcmpl
362: ifne          369
365: iconst_1
366: goto          370
369: iconst_0
370: invokestatic  #91
373: new           #83
376: dup
377: invokespecial #84
380: ldc           #85
382: invokevirtual #86
385: dload         14
387: invokevirtual #150
390: ldc           #88
392: invokevirtual #86
395: ldc2_w        #12
398: invokevirtual #150
401: ldc           #85
403: invokevirtual #86
406: invokevirtual #89
409: dload         14
411: ldc2_w        #12
414: dcmpl
415: ifne          422
418: iconst_1
419: goto          423
422: iconst_0
423: invokestatic  #91
426: new           #83
429: dup
430: invokespecial #84
433: ldc           #85
435: invokevirtual #86
438: dload         16
440: invokevirtual #150
443: ldc           #88
445: invokevirtual #86
448: ldc2_w        #12
451: invokevirtual #150
454: ldc           #85
456: invokevirtual #86
459: invokevirtual #89
462: dload         16
464: ldc2_w        #12
467: dcmpl
468: ifne          475
471: iconst_1
472: goto          476
475: iconst_0
476: invokestatic  #91
479: new           #83
482: dup
483: invokespecial #84
486: ldc           #85
488: invokevirtual #86
491: dload         18
493: invokevirtual #150
496: ldc           #88
498: invokevirtual #86
501: ldc2_w        #12
504: invokevirtual #150
507: ldc           #85
509: invokevirtual #86
512: invokevirtual #89
515: dload         18
517: ldc2_w        #12
520: dcmpl
521: ifne          528
524: iconst_1
525: goto          529
528: iconst_0
529: invokestatic  #91
532: new           #83
535: dup
536: invokespecial #84
539: ldc           #85
541: invokevirtual #86
544: dload         20
546: invokevirtual #150
549: ldc           #88
551: invokevirtual #86
554: ldc2_w        #14
557: invokevirtual #150
560: ldc           #85
562: invokevirtual #86
565: invokevirtual #89
568: dload         20
570: ldc2_w        #14
573: dcmpl
574: ifne          581
577: iconst_1
578: goto          582
581: iconst_0
582: invokestatic  #91
585: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test122
Start line: 3020
End line: 3044
Method source code: 
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray13 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint17 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (-1), 35.0d, (double) (byte) 0);
        harmonicFitter1.addObservedPoint(weightedObservedPoint17);
        double[] doubleArray20 = new double[] { (short) 100 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = harmonicFitter1.fit(doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #295
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: dconst_0
59: dconst_1
60: ldc2_w        #34
63: invokevirtual #54
66: aload_2
67: invokevirtual #25
70: astore        4
72: new           #145
75: dup
76: ldc2_w        #10
79: ldc2_w        #14
82: dconst_0
83: invokespecial #146
86: astore        5
88: aload_2
89: aload         5
91: invokevirtual #123
94: iconst_1
95: newarray       double
97: dup
98: iconst_0
99: ldc2_w        #34
102: dastore
103: astore        6
105: aload_2
106: aload         6
108: invokevirtual #16
111: astore        7
113: ldc           #17
115: invokestatic  #18
118: goto          123
121: astore        7
123: aload_3
124: invokestatic  #20
127: aload         4
129: invokestatic  #20
132: aload         6
134: invokestatic  #20
137: aload         6
139: invokestatic  #21
142: ldc           #62
144: invokestatic  #23
147: return
Exception table:
from    to  target type
105   118   121   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test123
Start line: 3047
End line: 3071
Method source code: 
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint11 = null;
        harmonicFitter1.addObservedPoint(weightedObservedPoint11);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric13 = null;
        double[] doubleArray14 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = harmonicFitter1.fit(parametric13, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #296
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: invokevirtual #25
66: astore        4
68: aconst_null
69: astore        5
71: aload_2
72: aload         5
74: invokevirtual #123
77: aconst_null
78: astore        6
80: iconst_0
81: newarray       double
83: astore        7
85: aload_2
86: aload         6
88: aload         7
90: invokevirtual #30
93: astore        8
95: ldc           #17
97: invokestatic  #18
100: goto          105
103: astore        8
105: aload_3
106: invokestatic  #20
109: aload         4
111: invokestatic  #20
114: aload         7
116: invokestatic  #20
119: aload         7
121: invokestatic  #21
124: ldc           #74
126: invokestatic  #23
129: return
Exception table:
from    to  target type
85   100   103   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test124
Start line: 3074
End line: 3081
Method source code: 
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(35.0d, (double) (byte) 10, 10.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #297
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: ldc2_w        #14
48: ldc2_w        #32
51: ldc2_w        #32
54: invokevirtual #54
57: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test125
Start line: 3084
End line: 3107
Method source code: 
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        java.lang.Number number1 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number1, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer5 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter6 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer5);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray7 = harmonicFitter6.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter6.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter6.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException10 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats4, (java.lang.Object[]) weightedObservedPointArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser11 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray7);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #298
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #28
30: dup
31: ldc2_w        #252
34: invokestatic  #129
37: aload_1
38: iconst_1
39: invokespecial #160
42: astore_2
43: getstatic     #254
46: astore_3
47: aconst_null
48: astore        4
50: new           #8
53: dup
54: aload         4
56: invokespecial #9
59: astore        5
61: aload         5
63: invokevirtual #25
66: astore        6
68: aload         5
70: invokevirtual #25
73: astore        7
75: aload         5
77: invokevirtual #25
80: astore        8
82: new           #136
85: dup
86: aload_2
87: aload_3
88: aload         8
90: checkcast     #79
93: invokespecial #137
96: astore        9
98: new           #69
101: dup
102: aload         8
104: invokespecial #70
107: astore        10
109: ldc           #27
111: invokestatic  #18
114: goto          119
117: astore        10
119: new           #83
122: dup
123: invokespecial #84
126: ldc           #85
128: invokevirtual #86
131: aload_3
132: invokevirtual #87
135: ldc           #88
137: invokevirtual #86
140: getstatic     #254
143: invokevirtual #87
146: ldc           #85
148: invokevirtual #86
151: invokevirtual #89
154: aload_3
155: getstatic     #254
158: invokevirtual #90
161: invokestatic  #91
164: aload         6
166: invokestatic  #20
169: aload         7
171: invokestatic  #20
174: aload         8
176: invokestatic  #20
179: return
Exception table:
from    to  target type
98   114   117   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test126
Start line: 3110
End line: 3130
Method source code: 
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER;
        java.lang.String str1 = localizedFormats0.getSourceString();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer2 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter3 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer2);
        harmonicFitter3.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter3.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter3.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter3.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray12 = harmonicFitter3.getObservations();
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException13 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray12);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext14 = mathIllegalArgumentException13.getContext();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}" + "'", str1, "must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}");
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
        org.junit.Assert.assertNotNull(weightedObservedPointArray12);
        org.junit.Assert.assertNotNull(exceptionContext14);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #299
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #300
28: astore_1
29: aload_1
30: invokevirtual #301
33: astore_2
34: aconst_null
35: astore_3
36: new           #8
39: dup
40: aload_3
41: invokespecial #9
44: astore        4
46: aload         4
48: dconst_1
49: ldc2_w        #32
52: invokevirtual #43
55: aload         4
57: dconst_0
58: ldc2_w        #34
61: invokevirtual #43
64: aload         4
66: invokevirtual #25
69: astore        5
71: aload         4
73: invokevirtual #25
76: astore        6
78: aload         4
80: invokevirtual #25
83: astore        7
85: new           #130
88: dup
89: aload_1
90: aload         7
92: checkcast     #79
95: invokespecial #131
98: astore        8
100: aload         8
102: invokevirtual #165
105: astore        9
107: new           #83
110: dup
111: invokespecial #84
114: ldc           #85
116: invokevirtual #86
119: aload_1
120: invokevirtual #87
123: ldc           #88
125: invokevirtual #86
128: getstatic     #300
131: invokevirtual #87
134: ldc           #85
136: invokevirtual #86
139: invokevirtual #89
142: aload_1
143: getstatic     #300
146: invokevirtual #90
149: invokestatic  #91
152: new           #83
155: dup
156: invokespecial #84
159: ldc           #85
161: invokevirtual #86
164: aload_2
165: invokevirtual #86
168: ldc_w         #302
171: invokevirtual #86
174: invokevirtual #89
177: aload_2
178: ldc_w         #303
181: invokestatic  #245
184: aload         5
186: invokestatic  #20
189: aload         6
191: invokestatic  #20
194: aload         7
196: invokestatic  #20
199: aload         9
201: invokestatic  #20
204: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test127
Start line: 3133
End line: 3160
Method source code: 
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(35.0d, (double) (byte) -1);
        harmonicFitter1.addObservedPoint(1.0d, (double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(35.0d, (-1.0d));
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer16 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter17 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer16);
        harmonicFitter17.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter17.clearObservations();
        harmonicFitter17.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint28 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double29 = weightedObservedPoint28.getX();
        harmonicFitter17.addObservedPoint(weightedObservedPoint28);
        harmonicFitter1.addObservedPoint(weightedObservedPoint28);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray32 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #304
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: ldc2_w        #14
52: ldc2_w        #10
55: invokevirtual #43
58: aload_2
59: dconst_1
60: dconst_1
61: ldc2_w        #32
64: invokevirtual #54
67: aload_2
68: ldc2_w        #14
71: ldc2_w        #10
74: invokevirtual #43
77: aconst_null
78: astore_3
79: new           #8
82: dup
83: aload_3
84: invokespecial #9
87: astore        4
89: aload         4
91: dconst_1
92: ldc2_w        #32
95: invokevirtual #43
98: aload         4
100: invokevirtual #59
103: aload         4
105: dconst_0
106: ldc2_w        #10
109: invokevirtual #43
112: new           #145
115: dup
116: ldc2_w        #14
119: ldc2_w        #12
122: ldc2_w        #12
125: invokespecial #146
128: astore        5
130: aload         5
132: invokevirtual #147
135: dstore        6
137: aload         4
139: aload         5
141: invokevirtual #123
144: aload_2
145: aload         5
147: invokevirtual #123
150: aload_2
151: invokevirtual #26
154: astore        8
156: ldc           #17
158: invokestatic  #18
161: goto          166
164: astore        8
166: new           #83
169: dup
170: invokespecial #84
173: ldc           #85
175: invokevirtual #86
178: dload         6
180: invokevirtual #150
183: ldc           #88
185: invokevirtual #86
188: ldc2_w        #12
191: invokevirtual #150
194: ldc           #85
196: invokevirtual #86
199: invokevirtual #89
202: dload         6
204: ldc2_w        #12
207: dcmpl
208: ifne          215
211: iconst_1
212: goto          216
215: iconst_0
216: invokestatic  #91
219: return
Exception table:
from    to  target type
150   161   164   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test128
Start line: 3163
End line: 3177
Method source code: 
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double13 = weightedObservedPoint12.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        double double15 = weightedObservedPoint12.getWeight();
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 52.0d + "'", double13 == 52.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #305
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: dconst_0
50: ldc2_w        #10
53: invokevirtual #43
56: new           #145
59: dup
60: ldc2_w        #14
63: ldc2_w        #12
66: ldc2_w        #12
69: invokespecial #146
72: astore_3
73: aload_3
74: invokevirtual #147
77: dstore        4
79: aload_2
80: aload_3
81: invokevirtual #123
84: aload_3
85: invokevirtual #148
88: dstore        6
90: new           #83
93: dup
94: invokespecial #84
97: ldc           #85
99: invokevirtual #86
102: dload         4
104: invokevirtual #150
107: ldc           #88
109: invokevirtual #86
112: ldc2_w        #12
115: invokevirtual #150
118: ldc           #85
120: invokevirtual #86
123: invokevirtual #89
126: dload         4
128: ldc2_w        #12
131: dcmpl
132: ifne          139
135: iconst_1
136: goto          140
139: iconst_0
140: invokestatic  #91
143: new           #83
146: dup
147: invokespecial #84
150: ldc           #85
152: invokevirtual #86
155: dload         6
157: invokevirtual #150
160: ldc           #88
162: invokevirtual #86
165: ldc2_w        #14
168: invokevirtual #150
171: ldc           #85
173: invokevirtual #86
176: invokevirtual #89
179: dload         6
181: ldc2_w        #14
184: dcmpl
185: ifne          192
188: iconst_1
189: goto          193
192: iconst_0
193: invokestatic  #91
196: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test129
Start line: 3180
End line: 3214
Method source code: 
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint19 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter8.addObservedPoint(weightedObservedPoint19);
        harmonicFitter1.addObservedPoint(weightedObservedPoint19);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer22 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter23 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer22);
        harmonicFitter23.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter23.clearObservations();
        harmonicFitter23.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint34 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double35 = weightedObservedPoint34.getX();
        harmonicFitter23.addObservedPoint(weightedObservedPoint34);
        harmonicFitter1.addObservedPoint(weightedObservedPoint34);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray38 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 3 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #306
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aconst_null
53: astore        4
55: new           #8
58: dup
59: aload         4
61: invokespecial #9
64: astore        5
66: aload         5
68: dconst_1
69: ldc2_w        #32
72: invokevirtual #43
75: aload         5
77: dconst_0
78: ldc2_w        #34
81: invokevirtual #43
84: aload         5
86: invokevirtual #25
89: astore        6
91: new           #145
94: dup
95: dconst_1
96: dconst_0
97: ldc2_w        #34
100: invokespecial #146
103: astore        7
105: aload         5
107: aload         7
109: invokevirtual #123
112: aload_2
113: aload         7
115: invokevirtual #123
118: aconst_null
119: astore        8
121: new           #8
124: dup
125: aload         8
127: invokespecial #9
130: astore        9
132: aload         9
134: dconst_1
135: ldc2_w        #32
138: invokevirtual #43
141: aload         9
143: invokevirtual #59
146: aload         9
148: dconst_0
149: ldc2_w        #10
152: invokevirtual #43
155: new           #145
158: dup
159: ldc2_w        #14
162: ldc2_w        #12
165: ldc2_w        #12
168: invokespecial #146
171: astore        10
173: aload         10
175: invokevirtual #147
178: dstore        11
180: aload         9
182: aload         10
184: invokevirtual #123
187: aload_2
188: aload         10
190: invokevirtual #123
193: aload_2
194: invokevirtual #26
197: astore        13
199: ldc           #176
201: invokestatic  #18
204: goto          209
207: astore        13
209: aload_3
210: invokestatic  #20
213: aload         6
215: invokestatic  #20
218: new           #83
221: dup
222: invokespecial #84
225: ldc           #85
227: invokevirtual #86
230: dload         11
232: invokevirtual #150
235: ldc           #88
237: invokevirtual #86
240: ldc2_w        #12
243: invokevirtual #150
246: ldc           #85
248: invokevirtual #86
251: invokevirtual #89
254: dload         11
256: ldc2_w        #12
259: dcmpl
260: ifne          267
263: iconst_1
264: goto          268
267: iconst_0
268: invokestatic  #91
271: return
Exception table:
from    to  target type
193   204   207   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test130
Start line: 3217
End line: 3240
Method source code: 
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.addObservedPoint((double) (short) 0, (double) 10);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric17 = null;
        double[] doubleArray24 = new double[] { 52.0d, (short) 100, 1L, (short) 1, 1L, 1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray25 = harmonicFitter1.fit(parametric17, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[52.0, 100.0, 1.0, 1.0, 1.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #307
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload_2
78: dconst_0
79: ldc2_w        #32
82: invokevirtual #43
85: aconst_null
86: astore        5
88: bipush        6
90: newarray       double
92: dup
93: iconst_0
94: ldc2_w        #12
97: dastore
98: dup
99: iconst_1
100: ldc2_w        #34
103: dastore
104: dup
105: iconst_2
106: dconst_1
107: dastore
108: dup
109: iconst_3
110: dconst_1
111: dastore
112: dup
113: iconst_4
114: dconst_1
115: dastore
116: dup
117: iconst_5
118: dconst_1
119: dastore
120: astore        6
122: aload_2
123: aload         5
125: aload         6
127: invokevirtual #30
130: astore        7
132: ldc           #17
134: invokestatic  #18
137: goto          142
140: astore        7
142: aload_3
143: invokestatic  #20
146: aload         6
148: invokestatic  #20
151: aload         6
153: invokestatic  #21
156: ldc_w         #308
159: invokestatic  #23
162: return
Exception table:
from    to  target type
122   137   140   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test131
Start line: 3243
End line: 3262
Method source code: 
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint((double) (-1), 0.0d, (double) (short) 0);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric11 = null;
        double[] doubleArray14 = new double[] { (-1.0d), 100.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = harmonicFitter1.fit((int) '#', parametric11, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #309
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: ldc2_w        #10
48: dconst_0
49: dconst_0
50: invokevirtual #54
53: aload_2
54: invokevirtual #59
57: aconst_null
58: astore_3
59: iconst_2
60: newarray       double
62: dup
63: iconst_0
64: ldc2_w        #10
67: dastore
68: dup
69: iconst_1
70: ldc2_w        #34
73: dastore
74: astore        4
76: aload_2
77: bipush        35
79: aload_3
80: aload         4
82: invokevirtual #40
85: astore        5
87: ldc           #17
89: invokestatic  #18
92: goto          97
95: astore        5
97: aload         4
99: invokestatic  #20
102: aload         4
104: invokestatic  #21
107: ldc_w         #310
110: invokestatic  #23
113: return
Exception table:
from    to  target type
76    92    95   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test132
Start line: 3265
End line: 3273
Method source code: 
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint((double) (-1), 0.0d, (double) (short) 0);
        harmonicFitter1.addObservedPoint((double) (short) 10, (double) (-1L), (double) (short) -1);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #311
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: ldc2_w        #10
48: dconst_0
49: dconst_0
50: invokevirtual #54
53: aload_2
54: ldc2_w        #32
57: ldc2_w        #10
60: ldc2_w        #10
63: invokevirtual #54
66: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test133
Start line: 3276
End line: 3315
Method source code: 
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer9 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter10 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer9);
        harmonicFitter10.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter10.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter10.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint24 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double25 = weightedObservedPoint24.getX();
        double double26 = weightedObservedPoint24.getY();
        double double27 = weightedObservedPoint24.getX();
        double double28 = weightedObservedPoint24.getY();
        double double29 = weightedObservedPoint24.getX();
        double double30 = weightedObservedPoint24.getX();
        harmonicFitter10.addObservedPoint(weightedObservedPoint24);
        double double32 = weightedObservedPoint24.getWeight();
        double double33 = weightedObservedPoint24.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint24);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray35 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #312
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aconst_null
57: astore_3
58: new           #8
61: dup
62: aload_3
63: invokespecial #9
66: astore        4
68: aload         4
70: dconst_1
71: ldc2_w        #32
74: invokevirtual #43
77: aload         4
79: dconst_0
80: ldc2_w        #34
83: invokevirtual #43
86: aload         4
88: dconst_0
89: ldc2_w        #12
92: ldc2_w        #10
95: invokevirtual #54
98: new           #145
101: dup
102: ldc2_w        #14
105: ldc2_w        #12
108: ldc2_w        #12
111: invokespecial #146
114: astore        5
116: aload         5
118: invokevirtual #147
121: dstore        6
123: aload         5
125: invokevirtual #149
128: dstore        8
130: aload         5
132: invokevirtual #147
135: dstore        10
137: aload         5
139: invokevirtual #149
142: dstore        12
144: aload         5
146: invokevirtual #147
149: dstore        14
151: aload         5
153: invokevirtual #147
156: dstore        16
158: aload         4
160: aload         5
162: invokevirtual #123
165: aload         5
167: invokevirtual #148
170: dstore        18
172: aload         5
174: invokevirtual #147
177: dstore        20
179: aload_2
180: aload         5
182: invokevirtual #123
185: aload_2
186: invokevirtual #26
189: astore        22
191: ldc           #64
193: invokestatic  #18
196: goto          201
199: astore        22
201: new           #83
204: dup
205: invokespecial #84
208: ldc           #85
210: invokevirtual #86
213: dload         6
215: invokevirtual #150
218: ldc           #88
220: invokevirtual #86
223: ldc2_w        #12
226: invokevirtual #150
229: ldc           #85
231: invokevirtual #86
234: invokevirtual #89
237: dload         6
239: ldc2_w        #12
242: dcmpl
243: ifne          250
246: iconst_1
247: goto          251
250: iconst_0
251: invokestatic  #91
254: new           #83
257: dup
258: invokespecial #84
261: ldc           #85
263: invokevirtual #86
266: dload         8
268: invokevirtual #150
271: ldc           #88
273: invokevirtual #86
276: ldc2_w        #12
279: invokevirtual #150
282: ldc           #85
284: invokevirtual #86
287: invokevirtual #89
290: dload         8
292: ldc2_w        #12
295: dcmpl
296: ifne          303
299: iconst_1
300: goto          304
303: iconst_0
304: invokestatic  #91
307: new           #83
310: dup
311: invokespecial #84
314: ldc           #85
316: invokevirtual #86
319: dload         10
321: invokevirtual #150
324: ldc           #88
326: invokevirtual #86
329: ldc2_w        #12
332: invokevirtual #150
335: ldc           #85
337: invokevirtual #86
340: invokevirtual #89
343: dload         10
345: ldc2_w        #12
348: dcmpl
349: ifne          356
352: iconst_1
353: goto          357
356: iconst_0
357: invokestatic  #91
360: new           #83
363: dup
364: invokespecial #84
367: ldc           #85
369: invokevirtual #86
372: dload         12
374: invokevirtual #150
377: ldc           #88
379: invokevirtual #86
382: ldc2_w        #12
385: invokevirtual #150
388: ldc           #85
390: invokevirtual #86
393: invokevirtual #89
396: dload         12
398: ldc2_w        #12
401: dcmpl
402: ifne          409
405: iconst_1
406: goto          410
409: iconst_0
410: invokestatic  #91
413: new           #83
416: dup
417: invokespecial #84
420: ldc           #85
422: invokevirtual #86
425: dload         14
427: invokevirtual #150
430: ldc           #88
432: invokevirtual #86
435: ldc2_w        #12
438: invokevirtual #150
441: ldc           #85
443: invokevirtual #86
446: invokevirtual #89
449: dload         14
451: ldc2_w        #12
454: dcmpl
455: ifne          462
458: iconst_1
459: goto          463
462: iconst_0
463: invokestatic  #91
466: new           #83
469: dup
470: invokespecial #84
473: ldc           #85
475: invokevirtual #86
478: dload         16
480: invokevirtual #150
483: ldc           #88
485: invokevirtual #86
488: ldc2_w        #12
491: invokevirtual #150
494: ldc           #85
496: invokevirtual #86
499: invokevirtual #89
502: dload         16
504: ldc2_w        #12
507: dcmpl
508: ifne          515
511: iconst_1
512: goto          516
515: iconst_0
516: invokestatic  #91
519: new           #83
522: dup
523: invokespecial #84
526: ldc           #85
528: invokevirtual #86
531: dload         18
533: invokevirtual #150
536: ldc           #88
538: invokevirtual #86
541: ldc2_w        #14
544: invokevirtual #150
547: ldc           #85
549: invokevirtual #86
552: invokevirtual #89
555: dload         18
557: ldc2_w        #14
560: dcmpl
561: ifne          568
564: iconst_1
565: goto          569
568: iconst_0
569: invokestatic  #91
572: new           #83
575: dup
576: invokespecial #84
579: ldc           #85
581: invokevirtual #86
584: dload         20
586: invokevirtual #150
589: ldc           #88
591: invokevirtual #86
594: ldc2_w        #12
597: invokevirtual #150
600: ldc           #85
602: invokevirtual #86
605: invokevirtual #89
608: dload         20
610: ldc2_w        #12
613: dcmpl
614: ifne          621
617: iconst_1
618: goto          622
621: iconst_0
622: invokestatic  #91
625: return
Exception table:
from    to  target type
185   196   199   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test134
Start line: 3318
End line: 3334
Method source code: 
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        double[] doubleArray11 = new double[] { 35.0d, (short) 0, (short) -1, (short) 1, (byte) 10, 10.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = harmonicFitter1.fit(doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[35.0, 0.0, -1.0, 1.0, 10.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #313
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: bipush        6
46: newarray       double
48: dup
49: iconst_0
50: ldc2_w        #14
53: dastore
54: dup
55: iconst_1
56: dconst_0
57: dastore
58: dup
59: iconst_2
60: ldc2_w        #10
63: dastore
64: dup
65: iconst_3
66: dconst_1
67: dastore
68: dup
69: iconst_4
70: ldc2_w        #32
73: dastore
74: dup
75: iconst_5
76: ldc2_w        #32
79: dastore
80: astore_3
81: aload_2
82: aload_3
83: invokevirtual #16
86: astore        4
88: ldc           #17
90: invokestatic  #18
93: goto          98
96: astore        4
98: aload_3
99: invokestatic  #20
102: aload_3
103: invokestatic  #21
106: ldc_w         #314
109: invokestatic  #23
112: return
Exception table:
from    to  target type
81    93    96   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test135
Start line: 3337
End line: 3358
Method source code: 
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        double[] doubleArray11 = new double[] { (short) 0, 100.0f, 100, 10, (byte) 0, 1.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = harmonicFitter1.fit(doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 100.0, 100.0, 10.0, 0.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #315
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #25
45: astore        4
47: aload_2
48: invokevirtual #25
51: astore        5
53: bipush        6
55: newarray       double
57: dup
58: iconst_0
59: dconst_0
60: dastore
61: dup
62: iconst_1
63: ldc2_w        #34
66: dastore
67: dup
68: iconst_2
69: ldc2_w        #34
72: dastore
73: dup
74: iconst_3
75: ldc2_w        #32
78: dastore
79: dup
80: iconst_4
81: dconst_0
82: dastore
83: dup
84: iconst_5
85: dconst_1
86: dastore
87: astore        6
89: aload_2
90: aload         6
92: invokevirtual #16
95: astore        7
97: ldc           #17
99: invokestatic  #18
102: goto          107
105: astore        7
107: aload_3
108: invokestatic  #20
111: aload         4
113: invokestatic  #20
116: aload         5
118: invokestatic  #20
121: aload         6
123: invokestatic  #20
126: aload         6
128: invokestatic  #21
131: ldc_w         #316
134: invokestatic  #23
137: return
Exception table:
from    to  target type
89   102   105   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test136
Start line: 3361
End line: 3376
Method source code: 
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) 0.0f, (double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray9 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #317
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: dconst_0
50: ldc2_w        #10
53: invokevirtual #43
56: aload_2
57: invokevirtual #26
60: astore_3
61: ldc           #64
63: invokestatic  #18
66: goto          70
69: astore_3
70: return
Exception table:
from    to  target type
56    66    69   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test137
Start line: 3379
End line: 3400
Method source code: 
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter1.addObservedPoint((double) (short) 10, 0.0d);
        harmonicFitter1.addObservedPoint((double) (byte) 10, (-1.0d), (double) 'a');
        harmonicFitter1.addObservedPoint((double) 1L, (double) ' ');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint22 = null;
        harmonicFitter1.addObservedPoint(weightedObservedPoint22);
        double[] doubleArray24 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray25 = harmonicFitter1.fit(doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #318
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: ldc2_w        #34
56: ldc2_w        #34
59: ldc2_w        #32
62: invokevirtual #54
65: aload_2
66: ldc2_w        #32
69: dconst_0
70: invokevirtual #43
73: aload_2
74: ldc2_w        #32
77: ldc2_w        #10
80: ldc2_w        #44
83: invokevirtual #54
86: aload_2
87: dconst_1
88: ldc2_w        #38
91: invokevirtual #43
94: aconst_null
95: astore_3
96: aload_2
97: aload_3
98: invokevirtual #123
101: aconst_null
102: astore        4
104: aload_2
105: aload         4
107: invokevirtual #16
110: astore        5
112: ldc           #17
114: invokestatic  #18
117: goto          122
120: astore        5
122: return
Exception table:
from    to  target type
104   117   120   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test138
Start line: 3403
End line: 3421
Method source code: 
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        double[] doubleArray12 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = harmonicFitter1.fit(doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #319
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: dconst_0
54: ldc2_w        #12
57: ldc2_w        #10
60: invokevirtual #54
63: iconst_0
64: newarray       double
66: astore_3
67: aload_2
68: aload_3
69: invokevirtual #16
72: astore        4
74: ldc           #17
76: invokestatic  #18
79: goto          84
82: astore        4
84: aload_3
85: invokestatic  #20
88: aload_3
89: invokestatic  #21
92: ldc           #74
94: invokestatic  #23
97: return
Exception table:
from    to  target type
67    79    82   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test139
Start line: 3424
End line: 3467
Method source code: 
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext11 = mathIllegalArgumentException4.getContext();
        java.lang.Object obj13 = exceptionContext11.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer15 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter16 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer15);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray17 = harmonicFitter16.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray18 = harmonicFitter16.getObservations();
        exceptionContext11.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats14, (java.lang.Object[]) weightedObservedPointArray18);
        java.util.Locale locale20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = localizedFormats14.getLocalizedString(locale20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray17);
        org.junit.Assert.assertNotNull(weightedObservedPointArray18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #320
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: aload         4
110: invokevirtual #165
113: astore        9
115: aload         9
117: ldc           #166
119: invokevirtual #167
122: astore        10
124: getstatic     #168
127: astore        11
129: aconst_null
130: astore        12
132: new           #8
135: dup
136: aload         12
138: invokespecial #9
141: astore        13
143: aload         13
145: invokevirtual #25
148: astore        14
150: aload         13
152: invokevirtual #25
155: astore        15
157: aload         9
159: aload         11
161: aload         15
163: checkcast     #79
166: invokevirtual #169
169: aconst_null
170: astore        16
172: aload         11
174: aload         16
176: invokevirtual #321
179: astore        17
181: ldc           #17
183: invokestatic  #18
186: goto          191
189: astore        17
191: new           #83
194: dup
195: invokespecial #84
198: ldc           #85
200: invokevirtual #86
203: aload_1
204: invokevirtual #87
207: ldc           #88
209: invokevirtual #86
212: getstatic     #127
215: invokevirtual #87
218: ldc           #85
220: invokevirtual #86
223: invokevirtual #89
226: aload_1
227: getstatic     #127
230: invokevirtual #90
233: invokestatic  #91
236: new           #83
239: dup
240: invokespecial #84
243: ldc           #85
245: invokevirtual #86
248: aload_2
249: invokevirtual #87
252: ldc           #88
254: invokevirtual #86
257: getstatic     #128
260: invokevirtual #87
263: ldc           #85
265: invokevirtual #86
268: invokevirtual #89
271: aload_2
272: getstatic     #128
275: invokevirtual #90
278: invokestatic  #91
281: aload_3
282: invokestatic  #20
285: aload_3
286: invokestatic  #92
289: ldc           #140
291: invokestatic  #23
294: aload_3
295: invokestatic  #93
298: ldc           #140
300: invokestatic  #23
303: new           #83
306: dup
307: invokespecial #84
310: ldc           #85
312: invokevirtual #86
315: aload         5
317: invokevirtual #87
320: ldc           #88
322: invokevirtual #86
325: getstatic     #127
328: invokevirtual #87
331: ldc           #85
333: invokevirtual #86
336: invokevirtual #89
339: aload         5
341: getstatic     #127
344: invokevirtual #90
347: invokestatic  #91
350: new           #83
353: dup
354: invokespecial #84
357: ldc           #85
359: invokevirtual #86
362: aload         6
364: invokevirtual #87
367: ldc           #88
369: invokevirtual #86
372: getstatic     #128
375: invokevirtual #87
378: ldc           #85
380: invokevirtual #86
383: invokevirtual #89
386: aload         6
388: getstatic     #128
391: invokevirtual #90
394: invokestatic  #91
397: aload         7
399: invokestatic  #20
402: aload         7
404: invokestatic  #92
407: ldc           #140
409: invokestatic  #23
412: aload         7
414: invokestatic  #93
417: ldc           #140
419: invokestatic  #23
422: aload         9
424: invokestatic  #20
427: aload         10
429: invokestatic  #171
432: new           #83
435: dup
436: invokespecial #84
439: ldc           #85
441: invokevirtual #86
444: aload         11
446: invokevirtual #87
449: ldc           #88
451: invokevirtual #86
454: getstatic     #168
457: invokevirtual #87
460: ldc           #85
462: invokevirtual #86
465: invokevirtual #89
468: aload         11
470: getstatic     #168
473: invokevirtual #90
476: invokestatic  #91
479: aload         14
481: invokestatic  #20
484: aload         15
486: invokestatic  #20
489: return
Exception table:
from    to  target type
172   186   189   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test140
Start line: 3470
End line: 3502
Method source code: 
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint15 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double16 = weightedObservedPoint15.getX();
        double double17 = weightedObservedPoint15.getY();
        double double18 = weightedObservedPoint15.getX();
        double double19 = weightedObservedPoint15.getY();
        double double20 = weightedObservedPoint15.getX();
        double double21 = weightedObservedPoint15.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint15);
        double[] doubleArray25 = new double[] { 100, (short) 1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = harmonicFitter1.fit(doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #322
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: dconst_0
54: ldc2_w        #12
57: ldc2_w        #10
60: invokevirtual #54
63: new           #145
66: dup
67: ldc2_w        #14
70: ldc2_w        #12
73: ldc2_w        #12
76: invokespecial #146
79: astore_3
80: aload_3
81: invokevirtual #147
84: dstore        4
86: aload_3
87: invokevirtual #149
90: dstore        6
92: aload_3
93: invokevirtual #147
96: dstore        8
98: aload_3
99: invokevirtual #149
102: dstore        10
104: aload_3
105: invokevirtual #147
108: dstore        12
110: aload_3
111: invokevirtual #147
114: dstore        14
116: aload_2
117: aload_3
118: invokevirtual #123
121: iconst_2
122: newarray       double
124: dup
125: iconst_0
126: ldc2_w        #34
129: dastore
130: dup
131: iconst_1
132: dconst_1
133: dastore
134: astore        16
136: aload_2
137: aload         16
139: invokevirtual #16
142: astore        17
144: ldc           #17
146: invokestatic  #18
149: goto          154
152: astore        17
154: new           #83
157: dup
158: invokespecial #84
161: ldc           #85
163: invokevirtual #86
166: dload         4
168: invokevirtual #150
171: ldc           #88
173: invokevirtual #86
176: ldc2_w        #12
179: invokevirtual #150
182: ldc           #85
184: invokevirtual #86
187: invokevirtual #89
190: dload         4
192: ldc2_w        #12
195: dcmpl
196: ifne          203
199: iconst_1
200: goto          204
203: iconst_0
204: invokestatic  #91
207: new           #83
210: dup
211: invokespecial #84
214: ldc           #85
216: invokevirtual #86
219: dload         6
221: invokevirtual #150
224: ldc           #88
226: invokevirtual #86
229: ldc2_w        #12
232: invokevirtual #150
235: ldc           #85
237: invokevirtual #86
240: invokevirtual #89
243: dload         6
245: ldc2_w        #12
248: dcmpl
249: ifne          256
252: iconst_1
253: goto          257
256: iconst_0
257: invokestatic  #91
260: new           #83
263: dup
264: invokespecial #84
267: ldc           #85
269: invokevirtual #86
272: dload         8
274: invokevirtual #150
277: ldc           #88
279: invokevirtual #86
282: ldc2_w        #12
285: invokevirtual #150
288: ldc           #85
290: invokevirtual #86
293: invokevirtual #89
296: dload         8
298: ldc2_w        #12
301: dcmpl
302: ifne          309
305: iconst_1
306: goto          310
309: iconst_0
310: invokestatic  #91
313: new           #83
316: dup
317: invokespecial #84
320: ldc           #85
322: invokevirtual #86
325: dload         10
327: invokevirtual #150
330: ldc           #88
332: invokevirtual #86
335: ldc2_w        #12
338: invokevirtual #150
341: ldc           #85
343: invokevirtual #86
346: invokevirtual #89
349: dload         10
351: ldc2_w        #12
354: dcmpl
355: ifne          362
358: iconst_1
359: goto          363
362: iconst_0
363: invokestatic  #91
366: new           #83
369: dup
370: invokespecial #84
373: ldc           #85
375: invokevirtual #86
378: dload         12
380: invokevirtual #150
383: ldc           #88
385: invokevirtual #86
388: ldc2_w        #12
391: invokevirtual #150
394: ldc           #85
396: invokevirtual #86
399: invokevirtual #89
402: dload         12
404: ldc2_w        #12
407: dcmpl
408: ifne          415
411: iconst_1
412: goto          416
415: iconst_0
416: invokestatic  #91
419: new           #83
422: dup
423: invokespecial #84
426: ldc           #85
428: invokevirtual #86
431: dload         14
433: invokevirtual #150
436: ldc           #88
438: invokevirtual #86
441: ldc2_w        #12
444: invokevirtual #150
447: ldc           #85
449: invokevirtual #86
452: invokevirtual #89
455: dload         14
457: ldc2_w        #12
460: dcmpl
461: ifne          468
464: iconst_1
465: goto          469
468: iconst_0
469: invokestatic  #91
472: aload         16
474: invokestatic  #20
477: aload         16
479: invokestatic  #21
482: ldc           #116
484: invokestatic  #23
487: return
Exception table:
from    to  target type
136   149   152   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test141
Start line: 3505
End line: 3525
Method source code: 
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        java.lang.Number number2 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number2, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer6 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter7 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer6);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter7.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter7.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter7.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException4, (org.apache.commons.math3.exception.util.Localizable) localizedFormats5, (java.lang.Object[]) weightedObservedPointArray10);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException12 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable0, (java.lang.Object[]) weightedObservedPointArray10);
        java.lang.Class<?> wildcardClass13 = mathIllegalArgumentException12.getClass();
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #323
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: aconst_null
28: astore_2
29: new           #28
32: dup
33: ldc2_w        #252
36: invokestatic  #129
39: aload_2
40: iconst_1
41: invokespecial #160
44: astore_3
45: getstatic     #254
48: astore        4
50: aconst_null
51: astore        5
53: new           #8
56: dup
57: aload         5
59: invokespecial #9
62: astore        6
64: aload         6
66: invokevirtual #25
69: astore        7
71: aload         6
73: invokevirtual #25
76: astore        8
78: aload         6
80: invokevirtual #25
83: astore        9
85: new           #136
88: dup
89: aload_3
90: aload         4
92: aload         9
94: checkcast     #79
97: invokespecial #137
100: astore        10
102: new           #130
105: dup
106: aload_1
107: aload         9
109: checkcast     #79
112: invokespecial #131
115: astore        11
117: aload         11
119: invokevirtual #98
122: astore        12
124: new           #83
127: dup
128: invokespecial #84
131: ldc           #85
133: invokevirtual #86
136: aload         4
138: invokevirtual #87
141: ldc           #88
143: invokevirtual #86
146: getstatic     #254
149: invokevirtual #87
152: ldc           #85
154: invokevirtual #86
157: invokevirtual #89
160: aload         4
162: getstatic     #254
165: invokevirtual #90
168: invokestatic  #91
171: aload         7
173: invokestatic  #20
176: aload         8
178: invokestatic  #20
181: aload         9
183: invokestatic  #20
186: aload         12
188: invokestatic  #20
191: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test142
Start line: 3528
End line: 3547
Method source code: 
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        harmonicFitter1.addObservedPoint((double) (short) 0, (double) (short) 0);
        double[] doubleArray21 = new double[] { 10, 0L, (short) 10, 100L, ' ', (short) -1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = harmonicFitter1.fit(doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0, 0.0, 10.0, 100.0, 32.0, -1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #324
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: dconst_0
54: ldc2_w        #12
57: ldc2_w        #10
60: invokevirtual #54
63: aload_2
64: dconst_0
65: dconst_0
66: invokevirtual #43
69: bipush        6
71: newarray       double
73: dup
74: iconst_0
75: ldc2_w        #32
78: dastore
79: dup
80: iconst_1
81: dconst_0
82: dastore
83: dup
84: iconst_2
85: ldc2_w        #32
88: dastore
89: dup
90: iconst_3
91: ldc2_w        #34
94: dastore
95: dup
96: iconst_4
97: ldc2_w        #38
100: dastore
101: dup
102: iconst_5
103: ldc2_w        #10
106: dastore
107: astore_3
108: aload_2
109: aload_3
110: invokevirtual #16
113: astore        4
115: ldc           #17
117: invokestatic  #18
120: goto          125
123: astore        4
125: aload_3
126: invokestatic  #20
129: aload_3
130: invokestatic  #21
133: ldc_w         #325
136: invokestatic  #23
139: return
Exception table:
from    to  target type
108   120   123   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test143
Start line: 3550
End line: 3675
Method source code: 
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_SIZE;
        java.lang.Object[] objArray1 = null;
        org.apache.commons.math3.exception.ZeroException zeroException2 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray1);
        java.lang.Number number3 = zeroException2.getArgument();
        org.apache.commons.math3.exception.util.Localizable localizable4 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats10 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats11 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray15 = new java.lang.Object[] { localizedFormats11, localizedFormats12, localizedFormats13, localizedFormats14 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException16 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException9, (org.apache.commons.math3.exception.util.Localizable) localizedFormats10, objArray15);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException21 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray22 = numberIsTooSmallException21.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException23 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalStateException16, (org.apache.commons.math3.exception.util.Localizable) localizedFormats17, (java.lang.Object[]) throwableArray22);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext24 = mathIllegalStateException16.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats25 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION;
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.ZeroException zeroException27 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, objArray26);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException31 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, (java.lang.Number) (short) 0, (java.lang.Number) 0L, true);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException35 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray36 = numberIsTooSmallException35.getSuppressed();
        java.lang.Object[] objArray37 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) throwableArray36);
        exceptionContext24.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, objArray37);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats39 = org.apache.commons.math3.exception.util.LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats40 = org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats41 = org.apache.commons.math3.exception.util.LocalizedFormats.INDEX;
        java.lang.Number number43 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException45 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number43, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats46 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException48 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException45, (org.apache.commons.math3.exception.util.Localizable) localizedFormats46, objArray47);
        boolean boolean49 = numberIsTooSmallException45.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext50 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException45);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats51 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats52 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray54 = new java.lang.Object[] { localizedFormats52, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException55 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats51, objArray54);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats56 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats57 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray59 = new java.lang.Object[] { localizedFormats57, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException60 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats56, objArray59);
        mathIllegalArgumentException55.addSuppressed((java.lang.Throwable) mathIllegalArgumentException60);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext62 = mathIllegalArgumentException55.getContext();
        java.lang.Object obj64 = exceptionContext62.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats65 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer66 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter67 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer66);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray68 = harmonicFitter67.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray69 = harmonicFitter67.getObservations();
        exceptionContext62.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats65, (java.lang.Object[]) weightedObservedPointArray69);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats71 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer72 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter73 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer72);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray74 = harmonicFitter73.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException75 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats71, (java.lang.Object[]) weightedObservedPointArray74);
        exceptionContext50.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats65, (java.lang.Object[]) weightedObservedPointArray74);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException77 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats41, (java.lang.Object[]) weightedObservedPointArray74);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException78 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats40, (java.lang.Object[]) weightedObservedPointArray74);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException79 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats39, (java.lang.Object[]) weightedObservedPointArray74);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException80 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, (java.lang.Object[]) weightedObservedPointArray74);
        java.lang.Object[] objArray81 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray74);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException82 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) zeroException2, localizable4, (java.lang.Object[]) weightedObservedPointArray74);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_SIZE + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_SIZE));
        org.junit.Assert.assertEquals("'" + number3 + "' != '" + 0 + "'", number3, 0);
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats10 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats10.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats11 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats11.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE));
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(exceptionContext24);
        org.junit.Assert.assertTrue("'" + localizedFormats25 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION + "'", localizedFormats25.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION));
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + localizedFormats39 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC + "'", localizedFormats39.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC));
        org.junit.Assert.assertTrue("'" + localizedFormats40 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE + "'", localizedFormats40.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE));
        org.junit.Assert.assertTrue("'" + localizedFormats41 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INDEX + "'", localizedFormats41.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX));
        org.junit.Assert.assertTrue("'" + localizedFormats46 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats46.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats51 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats51.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats52 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats52.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats56 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats56.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats57 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats57.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext62);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + localizedFormats65 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats65.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray68);
        org.junit.Assert.assertNotNull(weightedObservedPointArray69);
        org.junit.Assert.assertTrue("'" + localizedFormats71 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats71.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray74);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #326
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #327
28: astore_1
29: aconst_null
30: astore_2
31: new           #81
34: dup
35: aload_1
36: aload_2
37: invokespecial #82
40: astore_3
41: aload_3
42: invokevirtual #243
45: astore        4
47: aconst_null
48: astore        5
50: getstatic     #127
53: astore        6
55: getstatic     #128
58: astore        7
60: iconst_2
61: anewarray     #5
64: dup
65: iconst_0
66: aload         7
68: aastore
69: dup
70: iconst_1
71: lconst_1
72: invokestatic  #129
75: aastore
76: astore        8
78: new           #130
81: dup
82: aload         6
84: aload         8
86: invokespecial #131
89: astore        9
91: getstatic     #328
94: astore        10
96: getstatic     #329
99: astore        11
101: getstatic     #330
104: astore        12
106: getstatic     #331
109: astore        13
111: getstatic     #332
114: astore        14
116: iconst_4
117: anewarray     #5
120: dup
121: iconst_0
122: aload         11
124: aastore
125: dup
126: iconst_1
127: aload         12
129: aastore
130: dup
131: iconst_2
132: aload         13
134: aastore
135: dup
136: iconst_3
137: aload         14
139: aastore
140: astore        15
142: new           #136
145: dup
146: aload         9
148: aload         10
150: aload         15
152: invokespecial #137
155: astore        16
157: getstatic     #333
160: astore        17
162: new           #28
165: dup
166: ldc2_w        #277
169: invokestatic  #129
172: bipush        10
174: invokestatic  #159
177: iconst_1
178: invokespecial #160
181: astore        18
183: aload         18
185: invokevirtual #334
188: astore        19
190: new           #136
193: dup
194: aload         16
196: aload         17
198: aload         19
200: checkcast     #79
203: invokespecial #137
206: astore        20
208: aload         16
210: invokevirtual #282
213: astore        21
215: getstatic     #335
218: astore        22
220: iconst_0
221: anewarray     #5
224: astore        23
226: new           #81
229: dup
230: aload         22
232: aload         23
234: invokespecial #82
237: astore        24
239: new           #28
242: dup
243: aload         22
245: iconst_0
246: invokestatic  #194
249: lconst_0
250: invokestatic  #129
253: iconst_1
254: invokespecial #195
257: astore        25
259: new           #28
262: dup
263: ldc2_w        #277
266: invokestatic  #129
269: bipush        10
271: invokestatic  #159
274: iconst_1
275: invokespecial #160
278: astore        26
280: aload         26
282: invokevirtual #334
285: astore        27
287: aload         27
289: checkcast     #79
292: invokestatic  #80
295: astore        28
297: aload         21
299: aload         22
301: aload         28
303: invokevirtual #169
306: getstatic     #270
309: astore        29
311: getstatic     #230
314: astore        30
316: getstatic     #231
319: astore        31
321: aconst_null
322: astore        32
324: new           #28
327: dup
328: bipush        100
330: invokestatic  #159
333: aload         32
335: iconst_0
336: invokespecial #160
339: astore        33
341: getstatic     #161
344: astore        34
346: iconst_0
347: anewarray     #5
350: astore        35
352: new           #136
355: dup
356: aload         33
358: aload         34
360: aload         35
362: invokespecial #137
365: astore        36
367: aload         33
369: invokevirtual #162
372: istore        37
374: new           #163
377: dup
378: aload         33
380: invokespecial #164
383: astore        38
385: getstatic     #127
388: astore        39
390: getstatic     #128
393: astore        40
395: iconst_2
396: anewarray     #5
399: dup
400: iconst_0
401: aload         40
403: aastore
404: dup
405: iconst_1
406: lconst_1
407: invokestatic  #129
410: aastore
411: astore        41
413: new           #130
416: dup
417: aload         39
419: aload         41
421: invokespecial #131
424: astore        42
426: getstatic     #127
429: astore        43
431: getstatic     #128
434: astore        44
436: iconst_2
437: anewarray     #5
440: dup
441: iconst_0
442: aload         44
444: aastore
445: dup
446: iconst_1
447: lconst_1
448: invokestatic  #129
451: aastore
452: astore        45
454: new           #130
457: dup
458: aload         43
460: aload         45
462: invokespecial #131
465: astore        46
467: aload         42
469: aload         46
471: invokevirtual #132
474: aload         42
476: invokevirtual #165
479: astore        47
481: aload         47
483: ldc           #166
485: invokevirtual #167
488: astore        48
490: getstatic     #168
493: astore        49
495: aconst_null
496: astore        50
498: new           #8
501: dup
502: aload         50
504: invokespecial #9
507: astore        51
509: aload         51
511: invokevirtual #25
514: astore        52
516: aload         51
518: invokevirtual #25
521: astore        53
523: aload         47
525: aload         49
527: aload         53
529: checkcast     #79
532: invokevirtual #169
535: getstatic     #156
538: astore        54
540: aconst_null
541: astore        55
543: new           #8
546: dup
547: aload         55
549: invokespecial #9
552: astore        56
554: aload         56
556: invokevirtual #25
559: astore        57
561: new           #81
564: dup
565: aload         54
567: aload         57
569: checkcast     #79
572: invokespecial #82
575: astore        58
577: aload         38
579: aload         49
581: aload         57
583: checkcast     #79
586: invokevirtual #169
589: new           #130
592: dup
593: aload         31
595: aload         57
597: checkcast     #79
600: invokespecial #131
603: astore        59
605: new           #130
608: dup
609: aload         30
611: aload         57
613: checkcast     #79
616: invokespecial #131
619: astore        60
621: new           #130
624: dup
625: aload         29
627: aload         57
629: checkcast     #79
632: invokespecial #131
635: astore        61
637: new           #136
640: dup
641: aload         22
643: aload         57
645: checkcast     #79
648: invokespecial #138
651: astore        62
653: aload         57
655: checkcast     #79
658: invokestatic  #80
661: astore        63
663: new           #136
666: dup
667: aload_3
668: aload         5
670: aload         57
672: checkcast     #79
675: invokespecial #137
678: astore        64
680: new           #83
683: dup
684: invokespecial #84
687: ldc           #85
689: invokevirtual #86
692: aload_1
693: invokevirtual #87
696: ldc           #88
698: invokevirtual #86
701: getstatic     #327
704: invokevirtual #87
707: ldc           #85
709: invokevirtual #86
712: invokevirtual #89
715: aload_1
716: getstatic     #327
719: invokevirtual #90
722: invokestatic  #91
725: new           #83
728: dup
729: invokespecial #84
732: ldc           #85
734: invokevirtual #86
737: aload         4
739: invokevirtual #87
742: ldc           #88
744: invokevirtual #86
747: iconst_0
748: invokevirtual #244
751: ldc           #85
753: invokevirtual #86
756: invokevirtual #89
759: aload         4
761: iconst_0
762: invokestatic  #135
765: invokestatic  #245
768: new           #83
771: dup
772: invokespecial #84
775: ldc           #85
777: invokevirtual #86
780: aload         6
782: invokevirtual #87
785: ldc           #88
787: invokevirtual #86
790: getstatic     #127
793: invokevirtual #87
796: ldc           #85
798: invokevirtual #86
801: invokevirtual #89
804: aload         6
806: getstatic     #127
809: invokevirtual #90
812: invokestatic  #91
815: new           #83
818: dup
819: invokespecial #84
822: ldc           #85
824: invokevirtual #86
827: aload         7
829: invokevirtual #87
832: ldc           #88
834: invokevirtual #86
837: getstatic     #128
840: invokevirtual #87
843: ldc           #85
845: invokevirtual #86
848: invokevirtual #89
851: aload         7
853: getstatic     #128
856: invokevirtual #90
859: invokestatic  #91
862: aload         8
864: invokestatic  #20
867: aload         8
869: invokestatic  #92
872: ldc           #140
874: invokestatic  #23
877: aload         8
879: invokestatic  #93
882: ldc           #140
884: invokestatic  #23
887: new           #83
890: dup
891: invokespecial #84
894: ldc           #85
896: invokevirtual #86
899: aload         10
901: invokevirtual #87
904: ldc           #88
906: invokevirtual #86
909: getstatic     #328
912: invokevirtual #87
915: ldc           #85
917: invokevirtual #86
920: invokevirtual #89
923: aload         10
925: getstatic     #328
928: invokevirtual #90
931: invokestatic  #91
934: new           #83
937: dup
938: invokespecial #84
941: ldc           #85
943: invokevirtual #86
946: aload         11
948: invokevirtual #87
951: ldc           #88
953: invokevirtual #86
956: getstatic     #329
959: invokevirtual #87
962: ldc           #85
964: invokevirtual #86
967: invokevirtual #89
970: aload         11
972: getstatic     #329
975: invokevirtual #90
978: invokestatic  #91
981: new           #83
984: dup
985: invokespecial #84
988: ldc           #85
990: invokevirtual #86
993: aload         12
995: invokevirtual #87
998: ldc           #88
1000: invokevirtual #86
1003: getstatic     #330
1006: invokevirtual #87
1009: ldc           #85
1011: invokevirtual #86
1014: invokevirtual #89
1017: aload         12
1019: getstatic     #330
1022: invokevirtual #90
1025: invokestatic  #91
1028: new           #83
1031: dup
1032: invokespecial #84
1035: ldc           #85
1037: invokevirtual #86
1040: aload         13
1042: invokevirtual #87
1045: ldc           #88
1047: invokevirtual #86
1050: getstatic     #331
1053: invokevirtual #87
1056: ldc           #85
1058: invokevirtual #86
1061: invokevirtual #89
1064: aload         13
1066: getstatic     #331
1069: invokevirtual #90
1072: invokestatic  #91
1075: new           #83
1078: dup
1079: invokespecial #84
1082: ldc           #85
1084: invokevirtual #86
1087: aload         14
1089: invokevirtual #87
1092: ldc           #88
1094: invokevirtual #86
1097: getstatic     #332
1100: invokevirtual #87
1103: ldc           #85
1105: invokevirtual #86
1108: invokevirtual #89
1111: aload         14
1113: getstatic     #332
1116: invokevirtual #90
1119: invokestatic  #91
1122: aload         15
1124: invokestatic  #20
1127: aload         15
1129: invokestatic  #92
1132: ldc_w         #336
1135: invokestatic  #23
1138: aload         15
1140: invokestatic  #93
1143: ldc_w         #336
1146: invokestatic  #23
1149: new           #83
1152: dup
1153: invokespecial #84
1156: ldc           #85
1158: invokevirtual #86
1161: aload         17
1163: invokevirtual #87
1166: ldc           #88
1168: invokevirtual #86
1171: getstatic     #333
1174: invokevirtual #87
1177: ldc           #85
1179: invokevirtual #86
1182: invokevirtual #89
1185: aload         17
1187: getstatic     #333
1190: invokevirtual #90
1193: invokestatic  #91
1196: aload         19
1198: invokestatic  #20
1201: aload         21
1203: invokestatic  #20
1206: new           #83
1209: dup
1210: invokespecial #84
1213: ldc           #85
1215: invokevirtual #86
1218: aload         22
1220: invokevirtual #87
1223: ldc           #88
1225: invokevirtual #86
1228: getstatic     #335
1231: invokevirtual #87
1234: ldc           #85
1236: invokevirtual #86
1239: invokevirtual #89
1242: aload         22
1244: getstatic     #335
1247: invokevirtual #90
1250: invokestatic  #91
1253: aload         23
1255: invokestatic  #20
1258: aload         23
1260: invokestatic  #92
1263: ldc           #74
1265: invokestatic  #23
1268: aload         23
1270: invokestatic  #93
1273: ldc           #74
1275: invokestatic  #23
1278: aload         27
1280: invokestatic  #20
1283: aload         28
1285: invokestatic  #20
1288: aload         28
1290: invokestatic  #92
1293: ldc           #74
1295: invokestatic  #23
1298: aload         28
1300: invokestatic  #93
1303: ldc           #74
1305: invokestatic  #23
1308: new           #83
1311: dup
1312: invokespecial #84
1315: ldc           #85
1317: invokevirtual #86
1320: aload         29
1322: invokevirtual #87
1325: ldc           #88
1327: invokevirtual #86
1330: getstatic     #270
1333: invokevirtual #87
1336: ldc           #85
1338: invokevirtual #86
1341: invokevirtual #89
1344: aload         29
1346: getstatic     #270
1349: invokevirtual #90
1352: invokestatic  #91
1355: new           #83
1358: dup
1359: invokespecial #84
1362: ldc           #85
1364: invokevirtual #86
1367: aload         30
1369: invokevirtual #87
1372: ldc           #88
1374: invokevirtual #86
1377: getstatic     #230
1380: invokevirtual #87
1383: ldc           #85
1385: invokevirtual #86
1388: invokevirtual #89
1391: aload         30
1393: getstatic     #230
1396: invokevirtual #90
1399: invokestatic  #91
1402: new           #83
1405: dup
1406: invokespecial #84
1409: ldc           #85
1411: invokevirtual #86
1414: aload         31
1416: invokevirtual #87
1419: ldc           #88
1421: invokevirtual #86
1424: getstatic     #231
1427: invokevirtual #87
1430: ldc           #85
1432: invokevirtual #86
1435: invokevirtual #89
1438: aload         31
1440: getstatic     #231
1443: invokevirtual #90
1446: invokestatic  #91
1449: new           #83
1452: dup
1453: invokespecial #84
1456: ldc           #85
1458: invokevirtual #86
1461: aload         34
1463: invokevirtual #87
1466: ldc           #88
1468: invokevirtual #86
1471: getstatic     #161
1474: invokevirtual #87
1477: ldc           #85
1479: invokevirtual #86
1482: invokevirtual #89
1485: aload         34
1487: getstatic     #161
1490: invokevirtual #90
1493: invokestatic  #91
1496: aload         35
1498: invokestatic  #20
1501: aload         35
1503: invokestatic  #92
1506: ldc           #74
1508: invokestatic  #23
1511: aload         35
1513: invokestatic  #93
1516: ldc           #74
1518: invokestatic  #23
1521: new           #83
1524: dup
1525: invokespecial #84
1528: ldc           #85
1530: invokevirtual #86
1533: iload         37
1535: invokevirtual #170
1538: ldc           #88
1540: invokevirtual #86
1543: iconst_0
1544: invokevirtual #170
1547: ldc           #85
1549: invokevirtual #86
1552: invokevirtual #89
1555: iload         37
1557: ifne          1564
1560: iconst_1
1561: goto          1565
1564: iconst_0
1565: invokestatic  #91
1568: new           #83
1571: dup
1572: invokespecial #84
1575: ldc           #85
1577: invokevirtual #86
1580: aload         39
1582: invokevirtual #87
1585: ldc           #88
1587: invokevirtual #86
1590: getstatic     #127
1593: invokevirtual #87
1596: ldc           #85
1598: invokevirtual #86
1601: invokevirtual #89
1604: aload         39
1606: getstatic     #127
1609: invokevirtual #90
1612: invokestatic  #91
1615: new           #83
1618: dup
1619: invokespecial #84
1622: ldc           #85
1624: invokevirtual #86
1627: aload         40
1629: invokevirtual #87
1632: ldc           #88
1634: invokevirtual #86
1637: getstatic     #128
1640: invokevirtual #87
1643: ldc           #85
1645: invokevirtual #86
1648: invokevirtual #89
1651: aload         40
1653: getstatic     #128
1656: invokevirtual #90
1659: invokestatic  #91
1662: aload         41
1664: invokestatic  #20
1667: aload         41
1669: invokestatic  #92
1672: ldc           #140
1674: invokestatic  #23
1677: aload         41
1679: invokestatic  #93
1682: ldc           #140
1684: invokestatic  #23
1687: new           #83
1690: dup
1691: invokespecial #84
1694: ldc           #85
1696: invokevirtual #86
1699: aload         43
1701: invokevirtual #87
1704: ldc           #88
1706: invokevirtual #86
1709: getstatic     #127
1712: invokevirtual #87
1715: ldc           #85
1717: invokevirtual #86
1720: invokevirtual #89
1723: aload         43
1725: getstatic     #127
1728: invokevirtual #90
1731: invokestatic  #91
1734: new           #83
1737: dup
1738: invokespecial #84
1741: ldc           #85
1743: invokevirtual #86
1746: aload         44
1748: invokevirtual #87
1751: ldc           #88
1753: invokevirtual #86
1756: getstatic     #128
1759: invokevirtual #87
1762: ldc           #85
1764: invokevirtual #86
1767: invokevirtual #89
1770: aload         44
1772: getstatic     #128
1775: invokevirtual #90
1778: invokestatic  #91
1781: aload         45
1783: invokestatic  #20
1786: aload         45
1788: invokestatic  #92
1791: ldc           #140
1793: invokestatic  #23
1796: aload         45
1798: invokestatic  #93
1801: ldc           #140
1803: invokestatic  #23
1806: aload         47
1808: invokestatic  #20
1811: aload         48
1813: invokestatic  #171
1816: new           #83
1819: dup
1820: invokespecial #84
1823: ldc           #85
1825: invokevirtual #86
1828: aload         49
1830: invokevirtual #87
1833: ldc           #88
1835: invokevirtual #86
1838: getstatic     #168
1841: invokevirtual #87
1844: ldc           #85
1846: invokevirtual #86
1849: invokevirtual #89
1852: aload         49
1854: getstatic     #168
1857: invokevirtual #90
1860: invokestatic  #91
1863: aload         52
1865: invokestatic  #20
1868: aload         53
1870: invokestatic  #20
1873: new           #83
1876: dup
1877: invokespecial #84
1880: ldc           #85
1882: invokevirtual #86
1885: aload         54
1887: invokevirtual #87
1890: ldc           #88
1892: invokevirtual #86
1895: getstatic     #156
1898: invokevirtual #87
1901: ldc           #85
1903: invokevirtual #86
1906: invokevirtual #89
1909: aload         54
1911: getstatic     #156
1914: invokevirtual #90
1917: invokestatic  #91
1920: aload         57
1922: invokestatic  #20
1925: aload         63
1927: invokestatic  #20
1930: aload         63
1932: invokestatic  #92
1935: ldc           #74
1937: invokestatic  #23
1940: aload         63
1942: invokestatic  #93
1945: ldc           #74
1947: invokestatic  #23
1950: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test144
Start line: 3678
End line: 3699
Method source code: 
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) 0, 0.0d, (double) 100.0f);
        double[] doubleArray17 = new double[] { 10.0d, (-1.0f), 35.0d, 1.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = harmonicFitter1.fit(doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, -1.0, 35.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #337
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: ldc2_w        #34
49: ldc2_w        #10
52: ldc2_w        #10
55: invokevirtual #54
58: aload_2
59: invokevirtual #59
62: aload_2
63: dconst_0
64: dconst_0
65: ldc2_w        #34
68: invokevirtual #54
71: iconst_4
72: newarray       double
74: dup
75: iconst_0
76: ldc2_w        #32
79: dastore
80: dup
81: iconst_1
82: ldc2_w        #10
85: dastore
86: dup
87: iconst_2
88: ldc2_w        #14
91: dastore
92: dup
93: iconst_3
94: dconst_1
95: dastore
96: astore        4
98: aload_2
99: aload         4
101: invokevirtual #16
104: astore        5
106: ldc           #17
108: invokestatic  #18
111: goto          116
114: astore        5
116: aload_3
117: invokestatic  #20
120: aload         4
122: invokestatic  #20
125: aload         4
127: invokestatic  #21
130: ldc_w         #338
133: invokestatic  #23
136: return
Exception table:
from    to  target type
98   111   114   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test145
Start line: 3702
End line: 3742
Method source code: 
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.addObservedPoint((double) (-1), (double) (byte) 1);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer17 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter18 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer17);
        harmonicFitter18.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter18.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray25 = harmonicFitter18.getObservations();
        harmonicFitter18.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint33 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double34 = weightedObservedPoint33.getWeight();
        double double35 = weightedObservedPoint33.getX();
        double double36 = weightedObservedPoint33.getX();
        double double37 = weightedObservedPoint33.getWeight();
        harmonicFitter18.addObservedPoint(weightedObservedPoint33);
        harmonicFitter1.addObservedPoint(weightedObservedPoint33);
        double[] doubleArray43 = new double[] { (byte) -1, 10L, (-1.0d) };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray44 = harmonicFitter1.fit(doubleArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray25);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 10.0, -1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #339
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload_2
78: ldc2_w        #10
81: dconst_1
82: invokevirtual #43
85: aconst_null
86: astore        5
88: new           #8
91: dup
92: aload         5
94: invokespecial #9
97: astore        6
99: aload         6
101: dconst_1
102: ldc2_w        #32
105: invokevirtual #43
108: aload         6
110: dconst_0
111: ldc2_w        #34
114: invokevirtual #43
117: aload         6
119: invokevirtual #25
122: astore        7
124: aload         6
126: dconst_0
127: dconst_1
128: ldc2_w        #34
131: invokevirtual #54
134: new           #145
137: dup
138: ldc2_w        #14
141: ldc2_w        #12
144: ldc2_w        #12
147: invokespecial #146
150: astore        8
152: aload         8
154: invokevirtual #148
157: dstore        9
159: aload         8
161: invokevirtual #147
164: dstore        11
166: aload         8
168: invokevirtual #147
171: dstore        13
173: aload         8
175: invokevirtual #148
178: dstore        15
180: aload         6
182: aload         8
184: invokevirtual #123
187: aload_2
188: aload         8
190: invokevirtual #123
193: iconst_3
194: newarray       double
196: dup
197: iconst_0
198: ldc2_w        #10
201: dastore
202: dup
203: iconst_1
204: ldc2_w        #32
207: dastore
208: dup
209: iconst_2
210: ldc2_w        #10
213: dastore
214: astore        17
216: aload_2
217: aload         17
219: invokevirtual #16
222: astore        18
224: ldc           #17
226: invokestatic  #18
229: goto          234
232: astore        18
234: aload_3
235: invokestatic  #20
238: aload         7
240: invokestatic  #20
243: new           #83
246: dup
247: invokespecial #84
250: ldc           #85
252: invokevirtual #86
255: dload         9
257: invokevirtual #150
260: ldc           #88
262: invokevirtual #86
265: ldc2_w        #14
268: invokevirtual #150
271: ldc           #85
273: invokevirtual #86
276: invokevirtual #89
279: dload         9
281: ldc2_w        #14
284: dcmpl
285: ifne          292
288: iconst_1
289: goto          293
292: iconst_0
293: invokestatic  #91
296: new           #83
299: dup
300: invokespecial #84
303: ldc           #85
305: invokevirtual #86
308: dload         11
310: invokevirtual #150
313: ldc           #88
315: invokevirtual #86
318: ldc2_w        #12
321: invokevirtual #150
324: ldc           #85
326: invokevirtual #86
329: invokevirtual #89
332: dload         11
334: ldc2_w        #12
337: dcmpl
338: ifne          345
341: iconst_1
342: goto          346
345: iconst_0
346: invokestatic  #91
349: new           #83
352: dup
353: invokespecial #84
356: ldc           #85
358: invokevirtual #86
361: dload         13
363: invokevirtual #150
366: ldc           #88
368: invokevirtual #86
371: ldc2_w        #12
374: invokevirtual #150
377: ldc           #85
379: invokevirtual #86
382: invokevirtual #89
385: dload         13
387: ldc2_w        #12
390: dcmpl
391: ifne          398
394: iconst_1
395: goto          399
398: iconst_0
399: invokestatic  #91
402: new           #83
405: dup
406: invokespecial #84
409: ldc           #85
411: invokevirtual #86
414: dload         15
416: invokevirtual #150
419: ldc           #88
421: invokevirtual #86
424: ldc2_w        #14
427: invokevirtual #150
430: ldc           #85
432: invokevirtual #86
435: invokevirtual #89
438: dload         15
440: ldc2_w        #14
443: dcmpl
444: ifne          451
447: iconst_1
448: goto          452
451: iconst_0
452: invokestatic  #91
455: aload         17
457: invokestatic  #20
460: aload         17
462: invokestatic  #21
465: ldc_w         #340
468: invokestatic  #23
471: return
Exception table:
from    to  target type
216   229   232   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test146
Start line: 3745
End line: 3764
Method source code: 
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #341
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: invokevirtual #59
81: aload_2
82: invokevirtual #26
85: astore        4
87: ldc           #27
89: invokestatic  #18
92: goto          97
95: astore        4
97: aload_3
98: invokestatic  #20
101: return
Exception table:
from    to  target type
81    92    95   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test147
Start line: 3767
End line: 3784
Method source code: 
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint((double) (-1), 0.0d, (double) (short) 0);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser11 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #342
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: ldc2_w        #10
48: dconst_0
49: dconst_0
50: invokevirtual #54
53: aload_2
54: invokevirtual #59
57: aload_2
58: invokevirtual #25
61: astore_3
62: new           #69
65: dup
66: aload_3
67: invokespecial #70
70: astore        4
72: ldc           #27
74: invokestatic  #18
77: goto          82
80: astore        4
82: aload_3
83: invokestatic  #20
86: return
Exception table:
from    to  target type
62    77    80   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test148
Start line: 3787
End line: 3806
Method source code: 
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        java.lang.Object[] objArray11 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray10);
        org.apache.commons.math3.exception.ZeroException zeroException12 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray10);
        java.lang.String str13 = zeroException12.toString();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math3.exception.ZeroException: 0 is larger than, or equal to, the maximum ({1})" + "'", str13, "org.apache.commons.math3.exception.ZeroException: 0 is larger than, or equal to, the maximum ({1})");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #343
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #220
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: dconst_1
42: ldc2_w        #32
45: invokevirtual #43
48: aload_3
49: dconst_0
50: ldc2_w        #34
53: invokevirtual #43
56: aload_3
57: invokevirtual #59
60: aload_3
61: invokevirtual #25
64: astore        4
66: aload         4
68: checkcast     #79
71: invokestatic  #80
74: astore        5
76: new           #81
79: dup
80: aload_1
81: aload         4
83: checkcast     #79
86: invokespecial #82
89: astore        6
91: aload         6
93: invokevirtual #344
96: astore        7
98: new           #83
101: dup
102: invokespecial #84
105: ldc           #85
107: invokevirtual #86
110: aload_1
111: invokevirtual #87
114: ldc           #88
116: invokevirtual #86
119: getstatic     #220
122: invokevirtual #87
125: ldc           #85
127: invokevirtual #86
130: invokevirtual #89
133: aload_1
134: getstatic     #220
137: invokevirtual #90
140: invokestatic  #91
143: aload         4
145: invokestatic  #20
148: aload         5
150: invokestatic  #20
153: aload         5
155: invokestatic  #92
158: ldc           #74
160: invokestatic  #23
163: aload         5
165: invokestatic  #93
168: ldc           #74
170: invokestatic  #23
173: new           #83
176: dup
177: invokespecial #84
180: ldc           #85
182: invokevirtual #86
185: aload         7
187: invokevirtual #86
190: ldc_w         #345
193: invokevirtual #86
196: invokevirtual #89
199: aload         7
201: ldc_w         #346
204: invokestatic  #245
207: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test149
Start line: 3809
End line: 3830
Method source code: 
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 0, 10.0d);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric14 = null;
        double[] doubleArray18 = new double[] { 100, 1.0f, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = harmonicFitter1.fit((-1), parametric14, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 1.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #347
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: dconst_0
62: ldc2_w        #32
65: invokevirtual #43
68: aconst_null
69: astore_3
70: iconst_3
71: newarray       double
73: dup
74: iconst_0
75: ldc2_w        #34
78: dastore
79: dup
80: iconst_1
81: dconst_1
82: dastore
83: dup
84: iconst_2
85: ldc2_w        #32
88: dastore
89: astore        4
91: aload_2
92: iconst_m1
93: aload_3
94: aload         4
96: invokevirtual #40
99: astore        5
101: ldc           #17
103: invokestatic  #18
106: goto          111
109: astore        5
111: aload         4
113: invokestatic  #20
116: aload         4
118: invokestatic  #21
121: ldc_w         #348
124: invokestatic  #23
127: return
Exception table:
from    to  target type
91   106   109   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test150
Start line: 3833
End line: 3898
Method source code: 
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.INDEX;
        java.lang.Number number4 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException6 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number4, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException9 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException6, (org.apache.commons.math3.exception.util.Localizable) localizedFormats7, objArray8);
        boolean boolean10 = numberIsTooSmallException6.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext11 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException6);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray15 = new java.lang.Object[] { localizedFormats13, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException16 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats12, objArray15);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats18 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray20 = new java.lang.Object[] { localizedFormats18, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException21 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats17, objArray20);
        mathIllegalArgumentException16.addSuppressed((java.lang.Throwable) mathIllegalArgumentException21);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext23 = mathIllegalArgumentException16.getContext();
        java.lang.Object obj25 = exceptionContext23.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats26 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer27 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter28 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer27);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray29 = harmonicFitter28.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray30 = harmonicFitter28.getObservations();
        exceptionContext23.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats26, (java.lang.Object[]) weightedObservedPointArray30);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats32 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer33 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter34 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer33);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray35 = harmonicFitter34.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException36 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats32, (java.lang.Object[]) weightedObservedPointArray35);
        exceptionContext11.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats26, (java.lang.Object[]) weightedObservedPointArray35);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException38 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats2, (java.lang.Object[]) weightedObservedPointArray35);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException39 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) weightedObservedPointArray35);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException40 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray35);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException44 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Number) (-1), (java.lang.Number) 10.0f, false);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INDEX + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats18 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats18.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + localizedFormats26 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats26.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray29);
        org.junit.Assert.assertNotNull(weightedObservedPointArray30);
        org.junit.Assert.assertTrue("'" + localizedFormats32 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats32.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray35);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #349
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #270
28: astore_1
29: getstatic     #230
32: astore_2
33: getstatic     #231
36: astore_3
37: aconst_null
38: astore        4
40: new           #28
43: dup
44: bipush        100
46: invokestatic  #159
49: aload         4
51: iconst_0
52: invokespecial #160
55: astore        5
57: getstatic     #161
60: astore        6
62: iconst_0
63: anewarray     #5
66: astore        7
68: new           #136
71: dup
72: aload         5
74: aload         6
76: aload         7
78: invokespecial #137
81: astore        8
83: aload         5
85: invokevirtual #162
88: istore        9
90: new           #163
93: dup
94: aload         5
96: invokespecial #164
99: astore        10
101: getstatic     #127
104: astore        11
106: getstatic     #128
109: astore        12
111: iconst_2
112: anewarray     #5
115: dup
116: iconst_0
117: aload         12
119: aastore
120: dup
121: iconst_1
122: lconst_1
123: invokestatic  #129
126: aastore
127: astore        13
129: new           #130
132: dup
133: aload         11
135: aload         13
137: invokespecial #131
140: astore        14
142: getstatic     #127
145: astore        15
147: getstatic     #128
150: astore        16
152: iconst_2
153: anewarray     #5
156: dup
157: iconst_0
158: aload         16
160: aastore
161: dup
162: iconst_1
163: lconst_1
164: invokestatic  #129
167: aastore
168: astore        17
170: new           #130
173: dup
174: aload         15
176: aload         17
178: invokespecial #131
181: astore        18
183: aload         14
185: aload         18
187: invokevirtual #132
190: aload         14
192: invokevirtual #165
195: astore        19
197: aload         19
199: ldc           #166
201: invokevirtual #167
204: astore        20
206: getstatic     #168
209: astore        21
211: aconst_null
212: astore        22
214: new           #8
217: dup
218: aload         22
220: invokespecial #9
223: astore        23
225: aload         23
227: invokevirtual #25
230: astore        24
232: aload         23
234: invokevirtual #25
237: astore        25
239: aload         19
241: aload         21
243: aload         25
245: checkcast     #79
248: invokevirtual #169
251: getstatic     #156
254: astore        26
256: aconst_null
257: astore        27
259: new           #8
262: dup
263: aload         27
265: invokespecial #9
268: astore        28
270: aload         28
272: invokevirtual #25
275: astore        29
277: new           #81
280: dup
281: aload         26
283: aload         29
285: checkcast     #79
288: invokespecial #82
291: astore        30
293: aload         10
295: aload         21
297: aload         29
299: checkcast     #79
302: invokevirtual #169
305: new           #130
308: dup
309: aload_3
310: aload         29
312: checkcast     #79
315: invokespecial #131
318: astore        31
320: new           #130
323: dup
324: aload_2
325: aload         29
327: checkcast     #79
330: invokespecial #131
333: astore        32
335: new           #130
338: dup
339: aload_1
340: aload         29
342: checkcast     #79
345: invokespecial #131
348: astore        33
350: new           #28
353: dup
354: aload_1
355: iconst_m1
356: invokestatic  #135
359: ldc_w         #350
362: invokestatic  #351
365: iconst_0
366: invokespecial #195
369: astore        34
371: new           #83
374: dup
375: invokespecial #84
378: ldc           #85
380: invokevirtual #86
383: aload_1
384: invokevirtual #87
387: ldc           #88
389: invokevirtual #86
392: getstatic     #270
395: invokevirtual #87
398: ldc           #85
400: invokevirtual #86
403: invokevirtual #89
406: aload_1
407: getstatic     #270
410: invokevirtual #90
413: invokestatic  #91
416: new           #83
419: dup
420: invokespecial #84
423: ldc           #85
425: invokevirtual #86
428: aload_2
429: invokevirtual #87
432: ldc           #88
434: invokevirtual #86
437: getstatic     #230
440: invokevirtual #87
443: ldc           #85
445: invokevirtual #86
448: invokevirtual #89
451: aload_2
452: getstatic     #230
455: invokevirtual #90
458: invokestatic  #91
461: new           #83
464: dup
465: invokespecial #84
468: ldc           #85
470: invokevirtual #86
473: aload_3
474: invokevirtual #87
477: ldc           #88
479: invokevirtual #86
482: getstatic     #231
485: invokevirtual #87
488: ldc           #85
490: invokevirtual #86
493: invokevirtual #89
496: aload_3
497: getstatic     #231
500: invokevirtual #90
503: invokestatic  #91
506: new           #83
509: dup
510: invokespecial #84
513: ldc           #85
515: invokevirtual #86
518: aload         6
520: invokevirtual #87
523: ldc           #88
525: invokevirtual #86
528: getstatic     #161
531: invokevirtual #87
534: ldc           #85
536: invokevirtual #86
539: invokevirtual #89
542: aload         6
544: getstatic     #161
547: invokevirtual #90
550: invokestatic  #91
553: aload         7
555: invokestatic  #20
558: aload         7
560: invokestatic  #92
563: ldc           #74
565: invokestatic  #23
568: aload         7
570: invokestatic  #93
573: ldc           #74
575: invokestatic  #23
578: new           #83
581: dup
582: invokespecial #84
585: ldc           #85
587: invokevirtual #86
590: iload         9
592: invokevirtual #170
595: ldc           #88
597: invokevirtual #86
600: iconst_0
601: invokevirtual #170
604: ldc           #85
606: invokevirtual #86
609: invokevirtual #89
612: iload         9
614: ifne          621
617: iconst_1
618: goto          622
621: iconst_0
622: invokestatic  #91
625: new           #83
628: dup
629: invokespecial #84
632: ldc           #85
634: invokevirtual #86
637: aload         11
639: invokevirtual #87
642: ldc           #88
644: invokevirtual #86
647: getstatic     #127
650: invokevirtual #87
653: ldc           #85
655: invokevirtual #86
658: invokevirtual #89
661: aload         11
663: getstatic     #127
666: invokevirtual #90
669: invokestatic  #91
672: new           #83
675: dup
676: invokespecial #84
679: ldc           #85
681: invokevirtual #86
684: aload         12
686: invokevirtual #87
689: ldc           #88
691: invokevirtual #86
694: getstatic     #128
697: invokevirtual #87
700: ldc           #85
702: invokevirtual #86
705: invokevirtual #89
708: aload         12
710: getstatic     #128
713: invokevirtual #90
716: invokestatic  #91
719: aload         13
721: invokestatic  #20
724: aload         13
726: invokestatic  #92
729: ldc           #140
731: invokestatic  #23
734: aload         13
736: invokestatic  #93
739: ldc           #140
741: invokestatic  #23
744: new           #83
747: dup
748: invokespecial #84
751: ldc           #85
753: invokevirtual #86
756: aload         15
758: invokevirtual #87
761: ldc           #88
763: invokevirtual #86
766: getstatic     #127
769: invokevirtual #87
772: ldc           #85
774: invokevirtual #86
777: invokevirtual #89
780: aload         15
782: getstatic     #127
785: invokevirtual #90
788: invokestatic  #91
791: new           #83
794: dup
795: invokespecial #84
798: ldc           #85
800: invokevirtual #86
803: aload         16
805: invokevirtual #87
808: ldc           #88
810: invokevirtual #86
813: getstatic     #128
816: invokevirtual #87
819: ldc           #85
821: invokevirtual #86
824: invokevirtual #89
827: aload         16
829: getstatic     #128
832: invokevirtual #90
835: invokestatic  #91
838: aload         17
840: invokestatic  #20
843: aload         17
845: invokestatic  #92
848: ldc           #140
850: invokestatic  #23
853: aload         17
855: invokestatic  #93
858: ldc           #140
860: invokestatic  #23
863: aload         19
865: invokestatic  #20
868: aload         20
870: invokestatic  #171
873: new           #83
876: dup
877: invokespecial #84
880: ldc           #85
882: invokevirtual #86
885: aload         21
887: invokevirtual #87
890: ldc           #88
892: invokevirtual #86
895: getstatic     #168
898: invokevirtual #87
901: ldc           #85
903: invokevirtual #86
906: invokevirtual #89
909: aload         21
911: getstatic     #168
914: invokevirtual #90
917: invokestatic  #91
920: aload         24
922: invokestatic  #20
925: aload         25
927: invokestatic  #20
930: new           #83
933: dup
934: invokespecial #84
937: ldc           #85
939: invokevirtual #86
942: aload         26
944: invokevirtual #87
947: ldc           #88
949: invokevirtual #86
952: getstatic     #156
955: invokevirtual #87
958: ldc           #85
960: invokevirtual #86
963: invokevirtual #89
966: aload         26
968: getstatic     #156
971: invokevirtual #90
974: invokestatic  #91
977: aload         29
979: invokestatic  #20
982: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test151
Start line: 3901
End line: 3934
Method source code: 
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) -1, (-1.0d));
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric19 = null;
        double[] doubleArray20 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = harmonicFitter1.fit((int) (byte) 100, parametric19, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #352
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: invokevirtual #59
107: aload_2
108: ldc2_w        #10
111: ldc2_w        #10
114: invokevirtual #43
117: aconst_null
118: astore        14
120: iconst_0
121: newarray       double
123: astore        15
125: aload_2
126: bipush        100
128: aload         14
130: aload         15
132: invokevirtual #40
135: astore        16
137: ldc           #17
139: invokestatic  #18
142: goto          147
145: astore        16
147: aload_3
148: invokestatic  #20
151: aload         4
153: invokestatic  #20
156: new           #83
159: dup
160: invokespecial #84
163: ldc           #85
165: invokevirtual #86
168: dload         6
170: invokevirtual #150
173: ldc           #88
175: invokevirtual #86
178: ldc2_w        #12
181: invokevirtual #150
184: ldc           #85
186: invokevirtual #86
189: invokevirtual #89
192: dload         6
194: ldc2_w        #12
197: dcmpl
198: ifne          205
201: iconst_1
202: goto          206
205: iconst_0
206: invokestatic  #91
209: new           #83
212: dup
213: invokespecial #84
216: ldc           #85
218: invokevirtual #86
221: dload         8
223: invokevirtual #150
226: ldc           #88
228: invokevirtual #86
231: ldc2_w        #14
234: invokevirtual #150
237: ldc           #85
239: invokevirtual #86
242: invokevirtual #89
245: dload         8
247: ldc2_w        #14
250: dcmpl
251: ifne          258
254: iconst_1
255: goto          259
258: iconst_0
259: invokestatic  #91
262: new           #83
265: dup
266: invokespecial #84
269: ldc           #85
271: invokevirtual #86
274: dload         10
276: invokevirtual #150
279: ldc           #88
281: invokevirtual #86
284: ldc2_w        #14
287: invokevirtual #150
290: ldc           #85
292: invokevirtual #86
295: invokevirtual #89
298: dload         10
300: ldc2_w        #14
303: dcmpl
304: ifne          311
307: iconst_1
308: goto          312
311: iconst_0
312: invokestatic  #91
315: new           #83
318: dup
319: invokespecial #84
322: ldc           #85
324: invokevirtual #86
327: dload         12
329: invokevirtual #150
332: ldc           #88
334: invokevirtual #86
337: ldc2_w        #12
340: invokevirtual #150
343: ldc           #85
345: invokevirtual #86
348: invokevirtual #89
351: dload         12
353: ldc2_w        #12
356: dcmpl
357: ifne          364
360: iconst_1
361: goto          365
364: iconst_0
365: invokestatic  #91
368: aload         15
370: invokestatic  #20
373: aload         15
375: invokestatic  #21
378: ldc           #74
380: invokestatic  #23
383: return
Exception table:
from    to  target type
125   142   145   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test152
Start line: 3937
End line: 3956
Method source code: 
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric7 = null;
        double[] doubleArray14 = new double[] { 100L, 0.0d, (byte) 1, 1.0f, 10.0d, (short) 100 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = harmonicFitter1.fit(parametric7, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0, 1.0, 1.0, 10.0, 100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #353
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: invokevirtual #59
52: aconst_null
53: astore_3
54: bipush        6
56: newarray       double
58: dup
59: iconst_0
60: ldc2_w        #34
63: dastore
64: dup
65: iconst_1
66: dconst_0
67: dastore
68: dup
69: iconst_2
70: dconst_1
71: dastore
72: dup
73: iconst_3
74: dconst_1
75: dastore
76: dup
77: iconst_4
78: ldc2_w        #32
81: dastore
82: dup
83: iconst_5
84: ldc2_w        #34
87: dastore
88: astore        4
90: aload_2
91: aload_3
92: aload         4
94: invokevirtual #30
97: astore        5
99: ldc           #17
101: invokestatic  #18
104: goto          109
107: astore        5
109: aload         4
111: invokestatic  #20
114: aload         4
116: invokestatic  #21
119: ldc_w         #354
122: invokestatic  #23
125: return
Exception table:
from    to  target type
90   104   107   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test153
Start line: 3959
End line: 3978
Method source code: 
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 0, (double) (short) 10);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric14 = null;
        double[] doubleArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = harmonicFitter1.fit(0, parametric14, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #355
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: dconst_0
62: ldc2_w        #32
65: invokevirtual #43
68: aconst_null
69: astore_3
70: aconst_null
71: astore        4
73: aload_2
74: iconst_0
75: aload_3
76: aload         4
78: invokevirtual #40
81: astore        5
83: ldc           #17
85: invokestatic  #18
88: goto          93
91: astore        5
93: return
Exception table:
from    to  target type
73    88    91   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test154
Start line: 3981
End line: 4014
Method source code: 
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint15 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double16 = weightedObservedPoint15.getX();
        double double17 = weightedObservedPoint15.getY();
        double double18 = weightedObservedPoint15.getX();
        double double19 = weightedObservedPoint15.getY();
        double double20 = weightedObservedPoint15.getX();
        double double21 = weightedObservedPoint15.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint15);
        harmonicFitter1.addObservedPoint((double) (short) 0, (double) (-1L));
        double[] doubleArray32 = new double[] { 'a', 52.0d, 1, 10.0f, 0, 100.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray33 = harmonicFitter1.fit(doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[97.0, 52.0, 1.0, 10.0, 0.0, 100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #356
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: dconst_0
54: ldc2_w        #12
57: ldc2_w        #10
60: invokevirtual #54
63: new           #145
66: dup
67: ldc2_w        #14
70: ldc2_w        #12
73: ldc2_w        #12
76: invokespecial #146
79: astore_3
80: aload_3
81: invokevirtual #147
84: dstore        4
86: aload_3
87: invokevirtual #149
90: dstore        6
92: aload_3
93: invokevirtual #147
96: dstore        8
98: aload_3
99: invokevirtual #149
102: dstore        10
104: aload_3
105: invokevirtual #147
108: dstore        12
110: aload_3
111: invokevirtual #147
114: dstore        14
116: aload_2
117: aload_3
118: invokevirtual #123
121: aload_2
122: dconst_0
123: ldc2_w        #10
126: invokevirtual #43
129: bipush        6
131: newarray       double
133: dup
134: iconst_0
135: ldc2_w        #44
138: dastore
139: dup
140: iconst_1
141: ldc2_w        #12
144: dastore
145: dup
146: iconst_2
147: dconst_1
148: dastore
149: dup
150: iconst_3
151: ldc2_w        #32
154: dastore
155: dup
156: iconst_4
157: dconst_0
158: dastore
159: dup
160: iconst_5
161: ldc2_w        #34
164: dastore
165: astore        16
167: aload_2
168: aload         16
170: invokevirtual #16
173: astore        17
175: ldc           #17
177: invokestatic  #18
180: goto          185
183: astore        17
185: new           #83
188: dup
189: invokespecial #84
192: ldc           #85
194: invokevirtual #86
197: dload         4
199: invokevirtual #150
202: ldc           #88
204: invokevirtual #86
207: ldc2_w        #12
210: invokevirtual #150
213: ldc           #85
215: invokevirtual #86
218: invokevirtual #89
221: dload         4
223: ldc2_w        #12
226: dcmpl
227: ifne          234
230: iconst_1
231: goto          235
234: iconst_0
235: invokestatic  #91
238: new           #83
241: dup
242: invokespecial #84
245: ldc           #85
247: invokevirtual #86
250: dload         6
252: invokevirtual #150
255: ldc           #88
257: invokevirtual #86
260: ldc2_w        #12
263: invokevirtual #150
266: ldc           #85
268: invokevirtual #86
271: invokevirtual #89
274: dload         6
276: ldc2_w        #12
279: dcmpl
280: ifne          287
283: iconst_1
284: goto          288
287: iconst_0
288: invokestatic  #91
291: new           #83
294: dup
295: invokespecial #84
298: ldc           #85
300: invokevirtual #86
303: dload         8
305: invokevirtual #150
308: ldc           #88
310: invokevirtual #86
313: ldc2_w        #12
316: invokevirtual #150
319: ldc           #85
321: invokevirtual #86
324: invokevirtual #89
327: dload         8
329: ldc2_w        #12
332: dcmpl
333: ifne          340
336: iconst_1
337: goto          341
340: iconst_0
341: invokestatic  #91
344: new           #83
347: dup
348: invokespecial #84
351: ldc           #85
353: invokevirtual #86
356: dload         10
358: invokevirtual #150
361: ldc           #88
363: invokevirtual #86
366: ldc2_w        #12
369: invokevirtual #150
372: ldc           #85
374: invokevirtual #86
377: invokevirtual #89
380: dload         10
382: ldc2_w        #12
385: dcmpl
386: ifne          393
389: iconst_1
390: goto          394
393: iconst_0
394: invokestatic  #91
397: new           #83
400: dup
401: invokespecial #84
404: ldc           #85
406: invokevirtual #86
409: dload         12
411: invokevirtual #150
414: ldc           #88
416: invokevirtual #86
419: ldc2_w        #12
422: invokevirtual #150
425: ldc           #85
427: invokevirtual #86
430: invokevirtual #89
433: dload         12
435: ldc2_w        #12
438: dcmpl
439: ifne          446
442: iconst_1
443: goto          447
446: iconst_0
447: invokestatic  #91
450: new           #83
453: dup
454: invokespecial #84
457: ldc           #85
459: invokevirtual #86
462: dload         14
464: invokevirtual #150
467: ldc           #88
469: invokevirtual #86
472: ldc2_w        #12
475: invokevirtual #150
478: ldc           #85
480: invokevirtual #86
483: invokevirtual #89
486: dload         14
488: ldc2_w        #12
491: dcmpl
492: ifne          499
495: iconst_1
496: goto          500
499: iconst_0
500: invokestatic  #91
503: aload         16
505: invokestatic  #20
508: aload         16
510: invokestatic  #21
513: ldc_w         #357
516: invokestatic  #23
519: return
Exception table:
from    to  target type
167   180   183   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test155
Start line: 4017
End line: 4036
Method source code: 
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint19 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter8.addObservedPoint(weightedObservedPoint19);
        harmonicFitter1.addObservedPoint(weightedObservedPoint19);
        double double22 = weightedObservedPoint19.getY();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #358
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aconst_null
53: astore        4
55: new           #8
58: dup
59: aload         4
61: invokespecial #9
64: astore        5
66: aload         5
68: dconst_1
69: ldc2_w        #32
72: invokevirtual #43
75: aload         5
77: dconst_0
78: ldc2_w        #34
81: invokevirtual #43
84: aload         5
86: invokevirtual #25
89: astore        6
91: new           #145
94: dup
95: dconst_1
96: dconst_0
97: ldc2_w        #34
100: invokespecial #146
103: astore        7
105: aload         5
107: aload         7
109: invokevirtual #123
112: aload_2
113: aload         7
115: invokevirtual #123
118: aload         7
120: invokevirtual #149
123: dstore        8
125: aload_3
126: invokestatic  #20
129: aload         6
131: invokestatic  #20
134: new           #83
137: dup
138: invokespecial #84
141: ldc           #85
143: invokevirtual #86
146: dload         8
148: invokevirtual #150
151: ldc           #88
153: invokevirtual #86
156: ldc2_w        #34
159: invokevirtual #150
162: ldc           #85
164: invokevirtual #86
167: invokevirtual #89
170: dload         8
172: ldc2_w        #34
175: dcmpl
176: ifne          183
179: iconst_1
180: goto          184
183: iconst_0
184: invokestatic  #91
187: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test156
Start line: 4039
End line: 4048
Method source code: 
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(35.0d, (double) (byte) -1);
        harmonicFitter1.clearObservations();
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #359
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: ldc2_w        #14
52: ldc2_w        #10
55: invokevirtual #43
58: aload_2
59: invokevirtual #59
62: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test157
Start line: 4051
End line: 4082
Method source code: 
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer5 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter6 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer5);
        harmonicFitter6.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter6.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter6.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray14 = harmonicFitter6.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint18 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double19 = weightedObservedPoint18.getX();
        double double20 = weightedObservedPoint18.getY();
        double double21 = weightedObservedPoint18.getX();
        double double22 = weightedObservedPoint18.getY();
        harmonicFitter6.addObservedPoint(weightedObservedPoint18);
        double double24 = weightedObservedPoint18.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint18);
        harmonicFitter1.addObservedPoint((double) (short) 100, (double) 0.0f);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertNotNull(weightedObservedPointArray14);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #360
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: aconst_null
52: astore        5
54: new           #8
57: dup
58: aload         5
60: invokespecial #9
63: astore        6
65: aload         6
67: dconst_1
68: ldc2_w        #32
71: invokevirtual #43
74: aload         6
76: dconst_0
77: ldc2_w        #34
80: invokevirtual #43
83: aload         6
85: invokevirtual #59
88: aload         6
90: invokevirtual #25
93: astore        7
95: new           #145
98: dup
99: ldc2_w        #14
102: ldc2_w        #12
105: ldc2_w        #12
108: invokespecial #146
111: astore        8
113: aload         8
115: invokevirtual #147
118: dstore        9
120: aload         8
122: invokevirtual #149
125: dstore        11
127: aload         8
129: invokevirtual #147
132: dstore        13
134: aload         8
136: invokevirtual #149
139: dstore        15
141: aload         6
143: aload         8
145: invokevirtual #123
148: aload         8
150: invokevirtual #148
153: dstore        17
155: aload_2
156: aload         8
158: invokevirtual #123
161: aload_2
162: ldc2_w        #34
165: dconst_0
166: invokevirtual #43
169: aload_3
170: invokestatic  #20
173: aload         4
175: invokestatic  #20
178: aload         7
180: invokestatic  #20
183: new           #83
186: dup
187: invokespecial #84
190: ldc           #85
192: invokevirtual #86
195: dload         9
197: invokevirtual #150
200: ldc           #88
202: invokevirtual #86
205: ldc2_w        #12
208: invokevirtual #150
211: ldc           #85
213: invokevirtual #86
216: invokevirtual #89
219: dload         9
221: ldc2_w        #12
224: dcmpl
225: ifne          232
228: iconst_1
229: goto          233
232: iconst_0
233: invokestatic  #91
236: new           #83
239: dup
240: invokespecial #84
243: ldc           #85
245: invokevirtual #86
248: dload         11
250: invokevirtual #150
253: ldc           #88
255: invokevirtual #86
258: ldc2_w        #12
261: invokevirtual #150
264: ldc           #85
266: invokevirtual #86
269: invokevirtual #89
272: dload         11
274: ldc2_w        #12
277: dcmpl
278: ifne          285
281: iconst_1
282: goto          286
285: iconst_0
286: invokestatic  #91
289: new           #83
292: dup
293: invokespecial #84
296: ldc           #85
298: invokevirtual #86
301: dload         13
303: invokevirtual #150
306: ldc           #88
308: invokevirtual #86
311: ldc2_w        #12
314: invokevirtual #150
317: ldc           #85
319: invokevirtual #86
322: invokevirtual #89
325: dload         13
327: ldc2_w        #12
330: dcmpl
331: ifne          338
334: iconst_1
335: goto          339
338: iconst_0
339: invokestatic  #91
342: new           #83
345: dup
346: invokespecial #84
349: ldc           #85
351: invokevirtual #86
354: dload         15
356: invokevirtual #150
359: ldc           #88
361: invokevirtual #86
364: ldc2_w        #12
367: invokevirtual #150
370: ldc           #85
372: invokevirtual #86
375: invokevirtual #89
378: dload         15
380: ldc2_w        #12
383: dcmpl
384: ifne          391
387: iconst_1
388: goto          392
391: iconst_0
392: invokestatic  #91
395: new           #83
398: dup
399: invokespecial #84
402: ldc           #85
404: invokevirtual #86
407: dload         17
409: invokevirtual #150
412: ldc           #88
414: invokevirtual #86
417: ldc2_w        #14
420: invokevirtual #150
423: ldc           #85
425: invokevirtual #86
428: invokevirtual #89
431: dload         17
433: ldc2_w        #14
436: dcmpl
437: ifne          444
440: iconst_1
441: goto          445
444: iconst_0
445: invokestatic  #91
448: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test158
Start line: 4085
End line: 4103
Method source code: 
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser11 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 2 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #361
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: invokevirtual #25
66: astore        4
68: new           #69
71: dup
72: aload         4
74: invokespecial #70
77: astore        5
79: ldc           #186
81: invokestatic  #18
84: goto          89
87: astore        5
89: aload_3
90: invokestatic  #20
93: aload         4
95: invokestatic  #20
98: return
Exception table:
from    to  target type
68    84    87   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test159
Start line: 4106
End line: 4211
Method source code: 
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_SIZE;
        java.lang.Number number2 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number2, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException7 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException4, (org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray6);
        boolean boolean8 = numberIsTooSmallException4.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext9 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException4);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats10 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats11 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray13 = new java.lang.Object[] { localizedFormats11, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException14 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats10, objArray13);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray18 = new java.lang.Object[] { localizedFormats16, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException19 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats15, objArray18);
        mathIllegalArgumentException14.addSuppressed((java.lang.Throwable) mathIllegalArgumentException19);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext21 = mathIllegalArgumentException14.getContext();
        java.lang.Object obj23 = exceptionContext21.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats24 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer25 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter26 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer25);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter26.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray28 = harmonicFitter26.getObservations();
        exceptionContext21.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats24, (java.lang.Object[]) weightedObservedPointArray28);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer31 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter32 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer31);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray33 = harmonicFitter32.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException34 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats30, (java.lang.Object[]) weightedObservedPointArray33);
        exceptionContext9.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats24, (java.lang.Object[]) weightedObservedPointArray33);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats36 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats37 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats38 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats39 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray41 = new java.lang.Object[] { localizedFormats39, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException42 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats38, objArray41);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats43 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats44 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray46 = new java.lang.Object[] { localizedFormats44, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException47 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats43, objArray46);
        mathIllegalArgumentException42.addSuppressed((java.lang.Throwable) mathIllegalArgumentException47);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats49 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats50 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray52 = new java.lang.Object[] { localizedFormats50, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException53 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException47, (org.apache.commons.math3.exception.util.Localizable) localizedFormats49, objArray52);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException54 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats37, objArray52);
        java.lang.Object[] objArray55 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray52);
        org.apache.commons.math3.exception.ZeroException zeroException56 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats36, objArray55);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats57 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException61 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray62 = numberIsTooSmallException61.getSuppressed();
        java.lang.Throwable[] throwableArray63 = numberIsTooSmallException61.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException64 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) zeroException56, (org.apache.commons.math3.exception.util.Localizable) localizedFormats57, (java.lang.Object[]) throwableArray63);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException65 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats24, (java.lang.Object[]) throwableArray63);
        org.apache.commons.math3.exception.ZeroException zeroException66 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) throwableArray63);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_SIZE + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_SIZE));
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats10 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats10.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats11 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats11.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + localizedFormats24 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats24.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertNotNull(weightedObservedPointArray28);
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray33);
        org.junit.Assert.assertTrue("'" + localizedFormats36 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats36.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats37 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats37.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats38 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats38.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats39 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats39.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats43 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats43.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats44 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats44.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats49 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats49.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats50 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats50.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats57 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES + "'", localizedFormats57.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES));
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #362
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #327
28: astore_1
29: aconst_null
30: astore_2
31: new           #28
34: dup
35: bipush        100
37: invokestatic  #159
40: aload_2
41: iconst_0
42: invokespecial #160
45: astore_3
46: getstatic     #161
49: astore        4
51: iconst_0
52: anewarray     #5
55: astore        5
57: new           #136
60: dup
61: aload_3
62: aload         4
64: aload         5
66: invokespecial #137
69: astore        6
71: aload_3
72: invokevirtual #162
75: istore        7
77: new           #163
80: dup
81: aload_3
82: invokespecial #164
85: astore        8
87: getstatic     #127
90: astore        9
92: getstatic     #128
95: astore        10
97: iconst_2
98: anewarray     #5
101: dup
102: iconst_0
103: aload         10
105: aastore
106: dup
107: iconst_1
108: lconst_1
109: invokestatic  #129
112: aastore
113: astore        11
115: new           #130
118: dup
119: aload         9
121: aload         11
123: invokespecial #131
126: astore        12
128: getstatic     #127
131: astore        13
133: getstatic     #128
136: astore        14
138: iconst_2
139: anewarray     #5
142: dup
143: iconst_0
144: aload         14
146: aastore
147: dup
148: iconst_1
149: lconst_1
150: invokestatic  #129
153: aastore
154: astore        15
156: new           #130
159: dup
160: aload         13
162: aload         15
164: invokespecial #131
167: astore        16
169: aload         12
171: aload         16
173: invokevirtual #132
176: aload         12
178: invokevirtual #165
181: astore        17
183: aload         17
185: ldc           #166
187: invokevirtual #167
190: astore        18
192: getstatic     #168
195: astore        19
197: aconst_null
198: astore        20
200: new           #8
203: dup
204: aload         20
206: invokespecial #9
209: astore        21
211: aload         21
213: invokevirtual #25
216: astore        22
218: aload         21
220: invokevirtual #25
223: astore        23
225: aload         17
227: aload         19
229: aload         23
231: checkcast     #79
234: invokevirtual #169
237: getstatic     #156
240: astore        24
242: aconst_null
243: astore        25
245: new           #8
248: dup
249: aload         25
251: invokespecial #9
254: astore        26
256: aload         26
258: invokevirtual #25
261: astore        27
263: new           #81
266: dup
267: aload         24
269: aload         27
271: checkcast     #79
274: invokespecial #82
277: astore        28
279: aload         8
281: aload         19
283: aload         27
285: checkcast     #79
288: invokevirtual #169
291: getstatic     #125
294: astore        29
296: getstatic     #126
299: astore        30
301: getstatic     #127
304: astore        31
306: getstatic     #128
309: astore        32
311: iconst_2
312: anewarray     #5
315: dup
316: iconst_0
317: aload         32
319: aastore
320: dup
321: iconst_1
322: lconst_1
323: invokestatic  #129
326: aastore
327: astore        33
329: new           #130
332: dup
333: aload         31
335: aload         33
337: invokespecial #131
340: astore        34
342: getstatic     #127
345: astore        35
347: getstatic     #128
350: astore        36
352: iconst_2
353: anewarray     #5
356: dup
357: iconst_0
358: aload         36
360: aastore
361: dup
362: iconst_1
363: lconst_1
364: invokestatic  #129
367: aastore
368: astore        37
370: new           #130
373: dup
374: aload         35
376: aload         37
378: invokespecial #131
381: astore        38
383: aload         34
385: aload         38
387: invokevirtual #132
390: getstatic     #133
393: astore        39
395: getstatic     #134
398: astore        40
400: iconst_2
401: anewarray     #5
404: dup
405: iconst_0
406: aload         40
408: aastore
409: dup
410: iconst_1
411: bipush        10
413: invokestatic  #135
416: aastore
417: astore        41
419: new           #136
422: dup
423: aload         38
425: aload         39
427: aload         41
429: invokespecial #137
432: astore        42
434: new           #136
437: dup
438: aload         30
440: aload         41
442: invokespecial #138
445: astore        43
447: aload         41
449: invokestatic  #80
452: astore        44
454: new           #81
457: dup
458: aload         29
460: aload         44
462: invokespecial #82
465: astore        45
467: getstatic     #363
470: astore        46
472: new           #28
475: dup
476: ldc2_w        #277
479: invokestatic  #129
482: bipush        10
484: invokestatic  #159
487: iconst_1
488: invokespecial #160
491: astore        47
493: aload         47
495: invokevirtual #334
498: astore        48
500: aload         47
502: invokevirtual #334
505: astore        49
507: new           #136
510: dup
511: aload         45
513: aload         46
515: aload         49
517: checkcast     #79
520: invokespecial #137
523: astore        50
525: new           #130
528: dup
529: aload         19
531: aload         49
533: checkcast     #79
536: invokespecial #131
539: astore        51
541: new           #81
544: dup
545: aload_1
546: aload         49
548: checkcast     #79
551: invokespecial #82
554: astore        52
556: new           #83
559: dup
560: invokespecial #84
563: ldc           #85
565: invokevirtual #86
568: aload_1
569: invokevirtual #87
572: ldc           #88
574: invokevirtual #86
577: getstatic     #327
580: invokevirtual #87
583: ldc           #85
585: invokevirtual #86
588: invokevirtual #89
591: aload_1
592: getstatic     #327
595: invokevirtual #90
598: invokestatic  #91
601: new           #83
604: dup
605: invokespecial #84
608: ldc           #85
610: invokevirtual #86
613: aload         4
615: invokevirtual #87
618: ldc           #88
620: invokevirtual #86
623: getstatic     #161
626: invokevirtual #87
629: ldc           #85
631: invokevirtual #86
634: invokevirtual #89
637: aload         4
639: getstatic     #161
642: invokevirtual #90
645: invokestatic  #91
648: aload         5
650: invokestatic  #20
653: aload         5
655: invokestatic  #92
658: ldc           #74
660: invokestatic  #23
663: aload         5
665: invokestatic  #93
668: ldc           #74
670: invokestatic  #23
673: new           #83
676: dup
677: invokespecial #84
680: ldc           #85
682: invokevirtual #86
685: iload         7
687: invokevirtual #170
690: ldc           #88
692: invokevirtual #86
695: iconst_0
696: invokevirtual #170
699: ldc           #85
701: invokevirtual #86
704: invokevirtual #89
707: iload         7
709: ifne          716
712: iconst_1
713: goto          717
716: iconst_0
717: invokestatic  #91
720: new           #83
723: dup
724: invokespecial #84
727: ldc           #85
729: invokevirtual #86
732: aload         9
734: invokevirtual #87
737: ldc           #88
739: invokevirtual #86
742: getstatic     #127
745: invokevirtual #87
748: ldc           #85
750: invokevirtual #86
753: invokevirtual #89
756: aload         9
758: getstatic     #127
761: invokevirtual #90
764: invokestatic  #91
767: new           #83
770: dup
771: invokespecial #84
774: ldc           #85
776: invokevirtual #86
779: aload         10
781: invokevirtual #87
784: ldc           #88
786: invokevirtual #86
789: getstatic     #128
792: invokevirtual #87
795: ldc           #85
797: invokevirtual #86
800: invokevirtual #89
803: aload         10
805: getstatic     #128
808: invokevirtual #90
811: invokestatic  #91
814: aload         11
816: invokestatic  #20
819: aload         11
821: invokestatic  #92
824: ldc           #140
826: invokestatic  #23
829: aload         11
831: invokestatic  #93
834: ldc           #140
836: invokestatic  #23
839: new           #83
842: dup
843: invokespecial #84
846: ldc           #85
848: invokevirtual #86
851: aload         13
853: invokevirtual #87
856: ldc           #88
858: invokevirtual #86
861: getstatic     #127
864: invokevirtual #87
867: ldc           #85
869: invokevirtual #86
872: invokevirtual #89
875: aload         13
877: getstatic     #127
880: invokevirtual #90
883: invokestatic  #91
886: new           #83
889: dup
890: invokespecial #84
893: ldc           #85
895: invokevirtual #86
898: aload         14
900: invokevirtual #87
903: ldc           #88
905: invokevirtual #86
908: getstatic     #128
911: invokevirtual #87
914: ldc           #85
916: invokevirtual #86
919: invokevirtual #89
922: aload         14
924: getstatic     #128
927: invokevirtual #90
930: invokestatic  #91
933: aload         15
935: invokestatic  #20
938: aload         15
940: invokestatic  #92
943: ldc           #140
945: invokestatic  #23
948: aload         15
950: invokestatic  #93
953: ldc           #140
955: invokestatic  #23
958: aload         17
960: invokestatic  #20
963: aload         18
965: invokestatic  #171
968: new           #83
971: dup
972: invokespecial #84
975: ldc           #85
977: invokevirtual #86
980: aload         19
982: invokevirtual #87
985: ldc           #88
987: invokevirtual #86
990: getstatic     #168
993: invokevirtual #87
996: ldc           #85
998: invokevirtual #86
1001: invokevirtual #89
1004: aload         19
1006: getstatic     #168
1009: invokevirtual #90
1012: invokestatic  #91
1015: aload         22
1017: invokestatic  #20
1020: aload         23
1022: invokestatic  #20
1025: new           #83
1028: dup
1029: invokespecial #84
1032: ldc           #85
1034: invokevirtual #86
1037: aload         24
1039: invokevirtual #87
1042: ldc           #88
1044: invokevirtual #86
1047: getstatic     #156
1050: invokevirtual #87
1053: ldc           #85
1055: invokevirtual #86
1058: invokevirtual #89
1061: aload         24
1063: getstatic     #156
1066: invokevirtual #90
1069: invokestatic  #91
1072: aload         27
1074: invokestatic  #20
1077: new           #83
1080: dup
1081: invokespecial #84
1084: ldc           #85
1086: invokevirtual #86
1089: aload         29
1091: invokevirtual #87
1094: ldc           #88
1096: invokevirtual #86
1099: getstatic     #125
1102: invokevirtual #87
1105: ldc           #85
1107: invokevirtual #86
1110: invokevirtual #89
1113: aload         29
1115: getstatic     #125
1118: invokevirtual #90
1121: invokestatic  #91
1124: new           #83
1127: dup
1128: invokespecial #84
1131: ldc           #85
1133: invokevirtual #86
1136: aload         30
1138: invokevirtual #87
1141: ldc           #88
1143: invokevirtual #86
1146: getstatic     #126
1149: invokevirtual #87
1152: ldc           #85
1154: invokevirtual #86
1157: invokevirtual #89
1160: aload         30
1162: getstatic     #126
1165: invokevirtual #90
1168: invokestatic  #91
1171: new           #83
1174: dup
1175: invokespecial #84
1178: ldc           #85
1180: invokevirtual #86
1183: aload         31
1185: invokevirtual #87
1188: ldc           #88
1190: invokevirtual #86
1193: getstatic     #127
1196: invokevirtual #87
1199: ldc           #85
1201: invokevirtual #86
1204: invokevirtual #89
1207: aload         31
1209: getstatic     #127
1212: invokevirtual #90
1215: invokestatic  #91
1218: new           #83
1221: dup
1222: invokespecial #84
1225: ldc           #85
1227: invokevirtual #86
1230: aload         32
1232: invokevirtual #87
1235: ldc           #88
1237: invokevirtual #86
1240: getstatic     #128
1243: invokevirtual #87
1246: ldc           #85
1248: invokevirtual #86
1251: invokevirtual #89
1254: aload         32
1256: getstatic     #128
1259: invokevirtual #90
1262: invokestatic  #91
1265: aload         33
1267: invokestatic  #20
1270: aload         33
1272: invokestatic  #92
1275: ldc           #140
1277: invokestatic  #23
1280: aload         33
1282: invokestatic  #93
1285: ldc           #140
1287: invokestatic  #23
1290: new           #83
1293: dup
1294: invokespecial #84
1297: ldc           #85
1299: invokevirtual #86
1302: aload         35
1304: invokevirtual #87
1307: ldc           #88
1309: invokevirtual #86
1312: getstatic     #127
1315: invokevirtual #87
1318: ldc           #85
1320: invokevirtual #86
1323: invokevirtual #89
1326: aload         35
1328: getstatic     #127
1331: invokevirtual #90
1334: invokestatic  #91
1337: new           #83
1340: dup
1341: invokespecial #84
1344: ldc           #85
1346: invokevirtual #86
1349: aload         36
1351: invokevirtual #87
1354: ldc           #88
1356: invokevirtual #86
1359: getstatic     #128
1362: invokevirtual #87
1365: ldc           #85
1367: invokevirtual #86
1370: invokevirtual #89
1373: aload         36
1375: getstatic     #128
1378: invokevirtual #90
1381: invokestatic  #91
1384: aload         37
1386: invokestatic  #20
1389: aload         37
1391: invokestatic  #92
1394: ldc           #140
1396: invokestatic  #23
1399: aload         37
1401: invokestatic  #93
1404: ldc           #140
1406: invokestatic  #23
1409: new           #83
1412: dup
1413: invokespecial #84
1416: ldc           #85
1418: invokevirtual #86
1421: aload         39
1423: invokevirtual #87
1426: ldc           #88
1428: invokevirtual #86
1431: getstatic     #133
1434: invokevirtual #87
1437: ldc           #85
1439: invokevirtual #86
1442: invokevirtual #89
1445: aload         39
1447: getstatic     #133
1450: invokevirtual #90
1453: invokestatic  #91
1456: new           #83
1459: dup
1460: invokespecial #84
1463: ldc           #85
1465: invokevirtual #86
1468: aload         40
1470: invokevirtual #87
1473: ldc           #88
1475: invokevirtual #86
1478: getstatic     #134
1481: invokevirtual #87
1484: ldc           #85
1486: invokevirtual #86
1489: invokevirtual #89
1492: aload         40
1494: getstatic     #134
1497: invokevirtual #90
1500: invokestatic  #91
1503: aload         41
1505: invokestatic  #20
1508: aload         41
1510: invokestatic  #92
1513: ldc           #141
1515: invokestatic  #23
1518: aload         41
1520: invokestatic  #93
1523: ldc           #141
1525: invokestatic  #23
1528: aload         44
1530: invokestatic  #20
1533: aload         44
1535: invokestatic  #92
1538: ldc           #141
1540: invokestatic  #23
1543: aload         44
1545: invokestatic  #93
1548: ldc           #141
1550: invokestatic  #23
1553: new           #83
1556: dup
1557: invokespecial #84
1560: ldc           #85
1562: invokevirtual #86
1565: aload         46
1567: invokevirtual #87
1570: ldc           #88
1572: invokevirtual #86
1575: getstatic     #363
1578: invokevirtual #87
1581: ldc           #85
1583: invokevirtual #86
1586: invokevirtual #89
1589: aload         46
1591: getstatic     #363
1594: invokevirtual #90
1597: invokestatic  #91
1600: aload         48
1602: invokestatic  #20
1605: aload         49
1607: invokestatic  #20
1610: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test160
Start line: 4214
End line: 4233
Method source code: 
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(35.0d, (double) (byte) -1);
        harmonicFitter1.addObservedPoint(1.0d, (double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(35.0d, (-1.0d));
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric16 = null;
        double[] doubleArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = harmonicFitter1.fit(parametric16, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #364
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: ldc2_w        #14
52: ldc2_w        #10
55: invokevirtual #43
58: aload_2
59: dconst_1
60: dconst_1
61: ldc2_w        #32
64: invokevirtual #54
67: aload_2
68: ldc2_w        #14
71: ldc2_w        #10
74: invokevirtual #43
77: aconst_null
78: astore_3
79: aconst_null
80: astore        4
82: aload_2
83: aload_3
84: aload         4
86: invokevirtual #30
89: astore        5
91: ldc           #17
93: invokestatic  #18
96: goto          101
99: astore        5
101: return
Exception table:
from    to  target type
82    96    99   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test161
Start line: 4236
End line: 4246
Method source code: 
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(35.0d, (double) (byte) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #365
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: ldc2_w        #14
52: ldc2_w        #10
55: invokevirtual #43
58: aload_2
59: invokevirtual #25
62: astore_3
63: aload_3
64: invokestatic  #20
67: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test162
Start line: 4249
End line: 4270
Method source code: 
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        java.lang.Object[] objArray11 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray10);
        org.apache.commons.math3.exception.ZeroException zeroException12 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray10);
        java.lang.Object[] objArray13 = null;
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException14 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray13);
        java.lang.Class<?> wildcardClass15 = localizedFormats0.getClass();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #366
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #220
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: dconst_1
42: ldc2_w        #32
45: invokevirtual #43
48: aload_3
49: dconst_0
50: ldc2_w        #34
53: invokevirtual #43
56: aload_3
57: invokevirtual #59
60: aload_3
61: invokevirtual #25
64: astore        4
66: aload         4
68: checkcast     #79
71: invokestatic  #80
74: astore        5
76: new           #81
79: dup
80: aload_1
81: aload         4
83: checkcast     #79
86: invokespecial #82
89: astore        6
91: aconst_null
92: astore        7
94: new           #136
97: dup
98: aload_1
99: aload         7
101: invokespecial #138
104: astore        8
106: aload_1
107: invokevirtual #98
110: astore        9
112: new           #83
115: dup
116: invokespecial #84
119: ldc           #85
121: invokevirtual #86
124: aload_1
125: invokevirtual #87
128: ldc           #88
130: invokevirtual #86
133: getstatic     #220
136: invokevirtual #87
139: ldc           #85
141: invokevirtual #86
144: invokevirtual #89
147: aload_1
148: getstatic     #220
151: invokevirtual #90
154: invokestatic  #91
157: aload         4
159: invokestatic  #20
162: aload         5
164: invokestatic  #20
167: aload         5
169: invokestatic  #92
172: ldc           #74
174: invokestatic  #23
177: aload         5
179: invokestatic  #93
182: ldc           #74
184: invokestatic  #23
187: aload         9
189: invokestatic  #20
192: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test163
Start line: 4273
End line: 4305
Method source code: 
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.addObservedPoint((double) (-1), (double) (byte) 1);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer17 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter18 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer17);
        harmonicFitter18.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter18.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray25 = harmonicFitter18.getObservations();
        harmonicFitter18.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint33 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double34 = weightedObservedPoint33.getWeight();
        double double35 = weightedObservedPoint33.getX();
        double double36 = weightedObservedPoint33.getX();
        double double37 = weightedObservedPoint33.getWeight();
        harmonicFitter18.addObservedPoint(weightedObservedPoint33);
        harmonicFitter1.addObservedPoint(weightedObservedPoint33);
        java.lang.Class<?> wildcardClass40 = harmonicFitter1.getClass();
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray25);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #367
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload_2
78: ldc2_w        #10
81: dconst_1
82: invokevirtual #43
85: aconst_null
86: astore        5
88: new           #8
91: dup
92: aload         5
94: invokespecial #9
97: astore        6
99: aload         6
101: dconst_1
102: ldc2_w        #32
105: invokevirtual #43
108: aload         6
110: dconst_0
111: ldc2_w        #34
114: invokevirtual #43
117: aload         6
119: invokevirtual #25
122: astore        7
124: aload         6
126: dconst_0
127: dconst_1
128: ldc2_w        #34
131: invokevirtual #54
134: new           #145
137: dup
138: ldc2_w        #14
141: ldc2_w        #12
144: ldc2_w        #12
147: invokespecial #146
150: astore        8
152: aload         8
154: invokevirtual #148
157: dstore        9
159: aload         8
161: invokevirtual #147
164: dstore        11
166: aload         8
168: invokevirtual #147
171: dstore        13
173: aload         8
175: invokevirtual #148
178: dstore        15
180: aload         6
182: aload         8
184: invokevirtual #123
187: aload_2
188: aload         8
190: invokevirtual #123
193: aload_2
194: invokevirtual #98
197: astore        17
199: aload_3
200: invokestatic  #20
203: aload         7
205: invokestatic  #20
208: new           #83
211: dup
212: invokespecial #84
215: ldc           #85
217: invokevirtual #86
220: dload         9
222: invokevirtual #150
225: ldc           #88
227: invokevirtual #86
230: ldc2_w        #14
233: invokevirtual #150
236: ldc           #85
238: invokevirtual #86
241: invokevirtual #89
244: dload         9
246: ldc2_w        #14
249: dcmpl
250: ifne          257
253: iconst_1
254: goto          258
257: iconst_0
258: invokestatic  #91
261: new           #83
264: dup
265: invokespecial #84
268: ldc           #85
270: invokevirtual #86
273: dload         11
275: invokevirtual #150
278: ldc           #88
280: invokevirtual #86
283: ldc2_w        #12
286: invokevirtual #150
289: ldc           #85
291: invokevirtual #86
294: invokevirtual #89
297: dload         11
299: ldc2_w        #12
302: dcmpl
303: ifne          310
306: iconst_1
307: goto          311
310: iconst_0
311: invokestatic  #91
314: new           #83
317: dup
318: invokespecial #84
321: ldc           #85
323: invokevirtual #86
326: dload         13
328: invokevirtual #150
331: ldc           #88
333: invokevirtual #86
336: ldc2_w        #12
339: invokevirtual #150
342: ldc           #85
344: invokevirtual #86
347: invokevirtual #89
350: dload         13
352: ldc2_w        #12
355: dcmpl
356: ifne          363
359: iconst_1
360: goto          364
363: iconst_0
364: invokestatic  #91
367: new           #83
370: dup
371: invokespecial #84
374: ldc           #85
376: invokevirtual #86
379: dload         15
381: invokevirtual #150
384: ldc           #88
386: invokevirtual #86
389: ldc2_w        #14
392: invokevirtual #150
395: ldc           #85
397: invokevirtual #86
400: invokevirtual #89
403: dload         15
405: ldc2_w        #14
408: dcmpl
409: ifne          416
412: iconst_1
413: goto          417
416: iconst_0
417: invokestatic  #91
420: aload         17
422: invokestatic  #20
425: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test164
Start line: 4308
End line: 4339
Method source code: 
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint((double) (-1), 0.0d, (double) (short) 0);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer9 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter10 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer9);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter10.getObservations();
        harmonicFitter10.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter10.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter10.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint26 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double27 = weightedObservedPoint26.getX();
        double double28 = weightedObservedPoint26.getY();
        double double29 = weightedObservedPoint26.getY();
        harmonicFitter10.addObservedPoint(weightedObservedPoint26);
        double double31 = weightedObservedPoint26.getY();
        double double32 = weightedObservedPoint26.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint26);
        double double34 = weightedObservedPoint26.getX();
        double double35 = weightedObservedPoint26.getX();
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 52.0d + "'", double34 == 52.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #368
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: ldc2_w        #10
48: dconst_0
49: dconst_0
50: invokevirtual #54
53: aconst_null
54: astore_3
55: new           #8
58: dup
59: aload_3
60: invokespecial #9
63: astore        4
65: aload         4
67: invokevirtual #25
70: astore        5
72: aload         4
74: ldc2_w        #32
77: ldc2_w        #10
80: dconst_0
81: invokevirtual #54
84: aload         4
86: ldc2_w        #44
89: ldc2_w        #14
92: invokevirtual #43
95: aload         4
97: ldc2_w        #12
100: dconst_0
101: ldc2_w        #44
104: invokevirtual #54
107: new           #145
110: dup
111: ldc2_w        #14
114: ldc2_w        #12
117: ldc2_w        #12
120: invokespecial #146
123: astore        6
125: aload         6
127: invokevirtual #147
130: dstore        7
132: aload         6
134: invokevirtual #149
137: dstore        9
139: aload         6
141: invokevirtual #149
144: dstore        11
146: aload         4
148: aload         6
150: invokevirtual #123
153: aload         6
155: invokevirtual #149
158: dstore        13
160: aload         6
162: invokevirtual #148
165: dstore        15
167: aload_2
168: aload         6
170: invokevirtual #123
173: aload         6
175: invokevirtual #147
178: dstore        17
180: aload         6
182: invokevirtual #147
185: dstore        19
187: aload         5
189: invokestatic  #20
192: new           #83
195: dup
196: invokespecial #84
199: ldc           #85
201: invokevirtual #86
204: dload         7
206: invokevirtual #150
209: ldc           #88
211: invokevirtual #86
214: ldc2_w        #12
217: invokevirtual #150
220: ldc           #85
222: invokevirtual #86
225: invokevirtual #89
228: dload         7
230: ldc2_w        #12
233: dcmpl
234: ifne          241
237: iconst_1
238: goto          242
241: iconst_0
242: invokestatic  #91
245: new           #83
248: dup
249: invokespecial #84
252: ldc           #85
254: invokevirtual #86
257: dload         9
259: invokevirtual #150
262: ldc           #88
264: invokevirtual #86
267: ldc2_w        #12
270: invokevirtual #150
273: ldc           #85
275: invokevirtual #86
278: invokevirtual #89
281: dload         9
283: ldc2_w        #12
286: dcmpl
287: ifne          294
290: iconst_1
291: goto          295
294: iconst_0
295: invokestatic  #91
298: new           #83
301: dup
302: invokespecial #84
305: ldc           #85
307: invokevirtual #86
310: dload         11
312: invokevirtual #150
315: ldc           #88
317: invokevirtual #86
320: ldc2_w        #12
323: invokevirtual #150
326: ldc           #85
328: invokevirtual #86
331: invokevirtual #89
334: dload         11
336: ldc2_w        #12
339: dcmpl
340: ifne          347
343: iconst_1
344: goto          348
347: iconst_0
348: invokestatic  #91
351: new           #83
354: dup
355: invokespecial #84
358: ldc           #85
360: invokevirtual #86
363: dload         13
365: invokevirtual #150
368: ldc           #88
370: invokevirtual #86
373: ldc2_w        #12
376: invokevirtual #150
379: ldc           #85
381: invokevirtual #86
384: invokevirtual #89
387: dload         13
389: ldc2_w        #12
392: dcmpl
393: ifne          400
396: iconst_1
397: goto          401
400: iconst_0
401: invokestatic  #91
404: new           #83
407: dup
408: invokespecial #84
411: ldc           #85
413: invokevirtual #86
416: dload         15
418: invokevirtual #150
421: ldc           #88
423: invokevirtual #86
426: ldc2_w        #14
429: invokevirtual #150
432: ldc           #85
434: invokevirtual #86
437: invokevirtual #89
440: dload         15
442: ldc2_w        #14
445: dcmpl
446: ifne          453
449: iconst_1
450: goto          454
453: iconst_0
454: invokestatic  #91
457: new           #83
460: dup
461: invokespecial #84
464: ldc           #85
466: invokevirtual #86
469: dload         17
471: invokevirtual #150
474: ldc           #88
476: invokevirtual #86
479: ldc2_w        #12
482: invokevirtual #150
485: ldc           #85
487: invokevirtual #86
490: invokevirtual #89
493: dload         17
495: ldc2_w        #12
498: dcmpl
499: ifne          506
502: iconst_1
503: goto          507
506: iconst_0
507: invokestatic  #91
510: new           #83
513: dup
514: invokespecial #84
517: ldc           #85
519: invokevirtual #86
522: dload         19
524: invokevirtual #150
527: ldc           #88
529: invokevirtual #86
532: ldc2_w        #12
535: invokevirtual #150
538: ldc           #85
540: invokevirtual #86
543: invokevirtual #89
546: dload         19
548: ldc2_w        #12
551: dcmpl
552: ifne          559
555: iconst_1
556: goto          560
559: iconst_0
560: invokestatic  #91
563: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test165
Start line: 4342
End line: 4414
Method source code: 
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray10 = new java.lang.Object[] { localizedFormats6, localizedFormats7, localizedFormats8, localizedFormats9 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException4, (org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray10);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException16 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray17 = numberIsTooSmallException16.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException18 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalStateException11, (org.apache.commons.math3.exception.util.Localizable) localizedFormats12, (java.lang.Object[]) throwableArray17);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext19 = mathIllegalStateException11.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION;
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.ZeroException zeroException22 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, objArray21);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException26 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, (java.lang.Number) (short) 0, (java.lang.Number) 0L, true);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException30 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray31 = numberIsTooSmallException30.getSuppressed();
        java.lang.Object[] objArray32 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) throwableArray31);
        exceptionContext19.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, objArray32);
        java.util.Set<java.lang.String> strSet34 = exceptionContext19.getKeys();
        java.lang.Object obj36 = exceptionContext19.getValue("class ({0}) does not implement Comparable");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats38 = org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer39 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter40 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer39);
        harmonicFitter40.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter40.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter40.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray48 = harmonicFitter40.getObservations();
        java.lang.Object[] objArray49 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray48);
        org.apache.commons.math3.exception.ZeroException zeroException50 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats38, (java.lang.Object[]) weightedObservedPointArray48);
        exceptionContext19.setValue("org.apache.commons.math3.exception.NumberIsTooSmallException: -1 is smaller than, or equal to, the minimum (1)", (java.lang.Object) localizedFormats38);
        java.lang.Object obj53 = exceptionContext19.getValue("org.apache.commons.math3.exception.NumberIsTooSmallException: 10 is smaller than the minimum (10)");
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE));
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(exceptionContext19);
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION));
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + localizedFormats38 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS + "'", localizedFormats38.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNull(obj53);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #369
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #328
63: astore        5
65: getstatic     #329
68: astore        6
70: getstatic     #330
73: astore        7
75: getstatic     #331
78: astore        8
80: getstatic     #332
83: astore        9
85: iconst_4
86: anewarray     #5
89: dup
90: iconst_0
91: aload         6
93: aastore
94: dup
95: iconst_1
96: aload         7
98: aastore
99: dup
100: iconst_2
101: aload         8
103: aastore
104: dup
105: iconst_3
106: aload         9
108: aastore
109: astore        10
111: new           #136
114: dup
115: aload         4
117: aload         5
119: aload         10
121: invokespecial #137
124: astore        11
126: getstatic     #333
129: astore        12
131: new           #28
134: dup
135: ldc2_w        #277
138: invokestatic  #129
141: bipush        10
143: invokestatic  #159
146: iconst_1
147: invokespecial #160
150: astore        13
152: aload         13
154: invokevirtual #334
157: astore        14
159: new           #136
162: dup
163: aload         11
165: aload         12
167: aload         14
169: checkcast     #79
172: invokespecial #137
175: astore        15
177: aload         11
179: invokevirtual #282
182: astore        16
184: getstatic     #335
187: astore        17
189: iconst_0
190: anewarray     #5
193: astore        18
195: new           #81
198: dup
199: aload         17
201: aload         18
203: invokespecial #82
206: astore        19
208: new           #28
211: dup
212: aload         17
214: iconst_0
215: invokestatic  #194
218: lconst_0
219: invokestatic  #129
222: iconst_1
223: invokespecial #195
226: astore        20
228: new           #28
231: dup
232: ldc2_w        #277
235: invokestatic  #129
238: bipush        10
240: invokestatic  #159
243: iconst_1
244: invokespecial #160
247: astore        21
249: aload         21
251: invokevirtual #334
254: astore        22
256: aload         22
258: checkcast     #79
261: invokestatic  #80
264: astore        23
266: aload         16
268: aload         17
270: aload         23
272: invokevirtual #169
275: aload         16
277: invokevirtual #370
280: astore        24
282: aload         16
284: ldc_w         #371
287: invokevirtual #167
290: astore        25
292: getstatic     #78
295: astore        26
297: aconst_null
298: astore        27
300: new           #8
303: dup
304: aload         27
306: invokespecial #9
309: astore        28
311: aload         28
313: dconst_1
314: ldc2_w        #32
317: invokevirtual #43
320: aload         28
322: dconst_0
323: ldc2_w        #34
326: invokevirtual #43
329: aload         28
331: invokevirtual #59
334: aload         28
336: invokevirtual #25
339: astore        29
341: aload         29
343: checkcast     #79
346: invokestatic  #80
349: astore        30
351: new           #81
354: dup
355: aload         26
357: aload         29
359: checkcast     #79
362: invokespecial #82
365: astore        31
367: aload         16
369: ldc_w         #372
372: aload         26
374: invokevirtual #373
377: aload         16
379: ldc_w         #374
382: invokevirtual #167
385: astore        32
387: new           #83
390: dup
391: invokespecial #84
394: ldc           #85
396: invokevirtual #86
399: aload_1
400: invokevirtual #87
403: ldc           #88
405: invokevirtual #86
408: getstatic     #127
411: invokevirtual #87
414: ldc           #85
416: invokevirtual #86
419: invokevirtual #89
422: aload_1
423: getstatic     #127
426: invokevirtual #90
429: invokestatic  #91
432: new           #83
435: dup
436: invokespecial #84
439: ldc           #85
441: invokevirtual #86
444: aload_2
445: invokevirtual #87
448: ldc           #88
450: invokevirtual #86
453: getstatic     #128
456: invokevirtual #87
459: ldc           #85
461: invokevirtual #86
464: invokevirtual #89
467: aload_2
468: getstatic     #128
471: invokevirtual #90
474: invokestatic  #91
477: aload_3
478: invokestatic  #20
481: aload_3
482: invokestatic  #92
485: ldc           #140
487: invokestatic  #23
490: aload_3
491: invokestatic  #93
494: ldc           #140
496: invokestatic  #23
499: new           #83
502: dup
503: invokespecial #84
506: ldc           #85
508: invokevirtual #86
511: aload         5
513: invokevirtual #87
516: ldc           #88
518: invokevirtual #86
521: getstatic     #328
524: invokevirtual #87
527: ldc           #85
529: invokevirtual #86
532: invokevirtual #89
535: aload         5
537: getstatic     #328
540: invokevirtual #90
543: invokestatic  #91
546: new           #83
549: dup
550: invokespecial #84
553: ldc           #85
555: invokevirtual #86
558: aload         6
560: invokevirtual #87
563: ldc           #88
565: invokevirtual #86
568: getstatic     #329
571: invokevirtual #87
574: ldc           #85
576: invokevirtual #86
579: invokevirtual #89
582: aload         6
584: getstatic     #329
587: invokevirtual #90
590: invokestatic  #91
593: new           #83
596: dup
597: invokespecial #84
600: ldc           #85
602: invokevirtual #86
605: aload         7
607: invokevirtual #87
610: ldc           #88
612: invokevirtual #86
615: getstatic     #330
618: invokevirtual #87
621: ldc           #85
623: invokevirtual #86
626: invokevirtual #89
629: aload         7
631: getstatic     #330
634: invokevirtual #90
637: invokestatic  #91
640: new           #83
643: dup
644: invokespecial #84
647: ldc           #85
649: invokevirtual #86
652: aload         8
654: invokevirtual #87
657: ldc           #88
659: invokevirtual #86
662: getstatic     #331
665: invokevirtual #87
668: ldc           #85
670: invokevirtual #86
673: invokevirtual #89
676: aload         8
678: getstatic     #331
681: invokevirtual #90
684: invokestatic  #91
687: new           #83
690: dup
691: invokespecial #84
694: ldc           #85
696: invokevirtual #86
699: aload         9
701: invokevirtual #87
704: ldc           #88
706: invokevirtual #86
709: getstatic     #332
712: invokevirtual #87
715: ldc           #85
717: invokevirtual #86
720: invokevirtual #89
723: aload         9
725: getstatic     #332
728: invokevirtual #90
731: invokestatic  #91
734: aload         10
736: invokestatic  #20
739: aload         10
741: invokestatic  #92
744: ldc_w         #336
747: invokestatic  #23
750: aload         10
752: invokestatic  #93
755: ldc_w         #336
758: invokestatic  #23
761: new           #83
764: dup
765: invokespecial #84
768: ldc           #85
770: invokevirtual #86
773: aload         12
775: invokevirtual #87
778: ldc           #88
780: invokevirtual #86
783: getstatic     #333
786: invokevirtual #87
789: ldc           #85
791: invokevirtual #86
794: invokevirtual #89
797: aload         12
799: getstatic     #333
802: invokevirtual #90
805: invokestatic  #91
808: aload         14
810: invokestatic  #20
813: aload         16
815: invokestatic  #20
818: new           #83
821: dup
822: invokespecial #84
825: ldc           #85
827: invokevirtual #86
830: aload         17
832: invokevirtual #87
835: ldc           #88
837: invokevirtual #86
840: getstatic     #335
843: invokevirtual #87
846: ldc           #85
848: invokevirtual #86
851: invokevirtual #89
854: aload         17
856: getstatic     #335
859: invokevirtual #90
862: invokestatic  #91
865: aload         18
867: invokestatic  #20
870: aload         18
872: invokestatic  #92
875: ldc           #74
877: invokestatic  #23
880: aload         18
882: invokestatic  #93
885: ldc           #74
887: invokestatic  #23
890: aload         22
892: invokestatic  #20
895: aload         23
897: invokestatic  #20
900: aload         23
902: invokestatic  #92
905: ldc           #74
907: invokestatic  #23
910: aload         23
912: invokestatic  #93
915: ldc           #74
917: invokestatic  #23
920: aload         24
922: invokestatic  #20
925: aload         25
927: invokestatic  #171
930: new           #83
933: dup
934: invokespecial #84
937: ldc           #85
939: invokevirtual #86
942: aload         26
944: invokevirtual #87
947: ldc           #88
949: invokevirtual #86
952: getstatic     #78
955: invokevirtual #87
958: ldc           #85
960: invokevirtual #86
963: invokevirtual #89
966: aload         26
968: getstatic     #78
971: invokevirtual #90
974: invokestatic  #91
977: aload         29
979: invokestatic  #20
982: aload         30
984: invokestatic  #20
987: aload         30
989: invokestatic  #92
992: ldc           #74
994: invokestatic  #23
997: aload         30
999: invokestatic  #93
1002: ldc           #74
1004: invokestatic  #23
1007: aload         32
1009: invokestatic  #171
1012: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test166
Start line: 4417
End line: 4437
Method source code: 
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter2.getObservations();
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray5 = harmonicFitter2.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException6 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser7 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
        org.junit.Assert.assertNotNull(weightedObservedPointArray5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #375
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #376
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: invokevirtual #25
44: astore        4
46: aload_3
47: invokevirtual #59
50: aload_3
51: invokevirtual #25
54: astore        5
56: new           #81
59: dup
60: aload_1
61: aload         5
63: checkcast     #79
66: invokespecial #82
69: astore        6
71: new           #69
74: dup
75: aload         5
77: invokespecial #70
80: astore        7
82: ldc           #27
84: invokestatic  #18
87: goto          92
90: astore        7
92: new           #83
95: dup
96: invokespecial #84
99: ldc           #85
101: invokevirtual #86
104: aload_1
105: invokevirtual #87
108: ldc           #88
110: invokevirtual #86
113: getstatic     #376
116: invokevirtual #87
119: ldc           #85
121: invokevirtual #86
124: invokevirtual #89
127: aload_1
128: getstatic     #376
131: invokevirtual #90
134: invokestatic  #91
137: aload         4
139: invokestatic  #20
142: aload         5
144: invokestatic  #20
147: return
Exception table:
from    to  target type
71    87    90   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test167
Start line: 4440
End line: 4518
Method source code: 
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        java.lang.Throwable[] throwableArray11 = mathIllegalArgumentException4.getSuppressed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext12 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException4);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE;
        exceptionContext12.setValue("cannot compute beta density at 0 when alpha = {0,number}", (java.lang.Object) localizedFormats14);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_COMPLEX_MODULE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats18 = org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats19 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray23 = new java.lang.Object[] { localizedFormats21, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException24 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, objArray23);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats25 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats26 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray28 = new java.lang.Object[] { localizedFormats26, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException29 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, objArray28);
        mathIllegalArgumentException24.addSuppressed((java.lang.Throwable) mathIllegalArgumentException29);
        java.lang.Throwable[] throwableArray31 = mathIllegalArgumentException24.getSuppressed();
        java.lang.Object[] objArray32 = new java.lang.Object[] { localizedFormats18, localizedFormats19, throwableArray31 };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException33 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats17, (java.lang.Object[]) throwableArray31);
        exceptionContext12.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats16, (java.lang.Object[]) throwableArray31);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats35 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_MEAN;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats36 = org.apache.commons.math3.exception.util.LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer37 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter38 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer37);
        harmonicFitter38.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter38.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray45 = harmonicFitter38.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray46 = harmonicFitter38.getObservations();
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException47 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats36, (java.lang.Object[]) weightedObservedPointArray46);
        exceptionContext12.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats35, (java.lang.Object[]) weightedObservedPointArray46);
        java.lang.Object obj50 = exceptionContext12.getValue("");
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE));
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES));
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_COMPLEX_MODULE + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_COMPLEX_MODULE));
        org.junit.Assert.assertTrue("'" + localizedFormats18 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE + "'", localizedFormats18.equals(org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE));
        org.junit.Assert.assertTrue("'" + localizedFormats19 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION + "'", localizedFormats19.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION));
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats25 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats25.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats26 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats26.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[DIMENSIONS_MISMATCH_SIMPLE, NOT_POSITIVE_STANDARD_DEVIATION, [org.apache.commons.math3.exception.MathIllegalArgumentException: overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1]]");
        org.junit.Assert.assertTrue("'" + localizedFormats35 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_MEAN + "'", localizedFormats35.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_MEAN));
        org.junit.Assert.assertTrue("'" + localizedFormats36 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS + "'", localizedFormats36.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray45);
        org.junit.Assert.assertNotNull(weightedObservedPointArray46);
        org.junit.Assert.assertNull(obj50);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #377
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: aload         4
110: invokevirtual #234
113: astore        9
115: new           #163
118: dup
119: aload         4
121: invokespecial #164
124: astore        10
126: getstatic     #378
129: astore        11
131: aload         10
133: ldc_w         #379
136: aload         11
138: invokevirtual #373
141: getstatic     #380
144: astore        12
146: getstatic     #381
149: astore        13
151: getstatic     #382
154: astore        14
156: getstatic     #233
159: astore        15
161: getstatic     #127
164: astore        16
166: getstatic     #128
169: astore        17
171: iconst_2
172: anewarray     #5
175: dup
176: iconst_0
177: aload         17
179: aastore
180: dup
181: iconst_1
182: lconst_1
183: invokestatic  #129
186: aastore
187: astore        18
189: new           #130
192: dup
193: aload         16
195: aload         18
197: invokespecial #131
200: astore        19
202: getstatic     #127
205: astore        20
207: getstatic     #128
210: astore        21
212: iconst_2
213: anewarray     #5
216: dup
217: iconst_0
218: aload         21
220: aastore
221: dup
222: iconst_1
223: lconst_1
224: invokestatic  #129
227: aastore
228: astore        22
230: new           #130
233: dup
234: aload         20
236: aload         22
238: invokespecial #131
241: astore        23
243: aload         19
245: aload         23
247: invokevirtual #132
250: aload         19
252: invokevirtual #234
255: astore        24
257: iconst_3
258: anewarray     #5
261: dup
262: iconst_0
263: aload         14
265: aastore
266: dup
267: iconst_1
268: aload         15
270: aastore
271: dup
272: iconst_2
273: aload         24
275: aastore
276: astore        25
278: new           #130
281: dup
282: aload         13
284: aload         24
286: checkcast     #79
289: invokespecial #131
292: astore        26
294: aload         10
296: aload         12
298: aload         24
300: checkcast     #79
303: invokevirtual #169
306: getstatic     #383
309: astore        27
311: getstatic     #193
314: astore        28
316: aconst_null
317: astore        29
319: new           #8
322: dup
323: aload         29
325: invokespecial #9
328: astore        30
330: aload         30
332: dconst_1
333: ldc2_w        #32
336: invokevirtual #43
339: aload         30
341: dconst_0
342: ldc2_w        #34
345: invokevirtual #43
348: aload         30
350: invokevirtual #25
353: astore        31
355: aload         30
357: invokevirtual #25
360: astore        32
362: new           #130
365: dup
366: aload         28
368: aload         32
370: checkcast     #79
373: invokespecial #131
376: astore        33
378: aload         10
380: aload         27
382: aload         32
384: checkcast     #79
387: invokevirtual #169
390: aload         10
392: ldc_w         #384
395: invokevirtual #167
398: astore        34
400: new           #83
403: dup
404: invokespecial #84
407: ldc           #85
409: invokevirtual #86
412: aload_1
413: invokevirtual #87
416: ldc           #88
418: invokevirtual #86
421: getstatic     #127
424: invokevirtual #87
427: ldc           #85
429: invokevirtual #86
432: invokevirtual #89
435: aload_1
436: getstatic     #127
439: invokevirtual #90
442: invokestatic  #91
445: new           #83
448: dup
449: invokespecial #84
452: ldc           #85
454: invokevirtual #86
457: aload_2
458: invokevirtual #87
461: ldc           #88
463: invokevirtual #86
466: getstatic     #128
469: invokevirtual #87
472: ldc           #85
474: invokevirtual #86
477: invokevirtual #89
480: aload_2
481: getstatic     #128
484: invokevirtual #90
487: invokestatic  #91
490: aload_3
491: invokestatic  #20
494: aload_3
495: invokestatic  #92
498: ldc           #140
500: invokestatic  #23
503: aload_3
504: invokestatic  #93
507: ldc           #140
509: invokestatic  #23
512: new           #83
515: dup
516: invokespecial #84
519: ldc           #85
521: invokevirtual #86
524: aload         5
526: invokevirtual #87
529: ldc           #88
531: invokevirtual #86
534: getstatic     #127
537: invokevirtual #87
540: ldc           #85
542: invokevirtual #86
545: invokevirtual #89
548: aload         5
550: getstatic     #127
553: invokevirtual #90
556: invokestatic  #91
559: new           #83
562: dup
563: invokespecial #84
566: ldc           #85
568: invokevirtual #86
571: aload         6
573: invokevirtual #87
576: ldc           #88
578: invokevirtual #86
581: getstatic     #128
584: invokevirtual #87
587: ldc           #85
589: invokevirtual #86
592: invokevirtual #89
595: aload         6
597: getstatic     #128
600: invokevirtual #90
603: invokestatic  #91
606: aload         7
608: invokestatic  #20
611: aload         7
613: invokestatic  #92
616: ldc           #140
618: invokestatic  #23
621: aload         7
623: invokestatic  #93
626: ldc           #140
628: invokestatic  #23
631: aload         9
633: invokestatic  #20
636: new           #83
639: dup
640: invokespecial #84
643: ldc           #85
645: invokevirtual #86
648: aload         11
650: invokevirtual #87
653: ldc           #88
655: invokevirtual #86
658: getstatic     #378
661: invokevirtual #87
664: ldc           #85
666: invokevirtual #86
669: invokevirtual #89
672: aload         11
674: getstatic     #378
677: invokevirtual #90
680: invokestatic  #91
683: new           #83
686: dup
687: invokespecial #84
690: ldc           #85
692: invokevirtual #86
695: aload         12
697: invokevirtual #87
700: ldc           #88
702: invokevirtual #86
705: getstatic     #380
708: invokevirtual #87
711: ldc           #85
713: invokevirtual #86
716: invokevirtual #89
719: aload         12
721: getstatic     #380
724: invokevirtual #90
727: invokestatic  #91
730: new           #83
733: dup
734: invokespecial #84
737: ldc           #85
739: invokevirtual #86
742: aload         13
744: invokevirtual #87
747: ldc           #88
749: invokevirtual #86
752: getstatic     #381
755: invokevirtual #87
758: ldc           #85
760: invokevirtual #86
763: invokevirtual #89
766: aload         13
768: getstatic     #381
771: invokevirtual #90
774: invokestatic  #91
777: new           #83
780: dup
781: invokespecial #84
784: ldc           #85
786: invokevirtual #86
789: aload         14
791: invokevirtual #87
794: ldc           #88
796: invokevirtual #86
799: getstatic     #382
802: invokevirtual #87
805: ldc           #85
807: invokevirtual #86
810: invokevirtual #89
813: aload         14
815: getstatic     #382
818: invokevirtual #90
821: invokestatic  #91
824: new           #83
827: dup
828: invokespecial #84
831: ldc           #85
833: invokevirtual #86
836: aload         15
838: invokevirtual #87
841: ldc           #88
843: invokevirtual #86
846: getstatic     #233
849: invokevirtual #87
852: ldc           #85
854: invokevirtual #86
857: invokevirtual #89
860: aload         15
862: getstatic     #233
865: invokevirtual #90
868: invokestatic  #91
871: new           #83
874: dup
875: invokespecial #84
878: ldc           #85
880: invokevirtual #86
883: aload         16
885: invokevirtual #87
888: ldc           #88
890: invokevirtual #86
893: getstatic     #127
896: invokevirtual #87
899: ldc           #85
901: invokevirtual #86
904: invokevirtual #89
907: aload         16
909: getstatic     #127
912: invokevirtual #90
915: invokestatic  #91
918: new           #83
921: dup
922: invokespecial #84
925: ldc           #85
927: invokevirtual #86
930: aload         17
932: invokevirtual #87
935: ldc           #88
937: invokevirtual #86
940: getstatic     #128
943: invokevirtual #87
946: ldc           #85
948: invokevirtual #86
951: invokevirtual #89
954: aload         17
956: getstatic     #128
959: invokevirtual #90
962: invokestatic  #91
965: aload         18
967: invokestatic  #20
970: aload         18
972: invokestatic  #92
975: ldc           #140
977: invokestatic  #23
980: aload         18
982: invokestatic  #93
985: ldc           #140
987: invokestatic  #23
990: new           #83
993: dup
994: invokespecial #84
997: ldc           #85
999: invokevirtual #86
1002: aload         20
1004: invokevirtual #87
1007: ldc           #88
1009: invokevirtual #86
1012: getstatic     #127
1015: invokevirtual #87
1018: ldc           #85
1020: invokevirtual #86
1023: invokevirtual #89
1026: aload         20
1028: getstatic     #127
1031: invokevirtual #90
1034: invokestatic  #91
1037: new           #83
1040: dup
1041: invokespecial #84
1044: ldc           #85
1046: invokevirtual #86
1049: aload         21
1051: invokevirtual #87
1054: ldc           #88
1056: invokevirtual #86
1059: getstatic     #128
1062: invokevirtual #87
1065: ldc           #85
1067: invokevirtual #86
1070: invokevirtual #89
1073: aload         21
1075: getstatic     #128
1078: invokevirtual #90
1081: invokestatic  #91
1084: aload         22
1086: invokestatic  #20
1089: aload         22
1091: invokestatic  #92
1094: ldc           #140
1096: invokestatic  #23
1099: aload         22
1101: invokestatic  #93
1104: ldc           #140
1106: invokestatic  #23
1109: aload         24
1111: invokestatic  #20
1114: aload         25
1116: invokestatic  #20
1119: aload         25
1121: invokestatic  #92
1124: ldc_w         #385
1127: invokestatic  #23
1130: new           #83
1133: dup
1134: invokespecial #84
1137: ldc           #85
1139: invokevirtual #86
1142: aload         27
1144: invokevirtual #87
1147: ldc           #88
1149: invokevirtual #86
1152: getstatic     #383
1155: invokevirtual #87
1158: ldc           #85
1160: invokevirtual #86
1163: invokevirtual #89
1166: aload         27
1168: getstatic     #383
1171: invokevirtual #90
1174: invokestatic  #91
1177: new           #83
1180: dup
1181: invokespecial #84
1184: ldc           #85
1186: invokevirtual #86
1189: aload         28
1191: invokevirtual #87
1194: ldc           #88
1196: invokevirtual #86
1199: getstatic     #193
1202: invokevirtual #87
1205: ldc           #85
1207: invokevirtual #86
1210: invokevirtual #89
1213: aload         28
1215: getstatic     #193
1218: invokevirtual #90
1221: invokestatic  #91
1224: aload         31
1226: invokestatic  #20
1229: aload         32
1231: invokestatic  #20
1234: aload         34
1236: invokestatic  #171
1239: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test168
Start line: 4521
End line: 4533
Method source code: 
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((-1.0d), (double) 10, (double) 10);
        harmonicFitter1.addObservedPoint((double) (-1L), (double) (-1));
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #386
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: aload_2
62: ldc2_w        #10
65: ldc2_w        #32
68: ldc2_w        #32
71: invokevirtual #54
74: aload_2
75: ldc2_w        #10
78: ldc2_w        #10
81: invokevirtual #43
84: aload_3
85: invokestatic  #20
88: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test169
Start line: 4536
End line: 4560
Method source code: 
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        java.lang.Object[] objArray11 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray10);
        org.apache.commons.math3.exception.ZeroException zeroException12 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser13 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #387
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #220
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: dconst_1
42: ldc2_w        #32
45: invokevirtual #43
48: aload_3
49: dconst_0
50: ldc2_w        #34
53: invokevirtual #43
56: aload_3
57: invokevirtual #59
60: aload_3
61: invokevirtual #25
64: astore        4
66: aload         4
68: checkcast     #79
71: invokestatic  #80
74: astore        5
76: new           #81
79: dup
80: aload_1
81: aload         4
83: checkcast     #79
86: invokespecial #82
89: astore        6
91: new           #69
94: dup
95: aload         4
97: invokespecial #70
100: astore        7
102: ldc           #27
104: invokestatic  #18
107: goto          112
110: astore        7
112: new           #83
115: dup
116: invokespecial #84
119: ldc           #85
121: invokevirtual #86
124: aload_1
125: invokevirtual #87
128: ldc           #88
130: invokevirtual #86
133: getstatic     #220
136: invokevirtual #87
139: ldc           #85
141: invokevirtual #86
144: invokevirtual #89
147: aload_1
148: getstatic     #220
151: invokevirtual #90
154: invokestatic  #91
157: aload         4
159: invokestatic  #20
162: aload         5
164: invokestatic  #20
167: aload         5
169: invokestatic  #92
172: ldc           #74
174: invokestatic  #23
177: aload         5
179: invokestatic  #93
182: ldc           #74
184: invokestatic  #23
187: return
Exception table:
from    to  target type
91   107   110   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test170
Start line: 4563
End line: 4578
Method source code: 
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray5 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray6 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #388
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #25
48: astore_3
49: aload_2
50: invokevirtual #26
53: astore        4
55: ldc           #64
57: invokestatic  #18
60: goto          65
63: astore        4
65: aload_3
66: invokestatic  #20
69: return
Exception table:
from    to  target type
49    60    63   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test171
Start line: 4581
End line: 4599
Method source code: 
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        java.lang.Number number1 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number1, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer5 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter6 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer5);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray7 = harmonicFitter6.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter6.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter6.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException10 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats4, (java.lang.Object[]) weightedObservedPointArray9);
        java.lang.Number number11 = numberIsTooSmallException3.getArgument();
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray7);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertEquals("'" + number11 + "' != '" + 100L + "'", number11, 100L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #389
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #28
30: dup
31: ldc2_w        #252
34: invokestatic  #129
37: aload_1
38: iconst_1
39: invokespecial #160
42: astore_2
43: getstatic     #254
46: astore_3
47: aconst_null
48: astore        4
50: new           #8
53: dup
54: aload         4
56: invokespecial #9
59: astore        5
61: aload         5
63: invokevirtual #25
66: astore        6
68: aload         5
70: invokevirtual #25
73: astore        7
75: aload         5
77: invokevirtual #25
80: astore        8
82: new           #136
85: dup
86: aload_2
87: aload_3
88: aload         8
90: checkcast     #79
93: invokespecial #137
96: astore        9
98: aload_2
99: invokevirtual #390
102: astore        10
104: new           #83
107: dup
108: invokespecial #84
111: ldc           #85
113: invokevirtual #86
116: aload_3
117: invokevirtual #87
120: ldc           #88
122: invokevirtual #86
125: getstatic     #254
128: invokevirtual #87
131: ldc           #85
133: invokevirtual #86
136: invokevirtual #89
139: aload_3
140: getstatic     #254
143: invokevirtual #90
146: invokestatic  #91
149: aload         6
151: invokestatic  #20
154: aload         7
156: invokestatic  #20
159: aload         8
161: invokestatic  #20
164: new           #83
167: dup
168: invokespecial #84
171: ldc           #85
173: invokevirtual #86
176: aload         10
178: invokevirtual #87
181: ldc           #88
183: invokevirtual #86
186: ldc2_w        #252
189: invokevirtual #391
192: ldc           #85
194: invokevirtual #86
197: invokevirtual #89
200: aload         10
202: ldc2_w        #252
205: invokestatic  #129
208: invokestatic  #245
211: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test172
Start line: 4602
End line: 4630
Method source code: 
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.clearObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #392
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: invokevirtual #59
107: aload_2
108: invokevirtual #26
111: astore        14
113: ldc           #27
115: invokestatic  #18
118: goto          123
121: astore        14
123: aload_3
124: invokestatic  #20
127: aload         4
129: invokestatic  #20
132: new           #83
135: dup
136: invokespecial #84
139: ldc           #85
141: invokevirtual #86
144: dload         6
146: invokevirtual #150
149: ldc           #88
151: invokevirtual #86
154: ldc2_w        #12
157: invokevirtual #150
160: ldc           #85
162: invokevirtual #86
165: invokevirtual #89
168: dload         6
170: ldc2_w        #12
173: dcmpl
174: ifne          181
177: iconst_1
178: goto          182
181: iconst_0
182: invokestatic  #91
185: new           #83
188: dup
189: invokespecial #84
192: ldc           #85
194: invokevirtual #86
197: dload         8
199: invokevirtual #150
202: ldc           #88
204: invokevirtual #86
207: ldc2_w        #14
210: invokevirtual #150
213: ldc           #85
215: invokevirtual #86
218: invokevirtual #89
221: dload         8
223: ldc2_w        #14
226: dcmpl
227: ifne          234
230: iconst_1
231: goto          235
234: iconst_0
235: invokestatic  #91
238: new           #83
241: dup
242: invokespecial #84
245: ldc           #85
247: invokevirtual #86
250: dload         10
252: invokevirtual #150
255: ldc           #88
257: invokevirtual #86
260: ldc2_w        #14
263: invokevirtual #150
266: ldc           #85
268: invokevirtual #86
271: invokevirtual #89
274: dload         10
276: ldc2_w        #14
279: dcmpl
280: ifne          287
283: iconst_1
284: goto          288
287: iconst_0
288: invokestatic  #91
291: new           #83
294: dup
295: invokespecial #84
298: ldc           #85
300: invokevirtual #86
303: dload         12
305: invokevirtual #150
308: ldc           #88
310: invokevirtual #86
313: ldc2_w        #12
316: invokevirtual #150
319: ldc           #85
321: invokevirtual #86
324: invokevirtual #89
327: dload         12
329: ldc2_w        #12
332: dcmpl
333: ifne          340
336: iconst_1
337: goto          341
340: iconst_0
341: invokestatic  #91
344: return
Exception table:
from    to  target type
107   118   121   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test173
Start line: 4633
End line: 4652
Method source code: 
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric7 = null;
        double[] doubleArray12 = new double[] { (-1L), (byte) -1, (-1L), (short) 1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = harmonicFitter1.fit(parametric7, doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, -1.0, -1.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #393
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aconst_null
53: astore        4
55: iconst_4
56: newarray       double
58: dup
59: iconst_0
60: ldc2_w        #10
63: dastore
64: dup
65: iconst_1
66: ldc2_w        #10
69: dastore
70: dup
71: iconst_2
72: ldc2_w        #10
75: dastore
76: dup
77: iconst_3
78: dconst_1
79: dastore
80: astore        5
82: aload_2
83: aload         4
85: aload         5
87: invokevirtual #30
90: astore        6
92: ldc           #17
94: invokestatic  #18
97: goto          102
100: astore        6
102: aload_3
103: invokestatic  #20
106: aload         5
108: invokestatic  #20
111: aload         5
113: invokestatic  #21
116: ldc_w         #394
119: invokestatic  #23
122: return
Exception table:
from    to  target type
82    97   100   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test174
Start line: 4655
End line: 4674
Method source code: 
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.addObservedPoint((double) (-1), (double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #395
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload_2
78: ldc2_w        #10
81: dconst_1
82: invokevirtual #43
85: aload_2
86: invokevirtual #26
89: astore        5
91: ldc           #17
93: invokestatic  #18
96: goto          101
99: astore        5
101: aload_3
102: invokestatic  #20
105: return
Exception table:
from    to  target type
85    96    99   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test175
Start line: 4677
End line: 4730
Method source code: 
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats3 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray5 = new java.lang.Object[] { localizedFormats3, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats2, objArray5);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray10 = new java.lang.Object[] { localizedFormats8, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats7, objArray10);
        mathIllegalArgumentException6.addSuppressed((java.lang.Throwable) mathIllegalArgumentException11);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray16 = new java.lang.Object[] { localizedFormats14, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException17 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException11, (org.apache.commons.math3.exception.util.Localizable) localizedFormats13, objArray16);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException18 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, objArray16);
        java.lang.Object[] objArray19 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray16);
        org.apache.commons.math3.exception.ZeroException zeroException20 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray19);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer22 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter23 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer22);
        harmonicFitter23.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter23.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter23.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray31 = harmonicFitter23.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException32 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) zeroException20, (org.apache.commons.math3.exception.util.Localizable) localizedFormats21, (java.lang.Object[]) weightedObservedPointArray31);
        java.lang.Number number33 = zeroException20.getArgument();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats3 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats3.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATION + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray31);
        org.junit.Assert.assertEquals("'" + number33 + "' != '" + 0 + "'", number33, 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #396
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #125
28: astore_1
29: getstatic     #126
32: astore_2
33: getstatic     #127
36: astore_3
37: getstatic     #128
40: astore        4
42: iconst_2
43: anewarray     #5
46: dup
47: iconst_0
48: aload         4
50: aastore
51: dup
52: iconst_1
53: lconst_1
54: invokestatic  #129
57: aastore
58: astore        5
60: new           #130
63: dup
64: aload_3
65: aload         5
67: invokespecial #131
70: astore        6
72: getstatic     #127
75: astore        7
77: getstatic     #128
80: astore        8
82: iconst_2
83: anewarray     #5
86: dup
87: iconst_0
88: aload         8
90: aastore
91: dup
92: iconst_1
93: lconst_1
94: invokestatic  #129
97: aastore
98: astore        9
100: new           #130
103: dup
104: aload         7
106: aload         9
108: invokespecial #131
111: astore        10
113: aload         6
115: aload         10
117: invokevirtual #132
120: getstatic     #133
123: astore        11
125: getstatic     #134
128: astore        12
130: iconst_2
131: anewarray     #5
134: dup
135: iconst_0
136: aload         12
138: aastore
139: dup
140: iconst_1
141: bipush        10
143: invokestatic  #135
146: aastore
147: astore        13
149: new           #136
152: dup
153: aload         10
155: aload         11
157: aload         13
159: invokespecial #137
162: astore        14
164: new           #136
167: dup
168: aload_2
169: aload         13
171: invokespecial #138
174: astore        15
176: aload         13
178: invokestatic  #80
181: astore        16
183: new           #81
186: dup
187: aload_1
188: aload         16
190: invokespecial #82
193: astore        17
195: getstatic     #139
198: astore        18
200: aconst_null
201: astore        19
203: new           #8
206: dup
207: aload         19
209: invokespecial #9
212: astore        20
214: aload         20
216: dconst_1
217: ldc2_w        #32
220: invokevirtual #43
223: aload         20
225: dconst_0
226: ldc2_w        #34
229: invokevirtual #43
232: aload         20
234: invokevirtual #59
237: aload         20
239: invokevirtual #25
242: astore        21
244: new           #136
247: dup
248: aload         17
250: aload         18
252: aload         21
254: checkcast     #79
257: invokespecial #137
260: astore        22
262: aload         17
264: invokevirtual #243
267: astore        23
269: new           #83
272: dup
273: invokespecial #84
276: ldc           #85
278: invokevirtual #86
281: aload_1
282: invokevirtual #87
285: ldc           #88
287: invokevirtual #86
290: getstatic     #125
293: invokevirtual #87
296: ldc           #85
298: invokevirtual #86
301: invokevirtual #89
304: aload_1
305: getstatic     #125
308: invokevirtual #90
311: invokestatic  #91
314: new           #83
317: dup
318: invokespecial #84
321: ldc           #85
323: invokevirtual #86
326: aload_2
327: invokevirtual #87
330: ldc           #88
332: invokevirtual #86
335: getstatic     #126
338: invokevirtual #87
341: ldc           #85
343: invokevirtual #86
346: invokevirtual #89
349: aload_2
350: getstatic     #126
353: invokevirtual #90
356: invokestatic  #91
359: new           #83
362: dup
363: invokespecial #84
366: ldc           #85
368: invokevirtual #86
371: aload_3
372: invokevirtual #87
375: ldc           #88
377: invokevirtual #86
380: getstatic     #127
383: invokevirtual #87
386: ldc           #85
388: invokevirtual #86
391: invokevirtual #89
394: aload_3
395: getstatic     #127
398: invokevirtual #90
401: invokestatic  #91
404: new           #83
407: dup
408: invokespecial #84
411: ldc           #85
413: invokevirtual #86
416: aload         4
418: invokevirtual #87
421: ldc           #88
423: invokevirtual #86
426: getstatic     #128
429: invokevirtual #87
432: ldc           #85
434: invokevirtual #86
437: invokevirtual #89
440: aload         4
442: getstatic     #128
445: invokevirtual #90
448: invokestatic  #91
451: aload         5
453: invokestatic  #20
456: aload         5
458: invokestatic  #92
461: ldc           #140
463: invokestatic  #23
466: aload         5
468: invokestatic  #93
471: ldc           #140
473: invokestatic  #23
476: new           #83
479: dup
480: invokespecial #84
483: ldc           #85
485: invokevirtual #86
488: aload         7
490: invokevirtual #87
493: ldc           #88
495: invokevirtual #86
498: getstatic     #127
501: invokevirtual #87
504: ldc           #85
506: invokevirtual #86
509: invokevirtual #89
512: aload         7
514: getstatic     #127
517: invokevirtual #90
520: invokestatic  #91
523: new           #83
526: dup
527: invokespecial #84
530: ldc           #85
532: invokevirtual #86
535: aload         8
537: invokevirtual #87
540: ldc           #88
542: invokevirtual #86
545: getstatic     #128
548: invokevirtual #87
551: ldc           #85
553: invokevirtual #86
556: invokevirtual #89
559: aload         8
561: getstatic     #128
564: invokevirtual #90
567: invokestatic  #91
570: aload         9
572: invokestatic  #20
575: aload         9
577: invokestatic  #92
580: ldc           #140
582: invokestatic  #23
585: aload         9
587: invokestatic  #93
590: ldc           #140
592: invokestatic  #23
595: new           #83
598: dup
599: invokespecial #84
602: ldc           #85
604: invokevirtual #86
607: aload         11
609: invokevirtual #87
612: ldc           #88
614: invokevirtual #86
617: getstatic     #133
620: invokevirtual #87
623: ldc           #85
625: invokevirtual #86
628: invokevirtual #89
631: aload         11
633: getstatic     #133
636: invokevirtual #90
639: invokestatic  #91
642: new           #83
645: dup
646: invokespecial #84
649: ldc           #85
651: invokevirtual #86
654: aload         12
656: invokevirtual #87
659: ldc           #88
661: invokevirtual #86
664: getstatic     #134
667: invokevirtual #87
670: ldc           #85
672: invokevirtual #86
675: invokevirtual #89
678: aload         12
680: getstatic     #134
683: invokevirtual #90
686: invokestatic  #91
689: aload         13
691: invokestatic  #20
694: aload         13
696: invokestatic  #92
699: ldc           #141
701: invokestatic  #23
704: aload         13
706: invokestatic  #93
709: ldc           #141
711: invokestatic  #23
714: aload         16
716: invokestatic  #20
719: aload         16
721: invokestatic  #92
724: ldc           #141
726: invokestatic  #23
729: aload         16
731: invokestatic  #93
734: ldc           #141
736: invokestatic  #23
739: new           #83
742: dup
743: invokespecial #84
746: ldc           #85
748: invokevirtual #86
751: aload         18
753: invokevirtual #87
756: ldc           #88
758: invokevirtual #86
761: getstatic     #139
764: invokevirtual #87
767: ldc           #85
769: invokevirtual #86
772: invokevirtual #89
775: aload         18
777: getstatic     #139
780: invokevirtual #90
783: invokestatic  #91
786: aload         21
788: invokestatic  #20
791: new           #83
794: dup
795: invokespecial #84
798: ldc           #85
800: invokevirtual #86
803: aload         23
805: invokevirtual #87
808: ldc           #88
810: invokevirtual #86
813: iconst_0
814: invokevirtual #244
817: ldc           #85
819: invokevirtual #86
822: invokevirtual #89
825: aload         23
827: iconst_0
828: invokestatic  #135
831: invokestatic  #245
834: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test176
Start line: 4733
End line: 4745
Method source code: 
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(52.0d, 52.0d, 35.0d);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) '#', (double) (-1.0f));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #397
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: ldc2_w        #12
64: ldc2_w        #12
67: ldc2_w        #14
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: ldc2_w        #14
81: ldc2_w        #10
84: invokevirtual #43
87: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test177
Start line: 4748
End line: 4772
Method source code: 
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray4 = numberIsTooSmallException3.getSuppressed();
        boolean boolean5 = numberIsTooSmallException3.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ABSCISSA;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException16 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats6, (java.lang.Object[]) weightedObservedPointArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser17 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 2 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ABSCISSA + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ABSCISSA));
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #398
20: aastore
21: invokevirtual #7
24: pop
25: new           #28
28: dup
29: ldc2_w        #277
32: invokestatic  #129
35: bipush        10
37: invokestatic  #159
40: iconst_1
41: invokespecial #160
44: astore_1
45: aload_1
46: invokevirtual #334
49: astore_2
50: aload_1
51: invokevirtual #162
54: istore_3
55: getstatic     #399
58: astore        4
60: aconst_null
61: astore        5
63: new           #8
66: dup
67: aload         5
69: invokespecial #9
72: astore        6
74: aload         6
76: dconst_1
77: ldc2_w        #32
80: invokevirtual #43
83: aload         6
85: dconst_0
86: ldc2_w        #34
89: invokevirtual #43
92: aload         6
94: invokevirtual #25
97: astore        7
99: new           #136
102: dup
103: aload_1
104: aload         4
106: aload         7
108: checkcast     #79
111: invokespecial #137
114: astore        8
116: new           #69
119: dup
120: aload         7
122: invokespecial #70
125: astore        9
127: ldc           #186
129: invokestatic  #18
132: goto          137
135: astore        9
137: aload_2
138: invokestatic  #20
141: new           #83
144: dup
145: invokespecial #84
148: ldc           #85
150: invokevirtual #86
153: iload_3
154: invokevirtual #170
157: ldc           #88
159: invokevirtual #86
162: iconst_1
163: invokevirtual #170
166: ldc           #85
168: invokevirtual #86
171: invokevirtual #89
174: iload_3
175: iconst_1
176: if_icmpne     183
179: iconst_1
180: goto          184
183: iconst_0
184: invokestatic  #91
187: new           #83
190: dup
191: invokespecial #84
194: ldc           #85
196: invokevirtual #86
199: aload         4
201: invokevirtual #87
204: ldc           #88
206: invokevirtual #86
209: getstatic     #399
212: invokevirtual #87
215: ldc           #85
217: invokevirtual #86
220: invokevirtual #89
223: aload         4
225: getstatic     #399
228: invokevirtual #90
231: invokestatic  #91
234: aload         7
236: invokestatic  #20
239: return
Exception table:
from    to  target type
116   132   135   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test178
Start line: 4775
End line: 4799
Method source code: 
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.addObservedPoint((double) 0, (double) (short) 100, (double) (short) 0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray18 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) '#', 0.0d, 1.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #400
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: dconst_0
105: ldc2_w        #34
108: dconst_0
109: invokevirtual #54
112: aload_2
113: invokevirtual #25
116: astore        14
118: aload_2
119: ldc2_w        #14
122: dconst_0
123: dconst_1
124: invokevirtual #54
127: aload_3
128: invokestatic  #20
131: aload         4
133: invokestatic  #20
136: new           #83
139: dup
140: invokespecial #84
143: ldc           #85
145: invokevirtual #86
148: dload         6
150: invokevirtual #150
153: ldc           #88
155: invokevirtual #86
158: ldc2_w        #12
161: invokevirtual #150
164: ldc           #85
166: invokevirtual #86
169: invokevirtual #89
172: dload         6
174: ldc2_w        #12
177: dcmpl
178: ifne          185
181: iconst_1
182: goto          186
185: iconst_0
186: invokestatic  #91
189: new           #83
192: dup
193: invokespecial #84
196: ldc           #85
198: invokevirtual #86
201: dload         8
203: invokevirtual #150
206: ldc           #88
208: invokevirtual #86
211: ldc2_w        #14
214: invokevirtual #150
217: ldc           #85
219: invokevirtual #86
222: invokevirtual #89
225: dload         8
227: ldc2_w        #14
230: dcmpl
231: ifne          238
234: iconst_1
235: goto          239
238: iconst_0
239: invokestatic  #91
242: new           #83
245: dup
246: invokespecial #84
249: ldc           #85
251: invokevirtual #86
254: dload         10
256: invokevirtual #150
259: ldc           #88
261: invokevirtual #86
264: ldc2_w        #14
267: invokevirtual #150
270: ldc           #85
272: invokevirtual #86
275: invokevirtual #89
278: dload         10
280: ldc2_w        #14
283: dcmpl
284: ifne          291
287: iconst_1
288: goto          292
291: iconst_0
292: invokestatic  #91
295: new           #83
298: dup
299: invokespecial #84
302: ldc           #85
304: invokevirtual #86
307: dload         12
309: invokevirtual #150
312: ldc           #88
314: invokevirtual #86
317: ldc2_w        #12
320: invokevirtual #150
323: ldc           #85
325: invokevirtual #86
328: invokevirtual #89
331: dload         12
333: ldc2_w        #12
336: dcmpl
337: ifne          344
340: iconst_1
341: goto          345
344: iconst_0
345: invokestatic  #91
348: aload         14
350: invokestatic  #20
353: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test179
Start line: 4802
End line: 4852
Method source code: 
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        java.lang.Throwable[] throwableArray11 = mathIllegalArgumentException4.getSuppressed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext12 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException4);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE;
        exceptionContext12.setValue("cannot compute beta density at 0 when alpha = {0,number}", (java.lang.Object) localizedFormats14);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.DIGEST_NOT_INITIALIZED;
        exceptionContext12.setValue("imaginary format", (java.lang.Object) localizedFormats17);
        java.lang.Throwable throwable19 = exceptionContext12.getThrowable();
        java.lang.Object obj21 = exceptionContext12.getValue("equal vertices {0} and {1} in simplex configuration");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer24 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter25 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer24);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray26 = harmonicFitter25.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException27 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, (java.lang.Object[]) weightedObservedPointArray26);
        java.lang.Throwable[] throwableArray28 = zeroException27.getSuppressed();
        exceptionContext12.setValue("degrees of freedom ({0})", (java.lang.Object) throwableArray28);
        java.util.Set<java.lang.String> strSet30 = exceptionContext12.getKeys();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE));
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.DIGEST_NOT_INITIALIZED + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.DIGEST_NOT_INITIALIZED));
        org.junit.Assert.assertNotNull(throwable19);
        org.junit.Assert.assertEquals(throwable19.getLocalizedMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertEquals(throwable19.getMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertEquals(throwable19.toString(), "org.apache.commons.math3.exception.MathIllegalArgumentException: overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(strSet30);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #401
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: aload         4
110: invokevirtual #234
113: astore        9
115: new           #163
118: dup
119: aload         4
121: invokespecial #164
124: astore        10
126: getstatic     #378
129: astore        11
131: aload         10
133: ldc_w         #379
136: aload         11
138: invokevirtual #373
141: getstatic     #402
144: astore        12
146: aload         10
148: ldc_w         #403
151: aload         12
153: invokevirtual #373
156: aload         10
158: invokevirtual #288
161: astore        13
163: aload         10
165: ldc_w         #404
168: invokevirtual #167
171: astore        14
173: getstatic     #156
176: astore        15
178: aconst_null
179: astore        16
181: new           #8
184: dup
185: aload         16
187: invokespecial #9
190: astore        17
192: aload         17
194: invokevirtual #25
197: astore        18
199: new           #81
202: dup
203: aload         15
205: aload         18
207: checkcast     #79
210: invokespecial #82
213: astore        19
215: aload         19
217: invokevirtual #405
220: astore        20
222: aload         10
224: ldc_w         #406
227: aload         20
229: invokevirtual #373
232: aload         10
234: invokevirtual #370
237: astore        21
239: new           #83
242: dup
243: invokespecial #84
246: ldc           #85
248: invokevirtual #86
251: aload_1
252: invokevirtual #87
255: ldc           #88
257: invokevirtual #86
260: getstatic     #127
263: invokevirtual #87
266: ldc           #85
268: invokevirtual #86
271: invokevirtual #89
274: aload_1
275: getstatic     #127
278: invokevirtual #90
281: invokestatic  #91
284: new           #83
287: dup
288: invokespecial #84
291: ldc           #85
293: invokevirtual #86
296: aload_2
297: invokevirtual #87
300: ldc           #88
302: invokevirtual #86
305: getstatic     #128
308: invokevirtual #87
311: ldc           #85
313: invokevirtual #86
316: invokevirtual #89
319: aload_2
320: getstatic     #128
323: invokevirtual #90
326: invokestatic  #91
329: aload_3
330: invokestatic  #20
333: aload_3
334: invokestatic  #92
337: ldc           #140
339: invokestatic  #23
342: aload_3
343: invokestatic  #93
346: ldc           #140
348: invokestatic  #23
351: new           #83
354: dup
355: invokespecial #84
358: ldc           #85
360: invokevirtual #86
363: aload         5
365: invokevirtual #87
368: ldc           #88
370: invokevirtual #86
373: getstatic     #127
376: invokevirtual #87
379: ldc           #85
381: invokevirtual #86
384: invokevirtual #89
387: aload         5
389: getstatic     #127
392: invokevirtual #90
395: invokestatic  #91
398: new           #83
401: dup
402: invokespecial #84
405: ldc           #85
407: invokevirtual #86
410: aload         6
412: invokevirtual #87
415: ldc           #88
417: invokevirtual #86
420: getstatic     #128
423: invokevirtual #87
426: ldc           #85
428: invokevirtual #86
431: invokevirtual #89
434: aload         6
436: getstatic     #128
439: invokevirtual #90
442: invokestatic  #91
445: aload         7
447: invokestatic  #20
450: aload         7
452: invokestatic  #92
455: ldc           #140
457: invokestatic  #23
460: aload         7
462: invokestatic  #93
465: ldc           #140
467: invokestatic  #23
470: aload         9
472: invokestatic  #20
475: new           #83
478: dup
479: invokespecial #84
482: ldc           #85
484: invokevirtual #86
487: aload         11
489: invokevirtual #87
492: ldc           #88
494: invokevirtual #86
497: getstatic     #378
500: invokevirtual #87
503: ldc           #85
505: invokevirtual #86
508: invokevirtual #89
511: aload         11
513: getstatic     #378
516: invokevirtual #90
519: invokestatic  #91
522: new           #83
525: dup
526: invokespecial #84
529: ldc           #85
531: invokevirtual #86
534: aload         12
536: invokevirtual #87
539: ldc           #88
541: invokevirtual #86
544: getstatic     #402
547: invokevirtual #87
550: ldc           #85
552: invokevirtual #86
555: invokevirtual #89
558: aload         12
560: getstatic     #402
563: invokevirtual #90
566: invokestatic  #91
569: aload         13
571: invokestatic  #20
574: aload         13
576: invokevirtual #289
579: ldc_w         #407
582: invokestatic  #23
585: aload         13
587: invokevirtual #291
590: ldc_w         #407
593: invokestatic  #23
596: aload         13
598: invokevirtual #292
601: ldc_w         #408
604: invokestatic  #23
607: aload         14
609: invokestatic  #171
612: new           #83
615: dup
616: invokespecial #84
619: ldc           #85
621: invokevirtual #86
624: aload         15
626: invokevirtual #87
629: ldc           #88
631: invokevirtual #86
634: getstatic     #156
637: invokevirtual #87
640: ldc           #85
642: invokevirtual #86
645: invokevirtual #89
648: aload         15
650: getstatic     #156
653: invokevirtual #90
656: invokestatic  #91
659: aload         18
661: invokestatic  #20
664: aload         20
666: invokestatic  #20
669: aload         21
671: invokestatic  #20
674: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test180
Start line: 4855
End line: 4877
Method source code: 
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) 0, 0.0d, (double) 100.0f);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric13 = null;
        double[] doubleArray15 = new double[] { 0 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = harmonicFitter1.fit(parametric13, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #409
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: ldc2_w        #34
49: ldc2_w        #10
52: ldc2_w        #10
55: invokevirtual #54
58: aload_2
59: invokevirtual #59
62: aload_2
63: dconst_0
64: dconst_0
65: ldc2_w        #34
68: invokevirtual #54
71: aconst_null
72: astore        4
74: iconst_1
75: newarray       double
77: dup
78: iconst_0
79: dconst_0
80: dastore
81: astore        5
83: aload_2
84: aload         4
86: aload         5
88: invokevirtual #30
91: astore        6
93: ldc           #17
95: invokestatic  #18
98: goto          103
101: astore        6
103: aload_3
104: invokestatic  #20
107: aload         5
109: invokestatic  #20
112: aload         5
114: invokestatic  #21
117: ldc_w         #410
120: invokestatic  #23
123: return
Exception table:
from    to  target type
83    98   101   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test181
Start line: 4880
End line: 4899
Method source code: 
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        java.lang.Object[] objArray11 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray10);
        org.apache.commons.math3.exception.ZeroException zeroException12 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray10);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext13 = zeroException12.getContext();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(exceptionContext13);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #411
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #220
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: dconst_1
42: ldc2_w        #32
45: invokevirtual #43
48: aload_3
49: dconst_0
50: ldc2_w        #34
53: invokevirtual #43
56: aload_3
57: invokevirtual #59
60: aload_3
61: invokevirtual #25
64: astore        4
66: aload         4
68: checkcast     #79
71: invokestatic  #80
74: astore        5
76: new           #81
79: dup
80: aload_1
81: aload         4
83: checkcast     #79
86: invokespecial #82
89: astore        6
91: aload         6
93: invokevirtual #412
96: astore        7
98: new           #83
101: dup
102: invokespecial #84
105: ldc           #85
107: invokevirtual #86
110: aload_1
111: invokevirtual #87
114: ldc           #88
116: invokevirtual #86
119: getstatic     #220
122: invokevirtual #87
125: ldc           #85
127: invokevirtual #86
130: invokevirtual #89
133: aload_1
134: getstatic     #220
137: invokevirtual #90
140: invokestatic  #91
143: aload         4
145: invokestatic  #20
148: aload         5
150: invokestatic  #20
153: aload         5
155: invokestatic  #92
158: ldc           #74
160: invokestatic  #23
163: aload         5
165: invokestatic  #93
168: ldc           #74
170: invokestatic  #23
173: aload         7
175: invokestatic  #20
178: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test182
Start line: 4902
End line: 4930
Method source code: 
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint17 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double18 = weightedObservedPoint17.getX();
        double double19 = weightedObservedPoint17.getY();
        double double20 = weightedObservedPoint17.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint17);
        double[] doubleArray28 = new double[] { 100.0d, 'a', (short) 1, 100, 52.0d, 52.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray29 = harmonicFitter1.fit(doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0, 97.0, 1.0, 100.0, 52.0, 52.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #413
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: new           #145
76: dup
77: ldc2_w        #14
80: ldc2_w        #12
83: ldc2_w        #12
86: invokespecial #146
89: astore        4
91: aload         4
93: invokevirtual #147
96: dstore        5
98: aload         4
100: invokevirtual #149
103: dstore        7
105: aload         4
107: invokevirtual #149
110: dstore        9
112: aload_2
113: aload         4
115: invokevirtual #123
118: bipush        6
120: newarray       double
122: dup
123: iconst_0
124: ldc2_w        #34
127: dastore
128: dup
129: iconst_1
130: ldc2_w        #44
133: dastore
134: dup
135: iconst_2
136: dconst_1
137: dastore
138: dup
139: iconst_3
140: ldc2_w        #34
143: dastore
144: dup
145: iconst_4
146: ldc2_w        #12
149: dastore
150: dup
151: iconst_5
152: ldc2_w        #12
155: dastore
156: astore        11
158: aload_2
159: aload         11
161: invokevirtual #16
164: astore        12
166: ldc           #17
168: invokestatic  #18
171: goto          176
174: astore        12
176: aload_3
177: invokestatic  #20
180: new           #83
183: dup
184: invokespecial #84
187: ldc           #85
189: invokevirtual #86
192: dload         5
194: invokevirtual #150
197: ldc           #88
199: invokevirtual #86
202: ldc2_w        #12
205: invokevirtual #150
208: ldc           #85
210: invokevirtual #86
213: invokevirtual #89
216: dload         5
218: ldc2_w        #12
221: dcmpl
222: ifne          229
225: iconst_1
226: goto          230
229: iconst_0
230: invokestatic  #91
233: new           #83
236: dup
237: invokespecial #84
240: ldc           #85
242: invokevirtual #86
245: dload         7
247: invokevirtual #150
250: ldc           #88
252: invokevirtual #86
255: ldc2_w        #12
258: invokevirtual #150
261: ldc           #85
263: invokevirtual #86
266: invokevirtual #89
269: dload         7
271: ldc2_w        #12
274: dcmpl
275: ifne          282
278: iconst_1
279: goto          283
282: iconst_0
283: invokestatic  #91
286: new           #83
289: dup
290: invokespecial #84
293: ldc           #85
295: invokevirtual #86
298: dload         9
300: invokevirtual #150
303: ldc           #88
305: invokevirtual #86
308: ldc2_w        #12
311: invokevirtual #150
314: ldc           #85
316: invokevirtual #86
319: invokevirtual #89
322: dload         9
324: ldc2_w        #12
327: dcmpl
328: ifne          335
331: iconst_1
332: goto          336
335: iconst_0
336: invokestatic  #91
339: aload         11
341: invokestatic  #20
344: aload         11
346: invokestatic  #21
349: ldc_w         #414
352: invokestatic  #23
355: return
Exception table:
from    to  target type
158   171   174   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test183
Start line: 4933
End line: 4954
Method source code: 
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) 0, 0.0d, (double) 100.0f);
        double[] doubleArray18 = new double[] { 0, (short) -1, 35.0d, (-1.0f), (short) 100 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = harmonicFitter1.fit(doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, -1.0, 35.0, -1.0, 100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #415
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: ldc2_w        #34
49: ldc2_w        #10
52: ldc2_w        #10
55: invokevirtual #54
58: aload_2
59: invokevirtual #59
62: aload_2
63: dconst_0
64: dconst_0
65: ldc2_w        #34
68: invokevirtual #54
71: iconst_5
72: newarray       double
74: dup
75: iconst_0
76: dconst_0
77: dastore
78: dup
79: iconst_1
80: ldc2_w        #10
83: dastore
84: dup
85: iconst_2
86: ldc2_w        #14
89: dastore
90: dup
91: iconst_3
92: ldc2_w        #10
95: dastore
96: dup
97: iconst_4
98: ldc2_w        #34
101: dastore
102: astore        4
104: aload_2
105: aload         4
107: invokevirtual #16
110: astore        5
112: ldc           #17
114: invokestatic  #18
117: goto          122
120: astore        5
122: aload_3
123: invokestatic  #20
126: aload         4
128: invokestatic  #20
131: aload         4
133: invokestatic  #21
136: ldc_w         #416
139: invokestatic  #23
142: return
Exception table:
from    to  target type
104   117   120   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test184
Start line: 4957
End line: 4974
Method source code: 
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric4 = null;
        double[] doubleArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray6 = harmonicFitter1.fit(parametric4, doubleArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #417
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aconst_null
46: astore        4
48: aconst_null
49: astore        5
51: aload_2
52: aload         4
54: aload         5
56: invokevirtual #30
59: astore        6
61: ldc           #17
63: invokestatic  #18
66: goto          71
69: astore        6
71: aload_3
72: invokestatic  #20
75: return
Exception table:
from    to  target type
51    66    69   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test185
Start line: 4977
End line: 4995
Method source code: 
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) 0, 0.0d, (double) 100.0f);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #418
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: ldc2_w        #34
49: ldc2_w        #10
52: ldc2_w        #10
55: invokevirtual #54
58: aload_2
59: invokevirtual #59
62: aload_2
63: dconst_0
64: dconst_0
65: ldc2_w        #34
68: invokevirtual #54
71: aload_2
72: invokevirtual #26
75: astore        4
77: ldc           #64
79: invokestatic  #18
82: goto          87
85: astore        4
87: aload_3
88: invokestatic  #20
91: return
Exception table:
from    to  target type
71    82    85   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test186
Start line: 4998
End line: 5064
Method source code: 
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.INDEX;
        java.lang.Number number4 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException6 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number4, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException9 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException6, (org.apache.commons.math3.exception.util.Localizable) localizedFormats7, objArray8);
        boolean boolean10 = numberIsTooSmallException6.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext11 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException6);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray15 = new java.lang.Object[] { localizedFormats13, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException16 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats12, objArray15);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats18 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray20 = new java.lang.Object[] { localizedFormats18, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException21 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats17, objArray20);
        mathIllegalArgumentException16.addSuppressed((java.lang.Throwable) mathIllegalArgumentException21);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext23 = mathIllegalArgumentException16.getContext();
        java.lang.Object obj25 = exceptionContext23.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats26 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer27 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter28 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer27);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray29 = harmonicFitter28.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray30 = harmonicFitter28.getObservations();
        exceptionContext23.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats26, (java.lang.Object[]) weightedObservedPointArray30);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats32 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer33 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter34 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer33);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray35 = harmonicFitter34.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException36 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats32, (java.lang.Object[]) weightedObservedPointArray35);
        exceptionContext11.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats26, (java.lang.Object[]) weightedObservedPointArray35);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException38 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats2, (java.lang.Object[]) weightedObservedPointArray35);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException39 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) weightedObservedPointArray35);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException40 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray35);
        java.lang.Class<?> wildcardClass41 = weightedObservedPointArray35.getClass();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INDEX + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats18 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats18.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + localizedFormats26 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats26.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray29);
        org.junit.Assert.assertNotNull(weightedObservedPointArray30);
        org.junit.Assert.assertTrue("'" + localizedFormats32 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats32.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray35);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #419
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #270
28: astore_1
29: getstatic     #230
32: astore_2
33: getstatic     #231
36: astore_3
37: aconst_null
38: astore        4
40: new           #28
43: dup
44: bipush        100
46: invokestatic  #159
49: aload         4
51: iconst_0
52: invokespecial #160
55: astore        5
57: getstatic     #161
60: astore        6
62: iconst_0
63: anewarray     #5
66: astore        7
68: new           #136
71: dup
72: aload         5
74: aload         6
76: aload         7
78: invokespecial #137
81: astore        8
83: aload         5
85: invokevirtual #162
88: istore        9
90: new           #163
93: dup
94: aload         5
96: invokespecial #164
99: astore        10
101: getstatic     #127
104: astore        11
106: getstatic     #128
109: astore        12
111: iconst_2
112: anewarray     #5
115: dup
116: iconst_0
117: aload         12
119: aastore
120: dup
121: iconst_1
122: lconst_1
123: invokestatic  #129
126: aastore
127: astore        13
129: new           #130
132: dup
133: aload         11
135: aload         13
137: invokespecial #131
140: astore        14
142: getstatic     #127
145: astore        15
147: getstatic     #128
150: astore        16
152: iconst_2
153: anewarray     #5
156: dup
157: iconst_0
158: aload         16
160: aastore
161: dup
162: iconst_1
163: lconst_1
164: invokestatic  #129
167: aastore
168: astore        17
170: new           #130
173: dup
174: aload         15
176: aload         17
178: invokespecial #131
181: astore        18
183: aload         14
185: aload         18
187: invokevirtual #132
190: aload         14
192: invokevirtual #165
195: astore        19
197: aload         19
199: ldc           #166
201: invokevirtual #167
204: astore        20
206: getstatic     #168
209: astore        21
211: aconst_null
212: astore        22
214: new           #8
217: dup
218: aload         22
220: invokespecial #9
223: astore        23
225: aload         23
227: invokevirtual #25
230: astore        24
232: aload         23
234: invokevirtual #25
237: astore        25
239: aload         19
241: aload         21
243: aload         25
245: checkcast     #79
248: invokevirtual #169
251: getstatic     #156
254: astore        26
256: aconst_null
257: astore        27
259: new           #8
262: dup
263: aload         27
265: invokespecial #9
268: astore        28
270: aload         28
272: invokevirtual #25
275: astore        29
277: new           #81
280: dup
281: aload         26
283: aload         29
285: checkcast     #79
288: invokespecial #82
291: astore        30
293: aload         10
295: aload         21
297: aload         29
299: checkcast     #79
302: invokevirtual #169
305: new           #130
308: dup
309: aload_3
310: aload         29
312: checkcast     #79
315: invokespecial #131
318: astore        31
320: new           #130
323: dup
324: aload_2
325: aload         29
327: checkcast     #79
330: invokespecial #131
333: astore        32
335: new           #130
338: dup
339: aload_1
340: aload         29
342: checkcast     #79
345: invokespecial #131
348: astore        33
350: aload         29
352: invokevirtual #98
355: astore        34
357: new           #83
360: dup
361: invokespecial #84
364: ldc           #85
366: invokevirtual #86
369: aload_1
370: invokevirtual #87
373: ldc           #88
375: invokevirtual #86
378: getstatic     #270
381: invokevirtual #87
384: ldc           #85
386: invokevirtual #86
389: invokevirtual #89
392: aload_1
393: getstatic     #270
396: invokevirtual #90
399: invokestatic  #91
402: new           #83
405: dup
406: invokespecial #84
409: ldc           #85
411: invokevirtual #86
414: aload_2
415: invokevirtual #87
418: ldc           #88
420: invokevirtual #86
423: getstatic     #230
426: invokevirtual #87
429: ldc           #85
431: invokevirtual #86
434: invokevirtual #89
437: aload_2
438: getstatic     #230
441: invokevirtual #90
444: invokestatic  #91
447: new           #83
450: dup
451: invokespecial #84
454: ldc           #85
456: invokevirtual #86
459: aload_3
460: invokevirtual #87
463: ldc           #88
465: invokevirtual #86
468: getstatic     #231
471: invokevirtual #87
474: ldc           #85
476: invokevirtual #86
479: invokevirtual #89
482: aload_3
483: getstatic     #231
486: invokevirtual #90
489: invokestatic  #91
492: new           #83
495: dup
496: invokespecial #84
499: ldc           #85
501: invokevirtual #86
504: aload         6
506: invokevirtual #87
509: ldc           #88
511: invokevirtual #86
514: getstatic     #161
517: invokevirtual #87
520: ldc           #85
522: invokevirtual #86
525: invokevirtual #89
528: aload         6
530: getstatic     #161
533: invokevirtual #90
536: invokestatic  #91
539: aload         7
541: invokestatic  #20
544: aload         7
546: invokestatic  #92
549: ldc           #74
551: invokestatic  #23
554: aload         7
556: invokestatic  #93
559: ldc           #74
561: invokestatic  #23
564: new           #83
567: dup
568: invokespecial #84
571: ldc           #85
573: invokevirtual #86
576: iload         9
578: invokevirtual #170
581: ldc           #88
583: invokevirtual #86
586: iconst_0
587: invokevirtual #170
590: ldc           #85
592: invokevirtual #86
595: invokevirtual #89
598: iload         9
600: ifne          607
603: iconst_1
604: goto          608
607: iconst_0
608: invokestatic  #91
611: new           #83
614: dup
615: invokespecial #84
618: ldc           #85
620: invokevirtual #86
623: aload         11
625: invokevirtual #87
628: ldc           #88
630: invokevirtual #86
633: getstatic     #127
636: invokevirtual #87
639: ldc           #85
641: invokevirtual #86
644: invokevirtual #89
647: aload         11
649: getstatic     #127
652: invokevirtual #90
655: invokestatic  #91
658: new           #83
661: dup
662: invokespecial #84
665: ldc           #85
667: invokevirtual #86
670: aload         12
672: invokevirtual #87
675: ldc           #88
677: invokevirtual #86
680: getstatic     #128
683: invokevirtual #87
686: ldc           #85
688: invokevirtual #86
691: invokevirtual #89
694: aload         12
696: getstatic     #128
699: invokevirtual #90
702: invokestatic  #91
705: aload         13
707: invokestatic  #20
710: aload         13
712: invokestatic  #92
715: ldc           #140
717: invokestatic  #23
720: aload         13
722: invokestatic  #93
725: ldc           #140
727: invokestatic  #23
730: new           #83
733: dup
734: invokespecial #84
737: ldc           #85
739: invokevirtual #86
742: aload         15
744: invokevirtual #87
747: ldc           #88
749: invokevirtual #86
752: getstatic     #127
755: invokevirtual #87
758: ldc           #85
760: invokevirtual #86
763: invokevirtual #89
766: aload         15
768: getstatic     #127
771: invokevirtual #90
774: invokestatic  #91
777: new           #83
780: dup
781: invokespecial #84
784: ldc           #85
786: invokevirtual #86
789: aload         16
791: invokevirtual #87
794: ldc           #88
796: invokevirtual #86
799: getstatic     #128
802: invokevirtual #87
805: ldc           #85
807: invokevirtual #86
810: invokevirtual #89
813: aload         16
815: getstatic     #128
818: invokevirtual #90
821: invokestatic  #91
824: aload         17
826: invokestatic  #20
829: aload         17
831: invokestatic  #92
834: ldc           #140
836: invokestatic  #23
839: aload         17
841: invokestatic  #93
844: ldc           #140
846: invokestatic  #23
849: aload         19
851: invokestatic  #20
854: aload         20
856: invokestatic  #171
859: new           #83
862: dup
863: invokespecial #84
866: ldc           #85
868: invokevirtual #86
871: aload         21
873: invokevirtual #87
876: ldc           #88
878: invokevirtual #86
881: getstatic     #168
884: invokevirtual #87
887: ldc           #85
889: invokevirtual #86
892: invokevirtual #89
895: aload         21
897: getstatic     #168
900: invokevirtual #90
903: invokestatic  #91
906: aload         24
908: invokestatic  #20
911: aload         25
913: invokestatic  #20
916: new           #83
919: dup
920: invokespecial #84
923: ldc           #85
925: invokevirtual #86
928: aload         26
930: invokevirtual #87
933: ldc           #88
935: invokevirtual #86
938: getstatic     #156
941: invokevirtual #87
944: ldc           #85
946: invokevirtual #86
949: invokevirtual #89
952: aload         26
954: getstatic     #156
957: invokevirtual #90
960: invokestatic  #91
963: aload         29
965: invokestatic  #20
968: aload         34
970: invokestatic  #20
973: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test187
Start line: 5067
End line: 5092
Method source code: 
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray16 = harmonicFitter1.getObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertNotNull(weightedObservedPointArray16);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #420
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: invokevirtual #59
107: aload_2
108: invokevirtual #25
111: astore        14
113: aload_2
114: invokevirtual #25
117: astore        15
119: aload_3
120: invokestatic  #20
123: aload         4
125: invokestatic  #20
128: new           #83
131: dup
132: invokespecial #84
135: ldc           #85
137: invokevirtual #86
140: dload         6
142: invokevirtual #150
145: ldc           #88
147: invokevirtual #86
150: ldc2_w        #12
153: invokevirtual #150
156: ldc           #85
158: invokevirtual #86
161: invokevirtual #89
164: dload         6
166: ldc2_w        #12
169: dcmpl
170: ifne          177
173: iconst_1
174: goto          178
177: iconst_0
178: invokestatic  #91
181: new           #83
184: dup
185: invokespecial #84
188: ldc           #85
190: invokevirtual #86
193: dload         8
195: invokevirtual #150
198: ldc           #88
200: invokevirtual #86
203: ldc2_w        #14
206: invokevirtual #150
209: ldc           #85
211: invokevirtual #86
214: invokevirtual #89
217: dload         8
219: ldc2_w        #14
222: dcmpl
223: ifne          230
226: iconst_1
227: goto          231
230: iconst_0
231: invokestatic  #91
234: new           #83
237: dup
238: invokespecial #84
241: ldc           #85
243: invokevirtual #86
246: dload         10
248: invokevirtual #150
251: ldc           #88
253: invokevirtual #86
256: ldc2_w        #14
259: invokevirtual #150
262: ldc           #85
264: invokevirtual #86
267: invokevirtual #89
270: dload         10
272: ldc2_w        #14
275: dcmpl
276: ifne          283
279: iconst_1
280: goto          284
283: iconst_0
284: invokestatic  #91
287: new           #83
290: dup
291: invokespecial #84
294: ldc           #85
296: invokevirtual #86
299: dload         12
301: invokevirtual #150
304: ldc           #88
306: invokevirtual #86
309: ldc2_w        #12
312: invokevirtual #150
315: ldc           #85
317: invokevirtual #86
320: invokevirtual #89
323: dload         12
325: ldc2_w        #12
328: dcmpl
329: ifne          336
332: iconst_1
333: goto          337
336: iconst_0
337: invokestatic  #91
340: aload         14
342: invokestatic  #20
345: aload         15
347: invokestatic  #20
350: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test188
Start line: 5095
End line: 5108
Method source code: 
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.addObservedPoint((double) (-1), (double) (byte) 1);
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1L), (double) (short) 10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #421
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload_2
78: ldc2_w        #10
81: dconst_1
82: invokevirtual #43
85: aload_2
86: ldc2_w        #32
89: ldc2_w        #10
92: ldc2_w        #32
95: invokevirtual #54
98: aload_3
99: invokestatic  #20
102: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test189
Start line: 5111
End line: 5129
Method source code: 
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint19 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter8.addObservedPoint(weightedObservedPoint19);
        harmonicFitter1.addObservedPoint(weightedObservedPoint19);
        harmonicFitter1.addObservedPoint(0.0d, (double) 10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #422
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aconst_null
53: astore        4
55: new           #8
58: dup
59: aload         4
61: invokespecial #9
64: astore        5
66: aload         5
68: dconst_1
69: ldc2_w        #32
72: invokevirtual #43
75: aload         5
77: dconst_0
78: ldc2_w        #34
81: invokevirtual #43
84: aload         5
86: invokevirtual #25
89: astore        6
91: new           #145
94: dup
95: dconst_1
96: dconst_0
97: ldc2_w        #34
100: invokespecial #146
103: astore        7
105: aload         5
107: aload         7
109: invokevirtual #123
112: aload_2
113: aload         7
115: invokevirtual #123
118: aload_2
119: dconst_0
120: ldc2_w        #32
123: invokevirtual #43
126: aload_3
127: invokestatic  #20
130: aload         6
132: invokestatic  #20
135: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test190
Start line: 5132
End line: 5234
Method source code: 
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Number) 1.0d, (java.lang.Number) (byte) 100, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray11 = new java.lang.Object[] { localizedFormats9, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException12 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats8, objArray11);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray16 = new java.lang.Object[] { localizedFormats14, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException17 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats13, objArray16);
        mathIllegalArgumentException12.addSuppressed((java.lang.Throwable) mathIllegalArgumentException17);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats19 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray22 = new java.lang.Object[] { localizedFormats20, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException23 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException17, (org.apache.commons.math3.exception.util.Localizable) localizedFormats19, objArray22);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException24 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats7, objArray22);
        java.lang.Object[] objArray25 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray22);
        org.apache.commons.math3.exception.ZeroException zeroException26 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats6, objArray25);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException27 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray25);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats28 = org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray32 = new java.lang.Object[] { localizedFormats30, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException33 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats29, objArray32);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats34 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats35 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray37 = new java.lang.Object[] { localizedFormats35, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException38 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats34, objArray37);
        mathIllegalArgumentException33.addSuppressed((java.lang.Throwable) mathIllegalArgumentException38);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats40 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats41 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray43 = new java.lang.Object[] { localizedFormats41, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException44 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException38, (org.apache.commons.math3.exception.util.Localizable) localizedFormats40, objArray43);
        java.lang.Object[] objArray45 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray43);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException46 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats28, objArray45);
        org.apache.commons.math3.exception.ZeroException zeroException47 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray45);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer48 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter49 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer48);
        harmonicFitter49.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter49.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter49.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray57 = harmonicFitter49.getObservations();
        java.lang.Object[] objArray58 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray57);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException59 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException4, (org.apache.commons.math3.exception.util.Localizable) localizedFormats5, (java.lang.Object[]) weightedObservedPointArray57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser60 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray57);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY));
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats19 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats19.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats28 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED + "'", localizedFormats28.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED));
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats34 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats34.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats35 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats35.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats40 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats40.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats41 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats41.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(weightedObservedPointArray57);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #423
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #424
28: astore_1
29: new           #28
32: dup
33: aload_1
34: dconst_1
35: invokestatic  #247
38: bipush        100
40: invokestatic  #159
43: iconst_1
44: invokespecial #195
47: astore_2
48: getstatic     #425
51: astore_3
52: getstatic     #125
55: astore        4
57: getstatic     #126
60: astore        5
62: getstatic     #127
65: astore        6
67: getstatic     #128
70: astore        7
72: iconst_2
73: anewarray     #5
76: dup
77: iconst_0
78: aload         7
80: aastore
81: dup
82: iconst_1
83: lconst_1
84: invokestatic  #129
87: aastore
88: astore        8
90: new           #130
93: dup
94: aload         6
96: aload         8
98: invokespecial #131
101: astore        9
103: getstatic     #127
106: astore        10
108: getstatic     #128
111: astore        11
113: iconst_2
114: anewarray     #5
117: dup
118: iconst_0
119: aload         11
121: aastore
122: dup
123: iconst_1
124: lconst_1
125: invokestatic  #129
128: aastore
129: astore        12
131: new           #130
134: dup
135: aload         10
137: aload         12
139: invokespecial #131
142: astore        13
144: aload         9
146: aload         13
148: invokevirtual #132
151: getstatic     #133
154: astore        14
156: getstatic     #134
159: astore        15
161: iconst_2
162: anewarray     #5
165: dup
166: iconst_0
167: aload         15
169: aastore
170: dup
171: iconst_1
172: bipush        10
174: invokestatic  #135
177: aastore
178: astore        16
180: new           #136
183: dup
184: aload         13
186: aload         14
188: aload         16
190: invokespecial #137
193: astore        17
195: new           #136
198: dup
199: aload         5
201: aload         16
203: invokespecial #138
206: astore        18
208: aload         16
210: invokestatic  #80
213: astore        19
215: new           #81
218: dup
219: aload         4
221: aload         19
223: invokespecial #82
226: astore        20
228: new           #130
231: dup
232: aload_3
233: aload         19
235: invokespecial #131
238: astore        21
240: getstatic     #426
243: astore        22
245: getstatic     #127
248: astore        23
250: getstatic     #128
253: astore        24
255: iconst_2
256: anewarray     #5
259: dup
260: iconst_0
261: aload         24
263: aastore
264: dup
265: iconst_1
266: lconst_1
267: invokestatic  #129
270: aastore
271: astore        25
273: new           #130
276: dup
277: aload         23
279: aload         25
281: invokespecial #131
284: astore        26
286: getstatic     #127
289: astore        27
291: getstatic     #128
294: astore        28
296: iconst_2
297: anewarray     #5
300: dup
301: iconst_0
302: aload         28
304: aastore
305: dup
306: iconst_1
307: lconst_1
308: invokestatic  #129
311: aastore
312: astore        29
314: new           #130
317: dup
318: aload         27
320: aload         29
322: invokespecial #131
325: astore        30
327: aload         26
329: aload         30
331: invokevirtual #132
334: getstatic     #133
337: astore        31
339: getstatic     #134
342: astore        32
344: iconst_2
345: anewarray     #5
348: dup
349: iconst_0
350: aload         32
352: aastore
353: dup
354: iconst_1
355: bipush        10
357: invokestatic  #135
360: aastore
361: astore        33
363: new           #136
366: dup
367: aload         30
369: aload         31
371: aload         33
373: invokespecial #137
376: astore        34
378: aload         33
380: invokestatic  #80
383: astore        35
385: new           #136
388: dup
389: aload         22
391: aload         35
393: invokespecial #138
396: astore        36
398: new           #81
401: dup
402: aload_3
403: aload         35
405: invokespecial #82
408: astore        37
410: aconst_null
411: astore        38
413: new           #8
416: dup
417: aload         38
419: invokespecial #9
422: astore        39
424: aload         39
426: dconst_1
427: ldc2_w        #32
430: invokevirtual #43
433: aload         39
435: dconst_0
436: ldc2_w        #34
439: invokevirtual #43
442: aload         39
444: invokevirtual #59
447: aload         39
449: invokevirtual #25
452: astore        40
454: aload         40
456: checkcast     #79
459: invokestatic  #80
462: astore        41
464: new           #136
467: dup
468: aload_2
469: aload_3
470: aload         40
472: checkcast     #79
475: invokespecial #137
478: astore        42
480: new           #69
483: dup
484: aload         40
486: invokespecial #70
489: astore        43
491: ldc           #27
493: invokestatic  #18
496: goto          501
499: astore        43
501: new           #83
504: dup
505: invokespecial #84
508: ldc           #85
510: invokevirtual #86
513: aload_1
514: invokevirtual #87
517: ldc           #88
519: invokevirtual #86
522: getstatic     #424
525: invokevirtual #87
528: ldc           #85
530: invokevirtual #86
533: invokevirtual #89
536: aload_1
537: getstatic     #424
540: invokevirtual #90
543: invokestatic  #91
546: new           #83
549: dup
550: invokespecial #84
553: ldc           #85
555: invokevirtual #86
558: aload_3
559: invokevirtual #87
562: ldc           #88
564: invokevirtual #86
567: getstatic     #425
570: invokevirtual #87
573: ldc           #85
575: invokevirtual #86
578: invokevirtual #89
581: aload_3
582: getstatic     #425
585: invokevirtual #90
588: invokestatic  #91
591: new           #83
594: dup
595: invokespecial #84
598: ldc           #85
600: invokevirtual #86
603: aload         4
605: invokevirtual #87
608: ldc           #88
610: invokevirtual #86
613: getstatic     #125
616: invokevirtual #87
619: ldc           #85
621: invokevirtual #86
624: invokevirtual #89
627: aload         4
629: getstatic     #125
632: invokevirtual #90
635: invokestatic  #91
638: new           #83
641: dup
642: invokespecial #84
645: ldc           #85
647: invokevirtual #86
650: aload         5
652: invokevirtual #87
655: ldc           #88
657: invokevirtual #86
660: getstatic     #126
663: invokevirtual #87
666: ldc           #85
668: invokevirtual #86
671: invokevirtual #89
674: aload         5
676: getstatic     #126
679: invokevirtual #90
682: invokestatic  #91
685: new           #83
688: dup
689: invokespecial #84
692: ldc           #85
694: invokevirtual #86
697: aload         6
699: invokevirtual #87
702: ldc           #88
704: invokevirtual #86
707: getstatic     #127
710: invokevirtual #87
713: ldc           #85
715: invokevirtual #86
718: invokevirtual #89
721: aload         6
723: getstatic     #127
726: invokevirtual #90
729: invokestatic  #91
732: new           #83
735: dup
736: invokespecial #84
739: ldc           #85
741: invokevirtual #86
744: aload         7
746: invokevirtual #87
749: ldc           #88
751: invokevirtual #86
754: getstatic     #128
757: invokevirtual #87
760: ldc           #85
762: invokevirtual #86
765: invokevirtual #89
768: aload         7
770: getstatic     #128
773: invokevirtual #90
776: invokestatic  #91
779: aload         8
781: invokestatic  #20
784: aload         8
786: invokestatic  #92
789: ldc           #140
791: invokestatic  #23
794: aload         8
796: invokestatic  #93
799: ldc           #140
801: invokestatic  #23
804: new           #83
807: dup
808: invokespecial #84
811: ldc           #85
813: invokevirtual #86
816: aload         10
818: invokevirtual #87
821: ldc           #88
823: invokevirtual #86
826: getstatic     #127
829: invokevirtual #87
832: ldc           #85
834: invokevirtual #86
837: invokevirtual #89
840: aload         10
842: getstatic     #127
845: invokevirtual #90
848: invokestatic  #91
851: new           #83
854: dup
855: invokespecial #84
858: ldc           #85
860: invokevirtual #86
863: aload         11
865: invokevirtual #87
868: ldc           #88
870: invokevirtual #86
873: getstatic     #128
876: invokevirtual #87
879: ldc           #85
881: invokevirtual #86
884: invokevirtual #89
887: aload         11
889: getstatic     #128
892: invokevirtual #90
895: invokestatic  #91
898: aload         12
900: invokestatic  #20
903: aload         12
905: invokestatic  #92
908: ldc           #140
910: invokestatic  #23
913: aload         12
915: invokestatic  #93
918: ldc           #140
920: invokestatic  #23
923: new           #83
926: dup
927: invokespecial #84
930: ldc           #85
932: invokevirtual #86
935: aload         14
937: invokevirtual #87
940: ldc           #88
942: invokevirtual #86
945: getstatic     #133
948: invokevirtual #87
951: ldc           #85
953: invokevirtual #86
956: invokevirtual #89
959: aload         14
961: getstatic     #133
964: invokevirtual #90
967: invokestatic  #91
970: new           #83
973: dup
974: invokespecial #84
977: ldc           #85
979: invokevirtual #86
982: aload         15
984: invokevirtual #87
987: ldc           #88
989: invokevirtual #86
992: getstatic     #134
995: invokevirtual #87
998: ldc           #85
1000: invokevirtual #86
1003: invokevirtual #89
1006: aload         15
1008: getstatic     #134
1011: invokevirtual #90
1014: invokestatic  #91
1017: aload         16
1019: invokestatic  #20
1022: aload         16
1024: invokestatic  #92
1027: ldc           #141
1029: invokestatic  #23
1032: aload         16
1034: invokestatic  #93
1037: ldc           #141
1039: invokestatic  #23
1042: aload         19
1044: invokestatic  #20
1047: aload         19
1049: invokestatic  #92
1052: ldc           #141
1054: invokestatic  #23
1057: aload         19
1059: invokestatic  #93
1062: ldc           #141
1064: invokestatic  #23
1067: new           #83
1070: dup
1071: invokespecial #84
1074: ldc           #85
1076: invokevirtual #86
1079: aload         22
1081: invokevirtual #87
1084: ldc           #88
1086: invokevirtual #86
1089: getstatic     #426
1092: invokevirtual #87
1095: ldc           #85
1097: invokevirtual #86
1100: invokevirtual #89
1103: aload         22
1105: getstatic     #426
1108: invokevirtual #90
1111: invokestatic  #91
1114: new           #83
1117: dup
1118: invokespecial #84
1121: ldc           #85
1123: invokevirtual #86
1126: aload         23
1128: invokevirtual #87
1131: ldc           #88
1133: invokevirtual #86
1136: getstatic     #127
1139: invokevirtual #87
1142: ldc           #85
1144: invokevirtual #86
1147: invokevirtual #89
1150: aload         23
1152: getstatic     #127
1155: invokevirtual #90
1158: invokestatic  #91
1161: new           #83
1164: dup
1165: invokespecial #84
1168: ldc           #85
1170: invokevirtual #86
1173: aload         24
1175: invokevirtual #87
1178: ldc           #88
1180: invokevirtual #86
1183: getstatic     #128
1186: invokevirtual #87
1189: ldc           #85
1191: invokevirtual #86
1194: invokevirtual #89
1197: aload         24
1199: getstatic     #128
1202: invokevirtual #90
1205: invokestatic  #91
1208: aload         25
1210: invokestatic  #20
1213: aload         25
1215: invokestatic  #92
1218: ldc           #140
1220: invokestatic  #23
1223: aload         25
1225: invokestatic  #93
1228: ldc           #140
1230: invokestatic  #23
1233: new           #83
1236: dup
1237: invokespecial #84
1240: ldc           #85
1242: invokevirtual #86
1245: aload         27
1247: invokevirtual #87
1250: ldc           #88
1252: invokevirtual #86
1255: getstatic     #127
1258: invokevirtual #87
1261: ldc           #85
1263: invokevirtual #86
1266: invokevirtual #89
1269: aload         27
1271: getstatic     #127
1274: invokevirtual #90
1277: invokestatic  #91
1280: new           #83
1283: dup
1284: invokespecial #84
1287: ldc           #85
1289: invokevirtual #86
1292: aload         28
1294: invokevirtual #87
1297: ldc           #88
1299: invokevirtual #86
1302: getstatic     #128
1305: invokevirtual #87
1308: ldc           #85
1310: invokevirtual #86
1313: invokevirtual #89
1316: aload         28
1318: getstatic     #128
1321: invokevirtual #90
1324: invokestatic  #91
1327: aload         29
1329: invokestatic  #20
1332: aload         29
1334: invokestatic  #92
1337: ldc           #140
1339: invokestatic  #23
1342: aload         29
1344: invokestatic  #93
1347: ldc           #140
1349: invokestatic  #23
1352: new           #83
1355: dup
1356: invokespecial #84
1359: ldc           #85
1361: invokevirtual #86
1364: aload         31
1366: invokevirtual #87
1369: ldc           #88
1371: invokevirtual #86
1374: getstatic     #133
1377: invokevirtual #87
1380: ldc           #85
1382: invokevirtual #86
1385: invokevirtual #89
1388: aload         31
1390: getstatic     #133
1393: invokevirtual #90
1396: invokestatic  #91
1399: new           #83
1402: dup
1403: invokespecial #84
1406: ldc           #85
1408: invokevirtual #86
1411: aload         32
1413: invokevirtual #87
1416: ldc           #88
1418: invokevirtual #86
1421: getstatic     #134
1424: invokevirtual #87
1427: ldc           #85
1429: invokevirtual #86
1432: invokevirtual #89
1435: aload         32
1437: getstatic     #134
1440: invokevirtual #90
1443: invokestatic  #91
1446: aload         33
1448: invokestatic  #20
1451: aload         33
1453: invokestatic  #92
1456: ldc           #141
1458: invokestatic  #23
1461: aload         33
1463: invokestatic  #93
1466: ldc           #141
1468: invokestatic  #23
1471: aload         35
1473: invokestatic  #20
1476: aload         35
1478: invokestatic  #92
1481: ldc           #141
1483: invokestatic  #23
1486: aload         35
1488: invokestatic  #93
1491: ldc           #141
1493: invokestatic  #23
1496: aload         40
1498: invokestatic  #20
1501: aload         41
1503: invokestatic  #20
1506: aload         41
1508: invokestatic  #92
1511: ldc           #74
1513: invokestatic  #23
1516: aload         41
1518: invokestatic  #93
1521: ldc           #74
1523: invokestatic  #23
1526: return
Exception table:
from    to  target type
480   496   499   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test191
Start line: 5237
End line: 5257
Method source code: 
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((-1.0d), (double) 10, (double) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint17 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double18 = weightedObservedPoint17.getWeight();
        double double19 = weightedObservedPoint17.getWeight();
        double double20 = weightedObservedPoint17.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint17);
        harmonicFitter1.addObservedPoint((double) (-1L), (double) (-1), (double) 10L);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #427
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: aload_2
62: ldc2_w        #10
65: ldc2_w        #32
68: ldc2_w        #32
71: invokevirtual #54
74: new           #145
77: dup
78: ldc2_w        #14
81: ldc2_w        #12
84: ldc2_w        #12
87: invokespecial #146
90: astore        4
92: aload         4
94: invokevirtual #148
97: dstore        5
99: aload         4
101: invokevirtual #148
104: dstore        7
106: aload         4
108: invokevirtual #147
111: dstore        9
113: aload_2
114: aload         4
116: invokevirtual #123
119: aload_2
120: ldc2_w        #10
123: ldc2_w        #10
126: ldc2_w        #32
129: invokevirtual #54
132: aload_3
133: invokestatic  #20
136: new           #83
139: dup
140: invokespecial #84
143: ldc           #85
145: invokevirtual #86
148: dload         5
150: invokevirtual #150
153: ldc           #88
155: invokevirtual #86
158: ldc2_w        #14
161: invokevirtual #150
164: ldc           #85
166: invokevirtual #86
169: invokevirtual #89
172: dload         5
174: ldc2_w        #14
177: dcmpl
178: ifne          185
181: iconst_1
182: goto          186
185: iconst_0
186: invokestatic  #91
189: new           #83
192: dup
193: invokespecial #84
196: ldc           #85
198: invokevirtual #86
201: dload         7
203: invokevirtual #150
206: ldc           #88
208: invokevirtual #86
211: ldc2_w        #14
214: invokevirtual #150
217: ldc           #85
219: invokevirtual #86
222: invokevirtual #89
225: dload         7
227: ldc2_w        #14
230: dcmpl
231: ifne          238
234: iconst_1
235: goto          239
238: iconst_0
239: invokestatic  #91
242: new           #83
245: dup
246: invokespecial #84
249: ldc           #85
251: invokevirtual #86
254: dload         9
256: invokevirtual #150
259: ldc           #88
261: invokevirtual #86
264: ldc2_w        #12
267: invokevirtual #150
270: ldc           #85
272: invokevirtual #86
275: invokevirtual #89
278: dload         9
280: ldc2_w        #12
283: dcmpl
284: ifne          291
287: iconst_1
288: goto          292
291: iconst_0
292: invokestatic  #91
295: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test192
Start line: 5260
End line: 5282
Method source code: 
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((-1.0d), (double) 10, (double) 10);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric14 = null;
        double[] doubleArray15 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = harmonicFitter1.fit(parametric14, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #428
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: aload_2
62: ldc2_w        #10
65: ldc2_w        #32
68: ldc2_w        #32
71: invokevirtual #54
74: aconst_null
75: astore        4
77: iconst_0
78: newarray       double
80: astore        5
82: aload_2
83: aload         4
85: aload         5
87: invokevirtual #30
90: astore        6
92: ldc           #17
94: invokestatic  #18
97: goto          102
100: astore        6
102: aload_3
103: invokestatic  #20
106: aload         5
108: invokestatic  #20
111: aload         5
113: invokestatic  #21
116: ldc           #74
118: invokestatic  #23
121: return
Exception table:
from    to  target type
82    97   100   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test193
Start line: 5285
End line: 5316
Method source code: 
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint13 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double14 = weightedObservedPoint13.getX();
        double double15 = weightedObservedPoint13.getY();
        double double16 = weightedObservedPoint13.getX();
        double double17 = weightedObservedPoint13.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint13);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric19 = null;
        double[] doubleArray23 = new double[] { 1L, 0.0f, 52.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray24 = harmonicFitter1.fit(parametric19, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 0.0, 52.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #429
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: new           #145
64: dup
65: ldc2_w        #14
68: ldc2_w        #12
71: ldc2_w        #12
74: invokespecial #146
77: astore        4
79: aload         4
81: invokevirtual #147
84: dstore        5
86: aload         4
88: invokevirtual #149
91: dstore        7
93: aload         4
95: invokevirtual #147
98: dstore        9
100: aload         4
102: invokevirtual #149
105: dstore        11
107: aload_2
108: aload         4
110: invokevirtual #123
113: aconst_null
114: astore        13
116: iconst_3
117: newarray       double
119: dup
120: iconst_0
121: dconst_1
122: dastore
123: dup
124: iconst_1
125: dconst_0
126: dastore
127: dup
128: iconst_2
129: ldc2_w        #12
132: dastore
133: astore        14
135: aload_2
136: aload         13
138: aload         14
140: invokevirtual #30
143: astore        15
145: ldc           #17
147: invokestatic  #18
150: goto          155
153: astore        15
155: aload_3
156: invokestatic  #20
159: new           #83
162: dup
163: invokespecial #84
166: ldc           #85
168: invokevirtual #86
171: dload         5
173: invokevirtual #150
176: ldc           #88
178: invokevirtual #86
181: ldc2_w        #12
184: invokevirtual #150
187: ldc           #85
189: invokevirtual #86
192: invokevirtual #89
195: dload         5
197: ldc2_w        #12
200: dcmpl
201: ifne          208
204: iconst_1
205: goto          209
208: iconst_0
209: invokestatic  #91
212: new           #83
215: dup
216: invokespecial #84
219: ldc           #85
221: invokevirtual #86
224: dload         7
226: invokevirtual #150
229: ldc           #88
231: invokevirtual #86
234: ldc2_w        #12
237: invokevirtual #150
240: ldc           #85
242: invokevirtual #86
245: invokevirtual #89
248: dload         7
250: ldc2_w        #12
253: dcmpl
254: ifne          261
257: iconst_1
258: goto          262
261: iconst_0
262: invokestatic  #91
265: new           #83
268: dup
269: invokespecial #84
272: ldc           #85
274: invokevirtual #86
277: dload         9
279: invokevirtual #150
282: ldc           #88
284: invokevirtual #86
287: ldc2_w        #12
290: invokevirtual #150
293: ldc           #85
295: invokevirtual #86
298: invokevirtual #89
301: dload         9
303: ldc2_w        #12
306: dcmpl
307: ifne          314
310: iconst_1
311: goto          315
314: iconst_0
315: invokestatic  #91
318: new           #83
321: dup
322: invokespecial #84
325: ldc           #85
327: invokevirtual #86
330: dload         11
332: invokevirtual #150
335: ldc           #88
337: invokevirtual #86
340: ldc2_w        #12
343: invokevirtual #150
346: ldc           #85
348: invokevirtual #86
351: invokevirtual #89
354: dload         11
356: ldc2_w        #12
359: dcmpl
360: ifne          367
363: iconst_1
364: goto          368
367: iconst_0
368: invokestatic  #91
371: aload         14
373: invokestatic  #20
376: aload         14
378: invokestatic  #21
381: ldc_w         #430
384: invokestatic  #23
387: return
Exception table:
from    to  target type
135   150   153   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test194
Start line: 5319
End line: 5348
Method source code: 
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint19 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter8.addObservedPoint(weightedObservedPoint19);
        harmonicFitter1.addObservedPoint(weightedObservedPoint19);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer22 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter23 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer22);
        harmonicFitter23.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter23.clearObservations();
        harmonicFitter23.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint34 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double35 = weightedObservedPoint34.getX();
        harmonicFitter23.addObservedPoint(weightedObservedPoint34);
        harmonicFitter1.addObservedPoint(weightedObservedPoint34);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray38 = harmonicFitter1.getObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray38);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #431
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aconst_null
53: astore        4
55: new           #8
58: dup
59: aload         4
61: invokespecial #9
64: astore        5
66: aload         5
68: dconst_1
69: ldc2_w        #32
72: invokevirtual #43
75: aload         5
77: dconst_0
78: ldc2_w        #34
81: invokevirtual #43
84: aload         5
86: invokevirtual #25
89: astore        6
91: new           #145
94: dup
95: dconst_1
96: dconst_0
97: ldc2_w        #34
100: invokespecial #146
103: astore        7
105: aload         5
107: aload         7
109: invokevirtual #123
112: aload_2
113: aload         7
115: invokevirtual #123
118: aconst_null
119: astore        8
121: new           #8
124: dup
125: aload         8
127: invokespecial #9
130: astore        9
132: aload         9
134: dconst_1
135: ldc2_w        #32
138: invokevirtual #43
141: aload         9
143: invokevirtual #59
146: aload         9
148: dconst_0
149: ldc2_w        #10
152: invokevirtual #43
155: new           #145
158: dup
159: ldc2_w        #14
162: ldc2_w        #12
165: ldc2_w        #12
168: invokespecial #146
171: astore        10
173: aload         10
175: invokevirtual #147
178: dstore        11
180: aload         9
182: aload         10
184: invokevirtual #123
187: aload_2
188: aload         10
190: invokevirtual #123
193: aload_2
194: invokevirtual #25
197: astore        13
199: aload_3
200: invokestatic  #20
203: aload         6
205: invokestatic  #20
208: new           #83
211: dup
212: invokespecial #84
215: ldc           #85
217: invokevirtual #86
220: dload         11
222: invokevirtual #150
225: ldc           #88
227: invokevirtual #86
230: ldc2_w        #12
233: invokevirtual #150
236: ldc           #85
238: invokevirtual #86
241: invokevirtual #89
244: dload         11
246: ldc2_w        #12
249: dcmpl
250: ifne          257
253: iconst_1
254: goto          258
257: iconst_0
258: invokestatic  #91
261: aload         13
263: invokestatic  #20
266: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test195
Start line: 5351
End line: 5430
Method source code: 
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray10 = new java.lang.Object[] { localizedFormats6, localizedFormats7, localizedFormats8, localizedFormats9 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException4, (org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray10);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext12 = mathIllegalArgumentException4.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext13 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException4);
        java.lang.Throwable throwable14 = exceptionContext13.getThrowable();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray18 = new java.lang.Object[] { localizedFormats16, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException19 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats15, objArray18);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats24 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray25 = new java.lang.Object[] { localizedFormats21, localizedFormats22, localizedFormats23, localizedFormats24 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException26 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException19, (org.apache.commons.math3.exception.util.Localizable) localizedFormats20, objArray25);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats27 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer28 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter29 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer28);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray30 = harmonicFitter29.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException31 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats27, (java.lang.Object[]) weightedObservedPointArray30);
        java.lang.Throwable[] throwableArray32 = zeroException31.getSuppressed();
        exceptionContext13.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, (java.lang.Object[]) throwableArray32);
        java.lang.String str34 = localizedFormats20.getSourceString();
        java.util.Locale locale35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = localizedFormats20.getLocalizedString(locale35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertNotNull(exceptionContext12);
        org.junit.Assert.assertNotNull(throwable14);
        org.junit.Assert.assertEquals(throwable14.getLocalizedMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertEquals(throwable14.getMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertEquals(throwable14.toString(), "org.apache.commons.math3.exception.MathIllegalArgumentException: overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats24 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats24.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertTrue("'" + localizedFormats27 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats27.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "overflow: lcm({0}, {1}) is 2^31" + "'", str34, "overflow: lcm({0}, {1}) is 2^31");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #432
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #328
63: astore        5
65: getstatic     #329
68: astore        6
70: getstatic     #330
73: astore        7
75: getstatic     #331
78: astore        8
80: getstatic     #332
83: astore        9
85: iconst_4
86: anewarray     #5
89: dup
90: iconst_0
91: aload         6
93: aastore
94: dup
95: iconst_1
96: aload         7
98: aastore
99: dup
100: iconst_2
101: aload         8
103: aastore
104: dup
105: iconst_3
106: aload         9
108: aastore
109: astore        10
111: new           #136
114: dup
115: aload         4
117: aload         5
119: aload         10
121: invokespecial #137
124: astore        11
126: aload         4
128: invokevirtual #165
131: astore        12
133: new           #163
136: dup
137: aload         4
139: invokespecial #164
142: astore        13
144: aload         13
146: invokevirtual #288
149: astore        14
151: getstatic     #127
154: astore        15
156: getstatic     #128
159: astore        16
161: iconst_2
162: anewarray     #5
165: dup
166: iconst_0
167: aload         16
169: aastore
170: dup
171: iconst_1
172: lconst_1
173: invokestatic  #129
176: aastore
177: astore        17
179: new           #130
182: dup
183: aload         15
185: aload         17
187: invokespecial #131
190: astore        18
192: getstatic     #328
195: astore        19
197: getstatic     #329
200: astore        20
202: getstatic     #330
205: astore        21
207: getstatic     #331
210: astore        22
212: getstatic     #332
215: astore        23
217: iconst_4
218: anewarray     #5
221: dup
222: iconst_0
223: aload         20
225: aastore
226: dup
227: iconst_1
228: aload         21
230: aastore
231: dup
232: iconst_2
233: aload         22
235: aastore
236: dup
237: iconst_3
238: aload         23
240: aastore
241: astore        24
243: new           #136
246: dup
247: aload         18
249: aload         19
251: aload         24
253: invokespecial #137
256: astore        25
258: getstatic     #156
261: astore        26
263: aconst_null
264: astore        27
266: new           #8
269: dup
270: aload         27
272: invokespecial #9
275: astore        28
277: aload         28
279: invokevirtual #25
282: astore        29
284: new           #81
287: dup
288: aload         26
290: aload         29
292: checkcast     #79
295: invokespecial #82
298: astore        30
300: aload         30
302: invokevirtual #405
305: astore        31
307: aload         13
309: aload         19
311: aload         31
313: checkcast     #79
316: invokevirtual #169
319: aload         19
321: invokevirtual #301
324: astore        32
326: aconst_null
327: astore        33
329: aload         19
331: aload         33
333: invokevirtual #321
336: astore        34
338: ldc           #17
340: invokestatic  #18
343: goto          348
346: astore        34
348: new           #83
351: dup
352: invokespecial #84
355: ldc           #85
357: invokevirtual #86
360: aload_1
361: invokevirtual #87
364: ldc           #88
366: invokevirtual #86
369: getstatic     #127
372: invokevirtual #87
375: ldc           #85
377: invokevirtual #86
380: invokevirtual #89
383: aload_1
384: getstatic     #127
387: invokevirtual #90
390: invokestatic  #91
393: new           #83
396: dup
397: invokespecial #84
400: ldc           #85
402: invokevirtual #86
405: aload_2
406: invokevirtual #87
409: ldc           #88
411: invokevirtual #86
414: getstatic     #128
417: invokevirtual #87
420: ldc           #85
422: invokevirtual #86
425: invokevirtual #89
428: aload_2
429: getstatic     #128
432: invokevirtual #90
435: invokestatic  #91
438: aload_3
439: invokestatic  #20
442: aload_3
443: invokestatic  #92
446: ldc           #140
448: invokestatic  #23
451: aload_3
452: invokestatic  #93
455: ldc           #140
457: invokestatic  #23
460: new           #83
463: dup
464: invokespecial #84
467: ldc           #85
469: invokevirtual #86
472: aload         5
474: invokevirtual #87
477: ldc           #88
479: invokevirtual #86
482: getstatic     #328
485: invokevirtual #87
488: ldc           #85
490: invokevirtual #86
493: invokevirtual #89
496: aload         5
498: getstatic     #328
501: invokevirtual #90
504: invokestatic  #91
507: new           #83
510: dup
511: invokespecial #84
514: ldc           #85
516: invokevirtual #86
519: aload         6
521: invokevirtual #87
524: ldc           #88
526: invokevirtual #86
529: getstatic     #329
532: invokevirtual #87
535: ldc           #85
537: invokevirtual #86
540: invokevirtual #89
543: aload         6
545: getstatic     #329
548: invokevirtual #90
551: invokestatic  #91
554: new           #83
557: dup
558: invokespecial #84
561: ldc           #85
563: invokevirtual #86
566: aload         7
568: invokevirtual #87
571: ldc           #88
573: invokevirtual #86
576: getstatic     #330
579: invokevirtual #87
582: ldc           #85
584: invokevirtual #86
587: invokevirtual #89
590: aload         7
592: getstatic     #330
595: invokevirtual #90
598: invokestatic  #91
601: new           #83
604: dup
605: invokespecial #84
608: ldc           #85
610: invokevirtual #86
613: aload         8
615: invokevirtual #87
618: ldc           #88
620: invokevirtual #86
623: getstatic     #331
626: invokevirtual #87
629: ldc           #85
631: invokevirtual #86
634: invokevirtual #89
637: aload         8
639: getstatic     #331
642: invokevirtual #90
645: invokestatic  #91
648: new           #83
651: dup
652: invokespecial #84
655: ldc           #85
657: invokevirtual #86
660: aload         9
662: invokevirtual #87
665: ldc           #88
667: invokevirtual #86
670: getstatic     #332
673: invokevirtual #87
676: ldc           #85
678: invokevirtual #86
681: invokevirtual #89
684: aload         9
686: getstatic     #332
689: invokevirtual #90
692: invokestatic  #91
695: aload         10
697: invokestatic  #20
700: aload         10
702: invokestatic  #92
705: ldc_w         #336
708: invokestatic  #23
711: aload         10
713: invokestatic  #93
716: ldc_w         #336
719: invokestatic  #23
722: aload         12
724: invokestatic  #20
727: aload         14
729: invokestatic  #20
732: aload         14
734: invokevirtual #289
737: ldc_w         #407
740: invokestatic  #23
743: aload         14
745: invokevirtual #291
748: ldc_w         #407
751: invokestatic  #23
754: aload         14
756: invokevirtual #292
759: ldc_w         #408
762: invokestatic  #23
765: new           #83
768: dup
769: invokespecial #84
772: ldc           #85
774: invokevirtual #86
777: aload         15
779: invokevirtual #87
782: ldc           #88
784: invokevirtual #86
787: getstatic     #127
790: invokevirtual #87
793: ldc           #85
795: invokevirtual #86
798: invokevirtual #89
801: aload         15
803: getstatic     #127
806: invokevirtual #90
809: invokestatic  #91
812: new           #83
815: dup
816: invokespecial #84
819: ldc           #85
821: invokevirtual #86
824: aload         16
826: invokevirtual #87
829: ldc           #88
831: invokevirtual #86
834: getstatic     #128
837: invokevirtual #87
840: ldc           #85
842: invokevirtual #86
845: invokevirtual #89
848: aload         16
850: getstatic     #128
853: invokevirtual #90
856: invokestatic  #91
859: aload         17
861: invokestatic  #20
864: aload         17
866: invokestatic  #92
869: ldc           #140
871: invokestatic  #23
874: aload         17
876: invokestatic  #93
879: ldc           #140
881: invokestatic  #23
884: new           #83
887: dup
888: invokespecial #84
891: ldc           #85
893: invokevirtual #86
896: aload         19
898: invokevirtual #87
901: ldc           #88
903: invokevirtual #86
906: getstatic     #328
909: invokevirtual #87
912: ldc           #85
914: invokevirtual #86
917: invokevirtual #89
920: aload         19
922: getstatic     #328
925: invokevirtual #90
928: invokestatic  #91
931: new           #83
934: dup
935: invokespecial #84
938: ldc           #85
940: invokevirtual #86
943: aload         20
945: invokevirtual #87
948: ldc           #88
950: invokevirtual #86
953: getstatic     #329
956: invokevirtual #87
959: ldc           #85
961: invokevirtual #86
964: invokevirtual #89
967: aload         20
969: getstatic     #329
972: invokevirtual #90
975: invokestatic  #91
978: new           #83
981: dup
982: invokespecial #84
985: ldc           #85
987: invokevirtual #86
990: aload         21
992: invokevirtual #87
995: ldc           #88
997: invokevirtual #86
1000: getstatic     #330
1003: invokevirtual #87
1006: ldc           #85
1008: invokevirtual #86
1011: invokevirtual #89
1014: aload         21
1016: getstatic     #330
1019: invokevirtual #90
1022: invokestatic  #91
1025: new           #83
1028: dup
1029: invokespecial #84
1032: ldc           #85
1034: invokevirtual #86
1037: aload         22
1039: invokevirtual #87
1042: ldc           #88
1044: invokevirtual #86
1047: getstatic     #331
1050: invokevirtual #87
1053: ldc           #85
1055: invokevirtual #86
1058: invokevirtual #89
1061: aload         22
1063: getstatic     #331
1066: invokevirtual #90
1069: invokestatic  #91
1072: new           #83
1075: dup
1076: invokespecial #84
1079: ldc           #85
1081: invokevirtual #86
1084: aload         23
1086: invokevirtual #87
1089: ldc           #88
1091: invokevirtual #86
1094: getstatic     #332
1097: invokevirtual #87
1100: ldc           #85
1102: invokevirtual #86
1105: invokevirtual #89
1108: aload         23
1110: getstatic     #332
1113: invokevirtual #90
1116: invokestatic  #91
1119: aload         24
1121: invokestatic  #20
1124: aload         24
1126: invokestatic  #92
1129: ldc_w         #336
1132: invokestatic  #23
1135: aload         24
1137: invokestatic  #93
1140: ldc_w         #336
1143: invokestatic  #23
1146: new           #83
1149: dup
1150: invokespecial #84
1153: ldc           #85
1155: invokevirtual #86
1158: aload         26
1160: invokevirtual #87
1163: ldc           #88
1165: invokevirtual #86
1168: getstatic     #156
1171: invokevirtual #87
1174: ldc           #85
1176: invokevirtual #86
1179: invokevirtual #89
1182: aload         26
1184: getstatic     #156
1187: invokevirtual #90
1190: invokestatic  #91
1193: aload         29
1195: invokestatic  #20
1198: aload         31
1200: invokestatic  #20
1203: new           #83
1206: dup
1207: invokespecial #84
1210: ldc           #85
1212: invokevirtual #86
1215: aload         32
1217: invokevirtual #86
1220: ldc_w         #433
1223: invokevirtual #86
1226: invokevirtual #89
1229: aload         32
1231: ldc_w         #434
1234: invokestatic  #245
1237: return
Exception table:
from    to  target type
329   343   346   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test196
Start line: 5433
End line: 5467
Method source code: 
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.addObservedPoint((double) 0, (double) (short) 100, (double) (short) 0);
        harmonicFitter1.addObservedPoint(10.0d, (-1.0d), 1.0d);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric24 = null;
        double[] doubleArray28 = new double[] { 52.0d, 1, (-1.0d) };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray29 = harmonicFitter1.fit((int) (short) -1, parametric24, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[52.0, 1.0, -1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #435
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: dconst_0
105: ldc2_w        #34
108: dconst_0
109: invokevirtual #54
112: aload_2
113: ldc2_w        #32
116: ldc2_w        #10
119: dconst_1
120: invokevirtual #54
123: aload_2
124: invokevirtual #59
127: aconst_null
128: astore        14
130: iconst_3
131: newarray       double
133: dup
134: iconst_0
135: ldc2_w        #12
138: dastore
139: dup
140: iconst_1
141: dconst_1
142: dastore
143: dup
144: iconst_2
145: ldc2_w        #10
148: dastore
149: astore        15
151: aload_2
152: iconst_m1
153: aload         14
155: aload         15
157: invokevirtual #40
160: astore        16
162: ldc           #17
164: invokestatic  #18
167: goto          172
170: astore        16
172: aload_3
173: invokestatic  #20
176: aload         4
178: invokestatic  #20
181: new           #83
184: dup
185: invokespecial #84
188: ldc           #85
190: invokevirtual #86
193: dload         6
195: invokevirtual #150
198: ldc           #88
200: invokevirtual #86
203: ldc2_w        #12
206: invokevirtual #150
209: ldc           #85
211: invokevirtual #86
214: invokevirtual #89
217: dload         6
219: ldc2_w        #12
222: dcmpl
223: ifne          230
226: iconst_1
227: goto          231
230: iconst_0
231: invokestatic  #91
234: new           #83
237: dup
238: invokespecial #84
241: ldc           #85
243: invokevirtual #86
246: dload         8
248: invokevirtual #150
251: ldc           #88
253: invokevirtual #86
256: ldc2_w        #14
259: invokevirtual #150
262: ldc           #85
264: invokevirtual #86
267: invokevirtual #89
270: dload         8
272: ldc2_w        #14
275: dcmpl
276: ifne          283
279: iconst_1
280: goto          284
283: iconst_0
284: invokestatic  #91
287: new           #83
290: dup
291: invokespecial #84
294: ldc           #85
296: invokevirtual #86
299: dload         10
301: invokevirtual #150
304: ldc           #88
306: invokevirtual #86
309: ldc2_w        #14
312: invokevirtual #150
315: ldc           #85
317: invokevirtual #86
320: invokevirtual #89
323: dload         10
325: ldc2_w        #14
328: dcmpl
329: ifne          336
332: iconst_1
333: goto          337
336: iconst_0
337: invokestatic  #91
340: new           #83
343: dup
344: invokespecial #84
347: ldc           #85
349: invokevirtual #86
352: dload         12
354: invokevirtual #150
357: ldc           #88
359: invokevirtual #86
362: ldc2_w        #12
365: invokevirtual #150
368: ldc           #85
370: invokevirtual #86
373: invokevirtual #89
376: dload         12
378: ldc2_w        #12
381: dcmpl
382: ifne          389
385: iconst_1
386: goto          390
389: iconst_0
390: invokestatic  #91
393: aload         15
395: invokestatic  #20
398: aload         15
400: invokestatic  #21
403: ldc_w         #436
406: invokestatic  #23
409: return
Exception table:
from    to  target type
151   167   170   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test197
Start line: 5470
End line: 5513
Method source code: 
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer9 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter10 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer9);
        harmonicFitter10.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter10.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter10.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint24 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double25 = weightedObservedPoint24.getX();
        double double26 = weightedObservedPoint24.getY();
        double double27 = weightedObservedPoint24.getX();
        double double28 = weightedObservedPoint24.getY();
        double double29 = weightedObservedPoint24.getX();
        double double30 = weightedObservedPoint24.getX();
        harmonicFitter10.addObservedPoint(weightedObservedPoint24);
        double double32 = weightedObservedPoint24.getWeight();
        double double33 = weightedObservedPoint24.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint24);
        harmonicFitter1.clearObservations();
        double[] doubleArray38 = new double[] { '4', '#' };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray39 = harmonicFitter1.fit(doubleArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[52.0, 35.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #437
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aconst_null
57: astore_3
58: new           #8
61: dup
62: aload_3
63: invokespecial #9
66: astore        4
68: aload         4
70: dconst_1
71: ldc2_w        #32
74: invokevirtual #43
77: aload         4
79: dconst_0
80: ldc2_w        #34
83: invokevirtual #43
86: aload         4
88: dconst_0
89: ldc2_w        #12
92: ldc2_w        #10
95: invokevirtual #54
98: new           #145
101: dup
102: ldc2_w        #14
105: ldc2_w        #12
108: ldc2_w        #12
111: invokespecial #146
114: astore        5
116: aload         5
118: invokevirtual #147
121: dstore        6
123: aload         5
125: invokevirtual #149
128: dstore        8
130: aload         5
132: invokevirtual #147
135: dstore        10
137: aload         5
139: invokevirtual #149
142: dstore        12
144: aload         5
146: invokevirtual #147
149: dstore        14
151: aload         5
153: invokevirtual #147
156: dstore        16
158: aload         4
160: aload         5
162: invokevirtual #123
165: aload         5
167: invokevirtual #148
170: dstore        18
172: aload         5
174: invokevirtual #147
177: dstore        20
179: aload_2
180: aload         5
182: invokevirtual #123
185: aload_2
186: invokevirtual #59
189: iconst_2
190: newarray       double
192: dup
193: iconst_0
194: ldc2_w        #12
197: dastore
198: dup
199: iconst_1
200: ldc2_w        #14
203: dastore
204: astore        22
206: aload_2
207: aload         22
209: invokevirtual #16
212: astore        23
214: ldc           #17
216: invokestatic  #18
219: goto          224
222: astore        23
224: new           #83
227: dup
228: invokespecial #84
231: ldc           #85
233: invokevirtual #86
236: dload         6
238: invokevirtual #150
241: ldc           #88
243: invokevirtual #86
246: ldc2_w        #12
249: invokevirtual #150
252: ldc           #85
254: invokevirtual #86
257: invokevirtual #89
260: dload         6
262: ldc2_w        #12
265: dcmpl
266: ifne          273
269: iconst_1
270: goto          274
273: iconst_0
274: invokestatic  #91
277: new           #83
280: dup
281: invokespecial #84
284: ldc           #85
286: invokevirtual #86
289: dload         8
291: invokevirtual #150
294: ldc           #88
296: invokevirtual #86
299: ldc2_w        #12
302: invokevirtual #150
305: ldc           #85
307: invokevirtual #86
310: invokevirtual #89
313: dload         8
315: ldc2_w        #12
318: dcmpl
319: ifne          326
322: iconst_1
323: goto          327
326: iconst_0
327: invokestatic  #91
330: new           #83
333: dup
334: invokespecial #84
337: ldc           #85
339: invokevirtual #86
342: dload         10
344: invokevirtual #150
347: ldc           #88
349: invokevirtual #86
352: ldc2_w        #12
355: invokevirtual #150
358: ldc           #85
360: invokevirtual #86
363: invokevirtual #89
366: dload         10
368: ldc2_w        #12
371: dcmpl
372: ifne          379
375: iconst_1
376: goto          380
379: iconst_0
380: invokestatic  #91
383: new           #83
386: dup
387: invokespecial #84
390: ldc           #85
392: invokevirtual #86
395: dload         12
397: invokevirtual #150
400: ldc           #88
402: invokevirtual #86
405: ldc2_w        #12
408: invokevirtual #150
411: ldc           #85
413: invokevirtual #86
416: invokevirtual #89
419: dload         12
421: ldc2_w        #12
424: dcmpl
425: ifne          432
428: iconst_1
429: goto          433
432: iconst_0
433: invokestatic  #91
436: new           #83
439: dup
440: invokespecial #84
443: ldc           #85
445: invokevirtual #86
448: dload         14
450: invokevirtual #150
453: ldc           #88
455: invokevirtual #86
458: ldc2_w        #12
461: invokevirtual #150
464: ldc           #85
466: invokevirtual #86
469: invokevirtual #89
472: dload         14
474: ldc2_w        #12
477: dcmpl
478: ifne          485
481: iconst_1
482: goto          486
485: iconst_0
486: invokestatic  #91
489: new           #83
492: dup
493: invokespecial #84
496: ldc           #85
498: invokevirtual #86
501: dload         16
503: invokevirtual #150
506: ldc           #88
508: invokevirtual #86
511: ldc2_w        #12
514: invokevirtual #150
517: ldc           #85
519: invokevirtual #86
522: invokevirtual #89
525: dload         16
527: ldc2_w        #12
530: dcmpl
531: ifne          538
534: iconst_1
535: goto          539
538: iconst_0
539: invokestatic  #91
542: new           #83
545: dup
546: invokespecial #84
549: ldc           #85
551: invokevirtual #86
554: dload         18
556: invokevirtual #150
559: ldc           #88
561: invokevirtual #86
564: ldc2_w        #14
567: invokevirtual #150
570: ldc           #85
572: invokevirtual #86
575: invokevirtual #89
578: dload         18
580: ldc2_w        #14
583: dcmpl
584: ifne          591
587: iconst_1
588: goto          592
591: iconst_0
592: invokestatic  #91
595: new           #83
598: dup
599: invokespecial #84
602: ldc           #85
604: invokevirtual #86
607: dload         20
609: invokevirtual #150
612: ldc           #88
614: invokevirtual #86
617: ldc2_w        #12
620: invokevirtual #150
623: ldc           #85
625: invokevirtual #86
628: invokevirtual #89
631: dload         20
633: ldc2_w        #12
636: dcmpl
637: ifne          644
640: iconst_1
641: goto          645
644: iconst_0
645: invokestatic  #91
648: aload         22
650: invokestatic  #20
653: aload         22
655: invokestatic  #21
658: ldc_w         #438
661: invokestatic  #23
664: return
Exception table:
from    to  target type
206   219   222   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test198
Start line: 5516
End line: 5550
Method source code: 
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.addObservedPoint((double) 0, (double) (short) 100, (double) (short) 0);
        harmonicFitter1.addObservedPoint(10.0d, (-1.0d), 1.0d);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric23 = null;
        double[] doubleArray29 = new double[] { 10.0d, (byte) 0, (byte) 1, (byte) 1, (-1) };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray30 = harmonicFitter1.fit(parametric23, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0, 0.0, 1.0, 1.0, -1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #439
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: dconst_0
105: ldc2_w        #34
108: dconst_0
109: invokevirtual #54
112: aload_2
113: ldc2_w        #32
116: ldc2_w        #10
119: dconst_1
120: invokevirtual #54
123: aload_2
124: invokevirtual #59
127: aconst_null
128: astore        14
130: iconst_5
131: newarray       double
133: dup
134: iconst_0
135: ldc2_w        #32
138: dastore
139: dup
140: iconst_1
141: dconst_0
142: dastore
143: dup
144: iconst_2
145: dconst_1
146: dastore
147: dup
148: iconst_3
149: dconst_1
150: dastore
151: dup
152: iconst_4
153: ldc2_w        #10
156: dastore
157: astore        15
159: aload_2
160: aload         14
162: aload         15
164: invokevirtual #30
167: astore        16
169: ldc           #17
171: invokestatic  #18
174: goto          179
177: astore        16
179: aload_3
180: invokestatic  #20
183: aload         4
185: invokestatic  #20
188: new           #83
191: dup
192: invokespecial #84
195: ldc           #85
197: invokevirtual #86
200: dload         6
202: invokevirtual #150
205: ldc           #88
207: invokevirtual #86
210: ldc2_w        #12
213: invokevirtual #150
216: ldc           #85
218: invokevirtual #86
221: invokevirtual #89
224: dload         6
226: ldc2_w        #12
229: dcmpl
230: ifne          237
233: iconst_1
234: goto          238
237: iconst_0
238: invokestatic  #91
241: new           #83
244: dup
245: invokespecial #84
248: ldc           #85
250: invokevirtual #86
253: dload         8
255: invokevirtual #150
258: ldc           #88
260: invokevirtual #86
263: ldc2_w        #14
266: invokevirtual #150
269: ldc           #85
271: invokevirtual #86
274: invokevirtual #89
277: dload         8
279: ldc2_w        #14
282: dcmpl
283: ifne          290
286: iconst_1
287: goto          291
290: iconst_0
291: invokestatic  #91
294: new           #83
297: dup
298: invokespecial #84
301: ldc           #85
303: invokevirtual #86
306: dload         10
308: invokevirtual #150
311: ldc           #88
313: invokevirtual #86
316: ldc2_w        #14
319: invokevirtual #150
322: ldc           #85
324: invokevirtual #86
327: invokevirtual #89
330: dload         10
332: ldc2_w        #14
335: dcmpl
336: ifne          343
339: iconst_1
340: goto          344
343: iconst_0
344: invokestatic  #91
347: new           #83
350: dup
351: invokespecial #84
354: ldc           #85
356: invokevirtual #86
359: dload         12
361: invokevirtual #150
364: ldc           #88
366: invokevirtual #86
369: ldc2_w        #12
372: invokevirtual #150
375: ldc           #85
377: invokevirtual #86
380: invokevirtual #89
383: dload         12
385: ldc2_w        #12
388: dcmpl
389: ifne          396
392: iconst_1
393: goto          397
396: iconst_0
397: invokestatic  #91
400: aload         15
402: invokestatic  #20
405: aload         15
407: invokestatic  #21
410: ldc_w         #440
413: invokestatic  #23
416: return
Exception table:
from    to  target type
159   174   177   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test199
Start line: 5553
End line: 5572
Method source code: 
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        java.lang.Object[] objArray11 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray10);
        org.apache.commons.math3.exception.ZeroException zeroException12 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray10);
        java.lang.Class<?> wildcardClass13 = zeroException12.getClass();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #441
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #220
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: dconst_1
42: ldc2_w        #32
45: invokevirtual #43
48: aload_3
49: dconst_0
50: ldc2_w        #34
53: invokevirtual #43
56: aload_3
57: invokevirtual #59
60: aload_3
61: invokevirtual #25
64: astore        4
66: aload         4
68: checkcast     #79
71: invokestatic  #80
74: astore        5
76: new           #81
79: dup
80: aload_1
81: aload         4
83: checkcast     #79
86: invokespecial #82
89: astore        6
91: aload         6
93: invokevirtual #98
96: astore        7
98: new           #83
101: dup
102: invokespecial #84
105: ldc           #85
107: invokevirtual #86
110: aload_1
111: invokevirtual #87
114: ldc           #88
116: invokevirtual #86
119: getstatic     #220
122: invokevirtual #87
125: ldc           #85
127: invokevirtual #86
130: invokevirtual #89
133: aload_1
134: getstatic     #220
137: invokevirtual #90
140: invokestatic  #91
143: aload         4
145: invokestatic  #20
148: aload         5
150: invokestatic  #20
153: aload         5
155: invokestatic  #92
158: ldc           #74
160: invokestatic  #23
163: aload         5
165: invokestatic  #93
168: ldc           #74
170: invokestatic  #23
173: aload         7
175: invokestatic  #20
178: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test200
Start line: 5575
End line: 5597
Method source code: 
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(52.0d, 52.0d, 35.0d);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric15 = null;
        double[] doubleArray21 = new double[] { 0.0d, 100L, 10, (short) 1, 52.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = harmonicFitter1.fit(parametric15, doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 100.0, 10.0, 1.0, 52.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #442
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: ldc2_w        #12
64: ldc2_w        #12
67: ldc2_w        #14
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aconst_null
78: astore_3
79: iconst_5
80: newarray       double
82: dup
83: iconst_0
84: dconst_0
85: dastore
86: dup
87: iconst_1
88: ldc2_w        #34
91: dastore
92: dup
93: iconst_2
94: ldc2_w        #32
97: dastore
98: dup
99: iconst_3
100: dconst_1
101: dastore
102: dup
103: iconst_4
104: ldc2_w        #12
107: dastore
108: astore        4
110: aload_2
111: aload_3
112: aload         4
114: invokevirtual #30
117: astore        5
119: ldc           #17
121: invokestatic  #18
124: goto          129
127: astore        5
129: aload         4
131: invokestatic  #20
134: aload         4
136: invokestatic  #21
139: ldc_w         #443
142: invokestatic  #23
145: return
Exception table:
from    to  target type
110   124   127   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test201
Start line: 5600
End line: 5654
Method source code: 
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        java.lang.Throwable[] throwableArray11 = mathIllegalArgumentException4.getSuppressed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext12 = mathIllegalArgumentException4.getContext();
        java.lang.Object obj14 = exceptionContext12.getValue("");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING;
        exceptionContext12.setValue("{0} out of [{1}, {2}) range", (java.lang.Object) localizedFormats16);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats18 = org.apache.commons.math3.exception.util.LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED;
        org.apache.commons.math3.exception.util.Localizable localizable19 = null;
        java.lang.Number number21 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException23 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number21, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats24 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer25 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter26 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer25);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter26.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray28 = harmonicFitter26.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray29 = harmonicFitter26.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException30 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException23, (org.apache.commons.math3.exception.util.Localizable) localizedFormats24, (java.lang.Object[]) weightedObservedPointArray29);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException31 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable19, (java.lang.Object[]) weightedObservedPointArray29);
        exceptionContext12.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats18, (java.lang.Object[]) weightedObservedPointArray29);
        java.lang.Throwable throwable33 = exceptionContext12.getThrowable();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(exceptionContext12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING));
        org.junit.Assert.assertTrue("'" + localizedFormats18 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED + "'", localizedFormats18.equals(org.apache.commons.math3.exception.util.LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED));
        org.junit.Assert.assertTrue("'" + localizedFormats24 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats24.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertNotNull(weightedObservedPointArray28);
        org.junit.Assert.assertNotNull(weightedObservedPointArray29);
        org.junit.Assert.assertNotNull(throwable33);
        org.junit.Assert.assertEquals(throwable33.getLocalizedMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1: two or more categories required, got {0}");
        org.junit.Assert.assertEquals(throwable33.getMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1: two or more categories required, got {0}");
        org.junit.Assert.assertEquals(throwable33.toString(), "org.apache.commons.math3.exception.MathIllegalArgumentException: overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1: two or more categories required, got {0}");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #444
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: aload         4
110: invokevirtual #234
113: astore        9
115: aload         4
117: invokevirtual #165
120: astore        10
122: aload         10
124: ldc_w         #384
127: invokevirtual #167
130: astore        11
132: getstatic     #445
135: astore        12
137: aload         10
139: ldc_w         #446
142: aload         12
144: invokevirtual #373
147: getstatic     #447
150: astore        13
152: aconst_null
153: astore        14
155: aconst_null
156: astore        15
158: new           #28
161: dup
162: ldc2_w        #252
165: invokestatic  #129
168: aload         15
170: iconst_1
171: invokespecial #160
174: astore        16
176: getstatic     #254
179: astore        17
181: aconst_null
182: astore        18
184: new           #8
187: dup
188: aload         18
190: invokespecial #9
193: astore        19
195: aload         19
197: invokevirtual #25
200: astore        20
202: aload         19
204: invokevirtual #25
207: astore        21
209: aload         19
211: invokevirtual #25
214: astore        22
216: new           #136
219: dup
220: aload         16
222: aload         17
224: aload         22
226: checkcast     #79
229: invokespecial #137
232: astore        23
234: new           #130
237: dup
238: aload         14
240: aload         22
242: checkcast     #79
245: invokespecial #131
248: astore        24
250: aload         10
252: aload         13
254: aload         22
256: checkcast     #79
259: invokevirtual #169
262: aload         10
264: invokevirtual #288
267: astore        25
269: new           #83
272: dup
273: invokespecial #84
276: ldc           #85
278: invokevirtual #86
281: aload_1
282: invokevirtual #87
285: ldc           #88
287: invokevirtual #86
290: getstatic     #127
293: invokevirtual #87
296: ldc           #85
298: invokevirtual #86
301: invokevirtual #89
304: aload_1
305: getstatic     #127
308: invokevirtual #90
311: invokestatic  #91
314: new           #83
317: dup
318: invokespecial #84
321: ldc           #85
323: invokevirtual #86
326: aload_2
327: invokevirtual #87
330: ldc           #88
332: invokevirtual #86
335: getstatic     #128
338: invokevirtual #87
341: ldc           #85
343: invokevirtual #86
346: invokevirtual #89
349: aload_2
350: getstatic     #128
353: invokevirtual #90
356: invokestatic  #91
359: aload_3
360: invokestatic  #20
363: aload_3
364: invokestatic  #92
367: ldc           #140
369: invokestatic  #23
372: aload_3
373: invokestatic  #93
376: ldc           #140
378: invokestatic  #23
381: new           #83
384: dup
385: invokespecial #84
388: ldc           #85
390: invokevirtual #86
393: aload         5
395: invokevirtual #87
398: ldc           #88
400: invokevirtual #86
403: getstatic     #127
406: invokevirtual #87
409: ldc           #85
411: invokevirtual #86
414: invokevirtual #89
417: aload         5
419: getstatic     #127
422: invokevirtual #90
425: invokestatic  #91
428: new           #83
431: dup
432: invokespecial #84
435: ldc           #85
437: invokevirtual #86
440: aload         6
442: invokevirtual #87
445: ldc           #88
447: invokevirtual #86
450: getstatic     #128
453: invokevirtual #87
456: ldc           #85
458: invokevirtual #86
461: invokevirtual #89
464: aload         6
466: getstatic     #128
469: invokevirtual #90
472: invokestatic  #91
475: aload         7
477: invokestatic  #20
480: aload         7
482: invokestatic  #92
485: ldc           #140
487: invokestatic  #23
490: aload         7
492: invokestatic  #93
495: ldc           #140
497: invokestatic  #23
500: aload         9
502: invokestatic  #20
505: aload         10
507: invokestatic  #20
510: aload         11
512: invokestatic  #171
515: new           #83
518: dup
519: invokespecial #84
522: ldc           #85
524: invokevirtual #86
527: aload         12
529: invokevirtual #87
532: ldc           #88
534: invokevirtual #86
537: getstatic     #445
540: invokevirtual #87
543: ldc           #85
545: invokevirtual #86
548: invokevirtual #89
551: aload         12
553: getstatic     #445
556: invokevirtual #90
559: invokestatic  #91
562: new           #83
565: dup
566: invokespecial #84
569: ldc           #85
571: invokevirtual #86
574: aload         13
576: invokevirtual #87
579: ldc           #88
581: invokevirtual #86
584: getstatic     #447
587: invokevirtual #87
590: ldc           #85
592: invokevirtual #86
595: invokevirtual #89
598: aload         13
600: getstatic     #447
603: invokevirtual #90
606: invokestatic  #91
609: new           #83
612: dup
613: invokespecial #84
616: ldc           #85
618: invokevirtual #86
621: aload         17
623: invokevirtual #87
626: ldc           #88
628: invokevirtual #86
631: getstatic     #254
634: invokevirtual #87
637: ldc           #85
639: invokevirtual #86
642: invokevirtual #89
645: aload         17
647: getstatic     #254
650: invokevirtual #90
653: invokestatic  #91
656: aload         20
658: invokestatic  #20
661: aload         21
663: invokestatic  #20
666: aload         22
668: invokestatic  #20
671: aload         25
673: invokestatic  #20
676: aload         25
678: invokevirtual #289
681: ldc_w         #448
684: invokestatic  #23
687: aload         25
689: invokevirtual #291
692: ldc_w         #448
695: invokestatic  #23
698: aload         25
700: invokevirtual #292
703: ldc_w         #449
706: invokestatic  #23
709: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test202
Start line: 5657
End line: 5669
Method source code: 
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #450
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #25
45: astore        4
47: aload_2
48: invokevirtual #25
51: astore        5
53: aload_2
54: invokevirtual #59
57: aload_3
58: invokestatic  #20
61: aload         4
63: invokestatic  #20
66: aload         5
68: invokestatic  #20
71: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test203
Start line: 5672
End line: 5706
Method source code: 
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint15 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double16 = weightedObservedPoint15.getX();
        double double17 = weightedObservedPoint15.getY();
        double double18 = weightedObservedPoint15.getX();
        double double19 = weightedObservedPoint15.getY();
        double double20 = weightedObservedPoint15.getX();
        double double21 = weightedObservedPoint15.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint15);
        harmonicFitter1.addObservedPoint((double) 100, (double) 0);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric27 = null;
        double[] doubleArray34 = new double[] { (-1), (short) 10, 1.0d, (byte) 0, 'a', (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray35 = harmonicFitter1.fit((int) (byte) 100, parametric27, doubleArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 10.0, 1.0, 0.0, 97.0, 100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #451
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: dconst_0
54: ldc2_w        #12
57: ldc2_w        #10
60: invokevirtual #54
63: new           #145
66: dup
67: ldc2_w        #14
70: ldc2_w        #12
73: ldc2_w        #12
76: invokespecial #146
79: astore_3
80: aload_3
81: invokevirtual #147
84: dstore        4
86: aload_3
87: invokevirtual #149
90: dstore        6
92: aload_3
93: invokevirtual #147
96: dstore        8
98: aload_3
99: invokevirtual #149
102: dstore        10
104: aload_3
105: invokevirtual #147
108: dstore        12
110: aload_3
111: invokevirtual #147
114: dstore        14
116: aload_2
117: aload_3
118: invokevirtual #123
121: aload_2
122: ldc2_w        #34
125: dconst_0
126: invokevirtual #43
129: aconst_null
130: astore        16
132: bipush        6
134: newarray       double
136: dup
137: iconst_0
138: ldc2_w        #10
141: dastore
142: dup
143: iconst_1
144: ldc2_w        #32
147: dastore
148: dup
149: iconst_2
150: dconst_1
151: dastore
152: dup
153: iconst_3
154: dconst_0
155: dastore
156: dup
157: iconst_4
158: ldc2_w        #44
161: dastore
162: dup
163: iconst_5
164: ldc2_w        #34
167: dastore
168: astore        17
170: aload_2
171: bipush        100
173: aload         16
175: aload         17
177: invokevirtual #40
180: astore        18
182: ldc           #17
184: invokestatic  #18
187: goto          192
190: astore        18
192: new           #83
195: dup
196: invokespecial #84
199: ldc           #85
201: invokevirtual #86
204: dload         4
206: invokevirtual #150
209: ldc           #88
211: invokevirtual #86
214: ldc2_w        #12
217: invokevirtual #150
220: ldc           #85
222: invokevirtual #86
225: invokevirtual #89
228: dload         4
230: ldc2_w        #12
233: dcmpl
234: ifne          241
237: iconst_1
238: goto          242
241: iconst_0
242: invokestatic  #91
245: new           #83
248: dup
249: invokespecial #84
252: ldc           #85
254: invokevirtual #86
257: dload         6
259: invokevirtual #150
262: ldc           #88
264: invokevirtual #86
267: ldc2_w        #12
270: invokevirtual #150
273: ldc           #85
275: invokevirtual #86
278: invokevirtual #89
281: dload         6
283: ldc2_w        #12
286: dcmpl
287: ifne          294
290: iconst_1
291: goto          295
294: iconst_0
295: invokestatic  #91
298: new           #83
301: dup
302: invokespecial #84
305: ldc           #85
307: invokevirtual #86
310: dload         8
312: invokevirtual #150
315: ldc           #88
317: invokevirtual #86
320: ldc2_w        #12
323: invokevirtual #150
326: ldc           #85
328: invokevirtual #86
331: invokevirtual #89
334: dload         8
336: ldc2_w        #12
339: dcmpl
340: ifne          347
343: iconst_1
344: goto          348
347: iconst_0
348: invokestatic  #91
351: new           #83
354: dup
355: invokespecial #84
358: ldc           #85
360: invokevirtual #86
363: dload         10
365: invokevirtual #150
368: ldc           #88
370: invokevirtual #86
373: ldc2_w        #12
376: invokevirtual #150
379: ldc           #85
381: invokevirtual #86
384: invokevirtual #89
387: dload         10
389: ldc2_w        #12
392: dcmpl
393: ifne          400
396: iconst_1
397: goto          401
400: iconst_0
401: invokestatic  #91
404: new           #83
407: dup
408: invokespecial #84
411: ldc           #85
413: invokevirtual #86
416: dload         12
418: invokevirtual #150
421: ldc           #88
423: invokevirtual #86
426: ldc2_w        #12
429: invokevirtual #150
432: ldc           #85
434: invokevirtual #86
437: invokevirtual #89
440: dload         12
442: ldc2_w        #12
445: dcmpl
446: ifne          453
449: iconst_1
450: goto          454
453: iconst_0
454: invokestatic  #91
457: new           #83
460: dup
461: invokespecial #84
464: ldc           #85
466: invokevirtual #86
469: dload         14
471: invokevirtual #150
474: ldc           #88
476: invokevirtual #86
479: ldc2_w        #12
482: invokevirtual #150
485: ldc           #85
487: invokevirtual #86
490: invokevirtual #89
493: dload         14
495: ldc2_w        #12
498: dcmpl
499: ifne          506
502: iconst_1
503: goto          507
506: iconst_0
507: invokestatic  #91
510: aload         17
512: invokestatic  #20
515: aload         17
517: invokestatic  #21
520: ldc_w         #452
523: invokestatic  #23
526: return
Exception table:
from    to  target type
170   187   190   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test204
Start line: 5709
End line: 5737
Method source code: 
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray5 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint9 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double10 = weightedObservedPoint9.getX();
        double double11 = weightedObservedPoint9.getWeight();
        double double12 = weightedObservedPoint9.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint9);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric15 = null;
        double[] doubleArray16 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = harmonicFitter1.fit(parametric15, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray5);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #453
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #25
48: astore_3
49: new           #145
52: dup
53: ldc2_w        #14
56: ldc2_w        #12
59: ldc2_w        #12
62: invokespecial #146
65: astore        4
67: aload         4
69: invokevirtual #147
72: dstore        5
74: aload         4
76: invokevirtual #148
79: dstore        7
81: aload         4
83: invokevirtual #147
86: dstore        9
88: aload_2
89: aload         4
91: invokevirtual #123
94: aload_2
95: invokevirtual #59
98: aconst_null
99: astore        11
101: iconst_0
102: newarray       double
104: astore        12
106: aload_2
107: aload         11
109: aload         12
111: invokevirtual #30
114: astore        13
116: ldc           #17
118: invokestatic  #18
121: goto          126
124: astore        13
126: aload_3
127: invokestatic  #20
130: new           #83
133: dup
134: invokespecial #84
137: ldc           #85
139: invokevirtual #86
142: dload         5
144: invokevirtual #150
147: ldc           #88
149: invokevirtual #86
152: ldc2_w        #12
155: invokevirtual #150
158: ldc           #85
160: invokevirtual #86
163: invokevirtual #89
166: dload         5
168: ldc2_w        #12
171: dcmpl
172: ifne          179
175: iconst_1
176: goto          180
179: iconst_0
180: invokestatic  #91
183: new           #83
186: dup
187: invokespecial #84
190: ldc           #85
192: invokevirtual #86
195: dload         7
197: invokevirtual #150
200: ldc           #88
202: invokevirtual #86
205: ldc2_w        #14
208: invokevirtual #150
211: ldc           #85
213: invokevirtual #86
216: invokevirtual #89
219: dload         7
221: ldc2_w        #14
224: dcmpl
225: ifne          232
228: iconst_1
229: goto          233
232: iconst_0
233: invokestatic  #91
236: new           #83
239: dup
240: invokespecial #84
243: ldc           #85
245: invokevirtual #86
248: dload         9
250: invokevirtual #150
253: ldc           #88
255: invokevirtual #86
258: ldc2_w        #12
261: invokevirtual #150
264: ldc           #85
266: invokevirtual #86
269: invokevirtual #89
272: dload         9
274: ldc2_w        #12
277: dcmpl
278: ifne          285
281: iconst_1
282: goto          286
285: iconst_0
286: invokestatic  #91
289: aload         12
291: invokestatic  #20
294: aload         12
296: invokestatic  #21
299: ldc           #74
301: invokestatic  #23
304: return
Exception table:
from    to  target type
106   121   124   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test205
Start line: 5740
End line: 5761
Method source code: 
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(52.0d, 52.0d, 35.0d);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray16 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray16);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #454
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: ldc2_w        #12
64: ldc2_w        #12
67: ldc2_w        #14
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: invokevirtual #59
81: aload_2
82: invokevirtual #25
85: astore_3
86: aload_2
87: invokevirtual #26
90: astore        4
92: ldc           #27
94: invokestatic  #18
97: goto          102
100: astore        4
102: aload_3
103: invokestatic  #20
106: return
Exception table:
from    to  target type
86    97   100   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test206
Start line: 5764
End line: 5815
Method source code: 
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        java.lang.Object[] objArray11 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray10);
        org.apache.commons.math3.exception.ZeroException zeroException12 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray10);
        java.lang.Object[] objArray13 = null;
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException14 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray13);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray19 = new java.lang.Object[] { localizedFormats17, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException20 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats16, objArray19);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray24 = new java.lang.Object[] { localizedFormats22, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException25 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats21, objArray24);
        mathIllegalArgumentException20.addSuppressed((java.lang.Throwable) mathIllegalArgumentException25);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats27 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats28 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray30 = new java.lang.Object[] { localizedFormats28, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException25, (org.apache.commons.math3.exception.util.Localizable) localizedFormats27, objArray30);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException32 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats15, objArray30);
        org.apache.commons.math3.exception.ZeroException zeroException33 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray30);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats27 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats27.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats28 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats28.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[ROW_INDEX_OUT_OF_RANGE, 10]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #455
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #220
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: dconst_1
42: ldc2_w        #32
45: invokevirtual #43
48: aload_3
49: dconst_0
50: ldc2_w        #34
53: invokevirtual #43
56: aload_3
57: invokevirtual #59
60: aload_3
61: invokevirtual #25
64: astore        4
66: aload         4
68: checkcast     #79
71: invokestatic  #80
74: astore        5
76: new           #81
79: dup
80: aload_1
81: aload         4
83: checkcast     #79
86: invokespecial #82
89: astore        6
91: aconst_null
92: astore        7
94: new           #136
97: dup
98: aload_1
99: aload         7
101: invokespecial #138
104: astore        8
106: getstatic     #126
109: astore        9
111: getstatic     #127
114: astore        10
116: getstatic     #128
119: astore        11
121: iconst_2
122: anewarray     #5
125: dup
126: iconst_0
127: aload         11
129: aastore
130: dup
131: iconst_1
132: lconst_1
133: invokestatic  #129
136: aastore
137: astore        12
139: new           #130
142: dup
143: aload         10
145: aload         12
147: invokespecial #131
150: astore        13
152: getstatic     #127
155: astore        14
157: getstatic     #128
160: astore        15
162: iconst_2
163: anewarray     #5
166: dup
167: iconst_0
168: aload         15
170: aastore
171: dup
172: iconst_1
173: lconst_1
174: invokestatic  #129
177: aastore
178: astore        16
180: new           #130
183: dup
184: aload         14
186: aload         16
188: invokespecial #131
191: astore        17
193: aload         13
195: aload         17
197: invokevirtual #132
200: getstatic     #133
203: astore        18
205: getstatic     #134
208: astore        19
210: iconst_2
211: anewarray     #5
214: dup
215: iconst_0
216: aload         19
218: aastore
219: dup
220: iconst_1
221: bipush        10
223: invokestatic  #135
226: aastore
227: astore        20
229: new           #136
232: dup
233: aload         17
235: aload         18
237: aload         20
239: invokespecial #137
242: astore        21
244: new           #136
247: dup
248: aload         9
250: aload         20
252: invokespecial #138
255: astore        22
257: new           #81
260: dup
261: aload_1
262: aload         20
264: invokespecial #82
267: astore        23
269: new           #83
272: dup
273: invokespecial #84
276: ldc           #85
278: invokevirtual #86
281: aload_1
282: invokevirtual #87
285: ldc           #88
287: invokevirtual #86
290: getstatic     #220
293: invokevirtual #87
296: ldc           #85
298: invokevirtual #86
301: invokevirtual #89
304: aload_1
305: getstatic     #220
308: invokevirtual #90
311: invokestatic  #91
314: aload         4
316: invokestatic  #20
319: aload         5
321: invokestatic  #20
324: aload         5
326: invokestatic  #92
329: ldc           #74
331: invokestatic  #23
334: aload         5
336: invokestatic  #93
339: ldc           #74
341: invokestatic  #23
344: new           #83
347: dup
348: invokespecial #84
351: ldc           #85
353: invokevirtual #86
356: aload         9
358: invokevirtual #87
361: ldc           #88
363: invokevirtual #86
366: getstatic     #126
369: invokevirtual #87
372: ldc           #85
374: invokevirtual #86
377: invokevirtual #89
380: aload         9
382: getstatic     #126
385: invokevirtual #90
388: invokestatic  #91
391: new           #83
394: dup
395: invokespecial #84
398: ldc           #85
400: invokevirtual #86
403: aload         10
405: invokevirtual #87
408: ldc           #88
410: invokevirtual #86
413: getstatic     #127
416: invokevirtual #87
419: ldc           #85
421: invokevirtual #86
424: invokevirtual #89
427: aload         10
429: getstatic     #127
432: invokevirtual #90
435: invokestatic  #91
438: new           #83
441: dup
442: invokespecial #84
445: ldc           #85
447: invokevirtual #86
450: aload         11
452: invokevirtual #87
455: ldc           #88
457: invokevirtual #86
460: getstatic     #128
463: invokevirtual #87
466: ldc           #85
468: invokevirtual #86
471: invokevirtual #89
474: aload         11
476: getstatic     #128
479: invokevirtual #90
482: invokestatic  #91
485: aload         12
487: invokestatic  #20
490: aload         12
492: invokestatic  #92
495: ldc           #140
497: invokestatic  #23
500: aload         12
502: invokestatic  #93
505: ldc           #140
507: invokestatic  #23
510: new           #83
513: dup
514: invokespecial #84
517: ldc           #85
519: invokevirtual #86
522: aload         14
524: invokevirtual #87
527: ldc           #88
529: invokevirtual #86
532: getstatic     #127
535: invokevirtual #87
538: ldc           #85
540: invokevirtual #86
543: invokevirtual #89
546: aload         14
548: getstatic     #127
551: invokevirtual #90
554: invokestatic  #91
557: new           #83
560: dup
561: invokespecial #84
564: ldc           #85
566: invokevirtual #86
569: aload         15
571: invokevirtual #87
574: ldc           #88
576: invokevirtual #86
579: getstatic     #128
582: invokevirtual #87
585: ldc           #85
587: invokevirtual #86
590: invokevirtual #89
593: aload         15
595: getstatic     #128
598: invokevirtual #90
601: invokestatic  #91
604: aload         16
606: invokestatic  #20
609: aload         16
611: invokestatic  #92
614: ldc           #140
616: invokestatic  #23
619: aload         16
621: invokestatic  #93
624: ldc           #140
626: invokestatic  #23
629: new           #83
632: dup
633: invokespecial #84
636: ldc           #85
638: invokevirtual #86
641: aload         18
643: invokevirtual #87
646: ldc           #88
648: invokevirtual #86
651: getstatic     #133
654: invokevirtual #87
657: ldc           #85
659: invokevirtual #86
662: invokevirtual #89
665: aload         18
667: getstatic     #133
670: invokevirtual #90
673: invokestatic  #91
676: new           #83
679: dup
680: invokespecial #84
683: ldc           #85
685: invokevirtual #86
688: aload         19
690: invokevirtual #87
693: ldc           #88
695: invokevirtual #86
698: getstatic     #134
701: invokevirtual #87
704: ldc           #85
706: invokevirtual #86
709: invokevirtual #89
712: aload         19
714: getstatic     #134
717: invokevirtual #90
720: invokestatic  #91
723: aload         20
725: invokestatic  #20
728: aload         20
730: invokestatic  #92
733: ldc           #141
735: invokestatic  #23
738: aload         20
740: invokestatic  #93
743: ldc           #141
745: invokestatic  #23
748: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test207
Start line: 5818
End line: 5826
Method source code: 
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (short) -1, (double) (short) 0, (double) (short) 1);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #456
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #10
45: dconst_0
46: dconst_1
47: invokevirtual #54
50: aload_3
51: invokestatic  #20
54: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test208
Start line: 5829
End line: 5852
Method source code: 
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        java.lang.Object[] objArray11 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray10);
        org.apache.commons.math3.exception.ZeroException zeroException12 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray10);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.INVALID_BRACKETING_PARAMETERS;
        java.lang.Object[] objArray14 = null;
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException15 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) zeroException12, (org.apache.commons.math3.exception.util.Localizable) localizedFormats13, objArray14);
        java.lang.Number number16 = zeroException12.getArgument();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INVALID_BRACKETING_PARAMETERS + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INVALID_BRACKETING_PARAMETERS));
        org.junit.Assert.assertEquals("'" + number16 + "' != '" + 0 + "'", number16, 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #457
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #78
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: dconst_1
42: ldc2_w        #32
45: invokevirtual #43
48: aload_3
49: dconst_0
50: ldc2_w        #34
53: invokevirtual #43
56: aload_3
57: invokevirtual #59
60: aload_3
61: invokevirtual #25
64: astore        4
66: aload         4
68: checkcast     #79
71: invokestatic  #80
74: astore        5
76: new           #81
79: dup
80: aload_1
81: aload         4
83: checkcast     #79
86: invokespecial #82
89: astore        6
91: getstatic     #458
94: astore        7
96: aconst_null
97: astore        8
99: new           #136
102: dup
103: aload         6
105: aload         7
107: aload         8
109: invokespecial #137
112: astore        9
114: aload         6
116: invokevirtual #243
119: astore        10
121: new           #83
124: dup
125: invokespecial #84
128: ldc           #85
130: invokevirtual #86
133: aload_1
134: invokevirtual #87
137: ldc           #88
139: invokevirtual #86
142: getstatic     #78
145: invokevirtual #87
148: ldc           #85
150: invokevirtual #86
153: invokevirtual #89
156: aload_1
157: getstatic     #78
160: invokevirtual #90
163: invokestatic  #91
166: aload         4
168: invokestatic  #20
171: aload         5
173: invokestatic  #20
176: aload         5
178: invokestatic  #92
181: ldc           #74
183: invokestatic  #23
186: aload         5
188: invokestatic  #93
191: ldc           #74
193: invokestatic  #23
196: new           #83
199: dup
200: invokespecial #84
203: ldc           #85
205: invokevirtual #86
208: aload         7
210: invokevirtual #87
213: ldc           #88
215: invokevirtual #86
218: getstatic     #458
221: invokevirtual #87
224: ldc           #85
226: invokevirtual #86
229: invokevirtual #89
232: aload         7
234: getstatic     #458
237: invokevirtual #90
240: invokestatic  #91
243: new           #83
246: dup
247: invokespecial #84
250: ldc           #85
252: invokevirtual #86
255: aload         10
257: invokevirtual #87
260: ldc           #88
262: invokevirtual #86
265: iconst_0
266: invokevirtual #244
269: ldc           #85
271: invokevirtual #86
274: invokevirtual #89
277: aload         10
279: iconst_0
280: invokestatic  #135
283: invokestatic  #245
286: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test209
Start line: 5855
End line: 5905
Method source code: 
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer11 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter12 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer11);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray13 = harmonicFitter12.getObservations();
        harmonicFitter12.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter12.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer16 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter17 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer16);
        harmonicFitter17.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter17.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter17.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray25 = harmonicFitter17.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint29 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double30 = weightedObservedPoint29.getX();
        double double31 = weightedObservedPoint29.getY();
        double double32 = weightedObservedPoint29.getX();
        double double33 = weightedObservedPoint29.getY();
        harmonicFitter17.addObservedPoint(weightedObservedPoint29);
        double double35 = weightedObservedPoint29.getWeight();
        harmonicFitter12.addObservedPoint(weightedObservedPoint29);
        harmonicFitter1.addObservedPoint(weightedObservedPoint29);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric38 = null;
        double[] doubleArray44 = new double[] { 100, (-1.0f), '4', 1L, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray45 = harmonicFitter1.fit(parametric38, doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray13);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertNotNull(weightedObservedPointArray25);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, -1.0, 52.0, 1.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #459
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: invokevirtual #25
66: astore        4
68: aconst_null
69: astore        5
71: new           #8
74: dup
75: aload         5
77: invokespecial #9
80: astore        6
82: aload         6
84: invokevirtual #25
87: astore        7
89: aload         6
91: invokevirtual #59
94: aload         6
96: invokevirtual #25
99: astore        8
101: aconst_null
102: astore        9
104: new           #8
107: dup
108: aload         9
110: invokespecial #9
113: astore        10
115: aload         10
117: dconst_1
118: ldc2_w        #32
121: invokevirtual #43
124: aload         10
126: dconst_0
127: ldc2_w        #34
130: invokevirtual #43
133: aload         10
135: invokevirtual #59
138: aload         10
140: invokevirtual #25
143: astore        11
145: new           #145
148: dup
149: ldc2_w        #14
152: ldc2_w        #12
155: ldc2_w        #12
158: invokespecial #146
161: astore        12
163: aload         12
165: invokevirtual #147
168: dstore        13
170: aload         12
172: invokevirtual #149
175: dstore        15
177: aload         12
179: invokevirtual #147
182: dstore        17
184: aload         12
186: invokevirtual #149
189: dstore        19
191: aload         10
193: aload         12
195: invokevirtual #123
198: aload         12
200: invokevirtual #148
203: dstore        21
205: aload         6
207: aload         12
209: invokevirtual #123
212: aload_2
213: aload         12
215: invokevirtual #123
218: aconst_null
219: astore        23
221: iconst_5
222: newarray       double
224: dup
225: iconst_0
226: ldc2_w        #34
229: dastore
230: dup
231: iconst_1
232: ldc2_w        #10
235: dastore
236: dup
237: iconst_2
238: ldc2_w        #12
241: dastore
242: dup
243: iconst_3
244: dconst_1
245: dastore
246: dup
247: iconst_4
248: ldc2_w        #32
251: dastore
252: astore        24
254: aload_2
255: aload         23
257: aload         24
259: invokevirtual #30
262: astore        25
264: ldc           #17
266: invokestatic  #18
269: goto          274
272: astore        25
274: aload_3
275: invokestatic  #20
278: aload         4
280: invokestatic  #20
283: aload         7
285: invokestatic  #20
288: aload         8
290: invokestatic  #20
293: aload         11
295: invokestatic  #20
298: new           #83
301: dup
302: invokespecial #84
305: ldc           #85
307: invokevirtual #86
310: dload         13
312: invokevirtual #150
315: ldc           #88
317: invokevirtual #86
320: ldc2_w        #12
323: invokevirtual #150
326: ldc           #85
328: invokevirtual #86
331: invokevirtual #89
334: dload         13
336: ldc2_w        #12
339: dcmpl
340: ifne          347
343: iconst_1
344: goto          348
347: iconst_0
348: invokestatic  #91
351: new           #83
354: dup
355: invokespecial #84
358: ldc           #85
360: invokevirtual #86
363: dload         15
365: invokevirtual #150
368: ldc           #88
370: invokevirtual #86
373: ldc2_w        #12
376: invokevirtual #150
379: ldc           #85
381: invokevirtual #86
384: invokevirtual #89
387: dload         15
389: ldc2_w        #12
392: dcmpl
393: ifne          400
396: iconst_1
397: goto          401
400: iconst_0
401: invokestatic  #91
404: new           #83
407: dup
408: invokespecial #84
411: ldc           #85
413: invokevirtual #86
416: dload         17
418: invokevirtual #150
421: ldc           #88
423: invokevirtual #86
426: ldc2_w        #12
429: invokevirtual #150
432: ldc           #85
434: invokevirtual #86
437: invokevirtual #89
440: dload         17
442: ldc2_w        #12
445: dcmpl
446: ifne          453
449: iconst_1
450: goto          454
453: iconst_0
454: invokestatic  #91
457: new           #83
460: dup
461: invokespecial #84
464: ldc           #85
466: invokevirtual #86
469: dload         19
471: invokevirtual #150
474: ldc           #88
476: invokevirtual #86
479: ldc2_w        #12
482: invokevirtual #150
485: ldc           #85
487: invokevirtual #86
490: invokevirtual #89
493: dload         19
495: ldc2_w        #12
498: dcmpl
499: ifne          506
502: iconst_1
503: goto          507
506: iconst_0
507: invokestatic  #91
510: new           #83
513: dup
514: invokespecial #84
517: ldc           #85
519: invokevirtual #86
522: dload         21
524: invokevirtual #150
527: ldc           #88
529: invokevirtual #86
532: ldc2_w        #14
535: invokevirtual #150
538: ldc           #85
540: invokevirtual #86
543: invokevirtual #89
546: dload         21
548: ldc2_w        #14
551: dcmpl
552: ifne          559
555: iconst_1
556: goto          560
559: iconst_0
560: invokestatic  #91
563: aload         24
565: invokestatic  #20
568: aload         24
570: invokestatic  #21
573: ldc_w         #460
576: invokestatic  #23
579: return
Exception table:
from    to  target type
254   269   272   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test210
Start line: 5908
End line: 5926
Method source code: 
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter1.addObservedPoint((double) (short) 10, 0.0d);
        harmonicFitter1.addObservedPoint((double) (byte) 10, (-1.0d), (double) 'a');
        harmonicFitter1.addObservedPoint((double) 1L, (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #461
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: ldc2_w        #34
56: ldc2_w        #34
59: ldc2_w        #32
62: invokevirtual #54
65: aload_2
66: ldc2_w        #32
69: dconst_0
70: invokevirtual #43
73: aload_2
74: ldc2_w        #32
77: ldc2_w        #10
80: ldc2_w        #44
83: invokevirtual #54
86: aload_2
87: dconst_1
88: ldc2_w        #38
91: invokevirtual #43
94: aload_2
95: invokevirtual #26
98: astore_3
99: ldc           #17
101: invokestatic  #18
104: goto          108
107: astore_3
108: return
Exception table:
from    to  target type
94   104   107   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test211
Start line: 5929
End line: 5939
Method source code: 
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(35.0d, (double) (byte) -1);
        harmonicFitter1.addObservedPoint(1.0d, (double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (byte) 100);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #462
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: ldc2_w        #14
52: ldc2_w        #10
55: invokevirtual #43
58: aload_2
59: dconst_1
60: dconst_1
61: ldc2_w        #32
64: invokevirtual #54
67: aload_2
68: dconst_0
69: ldc2_w        #12
72: ldc2_w        #34
75: invokevirtual #54
78: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test212
Start line: 5942
End line: 5983
Method source code: 
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.addObservedPoint((double) (-1), (double) (byte) 1);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer17 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter18 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer17);
        harmonicFitter18.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter18.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray25 = harmonicFitter18.getObservations();
        harmonicFitter18.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint33 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double34 = weightedObservedPoint33.getWeight();
        double double35 = weightedObservedPoint33.getX();
        double double36 = weightedObservedPoint33.getX();
        double double37 = weightedObservedPoint33.getWeight();
        harmonicFitter18.addObservedPoint(weightedObservedPoint33);
        harmonicFitter1.addObservedPoint(weightedObservedPoint33);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric40 = null;
        double[] doubleArray44 = new double[] { (short) 0, (byte) -1, 10.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray45 = harmonicFitter1.fit(parametric40, doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray25);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, -1.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #463
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload_2
78: ldc2_w        #10
81: dconst_1
82: invokevirtual #43
85: aconst_null
86: astore        5
88: new           #8
91: dup
92: aload         5
94: invokespecial #9
97: astore        6
99: aload         6
101: dconst_1
102: ldc2_w        #32
105: invokevirtual #43
108: aload         6
110: dconst_0
111: ldc2_w        #34
114: invokevirtual #43
117: aload         6
119: invokevirtual #25
122: astore        7
124: aload         6
126: dconst_0
127: dconst_1
128: ldc2_w        #34
131: invokevirtual #54
134: new           #145
137: dup
138: ldc2_w        #14
141: ldc2_w        #12
144: ldc2_w        #12
147: invokespecial #146
150: astore        8
152: aload         8
154: invokevirtual #148
157: dstore        9
159: aload         8
161: invokevirtual #147
164: dstore        11
166: aload         8
168: invokevirtual #147
171: dstore        13
173: aload         8
175: invokevirtual #148
178: dstore        15
180: aload         6
182: aload         8
184: invokevirtual #123
187: aload_2
188: aload         8
190: invokevirtual #123
193: aconst_null
194: astore        17
196: iconst_3
197: newarray       double
199: dup
200: iconst_0
201: dconst_0
202: dastore
203: dup
204: iconst_1
205: ldc2_w        #10
208: dastore
209: dup
210: iconst_2
211: ldc2_w        #32
214: dastore
215: astore        18
217: aload_2
218: aload         17
220: aload         18
222: invokevirtual #30
225: astore        19
227: ldc           #17
229: invokestatic  #18
232: goto          237
235: astore        19
237: aload_3
238: invokestatic  #20
241: aload         7
243: invokestatic  #20
246: new           #83
249: dup
250: invokespecial #84
253: ldc           #85
255: invokevirtual #86
258: dload         9
260: invokevirtual #150
263: ldc           #88
265: invokevirtual #86
268: ldc2_w        #14
271: invokevirtual #150
274: ldc           #85
276: invokevirtual #86
279: invokevirtual #89
282: dload         9
284: ldc2_w        #14
287: dcmpl
288: ifne          295
291: iconst_1
292: goto          296
295: iconst_0
296: invokestatic  #91
299: new           #83
302: dup
303: invokespecial #84
306: ldc           #85
308: invokevirtual #86
311: dload         11
313: invokevirtual #150
316: ldc           #88
318: invokevirtual #86
321: ldc2_w        #12
324: invokevirtual #150
327: ldc           #85
329: invokevirtual #86
332: invokevirtual #89
335: dload         11
337: ldc2_w        #12
340: dcmpl
341: ifne          348
344: iconst_1
345: goto          349
348: iconst_0
349: invokestatic  #91
352: new           #83
355: dup
356: invokespecial #84
359: ldc           #85
361: invokevirtual #86
364: dload         13
366: invokevirtual #150
369: ldc           #88
371: invokevirtual #86
374: ldc2_w        #12
377: invokevirtual #150
380: ldc           #85
382: invokevirtual #86
385: invokevirtual #89
388: dload         13
390: ldc2_w        #12
393: dcmpl
394: ifne          401
397: iconst_1
398: goto          402
401: iconst_0
402: invokestatic  #91
405: new           #83
408: dup
409: invokespecial #84
412: ldc           #85
414: invokevirtual #86
417: dload         15
419: invokevirtual #150
422: ldc           #88
424: invokevirtual #86
427: ldc2_w        #14
430: invokevirtual #150
433: ldc           #85
435: invokevirtual #86
438: invokevirtual #89
441: dload         15
443: ldc2_w        #14
446: dcmpl
447: ifne          454
450: iconst_1
451: goto          455
454: iconst_0
455: invokestatic  #91
458: aload         18
460: invokestatic  #20
463: aload         18
465: invokestatic  #21
468: ldc_w         #464
471: invokestatic  #23
474: return
Exception table:
from    to  target type
217   232   235   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test213
Start line: 5986
End line: 5999
Method source code: 
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        double double14 = weightedObservedPoint12.getWeight();
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #465
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload         4
79: invokevirtual #148
82: dstore        5
84: aload_3
85: invokestatic  #20
88: new           #83
91: dup
92: invokespecial #84
95: ldc           #85
97: invokevirtual #86
100: dload         5
102: invokevirtual #150
105: ldc           #88
107: invokevirtual #86
110: dconst_1
111: invokevirtual #150
114: ldc           #85
116: invokevirtual #86
119: invokevirtual #89
122: dload         5
124: dconst_1
125: dcmpl
126: ifne          133
129: iconst_1
130: goto          134
133: iconst_0
134: invokestatic  #91
137: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test214
Start line: 6002
End line: 6027
Method source code: 
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter1.addObservedPoint((double) (short) 100, 100.0d);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint20 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double21 = weightedObservedPoint20.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint20);
        double[] doubleArray23 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray24 = harmonicFitter1.fit(doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #466
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: aload_2
74: ldc2_w        #34
77: ldc2_w        #34
80: invokevirtual #43
83: new           #145
86: dup
87: ldc2_w        #14
90: ldc2_w        #12
93: ldc2_w        #12
96: invokespecial #146
99: astore        4
101: aload         4
103: invokevirtual #148
106: dstore        5
108: aload_2
109: aload         4
111: invokevirtual #123
114: iconst_0
115: newarray       double
117: astore        7
119: aload_2
120: aload         7
122: invokevirtual #16
125: astore        8
127: ldc           #17
129: invokestatic  #18
132: goto          137
135: astore        8
137: aload_3
138: invokestatic  #20
141: new           #83
144: dup
145: invokespecial #84
148: ldc           #85
150: invokevirtual #86
153: dload         5
155: invokevirtual #150
158: ldc           #88
160: invokevirtual #86
163: ldc2_w        #14
166: invokevirtual #150
169: ldc           #85
171: invokevirtual #86
174: invokevirtual #89
177: dload         5
179: ldc2_w        #14
182: dcmpl
183: ifne          190
186: iconst_1
187: goto          191
190: iconst_0
191: invokestatic  #91
194: aload         7
196: invokestatic  #20
199: aload         7
201: invokestatic  #21
204: ldc           #74
206: invokestatic  #23
209: return
Exception table:
from    to  target type
119   132   135   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test215
Start line: 6030
End line: 6052
Method source code: 
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint16 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double17 = weightedObservedPoint16.getWeight();
        double double18 = weightedObservedPoint16.getX();
        double double19 = weightedObservedPoint16.getX();
        double double20 = weightedObservedPoint16.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint16);
        java.lang.Class<?> wildcardClass22 = weightedObservedPoint16.getClass();
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #467
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: dconst_0
59: dconst_1
60: ldc2_w        #34
63: invokevirtual #54
66: new           #145
69: dup
70: ldc2_w        #14
73: ldc2_w        #12
76: ldc2_w        #12
79: invokespecial #146
82: astore        4
84: aload         4
86: invokevirtual #148
89: dstore        5
91: aload         4
93: invokevirtual #147
96: dstore        7
98: aload         4
100: invokevirtual #147
103: dstore        9
105: aload         4
107: invokevirtual #148
110: dstore        11
112: aload_2
113: aload         4
115: invokevirtual #123
118: aload         4
120: invokevirtual #98
123: astore        13
125: aload_3
126: invokestatic  #20
129: new           #83
132: dup
133: invokespecial #84
136: ldc           #85
138: invokevirtual #86
141: dload         5
143: invokevirtual #150
146: ldc           #88
148: invokevirtual #86
151: ldc2_w        #14
154: invokevirtual #150
157: ldc           #85
159: invokevirtual #86
162: invokevirtual #89
165: dload         5
167: ldc2_w        #14
170: dcmpl
171: ifne          178
174: iconst_1
175: goto          179
178: iconst_0
179: invokestatic  #91
182: new           #83
185: dup
186: invokespecial #84
189: ldc           #85
191: invokevirtual #86
194: dload         7
196: invokevirtual #150
199: ldc           #88
201: invokevirtual #86
204: ldc2_w        #12
207: invokevirtual #150
210: ldc           #85
212: invokevirtual #86
215: invokevirtual #89
218: dload         7
220: ldc2_w        #12
223: dcmpl
224: ifne          231
227: iconst_1
228: goto          232
231: iconst_0
232: invokestatic  #91
235: new           #83
238: dup
239: invokespecial #84
242: ldc           #85
244: invokevirtual #86
247: dload         9
249: invokevirtual #150
252: ldc           #88
254: invokevirtual #86
257: ldc2_w        #12
260: invokevirtual #150
263: ldc           #85
265: invokevirtual #86
268: invokevirtual #89
271: dload         9
273: ldc2_w        #12
276: dcmpl
277: ifne          284
280: iconst_1
281: goto          285
284: iconst_0
285: invokestatic  #91
288: new           #83
291: dup
292: invokespecial #84
295: ldc           #85
297: invokevirtual #86
300: dload         11
302: invokevirtual #150
305: ldc           #88
307: invokevirtual #86
310: ldc2_w        #14
313: invokevirtual #150
316: ldc           #85
318: invokevirtual #86
321: invokevirtual #89
324: dload         11
326: ldc2_w        #14
329: dcmpl
330: ifne          337
333: iconst_1
334: goto          338
337: iconst_0
338: invokestatic  #91
341: aload         13
343: invokestatic  #20
346: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test216
Start line: 6055
End line: 6082
Method source code: 
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray5 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint9 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double10 = weightedObservedPoint9.getX();
        double double11 = weightedObservedPoint9.getWeight();
        double double12 = weightedObservedPoint9.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint9);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric15 = null;
        double[] doubleArray17 = new double[] { 1.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = harmonicFitter1.fit((int) (short) 10, parametric15, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray5);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #468
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #25
48: astore_3
49: new           #145
52: dup
53: ldc2_w        #14
56: ldc2_w        #12
59: ldc2_w        #12
62: invokespecial #146
65: astore        4
67: aload         4
69: invokevirtual #147
72: dstore        5
74: aload         4
76: invokevirtual #148
79: dstore        7
81: aload         4
83: invokevirtual #147
86: dstore        9
88: aload_2
89: aload         4
91: invokevirtual #123
94: aconst_null
95: astore        11
97: iconst_1
98: newarray       double
100: dup
101: iconst_0
102: dconst_1
103: dastore
104: astore        12
106: aload_2
107: bipush        10
109: aload         11
111: aload         12
113: invokevirtual #40
116: astore        13
118: ldc           #17
120: invokestatic  #18
123: goto          128
126: astore        13
128: aload_3
129: invokestatic  #20
132: new           #83
135: dup
136: invokespecial #84
139: ldc           #85
141: invokevirtual #86
144: dload         5
146: invokevirtual #150
149: ldc           #88
151: invokevirtual #86
154: ldc2_w        #12
157: invokevirtual #150
160: ldc           #85
162: invokevirtual #86
165: invokevirtual #89
168: dload         5
170: ldc2_w        #12
173: dcmpl
174: ifne          181
177: iconst_1
178: goto          182
181: iconst_0
182: invokestatic  #91
185: new           #83
188: dup
189: invokespecial #84
192: ldc           #85
194: invokevirtual #86
197: dload         7
199: invokevirtual #150
202: ldc           #88
204: invokevirtual #86
207: ldc2_w        #14
210: invokevirtual #150
213: ldc           #85
215: invokevirtual #86
218: invokevirtual #89
221: dload         7
223: ldc2_w        #14
226: dcmpl
227: ifne          234
230: iconst_1
231: goto          235
234: iconst_0
235: invokestatic  #91
238: new           #83
241: dup
242: invokespecial #84
245: ldc           #85
247: invokevirtual #86
250: dload         9
252: invokevirtual #150
255: ldc           #88
257: invokevirtual #86
260: ldc2_w        #12
263: invokevirtual #150
266: ldc           #85
268: invokevirtual #86
271: invokevirtual #89
274: dload         9
276: ldc2_w        #12
279: dcmpl
280: ifne          287
283: iconst_1
284: goto          288
287: iconst_0
288: invokestatic  #91
291: aload         12
293: invokestatic  #20
296: aload         12
298: invokestatic  #21
301: ldc           #154
303: invokestatic  #23
306: return
Exception table:
from    to  target type
106   123   126   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test217
Start line: 6085
End line: 6106
Method source code: 
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint10 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint(0.0d, (double) 1.0f, 35.0d);
        harmonicFitter1.addObservedPoint(weightedObservedPoint10);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric13 = null;
        double[] doubleArray14 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = harmonicFitter1.fit((int) (short) 0, parametric13, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #469
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: invokevirtual #59
52: new           #145
55: dup
56: dconst_0
57: dconst_1
58: ldc2_w        #14
61: invokespecial #146
64: astore_3
65: aload_2
66: aload_3
67: invokevirtual #123
70: aconst_null
71: astore        4
73: iconst_0
74: newarray       double
76: astore        5
78: aload_2
79: iconst_0
80: aload         4
82: aload         5
84: invokevirtual #40
87: astore        6
89: ldc           #17
91: invokestatic  #18
94: goto          99
97: astore        6
99: aload         5
101: invokestatic  #20
104: aload         5
106: invokestatic  #21
109: ldc           #74
111: invokestatic  #23
114: return
Exception table:
from    to  target type
78    94    97   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test218
Start line: 6109
End line: 6121
Method source code: 
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint14 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((-1.0d), (double) 100, (double) (-1));
        harmonicFitter1.addObservedPoint(weightedObservedPoint14);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #470
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: invokevirtual #59
66: new           #145
69: dup
70: ldc2_w        #10
73: ldc2_w        #34
76: ldc2_w        #10
79: invokespecial #146
82: astore        4
84: aload_2
85: aload         4
87: invokevirtual #123
90: aload_3
91: invokestatic  #20
94: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test219
Start line: 6124
End line: 6140
Method source code: 
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.clearObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #471
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #26
60: astore        4
62: ldc           #27
64: invokestatic  #18
67: goto          72
70: astore        4
72: aload_3
73: invokestatic  #20
76: return
Exception table:
from    to  target type
56    67    70   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test220
Start line: 6143
End line: 6167
Method source code: 
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) -1, (-1.0d));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray18 = harmonicFitter1.getObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #472
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: invokevirtual #59
107: aload_2
108: ldc2_w        #10
111: ldc2_w        #10
114: invokevirtual #43
117: aload_2
118: invokevirtual #25
121: astore        14
123: aload_3
124: invokestatic  #20
127: aload         4
129: invokestatic  #20
132: new           #83
135: dup
136: invokespecial #84
139: ldc           #85
141: invokevirtual #86
144: dload         6
146: invokevirtual #150
149: ldc           #88
151: invokevirtual #86
154: ldc2_w        #12
157: invokevirtual #150
160: ldc           #85
162: invokevirtual #86
165: invokevirtual #89
168: dload         6
170: ldc2_w        #12
173: dcmpl
174: ifne          181
177: iconst_1
178: goto          182
181: iconst_0
182: invokestatic  #91
185: new           #83
188: dup
189: invokespecial #84
192: ldc           #85
194: invokevirtual #86
197: dload         8
199: invokevirtual #150
202: ldc           #88
204: invokevirtual #86
207: ldc2_w        #14
210: invokevirtual #150
213: ldc           #85
215: invokevirtual #86
218: invokevirtual #89
221: dload         8
223: ldc2_w        #14
226: dcmpl
227: ifne          234
230: iconst_1
231: goto          235
234: iconst_0
235: invokestatic  #91
238: new           #83
241: dup
242: invokespecial #84
245: ldc           #85
247: invokevirtual #86
250: dload         10
252: invokevirtual #150
255: ldc           #88
257: invokevirtual #86
260: ldc2_w        #14
263: invokevirtual #150
266: ldc           #85
268: invokevirtual #86
271: invokevirtual #89
274: dload         10
276: ldc2_w        #14
279: dcmpl
280: ifne          287
283: iconst_1
284: goto          288
287: iconst_0
288: invokestatic  #91
291: new           #83
294: dup
295: invokespecial #84
298: ldc           #85
300: invokevirtual #86
303: dload         12
305: invokevirtual #150
308: ldc           #88
310: invokevirtual #86
313: ldc2_w        #12
316: invokevirtual #150
319: ldc           #85
321: invokevirtual #86
324: invokevirtual #89
327: dload         12
329: ldc2_w        #12
332: dcmpl
333: ifne          340
336: iconst_1
337: goto          341
340: iconst_0
341: invokestatic  #91
344: aload         14
346: invokestatic  #20
349: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test221
Start line: 6170
End line: 6189
Method source code: 
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(52.0d, 52.0d, 35.0d);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 1, 52.0d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #473
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: ldc2_w        #12
64: ldc2_w        #12
67: ldc2_w        #14
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: dconst_1
79: ldc2_w        #12
82: invokevirtual #43
85: aload_2
86: invokevirtual #26
89: astore_3
90: ldc           #64
92: invokestatic  #18
95: goto          99
98: astore_3
99: return
Exception table:
from    to  target type
85    95    98   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test222
Start line: 6192
End line: 6245
Method source code: 
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.SINGULAR_MATRIX;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_ORDER_ABSCISSA_ARRAY;
        java.lang.String str2 = localizedFormats1.getSourceString();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats3 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray6 = new java.lang.Object[] { localizedFormats4, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException7 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats3, objArray6);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray11 = new java.lang.Object[] { localizedFormats9, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException12 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats8, objArray11);
        mathIllegalArgumentException7.addSuppressed((java.lang.Throwable) mathIllegalArgumentException12);
        java.lang.Throwable[] throwableArray14 = mathIllegalArgumentException7.getSuppressed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext15 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException7);
        java.util.Set<java.lang.String> strSet16 = exceptionContext15.getKeys();
        java.lang.Object obj18 = exceptionContext15.getValue("");
        java.util.Set<java.lang.String> strSet19 = exceptionContext15.getKeys();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.REAL_FORMAT;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer21 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter22 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer21);
        harmonicFitter22.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter22.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter22.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray30 = harmonicFitter22.getObservations();
        java.lang.Object[] objArray31 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray30);
        exceptionContext15.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, (java.lang.Object[]) weightedObservedPointArray30);
        org.apache.commons.math3.exception.ZeroException zeroException33 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) weightedObservedPointArray30);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException34 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray30);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SINGULAR_MATRIX + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SINGULAR_MATRIX));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_ORDER_ABSCISSA_ARRAY + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_ORDER_ABSCISSA_ARRAY));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}" + "'", str2, "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}");
        org.junit.Assert.assertTrue("'" + localizedFormats3 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats3.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.REAL_FORMAT + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.REAL_FORMAT));
        org.junit.Assert.assertNotNull(weightedObservedPointArray30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #474
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #475
28: astore_1
29: getstatic     #476
32: astore_2
33: aload_2
34: invokevirtual #301
37: astore_3
38: getstatic     #127
41: astore        4
43: getstatic     #128
46: astore        5
48: iconst_2
49: anewarray     #5
52: dup
53: iconst_0
54: aload         5
56: aastore
57: dup
58: iconst_1
59: lconst_1
60: invokestatic  #129
63: aastore
64: astore        6
66: new           #130
69: dup
70: aload         4
72: aload         6
74: invokespecial #131
77: astore        7
79: getstatic     #127
82: astore        8
84: getstatic     #128
87: astore        9
89: iconst_2
90: anewarray     #5
93: dup
94: iconst_0
95: aload         9
97: aastore
98: dup
99: iconst_1
100: lconst_1
101: invokestatic  #129
104: aastore
105: astore        10
107: new           #130
110: dup
111: aload         8
113: aload         10
115: invokespecial #131
118: astore        11
120: aload         7
122: aload         11
124: invokevirtual #132
127: aload         7
129: invokevirtual #234
132: astore        12
134: new           #163
137: dup
138: aload         7
140: invokespecial #164
143: astore        13
145: aload         13
147: invokevirtual #370
150: astore        14
152: aload         13
154: ldc_w         #384
157: invokevirtual #167
160: astore        15
162: aload         13
164: invokevirtual #370
167: astore        16
169: getstatic     #477
172: astore        17
174: aconst_null
175: astore        18
177: new           #8
180: dup
181: aload         18
183: invokespecial #9
186: astore        19
188: aload         19
190: dconst_1
191: ldc2_w        #32
194: invokevirtual #43
197: aload         19
199: dconst_0
200: ldc2_w        #34
203: invokevirtual #43
206: aload         19
208: invokevirtual #59
211: aload         19
213: invokevirtual #25
216: astore        20
218: aload         20
220: checkcast     #79
223: invokestatic  #80
226: astore        21
228: aload         13
230: aload         17
232: aload         20
234: checkcast     #79
237: invokevirtual #169
240: new           #81
243: dup
244: aload_2
245: aload         20
247: checkcast     #79
250: invokespecial #82
253: astore        22
255: new           #130
258: dup
259: aload_1
260: aload         20
262: checkcast     #79
265: invokespecial #131
268: astore        23
270: new           #83
273: dup
274: invokespecial #84
277: ldc           #85
279: invokevirtual #86
282: aload_1
283: invokevirtual #87
286: ldc           #88
288: invokevirtual #86
291: getstatic     #475
294: invokevirtual #87
297: ldc           #85
299: invokevirtual #86
302: invokevirtual #89
305: aload_1
306: getstatic     #475
309: invokevirtual #90
312: invokestatic  #91
315: new           #83
318: dup
319: invokespecial #84
322: ldc           #85
324: invokevirtual #86
327: aload_2
328: invokevirtual #87
331: ldc           #88
333: invokevirtual #86
336: getstatic     #476
339: invokevirtual #87
342: ldc           #85
344: invokevirtual #86
347: invokevirtual #89
350: aload_2
351: getstatic     #476
354: invokevirtual #90
357: invokestatic  #91
360: new           #83
363: dup
364: invokespecial #84
367: ldc           #85
369: invokevirtual #86
372: aload_3
373: invokevirtual #86
376: ldc_w         #478
379: invokevirtual #86
382: invokevirtual #89
385: aload_3
386: ldc_w         #479
389: invokestatic  #245
392: new           #83
395: dup
396: invokespecial #84
399: ldc           #85
401: invokevirtual #86
404: aload         4
406: invokevirtual #87
409: ldc           #88
411: invokevirtual #86
414: getstatic     #127
417: invokevirtual #87
420: ldc           #85
422: invokevirtual #86
425: invokevirtual #89
428: aload         4
430: getstatic     #127
433: invokevirtual #90
436: invokestatic  #91
439: new           #83
442: dup
443: invokespecial #84
446: ldc           #85
448: invokevirtual #86
451: aload         5
453: invokevirtual #87
456: ldc           #88
458: invokevirtual #86
461: getstatic     #128
464: invokevirtual #87
467: ldc           #85
469: invokevirtual #86
472: invokevirtual #89
475: aload         5
477: getstatic     #128
480: invokevirtual #90
483: invokestatic  #91
486: aload         6
488: invokestatic  #20
491: aload         6
493: invokestatic  #92
496: ldc           #140
498: invokestatic  #23
501: aload         6
503: invokestatic  #93
506: ldc           #140
508: invokestatic  #23
511: new           #83
514: dup
515: invokespecial #84
518: ldc           #85
520: invokevirtual #86
523: aload         8
525: invokevirtual #87
528: ldc           #88
530: invokevirtual #86
533: getstatic     #127
536: invokevirtual #87
539: ldc           #85
541: invokevirtual #86
544: invokevirtual #89
547: aload         8
549: getstatic     #127
552: invokevirtual #90
555: invokestatic  #91
558: new           #83
561: dup
562: invokespecial #84
565: ldc           #85
567: invokevirtual #86
570: aload         9
572: invokevirtual #87
575: ldc           #88
577: invokevirtual #86
580: getstatic     #128
583: invokevirtual #87
586: ldc           #85
588: invokevirtual #86
591: invokevirtual #89
594: aload         9
596: getstatic     #128
599: invokevirtual #90
602: invokestatic  #91
605: aload         10
607: invokestatic  #20
610: aload         10
612: invokestatic  #92
615: ldc           #140
617: invokestatic  #23
620: aload         10
622: invokestatic  #93
625: ldc           #140
627: invokestatic  #23
630: aload         12
632: invokestatic  #20
635: aload         14
637: invokestatic  #20
640: aload         15
642: invokestatic  #171
645: aload         16
647: invokestatic  #20
650: new           #83
653: dup
654: invokespecial #84
657: ldc           #85
659: invokevirtual #86
662: aload         17
664: invokevirtual #87
667: ldc           #88
669: invokevirtual #86
672: getstatic     #477
675: invokevirtual #87
678: ldc           #85
680: invokevirtual #86
683: invokevirtual #89
686: aload         17
688: getstatic     #477
691: invokevirtual #90
694: invokestatic  #91
697: aload         20
699: invokestatic  #20
702: aload         21
704: invokestatic  #20
707: aload         21
709: invokestatic  #92
712: ldc           #74
714: invokestatic  #23
717: aload         21
719: invokestatic  #93
722: ldc           #74
724: invokestatic  #23
727: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test223
Start line: 6248
End line: 6273
Method source code: 
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.addObservedPoint((double) (-1), (double) (byte) 1);
        harmonicFitter1.addObservedPoint((double) 10L, 52.0d);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint23 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double24 = weightedObservedPoint23.getX();
        double double25 = weightedObservedPoint23.getWeight();
        double double26 = weightedObservedPoint23.getWeight();
        double double27 = weightedObservedPoint23.getY();
        double double28 = weightedObservedPoint23.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint23);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 35.0d + "'", double25 == 35.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #480
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload_2
78: ldc2_w        #10
81: dconst_1
82: invokevirtual #43
85: aload_2
86: ldc2_w        #32
89: ldc2_w        #12
92: invokevirtual #43
95: new           #145
98: dup
99: ldc2_w        #14
102: ldc2_w        #12
105: ldc2_w        #12
108: invokespecial #146
111: astore        5
113: aload         5
115: invokevirtual #147
118: dstore        6
120: aload         5
122: invokevirtual #148
125: dstore        8
127: aload         5
129: invokevirtual #148
132: dstore        10
134: aload         5
136: invokevirtual #149
139: dstore        12
141: aload         5
143: invokevirtual #147
146: dstore        14
148: aload_2
149: aload         5
151: invokevirtual #123
154: aload_3
155: invokestatic  #20
158: new           #83
161: dup
162: invokespecial #84
165: ldc           #85
167: invokevirtual #86
170: dload         6
172: invokevirtual #150
175: ldc           #88
177: invokevirtual #86
180: ldc2_w        #12
183: invokevirtual #150
186: ldc           #85
188: invokevirtual #86
191: invokevirtual #89
194: dload         6
196: ldc2_w        #12
199: dcmpl
200: ifne          207
203: iconst_1
204: goto          208
207: iconst_0
208: invokestatic  #91
211: new           #83
214: dup
215: invokespecial #84
218: ldc           #85
220: invokevirtual #86
223: dload         8
225: invokevirtual #150
228: ldc           #88
230: invokevirtual #86
233: ldc2_w        #14
236: invokevirtual #150
239: ldc           #85
241: invokevirtual #86
244: invokevirtual #89
247: dload         8
249: ldc2_w        #14
252: dcmpl
253: ifne          260
256: iconst_1
257: goto          261
260: iconst_0
261: invokestatic  #91
264: new           #83
267: dup
268: invokespecial #84
271: ldc           #85
273: invokevirtual #86
276: dload         10
278: invokevirtual #150
281: ldc           #88
283: invokevirtual #86
286: ldc2_w        #14
289: invokevirtual #150
292: ldc           #85
294: invokevirtual #86
297: invokevirtual #89
300: dload         10
302: ldc2_w        #14
305: dcmpl
306: ifne          313
309: iconst_1
310: goto          314
313: iconst_0
314: invokestatic  #91
317: new           #83
320: dup
321: invokespecial #84
324: ldc           #85
326: invokevirtual #86
329: dload         12
331: invokevirtual #150
334: ldc           #88
336: invokevirtual #86
339: ldc2_w        #12
342: invokevirtual #150
345: ldc           #85
347: invokevirtual #86
350: invokevirtual #89
353: dload         12
355: ldc2_w        #12
358: dcmpl
359: ifne          366
362: iconst_1
363: goto          367
366: iconst_0
367: invokestatic  #91
370: new           #83
373: dup
374: invokespecial #84
377: ldc           #85
379: invokevirtual #86
382: dload         14
384: invokevirtual #150
387: ldc           #88
389: invokevirtual #86
392: ldc2_w        #12
395: invokevirtual #150
398: ldc           #85
400: invokevirtual #86
403: invokevirtual #89
406: dload         14
408: ldc2_w        #12
411: dcmpl
412: ifne          419
415: iconst_1
416: goto          420
419: iconst_0
420: invokestatic  #91
423: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test224
Start line: 6276
End line: 6298
Method source code: 
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint17 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double18 = weightedObservedPoint17.getX();
        double double19 = weightedObservedPoint17.getY();
        double double20 = weightedObservedPoint17.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint17);
        double double22 = weightedObservedPoint17.getY();
        double double23 = weightedObservedPoint17.getX();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #481
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: new           #145
76: dup
77: ldc2_w        #14
80: ldc2_w        #12
83: ldc2_w        #12
86: invokespecial #146
89: astore        4
91: aload         4
93: invokevirtual #147
96: dstore        5
98: aload         4
100: invokevirtual #149
103: dstore        7
105: aload         4
107: invokevirtual #149
110: dstore        9
112: aload_2
113: aload         4
115: invokevirtual #123
118: aload         4
120: invokevirtual #149
123: dstore        11
125: aload         4
127: invokevirtual #147
130: dstore        13
132: aload_3
133: invokestatic  #20
136: new           #83
139: dup
140: invokespecial #84
143: ldc           #85
145: invokevirtual #86
148: dload         5
150: invokevirtual #150
153: ldc           #88
155: invokevirtual #86
158: ldc2_w        #12
161: invokevirtual #150
164: ldc           #85
166: invokevirtual #86
169: invokevirtual #89
172: dload         5
174: ldc2_w        #12
177: dcmpl
178: ifne          185
181: iconst_1
182: goto          186
185: iconst_0
186: invokestatic  #91
189: new           #83
192: dup
193: invokespecial #84
196: ldc           #85
198: invokevirtual #86
201: dload         7
203: invokevirtual #150
206: ldc           #88
208: invokevirtual #86
211: ldc2_w        #12
214: invokevirtual #150
217: ldc           #85
219: invokevirtual #86
222: invokevirtual #89
225: dload         7
227: ldc2_w        #12
230: dcmpl
231: ifne          238
234: iconst_1
235: goto          239
238: iconst_0
239: invokestatic  #91
242: new           #83
245: dup
246: invokespecial #84
249: ldc           #85
251: invokevirtual #86
254: dload         9
256: invokevirtual #150
259: ldc           #88
261: invokevirtual #86
264: ldc2_w        #12
267: invokevirtual #150
270: ldc           #85
272: invokevirtual #86
275: invokevirtual #89
278: dload         9
280: ldc2_w        #12
283: dcmpl
284: ifne          291
287: iconst_1
288: goto          292
291: iconst_0
292: invokestatic  #91
295: new           #83
298: dup
299: invokespecial #84
302: ldc           #85
304: invokevirtual #86
307: dload         11
309: invokevirtual #150
312: ldc           #88
314: invokevirtual #86
317: ldc2_w        #12
320: invokevirtual #150
323: ldc           #85
325: invokevirtual #86
328: invokevirtual #89
331: dload         11
333: ldc2_w        #12
336: dcmpl
337: ifne          344
340: iconst_1
341: goto          345
344: iconst_0
345: invokestatic  #91
348: new           #83
351: dup
352: invokespecial #84
355: ldc           #85
357: invokevirtual #86
360: dload         13
362: invokevirtual #150
365: ldc           #88
367: invokevirtual #86
370: ldc2_w        #12
373: invokevirtual #150
376: ldc           #85
378: invokevirtual #86
381: invokevirtual #89
384: dload         13
386: ldc2_w        #12
389: dcmpl
390: ifne          397
393: iconst_1
394: goto          398
397: iconst_0
398: invokestatic  #91
401: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test225
Start line: 6301
End line: 6314
Method source code: 
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) 0, (double) (byte) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint13 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint(0.0d, (double) 1.0f, 35.0d);
        harmonicFitter1.addObservedPoint(weightedObservedPoint13);
        double double15 = weightedObservedPoint13.getY();
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #482
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: invokevirtual #59
52: aload_2
53: dconst_0
54: ldc2_w        #32
57: invokevirtual #43
60: new           #145
63: dup
64: dconst_0
65: dconst_1
66: ldc2_w        #14
69: invokespecial #146
72: astore_3
73: aload_2
74: aload_3
75: invokevirtual #123
78: aload_3
79: invokevirtual #149
82: dstore        4
84: new           #83
87: dup
88: invokespecial #84
91: ldc           #85
93: invokevirtual #86
96: dload         4
98: invokevirtual #150
101: ldc           #88
103: invokevirtual #86
106: ldc2_w        #14
109: invokevirtual #150
112: ldc           #85
114: invokevirtual #86
117: invokevirtual #89
120: dload         4
122: ldc2_w        #14
125: dcmpl
126: ifne          133
129: iconst_1
130: goto          134
133: iconst_0
134: invokestatic  #91
137: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test226
Start line: 6317
End line: 6366
Method source code: 
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_REGRESSORS;
        java.lang.String str1 = localizedFormats0.getSourceString();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats3 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray5 = new java.lang.Object[] { localizedFormats3, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats2, objArray5);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray10 = new java.lang.Object[] { localizedFormats8, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats7, objArray10);
        mathIllegalArgumentException6.addSuppressed((java.lang.Throwable) mathIllegalArgumentException11);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext13 = mathIllegalArgumentException6.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext14 = mathIllegalArgumentException6.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION;
        org.apache.commons.math3.exception.util.Localizable localizable16 = null;
        java.lang.Number number18 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException20 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number18, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer22 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter23 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer22);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray24 = harmonicFitter23.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray25 = harmonicFitter23.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray26 = harmonicFitter23.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException27 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException20, (org.apache.commons.math3.exception.util.Localizable) localizedFormats21, (java.lang.Object[]) weightedObservedPointArray26);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException28 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable16, (java.lang.Object[]) weightedObservedPointArray26);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException29 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException6, (org.apache.commons.math3.exception.util.Localizable) localizedFormats15, (java.lang.Object[]) weightedObservedPointArray26);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException30 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray26);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_REGRESSORS + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_REGRESSORS));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Regression model must include at least one regressor" + "'", str1, "Regression model must include at least one regressor");
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats3 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats3.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext13);
        org.junit.Assert.assertNotNull(exceptionContext14);
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION));
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray24);
        org.junit.Assert.assertNotNull(weightedObservedPointArray25);
        org.junit.Assert.assertNotNull(weightedObservedPointArray26);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #483
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #484
28: astore_1
29: aload_1
30: invokevirtual #301
33: astore_2
34: getstatic     #127
37: astore_3
38: getstatic     #128
41: astore        4
43: iconst_2
44: anewarray     #5
47: dup
48: iconst_0
49: aload         4
51: aastore
52: dup
53: iconst_1
54: lconst_1
55: invokestatic  #129
58: aastore
59: astore        5
61: new           #130
64: dup
65: aload_3
66: aload         5
68: invokespecial #131
71: astore        6
73: getstatic     #127
76: astore        7
78: getstatic     #128
81: astore        8
83: iconst_2
84: anewarray     #5
87: dup
88: iconst_0
89: aload         8
91: aastore
92: dup
93: iconst_1
94: lconst_1
95: invokestatic  #129
98: aastore
99: astore        9
101: new           #130
104: dup
105: aload         7
107: aload         9
109: invokespecial #131
112: astore        10
114: aload         6
116: aload         10
118: invokevirtual #132
121: aload         6
123: invokevirtual #165
126: astore        11
128: aload         6
130: invokevirtual #165
133: astore        12
135: getstatic     #251
138: astore        13
140: aconst_null
141: astore        14
143: aconst_null
144: astore        15
146: new           #28
149: dup
150: ldc2_w        #252
153: invokestatic  #129
156: aload         15
158: iconst_1
159: invokespecial #160
162: astore        16
164: getstatic     #254
167: astore        17
169: aconst_null
170: astore        18
172: new           #8
175: dup
176: aload         18
178: invokespecial #9
181: astore        19
183: aload         19
185: invokevirtual #25
188: astore        20
190: aload         19
192: invokevirtual #25
195: astore        21
197: aload         19
199: invokevirtual #25
202: astore        22
204: new           #136
207: dup
208: aload         16
210: aload         17
212: aload         22
214: checkcast     #79
217: invokespecial #137
220: astore        23
222: new           #130
225: dup
226: aload         14
228: aload         22
230: checkcast     #79
233: invokespecial #131
236: astore        24
238: new           #136
241: dup
242: aload         6
244: aload         13
246: aload         22
248: checkcast     #79
251: invokespecial #137
254: astore        25
256: new           #136
259: dup
260: aload_1
261: aload         22
263: checkcast     #79
266: invokespecial #138
269: astore        26
271: new           #83
274: dup
275: invokespecial #84
278: ldc           #85
280: invokevirtual #86
283: aload_1
284: invokevirtual #87
287: ldc           #88
289: invokevirtual #86
292: getstatic     #484
295: invokevirtual #87
298: ldc           #85
300: invokevirtual #86
303: invokevirtual #89
306: aload_1
307: getstatic     #484
310: invokevirtual #90
313: invokestatic  #91
316: new           #83
319: dup
320: invokespecial #84
323: ldc           #85
325: invokevirtual #86
328: aload_2
329: invokevirtual #86
332: ldc_w         #485
335: invokevirtual #86
338: invokevirtual #89
341: aload_2
342: ldc_w         #486
345: invokestatic  #245
348: new           #83
351: dup
352: invokespecial #84
355: ldc           #85
357: invokevirtual #86
360: aload_3
361: invokevirtual #87
364: ldc           #88
366: invokevirtual #86
369: getstatic     #127
372: invokevirtual #87
375: ldc           #85
377: invokevirtual #86
380: invokevirtual #89
383: aload_3
384: getstatic     #127
387: invokevirtual #90
390: invokestatic  #91
393: new           #83
396: dup
397: invokespecial #84
400: ldc           #85
402: invokevirtual #86
405: aload         4
407: invokevirtual #87
410: ldc           #88
412: invokevirtual #86
415: getstatic     #128
418: invokevirtual #87
421: ldc           #85
423: invokevirtual #86
426: invokevirtual #89
429: aload         4
431: getstatic     #128
434: invokevirtual #90
437: invokestatic  #91
440: aload         5
442: invokestatic  #20
445: aload         5
447: invokestatic  #92
450: ldc           #140
452: invokestatic  #23
455: aload         5
457: invokestatic  #93
460: ldc           #140
462: invokestatic  #23
465: new           #83
468: dup
469: invokespecial #84
472: ldc           #85
474: invokevirtual #86
477: aload         7
479: invokevirtual #87
482: ldc           #88
484: invokevirtual #86
487: getstatic     #127
490: invokevirtual #87
493: ldc           #85
495: invokevirtual #86
498: invokevirtual #89
501: aload         7
503: getstatic     #127
506: invokevirtual #90
509: invokestatic  #91
512: new           #83
515: dup
516: invokespecial #84
519: ldc           #85
521: invokevirtual #86
524: aload         8
526: invokevirtual #87
529: ldc           #88
531: invokevirtual #86
534: getstatic     #128
537: invokevirtual #87
540: ldc           #85
542: invokevirtual #86
545: invokevirtual #89
548: aload         8
550: getstatic     #128
553: invokevirtual #90
556: invokestatic  #91
559: aload         9
561: invokestatic  #20
564: aload         9
566: invokestatic  #92
569: ldc           #140
571: invokestatic  #23
574: aload         9
576: invokestatic  #93
579: ldc           #140
581: invokestatic  #23
584: aload         11
586: invokestatic  #20
589: aload         12
591: invokestatic  #20
594: new           #83
597: dup
598: invokespecial #84
601: ldc           #85
603: invokevirtual #86
606: aload         13
608: invokevirtual #87
611: ldc           #88
613: invokevirtual #86
616: getstatic     #251
619: invokevirtual #87
622: ldc           #85
624: invokevirtual #86
627: invokevirtual #89
630: aload         13
632: getstatic     #251
635: invokevirtual #90
638: invokestatic  #91
641: new           #83
644: dup
645: invokespecial #84
648: ldc           #85
650: invokevirtual #86
653: aload         17
655: invokevirtual #87
658: ldc           #88
660: invokevirtual #86
663: getstatic     #254
666: invokevirtual #87
669: ldc           #85
671: invokevirtual #86
674: invokevirtual #89
677: aload         17
679: getstatic     #254
682: invokevirtual #90
685: invokestatic  #91
688: aload         20
690: invokestatic  #20
693: aload         21
695: invokestatic  #20
698: aload         22
700: invokestatic  #20
703: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test227
Start line: 6369
End line: 6393
Method source code: 
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter1.addObservedPoint((double) (short) 0, 0.0d, (double) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray18 = harmonicFitter1.getObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric20 = null;
        double[] doubleArray27 = new double[] { 0.0d, (short) -1, 0.0d, 0.0d, 10.0d, 0 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray28 = harmonicFitter1.fit((int) (short) -1, parametric20, doubleArray27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray18);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, -1.0, 0.0, 0.0, 10.0, 0.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #487
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: aload_2
74: dconst_0
75: dconst_0
76: ldc2_w        #32
79: invokevirtual #54
82: aload_2
83: invokevirtual #25
86: astore        4
88: aconst_null
89: astore        5
91: bipush        6
93: newarray       double
95: dup
96: iconst_0
97: dconst_0
98: dastore
99: dup
100: iconst_1
101: ldc2_w        #10
104: dastore
105: dup
106: iconst_2
107: dconst_0
108: dastore
109: dup
110: iconst_3
111: dconst_0
112: dastore
113: dup
114: iconst_4
115: ldc2_w        #32
118: dastore
119: dup
120: iconst_5
121: dconst_0
122: dastore
123: astore        6
125: aload_2
126: iconst_m1
127: aload         5
129: aload         6
131: invokevirtual #40
134: astore        7
136: ldc           #17
138: invokestatic  #18
141: goto          146
144: astore        7
146: aload_3
147: invokestatic  #20
150: aload         4
152: invokestatic  #20
155: aload         6
157: invokestatic  #20
160: aload         6
162: invokestatic  #21
165: ldc_w         #488
168: invokestatic  #23
171: return
Exception table:
from    to  target type
125   141   144   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test228
Start line: 6396
End line: 6426
Method source code: 
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint13 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double14 = weightedObservedPoint13.getWeight();
        double double15 = weightedObservedPoint13.getX();
        double double16 = weightedObservedPoint13.getWeight();
        double double17 = weightedObservedPoint13.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint13);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric20 = null;
        double[] doubleArray25 = new double[] { 35.0d, (short) 0, 1.0d, (short) 1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = harmonicFitter1.fit((int) (short) 0, parametric20, doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[35.0, 0.0, 1.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #489
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: new           #145
65: dup
66: ldc2_w        #14
69: ldc2_w        #12
72: ldc2_w        #12
75: invokespecial #146
78: astore        4
80: aload         4
82: invokevirtual #148
85: dstore        5
87: aload         4
89: invokevirtual #147
92: dstore        7
94: aload         4
96: invokevirtual #148
99: dstore        9
101: aload         4
103: invokevirtual #148
106: dstore        11
108: aload_2
109: aload         4
111: invokevirtual #123
114: aconst_null
115: astore        13
117: iconst_4
118: newarray       double
120: dup
121: iconst_0
122: ldc2_w        #14
125: dastore
126: dup
127: iconst_1
128: dconst_0
129: dastore
130: dup
131: iconst_2
132: dconst_1
133: dastore
134: dup
135: iconst_3
136: dconst_1
137: dastore
138: astore        14
140: aload_2
141: iconst_0
142: aload         13
144: aload         14
146: invokevirtual #40
149: astore        15
151: ldc           #17
153: invokestatic  #18
156: goto          161
159: astore        15
161: aload_3
162: invokestatic  #20
165: new           #83
168: dup
169: invokespecial #84
172: ldc           #85
174: invokevirtual #86
177: dload         5
179: invokevirtual #150
182: ldc           #88
184: invokevirtual #86
187: ldc2_w        #14
190: invokevirtual #150
193: ldc           #85
195: invokevirtual #86
198: invokevirtual #89
201: dload         5
203: ldc2_w        #14
206: dcmpl
207: ifne          214
210: iconst_1
211: goto          215
214: iconst_0
215: invokestatic  #91
218: new           #83
221: dup
222: invokespecial #84
225: ldc           #85
227: invokevirtual #86
230: dload         7
232: invokevirtual #150
235: ldc           #88
237: invokevirtual #86
240: ldc2_w        #12
243: invokevirtual #150
246: ldc           #85
248: invokevirtual #86
251: invokevirtual #89
254: dload         7
256: ldc2_w        #12
259: dcmpl
260: ifne          267
263: iconst_1
264: goto          268
267: iconst_0
268: invokestatic  #91
271: new           #83
274: dup
275: invokespecial #84
278: ldc           #85
280: invokevirtual #86
283: dload         9
285: invokevirtual #150
288: ldc           #88
290: invokevirtual #86
293: ldc2_w        #14
296: invokevirtual #150
299: ldc           #85
301: invokevirtual #86
304: invokevirtual #89
307: dload         9
309: ldc2_w        #14
312: dcmpl
313: ifne          320
316: iconst_1
317: goto          321
320: iconst_0
321: invokestatic  #91
324: new           #83
327: dup
328: invokespecial #84
331: ldc           #85
333: invokevirtual #86
336: dload         11
338: invokevirtual #150
341: ldc           #88
343: invokevirtual #86
346: ldc2_w        #14
349: invokevirtual #150
352: ldc           #85
354: invokevirtual #86
357: invokevirtual #89
360: dload         11
362: ldc2_w        #14
365: dcmpl
366: ifne          373
369: iconst_1
370: goto          374
373: iconst_0
374: invokestatic  #91
377: aload         14
379: invokestatic  #20
382: aload         14
384: invokestatic  #21
387: ldc_w         #490
390: invokestatic  #23
393: return
Exception table:
from    to  target type
140   156   159   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test229
Start line: 6429
End line: 6526
Method source code: 
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        java.lang.Number number1 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number1, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException6 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats4, objArray5);
        boolean boolean7 = numberIsTooSmallException3.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext8 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats10 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray12 = new java.lang.Object[] { localizedFormats10, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException13 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats9, objArray12);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray17 = new java.lang.Object[] { localizedFormats15, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException18 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats14, objArray17);
        mathIllegalArgumentException13.addSuppressed((java.lang.Throwable) mathIllegalArgumentException18);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext20 = mathIllegalArgumentException13.getContext();
        java.lang.Object obj22 = exceptionContext20.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer24 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter25 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer24);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray26 = harmonicFitter25.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter25.getObservations();
        exceptionContext20.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, (java.lang.Object[]) weightedObservedPointArray27);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer30 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter31 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer30);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray32 = harmonicFitter31.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException33 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats29, (java.lang.Object[]) weightedObservedPointArray32);
        exceptionContext8.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, (java.lang.Object[]) weightedObservedPointArray32);
        org.apache.commons.math3.exception.util.Localizable localizable35 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats36 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats37 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray39 = new java.lang.Object[] { localizedFormats37, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException40 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats36, objArray39);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats41 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats42 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray44 = new java.lang.Object[] { localizedFormats42, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException45 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats41, objArray44);
        mathIllegalArgumentException40.addSuppressed((java.lang.Throwable) mathIllegalArgumentException45);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext47 = mathIllegalArgumentException40.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext48 = mathIllegalArgumentException40.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext49 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException40);
        org.apache.commons.math3.exception.util.Localizable localizable50 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats51 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer52 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter53 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer52);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray54 = harmonicFitter53.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException55 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats51, (java.lang.Object[]) weightedObservedPointArray54);
        exceptionContext49.addMessage(localizable50, (java.lang.Object[]) weightedObservedPointArray54);
        exceptionContext8.addMessage(localizable35, (java.lang.Object[]) weightedObservedPointArray54);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser58 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray54);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats10 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats10.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray26);
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray32);
        org.junit.Assert.assertTrue("'" + localizedFormats36 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats36.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats37 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats37.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats41 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats41.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats42 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats42.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext47);
        org.junit.Assert.assertNotNull(exceptionContext48);
        org.junit.Assert.assertTrue("'" + localizedFormats51 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats51.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray54);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #491
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #28
30: dup
31: bipush        100
33: invokestatic  #159
36: aload_1
37: iconst_0
38: invokespecial #160
41: astore_2
42: getstatic     #161
45: astore_3
46: iconst_0
47: anewarray     #5
50: astore        4
52: new           #136
55: dup
56: aload_2
57: aload_3
58: aload         4
60: invokespecial #137
63: astore        5
65: aload_2
66: invokevirtual #162
69: istore        6
71: new           #163
74: dup
75: aload_2
76: invokespecial #164
79: astore        7
81: getstatic     #127
84: astore        8
86: getstatic     #128
89: astore        9
91: iconst_2
92: anewarray     #5
95: dup
96: iconst_0
97: aload         9
99: aastore
100: dup
101: iconst_1
102: lconst_1
103: invokestatic  #129
106: aastore
107: astore        10
109: new           #130
112: dup
113: aload         8
115: aload         10
117: invokespecial #131
120: astore        11
122: getstatic     #127
125: astore        12
127: getstatic     #128
130: astore        13
132: iconst_2
133: anewarray     #5
136: dup
137: iconst_0
138: aload         13
140: aastore
141: dup
142: iconst_1
143: lconst_1
144: invokestatic  #129
147: aastore
148: astore        14
150: new           #130
153: dup
154: aload         12
156: aload         14
158: invokespecial #131
161: astore        15
163: aload         11
165: aload         15
167: invokevirtual #132
170: aload         11
172: invokevirtual #165
175: astore        16
177: aload         16
179: ldc           #166
181: invokevirtual #167
184: astore        17
186: getstatic     #168
189: astore        18
191: aconst_null
192: astore        19
194: new           #8
197: dup
198: aload         19
200: invokespecial #9
203: astore        20
205: aload         20
207: invokevirtual #25
210: astore        21
212: aload         20
214: invokevirtual #25
217: astore        22
219: aload         16
221: aload         18
223: aload         22
225: checkcast     #79
228: invokevirtual #169
231: getstatic     #156
234: astore        23
236: aconst_null
237: astore        24
239: new           #8
242: dup
243: aload         24
245: invokespecial #9
248: astore        25
250: aload         25
252: invokevirtual #25
255: astore        26
257: new           #81
260: dup
261: aload         23
263: aload         26
265: checkcast     #79
268: invokespecial #82
271: astore        27
273: aload         7
275: aload         18
277: aload         26
279: checkcast     #79
282: invokevirtual #169
285: aconst_null
286: astore        28
288: getstatic     #127
291: astore        29
293: getstatic     #128
296: astore        30
298: iconst_2
299: anewarray     #5
302: dup
303: iconst_0
304: aload         30
306: aastore
307: dup
308: iconst_1
309: lconst_1
310: invokestatic  #129
313: aastore
314: astore        31
316: new           #130
319: dup
320: aload         29
322: aload         31
324: invokespecial #131
327: astore        32
329: getstatic     #127
332: astore        33
334: getstatic     #128
337: astore        34
339: iconst_2
340: anewarray     #5
343: dup
344: iconst_0
345: aload         34
347: aastore
348: dup
349: iconst_1
350: lconst_1
351: invokestatic  #129
354: aastore
355: astore        35
357: new           #130
360: dup
361: aload         33
363: aload         35
365: invokespecial #131
368: astore        36
370: aload         32
372: aload         36
374: invokevirtual #132
377: aload         32
379: invokevirtual #165
382: astore        37
384: aload         32
386: invokevirtual #165
389: astore        38
391: new           #163
394: dup
395: aload         32
397: invokespecial #164
400: astore        39
402: aconst_null
403: astore        40
405: getstatic     #156
408: astore        41
410: aconst_null
411: astore        42
413: new           #8
416: dup
417: aload         42
419: invokespecial #9
422: astore        43
424: aload         43
426: invokevirtual #25
429: astore        44
431: new           #81
434: dup
435: aload         41
437: aload         44
439: checkcast     #79
442: invokespecial #82
445: astore        45
447: aload         39
449: aload         40
451: aload         44
453: checkcast     #79
456: invokevirtual #169
459: aload         7
461: aload         28
463: aload         44
465: checkcast     #79
468: invokevirtual #169
471: new           #69
474: dup
475: aload         44
477: invokespecial #70
480: astore        46
482: ldc           #27
484: invokestatic  #18
487: goto          492
490: astore        46
492: new           #83
495: dup
496: invokespecial #84
499: ldc           #85
501: invokevirtual #86
504: aload_3
505: invokevirtual #87
508: ldc           #88
510: invokevirtual #86
513: getstatic     #161
516: invokevirtual #87
519: ldc           #85
521: invokevirtual #86
524: invokevirtual #89
527: aload_3
528: getstatic     #161
531: invokevirtual #90
534: invokestatic  #91
537: aload         4
539: invokestatic  #20
542: aload         4
544: invokestatic  #92
547: ldc           #74
549: invokestatic  #23
552: aload         4
554: invokestatic  #93
557: ldc           #74
559: invokestatic  #23
562: new           #83
565: dup
566: invokespecial #84
569: ldc           #85
571: invokevirtual #86
574: iload         6
576: invokevirtual #170
579: ldc           #88
581: invokevirtual #86
584: iconst_0
585: invokevirtual #170
588: ldc           #85
590: invokevirtual #86
593: invokevirtual #89
596: iload         6
598: ifne          605
601: iconst_1
602: goto          606
605: iconst_0
606: invokestatic  #91
609: new           #83
612: dup
613: invokespecial #84
616: ldc           #85
618: invokevirtual #86
621: aload         8
623: invokevirtual #87
626: ldc           #88
628: invokevirtual #86
631: getstatic     #127
634: invokevirtual #87
637: ldc           #85
639: invokevirtual #86
642: invokevirtual #89
645: aload         8
647: getstatic     #127
650: invokevirtual #90
653: invokestatic  #91
656: new           #83
659: dup
660: invokespecial #84
663: ldc           #85
665: invokevirtual #86
668: aload         9
670: invokevirtual #87
673: ldc           #88
675: invokevirtual #86
678: getstatic     #128
681: invokevirtual #87
684: ldc           #85
686: invokevirtual #86
689: invokevirtual #89
692: aload         9
694: getstatic     #128
697: invokevirtual #90
700: invokestatic  #91
703: aload         10
705: invokestatic  #20
708: aload         10
710: invokestatic  #92
713: ldc           #140
715: invokestatic  #23
718: aload         10
720: invokestatic  #93
723: ldc           #140
725: invokestatic  #23
728: new           #83
731: dup
732: invokespecial #84
735: ldc           #85
737: invokevirtual #86
740: aload         12
742: invokevirtual #87
745: ldc           #88
747: invokevirtual #86
750: getstatic     #127
753: invokevirtual #87
756: ldc           #85
758: invokevirtual #86
761: invokevirtual #89
764: aload         12
766: getstatic     #127
769: invokevirtual #90
772: invokestatic  #91
775: new           #83
778: dup
779: invokespecial #84
782: ldc           #85
784: invokevirtual #86
787: aload         13
789: invokevirtual #87
792: ldc           #88
794: invokevirtual #86
797: getstatic     #128
800: invokevirtual #87
803: ldc           #85
805: invokevirtual #86
808: invokevirtual #89
811: aload         13
813: getstatic     #128
816: invokevirtual #90
819: invokestatic  #91
822: aload         14
824: invokestatic  #20
827: aload         14
829: invokestatic  #92
832: ldc           #140
834: invokestatic  #23
837: aload         14
839: invokestatic  #93
842: ldc           #140
844: invokestatic  #23
847: aload         16
849: invokestatic  #20
852: aload         17
854: invokestatic  #171
857: new           #83
860: dup
861: invokespecial #84
864: ldc           #85
866: invokevirtual #86
869: aload         18
871: invokevirtual #87
874: ldc           #88
876: invokevirtual #86
879: getstatic     #168
882: invokevirtual #87
885: ldc           #85
887: invokevirtual #86
890: invokevirtual #89
893: aload         18
895: getstatic     #168
898: invokevirtual #90
901: invokestatic  #91
904: aload         21
906: invokestatic  #20
909: aload         22
911: invokestatic  #20
914: new           #83
917: dup
918: invokespecial #84
921: ldc           #85
923: invokevirtual #86
926: aload         23
928: invokevirtual #87
931: ldc           #88
933: invokevirtual #86
936: getstatic     #156
939: invokevirtual #87
942: ldc           #85
944: invokevirtual #86
947: invokevirtual #89
950: aload         23
952: getstatic     #156
955: invokevirtual #90
958: invokestatic  #91
961: aload         26
963: invokestatic  #20
966: new           #83
969: dup
970: invokespecial #84
973: ldc           #85
975: invokevirtual #86
978: aload         29
980: invokevirtual #87
983: ldc           #88
985: invokevirtual #86
988: getstatic     #127
991: invokevirtual #87
994: ldc           #85
996: invokevirtual #86
999: invokevirtual #89
1002: aload         29
1004: getstatic     #127
1007: invokevirtual #90
1010: invokestatic  #91
1013: new           #83
1016: dup
1017: invokespecial #84
1020: ldc           #85
1022: invokevirtual #86
1025: aload         30
1027: invokevirtual #87
1030: ldc           #88
1032: invokevirtual #86
1035: getstatic     #128
1038: invokevirtual #87
1041: ldc           #85
1043: invokevirtual #86
1046: invokevirtual #89
1049: aload         30
1051: getstatic     #128
1054: invokevirtual #90
1057: invokestatic  #91
1060: aload         31
1062: invokestatic  #20
1065: aload         31
1067: invokestatic  #92
1070: ldc           #140
1072: invokestatic  #23
1075: aload         31
1077: invokestatic  #93
1080: ldc           #140
1082: invokestatic  #23
1085: new           #83
1088: dup
1089: invokespecial #84
1092: ldc           #85
1094: invokevirtual #86
1097: aload         33
1099: invokevirtual #87
1102: ldc           #88
1104: invokevirtual #86
1107: getstatic     #127
1110: invokevirtual #87
1113: ldc           #85
1115: invokevirtual #86
1118: invokevirtual #89
1121: aload         33
1123: getstatic     #127
1126: invokevirtual #90
1129: invokestatic  #91
1132: new           #83
1135: dup
1136: invokespecial #84
1139: ldc           #85
1141: invokevirtual #86
1144: aload         34
1146: invokevirtual #87
1149: ldc           #88
1151: invokevirtual #86
1154: getstatic     #128
1157: invokevirtual #87
1160: ldc           #85
1162: invokevirtual #86
1165: invokevirtual #89
1168: aload         34
1170: getstatic     #128
1173: invokevirtual #90
1176: invokestatic  #91
1179: aload         35
1181: invokestatic  #20
1184: aload         35
1186: invokestatic  #92
1189: ldc           #140
1191: invokestatic  #23
1194: aload         35
1196: invokestatic  #93
1199: ldc           #140
1201: invokestatic  #23
1204: aload         37
1206: invokestatic  #20
1209: aload         38
1211: invokestatic  #20
1214: new           #83
1217: dup
1218: invokespecial #84
1221: ldc           #85
1223: invokevirtual #86
1226: aload         41
1228: invokevirtual #87
1231: ldc           #88
1233: invokevirtual #86
1236: getstatic     #156
1239: invokevirtual #87
1242: ldc           #85
1244: invokevirtual #86
1247: invokevirtual #89
1250: aload         41
1252: getstatic     #156
1255: invokevirtual #90
1258: invokestatic  #91
1261: aload         44
1263: invokestatic  #20
1266: return
Exception table:
from    to  target type
471   487   490   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test230
Start line: 6529
End line: 6539
Method source code: 
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        harmonicFitter1.addObservedPoint((double) (short) 0, (double) (short) 0);
        harmonicFitter1.addObservedPoint(100.0d, (double) 100, 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #492
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: dconst_0
54: ldc2_w        #12
57: ldc2_w        #10
60: invokevirtual #54
63: aload_2
64: dconst_0
65: dconst_0
66: invokevirtual #43
69: aload_2
70: ldc2_w        #34
73: ldc2_w        #34
76: dconst_0
77: invokevirtual #54
80: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test231
Start line: 6542
End line: 6567
Method source code: 
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        java.lang.Object[] objArray11 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray10);
        org.apache.commons.math3.exception.ZeroException zeroException12 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray10);
        java.util.Locale locale13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = localizedFormats0.getLocalizedString(locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #493
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #78
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: dconst_1
42: ldc2_w        #32
45: invokevirtual #43
48: aload_3
49: dconst_0
50: ldc2_w        #34
53: invokevirtual #43
56: aload_3
57: invokevirtual #59
60: aload_3
61: invokevirtual #25
64: astore        4
66: aload         4
68: checkcast     #79
71: invokestatic  #80
74: astore        5
76: new           #81
79: dup
80: aload_1
81: aload         4
83: checkcast     #79
86: invokespecial #82
89: astore        6
91: aconst_null
92: astore        7
94: aload_1
95: aload         7
97: invokevirtual #321
100: astore        8
102: ldc           #17
104: invokestatic  #18
107: goto          112
110: astore        8
112: new           #83
115: dup
116: invokespecial #84
119: ldc           #85
121: invokevirtual #86
124: aload_1
125: invokevirtual #87
128: ldc           #88
130: invokevirtual #86
133: getstatic     #78
136: invokevirtual #87
139: ldc           #85
141: invokevirtual #86
144: invokevirtual #89
147: aload_1
148: getstatic     #78
151: invokevirtual #90
154: invokestatic  #91
157: aload         4
159: invokestatic  #20
162: aload         5
164: invokestatic  #20
167: aload         5
169: invokestatic  #92
172: ldc           #74
174: invokestatic  #23
177: aload         5
179: invokestatic  #93
182: ldc           #74
184: invokestatic  #23
187: return
Exception table:
from    to  target type
94   107   110   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test232
Start line: 6570
End line: 6580
Method source code: 
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 100, (double) 0L, (double) 100);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #494
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: ldc2_w        #34
61: dconst_0
62: ldc2_w        #34
65: invokevirtual #54
68: aload_3
69: invokestatic  #20
72: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test233
Start line: 6583
End line: 6594
Method source code: 
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray13 = harmonicFitter1.getObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray13);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #495
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: ldc2_w        #34
56: ldc2_w        #34
59: ldc2_w        #32
62: invokevirtual #54
65: aload_2
66: invokevirtual #59
69: aload_2
70: invokevirtual #25
73: astore_3
74: aload_3
75: invokestatic  #20
78: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test234
Start line: 6597
End line: 6619
Method source code: 
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        double[] doubleArray17 = new double[] { '#' };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = harmonicFitter1.fit(doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[35.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #496
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: invokevirtual #59
81: iconst_1
82: newarray       double
84: dup
85: iconst_0
86: ldc2_w        #14
89: dastore
90: astore        4
92: aload_2
93: aload         4
95: invokevirtual #16
98: astore        5
100: ldc           #17
102: invokestatic  #18
105: goto          110
108: astore        5
110: aload_3
111: invokestatic  #20
114: aload         4
116: invokestatic  #20
119: aload         4
121: invokestatic  #21
124: ldc_w         #497
127: invokestatic  #23
130: return
Exception table:
from    to  target type
92   105   108   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test235
Start line: 6622
End line: 6639
Method source code: 
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #498
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: ldc2_w        #34
56: ldc2_w        #34
59: ldc2_w        #32
62: invokevirtual #54
65: aload_2
66: invokevirtual #59
69: aload_2
70: invokevirtual #59
73: aload_2
74: invokevirtual #26
77: astore_3
78: ldc           #27
80: invokestatic  #18
83: goto          87
86: astore_3
87: return
Exception table:
from    to  target type
73    83    86   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test236
Start line: 6642
End line: 6698
Method source code: 
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer5 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter6 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer5);
        harmonicFitter6.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter6.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter6.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray14 = harmonicFitter6.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint18 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double19 = weightedObservedPoint18.getX();
        double double20 = weightedObservedPoint18.getY();
        double double21 = weightedObservedPoint18.getX();
        double double22 = weightedObservedPoint18.getY();
        harmonicFitter6.addObservedPoint(weightedObservedPoint18);
        double double24 = weightedObservedPoint18.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint18);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer26 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter27 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer26);
        harmonicFitter27.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter27.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray34 = harmonicFitter27.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray35 = harmonicFitter27.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray36 = harmonicFitter27.getObservations();
        harmonicFitter27.addObservedPoint((double) (byte) 1, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray40 = harmonicFitter27.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint44 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double45 = weightedObservedPoint44.getWeight();
        double double46 = weightedObservedPoint44.getX();
        double double47 = weightedObservedPoint44.getWeight();
        double double48 = weightedObservedPoint44.getWeight();
        double double49 = weightedObservedPoint44.getX();
        harmonicFitter27.addObservedPoint(weightedObservedPoint44);
        harmonicFitter1.addObservedPoint(weightedObservedPoint44);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertNotNull(weightedObservedPointArray14);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray34);
        org.junit.Assert.assertNotNull(weightedObservedPointArray35);
        org.junit.Assert.assertNotNull(weightedObservedPointArray36);
        org.junit.Assert.assertNotNull(weightedObservedPointArray40);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 52.0d + "'", double46 == 52.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 52.0d + "'", double49 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #499
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: aconst_null
52: astore        5
54: new           #8
57: dup
58: aload         5
60: invokespecial #9
63: astore        6
65: aload         6
67: dconst_1
68: ldc2_w        #32
71: invokevirtual #43
74: aload         6
76: dconst_0
77: ldc2_w        #34
80: invokevirtual #43
83: aload         6
85: invokevirtual #59
88: aload         6
90: invokevirtual #25
93: astore        7
95: new           #145
98: dup
99: ldc2_w        #14
102: ldc2_w        #12
105: ldc2_w        #12
108: invokespecial #146
111: astore        8
113: aload         8
115: invokevirtual #147
118: dstore        9
120: aload         8
122: invokevirtual #149
125: dstore        11
127: aload         8
129: invokevirtual #147
132: dstore        13
134: aload         8
136: invokevirtual #149
139: dstore        15
141: aload         6
143: aload         8
145: invokevirtual #123
148: aload         8
150: invokevirtual #148
153: dstore        17
155: aload_2
156: aload         8
158: invokevirtual #123
161: aconst_null
162: astore        19
164: new           #8
167: dup
168: aload         19
170: invokespecial #9
173: astore        20
175: aload         20
177: dconst_1
178: ldc2_w        #32
181: invokevirtual #43
184: aload         20
186: dconst_0
187: ldc2_w        #34
190: invokevirtual #43
193: aload         20
195: invokevirtual #25
198: astore        21
200: aload         20
202: invokevirtual #25
205: astore        22
207: aload         20
209: invokevirtual #25
212: astore        23
214: aload         20
216: dconst_1
217: ldc2_w        #10
220: invokevirtual #43
223: aload         20
225: invokevirtual #25
228: astore        24
230: new           #145
233: dup
234: ldc2_w        #14
237: ldc2_w        #12
240: ldc2_w        #12
243: invokespecial #146
246: astore        25
248: aload         25
250: invokevirtual #148
253: dstore        26
255: aload         25
257: invokevirtual #147
260: dstore        28
262: aload         25
264: invokevirtual #148
267: dstore        30
269: aload         25
271: invokevirtual #148
274: dstore        32
276: aload         25
278: invokevirtual #147
281: dstore        34
283: aload         20
285: aload         25
287: invokevirtual #123
290: aload_2
291: aload         25
293: invokevirtual #123
296: aload_3
297: invokestatic  #20
300: aload         4
302: invokestatic  #20
305: aload         7
307: invokestatic  #20
310: new           #83
313: dup
314: invokespecial #84
317: ldc           #85
319: invokevirtual #86
322: dload         9
324: invokevirtual #150
327: ldc           #88
329: invokevirtual #86
332: ldc2_w        #12
335: invokevirtual #150
338: ldc           #85
340: invokevirtual #86
343: invokevirtual #89
346: dload         9
348: ldc2_w        #12
351: dcmpl
352: ifne          359
355: iconst_1
356: goto          360
359: iconst_0
360: invokestatic  #91
363: new           #83
366: dup
367: invokespecial #84
370: ldc           #85
372: invokevirtual #86
375: dload         11
377: invokevirtual #150
380: ldc           #88
382: invokevirtual #86
385: ldc2_w        #12
388: invokevirtual #150
391: ldc           #85
393: invokevirtual #86
396: invokevirtual #89
399: dload         11
401: ldc2_w        #12
404: dcmpl
405: ifne          412
408: iconst_1
409: goto          413
412: iconst_0
413: invokestatic  #91
416: new           #83
419: dup
420: invokespecial #84
423: ldc           #85
425: invokevirtual #86
428: dload         13
430: invokevirtual #150
433: ldc           #88
435: invokevirtual #86
438: ldc2_w        #12
441: invokevirtual #150
444: ldc           #85
446: invokevirtual #86
449: invokevirtual #89
452: dload         13
454: ldc2_w        #12
457: dcmpl
458: ifne          465
461: iconst_1
462: goto          466
465: iconst_0
466: invokestatic  #91
469: new           #83
472: dup
473: invokespecial #84
476: ldc           #85
478: invokevirtual #86
481: dload         15
483: invokevirtual #150
486: ldc           #88
488: invokevirtual #86
491: ldc2_w        #12
494: invokevirtual #150
497: ldc           #85
499: invokevirtual #86
502: invokevirtual #89
505: dload         15
507: ldc2_w        #12
510: dcmpl
511: ifne          518
514: iconst_1
515: goto          519
518: iconst_0
519: invokestatic  #91
522: new           #83
525: dup
526: invokespecial #84
529: ldc           #85
531: invokevirtual #86
534: dload         17
536: invokevirtual #150
539: ldc           #88
541: invokevirtual #86
544: ldc2_w        #14
547: invokevirtual #150
550: ldc           #85
552: invokevirtual #86
555: invokevirtual #89
558: dload         17
560: ldc2_w        #14
563: dcmpl
564: ifne          571
567: iconst_1
568: goto          572
571: iconst_0
572: invokestatic  #91
575: aload         21
577: invokestatic  #20
580: aload         22
582: invokestatic  #20
585: aload         23
587: invokestatic  #20
590: aload         24
592: invokestatic  #20
595: new           #83
598: dup
599: invokespecial #84
602: ldc           #85
604: invokevirtual #86
607: dload         26
609: invokevirtual #150
612: ldc           #88
614: invokevirtual #86
617: ldc2_w        #14
620: invokevirtual #150
623: ldc           #85
625: invokevirtual #86
628: invokevirtual #89
631: dload         26
633: ldc2_w        #14
636: dcmpl
637: ifne          644
640: iconst_1
641: goto          645
644: iconst_0
645: invokestatic  #91
648: new           #83
651: dup
652: invokespecial #84
655: ldc           #85
657: invokevirtual #86
660: dload         28
662: invokevirtual #150
665: ldc           #88
667: invokevirtual #86
670: ldc2_w        #12
673: invokevirtual #150
676: ldc           #85
678: invokevirtual #86
681: invokevirtual #89
684: dload         28
686: ldc2_w        #12
689: dcmpl
690: ifne          697
693: iconst_1
694: goto          698
697: iconst_0
698: invokestatic  #91
701: new           #83
704: dup
705: invokespecial #84
708: ldc           #85
710: invokevirtual #86
713: dload         30
715: invokevirtual #150
718: ldc           #88
720: invokevirtual #86
723: ldc2_w        #14
726: invokevirtual #150
729: ldc           #85
731: invokevirtual #86
734: invokevirtual #89
737: dload         30
739: ldc2_w        #14
742: dcmpl
743: ifne          750
746: iconst_1
747: goto          751
750: iconst_0
751: invokestatic  #91
754: new           #83
757: dup
758: invokespecial #84
761: ldc           #85
763: invokevirtual #86
766: dload         32
768: invokevirtual #150
771: ldc           #88
773: invokevirtual #86
776: ldc2_w        #14
779: invokevirtual #150
782: ldc           #85
784: invokevirtual #86
787: invokevirtual #89
790: dload         32
792: ldc2_w        #14
795: dcmpl
796: ifne          803
799: iconst_1
800: goto          804
803: iconst_0
804: invokestatic  #91
807: new           #83
810: dup
811: invokespecial #84
814: ldc           #85
816: invokevirtual #86
819: dload         34
821: invokevirtual #150
824: ldc           #88
826: invokevirtual #86
829: ldc2_w        #12
832: invokevirtual #150
835: ldc           #85
837: invokevirtual #86
840: invokevirtual #89
843: dload         34
845: ldc2_w        #12
848: dcmpl
849: ifne          856
852: iconst_1
853: goto          857
856: iconst_0
857: invokestatic  #91
860: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test237
Start line: 6701
End line: 6719
Method source code: 
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter1.addObservedPoint((double) '4', (double) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #500
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: aload_2
74: ldc2_w        #12
77: ldc2_w        #10
80: invokevirtual #43
83: aload_2
84: invokevirtual #26
87: astore        4
89: ldc           #17
91: invokestatic  #18
94: goto          99
97: astore        4
99: aload_3
100: invokestatic  #20
103: return
Exception table:
from    to  target type
83    94    97   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test238
Start line: 6722
End line: 6734
Method source code: 
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #501
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore        4
62: aload_2
63: invokevirtual #59
66: aload_3
67: invokestatic  #20
70: aload         4
72: invokestatic  #20
75: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test239
Start line: 6737
End line: 6773
Method source code: 
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 1, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray14 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint18 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double19 = weightedObservedPoint18.getWeight();
        double double20 = weightedObservedPoint18.getX();
        double double21 = weightedObservedPoint18.getWeight();
        double double22 = weightedObservedPoint18.getWeight();
        double double23 = weightedObservedPoint18.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint18);
        double[] doubleArray25 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = harmonicFitter1.fit(doubleArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray14);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #502
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: invokevirtual #25
61: astore        4
63: aload_2
64: invokevirtual #25
67: astore        5
69: aload_2
70: dconst_1
71: ldc2_w        #10
74: invokevirtual #43
77: aload_2
78: invokevirtual #25
81: astore        6
83: new           #145
86: dup
87: ldc2_w        #14
90: ldc2_w        #12
93: ldc2_w        #12
96: invokespecial #146
99: astore        7
101: aload         7
103: invokevirtual #148
106: dstore        8
108: aload         7
110: invokevirtual #147
113: dstore        10
115: aload         7
117: invokevirtual #148
120: dstore        12
122: aload         7
124: invokevirtual #148
127: dstore        14
129: aload         7
131: invokevirtual #147
134: dstore        16
136: aload_2
137: aload         7
139: invokevirtual #123
142: aconst_null
143: astore        18
145: aload_2
146: aload         18
148: invokevirtual #16
151: astore        19
153: ldc           #17
155: invokestatic  #18
158: goto          163
161: astore        19
163: aload_3
164: invokestatic  #20
167: aload         4
169: invokestatic  #20
172: aload         5
174: invokestatic  #20
177: aload         6
179: invokestatic  #20
182: new           #83
185: dup
186: invokespecial #84
189: ldc           #85
191: invokevirtual #86
194: dload         8
196: invokevirtual #150
199: ldc           #88
201: invokevirtual #86
204: ldc2_w        #14
207: invokevirtual #150
210: ldc           #85
212: invokevirtual #86
215: invokevirtual #89
218: dload         8
220: ldc2_w        #14
223: dcmpl
224: ifne          231
227: iconst_1
228: goto          232
231: iconst_0
232: invokestatic  #91
235: new           #83
238: dup
239: invokespecial #84
242: ldc           #85
244: invokevirtual #86
247: dload         10
249: invokevirtual #150
252: ldc           #88
254: invokevirtual #86
257: ldc2_w        #12
260: invokevirtual #150
263: ldc           #85
265: invokevirtual #86
268: invokevirtual #89
271: dload         10
273: ldc2_w        #12
276: dcmpl
277: ifne          284
280: iconst_1
281: goto          285
284: iconst_0
285: invokestatic  #91
288: new           #83
291: dup
292: invokespecial #84
295: ldc           #85
297: invokevirtual #86
300: dload         12
302: invokevirtual #150
305: ldc           #88
307: invokevirtual #86
310: ldc2_w        #14
313: invokevirtual #150
316: ldc           #85
318: invokevirtual #86
321: invokevirtual #89
324: dload         12
326: ldc2_w        #14
329: dcmpl
330: ifne          337
333: iconst_1
334: goto          338
337: iconst_0
338: invokestatic  #91
341: new           #83
344: dup
345: invokespecial #84
348: ldc           #85
350: invokevirtual #86
353: dload         14
355: invokevirtual #150
358: ldc           #88
360: invokevirtual #86
363: ldc2_w        #14
366: invokevirtual #150
369: ldc           #85
371: invokevirtual #86
374: invokevirtual #89
377: dload         14
379: ldc2_w        #14
382: dcmpl
383: ifne          390
386: iconst_1
387: goto          391
390: iconst_0
391: invokestatic  #91
394: new           #83
397: dup
398: invokespecial #84
401: ldc           #85
403: invokevirtual #86
406: dload         16
408: invokevirtual #150
411: ldc           #88
413: invokevirtual #86
416: ldc2_w        #12
419: invokevirtual #150
422: ldc           #85
424: invokevirtual #86
427: invokevirtual #89
430: dload         16
432: ldc2_w        #12
435: dcmpl
436: ifne          443
439: iconst_1
440: goto          444
443: iconst_0
444: invokestatic  #91
447: return
Exception table:
from    to  target type
145   158   161   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test240
Start line: 6776
End line: 6793
Method source code: 
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        harmonicFitter1.addObservedPoint((double) 10, (double) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 2 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #503
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: ldc2_w        #34
49: ldc2_w        #10
52: ldc2_w        #10
55: invokevirtual #54
58: aload_2
59: ldc2_w        #32
62: ldc2_w        #34
65: invokevirtual #43
68: aload_2
69: invokevirtual #26
72: astore        4
74: ldc           #186
76: invokestatic  #18
79: goto          84
82: astore        4
84: aload_3
85: invokestatic  #20
88: return
Exception table:
from    to  target type
68    79    82   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test241
Start line: 6796
End line: 6816
Method source code: 
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric10 = null;
        double[] doubleArray17 = new double[] { (short) 0, 97.0d, 100.0d, 100.0f, 10, 1L };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = harmonicFitter1.fit(parametric10, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 97.0, 100.0, 100.0, 10.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #504
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aconst_null
63: astore        4
65: bipush        6
67: newarray       double
69: dup
70: iconst_0
71: dconst_0
72: dastore
73: dup
74: iconst_1
75: ldc2_w        #44
78: dastore
79: dup
80: iconst_2
81: ldc2_w        #34
84: dastore
85: dup
86: iconst_3
87: ldc2_w        #34
90: dastore
91: dup
92: iconst_4
93: ldc2_w        #32
96: dastore
97: dup
98: iconst_5
99: dconst_1
100: dastore
101: astore        5
103: aload_2
104: aload         4
106: aload         5
108: invokevirtual #30
111: astore        6
113: ldc           #17
115: invokestatic  #18
118: goto          123
121: astore        6
123: aload_3
124: invokestatic  #20
127: aload         5
129: invokestatic  #20
132: aload         5
134: invokestatic  #21
137: ldc_w         #505
140: invokestatic  #23
143: return
Exception table:
from    to  target type
103   118   121   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test242
Start line: 6819
End line: 6840
Method source code: 
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer2 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter3 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer2);
        harmonicFitter3.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter3.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter3.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable0, (org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) weightedObservedPointArray10);
        java.util.Locale locale12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = localizedFormats1.getLocalizedString(locale12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #506
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: getstatic     #507
30: astore_2
31: aconst_null
32: astore_3
33: new           #8
36: dup
37: aload_3
38: invokespecial #9
41: astore        4
43: aload         4
45: dconst_1
46: ldc2_w        #32
49: invokevirtual #43
52: aload         4
54: dconst_0
55: ldc2_w        #34
58: invokevirtual #43
61: aload         4
63: invokevirtual #25
66: astore        5
68: new           #136
71: dup
72: aload_1
73: aload_2
74: aload         5
76: checkcast     #79
79: invokespecial #137
82: astore        6
84: aconst_null
85: astore        7
87: aload_2
88: aload         7
90: invokevirtual #321
93: astore        8
95: ldc           #17
97: invokestatic  #18
100: goto          105
103: astore        8
105: new           #83
108: dup
109: invokespecial #84
112: ldc           #85
114: invokevirtual #86
117: aload_2
118: invokevirtual #87
121: ldc           #88
123: invokevirtual #86
126: getstatic     #507
129: invokevirtual #87
132: ldc           #85
134: invokevirtual #86
137: invokevirtual #89
140: aload_2
141: getstatic     #507
144: invokevirtual #90
147: invokestatic  #91
150: aload         5
152: invokestatic  #20
155: return
Exception table:
from    to  target type
87   100   103   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test243
Start line: 6843
End line: 6903
Method source code: 
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN;
        java.lang.Number number2 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number2, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException7 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException4, (org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray6);
        boolean boolean8 = numberIsTooSmallException4.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext9 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException4);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats10 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats11 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray13 = new java.lang.Object[] { localizedFormats11, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException14 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats10, objArray13);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray18 = new java.lang.Object[] { localizedFormats16, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException19 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats15, objArray18);
        mathIllegalArgumentException14.addSuppressed((java.lang.Throwable) mathIllegalArgumentException19);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext21 = mathIllegalArgumentException14.getContext();
        java.lang.Object obj23 = exceptionContext21.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats24 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer25 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter26 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer25);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter26.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray28 = harmonicFitter26.getObservations();
        exceptionContext21.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats24, (java.lang.Object[]) weightedObservedPointArray28);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer31 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter32 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer31);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray33 = harmonicFitter32.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException34 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats30, (java.lang.Object[]) weightedObservedPointArray33);
        exceptionContext9.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats24, (java.lang.Object[]) weightedObservedPointArray33);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException36 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray33);
        java.lang.String str37 = localizedFormats0.getSourceString();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN));
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats10 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats10.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats11 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats11.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + localizedFormats24 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats24.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertNotNull(weightedObservedPointArray28);
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "unable to perform Q.R decomposition on the {0}x{1} jacobian matrix" + "'", str37, "unable to perform Q.R decomposition on the {0}x{1} jacobian matrix");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #508
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #509
28: astore_1
29: aconst_null
30: astore_2
31: new           #28
34: dup
35: bipush        100
37: invokestatic  #159
40: aload_2
41: iconst_0
42: invokespecial #160
45: astore_3
46: getstatic     #161
49: astore        4
51: iconst_0
52: anewarray     #5
55: astore        5
57: new           #136
60: dup
61: aload_3
62: aload         4
64: aload         5
66: invokespecial #137
69: astore        6
71: aload_3
72: invokevirtual #162
75: istore        7
77: new           #163
80: dup
81: aload_3
82: invokespecial #164
85: astore        8
87: getstatic     #127
90: astore        9
92: getstatic     #128
95: astore        10
97: iconst_2
98: anewarray     #5
101: dup
102: iconst_0
103: aload         10
105: aastore
106: dup
107: iconst_1
108: lconst_1
109: invokestatic  #129
112: aastore
113: astore        11
115: new           #130
118: dup
119: aload         9
121: aload         11
123: invokespecial #131
126: astore        12
128: getstatic     #127
131: astore        13
133: getstatic     #128
136: astore        14
138: iconst_2
139: anewarray     #5
142: dup
143: iconst_0
144: aload         14
146: aastore
147: dup
148: iconst_1
149: lconst_1
150: invokestatic  #129
153: aastore
154: astore        15
156: new           #130
159: dup
160: aload         13
162: aload         15
164: invokespecial #131
167: astore        16
169: aload         12
171: aload         16
173: invokevirtual #132
176: aload         12
178: invokevirtual #165
181: astore        17
183: aload         17
185: ldc           #166
187: invokevirtual #167
190: astore        18
192: getstatic     #168
195: astore        19
197: aconst_null
198: astore        20
200: new           #8
203: dup
204: aload         20
206: invokespecial #9
209: astore        21
211: aload         21
213: invokevirtual #25
216: astore        22
218: aload         21
220: invokevirtual #25
223: astore        23
225: aload         17
227: aload         19
229: aload         23
231: checkcast     #79
234: invokevirtual #169
237: getstatic     #156
240: astore        24
242: aconst_null
243: astore        25
245: new           #8
248: dup
249: aload         25
251: invokespecial #9
254: astore        26
256: aload         26
258: invokevirtual #25
261: astore        27
263: new           #81
266: dup
267: aload         24
269: aload         27
271: checkcast     #79
274: invokespecial #82
277: astore        28
279: aload         8
281: aload         19
283: aload         27
285: checkcast     #79
288: invokevirtual #169
291: new           #130
294: dup
295: aload_1
296: aload         27
298: checkcast     #79
301: invokespecial #131
304: astore        29
306: aload_1
307: invokevirtual #301
310: astore        30
312: new           #83
315: dup
316: invokespecial #84
319: ldc           #85
321: invokevirtual #86
324: aload_1
325: invokevirtual #87
328: ldc           #88
330: invokevirtual #86
333: getstatic     #509
336: invokevirtual #87
339: ldc           #85
341: invokevirtual #86
344: invokevirtual #89
347: aload_1
348: getstatic     #509
351: invokevirtual #90
354: invokestatic  #91
357: new           #83
360: dup
361: invokespecial #84
364: ldc           #85
366: invokevirtual #86
369: aload         4
371: invokevirtual #87
374: ldc           #88
376: invokevirtual #86
379: getstatic     #161
382: invokevirtual #87
385: ldc           #85
387: invokevirtual #86
390: invokevirtual #89
393: aload         4
395: getstatic     #161
398: invokevirtual #90
401: invokestatic  #91
404: aload         5
406: invokestatic  #20
409: aload         5
411: invokestatic  #92
414: ldc           #74
416: invokestatic  #23
419: aload         5
421: invokestatic  #93
424: ldc           #74
426: invokestatic  #23
429: new           #83
432: dup
433: invokespecial #84
436: ldc           #85
438: invokevirtual #86
441: iload         7
443: invokevirtual #170
446: ldc           #88
448: invokevirtual #86
451: iconst_0
452: invokevirtual #170
455: ldc           #85
457: invokevirtual #86
460: invokevirtual #89
463: iload         7
465: ifne          472
468: iconst_1
469: goto          473
472: iconst_0
473: invokestatic  #91
476: new           #83
479: dup
480: invokespecial #84
483: ldc           #85
485: invokevirtual #86
488: aload         9
490: invokevirtual #87
493: ldc           #88
495: invokevirtual #86
498: getstatic     #127
501: invokevirtual #87
504: ldc           #85
506: invokevirtual #86
509: invokevirtual #89
512: aload         9
514: getstatic     #127
517: invokevirtual #90
520: invokestatic  #91
523: new           #83
526: dup
527: invokespecial #84
530: ldc           #85
532: invokevirtual #86
535: aload         10
537: invokevirtual #87
540: ldc           #88
542: invokevirtual #86
545: getstatic     #128
548: invokevirtual #87
551: ldc           #85
553: invokevirtual #86
556: invokevirtual #89
559: aload         10
561: getstatic     #128
564: invokevirtual #90
567: invokestatic  #91
570: aload         11
572: invokestatic  #20
575: aload         11
577: invokestatic  #92
580: ldc           #140
582: invokestatic  #23
585: aload         11
587: invokestatic  #93
590: ldc           #140
592: invokestatic  #23
595: new           #83
598: dup
599: invokespecial #84
602: ldc           #85
604: invokevirtual #86
607: aload         13
609: invokevirtual #87
612: ldc           #88
614: invokevirtual #86
617: getstatic     #127
620: invokevirtual #87
623: ldc           #85
625: invokevirtual #86
628: invokevirtual #89
631: aload         13
633: getstatic     #127
636: invokevirtual #90
639: invokestatic  #91
642: new           #83
645: dup
646: invokespecial #84
649: ldc           #85
651: invokevirtual #86
654: aload         14
656: invokevirtual #87
659: ldc           #88
661: invokevirtual #86
664: getstatic     #128
667: invokevirtual #87
670: ldc           #85
672: invokevirtual #86
675: invokevirtual #89
678: aload         14
680: getstatic     #128
683: invokevirtual #90
686: invokestatic  #91
689: aload         15
691: invokestatic  #20
694: aload         15
696: invokestatic  #92
699: ldc           #140
701: invokestatic  #23
704: aload         15
706: invokestatic  #93
709: ldc           #140
711: invokestatic  #23
714: aload         17
716: invokestatic  #20
719: aload         18
721: invokestatic  #171
724: new           #83
727: dup
728: invokespecial #84
731: ldc           #85
733: invokevirtual #86
736: aload         19
738: invokevirtual #87
741: ldc           #88
743: invokevirtual #86
746: getstatic     #168
749: invokevirtual #87
752: ldc           #85
754: invokevirtual #86
757: invokevirtual #89
760: aload         19
762: getstatic     #168
765: invokevirtual #90
768: invokestatic  #91
771: aload         22
773: invokestatic  #20
776: aload         23
778: invokestatic  #20
781: new           #83
784: dup
785: invokespecial #84
788: ldc           #85
790: invokevirtual #86
793: aload         24
795: invokevirtual #87
798: ldc           #88
800: invokevirtual #86
803: getstatic     #156
806: invokevirtual #87
809: ldc           #85
811: invokevirtual #86
814: invokevirtual #89
817: aload         24
819: getstatic     #156
822: invokevirtual #90
825: invokestatic  #91
828: aload         27
830: invokestatic  #20
833: new           #83
836: dup
837: invokespecial #84
840: ldc           #85
842: invokevirtual #86
845: aload         30
847: invokevirtual #86
850: ldc_w         #510
853: invokevirtual #86
856: invokevirtual #89
859: aload         30
861: ldc_w         #511
864: invokestatic  #245
867: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test244
Start line: 6906
End line: 6948
Method source code: 
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer9 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter10 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer9);
        harmonicFitter10.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter10.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter10.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint24 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double25 = weightedObservedPoint24.getX();
        double double26 = weightedObservedPoint24.getY();
        double double27 = weightedObservedPoint24.getX();
        double double28 = weightedObservedPoint24.getY();
        double double29 = weightedObservedPoint24.getX();
        double double30 = weightedObservedPoint24.getX();
        harmonicFitter10.addObservedPoint(weightedObservedPoint24);
        double double32 = weightedObservedPoint24.getWeight();
        double double33 = weightedObservedPoint24.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint24);
        double[] doubleArray39 = new double[] { ' ', 10, 10, (short) 100 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray40 = harmonicFitter1.fit(doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[32.0, 10.0, 10.0, 100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #512
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aconst_null
57: astore_3
58: new           #8
61: dup
62: aload_3
63: invokespecial #9
66: astore        4
68: aload         4
70: dconst_1
71: ldc2_w        #32
74: invokevirtual #43
77: aload         4
79: dconst_0
80: ldc2_w        #34
83: invokevirtual #43
86: aload         4
88: dconst_0
89: ldc2_w        #12
92: ldc2_w        #10
95: invokevirtual #54
98: new           #145
101: dup
102: ldc2_w        #14
105: ldc2_w        #12
108: ldc2_w        #12
111: invokespecial #146
114: astore        5
116: aload         5
118: invokevirtual #147
121: dstore        6
123: aload         5
125: invokevirtual #149
128: dstore        8
130: aload         5
132: invokevirtual #147
135: dstore        10
137: aload         5
139: invokevirtual #149
142: dstore        12
144: aload         5
146: invokevirtual #147
149: dstore        14
151: aload         5
153: invokevirtual #147
156: dstore        16
158: aload         4
160: aload         5
162: invokevirtual #123
165: aload         5
167: invokevirtual #148
170: dstore        18
172: aload         5
174: invokevirtual #147
177: dstore        20
179: aload_2
180: aload         5
182: invokevirtual #123
185: iconst_4
186: newarray       double
188: dup
189: iconst_0
190: ldc2_w        #38
193: dastore
194: dup
195: iconst_1
196: ldc2_w        #32
199: dastore
200: dup
201: iconst_2
202: ldc2_w        #32
205: dastore
206: dup
207: iconst_3
208: ldc2_w        #34
211: dastore
212: astore        22
214: aload_2
215: aload         22
217: invokevirtual #16
220: astore        23
222: ldc           #17
224: invokestatic  #18
227: goto          232
230: astore        23
232: new           #83
235: dup
236: invokespecial #84
239: ldc           #85
241: invokevirtual #86
244: dload         6
246: invokevirtual #150
249: ldc           #88
251: invokevirtual #86
254: ldc2_w        #12
257: invokevirtual #150
260: ldc           #85
262: invokevirtual #86
265: invokevirtual #89
268: dload         6
270: ldc2_w        #12
273: dcmpl
274: ifne          281
277: iconst_1
278: goto          282
281: iconst_0
282: invokestatic  #91
285: new           #83
288: dup
289: invokespecial #84
292: ldc           #85
294: invokevirtual #86
297: dload         8
299: invokevirtual #150
302: ldc           #88
304: invokevirtual #86
307: ldc2_w        #12
310: invokevirtual #150
313: ldc           #85
315: invokevirtual #86
318: invokevirtual #89
321: dload         8
323: ldc2_w        #12
326: dcmpl
327: ifne          334
330: iconst_1
331: goto          335
334: iconst_0
335: invokestatic  #91
338: new           #83
341: dup
342: invokespecial #84
345: ldc           #85
347: invokevirtual #86
350: dload         10
352: invokevirtual #150
355: ldc           #88
357: invokevirtual #86
360: ldc2_w        #12
363: invokevirtual #150
366: ldc           #85
368: invokevirtual #86
371: invokevirtual #89
374: dload         10
376: ldc2_w        #12
379: dcmpl
380: ifne          387
383: iconst_1
384: goto          388
387: iconst_0
388: invokestatic  #91
391: new           #83
394: dup
395: invokespecial #84
398: ldc           #85
400: invokevirtual #86
403: dload         12
405: invokevirtual #150
408: ldc           #88
410: invokevirtual #86
413: ldc2_w        #12
416: invokevirtual #150
419: ldc           #85
421: invokevirtual #86
424: invokevirtual #89
427: dload         12
429: ldc2_w        #12
432: dcmpl
433: ifne          440
436: iconst_1
437: goto          441
440: iconst_0
441: invokestatic  #91
444: new           #83
447: dup
448: invokespecial #84
451: ldc           #85
453: invokevirtual #86
456: dload         14
458: invokevirtual #150
461: ldc           #88
463: invokevirtual #86
466: ldc2_w        #12
469: invokevirtual #150
472: ldc           #85
474: invokevirtual #86
477: invokevirtual #89
480: dload         14
482: ldc2_w        #12
485: dcmpl
486: ifne          493
489: iconst_1
490: goto          494
493: iconst_0
494: invokestatic  #91
497: new           #83
500: dup
501: invokespecial #84
504: ldc           #85
506: invokevirtual #86
509: dload         16
511: invokevirtual #150
514: ldc           #88
516: invokevirtual #86
519: ldc2_w        #12
522: invokevirtual #150
525: ldc           #85
527: invokevirtual #86
530: invokevirtual #89
533: dload         16
535: ldc2_w        #12
538: dcmpl
539: ifne          546
542: iconst_1
543: goto          547
546: iconst_0
547: invokestatic  #91
550: new           #83
553: dup
554: invokespecial #84
557: ldc           #85
559: invokevirtual #86
562: dload         18
564: invokevirtual #150
567: ldc           #88
569: invokevirtual #86
572: ldc2_w        #14
575: invokevirtual #150
578: ldc           #85
580: invokevirtual #86
583: invokevirtual #89
586: dload         18
588: ldc2_w        #14
591: dcmpl
592: ifne          599
595: iconst_1
596: goto          600
599: iconst_0
600: invokestatic  #91
603: new           #83
606: dup
607: invokespecial #84
610: ldc           #85
612: invokevirtual #86
615: dload         20
617: invokevirtual #150
620: ldc           #88
622: invokevirtual #86
625: ldc2_w        #12
628: invokevirtual #150
631: ldc           #85
633: invokevirtual #86
636: invokevirtual #89
639: dload         20
641: ldc2_w        #12
644: dcmpl
645: ifne          652
648: iconst_1
649: goto          653
652: iconst_0
653: invokestatic  #91
656: aload         22
658: invokestatic  #20
661: aload         22
663: invokestatic  #21
666: ldc_w         #513
669: invokestatic  #23
672: return
Exception table:
from    to  target type
214   227   230   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test245
Start line: 6951
End line: 7009
Method source code: 
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Number) (byte) 10, (java.lang.Number) 1.0d, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_OF_SUCCESSES;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.INFINITE_VALUE_CONVERSION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray10 = new java.lang.Object[] { localizedFormats8, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats7, objArray10);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray15 = new java.lang.Object[] { localizedFormats13, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException16 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats12, objArray15);
        mathIllegalArgumentException11.addSuppressed((java.lang.Throwable) mathIllegalArgumentException16);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats18 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats19 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray21 = new java.lang.Object[] { localizedFormats19, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException22 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException16, (org.apache.commons.math3.exception.util.Localizable) localizedFormats18, objArray21);
        java.lang.Object[] objArray23 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray21);
        org.apache.commons.math3.exception.ZeroException zeroException24 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats6, objArray23);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException25 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException4, (org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray23);
        java.lang.Number number27 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException29 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number27, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer31 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter32 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer31);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray33 = harmonicFitter32.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray34 = harmonicFitter32.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray35 = harmonicFitter32.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException36 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException29, (org.apache.commons.math3.exception.util.Localizable) localizedFormats30, (java.lang.Object[]) weightedObservedPointArray35);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException37 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, (java.lang.Object[]) weightedObservedPointArray35);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX));
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_OF_SUCCESSES + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_OF_SUCCESSES));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INFINITE_VALUE_CONVERSION + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INFINITE_VALUE_CONVERSION));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats18 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats18.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats19 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats19.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray33);
        org.junit.Assert.assertNotNull(weightedObservedPointArray34);
        org.junit.Assert.assertNotNull(weightedObservedPointArray35);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #514
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #515
28: astore_1
29: new           #28
32: dup
33: aload_1
34: bipush        10
36: invokestatic  #159
39: dconst_1
40: invokestatic  #247
43: iconst_0
44: invokespecial #195
47: astore_2
48: getstatic     #516
51: astore_3
52: getstatic     #517
55: astore        4
57: getstatic     #127
60: astore        5
62: getstatic     #128
65: astore        6
67: iconst_2
68: anewarray     #5
71: dup
72: iconst_0
73: aload         6
75: aastore
76: dup
77: iconst_1
78: lconst_1
79: invokestatic  #129
82: aastore
83: astore        7
85: new           #130
88: dup
89: aload         5
91: aload         7
93: invokespecial #131
96: astore        8
98: getstatic     #127
101: astore        9
103: getstatic     #128
106: astore        10
108: iconst_2
109: anewarray     #5
112: dup
113: iconst_0
114: aload         10
116: aastore
117: dup
118: iconst_1
119: lconst_1
120: invokestatic  #129
123: aastore
124: astore        11
126: new           #130
129: dup
130: aload         9
132: aload         11
134: invokespecial #131
137: astore        12
139: aload         8
141: aload         12
143: invokevirtual #132
146: getstatic     #133
149: astore        13
151: getstatic     #134
154: astore        14
156: iconst_2
157: anewarray     #5
160: dup
161: iconst_0
162: aload         14
164: aastore
165: dup
166: iconst_1
167: bipush        10
169: invokestatic  #135
172: aastore
173: astore        15
175: new           #136
178: dup
179: aload         12
181: aload         13
183: aload         15
185: invokespecial #137
188: astore        16
190: aload         15
192: invokestatic  #80
195: astore        17
197: new           #81
200: dup
201: aload         4
203: aload         17
205: invokespecial #82
208: astore        18
210: new           #136
213: dup
214: aload_2
215: aload_3
216: aload         17
218: invokespecial #137
221: astore        19
223: aconst_null
224: astore        20
226: new           #28
229: dup
230: ldc2_w        #252
233: invokestatic  #129
236: aload         20
238: iconst_1
239: invokespecial #160
242: astore        21
244: getstatic     #254
247: astore        22
249: aconst_null
250: astore        23
252: new           #8
255: dup
256: aload         23
258: invokespecial #9
261: astore        24
263: aload         24
265: invokevirtual #25
268: astore        25
270: aload         24
272: invokevirtual #25
275: astore        26
277: aload         24
279: invokevirtual #25
282: astore        27
284: new           #136
287: dup
288: aload         21
290: aload         22
292: aload         27
294: checkcast     #79
297: invokespecial #137
300: astore        28
302: new           #136
305: dup
306: aload_3
307: aload         27
309: checkcast     #79
312: invokespecial #138
315: astore        29
317: new           #83
320: dup
321: invokespecial #84
324: ldc           #85
326: invokevirtual #86
329: aload_1
330: invokevirtual #87
333: ldc           #88
335: invokevirtual #86
338: getstatic     #515
341: invokevirtual #87
344: ldc           #85
346: invokevirtual #86
349: invokevirtual #89
352: aload_1
353: getstatic     #515
356: invokevirtual #90
359: invokestatic  #91
362: new           #83
365: dup
366: invokespecial #84
369: ldc           #85
371: invokevirtual #86
374: aload_3
375: invokevirtual #87
378: ldc           #88
380: invokevirtual #86
383: getstatic     #516
386: invokevirtual #87
389: ldc           #85
391: invokevirtual #86
394: invokevirtual #89
397: aload_3
398: getstatic     #516
401: invokevirtual #90
404: invokestatic  #91
407: new           #83
410: dup
411: invokespecial #84
414: ldc           #85
416: invokevirtual #86
419: aload         4
421: invokevirtual #87
424: ldc           #88
426: invokevirtual #86
429: getstatic     #517
432: invokevirtual #87
435: ldc           #85
437: invokevirtual #86
440: invokevirtual #89
443: aload         4
445: getstatic     #517
448: invokevirtual #90
451: invokestatic  #91
454: new           #83
457: dup
458: invokespecial #84
461: ldc           #85
463: invokevirtual #86
466: aload         5
468: invokevirtual #87
471: ldc           #88
473: invokevirtual #86
476: getstatic     #127
479: invokevirtual #87
482: ldc           #85
484: invokevirtual #86
487: invokevirtual #89
490: aload         5
492: getstatic     #127
495: invokevirtual #90
498: invokestatic  #91
501: new           #83
504: dup
505: invokespecial #84
508: ldc           #85
510: invokevirtual #86
513: aload         6
515: invokevirtual #87
518: ldc           #88
520: invokevirtual #86
523: getstatic     #128
526: invokevirtual #87
529: ldc           #85
531: invokevirtual #86
534: invokevirtual #89
537: aload         6
539: getstatic     #128
542: invokevirtual #90
545: invokestatic  #91
548: aload         7
550: invokestatic  #20
553: aload         7
555: invokestatic  #92
558: ldc           #140
560: invokestatic  #23
563: aload         7
565: invokestatic  #93
568: ldc           #140
570: invokestatic  #23
573: new           #83
576: dup
577: invokespecial #84
580: ldc           #85
582: invokevirtual #86
585: aload         9
587: invokevirtual #87
590: ldc           #88
592: invokevirtual #86
595: getstatic     #127
598: invokevirtual #87
601: ldc           #85
603: invokevirtual #86
606: invokevirtual #89
609: aload         9
611: getstatic     #127
614: invokevirtual #90
617: invokestatic  #91
620: new           #83
623: dup
624: invokespecial #84
627: ldc           #85
629: invokevirtual #86
632: aload         10
634: invokevirtual #87
637: ldc           #88
639: invokevirtual #86
642: getstatic     #128
645: invokevirtual #87
648: ldc           #85
650: invokevirtual #86
653: invokevirtual #89
656: aload         10
658: getstatic     #128
661: invokevirtual #90
664: invokestatic  #91
667: aload         11
669: invokestatic  #20
672: aload         11
674: invokestatic  #92
677: ldc           #140
679: invokestatic  #23
682: aload         11
684: invokestatic  #93
687: ldc           #140
689: invokestatic  #23
692: new           #83
695: dup
696: invokespecial #84
699: ldc           #85
701: invokevirtual #86
704: aload         13
706: invokevirtual #87
709: ldc           #88
711: invokevirtual #86
714: getstatic     #133
717: invokevirtual #87
720: ldc           #85
722: invokevirtual #86
725: invokevirtual #89
728: aload         13
730: getstatic     #133
733: invokevirtual #90
736: invokestatic  #91
739: new           #83
742: dup
743: invokespecial #84
746: ldc           #85
748: invokevirtual #86
751: aload         14
753: invokevirtual #87
756: ldc           #88
758: invokevirtual #86
761: getstatic     #134
764: invokevirtual #87
767: ldc           #85
769: invokevirtual #86
772: invokevirtual #89
775: aload         14
777: getstatic     #134
780: invokevirtual #90
783: invokestatic  #91
786: aload         15
788: invokestatic  #20
791: aload         15
793: invokestatic  #92
796: ldc           #141
798: invokestatic  #23
801: aload         15
803: invokestatic  #93
806: ldc           #141
808: invokestatic  #23
811: aload         17
813: invokestatic  #20
816: aload         17
818: invokestatic  #92
821: ldc           #141
823: invokestatic  #23
826: aload         17
828: invokestatic  #93
831: ldc           #141
833: invokestatic  #23
836: new           #83
839: dup
840: invokespecial #84
843: ldc           #85
845: invokevirtual #86
848: aload         22
850: invokevirtual #87
853: ldc           #88
855: invokevirtual #86
858: getstatic     #254
861: invokevirtual #87
864: ldc           #85
866: invokevirtual #86
869: invokevirtual #89
872: aload         22
874: getstatic     #254
877: invokevirtual #90
880: invokestatic  #91
883: aload         25
885: invokestatic  #20
888: aload         26
890: invokestatic  #20
893: aload         27
895: invokestatic  #20
898: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test246
Start line: 7012
End line: 7135
Method source code: 
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext11 = mathIllegalArgumentException4.getContext();
        java.lang.Object obj13 = exceptionContext11.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer15 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter16 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer15);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray17 = harmonicFitter16.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray18 = harmonicFitter16.getObservations();
        exceptionContext11.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats14, (java.lang.Object[]) weightedObservedPointArray18);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray24 = new java.lang.Object[] { localizedFormats22, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException25 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats21, objArray24);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats26 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats27 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats28 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray31 = new java.lang.Object[] { localizedFormats27, localizedFormats28, localizedFormats29, localizedFormats30 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException32 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException25, (org.apache.commons.math3.exception.util.Localizable) localizedFormats26, objArray31);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext33 = mathIllegalArgumentException25.getContext();
        org.apache.commons.math3.exception.util.Localizable localizable34 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats35 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats36 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray38 = new java.lang.Object[] { localizedFormats36, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException39 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats35, objArray38);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats40 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats41 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray43 = new java.lang.Object[] { localizedFormats41, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException44 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats40, objArray43);
        mathIllegalArgumentException39.addSuppressed((java.lang.Throwable) mathIllegalArgumentException44);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext46 = mathIllegalArgumentException39.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats47 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats48 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats49 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray51 = new java.lang.Object[] { localizedFormats49, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException52 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats48, objArray51);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats53 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats54 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray56 = new java.lang.Object[] { localizedFormats54, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException57 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats53, objArray56);
        mathIllegalArgumentException52.addSuppressed((java.lang.Throwable) mathIllegalArgumentException57);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats59 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats60 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray62 = new java.lang.Object[] { localizedFormats60, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException63 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException57, (org.apache.commons.math3.exception.util.Localizable) localizedFormats59, objArray62);
        exceptionContext46.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats47, objArray62);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException65 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException25, localizable34, objArray62);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext66 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException25);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext67 = mathIllegalArgumentException25.getContext();
        java.lang.Object obj69 = exceptionContext67.getValue("start position ({0})");
        exceptionContext11.setValue("org.apache.commons.math3.exception.NumberIsTooSmallException: 10 is smaller than the minimum (null)", (java.lang.Object) exceptionContext67);
        java.util.Set<java.lang.String> strSet71 = exceptionContext11.getKeys();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray17);
        org.junit.Assert.assertNotNull(weightedObservedPointArray18);
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats26 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats26.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats27 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats27.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats28 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats28.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertNotNull(exceptionContext33);
        org.junit.Assert.assertTrue("'" + localizedFormats35 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats35.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats36 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats36.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats40 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats40.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats41 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats41.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext46);
        org.junit.Assert.assertTrue("'" + localizedFormats47 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION + "'", localizedFormats47.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION));
        org.junit.Assert.assertTrue("'" + localizedFormats48 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats48.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats49 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats49.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats53 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats53.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats54 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats54.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats59 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats59.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats60 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats60.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(exceptionContext67);
        org.junit.Assert.assertNull(obj69);
        org.junit.Assert.assertNotNull(strSet71);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #518
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: aload         4
110: invokevirtual #165
113: astore        9
115: aload         9
117: ldc           #166
119: invokevirtual #167
122: astore        10
124: getstatic     #168
127: astore        11
129: aconst_null
130: astore        12
132: new           #8
135: dup
136: aload         12
138: invokespecial #9
141: astore        13
143: aload         13
145: invokevirtual #25
148: astore        14
150: aload         13
152: invokevirtual #25
155: astore        15
157: aload         9
159: aload         11
161: aload         15
163: checkcast     #79
166: invokevirtual #169
169: getstatic     #127
172: astore        16
174: getstatic     #128
177: astore        17
179: iconst_2
180: anewarray     #5
183: dup
184: iconst_0
185: aload         17
187: aastore
188: dup
189: iconst_1
190: lconst_1
191: invokestatic  #129
194: aastore
195: astore        18
197: new           #130
200: dup
201: aload         16
203: aload         18
205: invokespecial #131
208: astore        19
210: getstatic     #328
213: astore        20
215: getstatic     #329
218: astore        21
220: getstatic     #330
223: astore        22
225: getstatic     #331
228: astore        23
230: getstatic     #332
233: astore        24
235: iconst_4
236: anewarray     #5
239: dup
240: iconst_0
241: aload         21
243: aastore
244: dup
245: iconst_1
246: aload         22
248: aastore
249: dup
250: iconst_2
251: aload         23
253: aastore
254: dup
255: iconst_3
256: aload         24
258: aastore
259: astore        25
261: new           #136
264: dup
265: aload         19
267: aload         20
269: aload         25
271: invokespecial #137
274: astore        26
276: aload         19
278: invokevirtual #165
281: astore        27
283: aconst_null
284: astore        28
286: getstatic     #127
289: astore        29
291: getstatic     #128
294: astore        30
296: iconst_2
297: anewarray     #5
300: dup
301: iconst_0
302: aload         30
304: aastore
305: dup
306: iconst_1
307: lconst_1
308: invokestatic  #129
311: aastore
312: astore        31
314: new           #130
317: dup
318: aload         29
320: aload         31
322: invokespecial #131
325: astore        32
327: getstatic     #127
330: astore        33
332: getstatic     #128
335: astore        34
337: iconst_2
338: anewarray     #5
341: dup
342: iconst_0
343: aload         34
345: aastore
346: dup
347: iconst_1
348: lconst_1
349: invokestatic  #129
352: aastore
353: astore        35
355: new           #130
358: dup
359: aload         33
361: aload         35
363: invokespecial #131
366: astore        36
368: aload         32
370: aload         36
372: invokevirtual #132
375: aload         32
377: invokevirtual #165
380: astore        37
382: getstatic     #519
385: astore        38
387: getstatic     #127
390: astore        39
392: getstatic     #128
395: astore        40
397: iconst_2
398: anewarray     #5
401: dup
402: iconst_0
403: aload         40
405: aastore
406: dup
407: iconst_1
408: lconst_1
409: invokestatic  #129
412: aastore
413: astore        41
415: new           #130
418: dup
419: aload         39
421: aload         41
423: invokespecial #131
426: astore        42
428: getstatic     #127
431: astore        43
433: getstatic     #128
436: astore        44
438: iconst_2
439: anewarray     #5
442: dup
443: iconst_0
444: aload         44
446: aastore
447: dup
448: iconst_1
449: lconst_1
450: invokestatic  #129
453: aastore
454: astore        45
456: new           #130
459: dup
460: aload         43
462: aload         45
464: invokespecial #131
467: astore        46
469: aload         42
471: aload         46
473: invokevirtual #132
476: getstatic     #133
479: astore        47
481: getstatic     #134
484: astore        48
486: iconst_2
487: anewarray     #5
490: dup
491: iconst_0
492: aload         48
494: aastore
495: dup
496: iconst_1
497: bipush        10
499: invokestatic  #135
502: aastore
503: astore        49
505: new           #136
508: dup
509: aload         46
511: aload         47
513: aload         49
515: invokespecial #137
518: astore        50
520: aload         37
522: aload         38
524: aload         49
526: invokevirtual #169
529: new           #136
532: dup
533: aload         19
535: aload         28
537: aload         49
539: invokespecial #137
542: astore        51
544: new           #163
547: dup
548: aload         19
550: invokespecial #164
553: astore        52
555: aload         19
557: invokevirtual #165
560: astore        53
562: aload         53
564: ldc_w         #520
567: invokevirtual #167
570: astore        54
572: aload         9
574: ldc_w         #521
577: aload         53
579: invokevirtual #373
582: aload         9
584: invokevirtual #370
587: astore        55
589: new           #83
592: dup
593: invokespecial #84
596: ldc           #85
598: invokevirtual #86
601: aload_1
602: invokevirtual #87
605: ldc           #88
607: invokevirtual #86
610: getstatic     #127
613: invokevirtual #87
616: ldc           #85
618: invokevirtual #86
621: invokevirtual #89
624: aload_1
625: getstatic     #127
628: invokevirtual #90
631: invokestatic  #91
634: new           #83
637: dup
638: invokespecial #84
641: ldc           #85
643: invokevirtual #86
646: aload_2
647: invokevirtual #87
650: ldc           #88
652: invokevirtual #86
655: getstatic     #128
658: invokevirtual #87
661: ldc           #85
663: invokevirtual #86
666: invokevirtual #89
669: aload_2
670: getstatic     #128
673: invokevirtual #90
676: invokestatic  #91
679: aload_3
680: invokestatic  #20
683: aload_3
684: invokestatic  #92
687: ldc           #140
689: invokestatic  #23
692: aload_3
693: invokestatic  #93
696: ldc           #140
698: invokestatic  #23
701: new           #83
704: dup
705: invokespecial #84
708: ldc           #85
710: invokevirtual #86
713: aload         5
715: invokevirtual #87
718: ldc           #88
720: invokevirtual #86
723: getstatic     #127
726: invokevirtual #87
729: ldc           #85
731: invokevirtual #86
734: invokevirtual #89
737: aload         5
739: getstatic     #127
742: invokevirtual #90
745: invokestatic  #91
748: new           #83
751: dup
752: invokespecial #84
755: ldc           #85
757: invokevirtual #86
760: aload         6
762: invokevirtual #87
765: ldc           #88
767: invokevirtual #86
770: getstatic     #128
773: invokevirtual #87
776: ldc           #85
778: invokevirtual #86
781: invokevirtual #89
784: aload         6
786: getstatic     #128
789: invokevirtual #90
792: invokestatic  #91
795: aload         7
797: invokestatic  #20
800: aload         7
802: invokestatic  #92
805: ldc           #140
807: invokestatic  #23
810: aload         7
812: invokestatic  #93
815: ldc           #140
817: invokestatic  #23
820: aload         9
822: invokestatic  #20
825: aload         10
827: invokestatic  #171
830: new           #83
833: dup
834: invokespecial #84
837: ldc           #85
839: invokevirtual #86
842: aload         11
844: invokevirtual #87
847: ldc           #88
849: invokevirtual #86
852: getstatic     #168
855: invokevirtual #87
858: ldc           #85
860: invokevirtual #86
863: invokevirtual #89
866: aload         11
868: getstatic     #168
871: invokevirtual #90
874: invokestatic  #91
877: aload         14
879: invokestatic  #20
882: aload         15
884: invokestatic  #20
887: new           #83
890: dup
891: invokespecial #84
894: ldc           #85
896: invokevirtual #86
899: aload         16
901: invokevirtual #87
904: ldc           #88
906: invokevirtual #86
909: getstatic     #127
912: invokevirtual #87
915: ldc           #85
917: invokevirtual #86
920: invokevirtual #89
923: aload         16
925: getstatic     #127
928: invokevirtual #90
931: invokestatic  #91
934: new           #83
937: dup
938: invokespecial #84
941: ldc           #85
943: invokevirtual #86
946: aload         17
948: invokevirtual #87
951: ldc           #88
953: invokevirtual #86
956: getstatic     #128
959: invokevirtual #87
962: ldc           #85
964: invokevirtual #86
967: invokevirtual #89
970: aload         17
972: getstatic     #128
975: invokevirtual #90
978: invokestatic  #91
981: aload         18
983: invokestatic  #20
986: aload         18
988: invokestatic  #92
991: ldc           #140
993: invokestatic  #23
996: aload         18
998: invokestatic  #93
1001: ldc           #140
1003: invokestatic  #23
1006: new           #83
1009: dup
1010: invokespecial #84
1013: ldc           #85
1015: invokevirtual #86
1018: aload         20
1020: invokevirtual #87
1023: ldc           #88
1025: invokevirtual #86
1028: getstatic     #328
1031: invokevirtual #87
1034: ldc           #85
1036: invokevirtual #86
1039: invokevirtual #89
1042: aload         20
1044: getstatic     #328
1047: invokevirtual #90
1050: invokestatic  #91
1053: new           #83
1056: dup
1057: invokespecial #84
1060: ldc           #85
1062: invokevirtual #86
1065: aload         21
1067: invokevirtual #87
1070: ldc           #88
1072: invokevirtual #86
1075: getstatic     #329
1078: invokevirtual #87
1081: ldc           #85
1083: invokevirtual #86
1086: invokevirtual #89
1089: aload         21
1091: getstatic     #329
1094: invokevirtual #90
1097: invokestatic  #91
1100: new           #83
1103: dup
1104: invokespecial #84
1107: ldc           #85
1109: invokevirtual #86
1112: aload         22
1114: invokevirtual #87
1117: ldc           #88
1119: invokevirtual #86
1122: getstatic     #330
1125: invokevirtual #87
1128: ldc           #85
1130: invokevirtual #86
1133: invokevirtual #89
1136: aload         22
1138: getstatic     #330
1141: invokevirtual #90
1144: invokestatic  #91
1147: new           #83
1150: dup
1151: invokespecial #84
1154: ldc           #85
1156: invokevirtual #86
1159: aload         23
1161: invokevirtual #87
1164: ldc           #88
1166: invokevirtual #86
1169: getstatic     #331
1172: invokevirtual #87
1175: ldc           #85
1177: invokevirtual #86
1180: invokevirtual #89
1183: aload         23
1185: getstatic     #331
1188: invokevirtual #90
1191: invokestatic  #91
1194: new           #83
1197: dup
1198: invokespecial #84
1201: ldc           #85
1203: invokevirtual #86
1206: aload         24
1208: invokevirtual #87
1211: ldc           #88
1213: invokevirtual #86
1216: getstatic     #332
1219: invokevirtual #87
1222: ldc           #85
1224: invokevirtual #86
1227: invokevirtual #89
1230: aload         24
1232: getstatic     #332
1235: invokevirtual #90
1238: invokestatic  #91
1241: aload         25
1243: invokestatic  #20
1246: aload         25
1248: invokestatic  #92
1251: ldc_w         #336
1254: invokestatic  #23
1257: aload         25
1259: invokestatic  #93
1262: ldc_w         #336
1265: invokestatic  #23
1268: aload         27
1270: invokestatic  #20
1273: new           #83
1276: dup
1277: invokespecial #84
1280: ldc           #85
1282: invokevirtual #86
1285: aload         29
1287: invokevirtual #87
1290: ldc           #88
1292: invokevirtual #86
1295: getstatic     #127
1298: invokevirtual #87
1301: ldc           #85
1303: invokevirtual #86
1306: invokevirtual #89
1309: aload         29
1311: getstatic     #127
1314: invokevirtual #90
1317: invokestatic  #91
1320: new           #83
1323: dup
1324: invokespecial #84
1327: ldc           #85
1329: invokevirtual #86
1332: aload         30
1334: invokevirtual #87
1337: ldc           #88
1339: invokevirtual #86
1342: getstatic     #128
1345: invokevirtual #87
1348: ldc           #85
1350: invokevirtual #86
1353: invokevirtual #89
1356: aload         30
1358: getstatic     #128
1361: invokevirtual #90
1364: invokestatic  #91
1367: aload         31
1369: invokestatic  #20
1372: aload         31
1374: invokestatic  #92
1377: ldc           #140
1379: invokestatic  #23
1382: aload         31
1384: invokestatic  #93
1387: ldc           #140
1389: invokestatic  #23
1392: new           #83
1395: dup
1396: invokespecial #84
1399: ldc           #85
1401: invokevirtual #86
1404: aload         33
1406: invokevirtual #87
1409: ldc           #88
1411: invokevirtual #86
1414: getstatic     #127
1417: invokevirtual #87
1420: ldc           #85
1422: invokevirtual #86
1425: invokevirtual #89
1428: aload         33
1430: getstatic     #127
1433: invokevirtual #90
1436: invokestatic  #91
1439: new           #83
1442: dup
1443: invokespecial #84
1446: ldc           #85
1448: invokevirtual #86
1451: aload         34
1453: invokevirtual #87
1456: ldc           #88
1458: invokevirtual #86
1461: getstatic     #128
1464: invokevirtual #87
1467: ldc           #85
1469: invokevirtual #86
1472: invokevirtual #89
1475: aload         34
1477: getstatic     #128
1480: invokevirtual #90
1483: invokestatic  #91
1486: aload         35
1488: invokestatic  #20
1491: aload         35
1493: invokestatic  #92
1496: ldc           #140
1498: invokestatic  #23
1501: aload         35
1503: invokestatic  #93
1506: ldc           #140
1508: invokestatic  #23
1511: aload         37
1513: invokestatic  #20
1516: new           #83
1519: dup
1520: invokespecial #84
1523: ldc           #85
1525: invokevirtual #86
1528: aload         38
1530: invokevirtual #87
1533: ldc           #88
1535: invokevirtual #86
1538: getstatic     #519
1541: invokevirtual #87
1544: ldc           #85
1546: invokevirtual #86
1549: invokevirtual #89
1552: aload         38
1554: getstatic     #519
1557: invokevirtual #90
1560: invokestatic  #91
1563: new           #83
1566: dup
1567: invokespecial #84
1570: ldc           #85
1572: invokevirtual #86
1575: aload         39
1577: invokevirtual #87
1580: ldc           #88
1582: invokevirtual #86
1585: getstatic     #127
1588: invokevirtual #87
1591: ldc           #85
1593: invokevirtual #86
1596: invokevirtual #89
1599: aload         39
1601: getstatic     #127
1604: invokevirtual #90
1607: invokestatic  #91
1610: new           #83
1613: dup
1614: invokespecial #84
1617: ldc           #85
1619: invokevirtual #86
1622: aload         40
1624: invokevirtual #87
1627: ldc           #88
1629: invokevirtual #86
1632: getstatic     #128
1635: invokevirtual #87
1638: ldc           #85
1640: invokevirtual #86
1643: invokevirtual #89
1646: aload         40
1648: getstatic     #128
1651: invokevirtual #90
1654: invokestatic  #91
1657: aload         41
1659: invokestatic  #20
1662: aload         41
1664: invokestatic  #92
1667: ldc           #140
1669: invokestatic  #23
1672: aload         41
1674: invokestatic  #93
1677: ldc           #140
1679: invokestatic  #23
1682: new           #83
1685: dup
1686: invokespecial #84
1689: ldc           #85
1691: invokevirtual #86
1694: aload         43
1696: invokevirtual #87
1699: ldc           #88
1701: invokevirtual #86
1704: getstatic     #127
1707: invokevirtual #87
1710: ldc           #85
1712: invokevirtual #86
1715: invokevirtual #89
1718: aload         43
1720: getstatic     #127
1723: invokevirtual #90
1726: invokestatic  #91
1729: new           #83
1732: dup
1733: invokespecial #84
1736: ldc           #85
1738: invokevirtual #86
1741: aload         44
1743: invokevirtual #87
1746: ldc           #88
1748: invokevirtual #86
1751: getstatic     #128
1754: invokevirtual #87
1757: ldc           #85
1759: invokevirtual #86
1762: invokevirtual #89
1765: aload         44
1767: getstatic     #128
1770: invokevirtual #90
1773: invokestatic  #91
1776: aload         45
1778: invokestatic  #20
1781: aload         45
1783: invokestatic  #92
1786: ldc           #140
1788: invokestatic  #23
1791: aload         45
1793: invokestatic  #93
1796: ldc           #140
1798: invokestatic  #23
1801: new           #83
1804: dup
1805: invokespecial #84
1808: ldc           #85
1810: invokevirtual #86
1813: aload         47
1815: invokevirtual #87
1818: ldc           #88
1820: invokevirtual #86
1823: getstatic     #133
1826: invokevirtual #87
1829: ldc           #85
1831: invokevirtual #86
1834: invokevirtual #89
1837: aload         47
1839: getstatic     #133
1842: invokevirtual #90
1845: invokestatic  #91
1848: new           #83
1851: dup
1852: invokespecial #84
1855: ldc           #85
1857: invokevirtual #86
1860: aload         48
1862: invokevirtual #87
1865: ldc           #88
1867: invokevirtual #86
1870: getstatic     #134
1873: invokevirtual #87
1876: ldc           #85
1878: invokevirtual #86
1881: invokevirtual #89
1884: aload         48
1886: getstatic     #134
1889: invokevirtual #90
1892: invokestatic  #91
1895: aload         49
1897: invokestatic  #20
1900: aload         49
1902: invokestatic  #92
1905: ldc           #141
1907: invokestatic  #23
1910: aload         49
1912: invokestatic  #93
1915: ldc           #141
1917: invokestatic  #23
1920: aload         53
1922: invokestatic  #20
1925: aload         54
1927: invokestatic  #171
1930: aload         55
1932: invokestatic  #20
1935: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test247
Start line: 7138
End line: 7159
Method source code: 
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) 100, (double) '#', (double) (short) 1);
        double[] doubleArray13 = new double[] { 1L, 'a', (byte) -1, 0.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = harmonicFitter1.fit(doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 97.0, -1.0, 0.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #522
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #25
45: astore        4
47: aload_2
48: invokevirtual #59
51: aload_2
52: ldc2_w        #34
55: ldc2_w        #14
58: dconst_1
59: invokevirtual #54
62: iconst_4
63: newarray       double
65: dup
66: iconst_0
67: dconst_1
68: dastore
69: dup
70: iconst_1
71: ldc2_w        #44
74: dastore
75: dup
76: iconst_2
77: ldc2_w        #10
80: dastore
81: dup
82: iconst_3
83: dconst_0
84: dastore
85: astore        5
87: aload_2
88: aload         5
90: invokevirtual #16
93: astore        6
95: ldc           #17
97: invokestatic  #18
100: goto          105
103: astore        6
105: aload_3
106: invokestatic  #20
109: aload         4
111: invokestatic  #20
114: aload         5
116: invokestatic  #20
119: aload         5
121: invokestatic  #21
124: ldc_w         #523
127: invokestatic  #23
130: return
Exception table:
from    to  target type
87   100   103   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test248
Start line: 7162
End line: 7186
Method source code: 
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 1, (double) (short) -1);
        harmonicFitter1.addObservedPoint((double) (byte) 10, (double) (byte) 100, (double) 1L);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric18 = null;
        double[] doubleArray19 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray20 = harmonicFitter1.fit(parametric18, doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #524
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: invokevirtual #25
61: astore        4
63: aload_2
64: invokevirtual #25
67: astore        5
69: aload_2
70: dconst_1
71: ldc2_w        #10
74: invokevirtual #43
77: aload_2
78: ldc2_w        #32
81: ldc2_w        #34
84: dconst_1
85: invokevirtual #54
88: aconst_null
89: astore        6
91: aconst_null
92: astore        7
94: aload_2
95: aload         6
97: aload         7
99: invokevirtual #30
102: astore        8
104: ldc           #17
106: invokestatic  #18
109: goto          114
112: astore        8
114: aload_3
115: invokestatic  #20
118: aload         4
120: invokestatic  #20
123: aload         5
125: invokestatic  #20
128: return
Exception table:
from    to  target type
94   109   112   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test249
Start line: 7189
End line: 7294
Method source code: 
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray10 = new java.lang.Object[] { localizedFormats6, localizedFormats7, localizedFormats8, localizedFormats9 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException4, (org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray10);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException16 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray17 = numberIsTooSmallException16.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException18 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalStateException11, (org.apache.commons.math3.exception.util.Localizable) localizedFormats12, (java.lang.Object[]) throwableArray17);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext19 = mathIllegalStateException11.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION;
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.ZeroException zeroException22 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, objArray21);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException26 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, (java.lang.Number) (short) 0, (java.lang.Number) 0L, true);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException30 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray31 = numberIsTooSmallException30.getSuppressed();
        java.lang.Object[] objArray32 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) throwableArray31);
        exceptionContext19.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, objArray32);
        java.util.Set<java.lang.String> strSet34 = exceptionContext19.getKeys();
        java.lang.Object obj36 = exceptionContext19.getValue("class ({0}) does not implement Comparable");
        java.lang.Throwable throwable37 = exceptionContext19.getThrowable();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats38 = org.apache.commons.math3.exception.util.LocalizedFormats.DISTRIBUTION_NOT_LOADED;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats39 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats40 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray42 = new java.lang.Object[] { localizedFormats40, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException43 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats39, objArray42);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats44 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats45 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats46 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats47 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats48 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray49 = new java.lang.Object[] { localizedFormats45, localizedFormats46, localizedFormats47, localizedFormats48 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException50 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException43, (org.apache.commons.math3.exception.util.Localizable) localizedFormats44, objArray49);
        exceptionContext19.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats38, objArray49);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats52 = org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY;
        java.lang.Number number54 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException56 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number54, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats57 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer58 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter59 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer58);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray60 = harmonicFitter59.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray61 = harmonicFitter59.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray62 = harmonicFitter59.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException63 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException56, (org.apache.commons.math3.exception.util.Localizable) localizedFormats57, (java.lang.Object[]) weightedObservedPointArray62);
        exceptionContext19.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats52, (java.lang.Object[]) weightedObservedPointArray62);
        java.lang.Object obj66 = exceptionContext19.getValue("org.apache.commons.math3.exception.MathIllegalStateException: sample for interpolation is empty");
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE));
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(exceptionContext19);
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION));
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(throwable37);
        org.junit.Assert.assertEquals(throwable37.getLocalizedMessage(), "overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive: distribution not loaded: empty selected column index array");
        org.junit.Assert.assertEquals(throwable37.getMessage(), "overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive: distribution not loaded: empty selected column index array");
        org.junit.Assert.assertEquals(throwable37.toString(), "org.apache.commons.math3.exception.MathIllegalStateException: overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive: distribution not loaded: empty selected column index array");
        org.junit.Assert.assertTrue("'" + localizedFormats38 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.DISTRIBUTION_NOT_LOADED + "'", localizedFormats38.equals(org.apache.commons.math3.exception.util.LocalizedFormats.DISTRIBUTION_NOT_LOADED));
        org.junit.Assert.assertTrue("'" + localizedFormats39 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats39.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats40 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats40.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats44 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats44.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats45 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats45.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats46 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats46.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats47 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats47.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats48 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats48.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertTrue("'" + localizedFormats52 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY + "'", localizedFormats52.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY));
        org.junit.Assert.assertTrue("'" + localizedFormats57 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats57.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray60);
        org.junit.Assert.assertNotNull(weightedObservedPointArray61);
        org.junit.Assert.assertNotNull(weightedObservedPointArray62);
        org.junit.Assert.assertNull(obj66);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #525
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #328
63: astore        5
65: getstatic     #329
68: astore        6
70: getstatic     #330
73: astore        7
75: getstatic     #331
78: astore        8
80: getstatic     #332
83: astore        9
85: iconst_4
86: anewarray     #5
89: dup
90: iconst_0
91: aload         6
93: aastore
94: dup
95: iconst_1
96: aload         7
98: aastore
99: dup
100: iconst_2
101: aload         8
103: aastore
104: dup
105: iconst_3
106: aload         9
108: aastore
109: astore        10
111: new           #136
114: dup
115: aload         4
117: aload         5
119: aload         10
121: invokespecial #137
124: astore        11
126: getstatic     #333
129: astore        12
131: new           #28
134: dup
135: ldc2_w        #277
138: invokestatic  #129
141: bipush        10
143: invokestatic  #159
146: iconst_1
147: invokespecial #160
150: astore        13
152: aload         13
154: invokevirtual #334
157: astore        14
159: new           #136
162: dup
163: aload         11
165: aload         12
167: aload         14
169: checkcast     #79
172: invokespecial #137
175: astore        15
177: aload         11
179: invokevirtual #282
182: astore        16
184: getstatic     #335
187: astore        17
189: iconst_0
190: anewarray     #5
193: astore        18
195: new           #81
198: dup
199: aload         17
201: aload         18
203: invokespecial #82
206: astore        19
208: new           #28
211: dup
212: aload         17
214: iconst_0
215: invokestatic  #194
218: lconst_0
219: invokestatic  #129
222: iconst_1
223: invokespecial #195
226: astore        20
228: new           #28
231: dup
232: ldc2_w        #277
235: invokestatic  #129
238: bipush        10
240: invokestatic  #159
243: iconst_1
244: invokespecial #160
247: astore        21
249: aload         21
251: invokevirtual #334
254: astore        22
256: aload         22
258: checkcast     #79
261: invokestatic  #80
264: astore        23
266: aload         16
268: aload         17
270: aload         23
272: invokevirtual #169
275: aload         16
277: invokevirtual #370
280: astore        24
282: aload         16
284: ldc_w         #371
287: invokevirtual #167
290: astore        25
292: aload         16
294: invokevirtual #288
297: astore        26
299: getstatic     #526
302: astore        27
304: getstatic     #127
307: astore        28
309: getstatic     #128
312: astore        29
314: iconst_2
315: anewarray     #5
318: dup
319: iconst_0
320: aload         29
322: aastore
323: dup
324: iconst_1
325: lconst_1
326: invokestatic  #129
329: aastore
330: astore        30
332: new           #130
335: dup
336: aload         28
338: aload         30
340: invokespecial #131
343: astore        31
345: getstatic     #328
348: astore        32
350: getstatic     #329
353: astore        33
355: getstatic     #330
358: astore        34
360: getstatic     #331
363: astore        35
365: getstatic     #332
368: astore        36
370: iconst_4
371: anewarray     #5
374: dup
375: iconst_0
376: aload         33
378: aastore
379: dup
380: iconst_1
381: aload         34
383: aastore
384: dup
385: iconst_2
386: aload         35
388: aastore
389: dup
390: iconst_3
391: aload         36
393: aastore
394: astore        37
396: new           #136
399: dup
400: aload         31
402: aload         32
404: aload         37
406: invokespecial #137
409: astore        38
411: aload         16
413: aload         27
415: aload         37
417: invokevirtual #169
420: getstatic     #527
423: astore        39
425: aconst_null
426: astore        40
428: new           #28
431: dup
432: ldc2_w        #252
435: invokestatic  #129
438: aload         40
440: iconst_1
441: invokespecial #160
444: astore        41
446: getstatic     #254
449: astore        42
451: aconst_null
452: astore        43
454: new           #8
457: dup
458: aload         43
460: invokespecial #9
463: astore        44
465: aload         44
467: invokevirtual #25
470: astore        45
472: aload         44
474: invokevirtual #25
477: astore        46
479: aload         44
481: invokevirtual #25
484: astore        47
486: new           #136
489: dup
490: aload         41
492: aload         42
494: aload         47
496: checkcast     #79
499: invokespecial #137
502: astore        48
504: aload         16
506: aload         39
508: aload         47
510: checkcast     #79
513: invokevirtual #169
516: aload         16
518: ldc_w         #528
521: invokevirtual #167
524: astore        49
526: new           #83
529: dup
530: invokespecial #84
533: ldc           #85
535: invokevirtual #86
538: aload_1
539: invokevirtual #87
542: ldc           #88
544: invokevirtual #86
547: getstatic     #127
550: invokevirtual #87
553: ldc           #85
555: invokevirtual #86
558: invokevirtual #89
561: aload_1
562: getstatic     #127
565: invokevirtual #90
568: invokestatic  #91
571: new           #83
574: dup
575: invokespecial #84
578: ldc           #85
580: invokevirtual #86
583: aload_2
584: invokevirtual #87
587: ldc           #88
589: invokevirtual #86
592: getstatic     #128
595: invokevirtual #87
598: ldc           #85
600: invokevirtual #86
603: invokevirtual #89
606: aload_2
607: getstatic     #128
610: invokevirtual #90
613: invokestatic  #91
616: aload_3
617: invokestatic  #20
620: aload_3
621: invokestatic  #92
624: ldc           #140
626: invokestatic  #23
629: aload_3
630: invokestatic  #93
633: ldc           #140
635: invokestatic  #23
638: new           #83
641: dup
642: invokespecial #84
645: ldc           #85
647: invokevirtual #86
650: aload         5
652: invokevirtual #87
655: ldc           #88
657: invokevirtual #86
660: getstatic     #328
663: invokevirtual #87
666: ldc           #85
668: invokevirtual #86
671: invokevirtual #89
674: aload         5
676: getstatic     #328
679: invokevirtual #90
682: invokestatic  #91
685: new           #83
688: dup
689: invokespecial #84
692: ldc           #85
694: invokevirtual #86
697: aload         6
699: invokevirtual #87
702: ldc           #88
704: invokevirtual #86
707: getstatic     #329
710: invokevirtual #87
713: ldc           #85
715: invokevirtual #86
718: invokevirtual #89
721: aload         6
723: getstatic     #329
726: invokevirtual #90
729: invokestatic  #91
732: new           #83
735: dup
736: invokespecial #84
739: ldc           #85
741: invokevirtual #86
744: aload         7
746: invokevirtual #87
749: ldc           #88
751: invokevirtual #86
754: getstatic     #330
757: invokevirtual #87
760: ldc           #85
762: invokevirtual #86
765: invokevirtual #89
768: aload         7
770: getstatic     #330
773: invokevirtual #90
776: invokestatic  #91
779: new           #83
782: dup
783: invokespecial #84
786: ldc           #85
788: invokevirtual #86
791: aload         8
793: invokevirtual #87
796: ldc           #88
798: invokevirtual #86
801: getstatic     #331
804: invokevirtual #87
807: ldc           #85
809: invokevirtual #86
812: invokevirtual #89
815: aload         8
817: getstatic     #331
820: invokevirtual #90
823: invokestatic  #91
826: new           #83
829: dup
830: invokespecial #84
833: ldc           #85
835: invokevirtual #86
838: aload         9
840: invokevirtual #87
843: ldc           #88
845: invokevirtual #86
848: getstatic     #332
851: invokevirtual #87
854: ldc           #85
856: invokevirtual #86
859: invokevirtual #89
862: aload         9
864: getstatic     #332
867: invokevirtual #90
870: invokestatic  #91
873: aload         10
875: invokestatic  #20
878: aload         10
880: invokestatic  #92
883: ldc_w         #336
886: invokestatic  #23
889: aload         10
891: invokestatic  #93
894: ldc_w         #336
897: invokestatic  #23
900: new           #83
903: dup
904: invokespecial #84
907: ldc           #85
909: invokevirtual #86
912: aload         12
914: invokevirtual #87
917: ldc           #88
919: invokevirtual #86
922: getstatic     #333
925: invokevirtual #87
928: ldc           #85
930: invokevirtual #86
933: invokevirtual #89
936: aload         12
938: getstatic     #333
941: invokevirtual #90
944: invokestatic  #91
947: aload         14
949: invokestatic  #20
952: aload         16
954: invokestatic  #20
957: new           #83
960: dup
961: invokespecial #84
964: ldc           #85
966: invokevirtual #86
969: aload         17
971: invokevirtual #87
974: ldc           #88
976: invokevirtual #86
979: getstatic     #335
982: invokevirtual #87
985: ldc           #85
987: invokevirtual #86
990: invokevirtual #89
993: aload         17
995: getstatic     #335
998: invokevirtual #90
1001: invokestatic  #91
1004: aload         18
1006: invokestatic  #20
1009: aload         18
1011: invokestatic  #92
1014: ldc           #74
1016: invokestatic  #23
1019: aload         18
1021: invokestatic  #93
1024: ldc           #74
1026: invokestatic  #23
1029: aload         22
1031: invokestatic  #20
1034: aload         23
1036: invokestatic  #20
1039: aload         23
1041: invokestatic  #92
1044: ldc           #74
1046: invokestatic  #23
1049: aload         23
1051: invokestatic  #93
1054: ldc           #74
1056: invokestatic  #23
1059: aload         24
1061: invokestatic  #20
1064: aload         25
1066: invokestatic  #171
1069: aload         26
1071: invokestatic  #20
1074: aload         26
1076: invokevirtual #289
1079: ldc_w         #529
1082: invokestatic  #23
1085: aload         26
1087: invokevirtual #291
1090: ldc_w         #529
1093: invokestatic  #23
1096: aload         26
1098: invokevirtual #292
1101: ldc_w         #530
1104: invokestatic  #23
1107: new           #83
1110: dup
1111: invokespecial #84
1114: ldc           #85
1116: invokevirtual #86
1119: aload         27
1121: invokevirtual #87
1124: ldc           #88
1126: invokevirtual #86
1129: getstatic     #526
1132: invokevirtual #87
1135: ldc           #85
1137: invokevirtual #86
1140: invokevirtual #89
1143: aload         27
1145: getstatic     #526
1148: invokevirtual #90
1151: invokestatic  #91
1154: new           #83
1157: dup
1158: invokespecial #84
1161: ldc           #85
1163: invokevirtual #86
1166: aload         28
1168: invokevirtual #87
1171: ldc           #88
1173: invokevirtual #86
1176: getstatic     #127
1179: invokevirtual #87
1182: ldc           #85
1184: invokevirtual #86
1187: invokevirtual #89
1190: aload         28
1192: getstatic     #127
1195: invokevirtual #90
1198: invokestatic  #91
1201: new           #83
1204: dup
1205: invokespecial #84
1208: ldc           #85
1210: invokevirtual #86
1213: aload         29
1215: invokevirtual #87
1218: ldc           #88
1220: invokevirtual #86
1223: getstatic     #128
1226: invokevirtual #87
1229: ldc           #85
1231: invokevirtual #86
1234: invokevirtual #89
1237: aload         29
1239: getstatic     #128
1242: invokevirtual #90
1245: invokestatic  #91
1248: aload         30
1250: invokestatic  #20
1253: aload         30
1255: invokestatic  #92
1258: ldc           #140
1260: invokestatic  #23
1263: aload         30
1265: invokestatic  #93
1268: ldc           #140
1270: invokestatic  #23
1273: new           #83
1276: dup
1277: invokespecial #84
1280: ldc           #85
1282: invokevirtual #86
1285: aload         32
1287: invokevirtual #87
1290: ldc           #88
1292: invokevirtual #86
1295: getstatic     #328
1298: invokevirtual #87
1301: ldc           #85
1303: invokevirtual #86
1306: invokevirtual #89
1309: aload         32
1311: getstatic     #328
1314: invokevirtual #90
1317: invokestatic  #91
1320: new           #83
1323: dup
1324: invokespecial #84
1327: ldc           #85
1329: invokevirtual #86
1332: aload         33
1334: invokevirtual #87
1337: ldc           #88
1339: invokevirtual #86
1342: getstatic     #329
1345: invokevirtual #87
1348: ldc           #85
1350: invokevirtual #86
1353: invokevirtual #89
1356: aload         33
1358: getstatic     #329
1361: invokevirtual #90
1364: invokestatic  #91
1367: new           #83
1370: dup
1371: invokespecial #84
1374: ldc           #85
1376: invokevirtual #86
1379: aload         34
1381: invokevirtual #87
1384: ldc           #88
1386: invokevirtual #86
1389: getstatic     #330
1392: invokevirtual #87
1395: ldc           #85
1397: invokevirtual #86
1400: invokevirtual #89
1403: aload         34
1405: getstatic     #330
1408: invokevirtual #90
1411: invokestatic  #91
1414: new           #83
1417: dup
1418: invokespecial #84
1421: ldc           #85
1423: invokevirtual #86
1426: aload         35
1428: invokevirtual #87
1431: ldc           #88
1433: invokevirtual #86
1436: getstatic     #331
1439: invokevirtual #87
1442: ldc           #85
1444: invokevirtual #86
1447: invokevirtual #89
1450: aload         35
1452: getstatic     #331
1455: invokevirtual #90
1458: invokestatic  #91
1461: new           #83
1464: dup
1465: invokespecial #84
1468: ldc           #85
1470: invokevirtual #86
1473: aload         36
1475: invokevirtual #87
1478: ldc           #88
1480: invokevirtual #86
1483: getstatic     #332
1486: invokevirtual #87
1489: ldc           #85
1491: invokevirtual #86
1494: invokevirtual #89
1497: aload         36
1499: getstatic     #332
1502: invokevirtual #90
1505: invokestatic  #91
1508: aload         37
1510: invokestatic  #20
1513: aload         37
1515: invokestatic  #92
1518: ldc_w         #336
1521: invokestatic  #23
1524: aload         37
1526: invokestatic  #93
1529: ldc_w         #336
1532: invokestatic  #23
1535: new           #83
1538: dup
1539: invokespecial #84
1542: ldc           #85
1544: invokevirtual #86
1547: aload         39
1549: invokevirtual #87
1552: ldc           #88
1554: invokevirtual #86
1557: getstatic     #527
1560: invokevirtual #87
1563: ldc           #85
1565: invokevirtual #86
1568: invokevirtual #89
1571: aload         39
1573: getstatic     #527
1576: invokevirtual #90
1579: invokestatic  #91
1582: new           #83
1585: dup
1586: invokespecial #84
1589: ldc           #85
1591: invokevirtual #86
1594: aload         42
1596: invokevirtual #87
1599: ldc           #88
1601: invokevirtual #86
1604: getstatic     #254
1607: invokevirtual #87
1610: ldc           #85
1612: invokevirtual #86
1615: invokevirtual #89
1618: aload         42
1620: getstatic     #254
1623: invokevirtual #90
1626: invokestatic  #91
1629: aload         45
1631: invokestatic  #20
1634: aload         46
1636: invokestatic  #20
1639: aload         47
1641: invokestatic  #20
1644: aload         49
1646: invokestatic  #171
1649: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test250
Start line: 7297
End line: 7316
Method source code: 
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint13 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) (-1), (double) 1);
        double double14 = weightedObservedPoint13.getX();
        double double15 = weightedObservedPoint13.getWeight();
        double double16 = weightedObservedPoint13.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint13);
        double double18 = weightedObservedPoint13.getY();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.0d) + "'", double14 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 35.0d + "'", double15 == 35.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #531
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: new           #145
65: dup
66: ldc2_w        #14
69: ldc2_w        #10
72: dconst_1
73: invokespecial #146
76: astore        4
78: aload         4
80: invokevirtual #147
83: dstore        5
85: aload         4
87: invokevirtual #148
90: dstore        7
92: aload         4
94: invokevirtual #149
97: dstore        9
99: aload_2
100: aload         4
102: invokevirtual #123
105: aload         4
107: invokevirtual #149
110: dstore        11
112: aload_3
113: invokestatic  #20
116: new           #83
119: dup
120: invokespecial #84
123: ldc           #85
125: invokevirtual #86
128: dload         5
130: invokevirtual #150
133: ldc           #88
135: invokevirtual #86
138: ldc2_w        #10
141: invokevirtual #150
144: ldc           #85
146: invokevirtual #86
149: invokevirtual #89
152: dload         5
154: ldc2_w        #10
157: dcmpl
158: ifne          165
161: iconst_1
162: goto          166
165: iconst_0
166: invokestatic  #91
169: new           #83
172: dup
173: invokespecial #84
176: ldc           #85
178: invokevirtual #86
181: dload         7
183: invokevirtual #150
186: ldc           #88
188: invokevirtual #86
191: ldc2_w        #14
194: invokevirtual #150
197: ldc           #85
199: invokevirtual #86
202: invokevirtual #89
205: dload         7
207: ldc2_w        #14
210: dcmpl
211: ifne          218
214: iconst_1
215: goto          219
218: iconst_0
219: invokestatic  #91
222: new           #83
225: dup
226: invokespecial #84
229: ldc           #85
231: invokevirtual #86
234: dload         9
236: invokevirtual #150
239: ldc           #88
241: invokevirtual #86
244: dconst_1
245: invokevirtual #150
248: ldc           #85
250: invokevirtual #86
253: invokevirtual #89
256: dload         9
258: dconst_1
259: dcmpl
260: ifne          267
263: iconst_1
264: goto          268
267: iconst_0
268: invokestatic  #91
271: new           #83
274: dup
275: invokespecial #84
278: ldc           #85
280: invokevirtual #86
283: dload         11
285: invokevirtual #150
288: ldc           #88
290: invokevirtual #86
293: dconst_1
294: invokevirtual #150
297: ldc           #85
299: invokevirtual #86
302: invokevirtual #89
305: dload         11
307: dconst_1
308: dcmpl
309: ifne          316
312: iconst_1
313: goto          317
316: iconst_0
317: invokestatic  #91
320: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test251
Start line: 7319
End line: 7338
Method source code: 
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint19 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter8.addObservedPoint(weightedObservedPoint19);
        harmonicFitter1.addObservedPoint(weightedObservedPoint19);
        double double22 = weightedObservedPoint19.getX();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #532
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aconst_null
53: astore        4
55: new           #8
58: dup
59: aload         4
61: invokespecial #9
64: astore        5
66: aload         5
68: dconst_1
69: ldc2_w        #32
72: invokevirtual #43
75: aload         5
77: dconst_0
78: ldc2_w        #34
81: invokevirtual #43
84: aload         5
86: invokevirtual #25
89: astore        6
91: new           #145
94: dup
95: dconst_1
96: dconst_0
97: ldc2_w        #34
100: invokespecial #146
103: astore        7
105: aload         5
107: aload         7
109: invokevirtual #123
112: aload_2
113: aload         7
115: invokevirtual #123
118: aload         7
120: invokevirtual #147
123: dstore        8
125: aload_3
126: invokestatic  #20
129: aload         6
131: invokestatic  #20
134: new           #83
137: dup
138: invokespecial #84
141: ldc           #85
143: invokevirtual #86
146: dload         8
148: invokevirtual #150
151: ldc           #88
153: invokevirtual #86
156: dconst_0
157: invokevirtual #150
160: ldc           #85
162: invokevirtual #86
165: invokevirtual #89
168: dload         8
170: dconst_0
171: dcmpl
172: ifne          179
175: iconst_1
176: goto          180
179: iconst_0
180: invokestatic  #91
183: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test252
Start line: 7341
End line: 7419
Method source code: 
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED;
        java.lang.Number number6 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException8 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number6, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException8, (org.apache.commons.math3.exception.util.Localizable) localizedFormats9, objArray10);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException12 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats4, objArray10);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext13 = mathIllegalStateException12.getContext();
        java.util.Set<java.lang.String> strSet14 = exceptionContext13.getKeys();
        java.lang.Number number17 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException19 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number17, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException22 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException19, (org.apache.commons.math3.exception.util.Localizable) localizedFormats20, objArray21);
        boolean boolean23 = numberIsTooSmallException19.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext24 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException19);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats25 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats26 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray28 = new java.lang.Object[] { localizedFormats26, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException29 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, objArray28);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats31 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray33 = new java.lang.Object[] { localizedFormats31, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException34 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats30, objArray33);
        mathIllegalArgumentException29.addSuppressed((java.lang.Throwable) mathIllegalArgumentException34);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext36 = mathIllegalArgumentException29.getContext();
        java.lang.Object obj38 = exceptionContext36.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats39 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer40 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter41 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer40);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray42 = harmonicFitter41.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray43 = harmonicFitter41.getObservations();
        exceptionContext36.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats39, (java.lang.Object[]) weightedObservedPointArray43);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats45 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer46 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter47 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer46);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray48 = harmonicFitter47.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException49 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats45, (java.lang.Object[]) weightedObservedPointArray48);
        exceptionContext24.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats39, (java.lang.Object[]) weightedObservedPointArray48);
        exceptionContext13.setValue("string \"{0}\" unparseable (from position {1}) as an object of type {2}", (java.lang.Object) exceptionContext24);
        java.lang.Throwable throwable52 = exceptionContext13.getThrowable();
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED));
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(exceptionContext13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats25 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats25.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats26 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats26.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats31 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats31.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext36);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + localizedFormats39 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats39.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray42);
        org.junit.Assert.assertNotNull(weightedObservedPointArray43);
        org.junit.Assert.assertTrue("'" + localizedFormats45 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats45.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray48);
        org.junit.Assert.assertNotNull(throwable52);
        org.junit.Assert.assertEquals(throwable52.getLocalizedMessage(), "trust region step has failed to reduce Q");
        org.junit.Assert.assertEquals(throwable52.getMessage(), "trust region step has failed to reduce Q");
        org.junit.Assert.assertEquals(throwable52.toString(), "org.apache.commons.math3.exception.MathIllegalStateException: trust region step has failed to reduce Q");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #533
20: aastore
21: invokevirtual #7
24: pop
25: new           #28
28: dup
29: ldc2_w        #277
32: invokestatic  #129
35: bipush        10
37: invokestatic  #159
40: iconst_1
41: invokespecial #160
44: astore_1
45: getstatic     #279
48: astore_2
49: aconst_null
50: astore_3
51: new           #28
54: dup
55: bipush        100
57: invokestatic  #159
60: aload_3
61: iconst_0
62: invokespecial #160
65: astore        4
67: getstatic     #161
70: astore        5
72: iconst_0
73: anewarray     #5
76: astore        6
78: new           #136
81: dup
82: aload         4
84: aload         5
86: aload         6
88: invokespecial #137
91: astore        7
93: new           #136
96: dup
97: aload_1
98: aload_2
99: aload         6
101: invokespecial #137
104: astore        8
106: aload         8
108: invokevirtual #282
111: astore        9
113: aload         9
115: invokevirtual #370
118: astore        10
120: aconst_null
121: astore        11
123: new           #28
126: dup
127: bipush        100
129: invokestatic  #159
132: aload         11
134: iconst_0
135: invokespecial #160
138: astore        12
140: getstatic     #161
143: astore        13
145: iconst_0
146: anewarray     #5
149: astore        14
151: new           #136
154: dup
155: aload         12
157: aload         13
159: aload         14
161: invokespecial #137
164: astore        15
166: aload         12
168: invokevirtual #162
171: istore        16
173: new           #163
176: dup
177: aload         12
179: invokespecial #164
182: astore        17
184: getstatic     #127
187: astore        18
189: getstatic     #128
192: astore        19
194: iconst_2
195: anewarray     #5
198: dup
199: iconst_0
200: aload         19
202: aastore
203: dup
204: iconst_1
205: lconst_1
206: invokestatic  #129
209: aastore
210: astore        20
212: new           #130
215: dup
216: aload         18
218: aload         20
220: invokespecial #131
223: astore        21
225: getstatic     #127
228: astore        22
230: getstatic     #128
233: astore        23
235: iconst_2
236: anewarray     #5
239: dup
240: iconst_0
241: aload         23
243: aastore
244: dup
245: iconst_1
246: lconst_1
247: invokestatic  #129
250: aastore
251: astore        24
253: new           #130
256: dup
257: aload         22
259: aload         24
261: invokespecial #131
264: astore        25
266: aload         21
268: aload         25
270: invokevirtual #132
273: aload         21
275: invokevirtual #165
278: astore        26
280: aload         26
282: ldc           #166
284: invokevirtual #167
287: astore        27
289: getstatic     #168
292: astore        28
294: aconst_null
295: astore        29
297: new           #8
300: dup
301: aload         29
303: invokespecial #9
306: astore        30
308: aload         30
310: invokevirtual #25
313: astore        31
315: aload         30
317: invokevirtual #25
320: astore        32
322: aload         26
324: aload         28
326: aload         32
328: checkcast     #79
331: invokevirtual #169
334: getstatic     #156
337: astore        33
339: aconst_null
340: astore        34
342: new           #8
345: dup
346: aload         34
348: invokespecial #9
351: astore        35
353: aload         35
355: invokevirtual #25
358: astore        36
360: new           #81
363: dup
364: aload         33
366: aload         36
368: checkcast     #79
371: invokespecial #82
374: astore        37
376: aload         17
378: aload         28
380: aload         36
382: checkcast     #79
385: invokevirtual #169
388: aload         9
390: ldc_w         #534
393: aload         17
395: invokevirtual #373
398: aload         9
400: invokevirtual #288
403: astore        38
405: new           #83
408: dup
409: invokespecial #84
412: ldc           #85
414: invokevirtual #86
417: aload_2
418: invokevirtual #87
421: ldc           #88
423: invokevirtual #86
426: getstatic     #279
429: invokevirtual #87
432: ldc           #85
434: invokevirtual #86
437: invokevirtual #89
440: aload_2
441: getstatic     #279
444: invokevirtual #90
447: invokestatic  #91
450: new           #83
453: dup
454: invokespecial #84
457: ldc           #85
459: invokevirtual #86
462: aload         5
464: invokevirtual #87
467: ldc           #88
469: invokevirtual #86
472: getstatic     #161
475: invokevirtual #87
478: ldc           #85
480: invokevirtual #86
483: invokevirtual #89
486: aload         5
488: getstatic     #161
491: invokevirtual #90
494: invokestatic  #91
497: aload         6
499: invokestatic  #20
502: aload         6
504: invokestatic  #92
507: ldc           #74
509: invokestatic  #23
512: aload         6
514: invokestatic  #93
517: ldc           #74
519: invokestatic  #23
522: aload         9
524: invokestatic  #20
527: aload         10
529: invokestatic  #20
532: new           #83
535: dup
536: invokespecial #84
539: ldc           #85
541: invokevirtual #86
544: aload         13
546: invokevirtual #87
549: ldc           #88
551: invokevirtual #86
554: getstatic     #161
557: invokevirtual #87
560: ldc           #85
562: invokevirtual #86
565: invokevirtual #89
568: aload         13
570: getstatic     #161
573: invokevirtual #90
576: invokestatic  #91
579: aload         14
581: invokestatic  #20
584: aload         14
586: invokestatic  #92
589: ldc           #74
591: invokestatic  #23
594: aload         14
596: invokestatic  #93
599: ldc           #74
601: invokestatic  #23
604: new           #83
607: dup
608: invokespecial #84
611: ldc           #85
613: invokevirtual #86
616: iload         16
618: invokevirtual #170
621: ldc           #88
623: invokevirtual #86
626: iconst_0
627: invokevirtual #170
630: ldc           #85
632: invokevirtual #86
635: invokevirtual #89
638: iload         16
640: ifne          647
643: iconst_1
644: goto          648
647: iconst_0
648: invokestatic  #91
651: new           #83
654: dup
655: invokespecial #84
658: ldc           #85
660: invokevirtual #86
663: aload         18
665: invokevirtual #87
668: ldc           #88
670: invokevirtual #86
673: getstatic     #127
676: invokevirtual #87
679: ldc           #85
681: invokevirtual #86
684: invokevirtual #89
687: aload         18
689: getstatic     #127
692: invokevirtual #90
695: invokestatic  #91
698: new           #83
701: dup
702: invokespecial #84
705: ldc           #85
707: invokevirtual #86
710: aload         19
712: invokevirtual #87
715: ldc           #88
717: invokevirtual #86
720: getstatic     #128
723: invokevirtual #87
726: ldc           #85
728: invokevirtual #86
731: invokevirtual #89
734: aload         19
736: getstatic     #128
739: invokevirtual #90
742: invokestatic  #91
745: aload         20
747: invokestatic  #20
750: aload         20
752: invokestatic  #92
755: ldc           #140
757: invokestatic  #23
760: aload         20
762: invokestatic  #93
765: ldc           #140
767: invokestatic  #23
770: new           #83
773: dup
774: invokespecial #84
777: ldc           #85
779: invokevirtual #86
782: aload         22
784: invokevirtual #87
787: ldc           #88
789: invokevirtual #86
792: getstatic     #127
795: invokevirtual #87
798: ldc           #85
800: invokevirtual #86
803: invokevirtual #89
806: aload         22
808: getstatic     #127
811: invokevirtual #90
814: invokestatic  #91
817: new           #83
820: dup
821: invokespecial #84
824: ldc           #85
826: invokevirtual #86
829: aload         23
831: invokevirtual #87
834: ldc           #88
836: invokevirtual #86
839: getstatic     #128
842: invokevirtual #87
845: ldc           #85
847: invokevirtual #86
850: invokevirtual #89
853: aload         23
855: getstatic     #128
858: invokevirtual #90
861: invokestatic  #91
864: aload         24
866: invokestatic  #20
869: aload         24
871: invokestatic  #92
874: ldc           #140
876: invokestatic  #23
879: aload         24
881: invokestatic  #93
884: ldc           #140
886: invokestatic  #23
889: aload         26
891: invokestatic  #20
894: aload         27
896: invokestatic  #171
899: new           #83
902: dup
903: invokespecial #84
906: ldc           #85
908: invokevirtual #86
911: aload         28
913: invokevirtual #87
916: ldc           #88
918: invokevirtual #86
921: getstatic     #168
924: invokevirtual #87
927: ldc           #85
929: invokevirtual #86
932: invokevirtual #89
935: aload         28
937: getstatic     #168
940: invokevirtual #90
943: invokestatic  #91
946: aload         31
948: invokestatic  #20
951: aload         32
953: invokestatic  #20
956: new           #83
959: dup
960: invokespecial #84
963: ldc           #85
965: invokevirtual #86
968: aload         33
970: invokevirtual #87
973: ldc           #88
975: invokevirtual #86
978: getstatic     #156
981: invokevirtual #87
984: ldc           #85
986: invokevirtual #86
989: invokevirtual #89
992: aload         33
994: getstatic     #156
997: invokevirtual #90
1000: invokestatic  #91
1003: aload         36
1005: invokestatic  #20
1008: aload         38
1010: invokestatic  #20
1013: aload         38
1015: invokevirtual #289
1018: ldc_w         #535
1021: invokestatic  #23
1024: aload         38
1026: invokevirtual #291
1029: ldc_w         #535
1032: invokestatic  #23
1035: aload         38
1037: invokevirtual #292
1040: ldc_w         #536
1043: invokestatic  #23
1046: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test253
Start line: 7422
End line: 7440
Method source code: 
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint10 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint(0.0d, (double) 1.0f, 35.0d);
        harmonicFitter1.addObservedPoint(weightedObservedPoint10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (-1L), 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 2 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #537
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: invokevirtual #59
52: new           #145
55: dup
56: dconst_0
57: dconst_1
58: ldc2_w        #14
61: invokespecial #146
64: astore_3
65: aload_2
66: aload_3
67: invokevirtual #123
70: aload_2
71: dconst_0
72: ldc2_w        #10
75: dconst_0
76: invokevirtual #54
79: aload_2
80: invokevirtual #26
83: astore        4
85: ldc           #186
87: invokestatic  #18
90: goto          95
93: astore        4
95: return
Exception table:
from    to  target type
79    90    93   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test254
Start line: 7443
End line: 7463
Method source code: 
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser11 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 2 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #538
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: invokevirtual #25
61: astore        4
63: aload_2
64: invokevirtual #25
67: astore        5
69: new           #69
72: dup
73: aload         5
75: invokespecial #70
78: astore        6
80: ldc           #186
82: invokestatic  #18
85: goto          90
88: astore        6
90: aload_3
91: invokestatic  #20
94: aload         4
96: invokestatic  #20
99: aload         5
101: invokestatic  #20
104: return
Exception table:
from    to  target type
69    85    88   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test255
Start line: 7466
End line: 7475
Method source code: 
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) '#', (double) 0L);
        harmonicFitter1.addObservedPoint(52.0d, 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #539
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: ldc2_w        #14
56: dconst_0
57: invokevirtual #43
60: aload_2
61: ldc2_w        #12
64: dconst_0
65: invokevirtual #43
68: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test256
Start line: 7478
End line: 7504
Method source code: 
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint13 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double14 = weightedObservedPoint13.getWeight();
        double double15 = weightedObservedPoint13.getX();
        double double16 = weightedObservedPoint13.getWeight();
        double double17 = weightedObservedPoint13.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint13);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 3 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 35.0d + "'", double14 == 35.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 35.0d + "'", double16 == 35.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #540
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: new           #145
65: dup
66: ldc2_w        #14
69: ldc2_w        #12
72: ldc2_w        #12
75: invokespecial #146
78: astore        4
80: aload         4
82: invokevirtual #148
85: dstore        5
87: aload         4
89: invokevirtual #147
92: dstore        7
94: aload         4
96: invokevirtual #148
99: dstore        9
101: aload         4
103: invokevirtual #148
106: dstore        11
108: aload_2
109: aload         4
111: invokevirtual #123
114: aload_2
115: invokevirtual #26
118: astore        13
120: ldc           #176
122: invokestatic  #18
125: goto          130
128: astore        13
130: aload_3
131: invokestatic  #20
134: new           #83
137: dup
138: invokespecial #84
141: ldc           #85
143: invokevirtual #86
146: dload         5
148: invokevirtual #150
151: ldc           #88
153: invokevirtual #86
156: ldc2_w        #14
159: invokevirtual #150
162: ldc           #85
164: invokevirtual #86
167: invokevirtual #89
170: dload         5
172: ldc2_w        #14
175: dcmpl
176: ifne          183
179: iconst_1
180: goto          184
183: iconst_0
184: invokestatic  #91
187: new           #83
190: dup
191: invokespecial #84
194: ldc           #85
196: invokevirtual #86
199: dload         7
201: invokevirtual #150
204: ldc           #88
206: invokevirtual #86
209: ldc2_w        #12
212: invokevirtual #150
215: ldc           #85
217: invokevirtual #86
220: invokevirtual #89
223: dload         7
225: ldc2_w        #12
228: dcmpl
229: ifne          236
232: iconst_1
233: goto          237
236: iconst_0
237: invokestatic  #91
240: new           #83
243: dup
244: invokespecial #84
247: ldc           #85
249: invokevirtual #86
252: dload         9
254: invokevirtual #150
257: ldc           #88
259: invokevirtual #86
262: ldc2_w        #14
265: invokevirtual #150
268: ldc           #85
270: invokevirtual #86
273: invokevirtual #89
276: dload         9
278: ldc2_w        #14
281: dcmpl
282: ifne          289
285: iconst_1
286: goto          290
289: iconst_0
290: invokestatic  #91
293: new           #83
296: dup
297: invokespecial #84
300: ldc           #85
302: invokevirtual #86
305: dload         11
307: invokevirtual #150
310: ldc           #88
312: invokevirtual #86
315: ldc2_w        #14
318: invokevirtual #150
321: ldc           #85
323: invokevirtual #86
326: invokevirtual #89
329: dload         11
331: ldc2_w        #14
334: dcmpl
335: ifne          342
338: iconst_1
339: goto          343
342: iconst_0
343: invokestatic  #91
346: return
Exception table:
from    to  target type
114   125   128   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test257
Start line: 7507
End line: 7522
Method source code: 
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint10 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint(0.0d, (double) 1.0f, 35.0d);
        harmonicFitter1.addObservedPoint(weightedObservedPoint10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (-1L), 0.0d);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray16 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray17 = harmonicFitter1.getObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray16);
        org.junit.Assert.assertNotNull(weightedObservedPointArray17);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #541
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: invokevirtual #59
52: new           #145
55: dup
56: dconst_0
57: dconst_1
58: ldc2_w        #14
61: invokespecial #146
64: astore_3
65: aload_2
66: aload_3
67: invokevirtual #123
70: aload_2
71: dconst_0
72: ldc2_w        #10
75: dconst_0
76: invokevirtual #54
79: aload_2
80: invokevirtual #25
83: astore        4
85: aload_2
86: invokevirtual #25
89: astore        5
91: aload         4
93: invokestatic  #20
96: aload         5
98: invokestatic  #20
101: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test258
Start line: 7525
End line: 7554
Method source code: 
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.addObservedPoint((double) 0, (double) (short) 100, (double) (short) 0);
        harmonicFitter1.addObservedPoint(10.0d, (-1.0d), 1.0d);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray23 = harmonicFitter1.getObservations();
        java.lang.Object[] objArray24 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray23);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #542
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: dconst_0
105: ldc2_w        #34
108: dconst_0
109: invokevirtual #54
112: aload_2
113: ldc2_w        #32
116: ldc2_w        #10
119: dconst_1
120: invokevirtual #54
123: aload_2
124: invokevirtual #59
127: aload_2
128: invokevirtual #25
131: astore        14
133: aload         14
135: checkcast     #79
138: invokestatic  #80
141: astore        15
143: aload_3
144: invokestatic  #20
147: aload         4
149: invokestatic  #20
152: new           #83
155: dup
156: invokespecial #84
159: ldc           #85
161: invokevirtual #86
164: dload         6
166: invokevirtual #150
169: ldc           #88
171: invokevirtual #86
174: ldc2_w        #12
177: invokevirtual #150
180: ldc           #85
182: invokevirtual #86
185: invokevirtual #89
188: dload         6
190: ldc2_w        #12
193: dcmpl
194: ifne          201
197: iconst_1
198: goto          202
201: iconst_0
202: invokestatic  #91
205: new           #83
208: dup
209: invokespecial #84
212: ldc           #85
214: invokevirtual #86
217: dload         8
219: invokevirtual #150
222: ldc           #88
224: invokevirtual #86
227: ldc2_w        #14
230: invokevirtual #150
233: ldc           #85
235: invokevirtual #86
238: invokevirtual #89
241: dload         8
243: ldc2_w        #14
246: dcmpl
247: ifne          254
250: iconst_1
251: goto          255
254: iconst_0
255: invokestatic  #91
258: new           #83
261: dup
262: invokespecial #84
265: ldc           #85
267: invokevirtual #86
270: dload         10
272: invokevirtual #150
275: ldc           #88
277: invokevirtual #86
280: ldc2_w        #14
283: invokevirtual #150
286: ldc           #85
288: invokevirtual #86
291: invokevirtual #89
294: dload         10
296: ldc2_w        #14
299: dcmpl
300: ifne          307
303: iconst_1
304: goto          308
307: iconst_0
308: invokestatic  #91
311: new           #83
314: dup
315: invokespecial #84
318: ldc           #85
320: invokevirtual #86
323: dload         12
325: invokevirtual #150
328: ldc           #88
330: invokevirtual #86
333: ldc2_w        #12
336: invokevirtual #150
339: ldc           #85
341: invokevirtual #86
344: invokevirtual #89
347: dload         12
349: ldc2_w        #12
352: dcmpl
353: ifne          360
356: iconst_1
357: goto          361
360: iconst_0
361: invokestatic  #91
364: aload         14
366: invokestatic  #20
369: aload         15
371: invokestatic  #20
374: aload         15
376: invokestatic  #92
379: ldc           #74
381: invokestatic  #23
384: aload         15
386: invokestatic  #93
389: ldc           #74
391: invokestatic  #23
394: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test259
Start line: 7557
End line: 7580
Method source code: 
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 100, (double) (short) 0, 10.0d);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric9 = null;
        double[] doubleArray13 = new double[] { (byte) 1, (-1L), (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = harmonicFitter1.fit(parametric9, doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, -1.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #543
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #25
45: astore        4
47: aload_2
48: invokevirtual #25
51: astore        5
53: aload_2
54: ldc2_w        #34
57: dconst_0
58: ldc2_w        #32
61: invokevirtual #54
64: aconst_null
65: astore        6
67: iconst_3
68: newarray       double
70: dup
71: iconst_0
72: dconst_1
73: dastore
74: dup
75: iconst_1
76: ldc2_w        #10
79: dastore
80: dup
81: iconst_2
82: dconst_1
83: dastore
84: astore        7
86: aload_2
87: aload         6
89: aload         7
91: invokevirtual #30
94: astore        8
96: ldc           #17
98: invokestatic  #18
101: goto          106
104: astore        8
106: aload_3
107: invokestatic  #20
110: aload         4
112: invokestatic  #20
115: aload         5
117: invokestatic  #20
120: aload         7
122: invokestatic  #20
125: aload         7
127: invokestatic  #21
130: ldc_w         #544
133: invokestatic  #23
136: return
Exception table:
from    to  target type
86   101   104   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test260
Start line: 7583
End line: 7623
Method source code: 
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 1, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray14 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint18 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double19 = weightedObservedPoint18.getWeight();
        double double20 = weightedObservedPoint18.getX();
        double double21 = weightedObservedPoint18.getWeight();
        double double22 = weightedObservedPoint18.getWeight();
        double double23 = weightedObservedPoint18.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint18);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer25 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter26 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer25);
        harmonicFitter26.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter26.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter26.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray34 = harmonicFitter26.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint38 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double39 = weightedObservedPoint38.getX();
        harmonicFitter26.addObservedPoint(weightedObservedPoint38);
        harmonicFitter1.addObservedPoint(weightedObservedPoint38);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray14);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray34);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #545
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: invokevirtual #25
61: astore        4
63: aload_2
64: invokevirtual #25
67: astore        5
69: aload_2
70: dconst_1
71: ldc2_w        #10
74: invokevirtual #43
77: aload_2
78: invokevirtual #25
81: astore        6
83: new           #145
86: dup
87: ldc2_w        #14
90: ldc2_w        #12
93: ldc2_w        #12
96: invokespecial #146
99: astore        7
101: aload         7
103: invokevirtual #148
106: dstore        8
108: aload         7
110: invokevirtual #147
113: dstore        10
115: aload         7
117: invokevirtual #148
120: dstore        12
122: aload         7
124: invokevirtual #148
127: dstore        14
129: aload         7
131: invokevirtual #147
134: dstore        16
136: aload_2
137: aload         7
139: invokevirtual #123
142: aconst_null
143: astore        18
145: new           #8
148: dup
149: aload         18
151: invokespecial #9
154: astore        19
156: aload         19
158: dconst_1
159: ldc2_w        #32
162: invokevirtual #43
165: aload         19
167: dconst_0
168: ldc2_w        #34
171: invokevirtual #43
174: aload         19
176: invokevirtual #59
179: aload         19
181: invokevirtual #25
184: astore        20
186: new           #145
189: dup
190: ldc2_w        #14
193: ldc2_w        #12
196: ldc2_w        #12
199: invokespecial #146
202: astore        21
204: aload         21
206: invokevirtual #147
209: dstore        22
211: aload         19
213: aload         21
215: invokevirtual #123
218: aload_2
219: aload         21
221: invokevirtual #123
224: aload_3
225: invokestatic  #20
228: aload         4
230: invokestatic  #20
233: aload         5
235: invokestatic  #20
238: aload         6
240: invokestatic  #20
243: new           #83
246: dup
247: invokespecial #84
250: ldc           #85
252: invokevirtual #86
255: dload         8
257: invokevirtual #150
260: ldc           #88
262: invokevirtual #86
265: ldc2_w        #14
268: invokevirtual #150
271: ldc           #85
273: invokevirtual #86
276: invokevirtual #89
279: dload         8
281: ldc2_w        #14
284: dcmpl
285: ifne          292
288: iconst_1
289: goto          293
292: iconst_0
293: invokestatic  #91
296: new           #83
299: dup
300: invokespecial #84
303: ldc           #85
305: invokevirtual #86
308: dload         10
310: invokevirtual #150
313: ldc           #88
315: invokevirtual #86
318: ldc2_w        #12
321: invokevirtual #150
324: ldc           #85
326: invokevirtual #86
329: invokevirtual #89
332: dload         10
334: ldc2_w        #12
337: dcmpl
338: ifne          345
341: iconst_1
342: goto          346
345: iconst_0
346: invokestatic  #91
349: new           #83
352: dup
353: invokespecial #84
356: ldc           #85
358: invokevirtual #86
361: dload         12
363: invokevirtual #150
366: ldc           #88
368: invokevirtual #86
371: ldc2_w        #14
374: invokevirtual #150
377: ldc           #85
379: invokevirtual #86
382: invokevirtual #89
385: dload         12
387: ldc2_w        #14
390: dcmpl
391: ifne          398
394: iconst_1
395: goto          399
398: iconst_0
399: invokestatic  #91
402: new           #83
405: dup
406: invokespecial #84
409: ldc           #85
411: invokevirtual #86
414: dload         14
416: invokevirtual #150
419: ldc           #88
421: invokevirtual #86
424: ldc2_w        #14
427: invokevirtual #150
430: ldc           #85
432: invokevirtual #86
435: invokevirtual #89
438: dload         14
440: ldc2_w        #14
443: dcmpl
444: ifne          451
447: iconst_1
448: goto          452
451: iconst_0
452: invokestatic  #91
455: new           #83
458: dup
459: invokespecial #84
462: ldc           #85
464: invokevirtual #86
467: dload         16
469: invokevirtual #150
472: ldc           #88
474: invokevirtual #86
477: ldc2_w        #12
480: invokevirtual #150
483: ldc           #85
485: invokevirtual #86
488: invokevirtual #89
491: dload         16
493: ldc2_w        #12
496: dcmpl
497: ifne          504
500: iconst_1
501: goto          505
504: iconst_0
505: invokestatic  #91
508: aload         20
510: invokestatic  #20
513: new           #83
516: dup
517: invokespecial #84
520: ldc           #85
522: invokevirtual #86
525: dload         22
527: invokevirtual #150
530: ldc           #88
532: invokevirtual #86
535: ldc2_w        #12
538: invokevirtual #150
541: ldc           #85
543: invokevirtual #86
546: invokevirtual #89
549: dload         22
551: ldc2_w        #12
554: dcmpl
555: ifne          562
558: iconst_1
559: goto          563
562: iconst_0
563: invokestatic  #91
566: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test261
Start line: 7626
End line: 7643
Method source code: 
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 1, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray14 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray14);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #546
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: invokevirtual #25
61: astore        4
63: aload_2
64: invokevirtual #25
67: astore        5
69: aload_2
70: dconst_1
71: ldc2_w        #10
74: invokevirtual #43
77: aload_2
78: invokevirtual #25
81: astore        6
83: aload_2
84: invokevirtual #59
87: aload_3
88: invokestatic  #20
91: aload         4
93: invokestatic  #20
96: aload         5
98: invokestatic  #20
101: aload         6
103: invokestatic  #20
106: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test262
Start line: 7646
End line: 7671
Method source code: 
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray13 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint17 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (-1), 35.0d, (double) (byte) 0);
        harmonicFitter1.addObservedPoint(weightedObservedPoint17);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric19 = null;
        double[] doubleArray24 = new double[] { (byte) 10, 100, 35.0d, 100.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray25 = harmonicFitter1.fit(parametric19, doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray13);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0, 100.0, 35.0, 100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #547
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: dconst_0
59: dconst_1
60: ldc2_w        #34
63: invokevirtual #54
66: aload_2
67: invokevirtual #25
70: astore        4
72: new           #145
75: dup
76: ldc2_w        #10
79: ldc2_w        #14
82: dconst_0
83: invokespecial #146
86: astore        5
88: aload_2
89: aload         5
91: invokevirtual #123
94: aconst_null
95: astore        6
97: iconst_4
98: newarray       double
100: dup
101: iconst_0
102: ldc2_w        #32
105: dastore
106: dup
107: iconst_1
108: ldc2_w        #34
111: dastore
112: dup
113: iconst_2
114: ldc2_w        #14
117: dastore
118: dup
119: iconst_3
120: ldc2_w        #34
123: dastore
124: astore        7
126: aload_2
127: aload         6
129: aload         7
131: invokevirtual #30
134: astore        8
136: ldc           #17
138: invokestatic  #18
141: goto          146
144: astore        8
146: aload_3
147: invokestatic  #20
150: aload         4
152: invokestatic  #20
155: aload         7
157: invokestatic  #20
160: aload         7
162: invokestatic  #21
165: ldc_w         #548
168: invokestatic  #23
171: return
Exception table:
from    to  target type
126   141   144   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test263
Start line: 7674
End line: 7771
Method source code: 
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Number) 1.0d, (java.lang.Number) (byte) 100, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray11 = new java.lang.Object[] { localizedFormats9, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException12 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats8, objArray11);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray16 = new java.lang.Object[] { localizedFormats14, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException17 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats13, objArray16);
        mathIllegalArgumentException12.addSuppressed((java.lang.Throwable) mathIllegalArgumentException17);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats19 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray22 = new java.lang.Object[] { localizedFormats20, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException23 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException17, (org.apache.commons.math3.exception.util.Localizable) localizedFormats19, objArray22);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException24 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats7, objArray22);
        java.lang.Object[] objArray25 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray22);
        org.apache.commons.math3.exception.ZeroException zeroException26 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats6, objArray25);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException27 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray25);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats28 = org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray32 = new java.lang.Object[] { localizedFormats30, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException33 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats29, objArray32);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats34 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats35 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray37 = new java.lang.Object[] { localizedFormats35, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException38 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats34, objArray37);
        mathIllegalArgumentException33.addSuppressed((java.lang.Throwable) mathIllegalArgumentException38);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats40 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats41 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray43 = new java.lang.Object[] { localizedFormats41, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException44 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException38, (org.apache.commons.math3.exception.util.Localizable) localizedFormats40, objArray43);
        java.lang.Object[] objArray45 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray43);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException46 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats28, objArray45);
        org.apache.commons.math3.exception.ZeroException zeroException47 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray45);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer48 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter49 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer48);
        harmonicFitter49.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter49.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter49.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray57 = harmonicFitter49.getObservations();
        java.lang.Object[] objArray58 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray57);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException59 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException4, (org.apache.commons.math3.exception.util.Localizable) localizedFormats5, (java.lang.Object[]) weightedObservedPointArray57);
        java.lang.Number number61 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException63 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, (java.lang.Number) 0L, number61, true);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY));
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats19 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats19.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats28 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED + "'", localizedFormats28.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED));
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats34 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats34.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats35 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats35.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats40 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats40.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats41 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats41.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(weightedObservedPointArray57);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #549
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #424
28: astore_1
29: new           #28
32: dup
33: aload_1
34: dconst_1
35: invokestatic  #247
38: bipush        100
40: invokestatic  #159
43: iconst_1
44: invokespecial #195
47: astore_2
48: getstatic     #425
51: astore_3
52: getstatic     #125
55: astore        4
57: getstatic     #126
60: astore        5
62: getstatic     #127
65: astore        6
67: getstatic     #128
70: astore        7
72: iconst_2
73: anewarray     #5
76: dup
77: iconst_0
78: aload         7
80: aastore
81: dup
82: iconst_1
83: lconst_1
84: invokestatic  #129
87: aastore
88: astore        8
90: new           #130
93: dup
94: aload         6
96: aload         8
98: invokespecial #131
101: astore        9
103: getstatic     #127
106: astore        10
108: getstatic     #128
111: astore        11
113: iconst_2
114: anewarray     #5
117: dup
118: iconst_0
119: aload         11
121: aastore
122: dup
123: iconst_1
124: lconst_1
125: invokestatic  #129
128: aastore
129: astore        12
131: new           #130
134: dup
135: aload         10
137: aload         12
139: invokespecial #131
142: astore        13
144: aload         9
146: aload         13
148: invokevirtual #132
151: getstatic     #133
154: astore        14
156: getstatic     #134
159: astore        15
161: iconst_2
162: anewarray     #5
165: dup
166: iconst_0
167: aload         15
169: aastore
170: dup
171: iconst_1
172: bipush        10
174: invokestatic  #135
177: aastore
178: astore        16
180: new           #136
183: dup
184: aload         13
186: aload         14
188: aload         16
190: invokespecial #137
193: astore        17
195: new           #136
198: dup
199: aload         5
201: aload         16
203: invokespecial #138
206: astore        18
208: aload         16
210: invokestatic  #80
213: astore        19
215: new           #81
218: dup
219: aload         4
221: aload         19
223: invokespecial #82
226: astore        20
228: new           #130
231: dup
232: aload_3
233: aload         19
235: invokespecial #131
238: astore        21
240: getstatic     #426
243: astore        22
245: getstatic     #127
248: astore        23
250: getstatic     #128
253: astore        24
255: iconst_2
256: anewarray     #5
259: dup
260: iconst_0
261: aload         24
263: aastore
264: dup
265: iconst_1
266: lconst_1
267: invokestatic  #129
270: aastore
271: astore        25
273: new           #130
276: dup
277: aload         23
279: aload         25
281: invokespecial #131
284: astore        26
286: getstatic     #127
289: astore        27
291: getstatic     #128
294: astore        28
296: iconst_2
297: anewarray     #5
300: dup
301: iconst_0
302: aload         28
304: aastore
305: dup
306: iconst_1
307: lconst_1
308: invokestatic  #129
311: aastore
312: astore        29
314: new           #130
317: dup
318: aload         27
320: aload         29
322: invokespecial #131
325: astore        30
327: aload         26
329: aload         30
331: invokevirtual #132
334: getstatic     #133
337: astore        31
339: getstatic     #134
342: astore        32
344: iconst_2
345: anewarray     #5
348: dup
349: iconst_0
350: aload         32
352: aastore
353: dup
354: iconst_1
355: bipush        10
357: invokestatic  #135
360: aastore
361: astore        33
363: new           #136
366: dup
367: aload         30
369: aload         31
371: aload         33
373: invokespecial #137
376: astore        34
378: aload         33
380: invokestatic  #80
383: astore        35
385: new           #136
388: dup
389: aload         22
391: aload         35
393: invokespecial #138
396: astore        36
398: new           #81
401: dup
402: aload_3
403: aload         35
405: invokespecial #82
408: astore        37
410: aconst_null
411: astore        38
413: new           #8
416: dup
417: aload         38
419: invokespecial #9
422: astore        39
424: aload         39
426: dconst_1
427: ldc2_w        #32
430: invokevirtual #43
433: aload         39
435: dconst_0
436: ldc2_w        #34
439: invokevirtual #43
442: aload         39
444: invokevirtual #59
447: aload         39
449: invokevirtual #25
452: astore        40
454: aload         40
456: checkcast     #79
459: invokestatic  #80
462: astore        41
464: new           #136
467: dup
468: aload_2
469: aload_3
470: aload         40
472: checkcast     #79
475: invokespecial #137
478: astore        42
480: aconst_null
481: astore        43
483: new           #28
486: dup
487: aload_3
488: lconst_0
489: invokestatic  #129
492: aload         43
494: iconst_1
495: invokespecial #195
498: astore        44
500: new           #83
503: dup
504: invokespecial #84
507: ldc           #85
509: invokevirtual #86
512: aload_1
513: invokevirtual #87
516: ldc           #88
518: invokevirtual #86
521: getstatic     #424
524: invokevirtual #87
527: ldc           #85
529: invokevirtual #86
532: invokevirtual #89
535: aload_1
536: getstatic     #424
539: invokevirtual #90
542: invokestatic  #91
545: new           #83
548: dup
549: invokespecial #84
552: ldc           #85
554: invokevirtual #86
557: aload_3
558: invokevirtual #87
561: ldc           #88
563: invokevirtual #86
566: getstatic     #425
569: invokevirtual #87
572: ldc           #85
574: invokevirtual #86
577: invokevirtual #89
580: aload_3
581: getstatic     #425
584: invokevirtual #90
587: invokestatic  #91
590: new           #83
593: dup
594: invokespecial #84
597: ldc           #85
599: invokevirtual #86
602: aload         4
604: invokevirtual #87
607: ldc           #88
609: invokevirtual #86
612: getstatic     #125
615: invokevirtual #87
618: ldc           #85
620: invokevirtual #86
623: invokevirtual #89
626: aload         4
628: getstatic     #125
631: invokevirtual #90
634: invokestatic  #91
637: new           #83
640: dup
641: invokespecial #84
644: ldc           #85
646: invokevirtual #86
649: aload         5
651: invokevirtual #87
654: ldc           #88
656: invokevirtual #86
659: getstatic     #126
662: invokevirtual #87
665: ldc           #85
667: invokevirtual #86
670: invokevirtual #89
673: aload         5
675: getstatic     #126
678: invokevirtual #90
681: invokestatic  #91
684: new           #83
687: dup
688: invokespecial #84
691: ldc           #85
693: invokevirtual #86
696: aload         6
698: invokevirtual #87
701: ldc           #88
703: invokevirtual #86
706: getstatic     #127
709: invokevirtual #87
712: ldc           #85
714: invokevirtual #86
717: invokevirtual #89
720: aload         6
722: getstatic     #127
725: invokevirtual #90
728: invokestatic  #91
731: new           #83
734: dup
735: invokespecial #84
738: ldc           #85
740: invokevirtual #86
743: aload         7
745: invokevirtual #87
748: ldc           #88
750: invokevirtual #86
753: getstatic     #128
756: invokevirtual #87
759: ldc           #85
761: invokevirtual #86
764: invokevirtual #89
767: aload         7
769: getstatic     #128
772: invokevirtual #90
775: invokestatic  #91
778: aload         8
780: invokestatic  #20
783: aload         8
785: invokestatic  #92
788: ldc           #140
790: invokestatic  #23
793: aload         8
795: invokestatic  #93
798: ldc           #140
800: invokestatic  #23
803: new           #83
806: dup
807: invokespecial #84
810: ldc           #85
812: invokevirtual #86
815: aload         10
817: invokevirtual #87
820: ldc           #88
822: invokevirtual #86
825: getstatic     #127
828: invokevirtual #87
831: ldc           #85
833: invokevirtual #86
836: invokevirtual #89
839: aload         10
841: getstatic     #127
844: invokevirtual #90
847: invokestatic  #91
850: new           #83
853: dup
854: invokespecial #84
857: ldc           #85
859: invokevirtual #86
862: aload         11
864: invokevirtual #87
867: ldc           #88
869: invokevirtual #86
872: getstatic     #128
875: invokevirtual #87
878: ldc           #85
880: invokevirtual #86
883: invokevirtual #89
886: aload         11
888: getstatic     #128
891: invokevirtual #90
894: invokestatic  #91
897: aload         12
899: invokestatic  #20
902: aload         12
904: invokestatic  #92
907: ldc           #140
909: invokestatic  #23
912: aload         12
914: invokestatic  #93
917: ldc           #140
919: invokestatic  #23
922: new           #83
925: dup
926: invokespecial #84
929: ldc           #85
931: invokevirtual #86
934: aload         14
936: invokevirtual #87
939: ldc           #88
941: invokevirtual #86
944: getstatic     #133
947: invokevirtual #87
950: ldc           #85
952: invokevirtual #86
955: invokevirtual #89
958: aload         14
960: getstatic     #133
963: invokevirtual #90
966: invokestatic  #91
969: new           #83
972: dup
973: invokespecial #84
976: ldc           #85
978: invokevirtual #86
981: aload         15
983: invokevirtual #87
986: ldc           #88
988: invokevirtual #86
991: getstatic     #134
994: invokevirtual #87
997: ldc           #85
999: invokevirtual #86
1002: invokevirtual #89
1005: aload         15
1007: getstatic     #134
1010: invokevirtual #90
1013: invokestatic  #91
1016: aload         16
1018: invokestatic  #20
1021: aload         16
1023: invokestatic  #92
1026: ldc           #141
1028: invokestatic  #23
1031: aload         16
1033: invokestatic  #93
1036: ldc           #141
1038: invokestatic  #23
1041: aload         19
1043: invokestatic  #20
1046: aload         19
1048: invokestatic  #92
1051: ldc           #141
1053: invokestatic  #23
1056: aload         19
1058: invokestatic  #93
1061: ldc           #141
1063: invokestatic  #23
1066: new           #83
1069: dup
1070: invokespecial #84
1073: ldc           #85
1075: invokevirtual #86
1078: aload         22
1080: invokevirtual #87
1083: ldc           #88
1085: invokevirtual #86
1088: getstatic     #426
1091: invokevirtual #87
1094: ldc           #85
1096: invokevirtual #86
1099: invokevirtual #89
1102: aload         22
1104: getstatic     #426
1107: invokevirtual #90
1110: invokestatic  #91
1113: new           #83
1116: dup
1117: invokespecial #84
1120: ldc           #85
1122: invokevirtual #86
1125: aload         23
1127: invokevirtual #87
1130: ldc           #88
1132: invokevirtual #86
1135: getstatic     #127
1138: invokevirtual #87
1141: ldc           #85
1143: invokevirtual #86
1146: invokevirtual #89
1149: aload         23
1151: getstatic     #127
1154: invokevirtual #90
1157: invokestatic  #91
1160: new           #83
1163: dup
1164: invokespecial #84
1167: ldc           #85
1169: invokevirtual #86
1172: aload         24
1174: invokevirtual #87
1177: ldc           #88
1179: invokevirtual #86
1182: getstatic     #128
1185: invokevirtual #87
1188: ldc           #85
1190: invokevirtual #86
1193: invokevirtual #89
1196: aload         24
1198: getstatic     #128
1201: invokevirtual #90
1204: invokestatic  #91
1207: aload         25
1209: invokestatic  #20
1212: aload         25
1214: invokestatic  #92
1217: ldc           #140
1219: invokestatic  #23
1222: aload         25
1224: invokestatic  #93
1227: ldc           #140
1229: invokestatic  #23
1232: new           #83
1235: dup
1236: invokespecial #84
1239: ldc           #85
1241: invokevirtual #86
1244: aload         27
1246: invokevirtual #87
1249: ldc           #88
1251: invokevirtual #86
1254: getstatic     #127
1257: invokevirtual #87
1260: ldc           #85
1262: invokevirtual #86
1265: invokevirtual #89
1268: aload         27
1270: getstatic     #127
1273: invokevirtual #90
1276: invokestatic  #91
1279: new           #83
1282: dup
1283: invokespecial #84
1286: ldc           #85
1288: invokevirtual #86
1291: aload         28
1293: invokevirtual #87
1296: ldc           #88
1298: invokevirtual #86
1301: getstatic     #128
1304: invokevirtual #87
1307: ldc           #85
1309: invokevirtual #86
1312: invokevirtual #89
1315: aload         28
1317: getstatic     #128
1320: invokevirtual #90
1323: invokestatic  #91
1326: aload         29
1328: invokestatic  #20
1331: aload         29
1333: invokestatic  #92
1336: ldc           #140
1338: invokestatic  #23
1341: aload         29
1343: invokestatic  #93
1346: ldc           #140
1348: invokestatic  #23
1351: new           #83
1354: dup
1355: invokespecial #84
1358: ldc           #85
1360: invokevirtual #86
1363: aload         31
1365: invokevirtual #87
1368: ldc           #88
1370: invokevirtual #86
1373: getstatic     #133
1376: invokevirtual #87
1379: ldc           #85
1381: invokevirtual #86
1384: invokevirtual #89
1387: aload         31
1389: getstatic     #133
1392: invokevirtual #90
1395: invokestatic  #91
1398: new           #83
1401: dup
1402: invokespecial #84
1405: ldc           #85
1407: invokevirtual #86
1410: aload         32
1412: invokevirtual #87
1415: ldc           #88
1417: invokevirtual #86
1420: getstatic     #134
1423: invokevirtual #87
1426: ldc           #85
1428: invokevirtual #86
1431: invokevirtual #89
1434: aload         32
1436: getstatic     #134
1439: invokevirtual #90
1442: invokestatic  #91
1445: aload         33
1447: invokestatic  #20
1450: aload         33
1452: invokestatic  #92
1455: ldc           #141
1457: invokestatic  #23
1460: aload         33
1462: invokestatic  #93
1465: ldc           #141
1467: invokestatic  #23
1470: aload         35
1472: invokestatic  #20
1475: aload         35
1477: invokestatic  #92
1480: ldc           #141
1482: invokestatic  #23
1485: aload         35
1487: invokestatic  #93
1490: ldc           #141
1492: invokestatic  #23
1495: aload         40
1497: invokestatic  #20
1500: aload         41
1502: invokestatic  #20
1505: aload         41
1507: invokestatic  #92
1510: ldc           #74
1512: invokestatic  #23
1515: aload         41
1517: invokestatic  #93
1520: ldc           #74
1522: invokestatic  #23
1525: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test264
Start line: 7774
End line: 7808
Method source code: 
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint15 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double16 = weightedObservedPoint15.getX();
        double double17 = weightedObservedPoint15.getY();
        double double18 = weightedObservedPoint15.getX();
        double double19 = weightedObservedPoint15.getY();
        double double20 = weightedObservedPoint15.getX();
        double double21 = weightedObservedPoint15.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint15);
        harmonicFitter1.addObservedPoint((double) (short) 0, (double) (-1L));
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric27 = null;
        double[] doubleArray34 = new double[] { 0, 1.0d, (byte) 1, (byte) 100, '4', 10L };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray35 = harmonicFitter1.fit(10, parametric27, doubleArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 1.0, 1.0, 100.0, 52.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #550
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: dconst_0
54: ldc2_w        #12
57: ldc2_w        #10
60: invokevirtual #54
63: new           #145
66: dup
67: ldc2_w        #14
70: ldc2_w        #12
73: ldc2_w        #12
76: invokespecial #146
79: astore_3
80: aload_3
81: invokevirtual #147
84: dstore        4
86: aload_3
87: invokevirtual #149
90: dstore        6
92: aload_3
93: invokevirtual #147
96: dstore        8
98: aload_3
99: invokevirtual #149
102: dstore        10
104: aload_3
105: invokevirtual #147
108: dstore        12
110: aload_3
111: invokevirtual #147
114: dstore        14
116: aload_2
117: aload_3
118: invokevirtual #123
121: aload_2
122: dconst_0
123: ldc2_w        #10
126: invokevirtual #43
129: aconst_null
130: astore        16
132: bipush        6
134: newarray       double
136: dup
137: iconst_0
138: dconst_0
139: dastore
140: dup
141: iconst_1
142: dconst_1
143: dastore
144: dup
145: iconst_2
146: dconst_1
147: dastore
148: dup
149: iconst_3
150: ldc2_w        #34
153: dastore
154: dup
155: iconst_4
156: ldc2_w        #12
159: dastore
160: dup
161: iconst_5
162: ldc2_w        #32
165: dastore
166: astore        17
168: aload_2
169: bipush        10
171: aload         16
173: aload         17
175: invokevirtual #40
178: astore        18
180: ldc           #17
182: invokestatic  #18
185: goto          190
188: astore        18
190: new           #83
193: dup
194: invokespecial #84
197: ldc           #85
199: invokevirtual #86
202: dload         4
204: invokevirtual #150
207: ldc           #88
209: invokevirtual #86
212: ldc2_w        #12
215: invokevirtual #150
218: ldc           #85
220: invokevirtual #86
223: invokevirtual #89
226: dload         4
228: ldc2_w        #12
231: dcmpl
232: ifne          239
235: iconst_1
236: goto          240
239: iconst_0
240: invokestatic  #91
243: new           #83
246: dup
247: invokespecial #84
250: ldc           #85
252: invokevirtual #86
255: dload         6
257: invokevirtual #150
260: ldc           #88
262: invokevirtual #86
265: ldc2_w        #12
268: invokevirtual #150
271: ldc           #85
273: invokevirtual #86
276: invokevirtual #89
279: dload         6
281: ldc2_w        #12
284: dcmpl
285: ifne          292
288: iconst_1
289: goto          293
292: iconst_0
293: invokestatic  #91
296: new           #83
299: dup
300: invokespecial #84
303: ldc           #85
305: invokevirtual #86
308: dload         8
310: invokevirtual #150
313: ldc           #88
315: invokevirtual #86
318: ldc2_w        #12
321: invokevirtual #150
324: ldc           #85
326: invokevirtual #86
329: invokevirtual #89
332: dload         8
334: ldc2_w        #12
337: dcmpl
338: ifne          345
341: iconst_1
342: goto          346
345: iconst_0
346: invokestatic  #91
349: new           #83
352: dup
353: invokespecial #84
356: ldc           #85
358: invokevirtual #86
361: dload         10
363: invokevirtual #150
366: ldc           #88
368: invokevirtual #86
371: ldc2_w        #12
374: invokevirtual #150
377: ldc           #85
379: invokevirtual #86
382: invokevirtual #89
385: dload         10
387: ldc2_w        #12
390: dcmpl
391: ifne          398
394: iconst_1
395: goto          399
398: iconst_0
399: invokestatic  #91
402: new           #83
405: dup
406: invokespecial #84
409: ldc           #85
411: invokevirtual #86
414: dload         12
416: invokevirtual #150
419: ldc           #88
421: invokevirtual #86
424: ldc2_w        #12
427: invokevirtual #150
430: ldc           #85
432: invokevirtual #86
435: invokevirtual #89
438: dload         12
440: ldc2_w        #12
443: dcmpl
444: ifne          451
447: iconst_1
448: goto          452
451: iconst_0
452: invokestatic  #91
455: new           #83
458: dup
459: invokespecial #84
462: ldc           #85
464: invokevirtual #86
467: dload         14
469: invokevirtual #150
472: ldc           #88
474: invokevirtual #86
477: ldc2_w        #12
480: invokevirtual #150
483: ldc           #85
485: invokevirtual #86
488: invokevirtual #89
491: dload         14
493: ldc2_w        #12
496: dcmpl
497: ifne          504
500: iconst_1
501: goto          505
504: iconst_0
505: invokestatic  #91
508: aload         17
510: invokestatic  #20
513: aload         17
515: invokestatic  #21
518: ldc_w         #551
521: invokestatic  #23
524: return
Exception table:
from    to  target type
168   185   188   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test265
Start line: 7811
End line: 7831
Method source code: 
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint13 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double14 = weightedObservedPoint13.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint13);
        double double16 = weightedObservedPoint13.getY();
        double double17 = weightedObservedPoint13.getX();
        double double18 = weightedObservedPoint13.getX();
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #552
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: new           #145
64: dup
65: ldc2_w        #14
68: ldc2_w        #12
71: ldc2_w        #12
74: invokespecial #146
77: astore        4
79: aload         4
81: invokevirtual #147
84: dstore        5
86: aload_2
87: aload         4
89: invokevirtual #123
92: aload         4
94: invokevirtual #149
97: dstore        7
99: aload         4
101: invokevirtual #147
104: dstore        9
106: aload         4
108: invokevirtual #147
111: dstore        11
113: aload_3
114: invokestatic  #20
117: new           #83
120: dup
121: invokespecial #84
124: ldc           #85
126: invokevirtual #86
129: dload         5
131: invokevirtual #150
134: ldc           #88
136: invokevirtual #86
139: ldc2_w        #12
142: invokevirtual #150
145: ldc           #85
147: invokevirtual #86
150: invokevirtual #89
153: dload         5
155: ldc2_w        #12
158: dcmpl
159: ifne          166
162: iconst_1
163: goto          167
166: iconst_0
167: invokestatic  #91
170: new           #83
173: dup
174: invokespecial #84
177: ldc           #85
179: invokevirtual #86
182: dload         7
184: invokevirtual #150
187: ldc           #88
189: invokevirtual #86
192: ldc2_w        #12
195: invokevirtual #150
198: ldc           #85
200: invokevirtual #86
203: invokevirtual #89
206: dload         7
208: ldc2_w        #12
211: dcmpl
212: ifne          219
215: iconst_1
216: goto          220
219: iconst_0
220: invokestatic  #91
223: new           #83
226: dup
227: invokespecial #84
230: ldc           #85
232: invokevirtual #86
235: dload         9
237: invokevirtual #150
240: ldc           #88
242: invokevirtual #86
245: ldc2_w        #12
248: invokevirtual #150
251: ldc           #85
253: invokevirtual #86
256: invokevirtual #89
259: dload         9
261: ldc2_w        #12
264: dcmpl
265: ifne          272
268: iconst_1
269: goto          273
272: iconst_0
273: invokestatic  #91
276: new           #83
279: dup
280: invokespecial #84
283: ldc           #85
285: invokevirtual #86
288: dload         11
290: invokevirtual #150
293: ldc           #88
295: invokevirtual #86
298: ldc2_w        #12
301: invokevirtual #150
304: ldc           #85
306: invokevirtual #86
309: invokevirtual #89
312: dload         11
314: ldc2_w        #12
317: dcmpl
318: ifne          325
321: iconst_1
322: goto          326
325: iconst_0
326: invokestatic  #91
329: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test266
Start line: 7834
End line: 7918
Method source code: 
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_COMPLEX_MODULE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats3 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray7 = new java.lang.Object[] { localizedFormats5, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException8 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats4, objArray7);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats10 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray12 = new java.lang.Object[] { localizedFormats10, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException13 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats9, objArray12);
        mathIllegalArgumentException8.addSuppressed((java.lang.Throwable) mathIllegalArgumentException13);
        java.lang.Throwable[] throwableArray15 = mathIllegalArgumentException8.getSuppressed();
        java.lang.Object[] objArray16 = new java.lang.Object[] { localizedFormats2, localizedFormats3, throwableArray15 };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException17 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) throwableArray15);
        org.apache.commons.math3.exception.ZeroException zeroException18 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) throwableArray15);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException22 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED;
        java.lang.Number number25 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException27 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number25, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats28 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException30 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException27, (org.apache.commons.math3.exception.util.Localizable) localizedFormats28, objArray29);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException22, (org.apache.commons.math3.exception.util.Localizable) localizedFormats23, objArray29);
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats33 = org.apache.commons.math3.exception.util.LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer34 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter35 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer34);
        harmonicFitter35.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter35.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray42 = harmonicFitter35.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException43 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable32, (org.apache.commons.math3.exception.util.Localizable) localizedFormats33, (java.lang.Object[]) weightedObservedPointArray42);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException44 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, (java.lang.Object[]) weightedObservedPointArray42);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException45 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray42);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException49 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats50 = org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED;
        java.lang.Number number52 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException54 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number52, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats55 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException57 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException54, (org.apache.commons.math3.exception.util.Localizable) localizedFormats55, objArray56);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException58 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException49, (org.apache.commons.math3.exception.util.Localizable) localizedFormats50, objArray56);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext59 = mathIllegalStateException58.getContext();
        org.apache.commons.math3.exception.util.Localizable localizable60 = null;
        java.lang.Object[] objArray61 = null;
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException62 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable60, objArray61);
        mathIllegalStateException58.addSuppressed((java.lang.Throwable) mathIllegalStateException62);
        java.lang.Throwable[] throwableArray64 = mathIllegalStateException58.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException65 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) throwableArray64);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_COMPLEX_MODULE + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_COMPLEX_MODULE));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE));
        org.junit.Assert.assertTrue("'" + localizedFormats3 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION + "'", localizedFormats3.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION));
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats10 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats10.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[DIMENSIONS_MISMATCH_SIMPLE, NOT_POSITIVE_STANDARD_DEVIATION, [org.apache.commons.math3.exception.MathIllegalArgumentException: overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1]]");
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED));
        org.junit.Assert.assertTrue("'" + localizedFormats28 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats28.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + localizedFormats33 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS + "'", localizedFormats33.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray42);
        org.junit.Assert.assertTrue("'" + localizedFormats50 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED + "'", localizedFormats50.equals(org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED));
        org.junit.Assert.assertTrue("'" + localizedFormats55 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats55.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(exceptionContext59);
        org.junit.Assert.assertNotNull(throwableArray64);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #553
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #554
28: astore_1
29: getstatic     #381
32: astore_2
33: getstatic     #382
36: astore_3
37: getstatic     #233
40: astore        4
42: getstatic     #127
45: astore        5
47: getstatic     #128
50: astore        6
52: iconst_2
53: anewarray     #5
56: dup
57: iconst_0
58: aload         6
60: aastore
61: dup
62: iconst_1
63: lconst_1
64: invokestatic  #129
67: aastore
68: astore        7
70: new           #130
73: dup
74: aload         5
76: aload         7
78: invokespecial #131
81: astore        8
83: getstatic     #127
86: astore        9
88: getstatic     #128
91: astore        10
93: iconst_2
94: anewarray     #5
97: dup
98: iconst_0
99: aload         10
101: aastore
102: dup
103: iconst_1
104: lconst_1
105: invokestatic  #129
108: aastore
109: astore        11
111: new           #130
114: dup
115: aload         9
117: aload         11
119: invokespecial #131
122: astore        12
124: aload         8
126: aload         12
128: invokevirtual #132
131: aload         8
133: invokevirtual #234
136: astore        13
138: iconst_3
139: anewarray     #5
142: dup
143: iconst_0
144: aload_3
145: aastore
146: dup
147: iconst_1
148: aload         4
150: aastore
151: dup
152: iconst_2
153: aload         13
155: aastore
156: astore        14
158: new           #130
161: dup
162: aload_2
163: aload         13
165: checkcast     #79
168: invokespecial #131
171: astore        15
173: new           #81
176: dup
177: aload_1
178: aload         13
180: checkcast     #79
183: invokespecial #82
186: astore        16
188: new           #28
191: dup
192: ldc2_w        #277
195: invokestatic  #129
198: bipush        10
200: invokestatic  #159
203: iconst_1
204: invokespecial #160
207: astore        17
209: getstatic     #279
212: astore        18
214: aconst_null
215: astore        19
217: new           #28
220: dup
221: bipush        100
223: invokestatic  #159
226: aload         19
228: iconst_0
229: invokespecial #160
232: astore        20
234: getstatic     #161
237: astore        21
239: iconst_0
240: anewarray     #5
243: astore        22
245: new           #136
248: dup
249: aload         20
251: aload         21
253: aload         22
255: invokespecial #137
258: astore        23
260: new           #136
263: dup
264: aload         17
266: aload         18
268: aload         22
270: invokespecial #137
273: astore        24
275: aconst_null
276: astore        25
278: getstatic     #507
281: astore        26
283: aconst_null
284: astore        27
286: new           #8
289: dup
290: aload         27
292: invokespecial #9
295: astore        28
297: aload         28
299: dconst_1
300: ldc2_w        #32
303: invokevirtual #43
306: aload         28
308: dconst_0
309: ldc2_w        #34
312: invokevirtual #43
315: aload         28
317: invokevirtual #25
320: astore        29
322: new           #136
325: dup
326: aload         25
328: aload         26
330: aload         29
332: checkcast     #79
335: invokespecial #137
338: astore        30
340: new           #136
343: dup
344: aload         18
346: aload         29
348: checkcast     #79
351: invokespecial #138
354: astore        31
356: new           #130
359: dup
360: aload_1
361: aload         29
363: checkcast     #79
366: invokespecial #131
369: astore        32
371: new           #28
374: dup
375: ldc2_w        #277
378: invokestatic  #129
381: bipush        10
383: invokestatic  #159
386: iconst_1
387: invokespecial #160
390: astore        33
392: getstatic     #279
395: astore        34
397: aconst_null
398: astore        35
400: new           #28
403: dup
404: bipush        100
406: invokestatic  #159
409: aload         35
411: iconst_0
412: invokespecial #160
415: astore        36
417: getstatic     #161
420: astore        37
422: iconst_0
423: anewarray     #5
426: astore        38
428: new           #136
431: dup
432: aload         36
434: aload         37
436: aload         38
438: invokespecial #137
441: astore        39
443: new           #136
446: dup
447: aload         33
449: aload         34
451: aload         38
453: invokespecial #137
456: astore        40
458: aload         40
460: invokevirtual #282
463: astore        41
465: aconst_null
466: astore        42
468: aconst_null
469: astore        43
471: new           #136
474: dup
475: aload         42
477: aload         43
479: invokespecial #138
482: astore        44
484: aload         40
486: aload         44
488: invokevirtual #555
491: aload         40
493: invokevirtual #556
496: astore        45
498: new           #136
501: dup
502: aload_1
503: aload         45
505: checkcast     #79
508: invokespecial #138
511: astore        46
513: new           #83
516: dup
517: invokespecial #84
520: ldc           #85
522: invokevirtual #86
525: aload_1
526: invokevirtual #87
529: ldc           #88
531: invokevirtual #86
534: getstatic     #554
537: invokevirtual #87
540: ldc           #85
542: invokevirtual #86
545: invokevirtual #89
548: aload_1
549: getstatic     #554
552: invokevirtual #90
555: invokestatic  #91
558: new           #83
561: dup
562: invokespecial #84
565: ldc           #85
567: invokevirtual #86
570: aload_2
571: invokevirtual #87
574: ldc           #88
576: invokevirtual #86
579: getstatic     #381
582: invokevirtual #87
585: ldc           #85
587: invokevirtual #86
590: invokevirtual #89
593: aload_2
594: getstatic     #381
597: invokevirtual #90
600: invokestatic  #91
603: new           #83
606: dup
607: invokespecial #84
610: ldc           #85
612: invokevirtual #86
615: aload_3
616: invokevirtual #87
619: ldc           #88
621: invokevirtual #86
624: getstatic     #382
627: invokevirtual #87
630: ldc           #85
632: invokevirtual #86
635: invokevirtual #89
638: aload_3
639: getstatic     #382
642: invokevirtual #90
645: invokestatic  #91
648: new           #83
651: dup
652: invokespecial #84
655: ldc           #85
657: invokevirtual #86
660: aload         4
662: invokevirtual #87
665: ldc           #88
667: invokevirtual #86
670: getstatic     #233
673: invokevirtual #87
676: ldc           #85
678: invokevirtual #86
681: invokevirtual #89
684: aload         4
686: getstatic     #233
689: invokevirtual #90
692: invokestatic  #91
695: new           #83
698: dup
699: invokespecial #84
702: ldc           #85
704: invokevirtual #86
707: aload         5
709: invokevirtual #87
712: ldc           #88
714: invokevirtual #86
717: getstatic     #127
720: invokevirtual #87
723: ldc           #85
725: invokevirtual #86
728: invokevirtual #89
731: aload         5
733: getstatic     #127
736: invokevirtual #90
739: invokestatic  #91
742: new           #83
745: dup
746: invokespecial #84
749: ldc           #85
751: invokevirtual #86
754: aload         6
756: invokevirtual #87
759: ldc           #88
761: invokevirtual #86
764: getstatic     #128
767: invokevirtual #87
770: ldc           #85
772: invokevirtual #86
775: invokevirtual #89
778: aload         6
780: getstatic     #128
783: invokevirtual #90
786: invokestatic  #91
789: aload         7
791: invokestatic  #20
794: aload         7
796: invokestatic  #92
799: ldc           #140
801: invokestatic  #23
804: aload         7
806: invokestatic  #93
809: ldc           #140
811: invokestatic  #23
814: new           #83
817: dup
818: invokespecial #84
821: ldc           #85
823: invokevirtual #86
826: aload         9
828: invokevirtual #87
831: ldc           #88
833: invokevirtual #86
836: getstatic     #127
839: invokevirtual #87
842: ldc           #85
844: invokevirtual #86
847: invokevirtual #89
850: aload         9
852: getstatic     #127
855: invokevirtual #90
858: invokestatic  #91
861: new           #83
864: dup
865: invokespecial #84
868: ldc           #85
870: invokevirtual #86
873: aload         10
875: invokevirtual #87
878: ldc           #88
880: invokevirtual #86
883: getstatic     #128
886: invokevirtual #87
889: ldc           #85
891: invokevirtual #86
894: invokevirtual #89
897: aload         10
899: getstatic     #128
902: invokevirtual #90
905: invokestatic  #91
908: aload         11
910: invokestatic  #20
913: aload         11
915: invokestatic  #92
918: ldc           #140
920: invokestatic  #23
923: aload         11
925: invokestatic  #93
928: ldc           #140
930: invokestatic  #23
933: aload         13
935: invokestatic  #20
938: aload         14
940: invokestatic  #20
943: aload         14
945: invokestatic  #92
948: ldc_w         #385
951: invokestatic  #23
954: new           #83
957: dup
958: invokespecial #84
961: ldc           #85
963: invokevirtual #86
966: aload         18
968: invokevirtual #87
971: ldc           #88
973: invokevirtual #86
976: getstatic     #279
979: invokevirtual #87
982: ldc           #85
984: invokevirtual #86
987: invokevirtual #89
990: aload         18
992: getstatic     #279
995: invokevirtual #90
998: invokestatic  #91
1001: new           #83
1004: dup
1005: invokespecial #84
1008: ldc           #85
1010: invokevirtual #86
1013: aload         21
1015: invokevirtual #87
1018: ldc           #88
1020: invokevirtual #86
1023: getstatic     #161
1026: invokevirtual #87
1029: ldc           #85
1031: invokevirtual #86
1034: invokevirtual #89
1037: aload         21
1039: getstatic     #161
1042: invokevirtual #90
1045: invokestatic  #91
1048: aload         22
1050: invokestatic  #20
1053: aload         22
1055: invokestatic  #92
1058: ldc           #74
1060: invokestatic  #23
1063: aload         22
1065: invokestatic  #93
1068: ldc           #74
1070: invokestatic  #23
1073: new           #83
1076: dup
1077: invokespecial #84
1080: ldc           #85
1082: invokevirtual #86
1085: aload         26
1087: invokevirtual #87
1090: ldc           #88
1092: invokevirtual #86
1095: getstatic     #507
1098: invokevirtual #87
1101: ldc           #85
1103: invokevirtual #86
1106: invokevirtual #89
1109: aload         26
1111: getstatic     #507
1114: invokevirtual #90
1117: invokestatic  #91
1120: aload         29
1122: invokestatic  #20
1125: new           #83
1128: dup
1129: invokespecial #84
1132: ldc           #85
1134: invokevirtual #86
1137: aload         34
1139: invokevirtual #87
1142: ldc           #88
1144: invokevirtual #86
1147: getstatic     #279
1150: invokevirtual #87
1153: ldc           #85
1155: invokevirtual #86
1158: invokevirtual #89
1161: aload         34
1163: getstatic     #279
1166: invokevirtual #90
1169: invokestatic  #91
1172: new           #83
1175: dup
1176: invokespecial #84
1179: ldc           #85
1181: invokevirtual #86
1184: aload         37
1186: invokevirtual #87
1189: ldc           #88
1191: invokevirtual #86
1194: getstatic     #161
1197: invokevirtual #87
1200: ldc           #85
1202: invokevirtual #86
1205: invokevirtual #89
1208: aload         37
1210: getstatic     #161
1213: invokevirtual #90
1216: invokestatic  #91
1219: aload         38
1221: invokestatic  #20
1224: aload         38
1226: invokestatic  #92
1229: ldc           #74
1231: invokestatic  #23
1234: aload         38
1236: invokestatic  #93
1239: ldc           #74
1241: invokestatic  #23
1244: aload         41
1246: invokestatic  #20
1249: aload         45
1251: invokestatic  #20
1254: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test267
Start line: 7921
End line: 8038
Method source code: 
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.SINGULAR_OPERATOR;
        java.lang.Object[] objArray1 = null;
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException2 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray1);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext3 = mathIllegalArgumentException2.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats10 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats11 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray15 = new java.lang.Object[] { localizedFormats11, localizedFormats12, localizedFormats13, localizedFormats14 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException16 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException9, (org.apache.commons.math3.exception.util.Localizable) localizedFormats10, objArray15);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException21 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray22 = numberIsTooSmallException21.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException23 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalStateException16, (org.apache.commons.math3.exception.util.Localizable) localizedFormats17, (java.lang.Object[]) throwableArray22);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext24 = mathIllegalStateException16.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats25 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION;
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.ZeroException zeroException27 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, objArray26);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException31 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, (java.lang.Number) (short) 0, (java.lang.Number) 0L, true);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException35 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray36 = numberIsTooSmallException35.getSuppressed();
        java.lang.Object[] objArray37 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) throwableArray36);
        exceptionContext24.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, objArray37);
        java.util.Set<java.lang.String> strSet39 = exceptionContext24.getKeys();
        java.lang.Object obj41 = exceptionContext24.getValue("class ({0}) does not implement Comparable");
        java.lang.Throwable throwable42 = exceptionContext24.getThrowable();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats43 = org.apache.commons.math3.exception.util.LocalizedFormats.DISTRIBUTION_NOT_LOADED;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats44 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats45 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray47 = new java.lang.Object[] { localizedFormats45, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException48 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats44, objArray47);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats49 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats50 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats51 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats52 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats53 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray54 = new java.lang.Object[] { localizedFormats50, localizedFormats51, localizedFormats52, localizedFormats53 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException55 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException48, (org.apache.commons.math3.exception.util.Localizable) localizedFormats49, objArray54);
        exceptionContext24.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats43, objArray54);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats57 = org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY;
        java.lang.Number number59 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException61 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number59, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats62 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer63 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter64 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer63);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray65 = harmonicFitter64.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray66 = harmonicFitter64.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray67 = harmonicFitter64.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException68 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException61, (org.apache.commons.math3.exception.util.Localizable) localizedFormats62, (java.lang.Object[]) weightedObservedPointArray67);
        exceptionContext24.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats57, (java.lang.Object[]) weightedObservedPointArray67);
        java.lang.Throwable throwable70 = exceptionContext24.getThrowable();
        java.util.Set<java.lang.String> strSet71 = exceptionContext24.getKeys();
        exceptionContext3.setValue("Conversion Exception in Transformation: {0}", (java.lang.Object) strSet71);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SINGULAR_OPERATOR + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SINGULAR_OPERATOR));
        org.junit.Assert.assertNotNull(exceptionContext3);
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats10 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats10.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats11 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats11.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE));
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(exceptionContext24);
        org.junit.Assert.assertTrue("'" + localizedFormats25 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION + "'", localizedFormats25.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION));
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertNotNull(throwable42);
        org.junit.Assert.assertEquals(throwable42.getLocalizedMessage(), "overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive: distribution not loaded: empty selected column index array");
        org.junit.Assert.assertEquals(throwable42.getMessage(), "overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive: distribution not loaded: empty selected column index array");
        org.junit.Assert.assertEquals(throwable42.toString(), "org.apache.commons.math3.exception.MathIllegalStateException: overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive: distribution not loaded: empty selected column index array");
        org.junit.Assert.assertTrue("'" + localizedFormats43 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.DISTRIBUTION_NOT_LOADED + "'", localizedFormats43.equals(org.apache.commons.math3.exception.util.LocalizedFormats.DISTRIBUTION_NOT_LOADED));
        org.junit.Assert.assertTrue("'" + localizedFormats44 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats44.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats45 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats45.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats49 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats49.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats50 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats50.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats51 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats51.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats52 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats52.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats53 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats53.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertTrue("'" + localizedFormats57 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY + "'", localizedFormats57.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY));
        org.junit.Assert.assertTrue("'" + localizedFormats62 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats62.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray65);
        org.junit.Assert.assertNotNull(weightedObservedPointArray66);
        org.junit.Assert.assertNotNull(weightedObservedPointArray67);
        org.junit.Assert.assertNotNull(throwable70);
        org.junit.Assert.assertEquals(throwable70.getLocalizedMessage(), "overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive: distribution not loaded: empty selected column index array");
        org.junit.Assert.assertEquals(throwable70.getMessage(), "overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive: distribution not loaded: empty selected column index array");
        org.junit.Assert.assertEquals(throwable70.toString(), "org.apache.commons.math3.exception.MathIllegalStateException: overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive: distribution not loaded: empty selected column index array");
        org.junit.Assert.assertNotNull(strSet71);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #557
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #558
28: astore_1
29: aconst_null
30: astore_2
31: new           #130
34: dup
35: aload_1
36: aload_2
37: invokespecial #131
40: astore_3
41: aload_3
42: invokevirtual #165
45: astore        4
47: getstatic     #127
50: astore        5
52: getstatic     #128
55: astore        6
57: iconst_2
58: anewarray     #5
61: dup
62: iconst_0
63: aload         6
65: aastore
66: dup
67: iconst_1
68: lconst_1
69: invokestatic  #129
72: aastore
73: astore        7
75: new           #130
78: dup
79: aload         5
81: aload         7
83: invokespecial #131
86: astore        8
88: getstatic     #328
91: astore        9
93: getstatic     #329
96: astore        10
98: getstatic     #330
101: astore        11
103: getstatic     #331
106: astore        12
108: getstatic     #332
111: astore        13
113: iconst_4
114: anewarray     #5
117: dup
118: iconst_0
119: aload         10
121: aastore
122: dup
123: iconst_1
124: aload         11
126: aastore
127: dup
128: iconst_2
129: aload         12
131: aastore
132: dup
133: iconst_3
134: aload         13
136: aastore
137: astore        14
139: new           #136
142: dup
143: aload         8
145: aload         9
147: aload         14
149: invokespecial #137
152: astore        15
154: getstatic     #333
157: astore        16
159: new           #28
162: dup
163: ldc2_w        #277
166: invokestatic  #129
169: bipush        10
171: invokestatic  #159
174: iconst_1
175: invokespecial #160
178: astore        17
180: aload         17
182: invokevirtual #334
185: astore        18
187: new           #136
190: dup
191: aload         15
193: aload         16
195: aload         18
197: checkcast     #79
200: invokespecial #137
203: astore        19
205: aload         15
207: invokevirtual #282
210: astore        20
212: getstatic     #335
215: astore        21
217: iconst_0
218: anewarray     #5
221: astore        22
223: new           #81
226: dup
227: aload         21
229: aload         22
231: invokespecial #82
234: astore        23
236: new           #28
239: dup
240: aload         21
242: iconst_0
243: invokestatic  #194
246: lconst_0
247: invokestatic  #129
250: iconst_1
251: invokespecial #195
254: astore        24
256: new           #28
259: dup
260: ldc2_w        #277
263: invokestatic  #129
266: bipush        10
268: invokestatic  #159
271: iconst_1
272: invokespecial #160
275: astore        25
277: aload         25
279: invokevirtual #334
282: astore        26
284: aload         26
286: checkcast     #79
289: invokestatic  #80
292: astore        27
294: aload         20
296: aload         21
298: aload         27
300: invokevirtual #169
303: aload         20
305: invokevirtual #370
308: astore        28
310: aload         20
312: ldc_w         #371
315: invokevirtual #167
318: astore        29
320: aload         20
322: invokevirtual #288
325: astore        30
327: getstatic     #526
330: astore        31
332: getstatic     #127
335: astore        32
337: getstatic     #128
340: astore        33
342: iconst_2
343: anewarray     #5
346: dup
347: iconst_0
348: aload         33
350: aastore
351: dup
352: iconst_1
353: lconst_1
354: invokestatic  #129
357: aastore
358: astore        34
360: new           #130
363: dup
364: aload         32
366: aload         34
368: invokespecial #131
371: astore        35
373: getstatic     #328
376: astore        36
378: getstatic     #329
381: astore        37
383: getstatic     #330
386: astore        38
388: getstatic     #331
391: astore        39
393: getstatic     #332
396: astore        40
398: iconst_4
399: anewarray     #5
402: dup
403: iconst_0
404: aload         37
406: aastore
407: dup
408: iconst_1
409: aload         38
411: aastore
412: dup
413: iconst_2
414: aload         39
416: aastore
417: dup
418: iconst_3
419: aload         40
421: aastore
422: astore        41
424: new           #136
427: dup
428: aload         35
430: aload         36
432: aload         41
434: invokespecial #137
437: astore        42
439: aload         20
441: aload         31
443: aload         41
445: invokevirtual #169
448: getstatic     #527
451: astore        43
453: aconst_null
454: astore        44
456: new           #28
459: dup
460: ldc2_w        #252
463: invokestatic  #129
466: aload         44
468: iconst_1
469: invokespecial #160
472: astore        45
474: getstatic     #254
477: astore        46
479: aconst_null
480: astore        47
482: new           #8
485: dup
486: aload         47
488: invokespecial #9
491: astore        48
493: aload         48
495: invokevirtual #25
498: astore        49
500: aload         48
502: invokevirtual #25
505: astore        50
507: aload         48
509: invokevirtual #25
512: astore        51
514: new           #136
517: dup
518: aload         45
520: aload         46
522: aload         51
524: checkcast     #79
527: invokespecial #137
530: astore        52
532: aload         20
534: aload         43
536: aload         51
538: checkcast     #79
541: invokevirtual #169
544: aload         20
546: invokevirtual #288
549: astore        53
551: aload         20
553: invokevirtual #370
556: astore        54
558: aload         4
560: ldc_w         #559
563: aload         54
565: invokevirtual #373
568: new           #83
571: dup
572: invokespecial #84
575: ldc           #85
577: invokevirtual #86
580: aload_1
581: invokevirtual #87
584: ldc           #88
586: invokevirtual #86
589: getstatic     #558
592: invokevirtual #87
595: ldc           #85
597: invokevirtual #86
600: invokevirtual #89
603: aload_1
604: getstatic     #558
607: invokevirtual #90
610: invokestatic  #91
613: aload         4
615: invokestatic  #20
618: new           #83
621: dup
622: invokespecial #84
625: ldc           #85
627: invokevirtual #86
630: aload         5
632: invokevirtual #87
635: ldc           #88
637: invokevirtual #86
640: getstatic     #127
643: invokevirtual #87
646: ldc           #85
648: invokevirtual #86
651: invokevirtual #89
654: aload         5
656: getstatic     #127
659: invokevirtual #90
662: invokestatic  #91
665: new           #83
668: dup
669: invokespecial #84
672: ldc           #85
674: invokevirtual #86
677: aload         6
679: invokevirtual #87
682: ldc           #88
684: invokevirtual #86
687: getstatic     #128
690: invokevirtual #87
693: ldc           #85
695: invokevirtual #86
698: invokevirtual #89
701: aload         6
703: getstatic     #128
706: invokevirtual #90
709: invokestatic  #91
712: aload         7
714: invokestatic  #20
717: aload         7
719: invokestatic  #92
722: ldc           #140
724: invokestatic  #23
727: aload         7
729: invokestatic  #93
732: ldc           #140
734: invokestatic  #23
737: new           #83
740: dup
741: invokespecial #84
744: ldc           #85
746: invokevirtual #86
749: aload         9
751: invokevirtual #87
754: ldc           #88
756: invokevirtual #86
759: getstatic     #328
762: invokevirtual #87
765: ldc           #85
767: invokevirtual #86
770: invokevirtual #89
773: aload         9
775: getstatic     #328
778: invokevirtual #90
781: invokestatic  #91
784: new           #83
787: dup
788: invokespecial #84
791: ldc           #85
793: invokevirtual #86
796: aload         10
798: invokevirtual #87
801: ldc           #88
803: invokevirtual #86
806: getstatic     #329
809: invokevirtual #87
812: ldc           #85
814: invokevirtual #86
817: invokevirtual #89
820: aload         10
822: getstatic     #329
825: invokevirtual #90
828: invokestatic  #91
831: new           #83
834: dup
835: invokespecial #84
838: ldc           #85
840: invokevirtual #86
843: aload         11
845: invokevirtual #87
848: ldc           #88
850: invokevirtual #86
853: getstatic     #330
856: invokevirtual #87
859: ldc           #85
861: invokevirtual #86
864: invokevirtual #89
867: aload         11
869: getstatic     #330
872: invokevirtual #90
875: invokestatic  #91
878: new           #83
881: dup
882: invokespecial #84
885: ldc           #85
887: invokevirtual #86
890: aload         12
892: invokevirtual #87
895: ldc           #88
897: invokevirtual #86
900: getstatic     #331
903: invokevirtual #87
906: ldc           #85
908: invokevirtual #86
911: invokevirtual #89
914: aload         12
916: getstatic     #331
919: invokevirtual #90
922: invokestatic  #91
925: new           #83
928: dup
929: invokespecial #84
932: ldc           #85
934: invokevirtual #86
937: aload         13
939: invokevirtual #87
942: ldc           #88
944: invokevirtual #86
947: getstatic     #332
950: invokevirtual #87
953: ldc           #85
955: invokevirtual #86
958: invokevirtual #89
961: aload         13
963: getstatic     #332
966: invokevirtual #90
969: invokestatic  #91
972: aload         14
974: invokestatic  #20
977: aload         14
979: invokestatic  #92
982: ldc_w         #336
985: invokestatic  #23
988: aload         14
990: invokestatic  #93
993: ldc_w         #336
996: invokestatic  #23
999: new           #83
1002: dup
1003: invokespecial #84
1006: ldc           #85
1008: invokevirtual #86
1011: aload         16
1013: invokevirtual #87
1016: ldc           #88
1018: invokevirtual #86
1021: getstatic     #333
1024: invokevirtual #87
1027: ldc           #85
1029: invokevirtual #86
1032: invokevirtual #89
1035: aload         16
1037: getstatic     #333
1040: invokevirtual #90
1043: invokestatic  #91
1046: aload         18
1048: invokestatic  #20
1051: aload         20
1053: invokestatic  #20
1056: new           #83
1059: dup
1060: invokespecial #84
1063: ldc           #85
1065: invokevirtual #86
1068: aload         21
1070: invokevirtual #87
1073: ldc           #88
1075: invokevirtual #86
1078: getstatic     #335
1081: invokevirtual #87
1084: ldc           #85
1086: invokevirtual #86
1089: invokevirtual #89
1092: aload         21
1094: getstatic     #335
1097: invokevirtual #90
1100: invokestatic  #91
1103: aload         22
1105: invokestatic  #20
1108: aload         22
1110: invokestatic  #92
1113: ldc           #74
1115: invokestatic  #23
1118: aload         22
1120: invokestatic  #93
1123: ldc           #74
1125: invokestatic  #23
1128: aload         26
1130: invokestatic  #20
1133: aload         27
1135: invokestatic  #20
1138: aload         27
1140: invokestatic  #92
1143: ldc           #74
1145: invokestatic  #23
1148: aload         27
1150: invokestatic  #93
1153: ldc           #74
1155: invokestatic  #23
1158: aload         28
1160: invokestatic  #20
1163: aload         29
1165: invokestatic  #171
1168: aload         30
1170: invokestatic  #20
1173: aload         30
1175: invokevirtual #289
1178: ldc_w         #529
1181: invokestatic  #23
1184: aload         30
1186: invokevirtual #291
1189: ldc_w         #529
1192: invokestatic  #23
1195: aload         30
1197: invokevirtual #292
1200: ldc_w         #530
1203: invokestatic  #23
1206: new           #83
1209: dup
1210: invokespecial #84
1213: ldc           #85
1215: invokevirtual #86
1218: aload         31
1220: invokevirtual #87
1223: ldc           #88
1225: invokevirtual #86
1228: getstatic     #526
1231: invokevirtual #87
1234: ldc           #85
1236: invokevirtual #86
1239: invokevirtual #89
1242: aload         31
1244: getstatic     #526
1247: invokevirtual #90
1250: invokestatic  #91
1253: new           #83
1256: dup
1257: invokespecial #84
1260: ldc           #85
1262: invokevirtual #86
1265: aload         32
1267: invokevirtual #87
1270: ldc           #88
1272: invokevirtual #86
1275: getstatic     #127
1278: invokevirtual #87
1281: ldc           #85
1283: invokevirtual #86
1286: invokevirtual #89
1289: aload         32
1291: getstatic     #127
1294: invokevirtual #90
1297: invokestatic  #91
1300: new           #83
1303: dup
1304: invokespecial #84
1307: ldc           #85
1309: invokevirtual #86
1312: aload         33
1314: invokevirtual #87
1317: ldc           #88
1319: invokevirtual #86
1322: getstatic     #128
1325: invokevirtual #87
1328: ldc           #85
1330: invokevirtual #86
1333: invokevirtual #89
1336: aload         33
1338: getstatic     #128
1341: invokevirtual #90
1344: invokestatic  #91
1347: aload         34
1349: invokestatic  #20
1352: aload         34
1354: invokestatic  #92
1357: ldc           #140
1359: invokestatic  #23
1362: aload         34
1364: invokestatic  #93
1367: ldc           #140
1369: invokestatic  #23
1372: new           #83
1375: dup
1376: invokespecial #84
1379: ldc           #85
1381: invokevirtual #86
1384: aload         36
1386: invokevirtual #87
1389: ldc           #88
1391: invokevirtual #86
1394: getstatic     #328
1397: invokevirtual #87
1400: ldc           #85
1402: invokevirtual #86
1405: invokevirtual #89
1408: aload         36
1410: getstatic     #328
1413: invokevirtual #90
1416: invokestatic  #91
1419: new           #83
1422: dup
1423: invokespecial #84
1426: ldc           #85
1428: invokevirtual #86
1431: aload         37
1433: invokevirtual #87
1436: ldc           #88
1438: invokevirtual #86
1441: getstatic     #329
1444: invokevirtual #87
1447: ldc           #85
1449: invokevirtual #86
1452: invokevirtual #89
1455: aload         37
1457: getstatic     #329
1460: invokevirtual #90
1463: invokestatic  #91
1466: new           #83
1469: dup
1470: invokespecial #84
1473: ldc           #85
1475: invokevirtual #86
1478: aload         38
1480: invokevirtual #87
1483: ldc           #88
1485: invokevirtual #86
1488: getstatic     #330
1491: invokevirtual #87
1494: ldc           #85
1496: invokevirtual #86
1499: invokevirtual #89
1502: aload         38
1504: getstatic     #330
1507: invokevirtual #90
1510: invokestatic  #91
1513: new           #83
1516: dup
1517: invokespecial #84
1520: ldc           #85
1522: invokevirtual #86
1525: aload         39
1527: invokevirtual #87
1530: ldc           #88
1532: invokevirtual #86
1535: getstatic     #331
1538: invokevirtual #87
1541: ldc           #85
1543: invokevirtual #86
1546: invokevirtual #89
1549: aload         39
1551: getstatic     #331
1554: invokevirtual #90
1557: invokestatic  #91
1560: new           #83
1563: dup
1564: invokespecial #84
1567: ldc           #85
1569: invokevirtual #86
1572: aload         40
1574: invokevirtual #87
1577: ldc           #88
1579: invokevirtual #86
1582: getstatic     #332
1585: invokevirtual #87
1588: ldc           #85
1590: invokevirtual #86
1593: invokevirtual #89
1596: aload         40
1598: getstatic     #332
1601: invokevirtual #90
1604: invokestatic  #91
1607: aload         41
1609: invokestatic  #20
1612: aload         41
1614: invokestatic  #92
1617: ldc_w         #336
1620: invokestatic  #23
1623: aload         41
1625: invokestatic  #93
1628: ldc_w         #336
1631: invokestatic  #23
1634: new           #83
1637: dup
1638: invokespecial #84
1641: ldc           #85
1643: invokevirtual #86
1646: aload         43
1648: invokevirtual #87
1651: ldc           #88
1653: invokevirtual #86
1656: getstatic     #527
1659: invokevirtual #87
1662: ldc           #85
1664: invokevirtual #86
1667: invokevirtual #89
1670: aload         43
1672: getstatic     #527
1675: invokevirtual #90
1678: invokestatic  #91
1681: new           #83
1684: dup
1685: invokespecial #84
1688: ldc           #85
1690: invokevirtual #86
1693: aload         46
1695: invokevirtual #87
1698: ldc           #88
1700: invokevirtual #86
1703: getstatic     #254
1706: invokevirtual #87
1709: ldc           #85
1711: invokevirtual #86
1714: invokevirtual #89
1717: aload         46
1719: getstatic     #254
1722: invokevirtual #90
1725: invokestatic  #91
1728: aload         49
1730: invokestatic  #20
1733: aload         50
1735: invokestatic  #20
1738: aload         51
1740: invokestatic  #20
1743: aload         53
1745: invokestatic  #20
1748: aload         53
1750: invokevirtual #289
1753: ldc_w         #529
1756: invokestatic  #23
1759: aload         53
1761: invokevirtual #291
1764: ldc_w         #529
1767: invokestatic  #23
1770: aload         53
1772: invokevirtual #292
1775: ldc_w         #530
1778: invokestatic  #23
1781: aload         54
1783: invokestatic  #20
1786: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test268
Start line: 8041
End line: 8061
Method source code: 
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER;
        java.lang.String str1 = localizedFormats0.getSourceString();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer2 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter3 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer2);
        harmonicFitter3.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter3.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter3.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter3.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray12 = harmonicFitter3.getObservations();
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException13 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray12);
        java.lang.Throwable[] throwableArray14 = mathIllegalArgumentException13.getSuppressed();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}" + "'", str1, "must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}");
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
        org.junit.Assert.assertNotNull(weightedObservedPointArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #560
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #300
28: astore_1
29: aload_1
30: invokevirtual #301
33: astore_2
34: aconst_null
35: astore_3
36: new           #8
39: dup
40: aload_3
41: invokespecial #9
44: astore        4
46: aload         4
48: dconst_1
49: ldc2_w        #32
52: invokevirtual #43
55: aload         4
57: dconst_0
58: ldc2_w        #34
61: invokevirtual #43
64: aload         4
66: invokevirtual #25
69: astore        5
71: aload         4
73: invokevirtual #25
76: astore        6
78: aload         4
80: invokevirtual #25
83: astore        7
85: new           #130
88: dup
89: aload_1
90: aload         7
92: checkcast     #79
95: invokespecial #131
98: astore        8
100: aload         8
102: invokevirtual #234
105: astore        9
107: new           #83
110: dup
111: invokespecial #84
114: ldc           #85
116: invokevirtual #86
119: aload_1
120: invokevirtual #87
123: ldc           #88
125: invokevirtual #86
128: getstatic     #300
131: invokevirtual #87
134: ldc           #85
136: invokevirtual #86
139: invokevirtual #89
142: aload_1
143: getstatic     #300
146: invokevirtual #90
149: invokestatic  #91
152: new           #83
155: dup
156: invokespecial #84
159: ldc           #85
161: invokevirtual #86
164: aload_2
165: invokevirtual #86
168: ldc_w         #302
171: invokevirtual #86
174: invokevirtual #89
177: aload_2
178: ldc_w         #303
181: invokestatic  #245
184: aload         5
186: invokestatic  #20
189: aload         6
191: invokestatic  #20
194: aload         7
196: invokestatic  #20
199: aload         9
201: invokestatic  #20
204: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test269
Start line: 8064
End line: 8085
Method source code: 
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 0, 10.0d);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric14 = null;
        double[] doubleArray21 = new double[] { (short) -1, 35.0d, (byte) 0, (byte) 0, 0L, 10.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = harmonicFitter1.fit(0, parametric14, doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 35.0, 0.0, 0.0, 0.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #561
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: dconst_0
62: ldc2_w        #32
65: invokevirtual #43
68: aconst_null
69: astore_3
70: bipush        6
72: newarray       double
74: dup
75: iconst_0
76: ldc2_w        #10
79: dastore
80: dup
81: iconst_1
82: ldc2_w        #14
85: dastore
86: dup
87: iconst_2
88: dconst_0
89: dastore
90: dup
91: iconst_3
92: dconst_0
93: dastore
94: dup
95: iconst_4
96: dconst_0
97: dastore
98: dup
99: iconst_5
100: ldc2_w        #32
103: dastore
104: astore        4
106: aload_2
107: iconst_0
108: aload_3
109: aload         4
111: invokevirtual #40
114: astore        5
116: ldc           #17
118: invokestatic  #18
121: goto          126
124: astore        5
126: aload         4
128: invokestatic  #20
131: aload         4
133: invokestatic  #21
136: ldc_w         #562
139: invokestatic  #23
142: return
Exception table:
from    to  target type
106   121   124   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test270
Start line: 8088
End line: 8165
Method source code: 
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray10 = new java.lang.Object[] { localizedFormats6, localizedFormats7, localizedFormats8, localizedFormats9 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException4, (org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray10);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException16 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray17 = numberIsTooSmallException16.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException18 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalStateException11, (org.apache.commons.math3.exception.util.Localizable) localizedFormats12, (java.lang.Object[]) throwableArray17);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext19 = mathIllegalStateException11.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION;
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.ZeroException zeroException22 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, objArray21);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException26 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, (java.lang.Number) (short) 0, (java.lang.Number) 0L, true);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException30 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray31 = numberIsTooSmallException30.getSuppressed();
        java.lang.Object[] objArray32 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) throwableArray31);
        exceptionContext19.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, objArray32);
        java.util.Set<java.lang.String> strSet34 = exceptionContext19.getKeys();
        java.lang.Object obj36 = exceptionContext19.getValue("class ({0}) does not implement Comparable");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats38 = org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer39 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter40 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer39);
        harmonicFitter40.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter40.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter40.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray48 = harmonicFitter40.getObservations();
        java.lang.Object[] objArray49 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray48);
        org.apache.commons.math3.exception.ZeroException zeroException50 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats38, (java.lang.Object[]) weightedObservedPointArray48);
        exceptionContext19.setValue("org.apache.commons.math3.exception.NumberIsTooSmallException: -1 is smaller than, or equal to, the minimum (1)", (java.lang.Object) localizedFormats38);
        java.lang.Object obj53 = exceptionContext19.getValue("hi!");
        java.lang.Throwable throwable54 = exceptionContext19.getThrowable();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE));
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(exceptionContext19);
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION));
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + localizedFormats38 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS + "'", localizedFormats38.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray48);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNull(obj53);
        org.junit.Assert.assertNotNull(throwable54);
        org.junit.Assert.assertEquals(throwable54.getLocalizedMessage(), "overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive");
        org.junit.Assert.assertEquals(throwable54.getMessage(), "overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive");
        org.junit.Assert.assertEquals(throwable54.toString(), "org.apache.commons.math3.exception.MathIllegalStateException: overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #563
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #328
63: astore        5
65: getstatic     #329
68: astore        6
70: getstatic     #330
73: astore        7
75: getstatic     #331
78: astore        8
80: getstatic     #332
83: astore        9
85: iconst_4
86: anewarray     #5
89: dup
90: iconst_0
91: aload         6
93: aastore
94: dup
95: iconst_1
96: aload         7
98: aastore
99: dup
100: iconst_2
101: aload         8
103: aastore
104: dup
105: iconst_3
106: aload         9
108: aastore
109: astore        10
111: new           #136
114: dup
115: aload         4
117: aload         5
119: aload         10
121: invokespecial #137
124: astore        11
126: getstatic     #333
129: astore        12
131: new           #28
134: dup
135: ldc2_w        #277
138: invokestatic  #129
141: bipush        10
143: invokestatic  #159
146: iconst_1
147: invokespecial #160
150: astore        13
152: aload         13
154: invokevirtual #334
157: astore        14
159: new           #136
162: dup
163: aload         11
165: aload         12
167: aload         14
169: checkcast     #79
172: invokespecial #137
175: astore        15
177: aload         11
179: invokevirtual #282
182: astore        16
184: getstatic     #335
187: astore        17
189: iconst_0
190: anewarray     #5
193: astore        18
195: new           #81
198: dup
199: aload         17
201: aload         18
203: invokespecial #82
206: astore        19
208: new           #28
211: dup
212: aload         17
214: iconst_0
215: invokestatic  #194
218: lconst_0
219: invokestatic  #129
222: iconst_1
223: invokespecial #195
226: astore        20
228: new           #28
231: dup
232: ldc2_w        #277
235: invokestatic  #129
238: bipush        10
240: invokestatic  #159
243: iconst_1
244: invokespecial #160
247: astore        21
249: aload         21
251: invokevirtual #334
254: astore        22
256: aload         22
258: checkcast     #79
261: invokestatic  #80
264: astore        23
266: aload         16
268: aload         17
270: aload         23
272: invokevirtual #169
275: aload         16
277: invokevirtual #370
280: astore        24
282: aload         16
284: ldc_w         #371
287: invokevirtual #167
290: astore        25
292: getstatic     #78
295: astore        26
297: aconst_null
298: astore        27
300: new           #8
303: dup
304: aload         27
306: invokespecial #9
309: astore        28
311: aload         28
313: dconst_1
314: ldc2_w        #32
317: invokevirtual #43
320: aload         28
322: dconst_0
323: ldc2_w        #34
326: invokevirtual #43
329: aload         28
331: invokevirtual #59
334: aload         28
336: invokevirtual #25
339: astore        29
341: aload         29
343: checkcast     #79
346: invokestatic  #80
349: astore        30
351: new           #81
354: dup
355: aload         26
357: aload         29
359: checkcast     #79
362: invokespecial #82
365: astore        31
367: aload         16
369: ldc_w         #372
372: aload         26
374: invokevirtual #373
377: aload         16
379: ldc_w         #564
382: invokevirtual #167
385: astore        32
387: aload         16
389: invokevirtual #288
392: astore        33
394: new           #83
397: dup
398: invokespecial #84
401: ldc           #85
403: invokevirtual #86
406: aload_1
407: invokevirtual #87
410: ldc           #88
412: invokevirtual #86
415: getstatic     #127
418: invokevirtual #87
421: ldc           #85
423: invokevirtual #86
426: invokevirtual #89
429: aload_1
430: getstatic     #127
433: invokevirtual #90
436: invokestatic  #91
439: new           #83
442: dup
443: invokespecial #84
446: ldc           #85
448: invokevirtual #86
451: aload_2
452: invokevirtual #87
455: ldc           #88
457: invokevirtual #86
460: getstatic     #128
463: invokevirtual #87
466: ldc           #85
468: invokevirtual #86
471: invokevirtual #89
474: aload_2
475: getstatic     #128
478: invokevirtual #90
481: invokestatic  #91
484: aload_3
485: invokestatic  #20
488: aload_3
489: invokestatic  #92
492: ldc           #140
494: invokestatic  #23
497: aload_3
498: invokestatic  #93
501: ldc           #140
503: invokestatic  #23
506: new           #83
509: dup
510: invokespecial #84
513: ldc           #85
515: invokevirtual #86
518: aload         5
520: invokevirtual #87
523: ldc           #88
525: invokevirtual #86
528: getstatic     #328
531: invokevirtual #87
534: ldc           #85
536: invokevirtual #86
539: invokevirtual #89
542: aload         5
544: getstatic     #328
547: invokevirtual #90
550: invokestatic  #91
553: new           #83
556: dup
557: invokespecial #84
560: ldc           #85
562: invokevirtual #86
565: aload         6
567: invokevirtual #87
570: ldc           #88
572: invokevirtual #86
575: getstatic     #329
578: invokevirtual #87
581: ldc           #85
583: invokevirtual #86
586: invokevirtual #89
589: aload         6
591: getstatic     #329
594: invokevirtual #90
597: invokestatic  #91
600: new           #83
603: dup
604: invokespecial #84
607: ldc           #85
609: invokevirtual #86
612: aload         7
614: invokevirtual #87
617: ldc           #88
619: invokevirtual #86
622: getstatic     #330
625: invokevirtual #87
628: ldc           #85
630: invokevirtual #86
633: invokevirtual #89
636: aload         7
638: getstatic     #330
641: invokevirtual #90
644: invokestatic  #91
647: new           #83
650: dup
651: invokespecial #84
654: ldc           #85
656: invokevirtual #86
659: aload         8
661: invokevirtual #87
664: ldc           #88
666: invokevirtual #86
669: getstatic     #331
672: invokevirtual #87
675: ldc           #85
677: invokevirtual #86
680: invokevirtual #89
683: aload         8
685: getstatic     #331
688: invokevirtual #90
691: invokestatic  #91
694: new           #83
697: dup
698: invokespecial #84
701: ldc           #85
703: invokevirtual #86
706: aload         9
708: invokevirtual #87
711: ldc           #88
713: invokevirtual #86
716: getstatic     #332
719: invokevirtual #87
722: ldc           #85
724: invokevirtual #86
727: invokevirtual #89
730: aload         9
732: getstatic     #332
735: invokevirtual #90
738: invokestatic  #91
741: aload         10
743: invokestatic  #20
746: aload         10
748: invokestatic  #92
751: ldc_w         #336
754: invokestatic  #23
757: aload         10
759: invokestatic  #93
762: ldc_w         #336
765: invokestatic  #23
768: new           #83
771: dup
772: invokespecial #84
775: ldc           #85
777: invokevirtual #86
780: aload         12
782: invokevirtual #87
785: ldc           #88
787: invokevirtual #86
790: getstatic     #333
793: invokevirtual #87
796: ldc           #85
798: invokevirtual #86
801: invokevirtual #89
804: aload         12
806: getstatic     #333
809: invokevirtual #90
812: invokestatic  #91
815: aload         14
817: invokestatic  #20
820: aload         16
822: invokestatic  #20
825: new           #83
828: dup
829: invokespecial #84
832: ldc           #85
834: invokevirtual #86
837: aload         17
839: invokevirtual #87
842: ldc           #88
844: invokevirtual #86
847: getstatic     #335
850: invokevirtual #87
853: ldc           #85
855: invokevirtual #86
858: invokevirtual #89
861: aload         17
863: getstatic     #335
866: invokevirtual #90
869: invokestatic  #91
872: aload         18
874: invokestatic  #20
877: aload         18
879: invokestatic  #92
882: ldc           #74
884: invokestatic  #23
887: aload         18
889: invokestatic  #93
892: ldc           #74
894: invokestatic  #23
897: aload         22
899: invokestatic  #20
902: aload         23
904: invokestatic  #20
907: aload         23
909: invokestatic  #92
912: ldc           #74
914: invokestatic  #23
917: aload         23
919: invokestatic  #93
922: ldc           #74
924: invokestatic  #23
927: aload         24
929: invokestatic  #20
932: aload         25
934: invokestatic  #171
937: new           #83
940: dup
941: invokespecial #84
944: ldc           #85
946: invokevirtual #86
949: aload         26
951: invokevirtual #87
954: ldc           #88
956: invokevirtual #86
959: getstatic     #78
962: invokevirtual #87
965: ldc           #85
967: invokevirtual #86
970: invokevirtual #89
973: aload         26
975: getstatic     #78
978: invokevirtual #90
981: invokestatic  #91
984: aload         29
986: invokestatic  #20
989: aload         30
991: invokestatic  #20
994: aload         30
996: invokestatic  #92
999: ldc           #74
1001: invokestatic  #23
1004: aload         30
1006: invokestatic  #93
1009: ldc           #74
1011: invokestatic  #23
1014: aload         32
1016: invokestatic  #171
1019: aload         33
1021: invokestatic  #20
1024: aload         33
1026: invokevirtual #289
1029: ldc_w         #565
1032: invokestatic  #23
1035: aload         33
1037: invokevirtual #291
1040: ldc_w         #565
1043: invokestatic  #23
1046: aload         33
1048: invokevirtual #292
1051: ldc_w         #566
1054: invokestatic  #23
1057: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test271
Start line: 8168
End line: 8201
Method source code: 
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((-1.0d), (double) 10, (double) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint17 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double18 = weightedObservedPoint17.getWeight();
        double double19 = weightedObservedPoint17.getWeight();
        double double20 = weightedObservedPoint17.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint17);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer22 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter23 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer22);
        harmonicFitter23.addObservedPoint((double) 1.0f, (double) (short) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter23.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint31 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double32 = weightedObservedPoint31.getX();
        double double33 = weightedObservedPoint31.getWeight();
        double double34 = weightedObservedPoint31.getX();
        harmonicFitter23.addObservedPoint(weightedObservedPoint31);
        harmonicFitter1.addObservedPoint(weightedObservedPoint31);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 52.0d + "'", double34 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #567
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: aload_2
62: ldc2_w        #10
65: ldc2_w        #32
68: ldc2_w        #32
71: invokevirtual #54
74: new           #145
77: dup
78: ldc2_w        #14
81: ldc2_w        #12
84: ldc2_w        #12
87: invokespecial #146
90: astore        4
92: aload         4
94: invokevirtual #148
97: dstore        5
99: aload         4
101: invokevirtual #148
104: dstore        7
106: aload         4
108: invokevirtual #147
111: dstore        9
113: aload_2
114: aload         4
116: invokevirtual #123
119: aconst_null
120: astore        11
122: new           #8
125: dup
126: aload         11
128: invokespecial #9
131: astore        12
133: aload         12
135: dconst_1
136: ldc2_w        #32
139: invokevirtual #43
142: aload         12
144: invokevirtual #25
147: astore        13
149: new           #145
152: dup
153: ldc2_w        #14
156: ldc2_w        #12
159: ldc2_w        #12
162: invokespecial #146
165: astore        14
167: aload         14
169: invokevirtual #147
172: dstore        15
174: aload         14
176: invokevirtual #148
179: dstore        17
181: aload         14
183: invokevirtual #147
186: dstore        19
188: aload         12
190: aload         14
192: invokevirtual #123
195: aload_2
196: aload         14
198: invokevirtual #123
201: aload_3
202: invokestatic  #20
205: new           #83
208: dup
209: invokespecial #84
212: ldc           #85
214: invokevirtual #86
217: dload         5
219: invokevirtual #150
222: ldc           #88
224: invokevirtual #86
227: ldc2_w        #14
230: invokevirtual #150
233: ldc           #85
235: invokevirtual #86
238: invokevirtual #89
241: dload         5
243: ldc2_w        #14
246: dcmpl
247: ifne          254
250: iconst_1
251: goto          255
254: iconst_0
255: invokestatic  #91
258: new           #83
261: dup
262: invokespecial #84
265: ldc           #85
267: invokevirtual #86
270: dload         7
272: invokevirtual #150
275: ldc           #88
277: invokevirtual #86
280: ldc2_w        #14
283: invokevirtual #150
286: ldc           #85
288: invokevirtual #86
291: invokevirtual #89
294: dload         7
296: ldc2_w        #14
299: dcmpl
300: ifne          307
303: iconst_1
304: goto          308
307: iconst_0
308: invokestatic  #91
311: new           #83
314: dup
315: invokespecial #84
318: ldc           #85
320: invokevirtual #86
323: dload         9
325: invokevirtual #150
328: ldc           #88
330: invokevirtual #86
333: ldc2_w        #12
336: invokevirtual #150
339: ldc           #85
341: invokevirtual #86
344: invokevirtual #89
347: dload         9
349: ldc2_w        #12
352: dcmpl
353: ifne          360
356: iconst_1
357: goto          361
360: iconst_0
361: invokestatic  #91
364: aload         13
366: invokestatic  #20
369: new           #83
372: dup
373: invokespecial #84
376: ldc           #85
378: invokevirtual #86
381: dload         15
383: invokevirtual #150
386: ldc           #88
388: invokevirtual #86
391: ldc2_w        #12
394: invokevirtual #150
397: ldc           #85
399: invokevirtual #86
402: invokevirtual #89
405: dload         15
407: ldc2_w        #12
410: dcmpl
411: ifne          418
414: iconst_1
415: goto          419
418: iconst_0
419: invokestatic  #91
422: new           #83
425: dup
426: invokespecial #84
429: ldc           #85
431: invokevirtual #86
434: dload         17
436: invokevirtual #150
439: ldc           #88
441: invokevirtual #86
444: ldc2_w        #14
447: invokevirtual #150
450: ldc           #85
452: invokevirtual #86
455: invokevirtual #89
458: dload         17
460: ldc2_w        #14
463: dcmpl
464: ifne          471
467: iconst_1
468: goto          472
471: iconst_0
472: invokestatic  #91
475: new           #83
478: dup
479: invokespecial #84
482: ldc           #85
484: invokevirtual #86
487: dload         19
489: invokevirtual #150
492: ldc           #88
494: invokevirtual #86
497: ldc2_w        #12
500: invokevirtual #150
503: ldc           #85
505: invokevirtual #86
508: invokevirtual #89
511: dload         19
513: ldc2_w        #12
516: dcmpl
517: ifne          524
520: iconst_1
521: goto          525
524: iconst_0
525: invokestatic  #91
528: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test272
Start line: 8204
End line: 8334
Method source code: 
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.INDEX_NOT_POSITIVE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats3 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray5 = new java.lang.Object[] { localizedFormats3, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats2, objArray5);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray10 = new java.lang.Object[] { localizedFormats8, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats7, objArray10);
        mathIllegalArgumentException6.addSuppressed((java.lang.Throwable) mathIllegalArgumentException11);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray16 = new java.lang.Object[] { localizedFormats14, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException17 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException11, (org.apache.commons.math3.exception.util.Localizable) localizedFormats13, objArray16);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException18 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, objArray16);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException19 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray16);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException24 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, (java.lang.Number) 1.0d, (java.lang.Number) (byte) 100, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats25 = org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats26 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats27 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats28 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray31 = new java.lang.Object[] { localizedFormats29, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException32 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats28, objArray31);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats33 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats34 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray36 = new java.lang.Object[] { localizedFormats34, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException37 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats33, objArray36);
        mathIllegalArgumentException32.addSuppressed((java.lang.Throwable) mathIllegalArgumentException37);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats39 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats40 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray42 = new java.lang.Object[] { localizedFormats40, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException43 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException37, (org.apache.commons.math3.exception.util.Localizable) localizedFormats39, objArray42);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException44 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats27, objArray42);
        java.lang.Object[] objArray45 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray42);
        org.apache.commons.math3.exception.ZeroException zeroException46 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats26, objArray45);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException47 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, objArray45);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats48 = org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats49 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats50 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray52 = new java.lang.Object[] { localizedFormats50, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException53 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats49, objArray52);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats54 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats55 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray57 = new java.lang.Object[] { localizedFormats55, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException58 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats54, objArray57);
        mathIllegalArgumentException53.addSuppressed((java.lang.Throwable) mathIllegalArgumentException58);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats60 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats61 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray63 = new java.lang.Object[] { localizedFormats61, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException64 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException58, (org.apache.commons.math3.exception.util.Localizable) localizedFormats60, objArray63);
        java.lang.Object[] objArray65 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray63);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException66 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats48, objArray65);
        org.apache.commons.math3.exception.ZeroException zeroException67 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, objArray65);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer68 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter69 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer68);
        harmonicFitter69.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter69.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter69.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray77 = harmonicFitter69.getObservations();
        java.lang.Object[] objArray78 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray77);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException79 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException24, (org.apache.commons.math3.exception.util.Localizable) localizedFormats25, (java.lang.Object[]) weightedObservedPointArray77);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException80 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray77);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INDEX_NOT_POSITIVE + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX_NOT_POSITIVE));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats3 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats3.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY));
        org.junit.Assert.assertTrue("'" + localizedFormats25 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM + "'", localizedFormats25.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM));
        org.junit.Assert.assertTrue("'" + localizedFormats26 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats26.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats27 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats27.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats28 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats28.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats33 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats33.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats34 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats34.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats39 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats39.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats40 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats40.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats48 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED + "'", localizedFormats48.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED));
        org.junit.Assert.assertTrue("'" + localizedFormats49 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats49.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats50 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats50.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats54 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats54.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats55 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats55.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats60 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats60.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats61 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats61.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(weightedObservedPointArray77);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #568
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #569
28: astore_1
29: getstatic     #126
32: astore_2
33: getstatic     #127
36: astore_3
37: getstatic     #128
40: astore        4
42: iconst_2
43: anewarray     #5
46: dup
47: iconst_0
48: aload         4
50: aastore
51: dup
52: iconst_1
53: lconst_1
54: invokestatic  #129
57: aastore
58: astore        5
60: new           #130
63: dup
64: aload_3
65: aload         5
67: invokespecial #131
70: astore        6
72: getstatic     #127
75: astore        7
77: getstatic     #128
80: astore        8
82: iconst_2
83: anewarray     #5
86: dup
87: iconst_0
88: aload         8
90: aastore
91: dup
92: iconst_1
93: lconst_1
94: invokestatic  #129
97: aastore
98: astore        9
100: new           #130
103: dup
104: aload         7
106: aload         9
108: invokespecial #131
111: astore        10
113: aload         6
115: aload         10
117: invokevirtual #132
120: getstatic     #133
123: astore        11
125: getstatic     #134
128: astore        12
130: iconst_2
131: anewarray     #5
134: dup
135: iconst_0
136: aload         12
138: aastore
139: dup
140: iconst_1
141: bipush        10
143: invokestatic  #135
146: aastore
147: astore        13
149: new           #136
152: dup
153: aload         10
155: aload         11
157: aload         13
159: invokespecial #137
162: astore        14
164: new           #136
167: dup
168: aload_2
169: aload         13
171: invokespecial #138
174: astore        15
176: new           #136
179: dup
180: aload_1
181: aload         13
183: invokespecial #138
186: astore        16
188: getstatic     #424
191: astore        17
193: new           #28
196: dup
197: aload         17
199: dconst_1
200: invokestatic  #247
203: bipush        100
205: invokestatic  #159
208: iconst_1
209: invokespecial #195
212: astore        18
214: getstatic     #425
217: astore        19
219: getstatic     #125
222: astore        20
224: getstatic     #126
227: astore        21
229: getstatic     #127
232: astore        22
234: getstatic     #128
237: astore        23
239: iconst_2
240: anewarray     #5
243: dup
244: iconst_0
245: aload         23
247: aastore
248: dup
249: iconst_1
250: lconst_1
251: invokestatic  #129
254: aastore
255: astore        24
257: new           #130
260: dup
261: aload         22
263: aload         24
265: invokespecial #131
268: astore        25
270: getstatic     #127
273: astore        26
275: getstatic     #128
278: astore        27
280: iconst_2
281: anewarray     #5
284: dup
285: iconst_0
286: aload         27
288: aastore
289: dup
290: iconst_1
291: lconst_1
292: invokestatic  #129
295: aastore
296: astore        28
298: new           #130
301: dup
302: aload         26
304: aload         28
306: invokespecial #131
309: astore        29
311: aload         25
313: aload         29
315: invokevirtual #132
318: getstatic     #133
321: astore        30
323: getstatic     #134
326: astore        31
328: iconst_2
329: anewarray     #5
332: dup
333: iconst_0
334: aload         31
336: aastore
337: dup
338: iconst_1
339: bipush        10
341: invokestatic  #135
344: aastore
345: astore        32
347: new           #136
350: dup
351: aload         29
353: aload         30
355: aload         32
357: invokespecial #137
360: astore        33
362: new           #136
365: dup
366: aload         21
368: aload         32
370: invokespecial #138
373: astore        34
375: aload         32
377: invokestatic  #80
380: astore        35
382: new           #81
385: dup
386: aload         20
388: aload         35
390: invokespecial #82
393: astore        36
395: new           #130
398: dup
399: aload         19
401: aload         35
403: invokespecial #131
406: astore        37
408: getstatic     #426
411: astore        38
413: getstatic     #127
416: astore        39
418: getstatic     #128
421: astore        40
423: iconst_2
424: anewarray     #5
427: dup
428: iconst_0
429: aload         40
431: aastore
432: dup
433: iconst_1
434: lconst_1
435: invokestatic  #129
438: aastore
439: astore        41
441: new           #130
444: dup
445: aload         39
447: aload         41
449: invokespecial #131
452: astore        42
454: getstatic     #127
457: astore        43
459: getstatic     #128
462: astore        44
464: iconst_2
465: anewarray     #5
468: dup
469: iconst_0
470: aload         44
472: aastore
473: dup
474: iconst_1
475: lconst_1
476: invokestatic  #129
479: aastore
480: astore        45
482: new           #130
485: dup
486: aload         43
488: aload         45
490: invokespecial #131
493: astore        46
495: aload         42
497: aload         46
499: invokevirtual #132
502: getstatic     #133
505: astore        47
507: getstatic     #134
510: astore        48
512: iconst_2
513: anewarray     #5
516: dup
517: iconst_0
518: aload         48
520: aastore
521: dup
522: iconst_1
523: bipush        10
525: invokestatic  #135
528: aastore
529: astore        49
531: new           #136
534: dup
535: aload         46
537: aload         47
539: aload         49
541: invokespecial #137
544: astore        50
546: aload         49
548: invokestatic  #80
551: astore        51
553: new           #136
556: dup
557: aload         38
559: aload         51
561: invokespecial #138
564: astore        52
566: new           #81
569: dup
570: aload         19
572: aload         51
574: invokespecial #82
577: astore        53
579: aconst_null
580: astore        54
582: new           #8
585: dup
586: aload         54
588: invokespecial #9
591: astore        55
593: aload         55
595: dconst_1
596: ldc2_w        #32
599: invokevirtual #43
602: aload         55
604: dconst_0
605: ldc2_w        #34
608: invokevirtual #43
611: aload         55
613: invokevirtual #59
616: aload         55
618: invokevirtual #25
621: astore        56
623: aload         56
625: checkcast     #79
628: invokestatic  #80
631: astore        57
633: new           #136
636: dup
637: aload         18
639: aload         19
641: aload         56
643: checkcast     #79
646: invokespecial #137
649: astore        58
651: new           #136
654: dup
655: aload_1
656: aload         56
658: checkcast     #79
661: invokespecial #138
664: astore        59
666: new           #83
669: dup
670: invokespecial #84
673: ldc           #85
675: invokevirtual #86
678: aload_1
679: invokevirtual #87
682: ldc           #88
684: invokevirtual #86
687: getstatic     #569
690: invokevirtual #87
693: ldc           #85
695: invokevirtual #86
698: invokevirtual #89
701: aload_1
702: getstatic     #569
705: invokevirtual #90
708: invokestatic  #91
711: new           #83
714: dup
715: invokespecial #84
718: ldc           #85
720: invokevirtual #86
723: aload_2
724: invokevirtual #87
727: ldc           #88
729: invokevirtual #86
732: getstatic     #126
735: invokevirtual #87
738: ldc           #85
740: invokevirtual #86
743: invokevirtual #89
746: aload_2
747: getstatic     #126
750: invokevirtual #90
753: invokestatic  #91
756: new           #83
759: dup
760: invokespecial #84
763: ldc           #85
765: invokevirtual #86
768: aload_3
769: invokevirtual #87
772: ldc           #88
774: invokevirtual #86
777: getstatic     #127
780: invokevirtual #87
783: ldc           #85
785: invokevirtual #86
788: invokevirtual #89
791: aload_3
792: getstatic     #127
795: invokevirtual #90
798: invokestatic  #91
801: new           #83
804: dup
805: invokespecial #84
808: ldc           #85
810: invokevirtual #86
813: aload         4
815: invokevirtual #87
818: ldc           #88
820: invokevirtual #86
823: getstatic     #128
826: invokevirtual #87
829: ldc           #85
831: invokevirtual #86
834: invokevirtual #89
837: aload         4
839: getstatic     #128
842: invokevirtual #90
845: invokestatic  #91
848: aload         5
850: invokestatic  #20
853: aload         5
855: invokestatic  #92
858: ldc           #140
860: invokestatic  #23
863: aload         5
865: invokestatic  #93
868: ldc           #140
870: invokestatic  #23
873: new           #83
876: dup
877: invokespecial #84
880: ldc           #85
882: invokevirtual #86
885: aload         7
887: invokevirtual #87
890: ldc           #88
892: invokevirtual #86
895: getstatic     #127
898: invokevirtual #87
901: ldc           #85
903: invokevirtual #86
906: invokevirtual #89
909: aload         7
911: getstatic     #127
914: invokevirtual #90
917: invokestatic  #91
920: new           #83
923: dup
924: invokespecial #84
927: ldc           #85
929: invokevirtual #86
932: aload         8
934: invokevirtual #87
937: ldc           #88
939: invokevirtual #86
942: getstatic     #128
945: invokevirtual #87
948: ldc           #85
950: invokevirtual #86
953: invokevirtual #89
956: aload         8
958: getstatic     #128
961: invokevirtual #90
964: invokestatic  #91
967: aload         9
969: invokestatic  #20
972: aload         9
974: invokestatic  #92
977: ldc           #140
979: invokestatic  #23
982: aload         9
984: invokestatic  #93
987: ldc           #140
989: invokestatic  #23
992: new           #83
995: dup
996: invokespecial #84
999: ldc           #85
1001: invokevirtual #86
1004: aload         11
1006: invokevirtual #87
1009: ldc           #88
1011: invokevirtual #86
1014: getstatic     #133
1017: invokevirtual #87
1020: ldc           #85
1022: invokevirtual #86
1025: invokevirtual #89
1028: aload         11
1030: getstatic     #133
1033: invokevirtual #90
1036: invokestatic  #91
1039: new           #83
1042: dup
1043: invokespecial #84
1046: ldc           #85
1048: invokevirtual #86
1051: aload         12
1053: invokevirtual #87
1056: ldc           #88
1058: invokevirtual #86
1061: getstatic     #134
1064: invokevirtual #87
1067: ldc           #85
1069: invokevirtual #86
1072: invokevirtual #89
1075: aload         12
1077: getstatic     #134
1080: invokevirtual #90
1083: invokestatic  #91
1086: aload         13
1088: invokestatic  #20
1091: aload         13
1093: invokestatic  #92
1096: ldc           #141
1098: invokestatic  #23
1101: aload         13
1103: invokestatic  #93
1106: ldc           #141
1108: invokestatic  #23
1111: new           #83
1114: dup
1115: invokespecial #84
1118: ldc           #85
1120: invokevirtual #86
1123: aload         17
1125: invokevirtual #87
1128: ldc           #88
1130: invokevirtual #86
1133: getstatic     #424
1136: invokevirtual #87
1139: ldc           #85
1141: invokevirtual #86
1144: invokevirtual #89
1147: aload         17
1149: getstatic     #424
1152: invokevirtual #90
1155: invokestatic  #91
1158: new           #83
1161: dup
1162: invokespecial #84
1165: ldc           #85
1167: invokevirtual #86
1170: aload         19
1172: invokevirtual #87
1175: ldc           #88
1177: invokevirtual #86
1180: getstatic     #425
1183: invokevirtual #87
1186: ldc           #85
1188: invokevirtual #86
1191: invokevirtual #89
1194: aload         19
1196: getstatic     #425
1199: invokevirtual #90
1202: invokestatic  #91
1205: new           #83
1208: dup
1209: invokespecial #84
1212: ldc           #85
1214: invokevirtual #86
1217: aload         20
1219: invokevirtual #87
1222: ldc           #88
1224: invokevirtual #86
1227: getstatic     #125
1230: invokevirtual #87
1233: ldc           #85
1235: invokevirtual #86
1238: invokevirtual #89
1241: aload         20
1243: getstatic     #125
1246: invokevirtual #90
1249: invokestatic  #91
1252: new           #83
1255: dup
1256: invokespecial #84
1259: ldc           #85
1261: invokevirtual #86
1264: aload         21
1266: invokevirtual #87
1269: ldc           #88
1271: invokevirtual #86
1274: getstatic     #126
1277: invokevirtual #87
1280: ldc           #85
1282: invokevirtual #86
1285: invokevirtual #89
1288: aload         21
1290: getstatic     #126
1293: invokevirtual #90
1296: invokestatic  #91
1299: new           #83
1302: dup
1303: invokespecial #84
1306: ldc           #85
1308: invokevirtual #86
1311: aload         22
1313: invokevirtual #87
1316: ldc           #88
1318: invokevirtual #86
1321: getstatic     #127
1324: invokevirtual #87
1327: ldc           #85
1329: invokevirtual #86
1332: invokevirtual #89
1335: aload         22
1337: getstatic     #127
1340: invokevirtual #90
1343: invokestatic  #91
1346: new           #83
1349: dup
1350: invokespecial #84
1353: ldc           #85
1355: invokevirtual #86
1358: aload         23
1360: invokevirtual #87
1363: ldc           #88
1365: invokevirtual #86
1368: getstatic     #128
1371: invokevirtual #87
1374: ldc           #85
1376: invokevirtual #86
1379: invokevirtual #89
1382: aload         23
1384: getstatic     #128
1387: invokevirtual #90
1390: invokestatic  #91
1393: aload         24
1395: invokestatic  #20
1398: aload         24
1400: invokestatic  #92
1403: ldc           #140
1405: invokestatic  #23
1408: aload         24
1410: invokestatic  #93
1413: ldc           #140
1415: invokestatic  #23
1418: new           #83
1421: dup
1422: invokespecial #84
1425: ldc           #85
1427: invokevirtual #86
1430: aload         26
1432: invokevirtual #87
1435: ldc           #88
1437: invokevirtual #86
1440: getstatic     #127
1443: invokevirtual #87
1446: ldc           #85
1448: invokevirtual #86
1451: invokevirtual #89
1454: aload         26
1456: getstatic     #127
1459: invokevirtual #90
1462: invokestatic  #91
1465: new           #83
1468: dup
1469: invokespecial #84
1472: ldc           #85
1474: invokevirtual #86
1477: aload         27
1479: invokevirtual #87
1482: ldc           #88
1484: invokevirtual #86
1487: getstatic     #128
1490: invokevirtual #87
1493: ldc           #85
1495: invokevirtual #86
1498: invokevirtual #89
1501: aload         27
1503: getstatic     #128
1506: invokevirtual #90
1509: invokestatic  #91
1512: aload         28
1514: invokestatic  #20
1517: aload         28
1519: invokestatic  #92
1522: ldc           #140
1524: invokestatic  #23
1527: aload         28
1529: invokestatic  #93
1532: ldc           #140
1534: invokestatic  #23
1537: new           #83
1540: dup
1541: invokespecial #84
1544: ldc           #85
1546: invokevirtual #86
1549: aload         30
1551: invokevirtual #87
1554: ldc           #88
1556: invokevirtual #86
1559: getstatic     #133
1562: invokevirtual #87
1565: ldc           #85
1567: invokevirtual #86
1570: invokevirtual #89
1573: aload         30
1575: getstatic     #133
1578: invokevirtual #90
1581: invokestatic  #91
1584: new           #83
1587: dup
1588: invokespecial #84
1591: ldc           #85
1593: invokevirtual #86
1596: aload         31
1598: invokevirtual #87
1601: ldc           #88
1603: invokevirtual #86
1606: getstatic     #134
1609: invokevirtual #87
1612: ldc           #85
1614: invokevirtual #86
1617: invokevirtual #89
1620: aload         31
1622: getstatic     #134
1625: invokevirtual #90
1628: invokestatic  #91
1631: aload         32
1633: invokestatic  #20
1636: aload         32
1638: invokestatic  #92
1641: ldc           #141
1643: invokestatic  #23
1646: aload         32
1648: invokestatic  #93
1651: ldc           #141
1653: invokestatic  #23
1656: aload         35
1658: invokestatic  #20
1661: aload         35
1663: invokestatic  #92
1666: ldc           #141
1668: invokestatic  #23
1671: aload         35
1673: invokestatic  #93
1676: ldc           #141
1678: invokestatic  #23
1681: new           #83
1684: dup
1685: invokespecial #84
1688: ldc           #85
1690: invokevirtual #86
1693: aload         38
1695: invokevirtual #87
1698: ldc           #88
1700: invokevirtual #86
1703: getstatic     #426
1706: invokevirtual #87
1709: ldc           #85
1711: invokevirtual #86
1714: invokevirtual #89
1717: aload         38
1719: getstatic     #426
1722: invokevirtual #90
1725: invokestatic  #91
1728: new           #83
1731: dup
1732: invokespecial #84
1735: ldc           #85
1737: invokevirtual #86
1740: aload         39
1742: invokevirtual #87
1745: ldc           #88
1747: invokevirtual #86
1750: getstatic     #127
1753: invokevirtual #87
1756: ldc           #85
1758: invokevirtual #86
1761: invokevirtual #89
1764: aload         39
1766: getstatic     #127
1769: invokevirtual #90
1772: invokestatic  #91
1775: new           #83
1778: dup
1779: invokespecial #84
1782: ldc           #85
1784: invokevirtual #86
1787: aload         40
1789: invokevirtual #87
1792: ldc           #88
1794: invokevirtual #86
1797: getstatic     #128
1800: invokevirtual #87
1803: ldc           #85
1805: invokevirtual #86
1808: invokevirtual #89
1811: aload         40
1813: getstatic     #128
1816: invokevirtual #90
1819: invokestatic  #91
1822: aload         41
1824: invokestatic  #20
1827: aload         41
1829: invokestatic  #92
1832: ldc           #140
1834: invokestatic  #23
1837: aload         41
1839: invokestatic  #93
1842: ldc           #140
1844: invokestatic  #23
1847: new           #83
1850: dup
1851: invokespecial #84
1854: ldc           #85
1856: invokevirtual #86
1859: aload         43
1861: invokevirtual #87
1864: ldc           #88
1866: invokevirtual #86
1869: getstatic     #127
1872: invokevirtual #87
1875: ldc           #85
1877: invokevirtual #86
1880: invokevirtual #89
1883: aload         43
1885: getstatic     #127
1888: invokevirtual #90
1891: invokestatic  #91
1894: new           #83
1897: dup
1898: invokespecial #84
1901: ldc           #85
1903: invokevirtual #86
1906: aload         44
1908: invokevirtual #87
1911: ldc           #88
1913: invokevirtual #86
1916: getstatic     #128
1919: invokevirtual #87
1922: ldc           #85
1924: invokevirtual #86
1927: invokevirtual #89
1930: aload         44
1932: getstatic     #128
1935: invokevirtual #90
1938: invokestatic  #91
1941: aload         45
1943: invokestatic  #20
1946: aload         45
1948: invokestatic  #92
1951: ldc           #140
1953: invokestatic  #23
1956: aload         45
1958: invokestatic  #93
1961: ldc           #140
1963: invokestatic  #23
1966: new           #83
1969: dup
1970: invokespecial #84
1973: ldc           #85
1975: invokevirtual #86
1978: aload         47
1980: invokevirtual #87
1983: ldc           #88
1985: invokevirtual #86
1988: getstatic     #133
1991: invokevirtual #87
1994: ldc           #85
1996: invokevirtual #86
1999: invokevirtual #89
2002: aload         47
2004: getstatic     #133
2007: invokevirtual #90
2010: invokestatic  #91
2013: new           #83
2016: dup
2017: invokespecial #84
2020: ldc           #85
2022: invokevirtual #86
2025: aload         48
2027: invokevirtual #87
2030: ldc           #88
2032: invokevirtual #86
2035: getstatic     #134
2038: invokevirtual #87
2041: ldc           #85
2043: invokevirtual #86
2046: invokevirtual #89
2049: aload         48
2051: getstatic     #134
2054: invokevirtual #90
2057: invokestatic  #91
2060: aload         49
2062: invokestatic  #20
2065: aload         49
2067: invokestatic  #92
2070: ldc           #141
2072: invokestatic  #23
2075: aload         49
2077: invokestatic  #93
2080: ldc           #141
2082: invokestatic  #23
2085: aload         51
2087: invokestatic  #20
2090: aload         51
2092: invokestatic  #92
2095: ldc           #141
2097: invokestatic  #23
2100: aload         51
2102: invokestatic  #93
2105: ldc           #141
2107: invokestatic  #23
2110: aload         56
2112: invokestatic  #20
2115: aload         57
2117: invokestatic  #20
2120: aload         57
2122: invokestatic  #92
2125: ldc           #74
2127: invokestatic  #23
2130: aload         57
2132: invokestatic  #93
2135: ldc           #74
2137: invokestatic  #23
2140: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test273
Start line: 8337
End line: 8361
Method source code: 
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint15 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double16 = weightedObservedPoint15.getX();
        double double17 = weightedObservedPoint15.getY();
        double double18 = weightedObservedPoint15.getX();
        double double19 = weightedObservedPoint15.getY();
        double double20 = weightedObservedPoint15.getX();
        double double21 = weightedObservedPoint15.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint15);
        harmonicFitter1.addObservedPoint((double) 100, (double) 0);
        harmonicFitter1.addObservedPoint(0.0d, (double) (byte) -1, (double) '#');
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #570
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: dconst_0
54: ldc2_w        #12
57: ldc2_w        #10
60: invokevirtual #54
63: new           #145
66: dup
67: ldc2_w        #14
70: ldc2_w        #12
73: ldc2_w        #12
76: invokespecial #146
79: astore_3
80: aload_3
81: invokevirtual #147
84: dstore        4
86: aload_3
87: invokevirtual #149
90: dstore        6
92: aload_3
93: invokevirtual #147
96: dstore        8
98: aload_3
99: invokevirtual #149
102: dstore        10
104: aload_3
105: invokevirtual #147
108: dstore        12
110: aload_3
111: invokevirtual #147
114: dstore        14
116: aload_2
117: aload_3
118: invokevirtual #123
121: aload_2
122: ldc2_w        #34
125: dconst_0
126: invokevirtual #43
129: aload_2
130: dconst_0
131: ldc2_w        #10
134: ldc2_w        #14
137: invokevirtual #54
140: new           #83
143: dup
144: invokespecial #84
147: ldc           #85
149: invokevirtual #86
152: dload         4
154: invokevirtual #150
157: ldc           #88
159: invokevirtual #86
162: ldc2_w        #12
165: invokevirtual #150
168: ldc           #85
170: invokevirtual #86
173: invokevirtual #89
176: dload         4
178: ldc2_w        #12
181: dcmpl
182: ifne          189
185: iconst_1
186: goto          190
189: iconst_0
190: invokestatic  #91
193: new           #83
196: dup
197: invokespecial #84
200: ldc           #85
202: invokevirtual #86
205: dload         6
207: invokevirtual #150
210: ldc           #88
212: invokevirtual #86
215: ldc2_w        #12
218: invokevirtual #150
221: ldc           #85
223: invokevirtual #86
226: invokevirtual #89
229: dload         6
231: ldc2_w        #12
234: dcmpl
235: ifne          242
238: iconst_1
239: goto          243
242: iconst_0
243: invokestatic  #91
246: new           #83
249: dup
250: invokespecial #84
253: ldc           #85
255: invokevirtual #86
258: dload         8
260: invokevirtual #150
263: ldc           #88
265: invokevirtual #86
268: ldc2_w        #12
271: invokevirtual #150
274: ldc           #85
276: invokevirtual #86
279: invokevirtual #89
282: dload         8
284: ldc2_w        #12
287: dcmpl
288: ifne          295
291: iconst_1
292: goto          296
295: iconst_0
296: invokestatic  #91
299: new           #83
302: dup
303: invokespecial #84
306: ldc           #85
308: invokevirtual #86
311: dload         10
313: invokevirtual #150
316: ldc           #88
318: invokevirtual #86
321: ldc2_w        #12
324: invokevirtual #150
327: ldc           #85
329: invokevirtual #86
332: invokevirtual #89
335: dload         10
337: ldc2_w        #12
340: dcmpl
341: ifne          348
344: iconst_1
345: goto          349
348: iconst_0
349: invokestatic  #91
352: new           #83
355: dup
356: invokespecial #84
359: ldc           #85
361: invokevirtual #86
364: dload         12
366: invokevirtual #150
369: ldc           #88
371: invokevirtual #86
374: ldc2_w        #12
377: invokevirtual #150
380: ldc           #85
382: invokevirtual #86
385: invokevirtual #89
388: dload         12
390: ldc2_w        #12
393: dcmpl
394: ifne          401
397: iconst_1
398: goto          402
401: iconst_0
402: invokestatic  #91
405: new           #83
408: dup
409: invokespecial #84
412: ldc           #85
414: invokevirtual #86
417: dload         14
419: invokevirtual #150
422: ldc           #88
424: invokevirtual #86
427: ldc2_w        #12
430: invokevirtual #150
433: ldc           #85
435: invokevirtual #86
438: invokevirtual #89
441: dload         14
443: ldc2_w        #12
446: dcmpl
447: ifne          454
450: iconst_1
451: goto          455
454: iconst_0
455: invokestatic  #91
458: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test274
Start line: 8364
End line: 8488
Method source code: 
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        java.lang.Number number11 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException14 = new org.apache.commons.math3.exception.NumberIsTooSmallException(number11, (java.lang.Number) (byte) 0, true);
        java.lang.Number number15 = numberIsTooSmallException14.getMin();
        boolean boolean16 = numberIsTooSmallException14.getBoundIsAllowed();
        mathIllegalArgumentException9.addSuppressed((java.lang.Throwable) numberIsTooSmallException14);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats18 = org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException22 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats18, (java.lang.Number) 1.0d, (java.lang.Number) (byte) 100, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats24 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats25 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats26 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats27 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray29 = new java.lang.Object[] { localizedFormats27, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException30 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats26, objArray29);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats31 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats32 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray34 = new java.lang.Object[] { localizedFormats32, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException35 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats31, objArray34);
        mathIllegalArgumentException30.addSuppressed((java.lang.Throwable) mathIllegalArgumentException35);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats37 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats38 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray40 = new java.lang.Object[] { localizedFormats38, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException41 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException35, (org.apache.commons.math3.exception.util.Localizable) localizedFormats37, objArray40);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException42 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, objArray40);
        java.lang.Object[] objArray43 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray40);
        org.apache.commons.math3.exception.ZeroException zeroException44 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats24, objArray43);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException45 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, objArray43);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats46 = org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats47 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats48 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray50 = new java.lang.Object[] { localizedFormats48, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException51 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats47, objArray50);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats52 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats53 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray55 = new java.lang.Object[] { localizedFormats53, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException56 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats52, objArray55);
        mathIllegalArgumentException51.addSuppressed((java.lang.Throwable) mathIllegalArgumentException56);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats58 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats59 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray61 = new java.lang.Object[] { localizedFormats59, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException62 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException56, (org.apache.commons.math3.exception.util.Localizable) localizedFormats58, objArray61);
        java.lang.Object[] objArray63 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray61);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException64 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats46, objArray63);
        org.apache.commons.math3.exception.ZeroException zeroException65 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, objArray63);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer66 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter67 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer66);
        harmonicFitter67.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter67.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter67.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray75 = harmonicFitter67.getObservations();
        java.lang.Object[] objArray76 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray75);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException77 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException22, (org.apache.commons.math3.exception.util.Localizable) localizedFormats23, (java.lang.Object[]) weightedObservedPointArray75);
        numberIsTooSmallException14.addSuppressed((java.lang.Throwable) numberIsTooSmallException22);
        java.lang.Number number79 = numberIsTooSmallException14.getArgument();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals("'" + number15 + "' != '" + (byte) 0 + "'", number15, (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + localizedFormats18 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY + "'", localizedFormats18.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY));
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM));
        org.junit.Assert.assertTrue("'" + localizedFormats24 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats24.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats25 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats25.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats26 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats26.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats27 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats27.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats31 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats31.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats32 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats32.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats37 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats37.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats38 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats38.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats46 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED + "'", localizedFormats46.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED));
        org.junit.Assert.assertTrue("'" + localizedFormats47 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats47.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats48 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats48.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats52 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats52.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats53 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats53.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats58 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats58.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats59 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats59.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(weightedObservedPointArray75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNull(number79);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #571
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: aconst_null
109: astore        9
111: new           #28
114: dup
115: aload         9
117: iconst_0
118: invokestatic  #159
121: iconst_1
122: invokespecial #160
125: astore        10
127: aload         10
129: invokevirtual #572
132: astore        11
134: aload         10
136: invokevirtual #162
139: istore        12
141: aload         8
143: aload         10
145: invokevirtual #132
148: getstatic     #424
151: astore        13
153: new           #28
156: dup
157: aload         13
159: dconst_1
160: invokestatic  #247
163: bipush        100
165: invokestatic  #159
168: iconst_1
169: invokespecial #195
172: astore        14
174: getstatic     #425
177: astore        15
179: getstatic     #125
182: astore        16
184: getstatic     #126
187: astore        17
189: getstatic     #127
192: astore        18
194: getstatic     #128
197: astore        19
199: iconst_2
200: anewarray     #5
203: dup
204: iconst_0
205: aload         19
207: aastore
208: dup
209: iconst_1
210: lconst_1
211: invokestatic  #129
214: aastore
215: astore        20
217: new           #130
220: dup
221: aload         18
223: aload         20
225: invokespecial #131
228: astore        21
230: getstatic     #127
233: astore        22
235: getstatic     #128
238: astore        23
240: iconst_2
241: anewarray     #5
244: dup
245: iconst_0
246: aload         23
248: aastore
249: dup
250: iconst_1
251: lconst_1
252: invokestatic  #129
255: aastore
256: astore        24
258: new           #130
261: dup
262: aload         22
264: aload         24
266: invokespecial #131
269: astore        25
271: aload         21
273: aload         25
275: invokevirtual #132
278: getstatic     #133
281: astore        26
283: getstatic     #134
286: astore        27
288: iconst_2
289: anewarray     #5
292: dup
293: iconst_0
294: aload         27
296: aastore
297: dup
298: iconst_1
299: bipush        10
301: invokestatic  #135
304: aastore
305: astore        28
307: new           #136
310: dup
311: aload         25
313: aload         26
315: aload         28
317: invokespecial #137
320: astore        29
322: new           #136
325: dup
326: aload         17
328: aload         28
330: invokespecial #138
333: astore        30
335: aload         28
337: invokestatic  #80
340: astore        31
342: new           #81
345: dup
346: aload         16
348: aload         31
350: invokespecial #82
353: astore        32
355: new           #130
358: dup
359: aload         15
361: aload         31
363: invokespecial #131
366: astore        33
368: getstatic     #426
371: astore        34
373: getstatic     #127
376: astore        35
378: getstatic     #128
381: astore        36
383: iconst_2
384: anewarray     #5
387: dup
388: iconst_0
389: aload         36
391: aastore
392: dup
393: iconst_1
394: lconst_1
395: invokestatic  #129
398: aastore
399: astore        37
401: new           #130
404: dup
405: aload         35
407: aload         37
409: invokespecial #131
412: astore        38
414: getstatic     #127
417: astore        39
419: getstatic     #128
422: astore        40
424: iconst_2
425: anewarray     #5
428: dup
429: iconst_0
430: aload         40
432: aastore
433: dup
434: iconst_1
435: lconst_1
436: invokestatic  #129
439: aastore
440: astore        41
442: new           #130
445: dup
446: aload         39
448: aload         41
450: invokespecial #131
453: astore        42
455: aload         38
457: aload         42
459: invokevirtual #132
462: getstatic     #133
465: astore        43
467: getstatic     #134
470: astore        44
472: iconst_2
473: anewarray     #5
476: dup
477: iconst_0
478: aload         44
480: aastore
481: dup
482: iconst_1
483: bipush        10
485: invokestatic  #135
488: aastore
489: astore        45
491: new           #136
494: dup
495: aload         42
497: aload         43
499: aload         45
501: invokespecial #137
504: astore        46
506: aload         45
508: invokestatic  #80
511: astore        47
513: new           #136
516: dup
517: aload         34
519: aload         47
521: invokespecial #138
524: astore        48
526: new           #81
529: dup
530: aload         15
532: aload         47
534: invokespecial #82
537: astore        49
539: aconst_null
540: astore        50
542: new           #8
545: dup
546: aload         50
548: invokespecial #9
551: astore        51
553: aload         51
555: dconst_1
556: ldc2_w        #32
559: invokevirtual #43
562: aload         51
564: dconst_0
565: ldc2_w        #34
568: invokevirtual #43
571: aload         51
573: invokevirtual #59
576: aload         51
578: invokevirtual #25
581: astore        52
583: aload         52
585: checkcast     #79
588: invokestatic  #80
591: astore        53
593: new           #136
596: dup
597: aload         14
599: aload         15
601: aload         52
603: checkcast     #79
606: invokespecial #137
609: astore        54
611: aload         10
613: aload         14
615: invokevirtual #573
618: aload         10
620: invokevirtual #390
623: astore        55
625: new           #83
628: dup
629: invokespecial #84
632: ldc           #85
634: invokevirtual #86
637: aload_1
638: invokevirtual #87
641: ldc           #88
643: invokevirtual #86
646: getstatic     #127
649: invokevirtual #87
652: ldc           #85
654: invokevirtual #86
657: invokevirtual #89
660: aload_1
661: getstatic     #127
664: invokevirtual #90
667: invokestatic  #91
670: new           #83
673: dup
674: invokespecial #84
677: ldc           #85
679: invokevirtual #86
682: aload_2
683: invokevirtual #87
686: ldc           #88
688: invokevirtual #86
691: getstatic     #128
694: invokevirtual #87
697: ldc           #85
699: invokevirtual #86
702: invokevirtual #89
705: aload_2
706: getstatic     #128
709: invokevirtual #90
712: invokestatic  #91
715: aload_3
716: invokestatic  #20
719: aload_3
720: invokestatic  #92
723: ldc           #140
725: invokestatic  #23
728: aload_3
729: invokestatic  #93
732: ldc           #140
734: invokestatic  #23
737: new           #83
740: dup
741: invokespecial #84
744: ldc           #85
746: invokevirtual #86
749: aload         5
751: invokevirtual #87
754: ldc           #88
756: invokevirtual #86
759: getstatic     #127
762: invokevirtual #87
765: ldc           #85
767: invokevirtual #86
770: invokevirtual #89
773: aload         5
775: getstatic     #127
778: invokevirtual #90
781: invokestatic  #91
784: new           #83
787: dup
788: invokespecial #84
791: ldc           #85
793: invokevirtual #86
796: aload         6
798: invokevirtual #87
801: ldc           #88
803: invokevirtual #86
806: getstatic     #128
809: invokevirtual #87
812: ldc           #85
814: invokevirtual #86
817: invokevirtual #89
820: aload         6
822: getstatic     #128
825: invokevirtual #90
828: invokestatic  #91
831: aload         7
833: invokestatic  #20
836: aload         7
838: invokestatic  #92
841: ldc           #140
843: invokestatic  #23
846: aload         7
848: invokestatic  #93
851: ldc           #140
853: invokestatic  #23
856: new           #83
859: dup
860: invokespecial #84
863: ldc           #85
865: invokevirtual #86
868: aload         11
870: invokevirtual #87
873: ldc           #88
875: invokevirtual #86
878: iconst_0
879: invokevirtual #244
882: ldc           #85
884: invokevirtual #86
887: invokevirtual #89
890: aload         11
892: iconst_0
893: invokestatic  #159
896: invokestatic  #245
899: new           #83
902: dup
903: invokespecial #84
906: ldc           #85
908: invokevirtual #86
911: iload         12
913: invokevirtual #170
916: ldc           #88
918: invokevirtual #86
921: iconst_1
922: invokevirtual #170
925: ldc           #85
927: invokevirtual #86
930: invokevirtual #89
933: iload         12
935: iconst_1
936: if_icmpne     943
939: iconst_1
940: goto          944
943: iconst_0
944: invokestatic  #91
947: new           #83
950: dup
951: invokespecial #84
954: ldc           #85
956: invokevirtual #86
959: aload         13
961: invokevirtual #87
964: ldc           #88
966: invokevirtual #86
969: getstatic     #424
972: invokevirtual #87
975: ldc           #85
977: invokevirtual #86
980: invokevirtual #89
983: aload         13
985: getstatic     #424
988: invokevirtual #90
991: invokestatic  #91
994: new           #83
997: dup
998: invokespecial #84
1001: ldc           #85
1003: invokevirtual #86
1006: aload         15
1008: invokevirtual #87
1011: ldc           #88
1013: invokevirtual #86
1016: getstatic     #425
1019: invokevirtual #87
1022: ldc           #85
1024: invokevirtual #86
1027: invokevirtual #89
1030: aload         15
1032: getstatic     #425
1035: invokevirtual #90
1038: invokestatic  #91
1041: new           #83
1044: dup
1045: invokespecial #84
1048: ldc           #85
1050: invokevirtual #86
1053: aload         16
1055: invokevirtual #87
1058: ldc           #88
1060: invokevirtual #86
1063: getstatic     #125
1066: invokevirtual #87
1069: ldc           #85
1071: invokevirtual #86
1074: invokevirtual #89
1077: aload         16
1079: getstatic     #125
1082: invokevirtual #90
1085: invokestatic  #91
1088: new           #83
1091: dup
1092: invokespecial #84
1095: ldc           #85
1097: invokevirtual #86
1100: aload         17
1102: invokevirtual #87
1105: ldc           #88
1107: invokevirtual #86
1110: getstatic     #126
1113: invokevirtual #87
1116: ldc           #85
1118: invokevirtual #86
1121: invokevirtual #89
1124: aload         17
1126: getstatic     #126
1129: invokevirtual #90
1132: invokestatic  #91
1135: new           #83
1138: dup
1139: invokespecial #84
1142: ldc           #85
1144: invokevirtual #86
1147: aload         18
1149: invokevirtual #87
1152: ldc           #88
1154: invokevirtual #86
1157: getstatic     #127
1160: invokevirtual #87
1163: ldc           #85
1165: invokevirtual #86
1168: invokevirtual #89
1171: aload         18
1173: getstatic     #127
1176: invokevirtual #90
1179: invokestatic  #91
1182: new           #83
1185: dup
1186: invokespecial #84
1189: ldc           #85
1191: invokevirtual #86
1194: aload         19
1196: invokevirtual #87
1199: ldc           #88
1201: invokevirtual #86
1204: getstatic     #128
1207: invokevirtual #87
1210: ldc           #85
1212: invokevirtual #86
1215: invokevirtual #89
1218: aload         19
1220: getstatic     #128
1223: invokevirtual #90
1226: invokestatic  #91
1229: aload         20
1231: invokestatic  #20
1234: aload         20
1236: invokestatic  #92
1239: ldc           #140
1241: invokestatic  #23
1244: aload         20
1246: invokestatic  #93
1249: ldc           #140
1251: invokestatic  #23
1254: new           #83
1257: dup
1258: invokespecial #84
1261: ldc           #85
1263: invokevirtual #86
1266: aload         22
1268: invokevirtual #87
1271: ldc           #88
1273: invokevirtual #86
1276: getstatic     #127
1279: invokevirtual #87
1282: ldc           #85
1284: invokevirtual #86
1287: invokevirtual #89
1290: aload         22
1292: getstatic     #127
1295: invokevirtual #90
1298: invokestatic  #91
1301: new           #83
1304: dup
1305: invokespecial #84
1308: ldc           #85
1310: invokevirtual #86
1313: aload         23
1315: invokevirtual #87
1318: ldc           #88
1320: invokevirtual #86
1323: getstatic     #128
1326: invokevirtual #87
1329: ldc           #85
1331: invokevirtual #86
1334: invokevirtual #89
1337: aload         23
1339: getstatic     #128
1342: invokevirtual #90
1345: invokestatic  #91
1348: aload         24
1350: invokestatic  #20
1353: aload         24
1355: invokestatic  #92
1358: ldc           #140
1360: invokestatic  #23
1363: aload         24
1365: invokestatic  #93
1368: ldc           #140
1370: invokestatic  #23
1373: new           #83
1376: dup
1377: invokespecial #84
1380: ldc           #85
1382: invokevirtual #86
1385: aload         26
1387: invokevirtual #87
1390: ldc           #88
1392: invokevirtual #86
1395: getstatic     #133
1398: invokevirtual #87
1401: ldc           #85
1403: invokevirtual #86
1406: invokevirtual #89
1409: aload         26
1411: getstatic     #133
1414: invokevirtual #90
1417: invokestatic  #91
1420: new           #83
1423: dup
1424: invokespecial #84
1427: ldc           #85
1429: invokevirtual #86
1432: aload         27
1434: invokevirtual #87
1437: ldc           #88
1439: invokevirtual #86
1442: getstatic     #134
1445: invokevirtual #87
1448: ldc           #85
1450: invokevirtual #86
1453: invokevirtual #89
1456: aload         27
1458: getstatic     #134
1461: invokevirtual #90
1464: invokestatic  #91
1467: aload         28
1469: invokestatic  #20
1472: aload         28
1474: invokestatic  #92
1477: ldc           #141
1479: invokestatic  #23
1482: aload         28
1484: invokestatic  #93
1487: ldc           #141
1489: invokestatic  #23
1492: aload         31
1494: invokestatic  #20
1497: aload         31
1499: invokestatic  #92
1502: ldc           #141
1504: invokestatic  #23
1507: aload         31
1509: invokestatic  #93
1512: ldc           #141
1514: invokestatic  #23
1517: new           #83
1520: dup
1521: invokespecial #84
1524: ldc           #85
1526: invokevirtual #86
1529: aload         34
1531: invokevirtual #87
1534: ldc           #88
1536: invokevirtual #86
1539: getstatic     #426
1542: invokevirtual #87
1545: ldc           #85
1547: invokevirtual #86
1550: invokevirtual #89
1553: aload         34
1555: getstatic     #426
1558: invokevirtual #90
1561: invokestatic  #91
1564: new           #83
1567: dup
1568: invokespecial #84
1571: ldc           #85
1573: invokevirtual #86
1576: aload         35
1578: invokevirtual #87
1581: ldc           #88
1583: invokevirtual #86
1586: getstatic     #127
1589: invokevirtual #87
1592: ldc           #85
1594: invokevirtual #86
1597: invokevirtual #89
1600: aload         35
1602: getstatic     #127
1605: invokevirtual #90
1608: invokestatic  #91
1611: new           #83
1614: dup
1615: invokespecial #84
1618: ldc           #85
1620: invokevirtual #86
1623: aload         36
1625: invokevirtual #87
1628: ldc           #88
1630: invokevirtual #86
1633: getstatic     #128
1636: invokevirtual #87
1639: ldc           #85
1641: invokevirtual #86
1644: invokevirtual #89
1647: aload         36
1649: getstatic     #128
1652: invokevirtual #90
1655: invokestatic  #91
1658: aload         37
1660: invokestatic  #20
1663: aload         37
1665: invokestatic  #92
1668: ldc           #140
1670: invokestatic  #23
1673: aload         37
1675: invokestatic  #93
1678: ldc           #140
1680: invokestatic  #23
1683: new           #83
1686: dup
1687: invokespecial #84
1690: ldc           #85
1692: invokevirtual #86
1695: aload         39
1697: invokevirtual #87
1700: ldc           #88
1702: invokevirtual #86
1705: getstatic     #127
1708: invokevirtual #87
1711: ldc           #85
1713: invokevirtual #86
1716: invokevirtual #89
1719: aload         39
1721: getstatic     #127
1724: invokevirtual #90
1727: invokestatic  #91
1730: new           #83
1733: dup
1734: invokespecial #84
1737: ldc           #85
1739: invokevirtual #86
1742: aload         40
1744: invokevirtual #87
1747: ldc           #88
1749: invokevirtual #86
1752: getstatic     #128
1755: invokevirtual #87
1758: ldc           #85
1760: invokevirtual #86
1763: invokevirtual #89
1766: aload         40
1768: getstatic     #128
1771: invokevirtual #90
1774: invokestatic  #91
1777: aload         41
1779: invokestatic  #20
1782: aload         41
1784: invokestatic  #92
1787: ldc           #140
1789: invokestatic  #23
1792: aload         41
1794: invokestatic  #93
1797: ldc           #140
1799: invokestatic  #23
1802: new           #83
1805: dup
1806: invokespecial #84
1809: ldc           #85
1811: invokevirtual #86
1814: aload         43
1816: invokevirtual #87
1819: ldc           #88
1821: invokevirtual #86
1824: getstatic     #133
1827: invokevirtual #87
1830: ldc           #85
1832: invokevirtual #86
1835: invokevirtual #89
1838: aload         43
1840: getstatic     #133
1843: invokevirtual #90
1846: invokestatic  #91
1849: new           #83
1852: dup
1853: invokespecial #84
1856: ldc           #85
1858: invokevirtual #86
1861: aload         44
1863: invokevirtual #87
1866: ldc           #88
1868: invokevirtual #86
1871: getstatic     #134
1874: invokevirtual #87
1877: ldc           #85
1879: invokevirtual #86
1882: invokevirtual #89
1885: aload         44
1887: getstatic     #134
1890: invokevirtual #90
1893: invokestatic  #91
1896: aload         45
1898: invokestatic  #20
1901: aload         45
1903: invokestatic  #92
1906: ldc           #141
1908: invokestatic  #23
1911: aload         45
1913: invokestatic  #93
1916: ldc           #141
1918: invokestatic  #23
1921: aload         47
1923: invokestatic  #20
1926: aload         47
1928: invokestatic  #92
1931: ldc           #141
1933: invokestatic  #23
1936: aload         47
1938: invokestatic  #93
1941: ldc           #141
1943: invokestatic  #23
1946: aload         52
1948: invokestatic  #20
1951: aload         53
1953: invokestatic  #20
1956: aload         53
1958: invokestatic  #92
1961: ldc           #74
1963: invokestatic  #23
1966: aload         53
1968: invokestatic  #93
1971: ldc           #74
1973: invokestatic  #23
1976: aload         55
1978: invokestatic  #171
1981: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test275
Start line: 8491
End line: 8643
Method source code: 
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats11 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray14 = new java.lang.Object[] { localizedFormats12, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException15 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException9, (org.apache.commons.math3.exception.util.Localizable) localizedFormats11, objArray14);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext16 = mathIllegalStateException15.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats18 = org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE;
        exceptionContext16.setValue("org.apache.commons.math3.exception.MathIllegalArgumentException: overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1", (java.lang.Object) localizedFormats18);
        java.lang.Throwable throwable20 = exceptionContext16.getThrowable();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray25 = new java.lang.Object[] { localizedFormats23, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException26 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats22, objArray25);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats27 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats28 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats31 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray32 = new java.lang.Object[] { localizedFormats28, localizedFormats29, localizedFormats30, localizedFormats31 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException33 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException26, (org.apache.commons.math3.exception.util.Localizable) localizedFormats27, objArray32);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats34 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException38 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray39 = numberIsTooSmallException38.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException40 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalStateException33, (org.apache.commons.math3.exception.util.Localizable) localizedFormats34, (java.lang.Object[]) throwableArray39);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext41 = mathIllegalStateException33.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats42 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION;
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.ZeroException zeroException44 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats42, objArray43);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException48 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats42, (java.lang.Number) (short) 0, (java.lang.Number) 0L, true);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException52 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray53 = numberIsTooSmallException52.getSuppressed();
        java.lang.Object[] objArray54 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) throwableArray53);
        exceptionContext41.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats42, objArray54);
        java.util.Set<java.lang.String> strSet56 = exceptionContext41.getKeys();
        java.lang.Object obj58 = exceptionContext41.getValue("class ({0}) does not implement Comparable");
        java.lang.Throwable throwable59 = exceptionContext41.getThrowable();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats60 = org.apache.commons.math3.exception.util.LocalizedFormats.DISTRIBUTION_NOT_LOADED;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats61 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats62 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray64 = new java.lang.Object[] { localizedFormats62, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException65 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats61, objArray64);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats66 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats67 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats68 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats69 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats70 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray71 = new java.lang.Object[] { localizedFormats67, localizedFormats68, localizedFormats69, localizedFormats70 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException72 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException65, (org.apache.commons.math3.exception.util.Localizable) localizedFormats66, objArray71);
        exceptionContext41.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats60, objArray71);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats74 = org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY;
        java.lang.Number number76 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException78 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number76, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats79 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer80 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter81 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer80);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray82 = harmonicFitter81.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray83 = harmonicFitter81.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray84 = harmonicFitter81.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException85 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException78, (org.apache.commons.math3.exception.util.Localizable) localizedFormats79, (java.lang.Object[]) weightedObservedPointArray84);
        exceptionContext41.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats74, (java.lang.Object[]) weightedObservedPointArray84);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException87 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable20, (org.apache.commons.math3.exception.util.Localizable) localizedFormats21, (java.lang.Object[]) weightedObservedPointArray84);
        java.util.Locale locale88 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = localizedFormats21.getLocalizedString(locale88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats11 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats11.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(exceptionContext16);
        org.junit.Assert.assertTrue("'" + localizedFormats18 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE + "'", localizedFormats18.equals(org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE));
        org.junit.Assert.assertNotNull(throwable20);
        org.junit.Assert.assertEquals(throwable20.getLocalizedMessage(), "function is not differentiable");
        org.junit.Assert.assertEquals(throwable20.getMessage(), "function is not differentiable");
        org.junit.Assert.assertEquals(throwable20.toString(), "org.apache.commons.math3.exception.MathIllegalStateException: function is not differentiable");
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES));
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats27 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats27.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats28 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats28.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats31 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats31.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertTrue("'" + localizedFormats34 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE + "'", localizedFormats34.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE));
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(exceptionContext41);
        org.junit.Assert.assertTrue("'" + localizedFormats42 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION + "'", localizedFormats42.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION));
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(throwable59);
        org.junit.Assert.assertEquals(throwable59.getLocalizedMessage(), "overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive: distribution not loaded: empty selected column index array");
        org.junit.Assert.assertEquals(throwable59.getMessage(), "overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive: distribution not loaded: empty selected column index array");
        org.junit.Assert.assertEquals(throwable59.toString(), "org.apache.commons.math3.exception.MathIllegalStateException: overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive: distribution not loaded: empty selected column index array");
        org.junit.Assert.assertTrue("'" + localizedFormats60 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.DISTRIBUTION_NOT_LOADED + "'", localizedFormats60.equals(org.apache.commons.math3.exception.util.LocalizedFormats.DISTRIBUTION_NOT_LOADED));
        org.junit.Assert.assertTrue("'" + localizedFormats61 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats61.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats62 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats62.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats66 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats66.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats67 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats67.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats68 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats68.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats69 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats69.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats70 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats70.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertTrue("'" + localizedFormats74 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY + "'", localizedFormats74.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY));
        org.junit.Assert.assertTrue("'" + localizedFormats79 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats79.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray82);
        org.junit.Assert.assertNotNull(weightedObservedPointArray83);
        org.junit.Assert.assertNotNull(weightedObservedPointArray84);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #574
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: getstatic     #133
111: astore        9
113: getstatic     #134
116: astore        10
118: iconst_2
119: anewarray     #5
122: dup
123: iconst_0
124: aload         10
126: aastore
127: dup
128: iconst_1
129: bipush        10
131: invokestatic  #135
134: aastore
135: astore        11
137: new           #136
140: dup
141: aload         8
143: aload         9
145: aload         11
147: invokespecial #137
150: astore        12
152: aload         12
154: invokevirtual #282
157: astore        13
159: getstatic     #382
162: astore        14
164: aload         13
166: ldc_w         #408
169: aload         14
171: invokevirtual #373
174: aload         13
176: invokevirtual #288
179: astore        15
181: getstatic     #363
184: astore        16
186: getstatic     #127
189: astore        17
191: getstatic     #128
194: astore        18
196: iconst_2
197: anewarray     #5
200: dup
201: iconst_0
202: aload         18
204: aastore
205: dup
206: iconst_1
207: lconst_1
208: invokestatic  #129
211: aastore
212: astore        19
214: new           #130
217: dup
218: aload         17
220: aload         19
222: invokespecial #131
225: astore        20
227: getstatic     #328
230: astore        21
232: getstatic     #329
235: astore        22
237: getstatic     #330
240: astore        23
242: getstatic     #331
245: astore        24
247: getstatic     #332
250: astore        25
252: iconst_4
253: anewarray     #5
256: dup
257: iconst_0
258: aload         22
260: aastore
261: dup
262: iconst_1
263: aload         23
265: aastore
266: dup
267: iconst_2
268: aload         24
270: aastore
271: dup
272: iconst_3
273: aload         25
275: aastore
276: astore        26
278: new           #136
281: dup
282: aload         20
284: aload         21
286: aload         26
288: invokespecial #137
291: astore        27
293: getstatic     #333
296: astore        28
298: new           #28
301: dup
302: ldc2_w        #277
305: invokestatic  #129
308: bipush        10
310: invokestatic  #159
313: iconst_1
314: invokespecial #160
317: astore        29
319: aload         29
321: invokevirtual #334
324: astore        30
326: new           #136
329: dup
330: aload         27
332: aload         28
334: aload         30
336: checkcast     #79
339: invokespecial #137
342: astore        31
344: aload         27
346: invokevirtual #282
349: astore        32
351: getstatic     #335
354: astore        33
356: iconst_0
357: anewarray     #5
360: astore        34
362: new           #81
365: dup
366: aload         33
368: aload         34
370: invokespecial #82
373: astore        35
375: new           #28
378: dup
379: aload         33
381: iconst_0
382: invokestatic  #194
385: lconst_0
386: invokestatic  #129
389: iconst_1
390: invokespecial #195
393: astore        36
395: new           #28
398: dup
399: ldc2_w        #277
402: invokestatic  #129
405: bipush        10
407: invokestatic  #159
410: iconst_1
411: invokespecial #160
414: astore        37
416: aload         37
418: invokevirtual #334
421: astore        38
423: aload         38
425: checkcast     #79
428: invokestatic  #80
431: astore        39
433: aload         32
435: aload         33
437: aload         39
439: invokevirtual #169
442: aload         32
444: invokevirtual #370
447: astore        40
449: aload         32
451: ldc_w         #371
454: invokevirtual #167
457: astore        41
459: aload         32
461: invokevirtual #288
464: astore        42
466: getstatic     #526
469: astore        43
471: getstatic     #127
474: astore        44
476: getstatic     #128
479: astore        45
481: iconst_2
482: anewarray     #5
485: dup
486: iconst_0
487: aload         45
489: aastore
490: dup
491: iconst_1
492: lconst_1
493: invokestatic  #129
496: aastore
497: astore        46
499: new           #130
502: dup
503: aload         44
505: aload         46
507: invokespecial #131
510: astore        47
512: getstatic     #328
515: astore        48
517: getstatic     #329
520: astore        49
522: getstatic     #330
525: astore        50
527: getstatic     #331
530: astore        51
532: getstatic     #332
535: astore        52
537: iconst_4
538: anewarray     #5
541: dup
542: iconst_0
543: aload         49
545: aastore
546: dup
547: iconst_1
548: aload         50
550: aastore
551: dup
552: iconst_2
553: aload         51
555: aastore
556: dup
557: iconst_3
558: aload         52
560: aastore
561: astore        53
563: new           #136
566: dup
567: aload         47
569: aload         48
571: aload         53
573: invokespecial #137
576: astore        54
578: aload         32
580: aload         43
582: aload         53
584: invokevirtual #169
587: getstatic     #527
590: astore        55
592: aconst_null
593: astore        56
595: new           #28
598: dup
599: ldc2_w        #252
602: invokestatic  #129
605: aload         56
607: iconst_1
608: invokespecial #160
611: astore        57
613: getstatic     #254
616: astore        58
618: aconst_null
619: astore        59
621: new           #8
624: dup
625: aload         59
627: invokespecial #9
630: astore        60
632: aload         60
634: invokevirtual #25
637: astore        61
639: aload         60
641: invokevirtual #25
644: astore        62
646: aload         60
648: invokevirtual #25
651: astore        63
653: new           #136
656: dup
657: aload         57
659: aload         58
661: aload         63
663: checkcast     #79
666: invokespecial #137
669: astore        64
671: aload         32
673: aload         55
675: aload         63
677: checkcast     #79
680: invokevirtual #169
683: new           #136
686: dup
687: aload         15
689: aload         16
691: aload         63
693: checkcast     #79
696: invokespecial #137
699: astore        65
701: aconst_null
702: astore        66
704: aload         16
706: aload         66
708: invokevirtual #321
711: astore        67
713: ldc           #17
715: invokestatic  #18
718: goto          723
721: astore        67
723: new           #83
726: dup
727: invokespecial #84
730: ldc           #85
732: invokevirtual #86
735: aload_1
736: invokevirtual #87
739: ldc           #88
741: invokevirtual #86
744: getstatic     #127
747: invokevirtual #87
750: ldc           #85
752: invokevirtual #86
755: invokevirtual #89
758: aload_1
759: getstatic     #127
762: invokevirtual #90
765: invokestatic  #91
768: new           #83
771: dup
772: invokespecial #84
775: ldc           #85
777: invokevirtual #86
780: aload_2
781: invokevirtual #87
784: ldc           #88
786: invokevirtual #86
789: getstatic     #128
792: invokevirtual #87
795: ldc           #85
797: invokevirtual #86
800: invokevirtual #89
803: aload_2
804: getstatic     #128
807: invokevirtual #90
810: invokestatic  #91
813: aload_3
814: invokestatic  #20
817: aload_3
818: invokestatic  #92
821: ldc           #140
823: invokestatic  #23
826: aload_3
827: invokestatic  #93
830: ldc           #140
832: invokestatic  #23
835: new           #83
838: dup
839: invokespecial #84
842: ldc           #85
844: invokevirtual #86
847: aload         5
849: invokevirtual #87
852: ldc           #88
854: invokevirtual #86
857: getstatic     #127
860: invokevirtual #87
863: ldc           #85
865: invokevirtual #86
868: invokevirtual #89
871: aload         5
873: getstatic     #127
876: invokevirtual #90
879: invokestatic  #91
882: new           #83
885: dup
886: invokespecial #84
889: ldc           #85
891: invokevirtual #86
894: aload         6
896: invokevirtual #87
899: ldc           #88
901: invokevirtual #86
904: getstatic     #128
907: invokevirtual #87
910: ldc           #85
912: invokevirtual #86
915: invokevirtual #89
918: aload         6
920: getstatic     #128
923: invokevirtual #90
926: invokestatic  #91
929: aload         7
931: invokestatic  #20
934: aload         7
936: invokestatic  #92
939: ldc           #140
941: invokestatic  #23
944: aload         7
946: invokestatic  #93
949: ldc           #140
951: invokestatic  #23
954: new           #83
957: dup
958: invokespecial #84
961: ldc           #85
963: invokevirtual #86
966: aload         9
968: invokevirtual #87
971: ldc           #88
973: invokevirtual #86
976: getstatic     #133
979: invokevirtual #87
982: ldc           #85
984: invokevirtual #86
987: invokevirtual #89
990: aload         9
992: getstatic     #133
995: invokevirtual #90
998: invokestatic  #91
1001: new           #83
1004: dup
1005: invokespecial #84
1008: ldc           #85
1010: invokevirtual #86
1013: aload         10
1015: invokevirtual #87
1018: ldc           #88
1020: invokevirtual #86
1023: getstatic     #134
1026: invokevirtual #87
1029: ldc           #85
1031: invokevirtual #86
1034: invokevirtual #89
1037: aload         10
1039: getstatic     #134
1042: invokevirtual #90
1045: invokestatic  #91
1048: aload         11
1050: invokestatic  #20
1053: aload         11
1055: invokestatic  #92
1058: ldc           #141
1060: invokestatic  #23
1063: aload         11
1065: invokestatic  #93
1068: ldc           #141
1070: invokestatic  #23
1073: aload         13
1075: invokestatic  #20
1078: new           #83
1081: dup
1082: invokespecial #84
1085: ldc           #85
1087: invokevirtual #86
1090: aload         14
1092: invokevirtual #87
1095: ldc           #88
1097: invokevirtual #86
1100: getstatic     #382
1103: invokevirtual #87
1106: ldc           #85
1108: invokevirtual #86
1111: invokevirtual #89
1114: aload         14
1116: getstatic     #382
1119: invokevirtual #90
1122: invokestatic  #91
1125: aload         15
1127: invokestatic  #20
1130: aload         15
1132: invokevirtual #289
1135: ldc_w         #575
1138: invokestatic  #23
1141: aload         15
1143: invokevirtual #291
1146: ldc_w         #575
1149: invokestatic  #23
1152: aload         15
1154: invokevirtual #292
1157: ldc_w         #576
1160: invokestatic  #23
1163: new           #83
1166: dup
1167: invokespecial #84
1170: ldc           #85
1172: invokevirtual #86
1175: aload         16
1177: invokevirtual #87
1180: ldc           #88
1182: invokevirtual #86
1185: getstatic     #363
1188: invokevirtual #87
1191: ldc           #85
1193: invokevirtual #86
1196: invokevirtual #89
1199: aload         16
1201: getstatic     #363
1204: invokevirtual #90
1207: invokestatic  #91
1210: new           #83
1213: dup
1214: invokespecial #84
1217: ldc           #85
1219: invokevirtual #86
1222: aload         17
1224: invokevirtual #87
1227: ldc           #88
1229: invokevirtual #86
1232: getstatic     #127
1235: invokevirtual #87
1238: ldc           #85
1240: invokevirtual #86
1243: invokevirtual #89
1246: aload         17
1248: getstatic     #127
1251: invokevirtual #90
1254: invokestatic  #91
1257: new           #83
1260: dup
1261: invokespecial #84
1264: ldc           #85
1266: invokevirtual #86
1269: aload         18
1271: invokevirtual #87
1274: ldc           #88
1276: invokevirtual #86
1279: getstatic     #128
1282: invokevirtual #87
1285: ldc           #85
1287: invokevirtual #86
1290: invokevirtual #89
1293: aload         18
1295: getstatic     #128
1298: invokevirtual #90
1301: invokestatic  #91
1304: aload         19
1306: invokestatic  #20
1309: aload         19
1311: invokestatic  #92
1314: ldc           #140
1316: invokestatic  #23
1319: aload         19
1321: invokestatic  #93
1324: ldc           #140
1326: invokestatic  #23
1329: new           #83
1332: dup
1333: invokespecial #84
1336: ldc           #85
1338: invokevirtual #86
1341: aload         21
1343: invokevirtual #87
1346: ldc           #88
1348: invokevirtual #86
1351: getstatic     #328
1354: invokevirtual #87
1357: ldc           #85
1359: invokevirtual #86
1362: invokevirtual #89
1365: aload         21
1367: getstatic     #328
1370: invokevirtual #90
1373: invokestatic  #91
1376: new           #83
1379: dup
1380: invokespecial #84
1383: ldc           #85
1385: invokevirtual #86
1388: aload         22
1390: invokevirtual #87
1393: ldc           #88
1395: invokevirtual #86
1398: getstatic     #329
1401: invokevirtual #87
1404: ldc           #85
1406: invokevirtual #86
1409: invokevirtual #89
1412: aload         22
1414: getstatic     #329
1417: invokevirtual #90
1420: invokestatic  #91
1423: new           #83
1426: dup
1427: invokespecial #84
1430: ldc           #85
1432: invokevirtual #86
1435: aload         23
1437: invokevirtual #87
1440: ldc           #88
1442: invokevirtual #86
1445: getstatic     #330
1448: invokevirtual #87
1451: ldc           #85
1453: invokevirtual #86
1456: invokevirtual #89
1459: aload         23
1461: getstatic     #330
1464: invokevirtual #90
1467: invokestatic  #91
1470: new           #83
1473: dup
1474: invokespecial #84
1477: ldc           #85
1479: invokevirtual #86
1482: aload         24
1484: invokevirtual #87
1487: ldc           #88
1489: invokevirtual #86
1492: getstatic     #331
1495: invokevirtual #87
1498: ldc           #85
1500: invokevirtual #86
1503: invokevirtual #89
1506: aload         24
1508: getstatic     #331
1511: invokevirtual #90
1514: invokestatic  #91
1517: new           #83
1520: dup
1521: invokespecial #84
1524: ldc           #85
1526: invokevirtual #86
1529: aload         25
1531: invokevirtual #87
1534: ldc           #88
1536: invokevirtual #86
1539: getstatic     #332
1542: invokevirtual #87
1545: ldc           #85
1547: invokevirtual #86
1550: invokevirtual #89
1553: aload         25
1555: getstatic     #332
1558: invokevirtual #90
1561: invokestatic  #91
1564: aload         26
1566: invokestatic  #20
1569: aload         26
1571: invokestatic  #92
1574: ldc_w         #336
1577: invokestatic  #23
1580: aload         26
1582: invokestatic  #93
1585: ldc_w         #336
1588: invokestatic  #23
1591: new           #83
1594: dup
1595: invokespecial #84
1598: ldc           #85
1600: invokevirtual #86
1603: aload         28
1605: invokevirtual #87
1608: ldc           #88
1610: invokevirtual #86
1613: getstatic     #333
1616: invokevirtual #87
1619: ldc           #85
1621: invokevirtual #86
1624: invokevirtual #89
1627: aload         28
1629: getstatic     #333
1632: invokevirtual #90
1635: invokestatic  #91
1638: aload         30
1640: invokestatic  #20
1643: aload         32
1645: invokestatic  #20
1648: new           #83
1651: dup
1652: invokespecial #84
1655: ldc           #85
1657: invokevirtual #86
1660: aload         33
1662: invokevirtual #87
1665: ldc           #88
1667: invokevirtual #86
1670: getstatic     #335
1673: invokevirtual #87
1676: ldc           #85
1678: invokevirtual #86
1681: invokevirtual #89
1684: aload         33
1686: getstatic     #335
1689: invokevirtual #90
1692: invokestatic  #91
1695: aload         34
1697: invokestatic  #20
1700: aload         34
1702: invokestatic  #92
1705: ldc           #74
1707: invokestatic  #23
1710: aload         34
1712: invokestatic  #93
1715: ldc           #74
1717: invokestatic  #23
1720: aload         38
1722: invokestatic  #20
1725: aload         39
1727: invokestatic  #20
1730: aload         39
1732: invokestatic  #92
1735: ldc           #74
1737: invokestatic  #23
1740: aload         39
1742: invokestatic  #93
1745: ldc           #74
1747: invokestatic  #23
1750: aload         40
1752: invokestatic  #20
1755: aload         41
1757: invokestatic  #171
1760: aload         42
1762: invokestatic  #20
1765: aload         42
1767: invokevirtual #289
1770: ldc_w         #529
1773: invokestatic  #23
1776: aload         42
1778: invokevirtual #291
1781: ldc_w         #529
1784: invokestatic  #23
1787: aload         42
1789: invokevirtual #292
1792: ldc_w         #530
1795: invokestatic  #23
1798: new           #83
1801: dup
1802: invokespecial #84
1805: ldc           #85
1807: invokevirtual #86
1810: aload         43
1812: invokevirtual #87
1815: ldc           #88
1817: invokevirtual #86
1820: getstatic     #526
1823: invokevirtual #87
1826: ldc           #85
1828: invokevirtual #86
1831: invokevirtual #89
1834: aload         43
1836: getstatic     #526
1839: invokevirtual #90
1842: invokestatic  #91
1845: new           #83
1848: dup
1849: invokespecial #84
1852: ldc           #85
1854: invokevirtual #86
1857: aload         44
1859: invokevirtual #87
1862: ldc           #88
1864: invokevirtual #86
1867: getstatic     #127
1870: invokevirtual #87
1873: ldc           #85
1875: invokevirtual #86
1878: invokevirtual #89
1881: aload         44
1883: getstatic     #127
1886: invokevirtual #90
1889: invokestatic  #91
1892: new           #83
1895: dup
1896: invokespecial #84
1899: ldc           #85
1901: invokevirtual #86
1904: aload         45
1906: invokevirtual #87
1909: ldc           #88
1911: invokevirtual #86
1914: getstatic     #128
1917: invokevirtual #87
1920: ldc           #85
1922: invokevirtual #86
1925: invokevirtual #89
1928: aload         45
1930: getstatic     #128
1933: invokevirtual #90
1936: invokestatic  #91
1939: aload         46
1941: invokestatic  #20
1944: aload         46
1946: invokestatic  #92
1949: ldc           #140
1951: invokestatic  #23
1954: aload         46
1956: invokestatic  #93
1959: ldc           #140
1961: invokestatic  #23
1964: new           #83
1967: dup
1968: invokespecial #84
1971: ldc           #85
1973: invokevirtual #86
1976: aload         48
1978: invokevirtual #87
1981: ldc           #88
1983: invokevirtual #86
1986: getstatic     #328
1989: invokevirtual #87
1992: ldc           #85
1994: invokevirtual #86
1997: invokevirtual #89
2000: aload         48
2002: getstatic     #328
2005: invokevirtual #90
2008: invokestatic  #91
2011: new           #83
2014: dup
2015: invokespecial #84
2018: ldc           #85
2020: invokevirtual #86
2023: aload         49
2025: invokevirtual #87
2028: ldc           #88
2030: invokevirtual #86
2033: getstatic     #329
2036: invokevirtual #87
2039: ldc           #85
2041: invokevirtual #86
2044: invokevirtual #89
2047: aload         49
2049: getstatic     #329
2052: invokevirtual #90
2055: invokestatic  #91
2058: new           #83
2061: dup
2062: invokespecial #84
2065: ldc           #85
2067: invokevirtual #86
2070: aload         50
2072: invokevirtual #87
2075: ldc           #88
2077: invokevirtual #86
2080: getstatic     #330
2083: invokevirtual #87
2086: ldc           #85
2088: invokevirtual #86
2091: invokevirtual #89
2094: aload         50
2096: getstatic     #330
2099: invokevirtual #90
2102: invokestatic  #91
2105: new           #83
2108: dup
2109: invokespecial #84
2112: ldc           #85
2114: invokevirtual #86
2117: aload         51
2119: invokevirtual #87
2122: ldc           #88
2124: invokevirtual #86
2127: getstatic     #331
2130: invokevirtual #87
2133: ldc           #85
2135: invokevirtual #86
2138: invokevirtual #89
2141: aload         51
2143: getstatic     #331
2146: invokevirtual #90
2149: invokestatic  #91
2152: new           #83
2155: dup
2156: invokespecial #84
2159: ldc           #85
2161: invokevirtual #86
2164: aload         52
2166: invokevirtual #87
2169: ldc           #88
2171: invokevirtual #86
2174: getstatic     #332
2177: invokevirtual #87
2180: ldc           #85
2182: invokevirtual #86
2185: invokevirtual #89
2188: aload         52
2190: getstatic     #332
2193: invokevirtual #90
2196: invokestatic  #91
2199: aload         53
2201: invokestatic  #20
2204: aload         53
2206: invokestatic  #92
2209: ldc_w         #336
2212: invokestatic  #23
2215: aload         53
2217: invokestatic  #93
2220: ldc_w         #336
2223: invokestatic  #23
2226: new           #83
2229: dup
2230: invokespecial #84
2233: ldc           #85
2235: invokevirtual #86
2238: aload         55
2240: invokevirtual #87
2243: ldc           #88
2245: invokevirtual #86
2248: getstatic     #527
2251: invokevirtual #87
2254: ldc           #85
2256: invokevirtual #86
2259: invokevirtual #89
2262: aload         55
2264: getstatic     #527
2267: invokevirtual #90
2270: invokestatic  #91
2273: new           #83
2276: dup
2277: invokespecial #84
2280: ldc           #85
2282: invokevirtual #86
2285: aload         58
2287: invokevirtual #87
2290: ldc           #88
2292: invokevirtual #86
2295: getstatic     #254
2298: invokevirtual #87
2301: ldc           #85
2303: invokevirtual #86
2306: invokevirtual #89
2309: aload         58
2311: getstatic     #254
2314: invokevirtual #90
2317: invokestatic  #91
2320: aload         61
2322: invokestatic  #20
2325: aload         62
2327: invokestatic  #20
2330: aload         63
2332: invokestatic  #20
2335: return
Exception table:
from    to  target type
704   718   721   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test276
Start line: 8646
End line: 8661
Method source code: 
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        double double14 = weightedObservedPoint12.getX();
        double double15 = weightedObservedPoint12.getX();
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #577
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload         4
79: invokevirtual #147
82: dstore        5
84: aload         4
86: invokevirtual #147
89: dstore        7
91: aload_3
92: invokestatic  #20
95: new           #83
98: dup
99: invokespecial #84
102: ldc           #85
104: invokevirtual #86
107: dload         5
109: invokevirtual #150
112: ldc           #88
114: invokevirtual #86
117: dconst_0
118: invokevirtual #150
121: ldc           #85
123: invokevirtual #86
126: invokevirtual #89
129: dload         5
131: dconst_0
132: dcmpl
133: ifne          140
136: iconst_1
137: goto          141
140: iconst_0
141: invokestatic  #91
144: new           #83
147: dup
148: invokespecial #84
151: ldc           #85
153: invokevirtual #86
156: dload         7
158: invokevirtual #150
161: ldc           #88
163: invokevirtual #86
166: dconst_0
167: invokevirtual #150
170: ldc           #85
172: invokevirtual #86
175: invokevirtual #89
178: dload         7
180: dconst_0
181: dcmpl
182: ifne          189
185: iconst_1
186: goto          190
189: iconst_0
190: invokestatic  #91
193: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test277
Start line: 8664
End line: 8695
Method source code: 
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.addObservedPoint((double) 0, (double) (short) 100, (double) (short) 0);
        double[] doubleArray19 = new double[] { 97.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray20 = harmonicFitter1.fit(doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[97.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #578
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: dconst_0
105: ldc2_w        #34
108: dconst_0
109: invokevirtual #54
112: iconst_1
113: newarray       double
115: dup
116: iconst_0
117: ldc2_w        #44
120: dastore
121: astore        14
123: aload_2
124: aload         14
126: invokevirtual #16
129: astore        15
131: ldc           #17
133: invokestatic  #18
136: goto          141
139: astore        15
141: aload_3
142: invokestatic  #20
145: aload         4
147: invokestatic  #20
150: new           #83
153: dup
154: invokespecial #84
157: ldc           #85
159: invokevirtual #86
162: dload         6
164: invokevirtual #150
167: ldc           #88
169: invokevirtual #86
172: ldc2_w        #12
175: invokevirtual #150
178: ldc           #85
180: invokevirtual #86
183: invokevirtual #89
186: dload         6
188: ldc2_w        #12
191: dcmpl
192: ifne          199
195: iconst_1
196: goto          200
199: iconst_0
200: invokestatic  #91
203: new           #83
206: dup
207: invokespecial #84
210: ldc           #85
212: invokevirtual #86
215: dload         8
217: invokevirtual #150
220: ldc           #88
222: invokevirtual #86
225: ldc2_w        #14
228: invokevirtual #150
231: ldc           #85
233: invokevirtual #86
236: invokevirtual #89
239: dload         8
241: ldc2_w        #14
244: dcmpl
245: ifne          252
248: iconst_1
249: goto          253
252: iconst_0
253: invokestatic  #91
256: new           #83
259: dup
260: invokespecial #84
263: ldc           #85
265: invokevirtual #86
268: dload         10
270: invokevirtual #150
273: ldc           #88
275: invokevirtual #86
278: ldc2_w        #14
281: invokevirtual #150
284: ldc           #85
286: invokevirtual #86
289: invokevirtual #89
292: dload         10
294: ldc2_w        #14
297: dcmpl
298: ifne          305
301: iconst_1
302: goto          306
305: iconst_0
306: invokestatic  #91
309: new           #83
312: dup
313: invokespecial #84
316: ldc           #85
318: invokevirtual #86
321: dload         12
323: invokevirtual #150
326: ldc           #88
328: invokevirtual #86
331: ldc2_w        #12
334: invokevirtual #150
337: ldc           #85
339: invokevirtual #86
342: invokevirtual #89
345: dload         12
347: ldc2_w        #12
350: dcmpl
351: ifne          358
354: iconst_1
355: goto          359
358: iconst_0
359: invokestatic  #91
362: aload         14
364: invokestatic  #20
367: aload         14
369: invokestatic  #21
372: ldc_w         #579
375: invokestatic  #23
378: return
Exception table:
from    to  target type
123   136   139   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test278
Start line: 8698
End line: 8727
Method source code: 
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer4 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter5 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer4);
        harmonicFitter5.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter5.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray12 = harmonicFitter5.getObservations();
        harmonicFitter5.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray17 = harmonicFitter5.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint21 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (-1), 35.0d, (double) (byte) 0);
        harmonicFitter5.addObservedPoint(weightedObservedPoint21);
        harmonicFitter5.clearObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer24 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter25 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer24);
        harmonicFitter25.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter25.clearObservations();
        harmonicFitter25.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint34 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint(0.0d, (double) 1.0f, 35.0d);
        harmonicFitter25.addObservedPoint(weightedObservedPoint34);
        harmonicFitter5.addObservedPoint(weightedObservedPoint34);
        harmonicFitter1.addObservedPoint(weightedObservedPoint34);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray12);
        org.junit.Assert.assertNotNull(weightedObservedPointArray17);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #580
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aconst_null
46: astore        4
48: new           #8
51: dup
52: aload         4
54: invokespecial #9
57: astore        5
59: aload         5
61: dconst_1
62: ldc2_w        #32
65: invokevirtual #43
68: aload         5
70: dconst_0
71: ldc2_w        #34
74: invokevirtual #43
77: aload         5
79: invokevirtual #25
82: astore        6
84: aload         5
86: dconst_0
87: dconst_1
88: ldc2_w        #34
91: invokevirtual #54
94: aload         5
96: invokevirtual #25
99: astore        7
101: new           #145
104: dup
105: ldc2_w        #10
108: ldc2_w        #14
111: dconst_0
112: invokespecial #146
115: astore        8
117: aload         5
119: aload         8
121: invokevirtual #123
124: aload         5
126: invokevirtual #59
129: aconst_null
130: astore        9
132: new           #8
135: dup
136: aload         9
138: invokespecial #9
141: astore        10
143: aload         10
145: dconst_1
146: ldc2_w        #32
149: invokevirtual #43
152: aload         10
154: invokevirtual #59
157: aload         10
159: invokevirtual #59
162: new           #145
165: dup
166: dconst_0
167: dconst_1
168: ldc2_w        #14
171: invokespecial #146
174: astore        11
176: aload         10
178: aload         11
180: invokevirtual #123
183: aload         5
185: aload         11
187: invokevirtual #123
190: aload_2
191: aload         11
193: invokevirtual #123
196: aload_3
197: invokestatic  #20
200: aload         6
202: invokestatic  #20
205: aload         7
207: invokestatic  #20
210: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test279
Start line: 8730
End line: 8748
Method source code: 
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint((double) (-1), 0.0d, (double) (short) 0);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric10 = null;
        double[] doubleArray11 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = harmonicFitter1.fit((int) (byte) 100, parametric10, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #581
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: ldc2_w        #10
48: dconst_0
49: dconst_0
50: invokevirtual #54
53: aconst_null
54: astore_3
55: iconst_0
56: newarray       double
58: astore        4
60: aload_2
61: bipush        100
63: aload_3
64: aload         4
66: invokevirtual #40
69: astore        5
71: ldc           #17
73: invokestatic  #18
76: goto          81
79: astore        5
81: aload         4
83: invokestatic  #20
86: aload         4
88: invokestatic  #21
91: ldc           #74
93: invokestatic  #23
96: return
Exception table:
from    to  target type
60    76    79   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test280
Start line: 8751
End line: 8774
Method source code: 
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 100, (double) (short) 0, 10.0d);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric10 = null;
        double[] doubleArray11 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = harmonicFitter1.fit((int) (byte) 100, parametric10, doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #582
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #25
45: astore        4
47: aload_2
48: invokevirtual #25
51: astore        5
53: aload_2
54: ldc2_w        #34
57: dconst_0
58: ldc2_w        #32
61: invokevirtual #54
64: aconst_null
65: astore        6
67: iconst_0
68: newarray       double
70: astore        7
72: aload_2
73: bipush        100
75: aload         6
77: aload         7
79: invokevirtual #40
82: astore        8
84: ldc           #17
86: invokestatic  #18
89: goto          94
92: astore        8
94: aload_3
95: invokestatic  #20
98: aload         4
100: invokestatic  #20
103: aload         5
105: invokestatic  #20
108: aload         7
110: invokestatic  #20
113: aload         7
115: invokestatic  #21
118: ldc           #74
120: invokestatic  #23
123: return
Exception table:
from    to  target type
72    89    92   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test281
Start line: 8777
End line: 8813
Method source code: 
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.addObservedPoint((double) 0, (double) (short) 100, (double) (short) 0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray18 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer19 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter20 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer19);
        harmonicFitter20.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter20.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter20.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint31 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter20.addObservedPoint(weightedObservedPoint31);
        double double33 = weightedObservedPoint31.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint31);
        double double35 = weightedObservedPoint31.getX();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray18);
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #583
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: dconst_0
105: ldc2_w        #34
108: dconst_0
109: invokevirtual #54
112: aload_2
113: invokevirtual #25
116: astore        14
118: aconst_null
119: astore        15
121: new           #8
124: dup
125: aload         15
127: invokespecial #9
130: astore        16
132: aload         16
134: dconst_1
135: ldc2_w        #32
138: invokevirtual #43
141: aload         16
143: dconst_0
144: ldc2_w        #34
147: invokevirtual #43
150: aload         16
152: invokevirtual #25
155: astore        17
157: new           #145
160: dup
161: dconst_1
162: dconst_0
163: ldc2_w        #34
166: invokespecial #146
169: astore        18
171: aload         16
173: aload         18
175: invokevirtual #123
178: aload         18
180: invokevirtual #147
183: dstore        19
185: aload_2
186: aload         18
188: invokevirtual #123
191: aload         18
193: invokevirtual #147
196: dstore        21
198: aload_3
199: invokestatic  #20
202: aload         4
204: invokestatic  #20
207: new           #83
210: dup
211: invokespecial #84
214: ldc           #85
216: invokevirtual #86
219: dload         6
221: invokevirtual #150
224: ldc           #88
226: invokevirtual #86
229: ldc2_w        #12
232: invokevirtual #150
235: ldc           #85
237: invokevirtual #86
240: invokevirtual #89
243: dload         6
245: ldc2_w        #12
248: dcmpl
249: ifne          256
252: iconst_1
253: goto          257
256: iconst_0
257: invokestatic  #91
260: new           #83
263: dup
264: invokespecial #84
267: ldc           #85
269: invokevirtual #86
272: dload         8
274: invokevirtual #150
277: ldc           #88
279: invokevirtual #86
282: ldc2_w        #14
285: invokevirtual #150
288: ldc           #85
290: invokevirtual #86
293: invokevirtual #89
296: dload         8
298: ldc2_w        #14
301: dcmpl
302: ifne          309
305: iconst_1
306: goto          310
309: iconst_0
310: invokestatic  #91
313: new           #83
316: dup
317: invokespecial #84
320: ldc           #85
322: invokevirtual #86
325: dload         10
327: invokevirtual #150
330: ldc           #88
332: invokevirtual #86
335: ldc2_w        #14
338: invokevirtual #150
341: ldc           #85
343: invokevirtual #86
346: invokevirtual #89
349: dload         10
351: ldc2_w        #14
354: dcmpl
355: ifne          362
358: iconst_1
359: goto          363
362: iconst_0
363: invokestatic  #91
366: new           #83
369: dup
370: invokespecial #84
373: ldc           #85
375: invokevirtual #86
378: dload         12
380: invokevirtual #150
383: ldc           #88
385: invokevirtual #86
388: ldc2_w        #12
391: invokevirtual #150
394: ldc           #85
396: invokevirtual #86
399: invokevirtual #89
402: dload         12
404: ldc2_w        #12
407: dcmpl
408: ifne          415
411: iconst_1
412: goto          416
415: iconst_0
416: invokestatic  #91
419: aload         14
421: invokestatic  #20
424: aload         17
426: invokestatic  #20
429: new           #83
432: dup
433: invokespecial #84
436: ldc           #85
438: invokevirtual #86
441: dload         19
443: invokevirtual #150
446: ldc           #88
448: invokevirtual #86
451: dconst_0
452: invokevirtual #150
455: ldc           #85
457: invokevirtual #86
460: invokevirtual #89
463: dload         19
465: dconst_0
466: dcmpl
467: ifne          474
470: iconst_1
471: goto          475
474: iconst_0
475: invokestatic  #91
478: new           #83
481: dup
482: invokespecial #84
485: ldc           #85
487: invokevirtual #86
490: dload         21
492: invokevirtual #150
495: ldc           #88
497: invokevirtual #86
500: dconst_0
501: invokevirtual #150
504: ldc           #85
506: invokevirtual #86
509: invokevirtual #89
512: dload         21
514: dconst_0
515: dcmpl
516: ifne          523
519: iconst_1
520: goto          524
523: iconst_0
524: invokestatic  #91
527: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test282
Start line: 8816
End line: 8848
Method source code: 
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint16 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double17 = weightedObservedPoint16.getWeight();
        double double18 = weightedObservedPoint16.getX();
        double double19 = weightedObservedPoint16.getX();
        double double20 = weightedObservedPoint16.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint16);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) 100.0f, (double) 1, (double) (-1L));
        double[] doubleArray32 = new double[] { '#', 100, 1L, (byte) 1, 10L };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray33 = harmonicFitter1.fit(doubleArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[35.0, 100.0, 1.0, 1.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #584
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: dconst_0
59: dconst_1
60: ldc2_w        #34
63: invokevirtual #54
66: new           #145
69: dup
70: ldc2_w        #14
73: ldc2_w        #12
76: ldc2_w        #12
79: invokespecial #146
82: astore        4
84: aload         4
86: invokevirtual #148
89: dstore        5
91: aload         4
93: invokevirtual #147
96: dstore        7
98: aload         4
100: invokevirtual #147
103: dstore        9
105: aload         4
107: invokevirtual #148
110: dstore        11
112: aload_2
113: aload         4
115: invokevirtual #123
118: aload_2
119: invokevirtual #59
122: aload_2
123: ldc2_w        #34
126: dconst_1
127: ldc2_w        #10
130: invokevirtual #54
133: iconst_5
134: newarray       double
136: dup
137: iconst_0
138: ldc2_w        #14
141: dastore
142: dup
143: iconst_1
144: ldc2_w        #34
147: dastore
148: dup
149: iconst_2
150: dconst_1
151: dastore
152: dup
153: iconst_3
154: dconst_1
155: dastore
156: dup
157: iconst_4
158: ldc2_w        #32
161: dastore
162: astore        13
164: aload_2
165: aload         13
167: invokevirtual #16
170: astore        14
172: ldc           #17
174: invokestatic  #18
177: goto          182
180: astore        14
182: aload_3
183: invokestatic  #20
186: new           #83
189: dup
190: invokespecial #84
193: ldc           #85
195: invokevirtual #86
198: dload         5
200: invokevirtual #150
203: ldc           #88
205: invokevirtual #86
208: ldc2_w        #14
211: invokevirtual #150
214: ldc           #85
216: invokevirtual #86
219: invokevirtual #89
222: dload         5
224: ldc2_w        #14
227: dcmpl
228: ifne          235
231: iconst_1
232: goto          236
235: iconst_0
236: invokestatic  #91
239: new           #83
242: dup
243: invokespecial #84
246: ldc           #85
248: invokevirtual #86
251: dload         7
253: invokevirtual #150
256: ldc           #88
258: invokevirtual #86
261: ldc2_w        #12
264: invokevirtual #150
267: ldc           #85
269: invokevirtual #86
272: invokevirtual #89
275: dload         7
277: ldc2_w        #12
280: dcmpl
281: ifne          288
284: iconst_1
285: goto          289
288: iconst_0
289: invokestatic  #91
292: new           #83
295: dup
296: invokespecial #84
299: ldc           #85
301: invokevirtual #86
304: dload         9
306: invokevirtual #150
309: ldc           #88
311: invokevirtual #86
314: ldc2_w        #12
317: invokevirtual #150
320: ldc           #85
322: invokevirtual #86
325: invokevirtual #89
328: dload         9
330: ldc2_w        #12
333: dcmpl
334: ifne          341
337: iconst_1
338: goto          342
341: iconst_0
342: invokestatic  #91
345: new           #83
348: dup
349: invokespecial #84
352: ldc           #85
354: invokevirtual #86
357: dload         11
359: invokevirtual #150
362: ldc           #88
364: invokevirtual #86
367: ldc2_w        #14
370: invokevirtual #150
373: ldc           #85
375: invokevirtual #86
378: invokevirtual #89
381: dload         11
383: ldc2_w        #14
386: dcmpl
387: ifne          394
390: iconst_1
391: goto          395
394: iconst_0
395: invokestatic  #91
398: aload         13
400: invokestatic  #20
403: aload         13
405: invokestatic  #21
408: ldc_w         #585
411: invokestatic  #23
414: return
Exception table:
from    to  target type
164   177   180   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test283
Start line: 8851
End line: 8868
Method source code: 
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        java.lang.Number number1 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number1, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer5 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter6 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer5);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray7 = harmonicFitter6.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter6.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter6.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException10 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats4, (java.lang.Object[]) weightedObservedPointArray9);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext11 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalStateException10);
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray7);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #586
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #28
30: dup
31: ldc2_w        #252
34: invokestatic  #129
37: aload_1
38: iconst_1
39: invokespecial #160
42: astore_2
43: getstatic     #254
46: astore_3
47: aconst_null
48: astore        4
50: new           #8
53: dup
54: aload         4
56: invokespecial #9
59: astore        5
61: aload         5
63: invokevirtual #25
66: astore        6
68: aload         5
70: invokevirtual #25
73: astore        7
75: aload         5
77: invokevirtual #25
80: astore        8
82: new           #136
85: dup
86: aload_2
87: aload_3
88: aload         8
90: checkcast     #79
93: invokespecial #137
96: astore        9
98: new           #163
101: dup
102: aload         9
104: invokespecial #164
107: astore        10
109: new           #83
112: dup
113: invokespecial #84
116: ldc           #85
118: invokevirtual #86
121: aload_3
122: invokevirtual #87
125: ldc           #88
127: invokevirtual #86
130: getstatic     #254
133: invokevirtual #87
136: ldc           #85
138: invokevirtual #86
141: invokevirtual #89
144: aload_3
145: getstatic     #254
148: invokevirtual #90
151: invokestatic  #91
154: aload         6
156: invokestatic  #20
159: aload         7
161: invokestatic  #20
164: aload         8
166: invokestatic  #20
169: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test284
Start line: 8871
End line: 8888
Method source code: 
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(35.0d, (double) (byte) -1);
        harmonicFitter1.addObservedPoint(1.0d, (double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(35.0d, (-1.0d));
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 3 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #587
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: ldc2_w        #14
52: ldc2_w        #10
55: invokevirtual #43
58: aload_2
59: dconst_1
60: dconst_1
61: ldc2_w        #32
64: invokevirtual #54
67: aload_2
68: ldc2_w        #14
71: ldc2_w        #10
74: invokevirtual #43
77: aload_2
78: invokevirtual #26
81: astore_3
82: ldc           #176
84: invokestatic  #18
87: goto          91
90: astore_3
91: return
Exception table:
from    to  target type
77    87    90   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test285
Start line: 8891
End line: 8935
Method source code: 
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter2.getObservations();
        harmonicFitter2.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter2.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter2.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer12 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter13 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer12);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray14 = harmonicFitter13.getObservations();
        harmonicFitter13.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray16 = harmonicFitter13.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer17 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter18 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer17);
        harmonicFitter18.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter18.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter18.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray26 = harmonicFitter18.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint30 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double31 = weightedObservedPoint30.getX();
        double double32 = weightedObservedPoint30.getY();
        double double33 = weightedObservedPoint30.getX();
        double double34 = weightedObservedPoint30.getY();
        harmonicFitter18.addObservedPoint(weightedObservedPoint30);
        double double36 = weightedObservedPoint30.getWeight();
        harmonicFitter13.addObservedPoint(weightedObservedPoint30);
        harmonicFitter2.addObservedPoint(weightedObservedPoint30);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray39 = harmonicFitter2.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException40 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray39);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED));
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
        org.junit.Assert.assertNotNull(weightedObservedPointArray14);
        org.junit.Assert.assertNotNull(weightedObservedPointArray16);
        org.junit.Assert.assertNotNull(weightedObservedPointArray26);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 52.0d + "'", double34 == 52.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray39);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #588
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #220
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: invokevirtual #25
44: astore        4
46: aload_3
47: ldc2_w        #32
50: ldc2_w        #10
53: dconst_0
54: invokevirtual #54
57: aload_3
58: ldc2_w        #44
61: ldc2_w        #14
64: invokevirtual #43
67: aload_3
68: invokevirtual #25
71: astore        5
73: aconst_null
74: astore        6
76: new           #8
79: dup
80: aload         6
82: invokespecial #9
85: astore        7
87: aload         7
89: invokevirtual #25
92: astore        8
94: aload         7
96: invokevirtual #59
99: aload         7
101: invokevirtual #25
104: astore        9
106: aconst_null
107: astore        10
109: new           #8
112: dup
113: aload         10
115: invokespecial #9
118: astore        11
120: aload         11
122: dconst_1
123: ldc2_w        #32
126: invokevirtual #43
129: aload         11
131: dconst_0
132: ldc2_w        #34
135: invokevirtual #43
138: aload         11
140: invokevirtual #59
143: aload         11
145: invokevirtual #25
148: astore        12
150: new           #145
153: dup
154: ldc2_w        #14
157: ldc2_w        #12
160: ldc2_w        #12
163: invokespecial #146
166: astore        13
168: aload         13
170: invokevirtual #147
173: dstore        14
175: aload         13
177: invokevirtual #149
180: dstore        16
182: aload         13
184: invokevirtual #147
187: dstore        18
189: aload         13
191: invokevirtual #149
194: dstore        20
196: aload         11
198: aload         13
200: invokevirtual #123
203: aload         13
205: invokevirtual #148
208: dstore        22
210: aload         7
212: aload         13
214: invokevirtual #123
217: aload_3
218: aload         13
220: invokevirtual #123
223: aload_3
224: invokevirtual #25
227: astore        24
229: new           #81
232: dup
233: aload_1
234: aload         24
236: checkcast     #79
239: invokespecial #82
242: astore        25
244: new           #83
247: dup
248: invokespecial #84
251: ldc           #85
253: invokevirtual #86
256: aload_1
257: invokevirtual #87
260: ldc           #88
262: invokevirtual #86
265: getstatic     #220
268: invokevirtual #87
271: ldc           #85
273: invokevirtual #86
276: invokevirtual #89
279: aload_1
280: getstatic     #220
283: invokevirtual #90
286: invokestatic  #91
289: aload         4
291: invokestatic  #20
294: aload         5
296: invokestatic  #20
299: aload         8
301: invokestatic  #20
304: aload         9
306: invokestatic  #20
309: aload         12
311: invokestatic  #20
314: new           #83
317: dup
318: invokespecial #84
321: ldc           #85
323: invokevirtual #86
326: dload         14
328: invokevirtual #150
331: ldc           #88
333: invokevirtual #86
336: ldc2_w        #12
339: invokevirtual #150
342: ldc           #85
344: invokevirtual #86
347: invokevirtual #89
350: dload         14
352: ldc2_w        #12
355: dcmpl
356: ifne          363
359: iconst_1
360: goto          364
363: iconst_0
364: invokestatic  #91
367: new           #83
370: dup
371: invokespecial #84
374: ldc           #85
376: invokevirtual #86
379: dload         16
381: invokevirtual #150
384: ldc           #88
386: invokevirtual #86
389: ldc2_w        #12
392: invokevirtual #150
395: ldc           #85
397: invokevirtual #86
400: invokevirtual #89
403: dload         16
405: ldc2_w        #12
408: dcmpl
409: ifne          416
412: iconst_1
413: goto          417
416: iconst_0
417: invokestatic  #91
420: new           #83
423: dup
424: invokespecial #84
427: ldc           #85
429: invokevirtual #86
432: dload         18
434: invokevirtual #150
437: ldc           #88
439: invokevirtual #86
442: ldc2_w        #12
445: invokevirtual #150
448: ldc           #85
450: invokevirtual #86
453: invokevirtual #89
456: dload         18
458: ldc2_w        #12
461: dcmpl
462: ifne          469
465: iconst_1
466: goto          470
469: iconst_0
470: invokestatic  #91
473: new           #83
476: dup
477: invokespecial #84
480: ldc           #85
482: invokevirtual #86
485: dload         20
487: invokevirtual #150
490: ldc           #88
492: invokevirtual #86
495: ldc2_w        #12
498: invokevirtual #150
501: ldc           #85
503: invokevirtual #86
506: invokevirtual #89
509: dload         20
511: ldc2_w        #12
514: dcmpl
515: ifne          522
518: iconst_1
519: goto          523
522: iconst_0
523: invokestatic  #91
526: new           #83
529: dup
530: invokespecial #84
533: ldc           #85
535: invokevirtual #86
538: dload         22
540: invokevirtual #150
543: ldc           #88
545: invokevirtual #86
548: ldc2_w        #14
551: invokevirtual #150
554: ldc           #85
556: invokevirtual #86
559: invokevirtual #89
562: dload         22
564: ldc2_w        #14
567: dcmpl
568: ifne          575
571: iconst_1
572: goto          576
575: iconst_0
576: invokestatic  #91
579: aload         24
581: invokestatic  #20
584: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test286
Start line: 8938
End line: 9071
Method source code: 
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray4 = new java.lang.Object[] { localizedFormats2, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException5 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, objArray4);
        org.apache.commons.math3.exception.ZeroException zeroException6 = new org.apache.commons.math3.exception.ZeroException(localizable0, objArray4);
        java.lang.Number number7 = zeroException6.getArgument();
        java.lang.Number number8 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException11 = new org.apache.commons.math3.exception.NumberIsTooSmallException(number8, (java.lang.Number) (byte) 0, true);
        boolean boolean12 = numberIsTooSmallException11.getBoundIsAllowed();
        zeroException6.addSuppressed((java.lang.Throwable) numberIsTooSmallException11);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray19 = new java.lang.Object[] { localizedFormats17, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException20 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats16, objArray19);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats24 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats25 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray26 = new java.lang.Object[] { localizedFormats22, localizedFormats23, localizedFormats24, localizedFormats25 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException27 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException20, (org.apache.commons.math3.exception.util.Localizable) localizedFormats21, objArray26);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext28 = mathIllegalArgumentException20.getContext();
        java.lang.Throwable[] throwableArray29 = mathIllegalArgumentException20.getSuppressed();
        org.apache.commons.math3.exception.ZeroException zeroException30 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats15, (java.lang.Object[]) throwableArray29);
        org.apache.commons.math3.exception.ZeroException zeroException31 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats14, (java.lang.Object[]) throwableArray29);
        numberIsTooSmallException11.addSuppressed((java.lang.Throwable) zeroException31);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats33 = org.apache.commons.math3.exception.util.LocalizedFormats.INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats34 = org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_ORDER_ABSCISSA_ARRAY;
        java.lang.String str35 = localizedFormats34.getSourceString();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats36 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats37 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray39 = new java.lang.Object[] { localizedFormats37, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException40 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats36, objArray39);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats41 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats42 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray44 = new java.lang.Object[] { localizedFormats42, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException45 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats41, objArray44);
        mathIllegalArgumentException40.addSuppressed((java.lang.Throwable) mathIllegalArgumentException45);
        java.lang.Throwable[] throwableArray47 = mathIllegalArgumentException40.getSuppressed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext48 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException40);
        java.util.Set<java.lang.String> strSet49 = exceptionContext48.getKeys();
        java.lang.Object obj51 = exceptionContext48.getValue("");
        java.util.Set<java.lang.String> strSet52 = exceptionContext48.getKeys();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats53 = org.apache.commons.math3.exception.util.LocalizedFormats.REAL_FORMAT;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer54 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter55 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer54);
        harmonicFitter55.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter55.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter55.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray63 = harmonicFitter55.getObservations();
        java.lang.Object[] objArray64 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray63);
        exceptionContext48.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats53, (java.lang.Object[]) weightedObservedPointArray63);
        org.apache.commons.math3.exception.ZeroException zeroException66 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats34, (java.lang.Object[]) weightedObservedPointArray63);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException67 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) zeroException31, (org.apache.commons.math3.exception.util.Localizable) localizedFormats33, (java.lang.Object[]) weightedObservedPointArray63);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats68 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats69 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats70 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray72 = new java.lang.Object[] { localizedFormats70, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException73 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats69, objArray72);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats74 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats75 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray77 = new java.lang.Object[] { localizedFormats75, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException78 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats74, objArray77);
        mathIllegalArgumentException73.addSuppressed((java.lang.Throwable) mathIllegalArgumentException78);
        java.lang.Throwable[] throwableArray80 = mathIllegalArgumentException73.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException81 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats68, (java.lang.Object[]) throwableArray80);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext82 = mathIllegalStateException81.getContext();
        zeroException31.addSuppressed((java.lang.Throwable) mathIllegalStateException81);
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals("'" + number7 + "' != '" + 0 + "'", number7, 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE));
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N));
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats24 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats24.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats25 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats25.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertNotNull(exceptionContext28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertTrue("'" + localizedFormats33 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES + "'", localizedFormats33.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES));
        org.junit.Assert.assertTrue("'" + localizedFormats34 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_ORDER_ABSCISSA_ARRAY + "'", localizedFormats34.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_ORDER_ABSCISSA_ARRAY));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}" + "'", str35, "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}");
        org.junit.Assert.assertTrue("'" + localizedFormats36 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats36.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats37 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats37.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats41 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats41.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats42 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats42.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + localizedFormats53 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.REAL_FORMAT + "'", localizedFormats53.equals(org.apache.commons.math3.exception.util.LocalizedFormats.REAL_FORMAT));
        org.junit.Assert.assertNotNull(weightedObservedPointArray63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + localizedFormats68 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION + "'", localizedFormats68.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION));
        org.junit.Assert.assertTrue("'" + localizedFormats69 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats69.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats70 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats70.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats74 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats74.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats75 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats75.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(exceptionContext82);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #589
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: getstatic     #127
30: astore_2
31: getstatic     #128
34: astore_3
35: iconst_2
36: anewarray     #5
39: dup
40: iconst_0
41: aload_3
42: aastore
43: dup
44: iconst_1
45: lconst_1
46: invokestatic  #129
49: aastore
50: astore        4
52: new           #130
55: dup
56: aload_2
57: aload         4
59: invokespecial #131
62: astore        5
64: new           #81
67: dup
68: aload_1
69: aload         4
71: invokespecial #82
74: astore        6
76: aload         6
78: invokevirtual #243
81: astore        7
83: aconst_null
84: astore        8
86: new           #28
89: dup
90: aload         8
92: iconst_0
93: invokestatic  #159
96: iconst_1
97: invokespecial #160
100: astore        9
102: aload         9
104: invokevirtual #162
107: istore        10
109: aload         6
111: aload         9
113: invokevirtual #590
116: getstatic     #591
119: astore        11
121: getstatic     #592
124: astore        12
126: getstatic     #127
129: astore        13
131: getstatic     #128
134: astore        14
136: iconst_2
137: anewarray     #5
140: dup
141: iconst_0
142: aload         14
144: aastore
145: dup
146: iconst_1
147: lconst_1
148: invokestatic  #129
151: aastore
152: astore        15
154: new           #130
157: dup
158: aload         13
160: aload         15
162: invokespecial #131
165: astore        16
167: getstatic     #328
170: astore        17
172: getstatic     #329
175: astore        18
177: getstatic     #330
180: astore        19
182: getstatic     #331
185: astore        20
187: getstatic     #332
190: astore        21
192: iconst_4
193: anewarray     #5
196: dup
197: iconst_0
198: aload         18
200: aastore
201: dup
202: iconst_1
203: aload         19
205: aastore
206: dup
207: iconst_2
208: aload         20
210: aastore
211: dup
212: iconst_3
213: aload         21
215: aastore
216: astore        22
218: new           #136
221: dup
222: aload         16
224: aload         17
226: aload         22
228: invokespecial #137
231: astore        23
233: aload         16
235: invokevirtual #165
238: astore        24
240: aload         16
242: invokevirtual #234
245: astore        25
247: new           #81
250: dup
251: aload         12
253: aload         25
255: checkcast     #79
258: invokespecial #82
261: astore        26
263: new           #81
266: dup
267: aload         11
269: aload         25
271: checkcast     #79
274: invokespecial #82
277: astore        27
279: aload         9
281: aload         27
283: invokevirtual #573
286: getstatic     #593
289: astore        28
291: getstatic     #476
294: astore        29
296: aload         29
298: invokevirtual #301
301: astore        30
303: getstatic     #127
306: astore        31
308: getstatic     #128
311: astore        32
313: iconst_2
314: anewarray     #5
317: dup
318: iconst_0
319: aload         32
321: aastore
322: dup
323: iconst_1
324: lconst_1
325: invokestatic  #129
328: aastore
329: astore        33
331: new           #130
334: dup
335: aload         31
337: aload         33
339: invokespecial #131
342: astore        34
344: getstatic     #127
347: astore        35
349: getstatic     #128
352: astore        36
354: iconst_2
355: anewarray     #5
358: dup
359: iconst_0
360: aload         36
362: aastore
363: dup
364: iconst_1
365: lconst_1
366: invokestatic  #129
369: aastore
370: astore        37
372: new           #130
375: dup
376: aload         35
378: aload         37
380: invokespecial #131
383: astore        38
385: aload         34
387: aload         38
389: invokevirtual #132
392: aload         34
394: invokevirtual #234
397: astore        39
399: new           #163
402: dup
403: aload         34
405: invokespecial #164
408: astore        40
410: aload         40
412: invokevirtual #370
415: astore        41
417: aload         40
419: ldc_w         #384
422: invokevirtual #167
425: astore        42
427: aload         40
429: invokevirtual #370
432: astore        43
434: getstatic     #477
437: astore        44
439: aconst_null
440: astore        45
442: new           #8
445: dup
446: aload         45
448: invokespecial #9
451: astore        46
453: aload         46
455: dconst_1
456: ldc2_w        #32
459: invokevirtual #43
462: aload         46
464: dconst_0
465: ldc2_w        #34
468: invokevirtual #43
471: aload         46
473: invokevirtual #59
476: aload         46
478: invokevirtual #25
481: astore        47
483: aload         47
485: checkcast     #79
488: invokestatic  #80
491: astore        48
493: aload         40
495: aload         44
497: aload         47
499: checkcast     #79
502: invokevirtual #169
505: new           #81
508: dup
509: aload         29
511: aload         47
513: checkcast     #79
516: invokespecial #82
519: astore        49
521: new           #136
524: dup
525: aload         27
527: aload         28
529: aload         47
531: checkcast     #79
534: invokespecial #137
537: astore        50
539: getstatic     #233
542: astore        51
544: getstatic     #127
547: astore        52
549: getstatic     #128
552: astore        53
554: iconst_2
555: anewarray     #5
558: dup
559: iconst_0
560: aload         53
562: aastore
563: dup
564: iconst_1
565: lconst_1
566: invokestatic  #129
569: aastore
570: astore        54
572: new           #130
575: dup
576: aload         52
578: aload         54
580: invokespecial #131
583: astore        55
585: getstatic     #127
588: astore        56
590: getstatic     #128
593: astore        57
595: iconst_2
596: anewarray     #5
599: dup
600: iconst_0
601: aload         57
603: aastore
604: dup
605: iconst_1
606: lconst_1
607: invokestatic  #129
610: aastore
611: astore        58
613: new           #130
616: dup
617: aload         56
619: aload         58
621: invokespecial #131
624: astore        59
626: aload         55
628: aload         59
630: invokevirtual #132
633: aload         55
635: invokevirtual #234
638: astore        60
640: new           #136
643: dup
644: aload         51
646: aload         60
648: checkcast     #79
651: invokespecial #138
654: astore        61
656: aload         61
658: invokevirtual #282
661: astore        62
663: aload         27
665: aload         61
667: invokevirtual #590
670: new           #83
673: dup
674: invokespecial #84
677: ldc           #85
679: invokevirtual #86
682: aload_2
683: invokevirtual #87
686: ldc           #88
688: invokevirtual #86
691: getstatic     #127
694: invokevirtual #87
697: ldc           #85
699: invokevirtual #86
702: invokevirtual #89
705: aload_2
706: getstatic     #127
709: invokevirtual #90
712: invokestatic  #91
715: new           #83
718: dup
719: invokespecial #84
722: ldc           #85
724: invokevirtual #86
727: aload_3
728: invokevirtual #87
731: ldc           #88
733: invokevirtual #86
736: getstatic     #128
739: invokevirtual #87
742: ldc           #85
744: invokevirtual #86
747: invokevirtual #89
750: aload_3
751: getstatic     #128
754: invokevirtual #90
757: invokestatic  #91
760: aload         4
762: invokestatic  #20
765: aload         4
767: invokestatic  #92
770: ldc           #140
772: invokestatic  #23
775: aload         4
777: invokestatic  #93
780: ldc           #140
782: invokestatic  #23
785: new           #83
788: dup
789: invokespecial #84
792: ldc           #85
794: invokevirtual #86
797: aload         7
799: invokevirtual #87
802: ldc           #88
804: invokevirtual #86
807: iconst_0
808: invokevirtual #244
811: ldc           #85
813: invokevirtual #86
816: invokevirtual #89
819: aload         7
821: iconst_0
822: invokestatic  #135
825: invokestatic  #245
828: new           #83
831: dup
832: invokespecial #84
835: ldc           #85
837: invokevirtual #86
840: iload         10
842: invokevirtual #170
845: ldc           #88
847: invokevirtual #86
850: iconst_1
851: invokevirtual #170
854: ldc           #85
856: invokevirtual #86
859: invokevirtual #89
862: iload         10
864: iconst_1
865: if_icmpne     872
868: iconst_1
869: goto          873
872: iconst_0
873: invokestatic  #91
876: new           #83
879: dup
880: invokespecial #84
883: ldc           #85
885: invokevirtual #86
888: aload         11
890: invokevirtual #87
893: ldc           #88
895: invokevirtual #86
898: getstatic     #591
901: invokevirtual #87
904: ldc           #85
906: invokevirtual #86
909: invokevirtual #89
912: aload         11
914: getstatic     #591
917: invokevirtual #90
920: invokestatic  #91
923: new           #83
926: dup
927: invokespecial #84
930: ldc           #85
932: invokevirtual #86
935: aload         12
937: invokevirtual #87
940: ldc           #88
942: invokevirtual #86
945: getstatic     #592
948: invokevirtual #87
951: ldc           #85
953: invokevirtual #86
956: invokevirtual #89
959: aload         12
961: getstatic     #592
964: invokevirtual #90
967: invokestatic  #91
970: new           #83
973: dup
974: invokespecial #84
977: ldc           #85
979: invokevirtual #86
982: aload         13
984: invokevirtual #87
987: ldc           #88
989: invokevirtual #86
992: getstatic     #127
995: invokevirtual #87
998: ldc           #85
1000: invokevirtual #86
1003: invokevirtual #89
1006: aload         13
1008: getstatic     #127
1011: invokevirtual #90
1014: invokestatic  #91
1017: new           #83
1020: dup
1021: invokespecial #84
1024: ldc           #85
1026: invokevirtual #86
1029: aload         14
1031: invokevirtual #87
1034: ldc           #88
1036: invokevirtual #86
1039: getstatic     #128
1042: invokevirtual #87
1045: ldc           #85
1047: invokevirtual #86
1050: invokevirtual #89
1053: aload         14
1055: getstatic     #128
1058: invokevirtual #90
1061: invokestatic  #91
1064: aload         15
1066: invokestatic  #20
1069: aload         15
1071: invokestatic  #92
1074: ldc           #140
1076: invokestatic  #23
1079: aload         15
1081: invokestatic  #93
1084: ldc           #140
1086: invokestatic  #23
1089: new           #83
1092: dup
1093: invokespecial #84
1096: ldc           #85
1098: invokevirtual #86
1101: aload         17
1103: invokevirtual #87
1106: ldc           #88
1108: invokevirtual #86
1111: getstatic     #328
1114: invokevirtual #87
1117: ldc           #85
1119: invokevirtual #86
1122: invokevirtual #89
1125: aload         17
1127: getstatic     #328
1130: invokevirtual #90
1133: invokestatic  #91
1136: new           #83
1139: dup
1140: invokespecial #84
1143: ldc           #85
1145: invokevirtual #86
1148: aload         18
1150: invokevirtual #87
1153: ldc           #88
1155: invokevirtual #86
1158: getstatic     #329
1161: invokevirtual #87
1164: ldc           #85
1166: invokevirtual #86
1169: invokevirtual #89
1172: aload         18
1174: getstatic     #329
1177: invokevirtual #90
1180: invokestatic  #91
1183: new           #83
1186: dup
1187: invokespecial #84
1190: ldc           #85
1192: invokevirtual #86
1195: aload         19
1197: invokevirtual #87
1200: ldc           #88
1202: invokevirtual #86
1205: getstatic     #330
1208: invokevirtual #87
1211: ldc           #85
1213: invokevirtual #86
1216: invokevirtual #89
1219: aload         19
1221: getstatic     #330
1224: invokevirtual #90
1227: invokestatic  #91
1230: new           #83
1233: dup
1234: invokespecial #84
1237: ldc           #85
1239: invokevirtual #86
1242: aload         20
1244: invokevirtual #87
1247: ldc           #88
1249: invokevirtual #86
1252: getstatic     #331
1255: invokevirtual #87
1258: ldc           #85
1260: invokevirtual #86
1263: invokevirtual #89
1266: aload         20
1268: getstatic     #331
1271: invokevirtual #90
1274: invokestatic  #91
1277: new           #83
1280: dup
1281: invokespecial #84
1284: ldc           #85
1286: invokevirtual #86
1289: aload         21
1291: invokevirtual #87
1294: ldc           #88
1296: invokevirtual #86
1299: getstatic     #332
1302: invokevirtual #87
1305: ldc           #85
1307: invokevirtual #86
1310: invokevirtual #89
1313: aload         21
1315: getstatic     #332
1318: invokevirtual #90
1321: invokestatic  #91
1324: aload         22
1326: invokestatic  #20
1329: aload         22
1331: invokestatic  #92
1334: ldc_w         #336
1337: invokestatic  #23
1340: aload         22
1342: invokestatic  #93
1345: ldc_w         #336
1348: invokestatic  #23
1351: aload         24
1353: invokestatic  #20
1356: aload         25
1358: invokestatic  #20
1361: new           #83
1364: dup
1365: invokespecial #84
1368: ldc           #85
1370: invokevirtual #86
1373: aload         28
1375: invokevirtual #87
1378: ldc           #88
1380: invokevirtual #86
1383: getstatic     #593
1386: invokevirtual #87
1389: ldc           #85
1391: invokevirtual #86
1394: invokevirtual #89
1397: aload         28
1399: getstatic     #593
1402: invokevirtual #90
1405: invokestatic  #91
1408: new           #83
1411: dup
1412: invokespecial #84
1415: ldc           #85
1417: invokevirtual #86
1420: aload         29
1422: invokevirtual #87
1425: ldc           #88
1427: invokevirtual #86
1430: getstatic     #476
1433: invokevirtual #87
1436: ldc           #85
1438: invokevirtual #86
1441: invokevirtual #89
1444: aload         29
1446: getstatic     #476
1449: invokevirtual #90
1452: invokestatic  #91
1455: new           #83
1458: dup
1459: invokespecial #84
1462: ldc           #85
1464: invokevirtual #86
1467: aload         30
1469: invokevirtual #86
1472: ldc_w         #478
1475: invokevirtual #86
1478: invokevirtual #89
1481: aload         30
1483: ldc_w         #479
1486: invokestatic  #245
1489: new           #83
1492: dup
1493: invokespecial #84
1496: ldc           #85
1498: invokevirtual #86
1501: aload         31
1503: invokevirtual #87
1506: ldc           #88
1508: invokevirtual #86
1511: getstatic     #127
1514: invokevirtual #87
1517: ldc           #85
1519: invokevirtual #86
1522: invokevirtual #89
1525: aload         31
1527: getstatic     #127
1530: invokevirtual #90
1533: invokestatic  #91
1536: new           #83
1539: dup
1540: invokespecial #84
1543: ldc           #85
1545: invokevirtual #86
1548: aload         32
1550: invokevirtual #87
1553: ldc           #88
1555: invokevirtual #86
1558: getstatic     #128
1561: invokevirtual #87
1564: ldc           #85
1566: invokevirtual #86
1569: invokevirtual #89
1572: aload         32
1574: getstatic     #128
1577: invokevirtual #90
1580: invokestatic  #91
1583: aload         33
1585: invokestatic  #20
1588: aload         33
1590: invokestatic  #92
1593: ldc           #140
1595: invokestatic  #23
1598: aload         33
1600: invokestatic  #93
1603: ldc           #140
1605: invokestatic  #23
1608: new           #83
1611: dup
1612: invokespecial #84
1615: ldc           #85
1617: invokevirtual #86
1620: aload         35
1622: invokevirtual #87
1625: ldc           #88
1627: invokevirtual #86
1630: getstatic     #127
1633: invokevirtual #87
1636: ldc           #85
1638: invokevirtual #86
1641: invokevirtual #89
1644: aload         35
1646: getstatic     #127
1649: invokevirtual #90
1652: invokestatic  #91
1655: new           #83
1658: dup
1659: invokespecial #84
1662: ldc           #85
1664: invokevirtual #86
1667: aload         36
1669: invokevirtual #87
1672: ldc           #88
1674: invokevirtual #86
1677: getstatic     #128
1680: invokevirtual #87
1683: ldc           #85
1685: invokevirtual #86
1688: invokevirtual #89
1691: aload         36
1693: getstatic     #128
1696: invokevirtual #90
1699: invokestatic  #91
1702: aload         37
1704: invokestatic  #20
1707: aload         37
1709: invokestatic  #92
1712: ldc           #140
1714: invokestatic  #23
1717: aload         37
1719: invokestatic  #93
1722: ldc           #140
1724: invokestatic  #23
1727: aload         39
1729: invokestatic  #20
1732: aload         41
1734: invokestatic  #20
1737: aload         42
1739: invokestatic  #171
1742: aload         43
1744: invokestatic  #20
1747: new           #83
1750: dup
1751: invokespecial #84
1754: ldc           #85
1756: invokevirtual #86
1759: aload         44
1761: invokevirtual #87
1764: ldc           #88
1766: invokevirtual #86
1769: getstatic     #477
1772: invokevirtual #87
1775: ldc           #85
1777: invokevirtual #86
1780: invokevirtual #89
1783: aload         44
1785: getstatic     #477
1788: invokevirtual #90
1791: invokestatic  #91
1794: aload         47
1796: invokestatic  #20
1799: aload         48
1801: invokestatic  #20
1804: aload         48
1806: invokestatic  #92
1809: ldc           #74
1811: invokestatic  #23
1814: aload         48
1816: invokestatic  #93
1819: ldc           #74
1821: invokestatic  #23
1824: new           #83
1827: dup
1828: invokespecial #84
1831: ldc           #85
1833: invokevirtual #86
1836: aload         51
1838: invokevirtual #87
1841: ldc           #88
1843: invokevirtual #86
1846: getstatic     #233
1849: invokevirtual #87
1852: ldc           #85
1854: invokevirtual #86
1857: invokevirtual #89
1860: aload         51
1862: getstatic     #233
1865: invokevirtual #90
1868: invokestatic  #91
1871: new           #83
1874: dup
1875: invokespecial #84
1878: ldc           #85
1880: invokevirtual #86
1883: aload         52
1885: invokevirtual #87
1888: ldc           #88
1890: invokevirtual #86
1893: getstatic     #127
1896: invokevirtual #87
1899: ldc           #85
1901: invokevirtual #86
1904: invokevirtual #89
1907: aload         52
1909: getstatic     #127
1912: invokevirtual #90
1915: invokestatic  #91
1918: new           #83
1921: dup
1922: invokespecial #84
1925: ldc           #85
1927: invokevirtual #86
1930: aload         53
1932: invokevirtual #87
1935: ldc           #88
1937: invokevirtual #86
1940: getstatic     #128
1943: invokevirtual #87
1946: ldc           #85
1948: invokevirtual #86
1951: invokevirtual #89
1954: aload         53
1956: getstatic     #128
1959: invokevirtual #90
1962: invokestatic  #91
1965: aload         54
1967: invokestatic  #20
1970: aload         54
1972: invokestatic  #92
1975: ldc           #140
1977: invokestatic  #23
1980: aload         54
1982: invokestatic  #93
1985: ldc           #140
1987: invokestatic  #23
1990: new           #83
1993: dup
1994: invokespecial #84
1997: ldc           #85
1999: invokevirtual #86
2002: aload         56
2004: invokevirtual #87
2007: ldc           #88
2009: invokevirtual #86
2012: getstatic     #127
2015: invokevirtual #87
2018: ldc           #85
2020: invokevirtual #86
2023: invokevirtual #89
2026: aload         56
2028: getstatic     #127
2031: invokevirtual #90
2034: invokestatic  #91
2037: new           #83
2040: dup
2041: invokespecial #84
2044: ldc           #85
2046: invokevirtual #86
2049: aload         57
2051: invokevirtual #87
2054: ldc           #88
2056: invokevirtual #86
2059: getstatic     #128
2062: invokevirtual #87
2065: ldc           #85
2067: invokevirtual #86
2070: invokevirtual #89
2073: aload         57
2075: getstatic     #128
2078: invokevirtual #90
2081: invokestatic  #91
2084: aload         58
2086: invokestatic  #20
2089: aload         58
2091: invokestatic  #92
2094: ldc           #140
2096: invokestatic  #23
2099: aload         58
2101: invokestatic  #93
2104: ldc           #140
2106: invokestatic  #23
2109: aload         60
2111: invokestatic  #20
2114: aload         62
2116: invokestatic  #20
2119: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test287
Start line: 9074
End line: 9098
Method source code: 
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) -1, 52.0d);
        harmonicFitter1.addObservedPoint((double) (byte) 100, (double) (byte) -1);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric22 = null;
        double[] doubleArray29 = new double[] { 1.0f, 10, 1.0f, 100L, '#', ' ' };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray30 = harmonicFitter1.fit((int) (byte) 1, parametric22, doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 10.0, 1.0, 100.0, 35.0, 32.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #594
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: ldc2_w        #10
81: ldc2_w        #12
84: invokevirtual #43
87: aload_2
88: ldc2_w        #34
91: ldc2_w        #10
94: invokevirtual #43
97: aconst_null
98: astore        4
100: bipush        6
102: newarray       double
104: dup
105: iconst_0
106: dconst_1
107: dastore
108: dup
109: iconst_1
110: ldc2_w        #32
113: dastore
114: dup
115: iconst_2
116: dconst_1
117: dastore
118: dup
119: iconst_3
120: ldc2_w        #34
123: dastore
124: dup
125: iconst_4
126: ldc2_w        #14
129: dastore
130: dup
131: iconst_5
132: ldc2_w        #38
135: dastore
136: astore        5
138: aload_2
139: iconst_1
140: aload         4
142: aload         5
144: invokevirtual #40
147: astore        6
149: ldc           #17
151: invokestatic  #18
154: goto          159
157: astore        6
159: aload_3
160: invokestatic  #20
163: aload         5
165: invokestatic  #20
168: aload         5
170: invokestatic  #21
173: ldc_w         #595
176: invokestatic  #23
179: return
Exception table:
from    to  target type
138   154   157   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test288
Start line: 9101
End line: 9134
Method source code: 
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint13 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double14 = weightedObservedPoint13.getX();
        double double15 = weightedObservedPoint13.getY();
        double double16 = weightedObservedPoint13.getX();
        double double17 = weightedObservedPoint13.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint13);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray19 = harmonicFitter1.getObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric21 = null;
        double[] doubleArray23 = new double[] { (-1.0d) };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray24 = harmonicFitter1.fit(100, parametric21, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #596
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: new           #145
64: dup
65: ldc2_w        #14
68: ldc2_w        #12
71: ldc2_w        #12
74: invokespecial #146
77: astore        4
79: aload         4
81: invokevirtual #147
84: dstore        5
86: aload         4
88: invokevirtual #149
91: dstore        7
93: aload         4
95: invokevirtual #147
98: dstore        9
100: aload         4
102: invokevirtual #149
105: dstore        11
107: aload_2
108: aload         4
110: invokevirtual #123
113: aload_2
114: invokevirtual #25
117: astore        13
119: aconst_null
120: astore        14
122: iconst_1
123: newarray       double
125: dup
126: iconst_0
127: ldc2_w        #10
130: dastore
131: astore        15
133: aload_2
134: bipush        100
136: aload         14
138: aload         15
140: invokevirtual #40
143: astore        16
145: ldc           #17
147: invokestatic  #18
150: goto          155
153: astore        16
155: aload_3
156: invokestatic  #20
159: new           #83
162: dup
163: invokespecial #84
166: ldc           #85
168: invokevirtual #86
171: dload         5
173: invokevirtual #150
176: ldc           #88
178: invokevirtual #86
181: ldc2_w        #12
184: invokevirtual #150
187: ldc           #85
189: invokevirtual #86
192: invokevirtual #89
195: dload         5
197: ldc2_w        #12
200: dcmpl
201: ifne          208
204: iconst_1
205: goto          209
208: iconst_0
209: invokestatic  #91
212: new           #83
215: dup
216: invokespecial #84
219: ldc           #85
221: invokevirtual #86
224: dload         7
226: invokevirtual #150
229: ldc           #88
231: invokevirtual #86
234: ldc2_w        #12
237: invokevirtual #150
240: ldc           #85
242: invokevirtual #86
245: invokevirtual #89
248: dload         7
250: ldc2_w        #12
253: dcmpl
254: ifne          261
257: iconst_1
258: goto          262
261: iconst_0
262: invokestatic  #91
265: new           #83
268: dup
269: invokespecial #84
272: ldc           #85
274: invokevirtual #86
277: dload         9
279: invokevirtual #150
282: ldc           #88
284: invokevirtual #86
287: ldc2_w        #12
290: invokevirtual #150
293: ldc           #85
295: invokevirtual #86
298: invokevirtual #89
301: dload         9
303: ldc2_w        #12
306: dcmpl
307: ifne          314
310: iconst_1
311: goto          315
314: iconst_0
315: invokestatic  #91
318: new           #83
321: dup
322: invokespecial #84
325: ldc           #85
327: invokevirtual #86
330: dload         11
332: invokevirtual #150
335: ldc           #88
337: invokevirtual #86
340: ldc2_w        #12
343: invokevirtual #150
346: ldc           #85
348: invokevirtual #86
351: invokevirtual #89
354: dload         11
356: ldc2_w        #12
359: dcmpl
360: ifne          367
363: iconst_1
364: goto          368
367: iconst_0
368: invokestatic  #91
371: aload         13
373: invokestatic  #20
376: aload         15
378: invokestatic  #20
381: aload         15
383: invokestatic  #21
386: ldc           #72
388: invokestatic  #23
391: return
Exception table:
from    to  target type
133   150   153   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test289
Start line: 9137
End line: 9164
Method source code: 
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.INDEX_OUT_OF_RANGE;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        java.lang.Number number3 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException5 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number3, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter8.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException12 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException5, (org.apache.commons.math3.exception.util.Localizable) localizedFormats6, (java.lang.Object[]) weightedObservedPointArray11);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException13 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) weightedObservedPointArray11);
        java.lang.Object[] objArray14 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray11);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException15 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray11);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext16 = mathIllegalArgumentException15.getContext();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INDEX_OUT_OF_RANGE + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(exceptionContext16);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #597
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #598
28: astore_1
29: aconst_null
30: astore_2
31: aconst_null
32: astore_3
33: new           #28
36: dup
37: ldc2_w        #252
40: invokestatic  #129
43: aload_3
44: iconst_1
45: invokespecial #160
48: astore        4
50: getstatic     #254
53: astore        5
55: aconst_null
56: astore        6
58: new           #8
61: dup
62: aload         6
64: invokespecial #9
67: astore        7
69: aload         7
71: invokevirtual #25
74: astore        8
76: aload         7
78: invokevirtual #25
81: astore        9
83: aload         7
85: invokevirtual #25
88: astore        10
90: new           #136
93: dup
94: aload         4
96: aload         5
98: aload         10
100: checkcast     #79
103: invokespecial #137
106: astore        11
108: new           #130
111: dup
112: aload_2
113: aload         10
115: checkcast     #79
118: invokespecial #131
121: astore        12
123: aload         10
125: checkcast     #79
128: invokestatic  #80
131: astore        13
133: new           #130
136: dup
137: aload_1
138: aload         10
140: checkcast     #79
143: invokespecial #131
146: astore        14
148: aload         14
150: invokevirtual #165
153: astore        15
155: new           #83
158: dup
159: invokespecial #84
162: ldc           #85
164: invokevirtual #86
167: aload_1
168: invokevirtual #87
171: ldc           #88
173: invokevirtual #86
176: getstatic     #598
179: invokevirtual #87
182: ldc           #85
184: invokevirtual #86
187: invokevirtual #89
190: aload_1
191: getstatic     #598
194: invokevirtual #90
197: invokestatic  #91
200: new           #83
203: dup
204: invokespecial #84
207: ldc           #85
209: invokevirtual #86
212: aload         5
214: invokevirtual #87
217: ldc           #88
219: invokevirtual #86
222: getstatic     #254
225: invokevirtual #87
228: ldc           #85
230: invokevirtual #86
233: invokevirtual #89
236: aload         5
238: getstatic     #254
241: invokevirtual #90
244: invokestatic  #91
247: aload         8
249: invokestatic  #20
252: aload         9
254: invokestatic  #20
257: aload         10
259: invokestatic  #20
262: aload         13
264: invokestatic  #20
267: aload         13
269: invokestatic  #92
272: ldc           #74
274: invokestatic  #23
277: aload         13
279: invokestatic  #93
282: ldc           #74
284: invokestatic  #23
287: aload         15
289: invokestatic  #20
292: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test290
Start line: 9167
End line: 9183
Method source code: 
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.clearObservations();
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint11 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint(0.0d, (double) 1.0f, 35.0d);
        harmonicFitter2.addObservedPoint(weightedObservedPoint11);
        harmonicFitter2.addObservedPoint(0.0d, (double) (-1L), 0.0d);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray17 = harmonicFitter2.getObservations();
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException18 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray17);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray17);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #599
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #600
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: dconst_1
42: ldc2_w        #32
45: invokevirtual #43
48: aload_3
49: invokevirtual #59
52: aload_3
53: invokevirtual #59
56: new           #145
59: dup
60: dconst_0
61: dconst_1
62: ldc2_w        #14
65: invokespecial #146
68: astore        4
70: aload_3
71: aload         4
73: invokevirtual #123
76: aload_3
77: dconst_0
78: ldc2_w        #10
81: dconst_0
82: invokevirtual #54
85: aload_3
86: invokevirtual #25
89: astore        5
91: new           #130
94: dup
95: aload_1
96: aload         5
98: checkcast     #79
101: invokespecial #131
104: astore        6
106: new           #83
109: dup
110: invokespecial #84
113: ldc           #85
115: invokevirtual #86
118: aload_1
119: invokevirtual #87
122: ldc           #88
124: invokevirtual #86
127: getstatic     #600
130: invokevirtual #87
133: ldc           #85
135: invokevirtual #86
138: invokevirtual #89
141: aload_1
142: getstatic     #600
145: invokevirtual #90
148: invokestatic  #91
151: aload         5
153: invokestatic  #20
156: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test291
Start line: 9186
End line: 9199
Method source code: 
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) 0L);
        harmonicFitter1.clearObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #601
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore        4
62: aload_2
63: ldc2_w        #34
66: dconst_0
67: invokevirtual #43
70: aload_2
71: invokevirtual #59
74: aload_3
75: invokestatic  #20
78: aload         4
80: invokestatic  #20
83: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test292
Start line: 9202
End line: 9225
Method source code: 
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 0, (double) (short) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray13 = harmonicFitter1.getObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric14 = null;
        double[] doubleArray17 = new double[] { 'a', 0.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = harmonicFitter1.fit(parametric14, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray13);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[97.0, 0.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #602
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: dconst_0
62: ldc2_w        #32
65: invokevirtual #43
68: aload_2
69: invokevirtual #25
72: astore_3
73: aconst_null
74: astore        4
76: iconst_2
77: newarray       double
79: dup
80: iconst_0
81: ldc2_w        #44
84: dastore
85: dup
86: iconst_1
87: dconst_0
88: dastore
89: astore        5
91: aload_2
92: aload         4
94: aload         5
96: invokevirtual #30
99: astore        6
101: ldc           #17
103: invokestatic  #18
106: goto          111
109: astore        6
111: aload_3
112: invokestatic  #20
115: aload         5
117: invokestatic  #20
120: aload         5
122: invokestatic  #21
125: ldc_w         #603
128: invokestatic  #23
131: return
Exception table:
from    to  target type
91   106   109   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test293
Start line: 9228
End line: 9239
Method source code: 
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter1.addObservedPoint((double) (short) 10, 0.0d);
        harmonicFitter1.addObservedPoint((double) (byte) 10, (-1.0d), (double) 'a');
        harmonicFitter1.addObservedPoint(52.0d, 52.0d, (double) (byte) 100);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #604
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: ldc2_w        #34
56: ldc2_w        #34
59: ldc2_w        #32
62: invokevirtual #54
65: aload_2
66: ldc2_w        #32
69: dconst_0
70: invokevirtual #43
73: aload_2
74: ldc2_w        #32
77: ldc2_w        #10
80: ldc2_w        #44
83: invokevirtual #54
86: aload_2
87: ldc2_w        #12
90: ldc2_w        #12
93: ldc2_w        #34
96: invokevirtual #54
99: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test294
Start line: 9242
End line: 9264
Method source code: 
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(35.0d, (double) (byte) -1);
        harmonicFitter1.addObservedPoint(1.0d, (double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(35.0d, (-1.0d));
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer16 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter17 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer16);
        harmonicFitter17.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter17.clearObservations();
        harmonicFitter17.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint28 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double29 = weightedObservedPoint28.getX();
        harmonicFitter17.addObservedPoint(weightedObservedPoint28);
        harmonicFitter1.addObservedPoint(weightedObservedPoint28);
        double double32 = weightedObservedPoint28.getWeight();
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #605
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: ldc2_w        #14
52: ldc2_w        #10
55: invokevirtual #43
58: aload_2
59: dconst_1
60: dconst_1
61: ldc2_w        #32
64: invokevirtual #54
67: aload_2
68: ldc2_w        #14
71: ldc2_w        #10
74: invokevirtual #43
77: aconst_null
78: astore_3
79: new           #8
82: dup
83: aload_3
84: invokespecial #9
87: astore        4
89: aload         4
91: dconst_1
92: ldc2_w        #32
95: invokevirtual #43
98: aload         4
100: invokevirtual #59
103: aload         4
105: dconst_0
106: ldc2_w        #10
109: invokevirtual #43
112: new           #145
115: dup
116: ldc2_w        #14
119: ldc2_w        #12
122: ldc2_w        #12
125: invokespecial #146
128: astore        5
130: aload         5
132: invokevirtual #147
135: dstore        6
137: aload         4
139: aload         5
141: invokevirtual #123
144: aload_2
145: aload         5
147: invokevirtual #123
150: aload         5
152: invokevirtual #148
155: dstore        8
157: new           #83
160: dup
161: invokespecial #84
164: ldc           #85
166: invokevirtual #86
169: dload         6
171: invokevirtual #150
174: ldc           #88
176: invokevirtual #86
179: ldc2_w        #12
182: invokevirtual #150
185: ldc           #85
187: invokevirtual #86
190: invokevirtual #89
193: dload         6
195: ldc2_w        #12
198: dcmpl
199: ifne          206
202: iconst_1
203: goto          207
206: iconst_0
207: invokestatic  #91
210: new           #83
213: dup
214: invokespecial #84
217: ldc           #85
219: invokevirtual #86
222: dload         8
224: invokevirtual #150
227: ldc           #88
229: invokevirtual #86
232: ldc2_w        #14
235: invokevirtual #150
238: ldc           #85
240: invokevirtual #86
243: invokevirtual #89
246: dload         8
248: ldc2_w        #14
251: dcmpl
252: ifne          259
255: iconst_1
256: goto          260
259: iconst_0
260: invokestatic  #91
263: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test295
Start line: 9267
End line: 9290
Method source code: 
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 10, (double) 0);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric14 = null;
        double[] doubleArray20 = new double[] { (short) 1, (byte) 1, 52.0d, (byte) -1, 100 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = harmonicFitter1.fit((int) '#', parametric14, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 1.0, 52.0, -1.0, 100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #606
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: invokevirtual #25
61: astore        4
63: aload_2
64: ldc2_w        #32
67: dconst_0
68: invokevirtual #43
71: aconst_null
72: astore        5
74: iconst_5
75: newarray       double
77: dup
78: iconst_0
79: dconst_1
80: dastore
81: dup
82: iconst_1
83: dconst_1
84: dastore
85: dup
86: iconst_2
87: ldc2_w        #12
90: dastore
91: dup
92: iconst_3
93: ldc2_w        #10
96: dastore
97: dup
98: iconst_4
99: ldc2_w        #34
102: dastore
103: astore        6
105: aload_2
106: bipush        35
108: aload         5
110: aload         6
112: invokevirtual #40
115: astore        7
117: ldc           #17
119: invokestatic  #18
122: goto          127
125: astore        7
127: aload_3
128: invokestatic  #20
131: aload         4
133: invokestatic  #20
136: aload         6
138: invokestatic  #20
141: aload         6
143: invokestatic  #21
146: ldc_w         #607
149: invokestatic  #23
152: return
Exception table:
from    to  target type
105   122   125   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test296
Start line: 9293
End line: 9312
Method source code: 
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) 100L, 10.0d);
        harmonicFitter1.addObservedPoint(52.0d, (double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 2 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #608
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: ldc2_w        #34
49: ldc2_w        #10
52: ldc2_w        #10
55: invokevirtual #54
58: aload_2
59: invokevirtual #59
62: aload_2
63: ldc2_w        #34
66: ldc2_w        #32
69: invokevirtual #43
72: aload_2
73: ldc2_w        #12
76: ldc2_w        #10
79: invokevirtual #43
82: aload_2
83: invokevirtual #26
86: astore        4
88: ldc           #186
90: invokestatic  #18
93: goto          98
96: astore        4
98: aload_3
99: invokestatic  #20
102: return
Exception table:
from    to  target type
82    93    96   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test297
Start line: 9315
End line: 9330
Method source code: 
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) 0, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint((double) 10, 35.0d);
        harmonicFitter1.addObservedPoint(0.0d, (double) 10L);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(0.0d, 0.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #609
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: ldc2_w        #34
49: ldc2_w        #10
52: ldc2_w        #10
55: invokevirtual #54
58: aload_2
59: invokevirtual #59
62: aload_2
63: dconst_0
64: dconst_0
65: ldc2_w        #34
68: invokevirtual #54
71: aload_2
72: ldc2_w        #32
75: ldc2_w        #14
78: invokevirtual #43
81: aload_2
82: dconst_0
83: ldc2_w        #32
86: invokevirtual #43
89: aload_2
90: invokevirtual #59
93: aload_2
94: dconst_0
95: dconst_0
96: invokevirtual #43
99: aload_3
100: invokestatic  #20
103: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test298
Start line: 9333
End line: 9351
Method source code: 
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) 0.0f, (double) (short) -1);
        double[] doubleArray12 = new double[] { (-1L), 0, (-1L) };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = harmonicFitter1.fit(doubleArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 0.0, -1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #610
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: dconst_0
50: ldc2_w        #10
53: invokevirtual #43
56: iconst_3
57: newarray       double
59: dup
60: iconst_0
61: ldc2_w        #10
64: dastore
65: dup
66: iconst_1
67: dconst_0
68: dastore
69: dup
70: iconst_2
71: ldc2_w        #10
74: dastore
75: astore_3
76: aload_2
77: aload_3
78: invokevirtual #16
81: astore        4
83: ldc           #17
85: invokestatic  #18
88: goto          93
91: astore        4
93: aload_3
94: invokestatic  #20
97: aload_3
98: invokestatic  #21
101: ldc_w         #611
104: invokestatic  #23
107: return
Exception table:
from    to  target type
76    88    91   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test299
Start line: 9354
End line: 9376
Method source code: 
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter2.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException4 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray3);
        java.lang.Number number5 = zeroException4.getArgument();
        java.lang.Number number6 = zeroException4.getArgument();
        java.lang.Number number7 = zeroException4.getArgument();
        java.lang.Throwable[] throwableArray8 = zeroException4.getSuppressed();
        java.lang.Object[] objArray9 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) throwableArray8);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
        org.junit.Assert.assertEquals("'" + number5 + "' != '" + 0 + "'", number5, 0);
        org.junit.Assert.assertEquals("'" + number6 + "' != '" + 0 + "'", number6, 0);
        org.junit.Assert.assertEquals("'" + number7 + "' != '" + 0 + "'", number7, 0);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #612
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #156
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: invokevirtual #25
44: astore        4
46: new           #81
49: dup
50: aload_1
51: aload         4
53: checkcast     #79
56: invokespecial #82
59: astore        5
61: aload         5
63: invokevirtual #243
66: astore        6
68: aload         5
70: invokevirtual #243
73: astore        7
75: aload         5
77: invokevirtual #243
80: astore        8
82: aload         5
84: invokevirtual #405
87: astore        9
89: aload         9
91: checkcast     #79
94: invokestatic  #80
97: astore        10
99: new           #83
102: dup
103: invokespecial #84
106: ldc           #85
108: invokevirtual #86
111: aload_1
112: invokevirtual #87
115: ldc           #88
117: invokevirtual #86
120: getstatic     #156
123: invokevirtual #87
126: ldc           #85
128: invokevirtual #86
131: invokevirtual #89
134: aload_1
135: getstatic     #156
138: invokevirtual #90
141: invokestatic  #91
144: aload         4
146: invokestatic  #20
149: new           #83
152: dup
153: invokespecial #84
156: ldc           #85
158: invokevirtual #86
161: aload         6
163: invokevirtual #87
166: ldc           #88
168: invokevirtual #86
171: iconst_0
172: invokevirtual #244
175: ldc           #85
177: invokevirtual #86
180: invokevirtual #89
183: aload         6
185: iconst_0
186: invokestatic  #135
189: invokestatic  #245
192: new           #83
195: dup
196: invokespecial #84
199: ldc           #85
201: invokevirtual #86
204: aload         7
206: invokevirtual #87
209: ldc           #88
211: invokevirtual #86
214: iconst_0
215: invokevirtual #244
218: ldc           #85
220: invokevirtual #86
223: invokevirtual #89
226: aload         7
228: iconst_0
229: invokestatic  #135
232: invokestatic  #245
235: new           #83
238: dup
239: invokespecial #84
242: ldc           #85
244: invokevirtual #86
247: aload         8
249: invokevirtual #87
252: ldc           #88
254: invokevirtual #86
257: iconst_0
258: invokevirtual #244
261: ldc           #85
263: invokevirtual #86
266: invokevirtual #89
269: aload         8
271: iconst_0
272: invokestatic  #135
275: invokestatic  #245
278: aload         9
280: invokestatic  #20
283: aload         10
285: invokestatic  #20
288: aload         10
290: invokestatic  #92
293: ldc           #74
295: invokestatic  #23
298: aload         10
300: invokestatic  #93
303: ldc           #74
305: invokestatic  #23
308: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test300
Start line: 9379
End line: 9390
Method source code: 
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 0, (double) (short) 10);
        harmonicFitter1.addObservedPoint((double) 100.0f, (double) 100, (double) (short) 100);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #613
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: dconst_0
62: ldc2_w        #32
65: invokevirtual #43
68: aload_2
69: ldc2_w        #34
72: ldc2_w        #34
75: ldc2_w        #34
78: invokevirtual #54
81: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test301
Start line: 9393
End line: 9434
Method source code: 
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (-1), 10.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer13 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter14 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer13);
        harmonicFitter14.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter14.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray21 = harmonicFitter14.getObservations();
        harmonicFitter14.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint29 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double30 = weightedObservedPoint29.getWeight();
        double double31 = weightedObservedPoint29.getX();
        double double32 = weightedObservedPoint29.getX();
        double double33 = weightedObservedPoint29.getWeight();
        harmonicFitter14.addObservedPoint(weightedObservedPoint29);
        double double35 = weightedObservedPoint29.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint29);
        double[] doubleArray41 = new double[] { '#', ' ', 100.0d, 52.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray42 = harmonicFitter1.fit(doubleArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray21);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[35.0, 32.0, 100.0, 52.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #614
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: aload_2
62: ldc2_w        #10
65: ldc2_w        #32
68: invokevirtual #43
71: aconst_null
72: astore        4
74: new           #8
77: dup
78: aload         4
80: invokespecial #9
83: astore        5
85: aload         5
87: dconst_1
88: ldc2_w        #32
91: invokevirtual #43
94: aload         5
96: dconst_0
97: ldc2_w        #34
100: invokevirtual #43
103: aload         5
105: invokevirtual #25
108: astore        6
110: aload         5
112: dconst_0
113: dconst_1
114: ldc2_w        #34
117: invokevirtual #54
120: new           #145
123: dup
124: ldc2_w        #14
127: ldc2_w        #12
130: ldc2_w        #12
133: invokespecial #146
136: astore        7
138: aload         7
140: invokevirtual #148
143: dstore        8
145: aload         7
147: invokevirtual #147
150: dstore        10
152: aload         7
154: invokevirtual #147
157: dstore        12
159: aload         7
161: invokevirtual #148
164: dstore        14
166: aload         5
168: aload         7
170: invokevirtual #123
173: aload         7
175: invokevirtual #149
178: dstore        16
180: aload_2
181: aload         7
183: invokevirtual #123
186: iconst_4
187: newarray       double
189: dup
190: iconst_0
191: ldc2_w        #14
194: dastore
195: dup
196: iconst_1
197: ldc2_w        #38
200: dastore
201: dup
202: iconst_2
203: ldc2_w        #34
206: dastore
207: dup
208: iconst_3
209: ldc2_w        #12
212: dastore
213: astore        18
215: aload_2
216: aload         18
218: invokevirtual #16
221: astore        19
223: ldc           #17
225: invokestatic  #18
228: goto          233
231: astore        19
233: aload_3
234: invokestatic  #20
237: aload         6
239: invokestatic  #20
242: new           #83
245: dup
246: invokespecial #84
249: ldc           #85
251: invokevirtual #86
254: dload         8
256: invokevirtual #150
259: ldc           #88
261: invokevirtual #86
264: ldc2_w        #14
267: invokevirtual #150
270: ldc           #85
272: invokevirtual #86
275: invokevirtual #89
278: dload         8
280: ldc2_w        #14
283: dcmpl
284: ifne          291
287: iconst_1
288: goto          292
291: iconst_0
292: invokestatic  #91
295: new           #83
298: dup
299: invokespecial #84
302: ldc           #85
304: invokevirtual #86
307: dload         10
309: invokevirtual #150
312: ldc           #88
314: invokevirtual #86
317: ldc2_w        #12
320: invokevirtual #150
323: ldc           #85
325: invokevirtual #86
328: invokevirtual #89
331: dload         10
333: ldc2_w        #12
336: dcmpl
337: ifne          344
340: iconst_1
341: goto          345
344: iconst_0
345: invokestatic  #91
348: new           #83
351: dup
352: invokespecial #84
355: ldc           #85
357: invokevirtual #86
360: dload         12
362: invokevirtual #150
365: ldc           #88
367: invokevirtual #86
370: ldc2_w        #12
373: invokevirtual #150
376: ldc           #85
378: invokevirtual #86
381: invokevirtual #89
384: dload         12
386: ldc2_w        #12
389: dcmpl
390: ifne          397
393: iconst_1
394: goto          398
397: iconst_0
398: invokestatic  #91
401: new           #83
404: dup
405: invokespecial #84
408: ldc           #85
410: invokevirtual #86
413: dload         14
415: invokevirtual #150
418: ldc           #88
420: invokevirtual #86
423: ldc2_w        #14
426: invokevirtual #150
429: ldc           #85
431: invokevirtual #86
434: invokevirtual #89
437: dload         14
439: ldc2_w        #14
442: dcmpl
443: ifne          450
446: iconst_1
447: goto          451
450: iconst_0
451: invokestatic  #91
454: new           #83
457: dup
458: invokespecial #84
461: ldc           #85
463: invokevirtual #86
466: dload         16
468: invokevirtual #150
471: ldc           #88
473: invokevirtual #86
476: ldc2_w        #12
479: invokevirtual #150
482: ldc           #85
484: invokevirtual #86
487: invokevirtual #89
490: dload         16
492: ldc2_w        #12
495: dcmpl
496: ifne          503
499: iconst_1
500: goto          504
503: iconst_0
504: invokestatic  #91
507: aload         18
509: invokestatic  #20
512: aload         18
514: invokestatic  #21
517: ldc_w         #615
520: invokestatic  #23
523: return
Exception table:
from    to  target type
215   228   231   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test302
Start line: 9437
End line: 9451
Method source code: 
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(52.0d, 52.0d, 35.0d);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) 100, (double) 100L);
        harmonicFitter1.addObservedPoint(1.0d, (double) 100);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #616
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: ldc2_w        #12
64: ldc2_w        #12
67: ldc2_w        #14
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: invokevirtual #59
81: aload_2
82: ldc2_w        #34
85: ldc2_w        #34
88: invokevirtual #43
91: aload_2
92: dconst_1
93: ldc2_w        #34
96: invokevirtual #43
99: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test303
Start line: 9454
End line: 9468
Method source code: 
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((-1.0d), (double) 10, (double) 10);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint18 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) 10.0f, 10.0d, (double) '#');
        harmonicFitter1.addObservedPoint(weightedObservedPoint18);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #617
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: aload_2
62: ldc2_w        #10
65: ldc2_w        #32
68: ldc2_w        #32
71: invokevirtual #54
74: aload_2
75: invokevirtual #59
78: new           #145
81: dup
82: ldc2_w        #32
85: ldc2_w        #32
88: ldc2_w        #14
91: invokespecial #146
94: astore        4
96: aload_2
97: aload         4
99: invokevirtual #123
102: aload_3
103: invokestatic  #20
106: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test304
Start line: 9471
End line: 9477
Method source code: 
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 'a', (double) 1L);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #618
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: ldc2_w        #44
40: dconst_1
41: invokevirtual #43
44: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test305
Start line: 9480
End line: 9502
Method source code: 
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(10.0d, 100.0d, 100.0d);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray20 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser21 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray20);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray20);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #619
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: invokevirtual #59
81: aload_2
82: ldc2_w        #32
85: ldc2_w        #34
88: ldc2_w        #34
91: invokevirtual #54
94: aload_2
95: invokevirtual #25
98: astore        4
100: new           #69
103: dup
104: aload         4
106: invokespecial #70
109: astore        5
111: ldc           #64
113: invokestatic  #18
116: goto          121
119: astore        5
121: aload_3
122: invokestatic  #20
125: aload         4
127: invokestatic  #20
130: return
Exception table:
from    to  target type
100   116   119   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test306
Start line: 9505
End line: 9553
Method source code: 
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_REGRESSORS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats3 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray6 = new java.lang.Object[] { localizedFormats4, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException7 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats3, objArray6);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats10 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats11 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray13 = new java.lang.Object[] { localizedFormats9, localizedFormats10, localizedFormats11, localizedFormats12 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException14 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException7, (org.apache.commons.math3.exception.util.Localizable) localizedFormats8, objArray13);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext15 = mathIllegalArgumentException7.getContext();
        java.lang.Throwable[] throwableArray16 = mathIllegalArgumentException7.getSuppressed();
        org.apache.commons.math3.exception.ZeroException zeroException17 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats2, (java.lang.Object[]) throwableArray16);
        org.apache.commons.math3.exception.ZeroException zeroException18 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) throwableArray16);
        org.apache.commons.math3.exception.ZeroException zeroException19 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) throwableArray16);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer20 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter21 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer20);
        harmonicFitter21.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter21.clearObservations();
        harmonicFitter21.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray29 = harmonicFitter21.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException30 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray29);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_REGRESSORS + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_REGRESSORS));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N));
        org.junit.Assert.assertTrue("'" + localizedFormats3 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats3.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats10 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats10.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats11 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats11.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertNotNull(exceptionContext15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(weightedObservedPointArray29);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #620
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #484
28: astore_1
29: getstatic     #591
32: astore_2
33: getstatic     #592
36: astore_3
37: getstatic     #127
40: astore        4
42: getstatic     #128
45: astore        5
47: iconst_2
48: anewarray     #5
51: dup
52: iconst_0
53: aload         5
55: aastore
56: dup
57: iconst_1
58: lconst_1
59: invokestatic  #129
62: aastore
63: astore        6
65: new           #130
68: dup
69: aload         4
71: aload         6
73: invokespecial #131
76: astore        7
78: getstatic     #328
81: astore        8
83: getstatic     #329
86: astore        9
88: getstatic     #330
91: astore        10
93: getstatic     #331
96: astore        11
98: getstatic     #332
101: astore        12
103: iconst_4
104: anewarray     #5
107: dup
108: iconst_0
109: aload         9
111: aastore
112: dup
113: iconst_1
114: aload         10
116: aastore
117: dup
118: iconst_2
119: aload         11
121: aastore
122: dup
123: iconst_3
124: aload         12
126: aastore
127: astore        13
129: new           #136
132: dup
133: aload         7
135: aload         8
137: aload         13
139: invokespecial #137
142: astore        14
144: aload         7
146: invokevirtual #165
149: astore        15
151: aload         7
153: invokevirtual #234
156: astore        16
158: new           #81
161: dup
162: aload_3
163: aload         16
165: checkcast     #79
168: invokespecial #82
171: astore        17
173: new           #81
176: dup
177: aload_2
178: aload         16
180: checkcast     #79
183: invokespecial #82
186: astore        18
188: new           #81
191: dup
192: aload_1
193: aload         16
195: checkcast     #79
198: invokespecial #82
201: astore        19
203: aconst_null
204: astore        20
206: new           #8
209: dup
210: aload         20
212: invokespecial #9
215: astore        21
217: aload         21
219: dconst_1
220: ldc2_w        #32
223: invokevirtual #43
226: aload         21
228: invokevirtual #59
231: aload         21
233: dconst_0
234: ldc2_w        #10
237: invokevirtual #43
240: aload         21
242: invokevirtual #25
245: astore        22
247: new           #81
250: dup
251: aload_1
252: aload         22
254: checkcast     #79
257: invokespecial #82
260: astore        23
262: new           #83
265: dup
266: invokespecial #84
269: ldc           #85
271: invokevirtual #86
274: aload_1
275: invokevirtual #87
278: ldc           #88
280: invokevirtual #86
283: getstatic     #484
286: invokevirtual #87
289: ldc           #85
291: invokevirtual #86
294: invokevirtual #89
297: aload_1
298: getstatic     #484
301: invokevirtual #90
304: invokestatic  #91
307: new           #83
310: dup
311: invokespecial #84
314: ldc           #85
316: invokevirtual #86
319: aload_2
320: invokevirtual #87
323: ldc           #88
325: invokevirtual #86
328: getstatic     #591
331: invokevirtual #87
334: ldc           #85
336: invokevirtual #86
339: invokevirtual #89
342: aload_2
343: getstatic     #591
346: invokevirtual #90
349: invokestatic  #91
352: new           #83
355: dup
356: invokespecial #84
359: ldc           #85
361: invokevirtual #86
364: aload_3
365: invokevirtual #87
368: ldc           #88
370: invokevirtual #86
373: getstatic     #592
376: invokevirtual #87
379: ldc           #85
381: invokevirtual #86
384: invokevirtual #89
387: aload_3
388: getstatic     #592
391: invokevirtual #90
394: invokestatic  #91
397: new           #83
400: dup
401: invokespecial #84
404: ldc           #85
406: invokevirtual #86
409: aload         4
411: invokevirtual #87
414: ldc           #88
416: invokevirtual #86
419: getstatic     #127
422: invokevirtual #87
425: ldc           #85
427: invokevirtual #86
430: invokevirtual #89
433: aload         4
435: getstatic     #127
438: invokevirtual #90
441: invokestatic  #91
444: new           #83
447: dup
448: invokespecial #84
451: ldc           #85
453: invokevirtual #86
456: aload         5
458: invokevirtual #87
461: ldc           #88
463: invokevirtual #86
466: getstatic     #128
469: invokevirtual #87
472: ldc           #85
474: invokevirtual #86
477: invokevirtual #89
480: aload         5
482: getstatic     #128
485: invokevirtual #90
488: invokestatic  #91
491: aload         6
493: invokestatic  #20
496: aload         6
498: invokestatic  #92
501: ldc           #140
503: invokestatic  #23
506: aload         6
508: invokestatic  #93
511: ldc           #140
513: invokestatic  #23
516: new           #83
519: dup
520: invokespecial #84
523: ldc           #85
525: invokevirtual #86
528: aload         8
530: invokevirtual #87
533: ldc           #88
535: invokevirtual #86
538: getstatic     #328
541: invokevirtual #87
544: ldc           #85
546: invokevirtual #86
549: invokevirtual #89
552: aload         8
554: getstatic     #328
557: invokevirtual #90
560: invokestatic  #91
563: new           #83
566: dup
567: invokespecial #84
570: ldc           #85
572: invokevirtual #86
575: aload         9
577: invokevirtual #87
580: ldc           #88
582: invokevirtual #86
585: getstatic     #329
588: invokevirtual #87
591: ldc           #85
593: invokevirtual #86
596: invokevirtual #89
599: aload         9
601: getstatic     #329
604: invokevirtual #90
607: invokestatic  #91
610: new           #83
613: dup
614: invokespecial #84
617: ldc           #85
619: invokevirtual #86
622: aload         10
624: invokevirtual #87
627: ldc           #88
629: invokevirtual #86
632: getstatic     #330
635: invokevirtual #87
638: ldc           #85
640: invokevirtual #86
643: invokevirtual #89
646: aload         10
648: getstatic     #330
651: invokevirtual #90
654: invokestatic  #91
657: new           #83
660: dup
661: invokespecial #84
664: ldc           #85
666: invokevirtual #86
669: aload         11
671: invokevirtual #87
674: ldc           #88
676: invokevirtual #86
679: getstatic     #331
682: invokevirtual #87
685: ldc           #85
687: invokevirtual #86
690: invokevirtual #89
693: aload         11
695: getstatic     #331
698: invokevirtual #90
701: invokestatic  #91
704: new           #83
707: dup
708: invokespecial #84
711: ldc           #85
713: invokevirtual #86
716: aload         12
718: invokevirtual #87
721: ldc           #88
723: invokevirtual #86
726: getstatic     #332
729: invokevirtual #87
732: ldc           #85
734: invokevirtual #86
737: invokevirtual #89
740: aload         12
742: getstatic     #332
745: invokevirtual #90
748: invokestatic  #91
751: aload         13
753: invokestatic  #20
756: aload         13
758: invokestatic  #92
761: ldc_w         #336
764: invokestatic  #23
767: aload         13
769: invokestatic  #93
772: ldc_w         #336
775: invokestatic  #23
778: aload         15
780: invokestatic  #20
783: aload         16
785: invokestatic  #20
788: aload         22
790: invokestatic  #20
793: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test307
Start line: 9556
End line: 9570
Method source code: 
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 1, (double) 10L);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #621
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore        4
62: aload_2
63: invokevirtual #25
66: astore        5
68: aload_2
69: dconst_1
70: ldc2_w        #32
73: invokevirtual #43
76: aload_3
77: invokestatic  #20
80: aload         4
82: invokestatic  #20
85: aload         5
87: invokestatic  #20
90: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test308
Start line: 9573
End line: 9597
Method source code: 
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        java.lang.Throwable throwable0 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POWER_OF_TWO;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer2 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter3 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer2);
        harmonicFitter3.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter3.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter3.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter3.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray12 = harmonicFitter3.getObservations();
        harmonicFitter3.addObservedPoint((double) (byte) 1, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray16 = harmonicFitter3.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException17 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable0, (org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) weightedObservedPointArray16);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext18 = mathIllegalStateException17.getContext();
        java.lang.Throwable[] throwableArray19 = mathIllegalStateException17.getSuppressed();
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POWER_OF_TWO + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POWER_OF_TWO));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
        org.junit.Assert.assertNotNull(weightedObservedPointArray12);
        org.junit.Assert.assertNotNull(weightedObservedPointArray16);
        org.junit.Assert.assertNotNull(exceptionContext18);
        org.junit.Assert.assertNotNull(throwableArray19);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #622
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: getstatic     #623
30: astore_2
31: aconst_null
32: astore_3
33: new           #8
36: dup
37: aload_3
38: invokespecial #9
41: astore        4
43: aload         4
45: dconst_1
46: ldc2_w        #32
49: invokevirtual #43
52: aload         4
54: dconst_0
55: ldc2_w        #34
58: invokevirtual #43
61: aload         4
63: invokevirtual #25
66: astore        5
68: aload         4
70: invokevirtual #25
73: astore        6
75: aload         4
77: invokevirtual #25
80: astore        7
82: aload         4
84: dconst_1
85: ldc2_w        #10
88: invokevirtual #43
91: aload         4
93: invokevirtual #25
96: astore        8
98: new           #136
101: dup
102: aload_1
103: aload_2
104: aload         8
106: checkcast     #79
109: invokespecial #137
112: astore        9
114: aload         9
116: invokevirtual #282
119: astore        10
121: aload         9
123: invokevirtual #556
126: astore        11
128: new           #83
131: dup
132: invokespecial #84
135: ldc           #85
137: invokevirtual #86
140: aload_2
141: invokevirtual #87
144: ldc           #88
146: invokevirtual #86
149: getstatic     #623
152: invokevirtual #87
155: ldc           #85
157: invokevirtual #86
160: invokevirtual #89
163: aload_2
164: getstatic     #623
167: invokevirtual #90
170: invokestatic  #91
173: aload         5
175: invokestatic  #20
178: aload         6
180: invokestatic  #20
183: aload         7
185: invokestatic  #20
188: aload         8
190: invokestatic  #20
193: aload         10
195: invokestatic  #20
198: aload         11
200: invokestatic  #20
203: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test309
Start line: 9600
End line: 9661
Method source code: 
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (-1), 10.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer13 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter14 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer13);
        harmonicFitter14.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter14.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray21 = harmonicFitter14.getObservations();
        harmonicFitter14.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint29 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double30 = weightedObservedPoint29.getWeight();
        double double31 = weightedObservedPoint29.getX();
        double double32 = weightedObservedPoint29.getX();
        double double33 = weightedObservedPoint29.getWeight();
        harmonicFitter14.addObservedPoint(weightedObservedPoint29);
        double double35 = weightedObservedPoint29.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint29);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer37 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter38 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer37);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray39 = harmonicFitter38.getObservations();
        harmonicFitter38.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray41 = harmonicFitter38.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint45 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double46 = weightedObservedPoint45.getX();
        double double47 = weightedObservedPoint45.getWeight();
        double double48 = weightedObservedPoint45.getWeight();
        double double49 = weightedObservedPoint45.getY();
        harmonicFitter38.addObservedPoint(weightedObservedPoint45);
        harmonicFitter38.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray52 = harmonicFitter38.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer53 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter54 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer53);
        harmonicFitter54.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter54.clearObservations();
        harmonicFitter54.clearObservations();
        harmonicFitter54.addObservedPoint((double) (short) 0, (double) (byte) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint66 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint(0.0d, (double) 1.0f, 35.0d);
        harmonicFitter54.addObservedPoint(weightedObservedPoint66);
        harmonicFitter38.addObservedPoint(weightedObservedPoint66);
        harmonicFitter1.addObservedPoint(weightedObservedPoint66);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray21);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray39);
        org.junit.Assert.assertNotNull(weightedObservedPointArray41);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 52.0d + "'", double46 == 52.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 35.0d + "'", double47 == 35.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 52.0d + "'", double49 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray52);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #624
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: aload_2
62: ldc2_w        #10
65: ldc2_w        #32
68: invokevirtual #43
71: aconst_null
72: astore        4
74: new           #8
77: dup
78: aload         4
80: invokespecial #9
83: astore        5
85: aload         5
87: dconst_1
88: ldc2_w        #32
91: invokevirtual #43
94: aload         5
96: dconst_0
97: ldc2_w        #34
100: invokevirtual #43
103: aload         5
105: invokevirtual #25
108: astore        6
110: aload         5
112: dconst_0
113: dconst_1
114: ldc2_w        #34
117: invokevirtual #54
120: new           #145
123: dup
124: ldc2_w        #14
127: ldc2_w        #12
130: ldc2_w        #12
133: invokespecial #146
136: astore        7
138: aload         7
140: invokevirtual #148
143: dstore        8
145: aload         7
147: invokevirtual #147
150: dstore        10
152: aload         7
154: invokevirtual #147
157: dstore        12
159: aload         7
161: invokevirtual #148
164: dstore        14
166: aload         5
168: aload         7
170: invokevirtual #123
173: aload         7
175: invokevirtual #149
178: dstore        16
180: aload_2
181: aload         7
183: invokevirtual #123
186: aconst_null
187: astore        18
189: new           #8
192: dup
193: aload         18
195: invokespecial #9
198: astore        19
200: aload         19
202: invokevirtual #25
205: astore        20
207: aload         19
209: invokevirtual #59
212: aload         19
214: invokevirtual #25
217: astore        21
219: new           #145
222: dup
223: ldc2_w        #14
226: ldc2_w        #12
229: ldc2_w        #12
232: invokespecial #146
235: astore        22
237: aload         22
239: invokevirtual #147
242: dstore        23
244: aload         22
246: invokevirtual #148
249: dstore        25
251: aload         22
253: invokevirtual #148
256: dstore        27
258: aload         22
260: invokevirtual #149
263: dstore        29
265: aload         19
267: aload         22
269: invokevirtual #123
272: aload         19
274: invokevirtual #59
277: aload         19
279: invokevirtual #25
282: astore        31
284: aconst_null
285: astore        32
287: new           #8
290: dup
291: aload         32
293: invokespecial #9
296: astore        33
298: aload         33
300: dconst_1
301: ldc2_w        #32
304: invokevirtual #43
307: aload         33
309: invokevirtual #59
312: aload         33
314: invokevirtual #59
317: aload         33
319: dconst_0
320: ldc2_w        #32
323: invokevirtual #43
326: new           #145
329: dup
330: dconst_0
331: dconst_1
332: ldc2_w        #14
335: invokespecial #146
338: astore        34
340: aload         33
342: aload         34
344: invokevirtual #123
347: aload         19
349: aload         34
351: invokevirtual #123
354: aload_2
355: aload         34
357: invokevirtual #123
360: aload_3
361: invokestatic  #20
364: aload         6
366: invokestatic  #20
369: new           #83
372: dup
373: invokespecial #84
376: ldc           #85
378: invokevirtual #86
381: dload         8
383: invokevirtual #150
386: ldc           #88
388: invokevirtual #86
391: ldc2_w        #14
394: invokevirtual #150
397: ldc           #85
399: invokevirtual #86
402: invokevirtual #89
405: dload         8
407: ldc2_w        #14
410: dcmpl
411: ifne          418
414: iconst_1
415: goto          419
418: iconst_0
419: invokestatic  #91
422: new           #83
425: dup
426: invokespecial #84
429: ldc           #85
431: invokevirtual #86
434: dload         10
436: invokevirtual #150
439: ldc           #88
441: invokevirtual #86
444: ldc2_w        #12
447: invokevirtual #150
450: ldc           #85
452: invokevirtual #86
455: invokevirtual #89
458: dload         10
460: ldc2_w        #12
463: dcmpl
464: ifne          471
467: iconst_1
468: goto          472
471: iconst_0
472: invokestatic  #91
475: new           #83
478: dup
479: invokespecial #84
482: ldc           #85
484: invokevirtual #86
487: dload         12
489: invokevirtual #150
492: ldc           #88
494: invokevirtual #86
497: ldc2_w        #12
500: invokevirtual #150
503: ldc           #85
505: invokevirtual #86
508: invokevirtual #89
511: dload         12
513: ldc2_w        #12
516: dcmpl
517: ifne          524
520: iconst_1
521: goto          525
524: iconst_0
525: invokestatic  #91
528: new           #83
531: dup
532: invokespecial #84
535: ldc           #85
537: invokevirtual #86
540: dload         14
542: invokevirtual #150
545: ldc           #88
547: invokevirtual #86
550: ldc2_w        #14
553: invokevirtual #150
556: ldc           #85
558: invokevirtual #86
561: invokevirtual #89
564: dload         14
566: ldc2_w        #14
569: dcmpl
570: ifne          577
573: iconst_1
574: goto          578
577: iconst_0
578: invokestatic  #91
581: new           #83
584: dup
585: invokespecial #84
588: ldc           #85
590: invokevirtual #86
593: dload         16
595: invokevirtual #150
598: ldc           #88
600: invokevirtual #86
603: ldc2_w        #12
606: invokevirtual #150
609: ldc           #85
611: invokevirtual #86
614: invokevirtual #89
617: dload         16
619: ldc2_w        #12
622: dcmpl
623: ifne          630
626: iconst_1
627: goto          631
630: iconst_0
631: invokestatic  #91
634: aload         20
636: invokestatic  #20
639: aload         21
641: invokestatic  #20
644: new           #83
647: dup
648: invokespecial #84
651: ldc           #85
653: invokevirtual #86
656: dload         23
658: invokevirtual #150
661: ldc           #88
663: invokevirtual #86
666: ldc2_w        #12
669: invokevirtual #150
672: ldc           #85
674: invokevirtual #86
677: invokevirtual #89
680: dload         23
682: ldc2_w        #12
685: dcmpl
686: ifne          693
689: iconst_1
690: goto          694
693: iconst_0
694: invokestatic  #91
697: new           #83
700: dup
701: invokespecial #84
704: ldc           #85
706: invokevirtual #86
709: dload         25
711: invokevirtual #150
714: ldc           #88
716: invokevirtual #86
719: ldc2_w        #14
722: invokevirtual #150
725: ldc           #85
727: invokevirtual #86
730: invokevirtual #89
733: dload         25
735: ldc2_w        #14
738: dcmpl
739: ifne          746
742: iconst_1
743: goto          747
746: iconst_0
747: invokestatic  #91
750: new           #83
753: dup
754: invokespecial #84
757: ldc           #85
759: invokevirtual #86
762: dload         27
764: invokevirtual #150
767: ldc           #88
769: invokevirtual #86
772: ldc2_w        #14
775: invokevirtual #150
778: ldc           #85
780: invokevirtual #86
783: invokevirtual #89
786: dload         27
788: ldc2_w        #14
791: dcmpl
792: ifne          799
795: iconst_1
796: goto          800
799: iconst_0
800: invokestatic  #91
803: new           #83
806: dup
807: invokespecial #84
810: ldc           #85
812: invokevirtual #86
815: dload         29
817: invokevirtual #150
820: ldc           #88
822: invokevirtual #86
825: ldc2_w        #12
828: invokevirtual #150
831: ldc           #85
833: invokevirtual #86
836: invokevirtual #89
839: dload         29
841: ldc2_w        #12
844: dcmpl
845: ifne          852
848: iconst_1
849: goto          853
852: iconst_0
853: invokestatic  #91
856: aload         31
858: invokestatic  #20
861: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test310
Start line: 9664
End line: 9686
Method source code: 
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric16 = null;
        double[] doubleArray17 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = harmonicFitter1.fit((int) '#', parametric16, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #625
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: ldc2_w        #34
56: ldc2_w        #34
59: ldc2_w        #32
62: invokevirtual #54
65: aload_2
66: invokevirtual #59
69: aload_2
70: invokevirtual #59
73: aload_2
74: invokevirtual #59
77: aconst_null
78: astore_3
79: iconst_0
80: newarray       double
82: astore        4
84: aload_2
85: bipush        35
87: aload_3
88: aload         4
90: invokevirtual #40
93: astore        5
95: ldc           #17
97: invokestatic  #18
100: goto          105
103: astore        5
105: aload         4
107: invokestatic  #20
110: aload         4
112: invokestatic  #21
115: ldc           #74
117: invokestatic  #23
120: return
Exception table:
from    to  target type
84   100   103   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test311
Start line: 9689
End line: 9700
Method source code: 
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(35.0d, (double) (byte) -1);
        harmonicFitter1.addObservedPoint(1.0d, (double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(35.0d, (-1.0d));
        harmonicFitter1.clearObservations();
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #626
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: ldc2_w        #14
52: ldc2_w        #10
55: invokevirtual #43
58: aload_2
59: dconst_1
60: dconst_1
61: ldc2_w        #32
64: invokevirtual #54
67: aload_2
68: ldc2_w        #14
71: ldc2_w        #10
74: invokevirtual #43
77: aload_2
78: invokevirtual #59
81: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test312
Start line: 9703
End line: 9735
Method source code: 
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter1.addObservedPoint((double) (short) 10, 0.0d);
        harmonicFitter1.addObservedPoint((double) (byte) 10, (-1.0d), (double) 'a');
        harmonicFitter1.addObservedPoint((double) 1L, (double) ' ');
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer23 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter24 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer23);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray25 = harmonicFitter24.getObservations();
        harmonicFitter24.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter24.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint31 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double32 = weightedObservedPoint31.getX();
        double double33 = weightedObservedPoint31.getWeight();
        double double34 = weightedObservedPoint31.getWeight();
        double double35 = weightedObservedPoint31.getY();
        harmonicFitter24.addObservedPoint(weightedObservedPoint31);
        double double37 = weightedObservedPoint31.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint31);
        org.junit.Assert.assertNotNull(weightedObservedPointArray25);
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 35.0d + "'", double33 == 35.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #627
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: ldc2_w        #34
56: ldc2_w        #34
59: ldc2_w        #32
62: invokevirtual #54
65: aload_2
66: ldc2_w        #32
69: dconst_0
70: invokevirtual #43
73: aload_2
74: ldc2_w        #32
77: ldc2_w        #10
80: ldc2_w        #44
83: invokevirtual #54
86: aload_2
87: dconst_1
88: ldc2_w        #38
91: invokevirtual #43
94: aload_2
95: invokevirtual #59
98: aconst_null
99: astore_3
100: new           #8
103: dup
104: aload_3
105: invokespecial #9
108: astore        4
110: aload         4
112: invokevirtual #25
115: astore        5
117: aload         4
119: invokevirtual #59
122: aload         4
124: invokevirtual #25
127: astore        6
129: new           #145
132: dup
133: ldc2_w        #14
136: ldc2_w        #12
139: ldc2_w        #12
142: invokespecial #146
145: astore        7
147: aload         7
149: invokevirtual #147
152: dstore        8
154: aload         7
156: invokevirtual #148
159: dstore        10
161: aload         7
163: invokevirtual #148
166: dstore        12
168: aload         7
170: invokevirtual #149
173: dstore        14
175: aload         4
177: aload         7
179: invokevirtual #123
182: aload         7
184: invokevirtual #149
187: dstore        16
189: aload_2
190: aload         7
192: invokevirtual #123
195: aload         5
197: invokestatic  #20
200: aload         6
202: invokestatic  #20
205: new           #83
208: dup
209: invokespecial #84
212: ldc           #85
214: invokevirtual #86
217: dload         8
219: invokevirtual #150
222: ldc           #88
224: invokevirtual #86
227: ldc2_w        #12
230: invokevirtual #150
233: ldc           #85
235: invokevirtual #86
238: invokevirtual #89
241: dload         8
243: ldc2_w        #12
246: dcmpl
247: ifne          254
250: iconst_1
251: goto          255
254: iconst_0
255: invokestatic  #91
258: new           #83
261: dup
262: invokespecial #84
265: ldc           #85
267: invokevirtual #86
270: dload         10
272: invokevirtual #150
275: ldc           #88
277: invokevirtual #86
280: ldc2_w        #14
283: invokevirtual #150
286: ldc           #85
288: invokevirtual #86
291: invokevirtual #89
294: dload         10
296: ldc2_w        #14
299: dcmpl
300: ifne          307
303: iconst_1
304: goto          308
307: iconst_0
308: invokestatic  #91
311: new           #83
314: dup
315: invokespecial #84
318: ldc           #85
320: invokevirtual #86
323: dload         12
325: invokevirtual #150
328: ldc           #88
330: invokevirtual #86
333: ldc2_w        #14
336: invokevirtual #150
339: ldc           #85
341: invokevirtual #86
344: invokevirtual #89
347: dload         12
349: ldc2_w        #14
352: dcmpl
353: ifne          360
356: iconst_1
357: goto          361
360: iconst_0
361: invokestatic  #91
364: new           #83
367: dup
368: invokespecial #84
371: ldc           #85
373: invokevirtual #86
376: dload         14
378: invokevirtual #150
381: ldc           #88
383: invokevirtual #86
386: ldc2_w        #12
389: invokevirtual #150
392: ldc           #85
394: invokevirtual #86
397: invokevirtual #89
400: dload         14
402: ldc2_w        #12
405: dcmpl
406: ifne          413
409: iconst_1
410: goto          414
413: iconst_0
414: invokestatic  #91
417: new           #83
420: dup
421: invokespecial #84
424: ldc           #85
426: invokevirtual #86
429: dload         16
431: invokevirtual #150
434: ldc           #88
436: invokevirtual #86
439: ldc2_w        #12
442: invokevirtual #150
445: ldc           #85
447: invokevirtual #86
450: invokevirtual #89
453: dload         16
455: ldc2_w        #12
458: dcmpl
459: ifne          466
462: iconst_1
463: goto          467
466: iconst_0
467: invokestatic  #91
470: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test313
Start line: 9738
End line: 9788
Method source code: 
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer5 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter6 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer5);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray7 = harmonicFitter6.getObservations();
        harmonicFitter6.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter6.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter6.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer16 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter17 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer16);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray18 = harmonicFitter17.getObservations();
        harmonicFitter17.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray20 = harmonicFitter17.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer21 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter22 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer21);
        harmonicFitter22.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter22.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter22.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray30 = harmonicFitter22.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint34 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double35 = weightedObservedPoint34.getX();
        double double36 = weightedObservedPoint34.getY();
        double double37 = weightedObservedPoint34.getX();
        double double38 = weightedObservedPoint34.getY();
        harmonicFitter22.addObservedPoint(weightedObservedPoint34);
        double double40 = weightedObservedPoint34.getWeight();
        harmonicFitter17.addObservedPoint(weightedObservedPoint34);
        harmonicFitter6.addObservedPoint(weightedObservedPoint34);
        double double43 = weightedObservedPoint34.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint34);
        harmonicFitter1.addObservedPoint((double) (byte) -1, (double) (short) 100, (double) 0.0f);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
        org.junit.Assert.assertNotNull(weightedObservedPointArray7);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertNotNull(weightedObservedPointArray18);
        org.junit.Assert.assertNotNull(weightedObservedPointArray20);
        org.junit.Assert.assertNotNull(weightedObservedPointArray30);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 52.0d + "'", double43 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #628
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #25
45: astore        4
47: aload_2
48: invokevirtual #59
51: aconst_null
52: astore        5
54: new           #8
57: dup
58: aload         5
60: invokespecial #9
63: astore        6
65: aload         6
67: invokevirtual #25
70: astore        7
72: aload         6
74: ldc2_w        #32
77: ldc2_w        #10
80: dconst_0
81: invokevirtual #54
84: aload         6
86: ldc2_w        #44
89: ldc2_w        #14
92: invokevirtual #43
95: aload         6
97: invokevirtual #25
100: astore        8
102: aconst_null
103: astore        9
105: new           #8
108: dup
109: aload         9
111: invokespecial #9
114: astore        10
116: aload         10
118: invokevirtual #25
121: astore        11
123: aload         10
125: invokevirtual #59
128: aload         10
130: invokevirtual #25
133: astore        12
135: aconst_null
136: astore        13
138: new           #8
141: dup
142: aload         13
144: invokespecial #9
147: astore        14
149: aload         14
151: dconst_1
152: ldc2_w        #32
155: invokevirtual #43
158: aload         14
160: dconst_0
161: ldc2_w        #34
164: invokevirtual #43
167: aload         14
169: invokevirtual #59
172: aload         14
174: invokevirtual #25
177: astore        15
179: new           #145
182: dup
183: ldc2_w        #14
186: ldc2_w        #12
189: ldc2_w        #12
192: invokespecial #146
195: astore        16
197: aload         16
199: invokevirtual #147
202: dstore        17
204: aload         16
206: invokevirtual #149
209: dstore        19
211: aload         16
213: invokevirtual #147
216: dstore        21
218: aload         16
220: invokevirtual #149
223: dstore        23
225: aload         14
227: aload         16
229: invokevirtual #123
232: aload         16
234: invokevirtual #148
237: dstore        25
239: aload         10
241: aload         16
243: invokevirtual #123
246: aload         6
248: aload         16
250: invokevirtual #123
253: aload         16
255: invokevirtual #147
258: dstore        27
260: aload_2
261: aload         16
263: invokevirtual #123
266: aload_2
267: ldc2_w        #10
270: ldc2_w        #34
273: dconst_0
274: invokevirtual #54
277: aload_3
278: invokestatic  #20
281: aload         4
283: invokestatic  #20
286: aload         7
288: invokestatic  #20
291: aload         8
293: invokestatic  #20
296: aload         11
298: invokestatic  #20
301: aload         12
303: invokestatic  #20
306: aload         15
308: invokestatic  #20
311: new           #83
314: dup
315: invokespecial #84
318: ldc           #85
320: invokevirtual #86
323: dload         17
325: invokevirtual #150
328: ldc           #88
330: invokevirtual #86
333: ldc2_w        #12
336: invokevirtual #150
339: ldc           #85
341: invokevirtual #86
344: invokevirtual #89
347: dload         17
349: ldc2_w        #12
352: dcmpl
353: ifne          360
356: iconst_1
357: goto          361
360: iconst_0
361: invokestatic  #91
364: new           #83
367: dup
368: invokespecial #84
371: ldc           #85
373: invokevirtual #86
376: dload         19
378: invokevirtual #150
381: ldc           #88
383: invokevirtual #86
386: ldc2_w        #12
389: invokevirtual #150
392: ldc           #85
394: invokevirtual #86
397: invokevirtual #89
400: dload         19
402: ldc2_w        #12
405: dcmpl
406: ifne          413
409: iconst_1
410: goto          414
413: iconst_0
414: invokestatic  #91
417: new           #83
420: dup
421: invokespecial #84
424: ldc           #85
426: invokevirtual #86
429: dload         21
431: invokevirtual #150
434: ldc           #88
436: invokevirtual #86
439: ldc2_w        #12
442: invokevirtual #150
445: ldc           #85
447: invokevirtual #86
450: invokevirtual #89
453: dload         21
455: ldc2_w        #12
458: dcmpl
459: ifne          466
462: iconst_1
463: goto          467
466: iconst_0
467: invokestatic  #91
470: new           #83
473: dup
474: invokespecial #84
477: ldc           #85
479: invokevirtual #86
482: dload         23
484: invokevirtual #150
487: ldc           #88
489: invokevirtual #86
492: ldc2_w        #12
495: invokevirtual #150
498: ldc           #85
500: invokevirtual #86
503: invokevirtual #89
506: dload         23
508: ldc2_w        #12
511: dcmpl
512: ifne          519
515: iconst_1
516: goto          520
519: iconst_0
520: invokestatic  #91
523: new           #83
526: dup
527: invokespecial #84
530: ldc           #85
532: invokevirtual #86
535: dload         25
537: invokevirtual #150
540: ldc           #88
542: invokevirtual #86
545: ldc2_w        #14
548: invokevirtual #150
551: ldc           #85
553: invokevirtual #86
556: invokevirtual #89
559: dload         25
561: ldc2_w        #14
564: dcmpl
565: ifne          572
568: iconst_1
569: goto          573
572: iconst_0
573: invokestatic  #91
576: new           #83
579: dup
580: invokespecial #84
583: ldc           #85
585: invokevirtual #86
588: dload         27
590: invokevirtual #150
593: ldc           #88
595: invokevirtual #86
598: ldc2_w        #12
601: invokevirtual #150
604: ldc           #85
606: invokevirtual #86
609: invokevirtual #89
612: dload         27
614: ldc2_w        #12
617: dcmpl
618: ifne          625
621: iconst_1
622: goto          626
625: iconst_0
626: invokestatic  #91
629: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test314
Start line: 9791
End line: 9815
Method source code: 
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        double double14 = weightedObservedPoint8.getY();
        double double15 = weightedObservedPoint8.getX();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #629
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload         5
105: invokevirtual #149
108: dstore        14
110: aload         5
112: invokevirtual #147
115: dstore        16
117: aload_3
118: invokestatic  #20
121: aload         4
123: invokestatic  #20
126: new           #83
129: dup
130: invokespecial #84
133: ldc           #85
135: invokevirtual #86
138: dload         6
140: invokevirtual #150
143: ldc           #88
145: invokevirtual #86
148: ldc2_w        #12
151: invokevirtual #150
154: ldc           #85
156: invokevirtual #86
159: invokevirtual #89
162: dload         6
164: ldc2_w        #12
167: dcmpl
168: ifne          175
171: iconst_1
172: goto          176
175: iconst_0
176: invokestatic  #91
179: new           #83
182: dup
183: invokespecial #84
186: ldc           #85
188: invokevirtual #86
191: dload         8
193: invokevirtual #150
196: ldc           #88
198: invokevirtual #86
201: ldc2_w        #14
204: invokevirtual #150
207: ldc           #85
209: invokevirtual #86
212: invokevirtual #89
215: dload         8
217: ldc2_w        #14
220: dcmpl
221: ifne          228
224: iconst_1
225: goto          229
228: iconst_0
229: invokestatic  #91
232: new           #83
235: dup
236: invokespecial #84
239: ldc           #85
241: invokevirtual #86
244: dload         10
246: invokevirtual #150
249: ldc           #88
251: invokevirtual #86
254: ldc2_w        #14
257: invokevirtual #150
260: ldc           #85
262: invokevirtual #86
265: invokevirtual #89
268: dload         10
270: ldc2_w        #14
273: dcmpl
274: ifne          281
277: iconst_1
278: goto          282
281: iconst_0
282: invokestatic  #91
285: new           #83
288: dup
289: invokespecial #84
292: ldc           #85
294: invokevirtual #86
297: dload         12
299: invokevirtual #150
302: ldc           #88
304: invokevirtual #86
307: ldc2_w        #12
310: invokevirtual #150
313: ldc           #85
315: invokevirtual #86
318: invokevirtual #89
321: dload         12
323: ldc2_w        #12
326: dcmpl
327: ifne          334
330: iconst_1
331: goto          335
334: iconst_0
335: invokestatic  #91
338: new           #83
341: dup
342: invokespecial #84
345: ldc           #85
347: invokevirtual #86
350: dload         14
352: invokevirtual #150
355: ldc           #88
357: invokevirtual #86
360: ldc2_w        #12
363: invokevirtual #150
366: ldc           #85
368: invokevirtual #86
371: invokevirtual #89
374: dload         14
376: ldc2_w        #12
379: dcmpl
380: ifne          387
383: iconst_1
384: goto          388
387: iconst_0
388: invokestatic  #91
391: new           #83
394: dup
395: invokespecial #84
398: ldc           #85
400: invokevirtual #86
403: dload         16
405: invokevirtual #150
408: ldc           #88
410: invokevirtual #86
413: ldc2_w        #12
416: invokevirtual #150
419: ldc           #85
421: invokevirtual #86
424: invokevirtual #89
427: dload         16
429: ldc2_w        #12
432: dcmpl
433: ifne          440
436: iconst_1
437: goto          441
440: iconst_0
441: invokestatic  #91
444: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test315
Start line: 9818
End line: 9867
Method source code: 
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_RETRIEVE_AT_NEGATIVE_INDEX;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer2 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter3 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer2);
        harmonicFitter3.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter3.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter3.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter3.getObservations();
        java.lang.Object[] objArray12 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray11);
        org.apache.commons.math3.exception.ZeroException zeroException13 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) weightedObservedPointArray11);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException14 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray11);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext15 = mathIllegalStateException14.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.NUMERATOR_FORMAT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_RETRIEVE_AT_NEGATIVE_INDEX;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats18 = org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer19 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter20 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer19);
        harmonicFitter20.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter20.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter20.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray28 = harmonicFitter20.getObservations();
        java.lang.Object[] objArray29 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray28);
        org.apache.commons.math3.exception.ZeroException zeroException30 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats18, (java.lang.Object[]) weightedObservedPointArray28);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats17, (java.lang.Object[]) weightedObservedPointArray28);
        org.apache.commons.math3.exception.ZeroException zeroException32 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats16, (java.lang.Object[]) weightedObservedPointArray28);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats33 = org.apache.commons.math3.exception.util.LocalizedFormats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1;
        java.lang.Object[] objArray34 = null;
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException35 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats33, objArray34);
        java.lang.Throwable[] throwableArray36 = mathIllegalArgumentException35.getSuppressed();
        exceptionContext15.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats16, (java.lang.Object[]) throwableArray36);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_RETRIEVE_AT_NEGATIVE_INDEX + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_RETRIEVE_AT_NEGATIVE_INDEX));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(exceptionContext15);
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NUMERATOR_FORMAT + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NUMERATOR_FORMAT));
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_RETRIEVE_AT_NEGATIVE_INDEX + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_RETRIEVE_AT_NEGATIVE_INDEX));
        org.junit.Assert.assertTrue("'" + localizedFormats18 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS + "'", localizedFormats18.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray28);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + localizedFormats33 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1 + "'", localizedFormats33.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1));
        org.junit.Assert.assertNotNull(throwableArray36);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #630
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #281
28: astore_1
29: getstatic     #78
32: astore_2
33: aconst_null
34: astore_3
35: new           #8
38: dup
39: aload_3
40: invokespecial #9
43: astore        4
45: aload         4
47: dconst_1
48: ldc2_w        #32
51: invokevirtual #43
54: aload         4
56: dconst_0
57: ldc2_w        #34
60: invokevirtual #43
63: aload         4
65: invokevirtual #59
68: aload         4
70: invokevirtual #25
73: astore        5
75: aload         5
77: checkcast     #79
80: invokestatic  #80
83: astore        6
85: new           #81
88: dup
89: aload_2
90: aload         5
92: checkcast     #79
95: invokespecial #82
98: astore        7
100: new           #136
103: dup
104: aload_1
105: aload         5
107: checkcast     #79
110: invokespecial #138
113: astore        8
115: aload         8
117: invokevirtual #282
120: astore        9
122: getstatic     #631
125: astore        10
127: getstatic     #281
130: astore        11
132: getstatic     #78
135: astore        12
137: aconst_null
138: astore        13
140: new           #8
143: dup
144: aload         13
146: invokespecial #9
149: astore        14
151: aload         14
153: dconst_1
154: ldc2_w        #32
157: invokevirtual #43
160: aload         14
162: dconst_0
163: ldc2_w        #34
166: invokevirtual #43
169: aload         14
171: invokevirtual #59
174: aload         14
176: invokevirtual #25
179: astore        15
181: aload         15
183: checkcast     #79
186: invokestatic  #80
189: astore        16
191: new           #81
194: dup
195: aload         12
197: aload         15
199: checkcast     #79
202: invokespecial #82
205: astore        17
207: new           #136
210: dup
211: aload         11
213: aload         15
215: checkcast     #79
218: invokespecial #138
221: astore        18
223: new           #81
226: dup
227: aload         10
229: aload         15
231: checkcast     #79
234: invokespecial #82
237: astore        19
239: getstatic     #632
242: astore        20
244: aconst_null
245: astore        21
247: new           #130
250: dup
251: aload         20
253: aload         21
255: invokespecial #131
258: astore        22
260: aload         22
262: invokevirtual #234
265: astore        23
267: aload         9
269: aload         10
271: aload         23
273: checkcast     #79
276: invokevirtual #169
279: new           #83
282: dup
283: invokespecial #84
286: ldc           #85
288: invokevirtual #86
291: aload_1
292: invokevirtual #87
295: ldc           #88
297: invokevirtual #86
300: getstatic     #281
303: invokevirtual #87
306: ldc           #85
308: invokevirtual #86
311: invokevirtual #89
314: aload_1
315: getstatic     #281
318: invokevirtual #90
321: invokestatic  #91
324: new           #83
327: dup
328: invokespecial #84
331: ldc           #85
333: invokevirtual #86
336: aload_2
337: invokevirtual #87
340: ldc           #88
342: invokevirtual #86
345: getstatic     #78
348: invokevirtual #87
351: ldc           #85
353: invokevirtual #86
356: invokevirtual #89
359: aload_2
360: getstatic     #78
363: invokevirtual #90
366: invokestatic  #91
369: aload         5
371: invokestatic  #20
374: aload         6
376: invokestatic  #20
379: aload         6
381: invokestatic  #92
384: ldc           #74
386: invokestatic  #23
389: aload         6
391: invokestatic  #93
394: ldc           #74
396: invokestatic  #23
399: aload         9
401: invokestatic  #20
404: new           #83
407: dup
408: invokespecial #84
411: ldc           #85
413: invokevirtual #86
416: aload         10
418: invokevirtual #87
421: ldc           #88
423: invokevirtual #86
426: getstatic     #631
429: invokevirtual #87
432: ldc           #85
434: invokevirtual #86
437: invokevirtual #89
440: aload         10
442: getstatic     #631
445: invokevirtual #90
448: invokestatic  #91
451: new           #83
454: dup
455: invokespecial #84
458: ldc           #85
460: invokevirtual #86
463: aload         11
465: invokevirtual #87
468: ldc           #88
470: invokevirtual #86
473: getstatic     #281
476: invokevirtual #87
479: ldc           #85
481: invokevirtual #86
484: invokevirtual #89
487: aload         11
489: getstatic     #281
492: invokevirtual #90
495: invokestatic  #91
498: new           #83
501: dup
502: invokespecial #84
505: ldc           #85
507: invokevirtual #86
510: aload         12
512: invokevirtual #87
515: ldc           #88
517: invokevirtual #86
520: getstatic     #78
523: invokevirtual #87
526: ldc           #85
528: invokevirtual #86
531: invokevirtual #89
534: aload         12
536: getstatic     #78
539: invokevirtual #90
542: invokestatic  #91
545: aload         15
547: invokestatic  #20
550: aload         16
552: invokestatic  #20
555: aload         16
557: invokestatic  #92
560: ldc           #74
562: invokestatic  #23
565: aload         16
567: invokestatic  #93
570: ldc           #74
572: invokestatic  #23
575: new           #83
578: dup
579: invokespecial #84
582: ldc           #85
584: invokevirtual #86
587: aload         20
589: invokevirtual #87
592: ldc           #88
594: invokevirtual #86
597: getstatic     #632
600: invokevirtual #87
603: ldc           #85
605: invokevirtual #86
608: invokevirtual #89
611: aload         20
613: getstatic     #632
616: invokevirtual #90
619: invokestatic  #91
622: aload         23
624: invokestatic  #20
627: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test316
Start line: 9870
End line: 9893
Method source code: 
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter1.addObservedPoint((double) (short) 10, 0.0d);
        harmonicFitter1.addObservedPoint((double) (byte) 10, (-1.0d), (double) 'a');
        harmonicFitter1.addObservedPoint((double) 1L, (double) ' ');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray22 = harmonicFitter1.getObservations();
        double[] doubleArray24 = new double[] { (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray25 = harmonicFitter1.fit(doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #633
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: ldc2_w        #34
56: ldc2_w        #34
59: ldc2_w        #32
62: invokevirtual #54
65: aload_2
66: ldc2_w        #32
69: dconst_0
70: invokevirtual #43
73: aload_2
74: ldc2_w        #32
77: ldc2_w        #10
80: ldc2_w        #44
83: invokevirtual #54
86: aload_2
87: dconst_1
88: ldc2_w        #38
91: invokevirtual #43
94: aload_2
95: invokevirtual #25
98: astore_3
99: iconst_1
100: newarray       double
102: dup
103: iconst_0
104: ldc2_w        #34
107: dastore
108: astore        4
110: aload_2
111: aload         4
113: invokevirtual #16
116: astore        5
118: ldc           #17
120: invokestatic  #18
123: goto          128
126: astore        5
128: aload_3
129: invokestatic  #20
132: aload         4
134: invokestatic  #20
137: aload         4
139: invokestatic  #21
142: ldc           #62
144: invokestatic  #23
147: return
Exception table:
from    to  target type
110   123   126   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test317
Start line: 9896
End line: 9934
Method source code: 
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint19 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter8.addObservedPoint(weightedObservedPoint19);
        harmonicFitter1.addObservedPoint(weightedObservedPoint19);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer22 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter23 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer22);
        harmonicFitter23.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter23.clearObservations();
        harmonicFitter23.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint34 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double35 = weightedObservedPoint34.getX();
        harmonicFitter23.addObservedPoint(weightedObservedPoint34);
        harmonicFitter1.addObservedPoint(weightedObservedPoint34);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric38 = null;
        double[] doubleArray43 = new double[] { (byte) 0, 10.0f, 0L, (-1.0f) };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray44 = harmonicFitter1.fit(parametric38, doubleArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[0.0, 10.0, 0.0, -1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #634
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aconst_null
53: astore        4
55: new           #8
58: dup
59: aload         4
61: invokespecial #9
64: astore        5
66: aload         5
68: dconst_1
69: ldc2_w        #32
72: invokevirtual #43
75: aload         5
77: dconst_0
78: ldc2_w        #34
81: invokevirtual #43
84: aload         5
86: invokevirtual #25
89: astore        6
91: new           #145
94: dup
95: dconst_1
96: dconst_0
97: ldc2_w        #34
100: invokespecial #146
103: astore        7
105: aload         5
107: aload         7
109: invokevirtual #123
112: aload_2
113: aload         7
115: invokevirtual #123
118: aconst_null
119: astore        8
121: new           #8
124: dup
125: aload         8
127: invokespecial #9
130: astore        9
132: aload         9
134: dconst_1
135: ldc2_w        #32
138: invokevirtual #43
141: aload         9
143: invokevirtual #59
146: aload         9
148: dconst_0
149: ldc2_w        #10
152: invokevirtual #43
155: new           #145
158: dup
159: ldc2_w        #14
162: ldc2_w        #12
165: ldc2_w        #12
168: invokespecial #146
171: astore        10
173: aload         10
175: invokevirtual #147
178: dstore        11
180: aload         9
182: aload         10
184: invokevirtual #123
187: aload_2
188: aload         10
190: invokevirtual #123
193: aconst_null
194: astore        13
196: iconst_4
197: newarray       double
199: dup
200: iconst_0
201: dconst_0
202: dastore
203: dup
204: iconst_1
205: ldc2_w        #32
208: dastore
209: dup
210: iconst_2
211: dconst_0
212: dastore
213: dup
214: iconst_3
215: ldc2_w        #10
218: dastore
219: astore        14
221: aload_2
222: aload         13
224: aload         14
226: invokevirtual #30
229: astore        15
231: ldc           #17
233: invokestatic  #18
236: goto          241
239: astore        15
241: aload_3
242: invokestatic  #20
245: aload         6
247: invokestatic  #20
250: new           #83
253: dup
254: invokespecial #84
257: ldc           #85
259: invokevirtual #86
262: dload         11
264: invokevirtual #150
267: ldc           #88
269: invokevirtual #86
272: ldc2_w        #12
275: invokevirtual #150
278: ldc           #85
280: invokevirtual #86
283: invokevirtual #89
286: dload         11
288: ldc2_w        #12
291: dcmpl
292: ifne          299
295: iconst_1
296: goto          300
299: iconst_0
300: invokestatic  #91
303: aload         14
305: invokestatic  #20
308: aload         14
310: invokestatic  #21
313: ldc_w         #635
316: invokestatic  #23
319: return
Exception table:
from    to  target type
221   236   239   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test318
Start line: 9937
End line: 9959
Method source code: 
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint10 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint(0.0d, (double) 1.0f, 35.0d);
        harmonicFitter1.addObservedPoint(weightedObservedPoint10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (-1L), 0.0d);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric16 = null;
        double[] doubleArray18 = new double[] { (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = harmonicFitter1.fit(parametric16, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #636
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: invokevirtual #59
52: new           #145
55: dup
56: dconst_0
57: dconst_1
58: ldc2_w        #14
61: invokespecial #146
64: astore_3
65: aload_2
66: aload_3
67: invokevirtual #123
70: aload_2
71: dconst_0
72: ldc2_w        #10
75: dconst_0
76: invokevirtual #54
79: aconst_null
80: astore        4
82: iconst_1
83: newarray       double
85: dup
86: iconst_0
87: ldc2_w        #10
90: dastore
91: astore        5
93: aload_2
94: aload         4
96: aload         5
98: invokevirtual #30
101: astore        6
103: ldc           #17
105: invokestatic  #18
108: goto          113
111: astore        6
113: aload         5
115: invokestatic  #20
118: aload         5
120: invokestatic  #21
123: ldc           #72
125: invokestatic  #23
128: return
Exception table:
from    to  target type
93   108   111   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test319
Start line: 9962
End line: 10062
Method source code: 
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSION;
        java.lang.String str1 = localizedFormats0.getSourceString();
        java.lang.Number number3 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException5 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number3, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException8 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException5, (org.apache.commons.math3.exception.util.Localizable) localizedFormats6, objArray7);
        boolean boolean9 = numberIsTooSmallException5.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext10 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException5);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats11 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray14 = new java.lang.Object[] { localizedFormats12, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException15 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats11, objArray14);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray19 = new java.lang.Object[] { localizedFormats17, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException20 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats16, objArray19);
        mathIllegalArgumentException15.addSuppressed((java.lang.Throwable) mathIllegalArgumentException20);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext22 = mathIllegalArgumentException15.getContext();
        java.lang.Object obj24 = exceptionContext22.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats25 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer26 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter27 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer26);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray28 = harmonicFitter27.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray29 = harmonicFitter27.getObservations();
        exceptionContext22.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, (java.lang.Object[]) weightedObservedPointArray29);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats31 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer32 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter33 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer32);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray34 = harmonicFitter33.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException35 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats31, (java.lang.Object[]) weightedObservedPointArray34);
        exceptionContext10.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, (java.lang.Object[]) weightedObservedPointArray34);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats37 = org.apache.commons.math3.exception.util.LocalizedFormats.COLUMN_INDEX;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats38 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats39 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats40 = org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats41 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats42 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray44 = new java.lang.Object[] { localizedFormats42, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException45 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats41, objArray44);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats46 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats47 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats48 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats49 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats50 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray51 = new java.lang.Object[] { localizedFormats47, localizedFormats48, localizedFormats49, localizedFormats50 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException52 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException45, (org.apache.commons.math3.exception.util.Localizable) localizedFormats46, objArray51);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext53 = mathIllegalArgumentException45.getContext();
        java.lang.Throwable[] throwableArray54 = mathIllegalArgumentException45.getSuppressed();
        org.apache.commons.math3.exception.ZeroException zeroException55 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats40, (java.lang.Object[]) throwableArray54);
        org.apache.commons.math3.exception.ZeroException zeroException56 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats39, (java.lang.Object[]) throwableArray54);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException57 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats38, (java.lang.Object[]) throwableArray54);
        exceptionContext10.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats37, (java.lang.Object[]) throwableArray54);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException59 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) throwableArray54);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSION));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dimension ({0})" + "'", str1, "dimension ({0})");
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats11 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats11.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + localizedFormats25 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats25.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray28);
        org.junit.Assert.assertNotNull(weightedObservedPointArray29);
        org.junit.Assert.assertTrue("'" + localizedFormats31 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats31.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray34);
        org.junit.Assert.assertTrue("'" + localizedFormats37 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.COLUMN_INDEX + "'", localizedFormats37.equals(org.apache.commons.math3.exception.util.LocalizedFormats.COLUMN_INDEX));
        org.junit.Assert.assertTrue("'" + localizedFormats38 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR + "'", localizedFormats38.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR));
        org.junit.Assert.assertTrue("'" + localizedFormats39 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE + "'", localizedFormats39.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE));
        org.junit.Assert.assertTrue("'" + localizedFormats40 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N + "'", localizedFormats40.equals(org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N));
        org.junit.Assert.assertTrue("'" + localizedFormats41 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats41.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats42 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats42.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats46 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats46.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats47 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats47.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats48 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats48.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats49 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats49.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats50 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats50.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertNotNull(exceptionContext53);
        org.junit.Assert.assertNotNull(throwableArray54);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #637
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #638
28: astore_1
29: aload_1
30: invokevirtual #301
33: astore_2
34: aconst_null
35: astore_3
36: new           #28
39: dup
40: bipush        100
42: invokestatic  #159
45: aload_3
46: iconst_0
47: invokespecial #160
50: astore        4
52: getstatic     #161
55: astore        5
57: iconst_0
58: anewarray     #5
61: astore        6
63: new           #136
66: dup
67: aload         4
69: aload         5
71: aload         6
73: invokespecial #137
76: astore        7
78: aload         4
80: invokevirtual #162
83: istore        8
85: new           #163
88: dup
89: aload         4
91: invokespecial #164
94: astore        9
96: getstatic     #127
99: astore        10
101: getstatic     #128
104: astore        11
106: iconst_2
107: anewarray     #5
110: dup
111: iconst_0
112: aload         11
114: aastore
115: dup
116: iconst_1
117: lconst_1
118: invokestatic  #129
121: aastore
122: astore        12
124: new           #130
127: dup
128: aload         10
130: aload         12
132: invokespecial #131
135: astore        13
137: getstatic     #127
140: astore        14
142: getstatic     #128
145: astore        15
147: iconst_2
148: anewarray     #5
151: dup
152: iconst_0
153: aload         15
155: aastore
156: dup
157: iconst_1
158: lconst_1
159: invokestatic  #129
162: aastore
163: astore        16
165: new           #130
168: dup
169: aload         14
171: aload         16
173: invokespecial #131
176: astore        17
178: aload         13
180: aload         17
182: invokevirtual #132
185: aload         13
187: invokevirtual #165
190: astore        18
192: aload         18
194: ldc           #166
196: invokevirtual #167
199: astore        19
201: getstatic     #168
204: astore        20
206: aconst_null
207: astore        21
209: new           #8
212: dup
213: aload         21
215: invokespecial #9
218: astore        22
220: aload         22
222: invokevirtual #25
225: astore        23
227: aload         22
229: invokevirtual #25
232: astore        24
234: aload         18
236: aload         20
238: aload         24
240: checkcast     #79
243: invokevirtual #169
246: getstatic     #156
249: astore        25
251: aconst_null
252: astore        26
254: new           #8
257: dup
258: aload         26
260: invokespecial #9
263: astore        27
265: aload         27
267: invokevirtual #25
270: astore        28
272: new           #81
275: dup
276: aload         25
278: aload         28
280: checkcast     #79
283: invokespecial #82
286: astore        29
288: aload         9
290: aload         20
292: aload         28
294: checkcast     #79
297: invokevirtual #169
300: getstatic     #639
303: astore        30
305: getstatic     #640
308: astore        31
310: getstatic     #591
313: astore        32
315: getstatic     #592
318: astore        33
320: getstatic     #127
323: astore        34
325: getstatic     #128
328: astore        35
330: iconst_2
331: anewarray     #5
334: dup
335: iconst_0
336: aload         35
338: aastore
339: dup
340: iconst_1
341: lconst_1
342: invokestatic  #129
345: aastore
346: astore        36
348: new           #130
351: dup
352: aload         34
354: aload         36
356: invokespecial #131
359: astore        37
361: getstatic     #328
364: astore        38
366: getstatic     #329
369: astore        39
371: getstatic     #330
374: astore        40
376: getstatic     #331
379: astore        41
381: getstatic     #332
384: astore        42
386: iconst_4
387: anewarray     #5
390: dup
391: iconst_0
392: aload         39
394: aastore
395: dup
396: iconst_1
397: aload         40
399: aastore
400: dup
401: iconst_2
402: aload         41
404: aastore
405: dup
406: iconst_3
407: aload         42
409: aastore
410: astore        43
412: new           #136
415: dup
416: aload         37
418: aload         38
420: aload         43
422: invokespecial #137
425: astore        44
427: aload         37
429: invokevirtual #165
432: astore        45
434: aload         37
436: invokevirtual #234
439: astore        46
441: new           #81
444: dup
445: aload         33
447: aload         46
449: checkcast     #79
452: invokespecial #82
455: astore        47
457: new           #81
460: dup
461: aload         32
463: aload         46
465: checkcast     #79
468: invokespecial #82
471: astore        48
473: new           #130
476: dup
477: aload         31
479: aload         46
481: checkcast     #79
484: invokespecial #131
487: astore        49
489: aload         9
491: aload         30
493: aload         46
495: checkcast     #79
498: invokevirtual #169
501: new           #136
504: dup
505: aload_1
506: aload         46
508: checkcast     #79
511: invokespecial #138
514: astore        50
516: new           #83
519: dup
520: invokespecial #84
523: ldc           #85
525: invokevirtual #86
528: aload_1
529: invokevirtual #87
532: ldc           #88
534: invokevirtual #86
537: getstatic     #638
540: invokevirtual #87
543: ldc           #85
545: invokevirtual #86
548: invokevirtual #89
551: aload_1
552: getstatic     #638
555: invokevirtual #90
558: invokestatic  #91
561: new           #83
564: dup
565: invokespecial #84
568: ldc           #85
570: invokevirtual #86
573: aload_2
574: invokevirtual #86
577: ldc_w         #641
580: invokevirtual #86
583: invokevirtual #89
586: aload_2
587: ldc_w         #642
590: invokestatic  #245
593: new           #83
596: dup
597: invokespecial #84
600: ldc           #85
602: invokevirtual #86
605: aload         5
607: invokevirtual #87
610: ldc           #88
612: invokevirtual #86
615: getstatic     #161
618: invokevirtual #87
621: ldc           #85
623: invokevirtual #86
626: invokevirtual #89
629: aload         5
631: getstatic     #161
634: invokevirtual #90
637: invokestatic  #91
640: aload         6
642: invokestatic  #20
645: aload         6
647: invokestatic  #92
650: ldc           #74
652: invokestatic  #23
655: aload         6
657: invokestatic  #93
660: ldc           #74
662: invokestatic  #23
665: new           #83
668: dup
669: invokespecial #84
672: ldc           #85
674: invokevirtual #86
677: iload         8
679: invokevirtual #170
682: ldc           #88
684: invokevirtual #86
687: iconst_0
688: invokevirtual #170
691: ldc           #85
693: invokevirtual #86
696: invokevirtual #89
699: iload         8
701: ifne          708
704: iconst_1
705: goto          709
708: iconst_0
709: invokestatic  #91
712: new           #83
715: dup
716: invokespecial #84
719: ldc           #85
721: invokevirtual #86
724: aload         10
726: invokevirtual #87
729: ldc           #88
731: invokevirtual #86
734: getstatic     #127
737: invokevirtual #87
740: ldc           #85
742: invokevirtual #86
745: invokevirtual #89
748: aload         10
750: getstatic     #127
753: invokevirtual #90
756: invokestatic  #91
759: new           #83
762: dup
763: invokespecial #84
766: ldc           #85
768: invokevirtual #86
771: aload         11
773: invokevirtual #87
776: ldc           #88
778: invokevirtual #86
781: getstatic     #128
784: invokevirtual #87
787: ldc           #85
789: invokevirtual #86
792: invokevirtual #89
795: aload         11
797: getstatic     #128
800: invokevirtual #90
803: invokestatic  #91
806: aload         12
808: invokestatic  #20
811: aload         12
813: invokestatic  #92
816: ldc           #140
818: invokestatic  #23
821: aload         12
823: invokestatic  #93
826: ldc           #140
828: invokestatic  #23
831: new           #83
834: dup
835: invokespecial #84
838: ldc           #85
840: invokevirtual #86
843: aload         14
845: invokevirtual #87
848: ldc           #88
850: invokevirtual #86
853: getstatic     #127
856: invokevirtual #87
859: ldc           #85
861: invokevirtual #86
864: invokevirtual #89
867: aload         14
869: getstatic     #127
872: invokevirtual #90
875: invokestatic  #91
878: new           #83
881: dup
882: invokespecial #84
885: ldc           #85
887: invokevirtual #86
890: aload         15
892: invokevirtual #87
895: ldc           #88
897: invokevirtual #86
900: getstatic     #128
903: invokevirtual #87
906: ldc           #85
908: invokevirtual #86
911: invokevirtual #89
914: aload         15
916: getstatic     #128
919: invokevirtual #90
922: invokestatic  #91
925: aload         16
927: invokestatic  #20
930: aload         16
932: invokestatic  #92
935: ldc           #140
937: invokestatic  #23
940: aload         16
942: invokestatic  #93
945: ldc           #140
947: invokestatic  #23
950: aload         18
952: invokestatic  #20
955: aload         19
957: invokestatic  #171
960: new           #83
963: dup
964: invokespecial #84
967: ldc           #85
969: invokevirtual #86
972: aload         20
974: invokevirtual #87
977: ldc           #88
979: invokevirtual #86
982: getstatic     #168
985: invokevirtual #87
988: ldc           #85
990: invokevirtual #86
993: invokevirtual #89
996: aload         20
998: getstatic     #168
1001: invokevirtual #90
1004: invokestatic  #91
1007: aload         23
1009: invokestatic  #20
1012: aload         24
1014: invokestatic  #20
1017: new           #83
1020: dup
1021: invokespecial #84
1024: ldc           #85
1026: invokevirtual #86
1029: aload         25
1031: invokevirtual #87
1034: ldc           #88
1036: invokevirtual #86
1039: getstatic     #156
1042: invokevirtual #87
1045: ldc           #85
1047: invokevirtual #86
1050: invokevirtual #89
1053: aload         25
1055: getstatic     #156
1058: invokevirtual #90
1061: invokestatic  #91
1064: aload         28
1066: invokestatic  #20
1069: new           #83
1072: dup
1073: invokespecial #84
1076: ldc           #85
1078: invokevirtual #86
1081: aload         30
1083: invokevirtual #87
1086: ldc           #88
1088: invokevirtual #86
1091: getstatic     #639
1094: invokevirtual #87
1097: ldc           #85
1099: invokevirtual #86
1102: invokevirtual #89
1105: aload         30
1107: getstatic     #639
1110: invokevirtual #90
1113: invokestatic  #91
1116: new           #83
1119: dup
1120: invokespecial #84
1123: ldc           #85
1125: invokevirtual #86
1128: aload         31
1130: invokevirtual #87
1133: ldc           #88
1135: invokevirtual #86
1138: getstatic     #640
1141: invokevirtual #87
1144: ldc           #85
1146: invokevirtual #86
1149: invokevirtual #89
1152: aload         31
1154: getstatic     #640
1157: invokevirtual #90
1160: invokestatic  #91
1163: new           #83
1166: dup
1167: invokespecial #84
1170: ldc           #85
1172: invokevirtual #86
1175: aload         32
1177: invokevirtual #87
1180: ldc           #88
1182: invokevirtual #86
1185: getstatic     #591
1188: invokevirtual #87
1191: ldc           #85
1193: invokevirtual #86
1196: invokevirtual #89
1199: aload         32
1201: getstatic     #591
1204: invokevirtual #90
1207: invokestatic  #91
1210: new           #83
1213: dup
1214: invokespecial #84
1217: ldc           #85
1219: invokevirtual #86
1222: aload         33
1224: invokevirtual #87
1227: ldc           #88
1229: invokevirtual #86
1232: getstatic     #592
1235: invokevirtual #87
1238: ldc           #85
1240: invokevirtual #86
1243: invokevirtual #89
1246: aload         33
1248: getstatic     #592
1251: invokevirtual #90
1254: invokestatic  #91
1257: new           #83
1260: dup
1261: invokespecial #84
1264: ldc           #85
1266: invokevirtual #86
1269: aload         34
1271: invokevirtual #87
1274: ldc           #88
1276: invokevirtual #86
1279: getstatic     #127
1282: invokevirtual #87
1285: ldc           #85
1287: invokevirtual #86
1290: invokevirtual #89
1293: aload         34
1295: getstatic     #127
1298: invokevirtual #90
1301: invokestatic  #91
1304: new           #83
1307: dup
1308: invokespecial #84
1311: ldc           #85
1313: invokevirtual #86
1316: aload         35
1318: invokevirtual #87
1321: ldc           #88
1323: invokevirtual #86
1326: getstatic     #128
1329: invokevirtual #87
1332: ldc           #85
1334: invokevirtual #86
1337: invokevirtual #89
1340: aload         35
1342: getstatic     #128
1345: invokevirtual #90
1348: invokestatic  #91
1351: aload         36
1353: invokestatic  #20
1356: aload         36
1358: invokestatic  #92
1361: ldc           #140
1363: invokestatic  #23
1366: aload         36
1368: invokestatic  #93
1371: ldc           #140
1373: invokestatic  #23
1376: new           #83
1379: dup
1380: invokespecial #84
1383: ldc           #85
1385: invokevirtual #86
1388: aload         38
1390: invokevirtual #87
1393: ldc           #88
1395: invokevirtual #86
1398: getstatic     #328
1401: invokevirtual #87
1404: ldc           #85
1406: invokevirtual #86
1409: invokevirtual #89
1412: aload         38
1414: getstatic     #328
1417: invokevirtual #90
1420: invokestatic  #91
1423: new           #83
1426: dup
1427: invokespecial #84
1430: ldc           #85
1432: invokevirtual #86
1435: aload         39
1437: invokevirtual #87
1440: ldc           #88
1442: invokevirtual #86
1445: getstatic     #329
1448: invokevirtual #87
1451: ldc           #85
1453: invokevirtual #86
1456: invokevirtual #89
1459: aload         39
1461: getstatic     #329
1464: invokevirtual #90
1467: invokestatic  #91
1470: new           #83
1473: dup
1474: invokespecial #84
1477: ldc           #85
1479: invokevirtual #86
1482: aload         40
1484: invokevirtual #87
1487: ldc           #88
1489: invokevirtual #86
1492: getstatic     #330
1495: invokevirtual #87
1498: ldc           #85
1500: invokevirtual #86
1503: invokevirtual #89
1506: aload         40
1508: getstatic     #330
1511: invokevirtual #90
1514: invokestatic  #91
1517: new           #83
1520: dup
1521: invokespecial #84
1524: ldc           #85
1526: invokevirtual #86
1529: aload         41
1531: invokevirtual #87
1534: ldc           #88
1536: invokevirtual #86
1539: getstatic     #331
1542: invokevirtual #87
1545: ldc           #85
1547: invokevirtual #86
1550: invokevirtual #89
1553: aload         41
1555: getstatic     #331
1558: invokevirtual #90
1561: invokestatic  #91
1564: new           #83
1567: dup
1568: invokespecial #84
1571: ldc           #85
1573: invokevirtual #86
1576: aload         42
1578: invokevirtual #87
1581: ldc           #88
1583: invokevirtual #86
1586: getstatic     #332
1589: invokevirtual #87
1592: ldc           #85
1594: invokevirtual #86
1597: invokevirtual #89
1600: aload         42
1602: getstatic     #332
1605: invokevirtual #90
1608: invokestatic  #91
1611: aload         43
1613: invokestatic  #20
1616: aload         43
1618: invokestatic  #92
1621: ldc_w         #336
1624: invokestatic  #23
1627: aload         43
1629: invokestatic  #93
1632: ldc_w         #336
1635: invokestatic  #23
1638: aload         45
1640: invokestatic  #20
1643: aload         46
1645: invokestatic  #20
1648: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test320
Start line: 10065
End line: 10087
Method source code: 
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(52.0d, 52.0d, 35.0d);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) 100, (double) 100L);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray19 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser20 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray19);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #643
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: ldc2_w        #12
64: ldc2_w        #12
67: ldc2_w        #14
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: invokevirtual #59
81: aload_2
82: ldc2_w        #34
85: ldc2_w        #34
88: invokevirtual #43
91: aload_2
92: invokevirtual #25
95: astore_3
96: new           #69
99: dup
100: aload_3
101: invokespecial #70
104: astore        4
106: ldc           #64
108: invokestatic  #18
111: goto          116
114: astore        4
116: aload_3
117: invokestatic  #20
120: return
Exception table:
from    to  target type
96   111   114   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test321
Start line: 10090
End line: 10131
Method source code: 
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer11 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter12 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer11);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray13 = harmonicFitter12.getObservations();
        harmonicFitter12.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter12.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer16 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter17 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer16);
        harmonicFitter17.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter17.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter17.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray25 = harmonicFitter17.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint29 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double30 = weightedObservedPoint29.getX();
        double double31 = weightedObservedPoint29.getY();
        double double32 = weightedObservedPoint29.getX();
        double double33 = weightedObservedPoint29.getY();
        harmonicFitter17.addObservedPoint(weightedObservedPoint29);
        double double35 = weightedObservedPoint29.getWeight();
        harmonicFitter12.addObservedPoint(weightedObservedPoint29);
        harmonicFitter1.addObservedPoint(weightedObservedPoint29);
        java.lang.Class<?> wildcardClass38 = harmonicFitter1.getClass();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray13);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertNotNull(weightedObservedPointArray25);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #644
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: invokevirtual #25
66: astore        4
68: aconst_null
69: astore        5
71: new           #8
74: dup
75: aload         5
77: invokespecial #9
80: astore        6
82: aload         6
84: invokevirtual #25
87: astore        7
89: aload         6
91: invokevirtual #59
94: aload         6
96: invokevirtual #25
99: astore        8
101: aconst_null
102: astore        9
104: new           #8
107: dup
108: aload         9
110: invokespecial #9
113: astore        10
115: aload         10
117: dconst_1
118: ldc2_w        #32
121: invokevirtual #43
124: aload         10
126: dconst_0
127: ldc2_w        #34
130: invokevirtual #43
133: aload         10
135: invokevirtual #59
138: aload         10
140: invokevirtual #25
143: astore        11
145: new           #145
148: dup
149: ldc2_w        #14
152: ldc2_w        #12
155: ldc2_w        #12
158: invokespecial #146
161: astore        12
163: aload         12
165: invokevirtual #147
168: dstore        13
170: aload         12
172: invokevirtual #149
175: dstore        15
177: aload         12
179: invokevirtual #147
182: dstore        17
184: aload         12
186: invokevirtual #149
189: dstore        19
191: aload         10
193: aload         12
195: invokevirtual #123
198: aload         12
200: invokevirtual #148
203: dstore        21
205: aload         6
207: aload         12
209: invokevirtual #123
212: aload_2
213: aload         12
215: invokevirtual #123
218: aload_2
219: invokevirtual #98
222: astore        23
224: aload_3
225: invokestatic  #20
228: aload         4
230: invokestatic  #20
233: aload         7
235: invokestatic  #20
238: aload         8
240: invokestatic  #20
243: aload         11
245: invokestatic  #20
248: new           #83
251: dup
252: invokespecial #84
255: ldc           #85
257: invokevirtual #86
260: dload         13
262: invokevirtual #150
265: ldc           #88
267: invokevirtual #86
270: ldc2_w        #12
273: invokevirtual #150
276: ldc           #85
278: invokevirtual #86
281: invokevirtual #89
284: dload         13
286: ldc2_w        #12
289: dcmpl
290: ifne          297
293: iconst_1
294: goto          298
297: iconst_0
298: invokestatic  #91
301: new           #83
304: dup
305: invokespecial #84
308: ldc           #85
310: invokevirtual #86
313: dload         15
315: invokevirtual #150
318: ldc           #88
320: invokevirtual #86
323: ldc2_w        #12
326: invokevirtual #150
329: ldc           #85
331: invokevirtual #86
334: invokevirtual #89
337: dload         15
339: ldc2_w        #12
342: dcmpl
343: ifne          350
346: iconst_1
347: goto          351
350: iconst_0
351: invokestatic  #91
354: new           #83
357: dup
358: invokespecial #84
361: ldc           #85
363: invokevirtual #86
366: dload         17
368: invokevirtual #150
371: ldc           #88
373: invokevirtual #86
376: ldc2_w        #12
379: invokevirtual #150
382: ldc           #85
384: invokevirtual #86
387: invokevirtual #89
390: dload         17
392: ldc2_w        #12
395: dcmpl
396: ifne          403
399: iconst_1
400: goto          404
403: iconst_0
404: invokestatic  #91
407: new           #83
410: dup
411: invokespecial #84
414: ldc           #85
416: invokevirtual #86
419: dload         19
421: invokevirtual #150
424: ldc           #88
426: invokevirtual #86
429: ldc2_w        #12
432: invokevirtual #150
435: ldc           #85
437: invokevirtual #86
440: invokevirtual #89
443: dload         19
445: ldc2_w        #12
448: dcmpl
449: ifne          456
452: iconst_1
453: goto          457
456: iconst_0
457: invokestatic  #91
460: new           #83
463: dup
464: invokespecial #84
467: ldc           #85
469: invokevirtual #86
472: dload         21
474: invokevirtual #150
477: ldc           #88
479: invokevirtual #86
482: ldc2_w        #14
485: invokevirtual #150
488: ldc           #85
490: invokevirtual #86
493: invokevirtual #89
496: dload         21
498: ldc2_w        #14
501: dcmpl
502: ifne          509
505: iconst_1
506: goto          510
509: iconst_0
510: invokestatic  #91
513: aload         23
515: invokestatic  #20
518: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test322
Start line: 10134
End line: 10175
Method source code: 
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.addObservedPoint((double) (-1), (double) (byte) 1);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer17 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter18 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer17);
        harmonicFitter18.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter18.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray25 = harmonicFitter18.getObservations();
        harmonicFitter18.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint33 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double34 = weightedObservedPoint33.getWeight();
        double double35 = weightedObservedPoint33.getX();
        double double36 = weightedObservedPoint33.getX();
        double double37 = weightedObservedPoint33.getWeight();
        harmonicFitter18.addObservedPoint(weightedObservedPoint33);
        harmonicFitter1.addObservedPoint(weightedObservedPoint33);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric40 = null;
        double[] doubleArray44 = new double[] { (byte) 1, 100.0f, (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray45 = harmonicFitter1.fit(parametric40, doubleArray44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray25);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 35.0d + "'", double34 == 35.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #645
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload_2
78: ldc2_w        #10
81: dconst_1
82: invokevirtual #43
85: aconst_null
86: astore        5
88: new           #8
91: dup
92: aload         5
94: invokespecial #9
97: astore        6
99: aload         6
101: dconst_1
102: ldc2_w        #32
105: invokevirtual #43
108: aload         6
110: dconst_0
111: ldc2_w        #34
114: invokevirtual #43
117: aload         6
119: invokevirtual #25
122: astore        7
124: aload         6
126: dconst_0
127: dconst_1
128: ldc2_w        #34
131: invokevirtual #54
134: new           #145
137: dup
138: ldc2_w        #14
141: ldc2_w        #12
144: ldc2_w        #12
147: invokespecial #146
150: astore        8
152: aload         8
154: invokevirtual #148
157: dstore        9
159: aload         8
161: invokevirtual #147
164: dstore        11
166: aload         8
168: invokevirtual #147
171: dstore        13
173: aload         8
175: invokevirtual #148
178: dstore        15
180: aload         6
182: aload         8
184: invokevirtual #123
187: aload_2
188: aload         8
190: invokevirtual #123
193: aconst_null
194: astore        17
196: iconst_3
197: newarray       double
199: dup
200: iconst_0
201: dconst_1
202: dastore
203: dup
204: iconst_1
205: ldc2_w        #34
208: dastore
209: dup
210: iconst_2
211: ldc2_w        #32
214: dastore
215: astore        18
217: aload_2
218: aload         17
220: aload         18
222: invokevirtual #30
225: astore        19
227: ldc           #17
229: invokestatic  #18
232: goto          237
235: astore        19
237: aload_3
238: invokestatic  #20
241: aload         7
243: invokestatic  #20
246: new           #83
249: dup
250: invokespecial #84
253: ldc           #85
255: invokevirtual #86
258: dload         9
260: invokevirtual #150
263: ldc           #88
265: invokevirtual #86
268: ldc2_w        #14
271: invokevirtual #150
274: ldc           #85
276: invokevirtual #86
279: invokevirtual #89
282: dload         9
284: ldc2_w        #14
287: dcmpl
288: ifne          295
291: iconst_1
292: goto          296
295: iconst_0
296: invokestatic  #91
299: new           #83
302: dup
303: invokespecial #84
306: ldc           #85
308: invokevirtual #86
311: dload         11
313: invokevirtual #150
316: ldc           #88
318: invokevirtual #86
321: ldc2_w        #12
324: invokevirtual #150
327: ldc           #85
329: invokevirtual #86
332: invokevirtual #89
335: dload         11
337: ldc2_w        #12
340: dcmpl
341: ifne          348
344: iconst_1
345: goto          349
348: iconst_0
349: invokestatic  #91
352: new           #83
355: dup
356: invokespecial #84
359: ldc           #85
361: invokevirtual #86
364: dload         13
366: invokevirtual #150
369: ldc           #88
371: invokevirtual #86
374: ldc2_w        #12
377: invokevirtual #150
380: ldc           #85
382: invokevirtual #86
385: invokevirtual #89
388: dload         13
390: ldc2_w        #12
393: dcmpl
394: ifne          401
397: iconst_1
398: goto          402
401: iconst_0
402: invokestatic  #91
405: new           #83
408: dup
409: invokespecial #84
412: ldc           #85
414: invokevirtual #86
417: dload         15
419: invokevirtual #150
422: ldc           #88
424: invokevirtual #86
427: ldc2_w        #14
430: invokevirtual #150
433: ldc           #85
435: invokevirtual #86
438: invokevirtual #89
441: dload         15
443: ldc2_w        #14
446: dcmpl
447: ifne          454
450: iconst_1
451: goto          455
454: iconst_0
455: invokestatic  #91
458: aload         18
460: invokestatic  #20
463: aload         18
465: invokestatic  #21
468: ldc           #57
470: invokestatic  #23
473: return
Exception table:
from    to  target type
217   232   235   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test323
Start line: 10178
End line: 10195
Method source code: 
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        double double14 = weightedObservedPoint12.getX();
        double double15 = weightedObservedPoint12.getY();
        double double16 = weightedObservedPoint12.getX();
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #646
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload         4
79: invokevirtual #147
82: dstore        5
84: aload         4
86: invokevirtual #149
89: dstore        7
91: aload         4
93: invokevirtual #147
96: dstore        9
98: aload_3
99: invokestatic  #20
102: new           #83
105: dup
106: invokespecial #84
109: ldc           #85
111: invokevirtual #86
114: dload         5
116: invokevirtual #150
119: ldc           #88
121: invokevirtual #86
124: dconst_0
125: invokevirtual #150
128: ldc           #85
130: invokevirtual #86
133: invokevirtual #89
136: dload         5
138: dconst_0
139: dcmpl
140: ifne          147
143: iconst_1
144: goto          148
147: iconst_0
148: invokestatic  #91
151: new           #83
154: dup
155: invokespecial #84
158: ldc           #85
160: invokevirtual #86
163: dload         7
165: invokevirtual #150
168: ldc           #88
170: invokevirtual #86
173: ldc2_w        #34
176: invokevirtual #150
179: ldc           #85
181: invokevirtual #86
184: invokevirtual #89
187: dload         7
189: ldc2_w        #34
192: dcmpl
193: ifne          200
196: iconst_1
197: goto          201
200: iconst_0
201: invokestatic  #91
204: new           #83
207: dup
208: invokespecial #84
211: ldc           #85
213: invokevirtual #86
216: dload         9
218: invokevirtual #150
221: ldc           #88
223: invokevirtual #86
226: dconst_0
227: invokevirtual #150
230: ldc           #85
232: invokevirtual #86
235: invokevirtual #89
238: dload         9
240: dconst_0
241: dcmpl
242: ifne          249
245: iconst_1
246: goto          250
249: iconst_0
250: invokestatic  #91
253: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test324
Start line: 10198
End line: 10220
Method source code: 
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter1.addObservedPoint((double) '4', (double) (short) -1);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric18 = null;
        double[] doubleArray22 = new double[] { 1L, '4', 0 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray23 = harmonicFitter1.fit(0, parametric18, doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 52.0, 0.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #647
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: aload_2
74: ldc2_w        #12
77: ldc2_w        #10
80: invokevirtual #43
83: aconst_null
84: astore        4
86: iconst_3
87: newarray       double
89: dup
90: iconst_0
91: dconst_1
92: dastore
93: dup
94: iconst_1
95: ldc2_w        #12
98: dastore
99: dup
100: iconst_2
101: dconst_0
102: dastore
103: astore        5
105: aload_2
106: iconst_0
107: aload         4
109: aload         5
111: invokevirtual #40
114: astore        6
116: ldc           #17
118: invokestatic  #18
121: goto          126
124: astore        6
126: aload_3
127: invokestatic  #20
130: aload         5
132: invokestatic  #20
135: aload         5
137: invokestatic  #21
140: ldc_w         #648
143: invokestatic  #23
146: return
Exception table:
from    to  target type
105   121   124   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test325
Start line: 10223
End line: 10235
Method source code: 
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (-1), 10.0d);
        harmonicFitter1.clearObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #649
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: aload_2
62: ldc2_w        #10
65: ldc2_w        #32
68: invokevirtual #43
71: aload_2
72: invokevirtual #59
75: aload_3
76: invokestatic  #20
79: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test326
Start line: 10238
End line: 10259
Method source code: 
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) 0, 0.0d, (double) 100.0f);
        double[] doubleArray18 = new double[] { 35.0d, 1.0f, (-1), '4', 1.0f };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = harmonicFitter1.fit(doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[35.0, 1.0, -1.0, 52.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #650
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: ldc2_w        #34
49: ldc2_w        #10
52: ldc2_w        #10
55: invokevirtual #54
58: aload_2
59: invokevirtual #59
62: aload_2
63: dconst_0
64: dconst_0
65: ldc2_w        #34
68: invokevirtual #54
71: iconst_5
72: newarray       double
74: dup
75: iconst_0
76: ldc2_w        #14
79: dastore
80: dup
81: iconst_1
82: dconst_1
83: dastore
84: dup
85: iconst_2
86: ldc2_w        #10
89: dastore
90: dup
91: iconst_3
92: ldc2_w        #12
95: dastore
96: dup
97: iconst_4
98: dconst_1
99: dastore
100: astore        4
102: aload_2
103: aload         4
105: invokevirtual #16
108: astore        5
110: ldc           #17
112: invokestatic  #18
115: goto          120
118: astore        5
120: aload_3
121: invokestatic  #20
124: aload         4
126: invokestatic  #20
129: aload         4
131: invokestatic  #21
134: ldc_w         #651
137: invokestatic  #23
140: return
Exception table:
from    to  target type
102   115   118   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test327
Start line: 10262
End line: 10374
Method source code: 
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        java.lang.Number number1 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number1, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException6 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats4, objArray5);
        boolean boolean7 = numberIsTooSmallException3.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext8 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats10 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray12 = new java.lang.Object[] { localizedFormats10, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException13 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats9, objArray12);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray17 = new java.lang.Object[] { localizedFormats15, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException18 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats14, objArray17);
        mathIllegalArgumentException13.addSuppressed((java.lang.Throwable) mathIllegalArgumentException18);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext20 = mathIllegalArgumentException13.getContext();
        java.lang.Object obj22 = exceptionContext20.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer24 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter25 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer24);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray26 = harmonicFitter25.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter25.getObservations();
        exceptionContext20.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, (java.lang.Object[]) weightedObservedPointArray27);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer30 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter31 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer30);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray32 = harmonicFitter31.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException33 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats29, (java.lang.Object[]) weightedObservedPointArray32);
        exceptionContext8.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, (java.lang.Object[]) weightedObservedPointArray32);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats35 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats36 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats37 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats38 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray40 = new java.lang.Object[] { localizedFormats38, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException41 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats37, objArray40);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats42 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats43 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray45 = new java.lang.Object[] { localizedFormats43, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException46 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats42, objArray45);
        mathIllegalArgumentException41.addSuppressed((java.lang.Throwable) mathIllegalArgumentException46);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats48 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats49 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray51 = new java.lang.Object[] { localizedFormats49, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException52 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException46, (org.apache.commons.math3.exception.util.Localizable) localizedFormats48, objArray51);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException53 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats36, objArray51);
        java.lang.Object[] objArray54 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray51);
        org.apache.commons.math3.exception.ZeroException zeroException55 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats35, objArray54);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats56 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException60 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray61 = numberIsTooSmallException60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = numberIsTooSmallException60.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException63 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) zeroException55, (org.apache.commons.math3.exception.util.Localizable) localizedFormats56, (java.lang.Object[]) throwableArray62);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException64 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, (java.lang.Object[]) throwableArray62);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats65 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_SCALE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException69 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats65, (java.lang.Number) (byte) 100, (java.lang.Number) 0, false);
        java.lang.Throwable[] throwableArray70 = numberIsTooSmallException69.getSuppressed();
        java.lang.Object[] objArray71 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) throwableArray70);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException72 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, (java.lang.Object[]) throwableArray70);
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats10 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats10.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray26);
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray32);
        org.junit.Assert.assertTrue("'" + localizedFormats35 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats35.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats36 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats36.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats37 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats37.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats38 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats38.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats42 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats42.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats43 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats43.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats48 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats48.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats49 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats49.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats56 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES + "'", localizedFormats56.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES));
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertTrue("'" + localizedFormats65 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_SCALE + "'", localizedFormats65.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_SCALE));
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #652
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #28
30: dup
31: bipush        100
33: invokestatic  #159
36: aload_1
37: iconst_0
38: invokespecial #160
41: astore_2
42: getstatic     #161
45: astore_3
46: iconst_0
47: anewarray     #5
50: astore        4
52: new           #136
55: dup
56: aload_2
57: aload_3
58: aload         4
60: invokespecial #137
63: astore        5
65: aload_2
66: invokevirtual #162
69: istore        6
71: new           #163
74: dup
75: aload_2
76: invokespecial #164
79: astore        7
81: getstatic     #127
84: astore        8
86: getstatic     #128
89: astore        9
91: iconst_2
92: anewarray     #5
95: dup
96: iconst_0
97: aload         9
99: aastore
100: dup
101: iconst_1
102: lconst_1
103: invokestatic  #129
106: aastore
107: astore        10
109: new           #130
112: dup
113: aload         8
115: aload         10
117: invokespecial #131
120: astore        11
122: getstatic     #127
125: astore        12
127: getstatic     #128
130: astore        13
132: iconst_2
133: anewarray     #5
136: dup
137: iconst_0
138: aload         13
140: aastore
141: dup
142: iconst_1
143: lconst_1
144: invokestatic  #129
147: aastore
148: astore        14
150: new           #130
153: dup
154: aload         12
156: aload         14
158: invokespecial #131
161: astore        15
163: aload         11
165: aload         15
167: invokevirtual #132
170: aload         11
172: invokevirtual #165
175: astore        16
177: aload         16
179: ldc           #166
181: invokevirtual #167
184: astore        17
186: getstatic     #168
189: astore        18
191: aconst_null
192: astore        19
194: new           #8
197: dup
198: aload         19
200: invokespecial #9
203: astore        20
205: aload         20
207: invokevirtual #25
210: astore        21
212: aload         20
214: invokevirtual #25
217: astore        22
219: aload         16
221: aload         18
223: aload         22
225: checkcast     #79
228: invokevirtual #169
231: getstatic     #156
234: astore        23
236: aconst_null
237: astore        24
239: new           #8
242: dup
243: aload         24
245: invokespecial #9
248: astore        25
250: aload         25
252: invokevirtual #25
255: astore        26
257: new           #81
260: dup
261: aload         23
263: aload         26
265: checkcast     #79
268: invokespecial #82
271: astore        27
273: aload         7
275: aload         18
277: aload         26
279: checkcast     #79
282: invokevirtual #169
285: getstatic     #125
288: astore        28
290: getstatic     #126
293: astore        29
295: getstatic     #127
298: astore        30
300: getstatic     #128
303: astore        31
305: iconst_2
306: anewarray     #5
309: dup
310: iconst_0
311: aload         31
313: aastore
314: dup
315: iconst_1
316: lconst_1
317: invokestatic  #129
320: aastore
321: astore        32
323: new           #130
326: dup
327: aload         30
329: aload         32
331: invokespecial #131
334: astore        33
336: getstatic     #127
339: astore        34
341: getstatic     #128
344: astore        35
346: iconst_2
347: anewarray     #5
350: dup
351: iconst_0
352: aload         35
354: aastore
355: dup
356: iconst_1
357: lconst_1
358: invokestatic  #129
361: aastore
362: astore        36
364: new           #130
367: dup
368: aload         34
370: aload         36
372: invokespecial #131
375: astore        37
377: aload         33
379: aload         37
381: invokevirtual #132
384: getstatic     #133
387: astore        38
389: getstatic     #134
392: astore        39
394: iconst_2
395: anewarray     #5
398: dup
399: iconst_0
400: aload         39
402: aastore
403: dup
404: iconst_1
405: bipush        10
407: invokestatic  #135
410: aastore
411: astore        40
413: new           #136
416: dup
417: aload         37
419: aload         38
421: aload         40
423: invokespecial #137
426: astore        41
428: new           #136
431: dup
432: aload         29
434: aload         40
436: invokespecial #138
439: astore        42
441: aload         40
443: invokestatic  #80
446: astore        43
448: new           #81
451: dup
452: aload         28
454: aload         43
456: invokespecial #82
459: astore        44
461: getstatic     #363
464: astore        45
466: new           #28
469: dup
470: ldc2_w        #277
473: invokestatic  #129
476: bipush        10
478: invokestatic  #159
481: iconst_1
482: invokespecial #160
485: astore        46
487: aload         46
489: invokevirtual #334
492: astore        47
494: aload         46
496: invokevirtual #334
499: astore        48
501: new           #136
504: dup
505: aload         44
507: aload         45
509: aload         48
511: checkcast     #79
514: invokespecial #137
517: astore        49
519: new           #130
522: dup
523: aload         18
525: aload         48
527: checkcast     #79
530: invokespecial #131
533: astore        50
535: getstatic     #653
538: astore        51
540: new           #28
543: dup
544: aload         51
546: bipush        100
548: invokestatic  #159
551: iconst_0
552: invokestatic  #135
555: iconst_0
556: invokespecial #195
559: astore        52
561: aload         52
563: invokevirtual #334
566: astore        53
568: aload         53
570: checkcast     #79
573: invokestatic  #80
576: astore        54
578: new           #136
581: dup
582: aload         18
584: aload         53
586: checkcast     #79
589: invokespecial #138
592: astore        55
594: new           #83
597: dup
598: invokespecial #84
601: ldc           #85
603: invokevirtual #86
606: aload_3
607: invokevirtual #87
610: ldc           #88
612: invokevirtual #86
615: getstatic     #161
618: invokevirtual #87
621: ldc           #85
623: invokevirtual #86
626: invokevirtual #89
629: aload_3
630: getstatic     #161
633: invokevirtual #90
636: invokestatic  #91
639: aload         4
641: invokestatic  #20
644: aload         4
646: invokestatic  #92
649: ldc           #74
651: invokestatic  #23
654: aload         4
656: invokestatic  #93
659: ldc           #74
661: invokestatic  #23
664: new           #83
667: dup
668: invokespecial #84
671: ldc           #85
673: invokevirtual #86
676: iload         6
678: invokevirtual #170
681: ldc           #88
683: invokevirtual #86
686: iconst_0
687: invokevirtual #170
690: ldc           #85
692: invokevirtual #86
695: invokevirtual #89
698: iload         6
700: ifne          707
703: iconst_1
704: goto          708
707: iconst_0
708: invokestatic  #91
711: new           #83
714: dup
715: invokespecial #84
718: ldc           #85
720: invokevirtual #86
723: aload         8
725: invokevirtual #87
728: ldc           #88
730: invokevirtual #86
733: getstatic     #127
736: invokevirtual #87
739: ldc           #85
741: invokevirtual #86
744: invokevirtual #89
747: aload         8
749: getstatic     #127
752: invokevirtual #90
755: invokestatic  #91
758: new           #83
761: dup
762: invokespecial #84
765: ldc           #85
767: invokevirtual #86
770: aload         9
772: invokevirtual #87
775: ldc           #88
777: invokevirtual #86
780: getstatic     #128
783: invokevirtual #87
786: ldc           #85
788: invokevirtual #86
791: invokevirtual #89
794: aload         9
796: getstatic     #128
799: invokevirtual #90
802: invokestatic  #91
805: aload         10
807: invokestatic  #20
810: aload         10
812: invokestatic  #92
815: ldc           #140
817: invokestatic  #23
820: aload         10
822: invokestatic  #93
825: ldc           #140
827: invokestatic  #23
830: new           #83
833: dup
834: invokespecial #84
837: ldc           #85
839: invokevirtual #86
842: aload         12
844: invokevirtual #87
847: ldc           #88
849: invokevirtual #86
852: getstatic     #127
855: invokevirtual #87
858: ldc           #85
860: invokevirtual #86
863: invokevirtual #89
866: aload         12
868: getstatic     #127
871: invokevirtual #90
874: invokestatic  #91
877: new           #83
880: dup
881: invokespecial #84
884: ldc           #85
886: invokevirtual #86
889: aload         13
891: invokevirtual #87
894: ldc           #88
896: invokevirtual #86
899: getstatic     #128
902: invokevirtual #87
905: ldc           #85
907: invokevirtual #86
910: invokevirtual #89
913: aload         13
915: getstatic     #128
918: invokevirtual #90
921: invokestatic  #91
924: aload         14
926: invokestatic  #20
929: aload         14
931: invokestatic  #92
934: ldc           #140
936: invokestatic  #23
939: aload         14
941: invokestatic  #93
944: ldc           #140
946: invokestatic  #23
949: aload         16
951: invokestatic  #20
954: aload         17
956: invokestatic  #171
959: new           #83
962: dup
963: invokespecial #84
966: ldc           #85
968: invokevirtual #86
971: aload         18
973: invokevirtual #87
976: ldc           #88
978: invokevirtual #86
981: getstatic     #168
984: invokevirtual #87
987: ldc           #85
989: invokevirtual #86
992: invokevirtual #89
995: aload         18
997: getstatic     #168
1000: invokevirtual #90
1003: invokestatic  #91
1006: aload         21
1008: invokestatic  #20
1011: aload         22
1013: invokestatic  #20
1016: new           #83
1019: dup
1020: invokespecial #84
1023: ldc           #85
1025: invokevirtual #86
1028: aload         23
1030: invokevirtual #87
1033: ldc           #88
1035: invokevirtual #86
1038: getstatic     #156
1041: invokevirtual #87
1044: ldc           #85
1046: invokevirtual #86
1049: invokevirtual #89
1052: aload         23
1054: getstatic     #156
1057: invokevirtual #90
1060: invokestatic  #91
1063: aload         26
1065: invokestatic  #20
1068: new           #83
1071: dup
1072: invokespecial #84
1075: ldc           #85
1077: invokevirtual #86
1080: aload         28
1082: invokevirtual #87
1085: ldc           #88
1087: invokevirtual #86
1090: getstatic     #125
1093: invokevirtual #87
1096: ldc           #85
1098: invokevirtual #86
1101: invokevirtual #89
1104: aload         28
1106: getstatic     #125
1109: invokevirtual #90
1112: invokestatic  #91
1115: new           #83
1118: dup
1119: invokespecial #84
1122: ldc           #85
1124: invokevirtual #86
1127: aload         29
1129: invokevirtual #87
1132: ldc           #88
1134: invokevirtual #86
1137: getstatic     #126
1140: invokevirtual #87
1143: ldc           #85
1145: invokevirtual #86
1148: invokevirtual #89
1151: aload         29
1153: getstatic     #126
1156: invokevirtual #90
1159: invokestatic  #91
1162: new           #83
1165: dup
1166: invokespecial #84
1169: ldc           #85
1171: invokevirtual #86
1174: aload         30
1176: invokevirtual #87
1179: ldc           #88
1181: invokevirtual #86
1184: getstatic     #127
1187: invokevirtual #87
1190: ldc           #85
1192: invokevirtual #86
1195: invokevirtual #89
1198: aload         30
1200: getstatic     #127
1203: invokevirtual #90
1206: invokestatic  #91
1209: new           #83
1212: dup
1213: invokespecial #84
1216: ldc           #85
1218: invokevirtual #86
1221: aload         31
1223: invokevirtual #87
1226: ldc           #88
1228: invokevirtual #86
1231: getstatic     #128
1234: invokevirtual #87
1237: ldc           #85
1239: invokevirtual #86
1242: invokevirtual #89
1245: aload         31
1247: getstatic     #128
1250: invokevirtual #90
1253: invokestatic  #91
1256: aload         32
1258: invokestatic  #20
1261: aload         32
1263: invokestatic  #92
1266: ldc           #140
1268: invokestatic  #23
1271: aload         32
1273: invokestatic  #93
1276: ldc           #140
1278: invokestatic  #23
1281: new           #83
1284: dup
1285: invokespecial #84
1288: ldc           #85
1290: invokevirtual #86
1293: aload         34
1295: invokevirtual #87
1298: ldc           #88
1300: invokevirtual #86
1303: getstatic     #127
1306: invokevirtual #87
1309: ldc           #85
1311: invokevirtual #86
1314: invokevirtual #89
1317: aload         34
1319: getstatic     #127
1322: invokevirtual #90
1325: invokestatic  #91
1328: new           #83
1331: dup
1332: invokespecial #84
1335: ldc           #85
1337: invokevirtual #86
1340: aload         35
1342: invokevirtual #87
1345: ldc           #88
1347: invokevirtual #86
1350: getstatic     #128
1353: invokevirtual #87
1356: ldc           #85
1358: invokevirtual #86
1361: invokevirtual #89
1364: aload         35
1366: getstatic     #128
1369: invokevirtual #90
1372: invokestatic  #91
1375: aload         36
1377: invokestatic  #20
1380: aload         36
1382: invokestatic  #92
1385: ldc           #140
1387: invokestatic  #23
1390: aload         36
1392: invokestatic  #93
1395: ldc           #140
1397: invokestatic  #23
1400: new           #83
1403: dup
1404: invokespecial #84
1407: ldc           #85
1409: invokevirtual #86
1412: aload         38
1414: invokevirtual #87
1417: ldc           #88
1419: invokevirtual #86
1422: getstatic     #133
1425: invokevirtual #87
1428: ldc           #85
1430: invokevirtual #86
1433: invokevirtual #89
1436: aload         38
1438: getstatic     #133
1441: invokevirtual #90
1444: invokestatic  #91
1447: new           #83
1450: dup
1451: invokespecial #84
1454: ldc           #85
1456: invokevirtual #86
1459: aload         39
1461: invokevirtual #87
1464: ldc           #88
1466: invokevirtual #86
1469: getstatic     #134
1472: invokevirtual #87
1475: ldc           #85
1477: invokevirtual #86
1480: invokevirtual #89
1483: aload         39
1485: getstatic     #134
1488: invokevirtual #90
1491: invokestatic  #91
1494: aload         40
1496: invokestatic  #20
1499: aload         40
1501: invokestatic  #92
1504: ldc           #141
1506: invokestatic  #23
1509: aload         40
1511: invokestatic  #93
1514: ldc           #141
1516: invokestatic  #23
1519: aload         43
1521: invokestatic  #20
1524: aload         43
1526: invokestatic  #92
1529: ldc           #141
1531: invokestatic  #23
1534: aload         43
1536: invokestatic  #93
1539: ldc           #141
1541: invokestatic  #23
1544: new           #83
1547: dup
1548: invokespecial #84
1551: ldc           #85
1553: invokevirtual #86
1556: aload         45
1558: invokevirtual #87
1561: ldc           #88
1563: invokevirtual #86
1566: getstatic     #363
1569: invokevirtual #87
1572: ldc           #85
1574: invokevirtual #86
1577: invokevirtual #89
1580: aload         45
1582: getstatic     #363
1585: invokevirtual #90
1588: invokestatic  #91
1591: aload         47
1593: invokestatic  #20
1596: aload         48
1598: invokestatic  #20
1601: new           #83
1604: dup
1605: invokespecial #84
1608: ldc           #85
1610: invokevirtual #86
1613: aload         51
1615: invokevirtual #87
1618: ldc           #88
1620: invokevirtual #86
1623: getstatic     #653
1626: invokevirtual #87
1629: ldc           #85
1631: invokevirtual #86
1634: invokevirtual #89
1637: aload         51
1639: getstatic     #653
1642: invokevirtual #90
1645: invokestatic  #91
1648: aload         53
1650: invokestatic  #20
1653: aload         54
1655: invokestatic  #20
1658: aload         54
1660: invokestatic  #92
1663: ldc           #74
1665: invokestatic  #23
1668: aload         54
1670: invokestatic  #93
1673: ldc           #74
1675: invokestatic  #23
1678: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test328
Start line: 10377
End line: 10438
Method source code: 
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        java.lang.Number number1 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number1, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException6 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats4, objArray5);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext7 = mathIllegalStateException6.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.START_POSITION;
        java.lang.String str9 = localizedFormats8.getSourceString();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats10 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats11 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray13 = new java.lang.Object[] { localizedFormats11, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException14 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats10, objArray13);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray18 = new java.lang.Object[] { localizedFormats16, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException19 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats15, objArray18);
        mathIllegalArgumentException14.addSuppressed((java.lang.Throwable) mathIllegalArgumentException19);
        java.lang.Number number21 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException24 = new org.apache.commons.math3.exception.NumberIsTooSmallException(number21, (java.lang.Number) (byte) 0, true);
        java.lang.Number number25 = numberIsTooSmallException24.getMin();
        boolean boolean26 = numberIsTooSmallException24.getBoundIsAllowed();
        mathIllegalArgumentException19.addSuppressed((java.lang.Throwable) numberIsTooSmallException24);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext28 = numberIsTooSmallException24.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer31 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter32 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer31);
        harmonicFitter32.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter32.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray39 = harmonicFitter32.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray40 = harmonicFitter32.getObservations();
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException41 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats30, (java.lang.Object[]) weightedObservedPointArray40);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException42 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException24, (org.apache.commons.math3.exception.util.Localizable) localizedFormats29, (java.lang.Object[]) weightedObservedPointArray40);
        exceptionContext7.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats8, (java.lang.Object[]) weightedObservedPointArray40);
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(exceptionContext7);
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.START_POSITION + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.START_POSITION));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "start position ({0})" + "'", str9, "start position ({0})");
        org.junit.Assert.assertTrue("'" + localizedFormats10 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats10.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats11 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats11.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals("'" + number25 + "' != '" + (byte) 0 + "'", number25, (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(exceptionContext28);
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX));
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray39);
        org.junit.Assert.assertNotNull(weightedObservedPointArray40);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #654
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #28
30: dup
31: bipush        100
33: invokestatic  #159
36: aload_1
37: iconst_0
38: invokespecial #160
41: astore_2
42: getstatic     #161
45: astore_3
46: iconst_0
47: anewarray     #5
50: astore        4
52: new           #136
55: dup
56: aload_2
57: aload_3
58: aload         4
60: invokespecial #137
63: astore        5
65: aload         5
67: invokevirtual #282
70: astore        6
72: getstatic     #655
75: astore        7
77: aload         7
79: invokevirtual #301
82: astore        8
84: getstatic     #127
87: astore        9
89: getstatic     #128
92: astore        10
94: iconst_2
95: anewarray     #5
98: dup
99: iconst_0
100: aload         10
102: aastore
103: dup
104: iconst_1
105: lconst_1
106: invokestatic  #129
109: aastore
110: astore        11
112: new           #130
115: dup
116: aload         9
118: aload         11
120: invokespecial #131
123: astore        12
125: getstatic     #127
128: astore        13
130: getstatic     #128
133: astore        14
135: iconst_2
136: anewarray     #5
139: dup
140: iconst_0
141: aload         14
143: aastore
144: dup
145: iconst_1
146: lconst_1
147: invokestatic  #129
150: aastore
151: astore        15
153: new           #130
156: dup
157: aload         13
159: aload         15
161: invokespecial #131
164: astore        16
166: aload         12
168: aload         16
170: invokevirtual #132
173: aconst_null
174: astore        17
176: new           #28
179: dup
180: aload         17
182: iconst_0
183: invokestatic  #159
186: iconst_1
187: invokespecial #160
190: astore        18
192: aload         18
194: invokevirtual #572
197: astore        19
199: aload         18
201: invokevirtual #162
204: istore        20
206: aload         16
208: aload         18
210: invokevirtual #132
213: aload         18
215: invokevirtual #656
218: astore        21
220: getstatic     #657
223: astore        22
225: getstatic     #193
228: astore        23
230: aconst_null
231: astore        24
233: new           #8
236: dup
237: aload         24
239: invokespecial #9
242: astore        25
244: aload         25
246: dconst_1
247: ldc2_w        #32
250: invokevirtual #43
253: aload         25
255: dconst_0
256: ldc2_w        #34
259: invokevirtual #43
262: aload         25
264: invokevirtual #25
267: astore        26
269: aload         25
271: invokevirtual #25
274: astore        27
276: new           #130
279: dup
280: aload         23
282: aload         27
284: checkcast     #79
287: invokespecial #131
290: astore        28
292: new           #136
295: dup
296: aload         18
298: aload         22
300: aload         27
302: checkcast     #79
305: invokespecial #137
308: astore        29
310: aload         6
312: aload         7
314: aload         27
316: checkcast     #79
319: invokevirtual #169
322: new           #83
325: dup
326: invokespecial #84
329: ldc           #85
331: invokevirtual #86
334: aload_3
335: invokevirtual #87
338: ldc           #88
340: invokevirtual #86
343: getstatic     #161
346: invokevirtual #87
349: ldc           #85
351: invokevirtual #86
354: invokevirtual #89
357: aload_3
358: getstatic     #161
361: invokevirtual #90
364: invokestatic  #91
367: aload         4
369: invokestatic  #20
372: aload         4
374: invokestatic  #92
377: ldc           #74
379: invokestatic  #23
382: aload         4
384: invokestatic  #93
387: ldc           #74
389: invokestatic  #23
392: aload         6
394: invokestatic  #20
397: new           #83
400: dup
401: invokespecial #84
404: ldc           #85
406: invokevirtual #86
409: aload         7
411: invokevirtual #87
414: ldc           #88
416: invokevirtual #86
419: getstatic     #655
422: invokevirtual #87
425: ldc           #85
427: invokevirtual #86
430: invokevirtual #89
433: aload         7
435: getstatic     #655
438: invokevirtual #90
441: invokestatic  #91
444: new           #83
447: dup
448: invokespecial #84
451: ldc           #85
453: invokevirtual #86
456: aload         8
458: invokevirtual #86
461: ldc_w         #658
464: invokevirtual #86
467: invokevirtual #89
470: aload         8
472: ldc_w         #520
475: invokestatic  #245
478: new           #83
481: dup
482: invokespecial #84
485: ldc           #85
487: invokevirtual #86
490: aload         9
492: invokevirtual #87
495: ldc           #88
497: invokevirtual #86
500: getstatic     #127
503: invokevirtual #87
506: ldc           #85
508: invokevirtual #86
511: invokevirtual #89
514: aload         9
516: getstatic     #127
519: invokevirtual #90
522: invokestatic  #91
525: new           #83
528: dup
529: invokespecial #84
532: ldc           #85
534: invokevirtual #86
537: aload         10
539: invokevirtual #87
542: ldc           #88
544: invokevirtual #86
547: getstatic     #128
550: invokevirtual #87
553: ldc           #85
555: invokevirtual #86
558: invokevirtual #89
561: aload         10
563: getstatic     #128
566: invokevirtual #90
569: invokestatic  #91
572: aload         11
574: invokestatic  #20
577: aload         11
579: invokestatic  #92
582: ldc           #140
584: invokestatic  #23
587: aload         11
589: invokestatic  #93
592: ldc           #140
594: invokestatic  #23
597: new           #83
600: dup
601: invokespecial #84
604: ldc           #85
606: invokevirtual #86
609: aload         13
611: invokevirtual #87
614: ldc           #88
616: invokevirtual #86
619: getstatic     #127
622: invokevirtual #87
625: ldc           #85
627: invokevirtual #86
630: invokevirtual #89
633: aload         13
635: getstatic     #127
638: invokevirtual #90
641: invokestatic  #91
644: new           #83
647: dup
648: invokespecial #84
651: ldc           #85
653: invokevirtual #86
656: aload         14
658: invokevirtual #87
661: ldc           #88
663: invokevirtual #86
666: getstatic     #128
669: invokevirtual #87
672: ldc           #85
674: invokevirtual #86
677: invokevirtual #89
680: aload         14
682: getstatic     #128
685: invokevirtual #90
688: invokestatic  #91
691: aload         15
693: invokestatic  #20
696: aload         15
698: invokestatic  #92
701: ldc           #140
703: invokestatic  #23
706: aload         15
708: invokestatic  #93
711: ldc           #140
713: invokestatic  #23
716: new           #83
719: dup
720: invokespecial #84
723: ldc           #85
725: invokevirtual #86
728: aload         19
730: invokevirtual #87
733: ldc           #88
735: invokevirtual #86
738: iconst_0
739: invokevirtual #244
742: ldc           #85
744: invokevirtual #86
747: invokevirtual #89
750: aload         19
752: iconst_0
753: invokestatic  #159
756: invokestatic  #245
759: new           #83
762: dup
763: invokespecial #84
766: ldc           #85
768: invokevirtual #86
771: iload         20
773: invokevirtual #170
776: ldc           #88
778: invokevirtual #86
781: iconst_1
782: invokevirtual #170
785: ldc           #85
787: invokevirtual #86
790: invokevirtual #89
793: iload         20
795: iconst_1
796: if_icmpne     803
799: iconst_1
800: goto          804
803: iconst_0
804: invokestatic  #91
807: aload         21
809: invokestatic  #20
812: new           #83
815: dup
816: invokespecial #84
819: ldc           #85
821: invokevirtual #86
824: aload         22
826: invokevirtual #87
829: ldc           #88
831: invokevirtual #86
834: getstatic     #657
837: invokevirtual #87
840: ldc           #85
842: invokevirtual #86
845: invokevirtual #89
848: aload         22
850: getstatic     #657
853: invokevirtual #90
856: invokestatic  #91
859: new           #83
862: dup
863: invokespecial #84
866: ldc           #85
868: invokevirtual #86
871: aload         23
873: invokevirtual #87
876: ldc           #88
878: invokevirtual #86
881: getstatic     #193
884: invokevirtual #87
887: ldc           #85
889: invokevirtual #86
892: invokevirtual #89
895: aload         23
897: getstatic     #193
900: invokevirtual #90
903: invokestatic  #91
906: aload         26
908: invokestatic  #20
911: aload         27
913: invokestatic  #20
916: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test329
Start line: 10441
End line: 10453
Method source code: 
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(0.0d, (double) (-1.0f));
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #659
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: invokevirtual #25
66: astore        4
68: aload_2
69: dconst_0
70: ldc2_w        #10
73: invokevirtual #43
76: aload_3
77: invokestatic  #20
80: aload         4
82: invokestatic  #20
85: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test330
Start line: 10456
End line: 10479
Method source code: 
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) 0, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint((double) 10, 35.0d);
        harmonicFitter1.addObservedPoint(0.0d, (double) 10L);
        double[] doubleArray21 = new double[] { ' ', 0L };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = harmonicFitter1.fit(doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[32.0, 0.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #660
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: ldc2_w        #34
49: ldc2_w        #10
52: ldc2_w        #10
55: invokevirtual #54
58: aload_2
59: invokevirtual #59
62: aload_2
63: dconst_0
64: dconst_0
65: ldc2_w        #34
68: invokevirtual #54
71: aload_2
72: ldc2_w        #32
75: ldc2_w        #14
78: invokevirtual #43
81: aload_2
82: dconst_0
83: ldc2_w        #32
86: invokevirtual #43
89: iconst_2
90: newarray       double
92: dup
93: iconst_0
94: ldc2_w        #38
97: dastore
98: dup
99: iconst_1
100: dconst_0
101: dastore
102: astore        4
104: aload_2
105: aload         4
107: invokevirtual #16
110: astore        5
112: ldc           #17
114: invokestatic  #18
117: goto          122
120: astore        5
122: aload_3
123: invokestatic  #20
126: aload         4
128: invokestatic  #20
131: aload         4
133: invokestatic  #21
136: ldc_w         #661
139: invokestatic  #23
142: return
Exception table:
from    to  target type
104   117   120   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test331
Start line: 10482
End line: 10493
Method source code: 
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #662
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: ldc2_w        #34
49: ldc2_w        #10
52: ldc2_w        #10
55: invokevirtual #54
58: aload_2
59: invokevirtual #59
62: aload_2
63: invokevirtual #59
66: aload_3
67: invokestatic  #20
70: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test332
Start line: 10496
End line: 10520
Method source code: 
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.addObservedPoint((double) 0, (double) (short) 100, (double) (short) 0);
        harmonicFitter1.addObservedPoint(10.0d, (-1.0d), 1.0d);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) 100.0f, (double) (byte) 1);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #663
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: dconst_0
105: ldc2_w        #34
108: dconst_0
109: invokevirtual #54
112: aload_2
113: ldc2_w        #32
116: ldc2_w        #10
119: dconst_1
120: invokevirtual #54
123: aload_2
124: invokevirtual #59
127: aload_2
128: ldc2_w        #34
131: dconst_1
132: invokevirtual #43
135: aload_3
136: invokestatic  #20
139: aload         4
141: invokestatic  #20
144: new           #83
147: dup
148: invokespecial #84
151: ldc           #85
153: invokevirtual #86
156: dload         6
158: invokevirtual #150
161: ldc           #88
163: invokevirtual #86
166: ldc2_w        #12
169: invokevirtual #150
172: ldc           #85
174: invokevirtual #86
177: invokevirtual #89
180: dload         6
182: ldc2_w        #12
185: dcmpl
186: ifne          193
189: iconst_1
190: goto          194
193: iconst_0
194: invokestatic  #91
197: new           #83
200: dup
201: invokespecial #84
204: ldc           #85
206: invokevirtual #86
209: dload         8
211: invokevirtual #150
214: ldc           #88
216: invokevirtual #86
219: ldc2_w        #14
222: invokevirtual #150
225: ldc           #85
227: invokevirtual #86
230: invokevirtual #89
233: dload         8
235: ldc2_w        #14
238: dcmpl
239: ifne          246
242: iconst_1
243: goto          247
246: iconst_0
247: invokestatic  #91
250: new           #83
253: dup
254: invokespecial #84
257: ldc           #85
259: invokevirtual #86
262: dload         10
264: invokevirtual #150
267: ldc           #88
269: invokevirtual #86
272: ldc2_w        #14
275: invokevirtual #150
278: ldc           #85
280: invokevirtual #86
283: invokevirtual #89
286: dload         10
288: ldc2_w        #14
291: dcmpl
292: ifne          299
295: iconst_1
296: goto          300
299: iconst_0
300: invokestatic  #91
303: new           #83
306: dup
307: invokespecial #84
310: ldc           #85
312: invokevirtual #86
315: dload         12
317: invokevirtual #150
320: ldc           #88
322: invokevirtual #86
325: ldc2_w        #12
328: invokevirtual #150
331: ldc           #85
333: invokevirtual #86
336: invokevirtual #89
339: dload         12
341: ldc2_w        #12
344: dcmpl
345: ifne          352
348: iconst_1
349: goto          353
352: iconst_0
353: invokestatic  #91
356: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test333
Start line: 10523
End line: 10584
Method source code: 
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats3 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray5 = new java.lang.Object[] { localizedFormats3, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats2, objArray5);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray10 = new java.lang.Object[] { localizedFormats8, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats7, objArray10);
        mathIllegalArgumentException6.addSuppressed((java.lang.Throwable) mathIllegalArgumentException11);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray16 = new java.lang.Object[] { localizedFormats14, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException17 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException11, (org.apache.commons.math3.exception.util.Localizable) localizedFormats13, objArray16);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException18 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, objArray16);
        java.lang.Object[] objArray19 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray16);
        org.apache.commons.math3.exception.ZeroException zeroException20 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray19);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer22 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter23 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer22);
        harmonicFitter23.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter23.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter23.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray31 = harmonicFitter23.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException32 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) zeroException20, (org.apache.commons.math3.exception.util.Localizable) localizedFormats21, (java.lang.Object[]) weightedObservedPointArray31);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats33 = org.apache.commons.math3.exception.util.LocalizedFormats.NORMALIZE_INFINITE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException37 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats33, (java.lang.Number) 100, (java.lang.Number) 52.0d, false);
        org.apache.commons.math3.exception.ZeroException zeroException38 = new org.apache.commons.math3.exception.ZeroException();
        numberIsTooSmallException37.addSuppressed((java.lang.Throwable) zeroException38);
        mathIllegalStateException32.addSuppressed((java.lang.Throwable) numberIsTooSmallException37);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext41 = mathIllegalStateException32.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext42 = mathIllegalStateException32.getContext();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats3 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats3.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATION + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray31);
        org.junit.Assert.assertTrue("'" + localizedFormats33 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NORMALIZE_INFINITE + "'", localizedFormats33.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NORMALIZE_INFINITE));
        org.junit.Assert.assertNotNull(exceptionContext41);
        org.junit.Assert.assertNotNull(exceptionContext42);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #664
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #125
28: astore_1
29: getstatic     #126
32: astore_2
33: getstatic     #127
36: astore_3
37: getstatic     #128
40: astore        4
42: iconst_2
43: anewarray     #5
46: dup
47: iconst_0
48: aload         4
50: aastore
51: dup
52: iconst_1
53: lconst_1
54: invokestatic  #129
57: aastore
58: astore        5
60: new           #130
63: dup
64: aload_3
65: aload         5
67: invokespecial #131
70: astore        6
72: getstatic     #127
75: astore        7
77: getstatic     #128
80: astore        8
82: iconst_2
83: anewarray     #5
86: dup
87: iconst_0
88: aload         8
90: aastore
91: dup
92: iconst_1
93: lconst_1
94: invokestatic  #129
97: aastore
98: astore        9
100: new           #130
103: dup
104: aload         7
106: aload         9
108: invokespecial #131
111: astore        10
113: aload         6
115: aload         10
117: invokevirtual #132
120: getstatic     #133
123: astore        11
125: getstatic     #134
128: astore        12
130: iconst_2
131: anewarray     #5
134: dup
135: iconst_0
136: aload         12
138: aastore
139: dup
140: iconst_1
141: bipush        10
143: invokestatic  #135
146: aastore
147: astore        13
149: new           #136
152: dup
153: aload         10
155: aload         11
157: aload         13
159: invokespecial #137
162: astore        14
164: new           #136
167: dup
168: aload_2
169: aload         13
171: invokespecial #138
174: astore        15
176: aload         13
178: invokestatic  #80
181: astore        16
183: new           #81
186: dup
187: aload_1
188: aload         16
190: invokespecial #82
193: astore        17
195: getstatic     #139
198: astore        18
200: aconst_null
201: astore        19
203: new           #8
206: dup
207: aload         19
209: invokespecial #9
212: astore        20
214: aload         20
216: dconst_1
217: ldc2_w        #32
220: invokevirtual #43
223: aload         20
225: dconst_0
226: ldc2_w        #34
229: invokevirtual #43
232: aload         20
234: invokevirtual #59
237: aload         20
239: invokevirtual #25
242: astore        21
244: new           #136
247: dup
248: aload         17
250: aload         18
252: aload         21
254: checkcast     #79
257: invokespecial #137
260: astore        22
262: getstatic     #665
265: astore        23
267: new           #28
270: dup
271: aload         23
273: bipush        100
275: invokestatic  #135
278: ldc2_w        #12
281: invokestatic  #247
284: iconst_0
285: invokespecial #195
288: astore        24
290: new           #81
293: dup
294: invokespecial #666
297: astore        25
299: aload         24
301: aload         25
303: invokevirtual #573
306: aload         22
308: aload         24
310: invokevirtual #555
313: aload         22
315: invokevirtual #282
318: astore        26
320: aload         22
322: invokevirtual #282
325: astore        27
327: new           #83
330: dup
331: invokespecial #84
334: ldc           #85
336: invokevirtual #86
339: aload_1
340: invokevirtual #87
343: ldc           #88
345: invokevirtual #86
348: getstatic     #125
351: invokevirtual #87
354: ldc           #85
356: invokevirtual #86
359: invokevirtual #89
362: aload_1
363: getstatic     #125
366: invokevirtual #90
369: invokestatic  #91
372: new           #83
375: dup
376: invokespecial #84
379: ldc           #85
381: invokevirtual #86
384: aload_2
385: invokevirtual #87
388: ldc           #88
390: invokevirtual #86
393: getstatic     #126
396: invokevirtual #87
399: ldc           #85
401: invokevirtual #86
404: invokevirtual #89
407: aload_2
408: getstatic     #126
411: invokevirtual #90
414: invokestatic  #91
417: new           #83
420: dup
421: invokespecial #84
424: ldc           #85
426: invokevirtual #86
429: aload_3
430: invokevirtual #87
433: ldc           #88
435: invokevirtual #86
438: getstatic     #127
441: invokevirtual #87
444: ldc           #85
446: invokevirtual #86
449: invokevirtual #89
452: aload_3
453: getstatic     #127
456: invokevirtual #90
459: invokestatic  #91
462: new           #83
465: dup
466: invokespecial #84
469: ldc           #85
471: invokevirtual #86
474: aload         4
476: invokevirtual #87
479: ldc           #88
481: invokevirtual #86
484: getstatic     #128
487: invokevirtual #87
490: ldc           #85
492: invokevirtual #86
495: invokevirtual #89
498: aload         4
500: getstatic     #128
503: invokevirtual #90
506: invokestatic  #91
509: aload         5
511: invokestatic  #20
514: aload         5
516: invokestatic  #92
519: ldc           #140
521: invokestatic  #23
524: aload         5
526: invokestatic  #93
529: ldc           #140
531: invokestatic  #23
534: new           #83
537: dup
538: invokespecial #84
541: ldc           #85
543: invokevirtual #86
546: aload         7
548: invokevirtual #87
551: ldc           #88
553: invokevirtual #86
556: getstatic     #127
559: invokevirtual #87
562: ldc           #85
564: invokevirtual #86
567: invokevirtual #89
570: aload         7
572: getstatic     #127
575: invokevirtual #90
578: invokestatic  #91
581: new           #83
584: dup
585: invokespecial #84
588: ldc           #85
590: invokevirtual #86
593: aload         8
595: invokevirtual #87
598: ldc           #88
600: invokevirtual #86
603: getstatic     #128
606: invokevirtual #87
609: ldc           #85
611: invokevirtual #86
614: invokevirtual #89
617: aload         8
619: getstatic     #128
622: invokevirtual #90
625: invokestatic  #91
628: aload         9
630: invokestatic  #20
633: aload         9
635: invokestatic  #92
638: ldc           #140
640: invokestatic  #23
643: aload         9
645: invokestatic  #93
648: ldc           #140
650: invokestatic  #23
653: new           #83
656: dup
657: invokespecial #84
660: ldc           #85
662: invokevirtual #86
665: aload         11
667: invokevirtual #87
670: ldc           #88
672: invokevirtual #86
675: getstatic     #133
678: invokevirtual #87
681: ldc           #85
683: invokevirtual #86
686: invokevirtual #89
689: aload         11
691: getstatic     #133
694: invokevirtual #90
697: invokestatic  #91
700: new           #83
703: dup
704: invokespecial #84
707: ldc           #85
709: invokevirtual #86
712: aload         12
714: invokevirtual #87
717: ldc           #88
719: invokevirtual #86
722: getstatic     #134
725: invokevirtual #87
728: ldc           #85
730: invokevirtual #86
733: invokevirtual #89
736: aload         12
738: getstatic     #134
741: invokevirtual #90
744: invokestatic  #91
747: aload         13
749: invokestatic  #20
752: aload         13
754: invokestatic  #92
757: ldc           #141
759: invokestatic  #23
762: aload         13
764: invokestatic  #93
767: ldc           #141
769: invokestatic  #23
772: aload         16
774: invokestatic  #20
777: aload         16
779: invokestatic  #92
782: ldc           #141
784: invokestatic  #23
787: aload         16
789: invokestatic  #93
792: ldc           #141
794: invokestatic  #23
797: new           #83
800: dup
801: invokespecial #84
804: ldc           #85
806: invokevirtual #86
809: aload         18
811: invokevirtual #87
814: ldc           #88
816: invokevirtual #86
819: getstatic     #139
822: invokevirtual #87
825: ldc           #85
827: invokevirtual #86
830: invokevirtual #89
833: aload         18
835: getstatic     #139
838: invokevirtual #90
841: invokestatic  #91
844: aload         21
846: invokestatic  #20
849: new           #83
852: dup
853: invokespecial #84
856: ldc           #85
858: invokevirtual #86
861: aload         23
863: invokevirtual #87
866: ldc           #88
868: invokevirtual #86
871: getstatic     #665
874: invokevirtual #87
877: ldc           #85
879: invokevirtual #86
882: invokevirtual #89
885: aload         23
887: getstatic     #665
890: invokevirtual #90
893: invokestatic  #91
896: aload         26
898: invokestatic  #20
901: aload         27
903: invokestatic  #20
906: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test334
Start line: 10587
End line: 10673
Method source code: 
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        java.lang.Throwable[] throwableArray11 = mathIllegalArgumentException4.getSuppressed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext12 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException4);
        java.util.Set<java.lang.String> strSet13 = exceptionContext12.getKeys();
        java.lang.Object obj15 = exceptionContext12.getValue("");
        java.util.Set<java.lang.String> strSet16 = exceptionContext12.getKeys();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.REAL_FORMAT;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer18 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter19 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer18);
        harmonicFitter19.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter19.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter19.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter19.getObservations();
        java.lang.Object[] objArray28 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray27);
        exceptionContext12.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats17, (java.lang.Object[]) weightedObservedPointArray27);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats31 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats32 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats33 = org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats34 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats35 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray37 = new java.lang.Object[] { localizedFormats35, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException38 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats34, objArray37);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats39 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats40 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats41 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats42 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats43 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray44 = new java.lang.Object[] { localizedFormats40, localizedFormats41, localizedFormats42, localizedFormats43 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException45 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException38, (org.apache.commons.math3.exception.util.Localizable) localizedFormats39, objArray44);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext46 = mathIllegalArgumentException38.getContext();
        java.lang.Throwable[] throwableArray47 = mathIllegalArgumentException38.getSuppressed();
        org.apache.commons.math3.exception.ZeroException zeroException48 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats33, (java.lang.Object[]) throwableArray47);
        org.apache.commons.math3.exception.ZeroException zeroException49 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats32, (java.lang.Object[]) throwableArray47);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException50 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats31, (java.lang.Object[]) throwableArray47);
        org.apache.commons.math3.exception.ZeroException zeroException51 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats30, (java.lang.Object[]) throwableArray47);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException52 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats17, (java.lang.Object[]) throwableArray47);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.REAL_FORMAT + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.REAL_FORMAT));
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats31 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR + "'", localizedFormats31.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR));
        org.junit.Assert.assertTrue("'" + localizedFormats32 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE + "'", localizedFormats32.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE));
        org.junit.Assert.assertTrue("'" + localizedFormats33 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N + "'", localizedFormats33.equals(org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N));
        org.junit.Assert.assertTrue("'" + localizedFormats34 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats34.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats35 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats35.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats39 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats39.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats40 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats40.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats41 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats41.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats42 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats42.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats43 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats43.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertNotNull(exceptionContext46);
        org.junit.Assert.assertNotNull(throwableArray47);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #667
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: aload         4
110: invokevirtual #234
113: astore        9
115: new           #163
118: dup
119: aload         4
121: invokespecial #164
124: astore        10
126: aload         10
128: invokevirtual #370
131: astore        11
133: aload         10
135: ldc_w         #384
138: invokevirtual #167
141: astore        12
143: aload         10
145: invokevirtual #370
148: astore        13
150: getstatic     #477
153: astore        14
155: aconst_null
156: astore        15
158: new           #8
161: dup
162: aload         15
164: invokespecial #9
167: astore        16
169: aload         16
171: dconst_1
172: ldc2_w        #32
175: invokevirtual #43
178: aload         16
180: dconst_0
181: ldc2_w        #34
184: invokevirtual #43
187: aload         16
189: invokevirtual #59
192: aload         16
194: invokevirtual #25
197: astore        17
199: aload         17
201: checkcast     #79
204: invokestatic  #80
207: astore        18
209: aload         10
211: aload         14
213: aload         17
215: checkcast     #79
218: invokevirtual #169
221: getstatic     #668
224: astore        19
226: getstatic     #640
229: astore        20
231: getstatic     #591
234: astore        21
236: getstatic     #592
239: astore        22
241: getstatic     #127
244: astore        23
246: getstatic     #128
249: astore        24
251: iconst_2
252: anewarray     #5
255: dup
256: iconst_0
257: aload         24
259: aastore
260: dup
261: iconst_1
262: lconst_1
263: invokestatic  #129
266: aastore
267: astore        25
269: new           #130
272: dup
273: aload         23
275: aload         25
277: invokespecial #131
280: astore        26
282: getstatic     #328
285: astore        27
287: getstatic     #329
290: astore        28
292: getstatic     #330
295: astore        29
297: getstatic     #331
300: astore        30
302: getstatic     #332
305: astore        31
307: iconst_4
308: anewarray     #5
311: dup
312: iconst_0
313: aload         28
315: aastore
316: dup
317: iconst_1
318: aload         29
320: aastore
321: dup
322: iconst_2
323: aload         30
325: aastore
326: dup
327: iconst_3
328: aload         31
330: aastore
331: astore        32
333: new           #136
336: dup
337: aload         26
339: aload         27
341: aload         32
343: invokespecial #137
346: astore        33
348: aload         26
350: invokevirtual #165
353: astore        34
355: aload         26
357: invokevirtual #234
360: astore        35
362: new           #81
365: dup
366: aload         22
368: aload         35
370: checkcast     #79
373: invokespecial #82
376: astore        36
378: new           #81
381: dup
382: aload         21
384: aload         35
386: checkcast     #79
389: invokespecial #82
392: astore        37
394: new           #130
397: dup
398: aload         20
400: aload         35
402: checkcast     #79
405: invokespecial #131
408: astore        38
410: new           #81
413: dup
414: aload         19
416: aload         35
418: checkcast     #79
421: invokespecial #82
424: astore        39
426: new           #130
429: dup
430: aload         14
432: aload         35
434: checkcast     #79
437: invokespecial #131
440: astore        40
442: new           #83
445: dup
446: invokespecial #84
449: ldc           #85
451: invokevirtual #86
454: aload_1
455: invokevirtual #87
458: ldc           #88
460: invokevirtual #86
463: getstatic     #127
466: invokevirtual #87
469: ldc           #85
471: invokevirtual #86
474: invokevirtual #89
477: aload_1
478: getstatic     #127
481: invokevirtual #90
484: invokestatic  #91
487: new           #83
490: dup
491: invokespecial #84
494: ldc           #85
496: invokevirtual #86
499: aload_2
500: invokevirtual #87
503: ldc           #88
505: invokevirtual #86
508: getstatic     #128
511: invokevirtual #87
514: ldc           #85
516: invokevirtual #86
519: invokevirtual #89
522: aload_2
523: getstatic     #128
526: invokevirtual #90
529: invokestatic  #91
532: aload_3
533: invokestatic  #20
536: aload_3
537: invokestatic  #92
540: ldc           #140
542: invokestatic  #23
545: aload_3
546: invokestatic  #93
549: ldc           #140
551: invokestatic  #23
554: new           #83
557: dup
558: invokespecial #84
561: ldc           #85
563: invokevirtual #86
566: aload         5
568: invokevirtual #87
571: ldc           #88
573: invokevirtual #86
576: getstatic     #127
579: invokevirtual #87
582: ldc           #85
584: invokevirtual #86
587: invokevirtual #89
590: aload         5
592: getstatic     #127
595: invokevirtual #90
598: invokestatic  #91
601: new           #83
604: dup
605: invokespecial #84
608: ldc           #85
610: invokevirtual #86
613: aload         6
615: invokevirtual #87
618: ldc           #88
620: invokevirtual #86
623: getstatic     #128
626: invokevirtual #87
629: ldc           #85
631: invokevirtual #86
634: invokevirtual #89
637: aload         6
639: getstatic     #128
642: invokevirtual #90
645: invokestatic  #91
648: aload         7
650: invokestatic  #20
653: aload         7
655: invokestatic  #92
658: ldc           #140
660: invokestatic  #23
663: aload         7
665: invokestatic  #93
668: ldc           #140
670: invokestatic  #23
673: aload         9
675: invokestatic  #20
678: aload         11
680: invokestatic  #20
683: aload         12
685: invokestatic  #171
688: aload         13
690: invokestatic  #20
693: new           #83
696: dup
697: invokespecial #84
700: ldc           #85
702: invokevirtual #86
705: aload         14
707: invokevirtual #87
710: ldc           #88
712: invokevirtual #86
715: getstatic     #477
718: invokevirtual #87
721: ldc           #85
723: invokevirtual #86
726: invokevirtual #89
729: aload         14
731: getstatic     #477
734: invokevirtual #90
737: invokestatic  #91
740: aload         17
742: invokestatic  #20
745: aload         18
747: invokestatic  #20
750: aload         18
752: invokestatic  #92
755: ldc           #74
757: invokestatic  #23
760: aload         18
762: invokestatic  #93
765: ldc           #74
767: invokestatic  #23
770: new           #83
773: dup
774: invokespecial #84
777: ldc           #85
779: invokevirtual #86
782: aload         19
784: invokevirtual #87
787: ldc           #88
789: invokevirtual #86
792: getstatic     #668
795: invokevirtual #87
798: ldc           #85
800: invokevirtual #86
803: invokevirtual #89
806: aload         19
808: getstatic     #668
811: invokevirtual #90
814: invokestatic  #91
817: new           #83
820: dup
821: invokespecial #84
824: ldc           #85
826: invokevirtual #86
829: aload         20
831: invokevirtual #87
834: ldc           #88
836: invokevirtual #86
839: getstatic     #640
842: invokevirtual #87
845: ldc           #85
847: invokevirtual #86
850: invokevirtual #89
853: aload         20
855: getstatic     #640
858: invokevirtual #90
861: invokestatic  #91
864: new           #83
867: dup
868: invokespecial #84
871: ldc           #85
873: invokevirtual #86
876: aload         21
878: invokevirtual #87
881: ldc           #88
883: invokevirtual #86
886: getstatic     #591
889: invokevirtual #87
892: ldc           #85
894: invokevirtual #86
897: invokevirtual #89
900: aload         21
902: getstatic     #591
905: invokevirtual #90
908: invokestatic  #91
911: new           #83
914: dup
915: invokespecial #84
918: ldc           #85
920: invokevirtual #86
923: aload         22
925: invokevirtual #87
928: ldc           #88
930: invokevirtual #86
933: getstatic     #592
936: invokevirtual #87
939: ldc           #85
941: invokevirtual #86
944: invokevirtual #89
947: aload         22
949: getstatic     #592
952: invokevirtual #90
955: invokestatic  #91
958: new           #83
961: dup
962: invokespecial #84
965: ldc           #85
967: invokevirtual #86
970: aload         23
972: invokevirtual #87
975: ldc           #88
977: invokevirtual #86
980: getstatic     #127
983: invokevirtual #87
986: ldc           #85
988: invokevirtual #86
991: invokevirtual #89
994: aload         23
996: getstatic     #127
999: invokevirtual #90
1002: invokestatic  #91
1005: new           #83
1008: dup
1009: invokespecial #84
1012: ldc           #85
1014: invokevirtual #86
1017: aload         24
1019: invokevirtual #87
1022: ldc           #88
1024: invokevirtual #86
1027: getstatic     #128
1030: invokevirtual #87
1033: ldc           #85
1035: invokevirtual #86
1038: invokevirtual #89
1041: aload         24
1043: getstatic     #128
1046: invokevirtual #90
1049: invokestatic  #91
1052: aload         25
1054: invokestatic  #20
1057: aload         25
1059: invokestatic  #92
1062: ldc           #140
1064: invokestatic  #23
1067: aload         25
1069: invokestatic  #93
1072: ldc           #140
1074: invokestatic  #23
1077: new           #83
1080: dup
1081: invokespecial #84
1084: ldc           #85
1086: invokevirtual #86
1089: aload         27
1091: invokevirtual #87
1094: ldc           #88
1096: invokevirtual #86
1099: getstatic     #328
1102: invokevirtual #87
1105: ldc           #85
1107: invokevirtual #86
1110: invokevirtual #89
1113: aload         27
1115: getstatic     #328
1118: invokevirtual #90
1121: invokestatic  #91
1124: new           #83
1127: dup
1128: invokespecial #84
1131: ldc           #85
1133: invokevirtual #86
1136: aload         28
1138: invokevirtual #87
1141: ldc           #88
1143: invokevirtual #86
1146: getstatic     #329
1149: invokevirtual #87
1152: ldc           #85
1154: invokevirtual #86
1157: invokevirtual #89
1160: aload         28
1162: getstatic     #329
1165: invokevirtual #90
1168: invokestatic  #91
1171: new           #83
1174: dup
1175: invokespecial #84
1178: ldc           #85
1180: invokevirtual #86
1183: aload         29
1185: invokevirtual #87
1188: ldc           #88
1190: invokevirtual #86
1193: getstatic     #330
1196: invokevirtual #87
1199: ldc           #85
1201: invokevirtual #86
1204: invokevirtual #89
1207: aload         29
1209: getstatic     #330
1212: invokevirtual #90
1215: invokestatic  #91
1218: new           #83
1221: dup
1222: invokespecial #84
1225: ldc           #85
1227: invokevirtual #86
1230: aload         30
1232: invokevirtual #87
1235: ldc           #88
1237: invokevirtual #86
1240: getstatic     #331
1243: invokevirtual #87
1246: ldc           #85
1248: invokevirtual #86
1251: invokevirtual #89
1254: aload         30
1256: getstatic     #331
1259: invokevirtual #90
1262: invokestatic  #91
1265: new           #83
1268: dup
1269: invokespecial #84
1272: ldc           #85
1274: invokevirtual #86
1277: aload         31
1279: invokevirtual #87
1282: ldc           #88
1284: invokevirtual #86
1287: getstatic     #332
1290: invokevirtual #87
1293: ldc           #85
1295: invokevirtual #86
1298: invokevirtual #89
1301: aload         31
1303: getstatic     #332
1306: invokevirtual #90
1309: invokestatic  #91
1312: aload         32
1314: invokestatic  #20
1317: aload         32
1319: invokestatic  #92
1322: ldc_w         #336
1325: invokestatic  #23
1328: aload         32
1330: invokestatic  #93
1333: ldc_w         #336
1336: invokestatic  #23
1339: aload         34
1341: invokestatic  #20
1344: aload         35
1346: invokestatic  #20
1349: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test335
Start line: 10676
End line: 10695
Method source code: 
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        harmonicFitter1.addObservedPoint((double) (short) 0, (double) (short) 0);
        double[] doubleArray20 = new double[] { ' ', (short) -1, (short) 10, (short) 1, (-1L) };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = harmonicFitter1.fit(doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[32.0, -1.0, 10.0, 1.0, -1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #669
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: dconst_0
54: ldc2_w        #12
57: ldc2_w        #10
60: invokevirtual #54
63: aload_2
64: dconst_0
65: dconst_0
66: invokevirtual #43
69: iconst_5
70: newarray       double
72: dup
73: iconst_0
74: ldc2_w        #38
77: dastore
78: dup
79: iconst_1
80: ldc2_w        #10
83: dastore
84: dup
85: iconst_2
86: ldc2_w        #32
89: dastore
90: dup
91: iconst_3
92: dconst_1
93: dastore
94: dup
95: iconst_4
96: ldc2_w        #10
99: dastore
100: astore_3
101: aload_2
102: aload_3
103: invokevirtual #16
106: astore        4
108: ldc           #17
110: invokestatic  #18
113: goto          118
116: astore        4
118: aload_3
119: invokestatic  #20
122: aload_3
123: invokestatic  #21
126: ldc_w         #670
129: invokestatic  #23
132: return
Exception table:
from    to  target type
101   113   116   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test336
Start line: 10698
End line: 10733
Method source code: 
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.addObservedPoint((double) 0, (double) (short) 100, (double) (short) 0);
        harmonicFitter1.addObservedPoint(10.0d, (-1.0d), 1.0d);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint26 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double27 = weightedObservedPoint26.getWeight();
        double double28 = weightedObservedPoint26.getX();
        double double29 = weightedObservedPoint26.getX();
        double double30 = weightedObservedPoint26.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint26);
        double double32 = weightedObservedPoint26.getWeight();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 35.0d + "'", double27 == 35.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #671
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: dconst_0
105: ldc2_w        #34
108: dconst_0
109: invokevirtual #54
112: aload_2
113: ldc2_w        #32
116: ldc2_w        #10
119: dconst_1
120: invokevirtual #54
123: aload_2
124: invokevirtual #59
127: new           #145
130: dup
131: ldc2_w        #14
134: ldc2_w        #12
137: ldc2_w        #12
140: invokespecial #146
143: astore        14
145: aload         14
147: invokevirtual #148
150: dstore        15
152: aload         14
154: invokevirtual #147
157: dstore        17
159: aload         14
161: invokevirtual #147
164: dstore        19
166: aload         14
168: invokevirtual #149
171: dstore        21
173: aload_2
174: aload         14
176: invokevirtual #123
179: aload         14
181: invokevirtual #148
184: dstore        23
186: aload_3
187: invokestatic  #20
190: aload         4
192: invokestatic  #20
195: new           #83
198: dup
199: invokespecial #84
202: ldc           #85
204: invokevirtual #86
207: dload         6
209: invokevirtual #150
212: ldc           #88
214: invokevirtual #86
217: ldc2_w        #12
220: invokevirtual #150
223: ldc           #85
225: invokevirtual #86
228: invokevirtual #89
231: dload         6
233: ldc2_w        #12
236: dcmpl
237: ifne          244
240: iconst_1
241: goto          245
244: iconst_0
245: invokestatic  #91
248: new           #83
251: dup
252: invokespecial #84
255: ldc           #85
257: invokevirtual #86
260: dload         8
262: invokevirtual #150
265: ldc           #88
267: invokevirtual #86
270: ldc2_w        #14
273: invokevirtual #150
276: ldc           #85
278: invokevirtual #86
281: invokevirtual #89
284: dload         8
286: ldc2_w        #14
289: dcmpl
290: ifne          297
293: iconst_1
294: goto          298
297: iconst_0
298: invokestatic  #91
301: new           #83
304: dup
305: invokespecial #84
308: ldc           #85
310: invokevirtual #86
313: dload         10
315: invokevirtual #150
318: ldc           #88
320: invokevirtual #86
323: ldc2_w        #14
326: invokevirtual #150
329: ldc           #85
331: invokevirtual #86
334: invokevirtual #89
337: dload         10
339: ldc2_w        #14
342: dcmpl
343: ifne          350
346: iconst_1
347: goto          351
350: iconst_0
351: invokestatic  #91
354: new           #83
357: dup
358: invokespecial #84
361: ldc           #85
363: invokevirtual #86
366: dload         12
368: invokevirtual #150
371: ldc           #88
373: invokevirtual #86
376: ldc2_w        #12
379: invokevirtual #150
382: ldc           #85
384: invokevirtual #86
387: invokevirtual #89
390: dload         12
392: ldc2_w        #12
395: dcmpl
396: ifne          403
399: iconst_1
400: goto          404
403: iconst_0
404: invokestatic  #91
407: new           #83
410: dup
411: invokespecial #84
414: ldc           #85
416: invokevirtual #86
419: dload         15
421: invokevirtual #150
424: ldc           #88
426: invokevirtual #86
429: ldc2_w        #14
432: invokevirtual #150
435: ldc           #85
437: invokevirtual #86
440: invokevirtual #89
443: dload         15
445: ldc2_w        #14
448: dcmpl
449: ifne          456
452: iconst_1
453: goto          457
456: iconst_0
457: invokestatic  #91
460: new           #83
463: dup
464: invokespecial #84
467: ldc           #85
469: invokevirtual #86
472: dload         17
474: invokevirtual #150
477: ldc           #88
479: invokevirtual #86
482: ldc2_w        #12
485: invokevirtual #150
488: ldc           #85
490: invokevirtual #86
493: invokevirtual #89
496: dload         17
498: ldc2_w        #12
501: dcmpl
502: ifne          509
505: iconst_1
506: goto          510
509: iconst_0
510: invokestatic  #91
513: new           #83
516: dup
517: invokespecial #84
520: ldc           #85
522: invokevirtual #86
525: dload         19
527: invokevirtual #150
530: ldc           #88
532: invokevirtual #86
535: ldc2_w        #12
538: invokevirtual #150
541: ldc           #85
543: invokevirtual #86
546: invokevirtual #89
549: dload         19
551: ldc2_w        #12
554: dcmpl
555: ifne          562
558: iconst_1
559: goto          563
562: iconst_0
563: invokestatic  #91
566: new           #83
569: dup
570: invokespecial #84
573: ldc           #85
575: invokevirtual #86
578: dload         21
580: invokevirtual #150
583: ldc           #88
585: invokevirtual #86
588: ldc2_w        #12
591: invokevirtual #150
594: ldc           #85
596: invokevirtual #86
599: invokevirtual #89
602: dload         21
604: ldc2_w        #12
607: dcmpl
608: ifne          615
611: iconst_1
612: goto          616
615: iconst_0
616: invokestatic  #91
619: new           #83
622: dup
623: invokespecial #84
626: ldc           #85
628: invokevirtual #86
631: dload         23
633: invokevirtual #150
636: ldc           #88
638: invokevirtual #86
641: ldc2_w        #14
644: invokevirtual #150
647: ldc           #85
649: invokevirtual #86
652: invokevirtual #89
655: dload         23
657: ldc2_w        #14
660: dcmpl
661: ifne          668
664: iconst_1
665: goto          669
668: iconst_0
669: invokestatic  #91
672: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test337
Start line: 10736
End line: 10795
Method source code: 
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats3 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray5 = new java.lang.Object[] { localizedFormats3, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats2, objArray5);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray10 = new java.lang.Object[] { localizedFormats8, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats7, objArray10);
        mathIllegalArgumentException6.addSuppressed((java.lang.Throwable) mathIllegalArgumentException11);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray16 = new java.lang.Object[] { localizedFormats14, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException17 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException11, (org.apache.commons.math3.exception.util.Localizable) localizedFormats13, objArray16);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException18 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, objArray16);
        java.lang.Object[] objArray19 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray16);
        org.apache.commons.math3.exception.ZeroException zeroException20 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray19);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer22 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter23 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer22);
        harmonicFitter23.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter23.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter23.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray31 = harmonicFitter23.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException32 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) zeroException20, (org.apache.commons.math3.exception.util.Localizable) localizedFormats21, (java.lang.Object[]) weightedObservedPointArray31);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats33 = org.apache.commons.math3.exception.util.LocalizedFormats.NORMALIZE_INFINITE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException37 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats33, (java.lang.Number) 100, (java.lang.Number) 52.0d, false);
        org.apache.commons.math3.exception.ZeroException zeroException38 = new org.apache.commons.math3.exception.ZeroException();
        numberIsTooSmallException37.addSuppressed((java.lang.Throwable) zeroException38);
        mathIllegalStateException32.addSuppressed((java.lang.Throwable) numberIsTooSmallException37);
        boolean boolean41 = numberIsTooSmallException37.getBoundIsAllowed();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats3 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats3.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATION + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray31);
        org.junit.Assert.assertTrue("'" + localizedFormats33 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NORMALIZE_INFINITE + "'", localizedFormats33.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NORMALIZE_INFINITE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #672
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #125
28: astore_1
29: getstatic     #126
32: astore_2
33: getstatic     #127
36: astore_3
37: getstatic     #128
40: astore        4
42: iconst_2
43: anewarray     #5
46: dup
47: iconst_0
48: aload         4
50: aastore
51: dup
52: iconst_1
53: lconst_1
54: invokestatic  #129
57: aastore
58: astore        5
60: new           #130
63: dup
64: aload_3
65: aload         5
67: invokespecial #131
70: astore        6
72: getstatic     #127
75: astore        7
77: getstatic     #128
80: astore        8
82: iconst_2
83: anewarray     #5
86: dup
87: iconst_0
88: aload         8
90: aastore
91: dup
92: iconst_1
93: lconst_1
94: invokestatic  #129
97: aastore
98: astore        9
100: new           #130
103: dup
104: aload         7
106: aload         9
108: invokespecial #131
111: astore        10
113: aload         6
115: aload         10
117: invokevirtual #132
120: getstatic     #133
123: astore        11
125: getstatic     #134
128: astore        12
130: iconst_2
131: anewarray     #5
134: dup
135: iconst_0
136: aload         12
138: aastore
139: dup
140: iconst_1
141: bipush        10
143: invokestatic  #135
146: aastore
147: astore        13
149: new           #136
152: dup
153: aload         10
155: aload         11
157: aload         13
159: invokespecial #137
162: astore        14
164: new           #136
167: dup
168: aload_2
169: aload         13
171: invokespecial #138
174: astore        15
176: aload         13
178: invokestatic  #80
181: astore        16
183: new           #81
186: dup
187: aload_1
188: aload         16
190: invokespecial #82
193: astore        17
195: getstatic     #139
198: astore        18
200: aconst_null
201: astore        19
203: new           #8
206: dup
207: aload         19
209: invokespecial #9
212: astore        20
214: aload         20
216: dconst_1
217: ldc2_w        #32
220: invokevirtual #43
223: aload         20
225: dconst_0
226: ldc2_w        #34
229: invokevirtual #43
232: aload         20
234: invokevirtual #59
237: aload         20
239: invokevirtual #25
242: astore        21
244: new           #136
247: dup
248: aload         17
250: aload         18
252: aload         21
254: checkcast     #79
257: invokespecial #137
260: astore        22
262: getstatic     #665
265: astore        23
267: new           #28
270: dup
271: aload         23
273: bipush        100
275: invokestatic  #135
278: ldc2_w        #12
281: invokestatic  #247
284: iconst_0
285: invokespecial #195
288: astore        24
290: new           #81
293: dup
294: invokespecial #666
297: astore        25
299: aload         24
301: aload         25
303: invokevirtual #573
306: aload         22
308: aload         24
310: invokevirtual #555
313: aload         24
315: invokevirtual #162
318: istore        26
320: new           #83
323: dup
324: invokespecial #84
327: ldc           #85
329: invokevirtual #86
332: aload_1
333: invokevirtual #87
336: ldc           #88
338: invokevirtual #86
341: getstatic     #125
344: invokevirtual #87
347: ldc           #85
349: invokevirtual #86
352: invokevirtual #89
355: aload_1
356: getstatic     #125
359: invokevirtual #90
362: invokestatic  #91
365: new           #83
368: dup
369: invokespecial #84
372: ldc           #85
374: invokevirtual #86
377: aload_2
378: invokevirtual #87
381: ldc           #88
383: invokevirtual #86
386: getstatic     #126
389: invokevirtual #87
392: ldc           #85
394: invokevirtual #86
397: invokevirtual #89
400: aload_2
401: getstatic     #126
404: invokevirtual #90
407: invokestatic  #91
410: new           #83
413: dup
414: invokespecial #84
417: ldc           #85
419: invokevirtual #86
422: aload_3
423: invokevirtual #87
426: ldc           #88
428: invokevirtual #86
431: getstatic     #127
434: invokevirtual #87
437: ldc           #85
439: invokevirtual #86
442: invokevirtual #89
445: aload_3
446: getstatic     #127
449: invokevirtual #90
452: invokestatic  #91
455: new           #83
458: dup
459: invokespecial #84
462: ldc           #85
464: invokevirtual #86
467: aload         4
469: invokevirtual #87
472: ldc           #88
474: invokevirtual #86
477: getstatic     #128
480: invokevirtual #87
483: ldc           #85
485: invokevirtual #86
488: invokevirtual #89
491: aload         4
493: getstatic     #128
496: invokevirtual #90
499: invokestatic  #91
502: aload         5
504: invokestatic  #20
507: aload         5
509: invokestatic  #92
512: ldc           #140
514: invokestatic  #23
517: aload         5
519: invokestatic  #93
522: ldc           #140
524: invokestatic  #23
527: new           #83
530: dup
531: invokespecial #84
534: ldc           #85
536: invokevirtual #86
539: aload         7
541: invokevirtual #87
544: ldc           #88
546: invokevirtual #86
549: getstatic     #127
552: invokevirtual #87
555: ldc           #85
557: invokevirtual #86
560: invokevirtual #89
563: aload         7
565: getstatic     #127
568: invokevirtual #90
571: invokestatic  #91
574: new           #83
577: dup
578: invokespecial #84
581: ldc           #85
583: invokevirtual #86
586: aload         8
588: invokevirtual #87
591: ldc           #88
593: invokevirtual #86
596: getstatic     #128
599: invokevirtual #87
602: ldc           #85
604: invokevirtual #86
607: invokevirtual #89
610: aload         8
612: getstatic     #128
615: invokevirtual #90
618: invokestatic  #91
621: aload         9
623: invokestatic  #20
626: aload         9
628: invokestatic  #92
631: ldc           #140
633: invokestatic  #23
636: aload         9
638: invokestatic  #93
641: ldc           #140
643: invokestatic  #23
646: new           #83
649: dup
650: invokespecial #84
653: ldc           #85
655: invokevirtual #86
658: aload         11
660: invokevirtual #87
663: ldc           #88
665: invokevirtual #86
668: getstatic     #133
671: invokevirtual #87
674: ldc           #85
676: invokevirtual #86
679: invokevirtual #89
682: aload         11
684: getstatic     #133
687: invokevirtual #90
690: invokestatic  #91
693: new           #83
696: dup
697: invokespecial #84
700: ldc           #85
702: invokevirtual #86
705: aload         12
707: invokevirtual #87
710: ldc           #88
712: invokevirtual #86
715: getstatic     #134
718: invokevirtual #87
721: ldc           #85
723: invokevirtual #86
726: invokevirtual #89
729: aload         12
731: getstatic     #134
734: invokevirtual #90
737: invokestatic  #91
740: aload         13
742: invokestatic  #20
745: aload         13
747: invokestatic  #92
750: ldc           #141
752: invokestatic  #23
755: aload         13
757: invokestatic  #93
760: ldc           #141
762: invokestatic  #23
765: aload         16
767: invokestatic  #20
770: aload         16
772: invokestatic  #92
775: ldc           #141
777: invokestatic  #23
780: aload         16
782: invokestatic  #93
785: ldc           #141
787: invokestatic  #23
790: new           #83
793: dup
794: invokespecial #84
797: ldc           #85
799: invokevirtual #86
802: aload         18
804: invokevirtual #87
807: ldc           #88
809: invokevirtual #86
812: getstatic     #139
815: invokevirtual #87
818: ldc           #85
820: invokevirtual #86
823: invokevirtual #89
826: aload         18
828: getstatic     #139
831: invokevirtual #90
834: invokestatic  #91
837: aload         21
839: invokestatic  #20
842: new           #83
845: dup
846: invokespecial #84
849: ldc           #85
851: invokevirtual #86
854: aload         23
856: invokevirtual #87
859: ldc           #88
861: invokevirtual #86
864: getstatic     #665
867: invokevirtual #87
870: ldc           #85
872: invokevirtual #86
875: invokevirtual #89
878: aload         23
880: getstatic     #665
883: invokevirtual #90
886: invokestatic  #91
889: new           #83
892: dup
893: invokespecial #84
896: ldc           #85
898: invokevirtual #86
901: iload         26
903: invokevirtual #170
906: ldc           #88
908: invokevirtual #86
911: iconst_0
912: invokevirtual #170
915: ldc           #85
917: invokevirtual #86
920: invokevirtual #89
923: iload         26
925: ifne          932
928: iconst_1
929: goto          933
932: iconst_0
933: invokestatic  #91
936: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test338
Start line: 10798
End line: 10837
Method source code: 
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer16 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter17 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer16);
        harmonicFitter17.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter17.clearObservations();
        harmonicFitter17.clearObservations();
        harmonicFitter17.addObservedPoint((double) (short) 0, (double) (byte) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint29 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint(0.0d, (double) 1.0f, 35.0d);
        harmonicFitter17.addObservedPoint(weightedObservedPoint29);
        harmonicFitter1.addObservedPoint(weightedObservedPoint29);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray32 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #673
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: invokevirtual #59
107: aload_2
108: invokevirtual #25
111: astore        14
113: aconst_null
114: astore        15
116: new           #8
119: dup
120: aload         15
122: invokespecial #9
125: astore        16
127: aload         16
129: dconst_1
130: ldc2_w        #32
133: invokevirtual #43
136: aload         16
138: invokevirtual #59
141: aload         16
143: invokevirtual #59
146: aload         16
148: dconst_0
149: ldc2_w        #32
152: invokevirtual #43
155: new           #145
158: dup
159: dconst_0
160: dconst_1
161: ldc2_w        #14
164: invokespecial #146
167: astore        17
169: aload         16
171: aload         17
173: invokevirtual #123
176: aload_2
177: aload         17
179: invokevirtual #123
182: aload_2
183: invokevirtual #26
186: astore        18
188: ldc           #64
190: invokestatic  #18
193: goto          198
196: astore        18
198: aload_3
199: invokestatic  #20
202: aload         4
204: invokestatic  #20
207: new           #83
210: dup
211: invokespecial #84
214: ldc           #85
216: invokevirtual #86
219: dload         6
221: invokevirtual #150
224: ldc           #88
226: invokevirtual #86
229: ldc2_w        #12
232: invokevirtual #150
235: ldc           #85
237: invokevirtual #86
240: invokevirtual #89
243: dload         6
245: ldc2_w        #12
248: dcmpl
249: ifne          256
252: iconst_1
253: goto          257
256: iconst_0
257: invokestatic  #91
260: new           #83
263: dup
264: invokespecial #84
267: ldc           #85
269: invokevirtual #86
272: dload         8
274: invokevirtual #150
277: ldc           #88
279: invokevirtual #86
282: ldc2_w        #14
285: invokevirtual #150
288: ldc           #85
290: invokevirtual #86
293: invokevirtual #89
296: dload         8
298: ldc2_w        #14
301: dcmpl
302: ifne          309
305: iconst_1
306: goto          310
309: iconst_0
310: invokestatic  #91
313: new           #83
316: dup
317: invokespecial #84
320: ldc           #85
322: invokevirtual #86
325: dload         10
327: invokevirtual #150
330: ldc           #88
332: invokevirtual #86
335: ldc2_w        #14
338: invokevirtual #150
341: ldc           #85
343: invokevirtual #86
346: invokevirtual #89
349: dload         10
351: ldc2_w        #14
354: dcmpl
355: ifne          362
358: iconst_1
359: goto          363
362: iconst_0
363: invokestatic  #91
366: new           #83
369: dup
370: invokespecial #84
373: ldc           #85
375: invokevirtual #86
378: dload         12
380: invokevirtual #150
383: ldc           #88
385: invokevirtual #86
388: ldc2_w        #12
391: invokevirtual #150
394: ldc           #85
396: invokevirtual #86
399: invokevirtual #89
402: dload         12
404: ldc2_w        #12
407: dcmpl
408: ifne          415
411: iconst_1
412: goto          416
415: iconst_0
416: invokestatic  #91
419: aload         14
421: invokestatic  #20
424: return
Exception table:
from    to  target type
182   193   196   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test339
Start line: 10840
End line: 10869
Method source code: 
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint19 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter8.addObservedPoint(weightedObservedPoint19);
        harmonicFitter1.addObservedPoint(weightedObservedPoint19);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer22 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter23 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer22);
        harmonicFitter23.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter23.clearObservations();
        harmonicFitter23.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint34 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double35 = weightedObservedPoint34.getX();
        harmonicFitter23.addObservedPoint(weightedObservedPoint34);
        harmonicFitter1.addObservedPoint(weightedObservedPoint34);
        double double38 = weightedObservedPoint34.getX();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #674
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aconst_null
53: astore        4
55: new           #8
58: dup
59: aload         4
61: invokespecial #9
64: astore        5
66: aload         5
68: dconst_1
69: ldc2_w        #32
72: invokevirtual #43
75: aload         5
77: dconst_0
78: ldc2_w        #34
81: invokevirtual #43
84: aload         5
86: invokevirtual #25
89: astore        6
91: new           #145
94: dup
95: dconst_1
96: dconst_0
97: ldc2_w        #34
100: invokespecial #146
103: astore        7
105: aload         5
107: aload         7
109: invokevirtual #123
112: aload_2
113: aload         7
115: invokevirtual #123
118: aconst_null
119: astore        8
121: new           #8
124: dup
125: aload         8
127: invokespecial #9
130: astore        9
132: aload         9
134: dconst_1
135: ldc2_w        #32
138: invokevirtual #43
141: aload         9
143: invokevirtual #59
146: aload         9
148: dconst_0
149: ldc2_w        #10
152: invokevirtual #43
155: new           #145
158: dup
159: ldc2_w        #14
162: ldc2_w        #12
165: ldc2_w        #12
168: invokespecial #146
171: astore        10
173: aload         10
175: invokevirtual #147
178: dstore        11
180: aload         9
182: aload         10
184: invokevirtual #123
187: aload_2
188: aload         10
190: invokevirtual #123
193: aload         10
195: invokevirtual #147
198: dstore        13
200: aload_3
201: invokestatic  #20
204: aload         6
206: invokestatic  #20
209: new           #83
212: dup
213: invokespecial #84
216: ldc           #85
218: invokevirtual #86
221: dload         11
223: invokevirtual #150
226: ldc           #88
228: invokevirtual #86
231: ldc2_w        #12
234: invokevirtual #150
237: ldc           #85
239: invokevirtual #86
242: invokevirtual #89
245: dload         11
247: ldc2_w        #12
250: dcmpl
251: ifne          258
254: iconst_1
255: goto          259
258: iconst_0
259: invokestatic  #91
262: new           #83
265: dup
266: invokespecial #84
269: ldc           #85
271: invokevirtual #86
274: dload         13
276: invokevirtual #150
279: ldc           #88
281: invokevirtual #86
284: ldc2_w        #12
287: invokevirtual #150
290: ldc           #85
292: invokevirtual #86
295: invokevirtual #89
298: dload         13
300: ldc2_w        #12
303: dcmpl
304: ifne          311
307: iconst_1
308: goto          312
311: iconst_0
312: invokestatic  #91
315: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test340
Start line: 10872
End line: 10887
Method source code: 
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter1.addObservedPoint((double) (short) 0, 0.0d, (double) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray18 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #675
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: aload_2
74: dconst_0
75: dconst_0
76: ldc2_w        #32
79: invokevirtual #54
82: aload_2
83: invokevirtual #25
86: astore        4
88: aload_2
89: invokevirtual #59
92: aload_2
93: invokevirtual #59
96: aload_3
97: invokestatic  #20
100: aload         4
102: invokestatic  #20
105: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test341
Start line: 10890
End line: 10938
Method source code: 
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        java.lang.Throwable[] throwableArray11 = mathIllegalArgumentException4.getSuppressed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext12 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException4);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE;
        exceptionContext12.setValue("cannot compute beta density at 0 when alpha = {0,number}", (java.lang.Object) localizedFormats14);
        java.lang.Throwable throwable16 = exceptionContext12.getThrowable();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext17 = new org.apache.commons.math3.exception.util.ExceptionContext(throwable16);
        java.lang.Object obj19 = exceptionContext17.getValue("must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}");
        java.lang.Object obj21 = exceptionContext17.getValue("org.apache.commons.math3.exception.NumberIsTooSmallException: Cannot normalize to an infinite value");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer23 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter24 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer23);
        harmonicFitter24.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter24.addObservedPoint((double) (-1), 0.0d, (double) (short) 0);
        harmonicFitter24.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray33 = harmonicFitter24.getObservations();
        exceptionContext17.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats22, (java.lang.Object[]) weightedObservedPointArray33);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE));
        org.junit.Assert.assertNotNull(throwable16);
        org.junit.Assert.assertEquals(throwable16.getLocalizedMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertEquals(throwable16.getMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertEquals(throwable16.toString(), "org.apache.commons.math3.exception.MathIllegalArgumentException: overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray33);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #676
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: aload         4
110: invokevirtual #234
113: astore        9
115: new           #163
118: dup
119: aload         4
121: invokespecial #164
124: astore        10
126: getstatic     #378
129: astore        11
131: aload         10
133: ldc_w         #379
136: aload         11
138: invokevirtual #373
141: aload         10
143: invokevirtual #288
146: astore        12
148: new           #163
151: dup
152: aload         12
154: invokespecial #164
157: astore        13
159: aload         13
161: ldc_w         #303
164: invokevirtual #167
167: astore        14
169: aload         13
171: ldc_w         #677
174: invokevirtual #167
177: astore        15
179: getstatic     #600
182: astore        16
184: aconst_null
185: astore        17
187: new           #8
190: dup
191: aload         17
193: invokespecial #9
196: astore        18
198: aload         18
200: dconst_1
201: ldc2_w        #32
204: invokevirtual #43
207: aload         18
209: ldc2_w        #10
212: dconst_0
213: dconst_0
214: invokevirtual #54
217: aload         18
219: invokevirtual #59
222: aload         18
224: invokevirtual #25
227: astore        19
229: aload         13
231: aload         16
233: aload         19
235: checkcast     #79
238: invokevirtual #169
241: new           #83
244: dup
245: invokespecial #84
248: ldc           #85
250: invokevirtual #86
253: aload_1
254: invokevirtual #87
257: ldc           #88
259: invokevirtual #86
262: getstatic     #127
265: invokevirtual #87
268: ldc           #85
270: invokevirtual #86
273: invokevirtual #89
276: aload_1
277: getstatic     #127
280: invokevirtual #90
283: invokestatic  #91
286: new           #83
289: dup
290: invokespecial #84
293: ldc           #85
295: invokevirtual #86
298: aload_2
299: invokevirtual #87
302: ldc           #88
304: invokevirtual #86
307: getstatic     #128
310: invokevirtual #87
313: ldc           #85
315: invokevirtual #86
318: invokevirtual #89
321: aload_2
322: getstatic     #128
325: invokevirtual #90
328: invokestatic  #91
331: aload_3
332: invokestatic  #20
335: aload_3
336: invokestatic  #92
339: ldc           #140
341: invokestatic  #23
344: aload_3
345: invokestatic  #93
348: ldc           #140
350: invokestatic  #23
353: new           #83
356: dup
357: invokespecial #84
360: ldc           #85
362: invokevirtual #86
365: aload         5
367: invokevirtual #87
370: ldc           #88
372: invokevirtual #86
375: getstatic     #127
378: invokevirtual #87
381: ldc           #85
383: invokevirtual #86
386: invokevirtual #89
389: aload         5
391: getstatic     #127
394: invokevirtual #90
397: invokestatic  #91
400: new           #83
403: dup
404: invokespecial #84
407: ldc           #85
409: invokevirtual #86
412: aload         6
414: invokevirtual #87
417: ldc           #88
419: invokevirtual #86
422: getstatic     #128
425: invokevirtual #87
428: ldc           #85
430: invokevirtual #86
433: invokevirtual #89
436: aload         6
438: getstatic     #128
441: invokevirtual #90
444: invokestatic  #91
447: aload         7
449: invokestatic  #20
452: aload         7
454: invokestatic  #92
457: ldc           #140
459: invokestatic  #23
462: aload         7
464: invokestatic  #93
467: ldc           #140
469: invokestatic  #23
472: aload         9
474: invokestatic  #20
477: new           #83
480: dup
481: invokespecial #84
484: ldc           #85
486: invokevirtual #86
489: aload         11
491: invokevirtual #87
494: ldc           #88
496: invokevirtual #86
499: getstatic     #378
502: invokevirtual #87
505: ldc           #85
507: invokevirtual #86
510: invokevirtual #89
513: aload         11
515: getstatic     #378
518: invokevirtual #90
521: invokestatic  #91
524: aload         12
526: invokestatic  #20
529: aload         12
531: invokevirtual #289
534: ldc_w         #407
537: invokestatic  #23
540: aload         12
542: invokevirtual #291
545: ldc_w         #407
548: invokestatic  #23
551: aload         12
553: invokevirtual #292
556: ldc_w         #408
559: invokestatic  #23
562: aload         14
564: invokestatic  #171
567: aload         15
569: invokestatic  #171
572: new           #83
575: dup
576: invokespecial #84
579: ldc           #85
581: invokevirtual #86
584: aload         16
586: invokevirtual #87
589: ldc           #88
591: invokevirtual #86
594: getstatic     #600
597: invokevirtual #87
600: ldc           #85
602: invokevirtual #86
605: invokevirtual #89
608: aload         16
610: getstatic     #600
613: invokevirtual #90
616: invokestatic  #91
619: aload         19
621: invokestatic  #20
624: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test342
Start line: 10941
End line: 10959
Method source code: 
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.ITERATOR_EXHAUSTED;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter2.getObservations();
        harmonicFitter2.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter2.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter2.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter2.clearObservations();
        harmonicFitter2.clearObservations();
        harmonicFitter2.addObservedPoint(10.0d, 100.0d, 100.0d);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray21 = harmonicFitter2.getObservations();
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException22 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray21);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ITERATOR_EXHAUSTED + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ITERATOR_EXHAUSTED));
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
        org.junit.Assert.assertNotNull(weightedObservedPointArray21);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #678
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #679
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: invokevirtual #25
44: astore        4
46: aload_3
47: ldc2_w        #32
50: ldc2_w        #10
53: dconst_0
54: invokevirtual #54
57: aload_3
58: ldc2_w        #44
61: ldc2_w        #14
64: invokevirtual #43
67: aload_3
68: ldc2_w        #12
71: dconst_0
72: ldc2_w        #44
75: invokevirtual #54
78: aload_3
79: invokevirtual #59
82: aload_3
83: invokevirtual #59
86: aload_3
87: ldc2_w        #32
90: ldc2_w        #34
93: ldc2_w        #34
96: invokevirtual #54
99: aload_3
100: invokevirtual #25
103: astore        5
105: new           #130
108: dup
109: aload_1
110: aload         5
112: checkcast     #79
115: invokespecial #131
118: astore        6
120: new           #83
123: dup
124: invokespecial #84
127: ldc           #85
129: invokevirtual #86
132: aload_1
133: invokevirtual #87
136: ldc           #88
138: invokevirtual #86
141: getstatic     #679
144: invokevirtual #87
147: ldc           #85
149: invokevirtual #86
152: invokevirtual #89
155: aload_1
156: getstatic     #679
159: invokevirtual #90
162: invokestatic  #91
165: aload         4
167: invokestatic  #20
170: aload         5
172: invokestatic  #20
175: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test343
Start line: 10962
End line: 10982
Method source code: 
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((-1.0d), (double) 10, (double) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint17 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double18 = weightedObservedPoint17.getWeight();
        double double19 = weightedObservedPoint17.getWeight();
        double double20 = weightedObservedPoint17.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint17);
        harmonicFitter1.addObservedPoint(0.0d, (-1.0d), 0.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 35.0d + "'", double18 == 35.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 35.0d + "'", double19 == 35.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #680
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: aload_2
62: ldc2_w        #10
65: ldc2_w        #32
68: ldc2_w        #32
71: invokevirtual #54
74: new           #145
77: dup
78: ldc2_w        #14
81: ldc2_w        #12
84: ldc2_w        #12
87: invokespecial #146
90: astore        4
92: aload         4
94: invokevirtual #148
97: dstore        5
99: aload         4
101: invokevirtual #148
104: dstore        7
106: aload         4
108: invokevirtual #147
111: dstore        9
113: aload_2
114: aload         4
116: invokevirtual #123
119: aload_2
120: dconst_0
121: ldc2_w        #10
124: dconst_0
125: invokevirtual #54
128: aload_3
129: invokestatic  #20
132: new           #83
135: dup
136: invokespecial #84
139: ldc           #85
141: invokevirtual #86
144: dload         5
146: invokevirtual #150
149: ldc           #88
151: invokevirtual #86
154: ldc2_w        #14
157: invokevirtual #150
160: ldc           #85
162: invokevirtual #86
165: invokevirtual #89
168: dload         5
170: ldc2_w        #14
173: dcmpl
174: ifne          181
177: iconst_1
178: goto          182
181: iconst_0
182: invokestatic  #91
185: new           #83
188: dup
189: invokespecial #84
192: ldc           #85
194: invokevirtual #86
197: dload         7
199: invokevirtual #150
202: ldc           #88
204: invokevirtual #86
207: ldc2_w        #14
210: invokevirtual #150
213: ldc           #85
215: invokevirtual #86
218: invokevirtual #89
221: dload         7
223: ldc2_w        #14
226: dcmpl
227: ifne          234
230: iconst_1
231: goto          235
234: iconst_0
235: invokestatic  #91
238: new           #83
241: dup
242: invokespecial #84
245: ldc           #85
247: invokevirtual #86
250: dload         9
252: invokevirtual #150
255: ldc           #88
257: invokevirtual #86
260: ldc2_w        #12
263: invokevirtual #150
266: ldc           #85
268: invokevirtual #86
271: invokevirtual #89
274: dload         9
276: ldc2_w        #12
279: dcmpl
280: ifne          287
283: iconst_1
284: goto          288
287: iconst_0
288: invokestatic  #91
291: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test344
Start line: 10985
End line: 11012
Method source code: 
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray5 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint9 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double10 = weightedObservedPoint9.getX();
        double double11 = weightedObservedPoint9.getWeight();
        double double12 = weightedObservedPoint9.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint9);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) -1);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric19 = null;
        double[] doubleArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = harmonicFitter1.fit((int) (byte) 0, parametric19, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray5);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #681
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #25
48: astore_3
49: new           #145
52: dup
53: ldc2_w        #14
56: ldc2_w        #12
59: ldc2_w        #12
62: invokespecial #146
65: astore        4
67: aload         4
69: invokevirtual #147
72: dstore        5
74: aload         4
76: invokevirtual #148
79: dstore        7
81: aload         4
83: invokevirtual #147
86: dstore        9
88: aload_2
89: aload         4
91: invokevirtual #123
94: aload_2
95: dconst_0
96: ldc2_w        #10
99: invokevirtual #43
102: aload_2
103: invokevirtual #59
106: aconst_null
107: astore        11
109: aconst_null
110: astore        12
112: aload_2
113: iconst_0
114: aload         11
116: aload         12
118: invokevirtual #40
121: astore        13
123: ldc           #17
125: invokestatic  #18
128: goto          133
131: astore        13
133: aload_3
134: invokestatic  #20
137: new           #83
140: dup
141: invokespecial #84
144: ldc           #85
146: invokevirtual #86
149: dload         5
151: invokevirtual #150
154: ldc           #88
156: invokevirtual #86
159: ldc2_w        #12
162: invokevirtual #150
165: ldc           #85
167: invokevirtual #86
170: invokevirtual #89
173: dload         5
175: ldc2_w        #12
178: dcmpl
179: ifne          186
182: iconst_1
183: goto          187
186: iconst_0
187: invokestatic  #91
190: new           #83
193: dup
194: invokespecial #84
197: ldc           #85
199: invokevirtual #86
202: dload         7
204: invokevirtual #150
207: ldc           #88
209: invokevirtual #86
212: ldc2_w        #14
215: invokevirtual #150
218: ldc           #85
220: invokevirtual #86
223: invokevirtual #89
226: dload         7
228: ldc2_w        #14
231: dcmpl
232: ifne          239
235: iconst_1
236: goto          240
239: iconst_0
240: invokestatic  #91
243: new           #83
246: dup
247: invokespecial #84
250: ldc           #85
252: invokevirtual #86
255: dload         9
257: invokevirtual #150
260: ldc           #88
262: invokevirtual #86
265: ldc2_w        #12
268: invokevirtual #150
271: ldc           #85
273: invokevirtual #86
276: invokevirtual #89
279: dload         9
281: ldc2_w        #12
284: dcmpl
285: ifne          292
288: iconst_1
289: goto          293
292: iconst_0
293: invokestatic  #91
296: return
Exception table:
from    to  target type
112   128   131   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test345
Start line: 11015
End line: 11034
Method source code: 
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser11 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #682
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: dconst_0
50: ldc2_w        #10
53: invokevirtual #43
56: aload_2
57: invokevirtual #25
60: astore_3
61: aload_2
62: invokevirtual #25
65: astore        4
67: new           #69
70: dup
71: aload         4
73: invokespecial #70
76: astore        5
78: ldc           #64
80: invokestatic  #18
83: goto          88
86: astore        5
88: aload_3
89: invokestatic  #20
92: aload         4
94: invokestatic  #20
97: return
Exception table:
from    to  target type
67    83    86   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test346
Start line: 11037
End line: 11059
Method source code: 
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        double[] doubleArray17 = new double[] { 52.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = harmonicFitter1.fit(doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[52.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #683
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: invokevirtual #59
81: iconst_1
82: newarray       double
84: dup
85: iconst_0
86: ldc2_w        #12
89: dastore
90: astore        4
92: aload_2
93: aload         4
95: invokevirtual #16
98: astore        5
100: ldc           #17
102: invokestatic  #18
105: goto          110
108: astore        5
110: aload_3
111: invokestatic  #20
114: aload         4
116: invokestatic  #20
119: aload         4
121: invokestatic  #21
124: ldc_w         #684
127: invokestatic  #23
130: return
Exception table:
from    to  target type
92   105   108   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test347
Start line: 11062
End line: 11079
Method source code: 
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 0, (double) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #685
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: dconst_0
62: ldc2_w        #32
65: invokevirtual #43
68: aload_2
69: invokevirtual #26
72: astore_3
73: ldc           #64
75: invokestatic  #18
78: goto          82
81: astore_3
82: return
Exception table:
from    to  target type
68    78    81   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test348
Start line: 11082
End line: 11106
Method source code: 
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        double double14 = weightedObservedPoint8.getX();
        double double15 = weightedObservedPoint8.getX();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 52.0d + "'", double14 == 52.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #686
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload         5
105: invokevirtual #147
108: dstore        14
110: aload         5
112: invokevirtual #147
115: dstore        16
117: aload_3
118: invokestatic  #20
121: aload         4
123: invokestatic  #20
126: new           #83
129: dup
130: invokespecial #84
133: ldc           #85
135: invokevirtual #86
138: dload         6
140: invokevirtual #150
143: ldc           #88
145: invokevirtual #86
148: ldc2_w        #12
151: invokevirtual #150
154: ldc           #85
156: invokevirtual #86
159: invokevirtual #89
162: dload         6
164: ldc2_w        #12
167: dcmpl
168: ifne          175
171: iconst_1
172: goto          176
175: iconst_0
176: invokestatic  #91
179: new           #83
182: dup
183: invokespecial #84
186: ldc           #85
188: invokevirtual #86
191: dload         8
193: invokevirtual #150
196: ldc           #88
198: invokevirtual #86
201: ldc2_w        #14
204: invokevirtual #150
207: ldc           #85
209: invokevirtual #86
212: invokevirtual #89
215: dload         8
217: ldc2_w        #14
220: dcmpl
221: ifne          228
224: iconst_1
225: goto          229
228: iconst_0
229: invokestatic  #91
232: new           #83
235: dup
236: invokespecial #84
239: ldc           #85
241: invokevirtual #86
244: dload         10
246: invokevirtual #150
249: ldc           #88
251: invokevirtual #86
254: ldc2_w        #14
257: invokevirtual #150
260: ldc           #85
262: invokevirtual #86
265: invokevirtual #89
268: dload         10
270: ldc2_w        #14
273: dcmpl
274: ifne          281
277: iconst_1
278: goto          282
281: iconst_0
282: invokestatic  #91
285: new           #83
288: dup
289: invokespecial #84
292: ldc           #85
294: invokevirtual #86
297: dload         12
299: invokevirtual #150
302: ldc           #88
304: invokevirtual #86
307: ldc2_w        #12
310: invokevirtual #150
313: ldc           #85
315: invokevirtual #86
318: invokevirtual #89
321: dload         12
323: ldc2_w        #12
326: dcmpl
327: ifne          334
330: iconst_1
331: goto          335
334: iconst_0
335: invokestatic  #91
338: new           #83
341: dup
342: invokespecial #84
345: ldc           #85
347: invokevirtual #86
350: dload         14
352: invokevirtual #150
355: ldc           #88
357: invokevirtual #86
360: ldc2_w        #12
363: invokevirtual #150
366: ldc           #85
368: invokevirtual #86
371: invokevirtual #89
374: dload         14
376: ldc2_w        #12
379: dcmpl
380: ifne          387
383: iconst_1
384: goto          388
387: iconst_0
388: invokestatic  #91
391: new           #83
394: dup
395: invokespecial #84
398: ldc           #85
400: invokevirtual #86
403: dload         16
405: invokevirtual #150
408: ldc           #88
410: invokevirtual #86
413: ldc2_w        #12
416: invokevirtual #150
419: ldc           #85
421: invokevirtual #86
424: invokevirtual #89
427: dload         16
429: ldc2_w        #12
432: dcmpl
433: ifne          440
436: iconst_1
437: goto          441
440: iconst_0
441: invokestatic  #91
444: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test349
Start line: 11109
End line: 11120
Method source code: 
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) '#', 1.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #687
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: dconst_0
50: ldc2_w        #10
53: invokevirtual #43
56: aload_2
57: invokevirtual #25
60: astore_3
61: aload_2
62: ldc2_w        #14
65: dconst_1
66: invokevirtual #43
69: aload_3
70: invokestatic  #20
73: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test350
Start line: 11123
End line: 11207
Method source code: 
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.COVARIANCE_MATRIX;
        java.lang.String str1 = localizedFormats0.getSourceString();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats3 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray5 = new java.lang.Object[] { localizedFormats3, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats2, objArray5);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray10 = new java.lang.Object[] { localizedFormats8, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException11 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats7, objArray10);
        mathIllegalArgumentException6.addSuppressed((java.lang.Throwable) mathIllegalArgumentException11);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext13 = mathIllegalArgumentException6.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext14 = mathIllegalArgumentException6.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext15 = mathIllegalArgumentException6.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.NON_SQUARE_MATRIX;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats18 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats19 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray22 = new java.lang.Object[] { localizedFormats20, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException23 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats19, objArray22);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats24 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats25 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray27 = new java.lang.Object[] { localizedFormats25, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException28 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats24, objArray27);
        mathIllegalArgumentException23.addSuppressed((java.lang.Throwable) mathIllegalArgumentException28);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats31 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray33 = new java.lang.Object[] { localizedFormats31, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException34 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException28, (org.apache.commons.math3.exception.util.Localizable) localizedFormats30, objArray33);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException35 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats18, objArray33);
        java.lang.Object[] objArray36 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray33);
        org.apache.commons.math3.exception.ZeroException zeroException37 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats17, objArray36);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats38 = org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer39 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter40 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer39);
        harmonicFitter40.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter40.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter40.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray48 = harmonicFitter40.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException49 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) zeroException37, (org.apache.commons.math3.exception.util.Localizable) localizedFormats38, (java.lang.Object[]) weightedObservedPointArray48);
        exceptionContext15.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats16, (java.lang.Object[]) weightedObservedPointArray48);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException51 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray48);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.COVARIANCE_MATRIX + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.COVARIANCE_MATRIX));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "covariance matrix" + "'", str1, "covariance matrix");
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats3 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats3.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext13);
        org.junit.Assert.assertNotNull(exceptionContext14);
        org.junit.Assert.assertNotNull(exceptionContext15);
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NON_SQUARE_MATRIX + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NON_SQUARE_MATRIX));
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats18 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats18.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats19 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats19.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats24 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats24.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats25 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats25.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats31 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats31.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats38 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATION + "'", localizedFormats38.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray48);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #688
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #689
28: astore_1
29: aload_1
30: invokevirtual #301
33: astore_2
34: getstatic     #127
37: astore_3
38: getstatic     #128
41: astore        4
43: iconst_2
44: anewarray     #5
47: dup
48: iconst_0
49: aload         4
51: aastore
52: dup
53: iconst_1
54: lconst_1
55: invokestatic  #129
58: aastore
59: astore        5
61: new           #130
64: dup
65: aload_3
66: aload         5
68: invokespecial #131
71: astore        6
73: getstatic     #127
76: astore        7
78: getstatic     #128
81: astore        8
83: iconst_2
84: anewarray     #5
87: dup
88: iconst_0
89: aload         8
91: aastore
92: dup
93: iconst_1
94: lconst_1
95: invokestatic  #129
98: aastore
99: astore        9
101: new           #130
104: dup
105: aload         7
107: aload         9
109: invokespecial #131
112: astore        10
114: aload         6
116: aload         10
118: invokevirtual #132
121: aload         6
123: invokevirtual #165
126: astore        11
128: aload         6
130: invokevirtual #165
133: astore        12
135: aload         6
137: invokevirtual #165
140: astore        13
142: getstatic     #690
145: astore        14
147: getstatic     #125
150: astore        15
152: getstatic     #126
155: astore        16
157: getstatic     #127
160: astore        17
162: getstatic     #128
165: astore        18
167: iconst_2
168: anewarray     #5
171: dup
172: iconst_0
173: aload         18
175: aastore
176: dup
177: iconst_1
178: lconst_1
179: invokestatic  #129
182: aastore
183: astore        19
185: new           #130
188: dup
189: aload         17
191: aload         19
193: invokespecial #131
196: astore        20
198: getstatic     #127
201: astore        21
203: getstatic     #128
206: astore        22
208: iconst_2
209: anewarray     #5
212: dup
213: iconst_0
214: aload         22
216: aastore
217: dup
218: iconst_1
219: lconst_1
220: invokestatic  #129
223: aastore
224: astore        23
226: new           #130
229: dup
230: aload         21
232: aload         23
234: invokespecial #131
237: astore        24
239: aload         20
241: aload         24
243: invokevirtual #132
246: getstatic     #133
249: astore        25
251: getstatic     #134
254: astore        26
256: iconst_2
257: anewarray     #5
260: dup
261: iconst_0
262: aload         26
264: aastore
265: dup
266: iconst_1
267: bipush        10
269: invokestatic  #135
272: aastore
273: astore        27
275: new           #136
278: dup
279: aload         24
281: aload         25
283: aload         27
285: invokespecial #137
288: astore        28
290: new           #136
293: dup
294: aload         16
296: aload         27
298: invokespecial #138
301: astore        29
303: aload         27
305: invokestatic  #80
308: astore        30
310: new           #81
313: dup
314: aload         15
316: aload         30
318: invokespecial #82
321: astore        31
323: getstatic     #139
326: astore        32
328: aconst_null
329: astore        33
331: new           #8
334: dup
335: aload         33
337: invokespecial #9
340: astore        34
342: aload         34
344: dconst_1
345: ldc2_w        #32
348: invokevirtual #43
351: aload         34
353: dconst_0
354: ldc2_w        #34
357: invokevirtual #43
360: aload         34
362: invokevirtual #59
365: aload         34
367: invokevirtual #25
370: astore        35
372: new           #136
375: dup
376: aload         31
378: aload         32
380: aload         35
382: checkcast     #79
385: invokespecial #137
388: astore        36
390: aload         13
392: aload         14
394: aload         35
396: checkcast     #79
399: invokevirtual #169
402: new           #130
405: dup
406: aload_1
407: aload         35
409: checkcast     #79
412: invokespecial #131
415: astore        37
417: new           #83
420: dup
421: invokespecial #84
424: ldc           #85
426: invokevirtual #86
429: aload_1
430: invokevirtual #87
433: ldc           #88
435: invokevirtual #86
438: getstatic     #689
441: invokevirtual #87
444: ldc           #85
446: invokevirtual #86
449: invokevirtual #89
452: aload_1
453: getstatic     #689
456: invokevirtual #90
459: invokestatic  #91
462: new           #83
465: dup
466: invokespecial #84
469: ldc           #85
471: invokevirtual #86
474: aload_2
475: invokevirtual #86
478: ldc_w         #691
481: invokevirtual #86
484: invokevirtual #89
487: aload_2
488: ldc_w         #692
491: invokestatic  #245
494: new           #83
497: dup
498: invokespecial #84
501: ldc           #85
503: invokevirtual #86
506: aload_3
507: invokevirtual #87
510: ldc           #88
512: invokevirtual #86
515: getstatic     #127
518: invokevirtual #87
521: ldc           #85
523: invokevirtual #86
526: invokevirtual #89
529: aload_3
530: getstatic     #127
533: invokevirtual #90
536: invokestatic  #91
539: new           #83
542: dup
543: invokespecial #84
546: ldc           #85
548: invokevirtual #86
551: aload         4
553: invokevirtual #87
556: ldc           #88
558: invokevirtual #86
561: getstatic     #128
564: invokevirtual #87
567: ldc           #85
569: invokevirtual #86
572: invokevirtual #89
575: aload         4
577: getstatic     #128
580: invokevirtual #90
583: invokestatic  #91
586: aload         5
588: invokestatic  #20
591: aload         5
593: invokestatic  #92
596: ldc           #140
598: invokestatic  #23
601: aload         5
603: invokestatic  #93
606: ldc           #140
608: invokestatic  #23
611: new           #83
614: dup
615: invokespecial #84
618: ldc           #85
620: invokevirtual #86
623: aload         7
625: invokevirtual #87
628: ldc           #88
630: invokevirtual #86
633: getstatic     #127
636: invokevirtual #87
639: ldc           #85
641: invokevirtual #86
644: invokevirtual #89
647: aload         7
649: getstatic     #127
652: invokevirtual #90
655: invokestatic  #91
658: new           #83
661: dup
662: invokespecial #84
665: ldc           #85
667: invokevirtual #86
670: aload         8
672: invokevirtual #87
675: ldc           #88
677: invokevirtual #86
680: getstatic     #128
683: invokevirtual #87
686: ldc           #85
688: invokevirtual #86
691: invokevirtual #89
694: aload         8
696: getstatic     #128
699: invokevirtual #90
702: invokestatic  #91
705: aload         9
707: invokestatic  #20
710: aload         9
712: invokestatic  #92
715: ldc           #140
717: invokestatic  #23
720: aload         9
722: invokestatic  #93
725: ldc           #140
727: invokestatic  #23
730: aload         11
732: invokestatic  #20
735: aload         12
737: invokestatic  #20
740: aload         13
742: invokestatic  #20
745: new           #83
748: dup
749: invokespecial #84
752: ldc           #85
754: invokevirtual #86
757: aload         14
759: invokevirtual #87
762: ldc           #88
764: invokevirtual #86
767: getstatic     #690
770: invokevirtual #87
773: ldc           #85
775: invokevirtual #86
778: invokevirtual #89
781: aload         14
783: getstatic     #690
786: invokevirtual #90
789: invokestatic  #91
792: new           #83
795: dup
796: invokespecial #84
799: ldc           #85
801: invokevirtual #86
804: aload         15
806: invokevirtual #87
809: ldc           #88
811: invokevirtual #86
814: getstatic     #125
817: invokevirtual #87
820: ldc           #85
822: invokevirtual #86
825: invokevirtual #89
828: aload         15
830: getstatic     #125
833: invokevirtual #90
836: invokestatic  #91
839: new           #83
842: dup
843: invokespecial #84
846: ldc           #85
848: invokevirtual #86
851: aload         16
853: invokevirtual #87
856: ldc           #88
858: invokevirtual #86
861: getstatic     #126
864: invokevirtual #87
867: ldc           #85
869: invokevirtual #86
872: invokevirtual #89
875: aload         16
877: getstatic     #126
880: invokevirtual #90
883: invokestatic  #91
886: new           #83
889: dup
890: invokespecial #84
893: ldc           #85
895: invokevirtual #86
898: aload         17
900: invokevirtual #87
903: ldc           #88
905: invokevirtual #86
908: getstatic     #127
911: invokevirtual #87
914: ldc           #85
916: invokevirtual #86
919: invokevirtual #89
922: aload         17
924: getstatic     #127
927: invokevirtual #90
930: invokestatic  #91
933: new           #83
936: dup
937: invokespecial #84
940: ldc           #85
942: invokevirtual #86
945: aload         18
947: invokevirtual #87
950: ldc           #88
952: invokevirtual #86
955: getstatic     #128
958: invokevirtual #87
961: ldc           #85
963: invokevirtual #86
966: invokevirtual #89
969: aload         18
971: getstatic     #128
974: invokevirtual #90
977: invokestatic  #91
980: aload         19
982: invokestatic  #20
985: aload         19
987: invokestatic  #92
990: ldc           #140
992: invokestatic  #23
995: aload         19
997: invokestatic  #93
1000: ldc           #140
1002: invokestatic  #23
1005: new           #83
1008: dup
1009: invokespecial #84
1012: ldc           #85
1014: invokevirtual #86
1017: aload         21
1019: invokevirtual #87
1022: ldc           #88
1024: invokevirtual #86
1027: getstatic     #127
1030: invokevirtual #87
1033: ldc           #85
1035: invokevirtual #86
1038: invokevirtual #89
1041: aload         21
1043: getstatic     #127
1046: invokevirtual #90
1049: invokestatic  #91
1052: new           #83
1055: dup
1056: invokespecial #84
1059: ldc           #85
1061: invokevirtual #86
1064: aload         22
1066: invokevirtual #87
1069: ldc           #88
1071: invokevirtual #86
1074: getstatic     #128
1077: invokevirtual #87
1080: ldc           #85
1082: invokevirtual #86
1085: invokevirtual #89
1088: aload         22
1090: getstatic     #128
1093: invokevirtual #90
1096: invokestatic  #91
1099: aload         23
1101: invokestatic  #20
1104: aload         23
1106: invokestatic  #92
1109: ldc           #140
1111: invokestatic  #23
1114: aload         23
1116: invokestatic  #93
1119: ldc           #140
1121: invokestatic  #23
1124: new           #83
1127: dup
1128: invokespecial #84
1131: ldc           #85
1133: invokevirtual #86
1136: aload         25
1138: invokevirtual #87
1141: ldc           #88
1143: invokevirtual #86
1146: getstatic     #133
1149: invokevirtual #87
1152: ldc           #85
1154: invokevirtual #86
1157: invokevirtual #89
1160: aload         25
1162: getstatic     #133
1165: invokevirtual #90
1168: invokestatic  #91
1171: new           #83
1174: dup
1175: invokespecial #84
1178: ldc           #85
1180: invokevirtual #86
1183: aload         26
1185: invokevirtual #87
1188: ldc           #88
1190: invokevirtual #86
1193: getstatic     #134
1196: invokevirtual #87
1199: ldc           #85
1201: invokevirtual #86
1204: invokevirtual #89
1207: aload         26
1209: getstatic     #134
1212: invokevirtual #90
1215: invokestatic  #91
1218: aload         27
1220: invokestatic  #20
1223: aload         27
1225: invokestatic  #92
1228: ldc           #141
1230: invokestatic  #23
1233: aload         27
1235: invokestatic  #93
1238: ldc           #141
1240: invokestatic  #23
1243: aload         30
1245: invokestatic  #20
1248: aload         30
1250: invokestatic  #92
1253: ldc           #141
1255: invokestatic  #23
1258: aload         30
1260: invokestatic  #93
1263: ldc           #141
1265: invokestatic  #23
1268: new           #83
1271: dup
1272: invokespecial #84
1275: ldc           #85
1277: invokevirtual #86
1280: aload         32
1282: invokevirtual #87
1285: ldc           #88
1287: invokevirtual #86
1290: getstatic     #139
1293: invokevirtual #87
1296: ldc           #85
1298: invokevirtual #86
1301: invokevirtual #89
1304: aload         32
1306: getstatic     #139
1309: invokevirtual #90
1312: invokestatic  #91
1315: aload         35
1317: invokestatic  #20
1320: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test351
Start line: 11210
End line: 11231
Method source code: 
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        java.lang.Object[] objArray11 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray10);
        org.apache.commons.math3.exception.ZeroException zeroException12 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray10);
        java.lang.Object[] objArray13 = null;
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException14 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray13);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext15 = mathIllegalStateException14.getContext();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(exceptionContext15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #693
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #220
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: dconst_1
42: ldc2_w        #32
45: invokevirtual #43
48: aload_3
49: dconst_0
50: ldc2_w        #34
53: invokevirtual #43
56: aload_3
57: invokevirtual #59
60: aload_3
61: invokevirtual #25
64: astore        4
66: aload         4
68: checkcast     #79
71: invokestatic  #80
74: astore        5
76: new           #81
79: dup
80: aload_1
81: aload         4
83: checkcast     #79
86: invokespecial #82
89: astore        6
91: aconst_null
92: astore        7
94: new           #136
97: dup
98: aload_1
99: aload         7
101: invokespecial #138
104: astore        8
106: aload         8
108: invokevirtual #282
111: astore        9
113: new           #83
116: dup
117: invokespecial #84
120: ldc           #85
122: invokevirtual #86
125: aload_1
126: invokevirtual #87
129: ldc           #88
131: invokevirtual #86
134: getstatic     #220
137: invokevirtual #87
140: ldc           #85
142: invokevirtual #86
145: invokevirtual #89
148: aload_1
149: getstatic     #220
152: invokevirtual #90
155: invokestatic  #91
158: aload         4
160: invokestatic  #20
163: aload         5
165: invokestatic  #20
168: aload         5
170: invokestatic  #92
173: ldc           #74
175: invokestatic  #23
178: aload         5
180: invokestatic  #93
183: ldc           #74
185: invokestatic  #23
188: aload         9
190: invokestatic  #20
193: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test352
Start line: 11234
End line: 11267
Method source code: 
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint15 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double16 = weightedObservedPoint15.getX();
        double double17 = weightedObservedPoint15.getY();
        double double18 = weightedObservedPoint15.getX();
        double double19 = weightedObservedPoint15.getY();
        double double20 = weightedObservedPoint15.getX();
        double double21 = weightedObservedPoint15.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint15);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric23 = null;
        double[] doubleArray28 = new double[] { ' ', 1.0f, 35.0d, 97.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray29 = harmonicFitter1.fit(parametric23, doubleArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[32.0, 1.0, 35.0, 97.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #694
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: dconst_0
54: ldc2_w        #12
57: ldc2_w        #10
60: invokevirtual #54
63: new           #145
66: dup
67: ldc2_w        #14
70: ldc2_w        #12
73: ldc2_w        #12
76: invokespecial #146
79: astore_3
80: aload_3
81: invokevirtual #147
84: dstore        4
86: aload_3
87: invokevirtual #149
90: dstore        6
92: aload_3
93: invokevirtual #147
96: dstore        8
98: aload_3
99: invokevirtual #149
102: dstore        10
104: aload_3
105: invokevirtual #147
108: dstore        12
110: aload_3
111: invokevirtual #147
114: dstore        14
116: aload_2
117: aload_3
118: invokevirtual #123
121: aconst_null
122: astore        16
124: iconst_4
125: newarray       double
127: dup
128: iconst_0
129: ldc2_w        #38
132: dastore
133: dup
134: iconst_1
135: dconst_1
136: dastore
137: dup
138: iconst_2
139: ldc2_w        #14
142: dastore
143: dup
144: iconst_3
145: ldc2_w        #44
148: dastore
149: astore        17
151: aload_2
152: aload         16
154: aload         17
156: invokevirtual #30
159: astore        18
161: ldc           #17
163: invokestatic  #18
166: goto          171
169: astore        18
171: new           #83
174: dup
175: invokespecial #84
178: ldc           #85
180: invokevirtual #86
183: dload         4
185: invokevirtual #150
188: ldc           #88
190: invokevirtual #86
193: ldc2_w        #12
196: invokevirtual #150
199: ldc           #85
201: invokevirtual #86
204: invokevirtual #89
207: dload         4
209: ldc2_w        #12
212: dcmpl
213: ifne          220
216: iconst_1
217: goto          221
220: iconst_0
221: invokestatic  #91
224: new           #83
227: dup
228: invokespecial #84
231: ldc           #85
233: invokevirtual #86
236: dload         6
238: invokevirtual #150
241: ldc           #88
243: invokevirtual #86
246: ldc2_w        #12
249: invokevirtual #150
252: ldc           #85
254: invokevirtual #86
257: invokevirtual #89
260: dload         6
262: ldc2_w        #12
265: dcmpl
266: ifne          273
269: iconst_1
270: goto          274
273: iconst_0
274: invokestatic  #91
277: new           #83
280: dup
281: invokespecial #84
284: ldc           #85
286: invokevirtual #86
289: dload         8
291: invokevirtual #150
294: ldc           #88
296: invokevirtual #86
299: ldc2_w        #12
302: invokevirtual #150
305: ldc           #85
307: invokevirtual #86
310: invokevirtual #89
313: dload         8
315: ldc2_w        #12
318: dcmpl
319: ifne          326
322: iconst_1
323: goto          327
326: iconst_0
327: invokestatic  #91
330: new           #83
333: dup
334: invokespecial #84
337: ldc           #85
339: invokevirtual #86
342: dload         10
344: invokevirtual #150
347: ldc           #88
349: invokevirtual #86
352: ldc2_w        #12
355: invokevirtual #150
358: ldc           #85
360: invokevirtual #86
363: invokevirtual #89
366: dload         10
368: ldc2_w        #12
371: dcmpl
372: ifne          379
375: iconst_1
376: goto          380
379: iconst_0
380: invokestatic  #91
383: new           #83
386: dup
387: invokespecial #84
390: ldc           #85
392: invokevirtual #86
395: dload         12
397: invokevirtual #150
400: ldc           #88
402: invokevirtual #86
405: ldc2_w        #12
408: invokevirtual #150
411: ldc           #85
413: invokevirtual #86
416: invokevirtual #89
419: dload         12
421: ldc2_w        #12
424: dcmpl
425: ifne          432
428: iconst_1
429: goto          433
432: iconst_0
433: invokestatic  #91
436: new           #83
439: dup
440: invokespecial #84
443: ldc           #85
445: invokevirtual #86
448: dload         14
450: invokevirtual #150
453: ldc           #88
455: invokevirtual #86
458: ldc2_w        #12
461: invokevirtual #150
464: ldc           #85
466: invokevirtual #86
469: invokevirtual #89
472: dload         14
474: ldc2_w        #12
477: dcmpl
478: ifne          485
481: iconst_1
482: goto          486
485: iconst_0
486: invokestatic  #91
489: aload         17
491: invokestatic  #20
494: aload         17
496: invokestatic  #21
499: ldc_w         #695
502: invokestatic  #23
505: return
Exception table:
from    to  target type
151   166   169   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test353
Start line: 11270
End line: 11416
Method source code: 
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats11 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray14 = new java.lang.Object[] { localizedFormats12, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException15 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException9, (org.apache.commons.math3.exception.util.Localizable) localizedFormats11, objArray14);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext16 = mathIllegalStateException15.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats18 = org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE;
        exceptionContext16.setValue("org.apache.commons.math3.exception.MathIllegalArgumentException: overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1", (java.lang.Object) localizedFormats18);
        java.lang.Throwable throwable20 = exceptionContext16.getThrowable();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray25 = new java.lang.Object[] { localizedFormats23, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException26 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats22, objArray25);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats27 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats28 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats31 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray32 = new java.lang.Object[] { localizedFormats28, localizedFormats29, localizedFormats30, localizedFormats31 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException33 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException26, (org.apache.commons.math3.exception.util.Localizable) localizedFormats27, objArray32);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats34 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException38 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray39 = numberIsTooSmallException38.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException40 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalStateException33, (org.apache.commons.math3.exception.util.Localizable) localizedFormats34, (java.lang.Object[]) throwableArray39);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext41 = mathIllegalStateException33.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats42 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION;
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.ZeroException zeroException44 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats42, objArray43);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException48 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats42, (java.lang.Number) (short) 0, (java.lang.Number) 0L, true);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException52 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray53 = numberIsTooSmallException52.getSuppressed();
        java.lang.Object[] objArray54 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) throwableArray53);
        exceptionContext41.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats42, objArray54);
        java.util.Set<java.lang.String> strSet56 = exceptionContext41.getKeys();
        java.lang.Object obj58 = exceptionContext41.getValue("class ({0}) does not implement Comparable");
        java.lang.Throwable throwable59 = exceptionContext41.getThrowable();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats60 = org.apache.commons.math3.exception.util.LocalizedFormats.DISTRIBUTION_NOT_LOADED;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats61 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats62 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray64 = new java.lang.Object[] { localizedFormats62, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException65 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats61, objArray64);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats66 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats67 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats68 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats69 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats70 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray71 = new java.lang.Object[] { localizedFormats67, localizedFormats68, localizedFormats69, localizedFormats70 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException72 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException65, (org.apache.commons.math3.exception.util.Localizable) localizedFormats66, objArray71);
        exceptionContext41.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats60, objArray71);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats74 = org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY;
        java.lang.Number number76 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException78 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number76, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats79 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer80 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter81 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer80);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray82 = harmonicFitter81.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray83 = harmonicFitter81.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray84 = harmonicFitter81.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException85 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException78, (org.apache.commons.math3.exception.util.Localizable) localizedFormats79, (java.lang.Object[]) weightedObservedPointArray84);
        exceptionContext41.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats74, (java.lang.Object[]) weightedObservedPointArray84);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException87 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable20, (org.apache.commons.math3.exception.util.Localizable) localizedFormats21, (java.lang.Object[]) weightedObservedPointArray84);
        java.lang.String str88 = mathIllegalStateException87.toString();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats11 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats11.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(exceptionContext16);
        org.junit.Assert.assertTrue("'" + localizedFormats18 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE + "'", localizedFormats18.equals(org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE));
        org.junit.Assert.assertNotNull(throwable20);
        org.junit.Assert.assertEquals(throwable20.getLocalizedMessage(), "function is not differentiable");
        org.junit.Assert.assertEquals(throwable20.getMessage(), "function is not differentiable");
        org.junit.Assert.assertEquals(throwable20.toString(), "org.apache.commons.math3.exception.MathIllegalStateException: function is not differentiable");
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES));
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats27 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats27.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats28 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats28.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats31 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats31.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertTrue("'" + localizedFormats34 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE + "'", localizedFormats34.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE));
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(exceptionContext41);
        org.junit.Assert.assertTrue("'" + localizedFormats42 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION + "'", localizedFormats42.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION));
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(throwable59);
        org.junit.Assert.assertEquals(throwable59.getLocalizedMessage(), "overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive: distribution not loaded: empty selected column index array");
        org.junit.Assert.assertEquals(throwable59.getMessage(), "overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive: distribution not loaded: empty selected column index array");
        org.junit.Assert.assertEquals(throwable59.toString(), "org.apache.commons.math3.exception.MathIllegalStateException: overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive: distribution not loaded: empty selected column index array");
        org.junit.Assert.assertTrue("'" + localizedFormats60 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.DISTRIBUTION_NOT_LOADED + "'", localizedFormats60.equals(org.apache.commons.math3.exception.util.LocalizedFormats.DISTRIBUTION_NOT_LOADED));
        org.junit.Assert.assertTrue("'" + localizedFormats61 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats61.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats62 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats62.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats66 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats66.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats67 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats67.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats68 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats68.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats69 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats69.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats70 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats70.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertTrue("'" + localizedFormats74 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY + "'", localizedFormats74.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY));
        org.junit.Assert.assertTrue("'" + localizedFormats79 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats79.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray82);
        org.junit.Assert.assertNotNull(weightedObservedPointArray83);
        org.junit.Assert.assertNotNull(weightedObservedPointArray84);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org.apache.commons.math3.exception.MathIllegalStateException: {0}x{1} and {2}x{3} matrices are not addition compatible" + "'", str88, "org.apache.commons.math3.exception.MathIllegalStateException: {0}x{1} and {2}x{3} matrices are not addition compatible");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #696
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: getstatic     #133
111: astore        9
113: getstatic     #134
116: astore        10
118: iconst_2
119: anewarray     #5
122: dup
123: iconst_0
124: aload         10
126: aastore
127: dup
128: iconst_1
129: bipush        10
131: invokestatic  #135
134: aastore
135: astore        11
137: new           #136
140: dup
141: aload         8
143: aload         9
145: aload         11
147: invokespecial #137
150: astore        12
152: aload         12
154: invokevirtual #282
157: astore        13
159: getstatic     #382
162: astore        14
164: aload         13
166: ldc_w         #408
169: aload         14
171: invokevirtual #373
174: aload         13
176: invokevirtual #288
179: astore        15
181: getstatic     #363
184: astore        16
186: getstatic     #127
189: astore        17
191: getstatic     #128
194: astore        18
196: iconst_2
197: anewarray     #5
200: dup
201: iconst_0
202: aload         18
204: aastore
205: dup
206: iconst_1
207: lconst_1
208: invokestatic  #129
211: aastore
212: astore        19
214: new           #130
217: dup
218: aload         17
220: aload         19
222: invokespecial #131
225: astore        20
227: getstatic     #328
230: astore        21
232: getstatic     #329
235: astore        22
237: getstatic     #330
240: astore        23
242: getstatic     #331
245: astore        24
247: getstatic     #332
250: astore        25
252: iconst_4
253: anewarray     #5
256: dup
257: iconst_0
258: aload         22
260: aastore
261: dup
262: iconst_1
263: aload         23
265: aastore
266: dup
267: iconst_2
268: aload         24
270: aastore
271: dup
272: iconst_3
273: aload         25
275: aastore
276: astore        26
278: new           #136
281: dup
282: aload         20
284: aload         21
286: aload         26
288: invokespecial #137
291: astore        27
293: getstatic     #333
296: astore        28
298: new           #28
301: dup
302: ldc2_w        #277
305: invokestatic  #129
308: bipush        10
310: invokestatic  #159
313: iconst_1
314: invokespecial #160
317: astore        29
319: aload         29
321: invokevirtual #334
324: astore        30
326: new           #136
329: dup
330: aload         27
332: aload         28
334: aload         30
336: checkcast     #79
339: invokespecial #137
342: astore        31
344: aload         27
346: invokevirtual #282
349: astore        32
351: getstatic     #335
354: astore        33
356: iconst_0
357: anewarray     #5
360: astore        34
362: new           #81
365: dup
366: aload         33
368: aload         34
370: invokespecial #82
373: astore        35
375: new           #28
378: dup
379: aload         33
381: iconst_0
382: invokestatic  #194
385: lconst_0
386: invokestatic  #129
389: iconst_1
390: invokespecial #195
393: astore        36
395: new           #28
398: dup
399: ldc2_w        #277
402: invokestatic  #129
405: bipush        10
407: invokestatic  #159
410: iconst_1
411: invokespecial #160
414: astore        37
416: aload         37
418: invokevirtual #334
421: astore        38
423: aload         38
425: checkcast     #79
428: invokestatic  #80
431: astore        39
433: aload         32
435: aload         33
437: aload         39
439: invokevirtual #169
442: aload         32
444: invokevirtual #370
447: astore        40
449: aload         32
451: ldc_w         #371
454: invokevirtual #167
457: astore        41
459: aload         32
461: invokevirtual #288
464: astore        42
466: getstatic     #526
469: astore        43
471: getstatic     #127
474: astore        44
476: getstatic     #128
479: astore        45
481: iconst_2
482: anewarray     #5
485: dup
486: iconst_0
487: aload         45
489: aastore
490: dup
491: iconst_1
492: lconst_1
493: invokestatic  #129
496: aastore
497: astore        46
499: new           #130
502: dup
503: aload         44
505: aload         46
507: invokespecial #131
510: astore        47
512: getstatic     #328
515: astore        48
517: getstatic     #329
520: astore        49
522: getstatic     #330
525: astore        50
527: getstatic     #331
530: astore        51
532: getstatic     #332
535: astore        52
537: iconst_4
538: anewarray     #5
541: dup
542: iconst_0
543: aload         49
545: aastore
546: dup
547: iconst_1
548: aload         50
550: aastore
551: dup
552: iconst_2
553: aload         51
555: aastore
556: dup
557: iconst_3
558: aload         52
560: aastore
561: astore        53
563: new           #136
566: dup
567: aload         47
569: aload         48
571: aload         53
573: invokespecial #137
576: astore        54
578: aload         32
580: aload         43
582: aload         53
584: invokevirtual #169
587: getstatic     #527
590: astore        55
592: aconst_null
593: astore        56
595: new           #28
598: dup
599: ldc2_w        #252
602: invokestatic  #129
605: aload         56
607: iconst_1
608: invokespecial #160
611: astore        57
613: getstatic     #254
616: astore        58
618: aconst_null
619: astore        59
621: new           #8
624: dup
625: aload         59
627: invokespecial #9
630: astore        60
632: aload         60
634: invokevirtual #25
637: astore        61
639: aload         60
641: invokevirtual #25
644: astore        62
646: aload         60
648: invokevirtual #25
651: astore        63
653: new           #136
656: dup
657: aload         57
659: aload         58
661: aload         63
663: checkcast     #79
666: invokespecial #137
669: astore        64
671: aload         32
673: aload         55
675: aload         63
677: checkcast     #79
680: invokevirtual #169
683: new           #136
686: dup
687: aload         15
689: aload         16
691: aload         63
693: checkcast     #79
696: invokespecial #137
699: astore        65
701: aload         65
703: invokevirtual #697
706: astore        66
708: new           #83
711: dup
712: invokespecial #84
715: ldc           #85
717: invokevirtual #86
720: aload_1
721: invokevirtual #87
724: ldc           #88
726: invokevirtual #86
729: getstatic     #127
732: invokevirtual #87
735: ldc           #85
737: invokevirtual #86
740: invokevirtual #89
743: aload_1
744: getstatic     #127
747: invokevirtual #90
750: invokestatic  #91
753: new           #83
756: dup
757: invokespecial #84
760: ldc           #85
762: invokevirtual #86
765: aload_2
766: invokevirtual #87
769: ldc           #88
771: invokevirtual #86
774: getstatic     #128
777: invokevirtual #87
780: ldc           #85
782: invokevirtual #86
785: invokevirtual #89
788: aload_2
789: getstatic     #128
792: invokevirtual #90
795: invokestatic  #91
798: aload_3
799: invokestatic  #20
802: aload_3
803: invokestatic  #92
806: ldc           #140
808: invokestatic  #23
811: aload_3
812: invokestatic  #93
815: ldc           #140
817: invokestatic  #23
820: new           #83
823: dup
824: invokespecial #84
827: ldc           #85
829: invokevirtual #86
832: aload         5
834: invokevirtual #87
837: ldc           #88
839: invokevirtual #86
842: getstatic     #127
845: invokevirtual #87
848: ldc           #85
850: invokevirtual #86
853: invokevirtual #89
856: aload         5
858: getstatic     #127
861: invokevirtual #90
864: invokestatic  #91
867: new           #83
870: dup
871: invokespecial #84
874: ldc           #85
876: invokevirtual #86
879: aload         6
881: invokevirtual #87
884: ldc           #88
886: invokevirtual #86
889: getstatic     #128
892: invokevirtual #87
895: ldc           #85
897: invokevirtual #86
900: invokevirtual #89
903: aload         6
905: getstatic     #128
908: invokevirtual #90
911: invokestatic  #91
914: aload         7
916: invokestatic  #20
919: aload         7
921: invokestatic  #92
924: ldc           #140
926: invokestatic  #23
929: aload         7
931: invokestatic  #93
934: ldc           #140
936: invokestatic  #23
939: new           #83
942: dup
943: invokespecial #84
946: ldc           #85
948: invokevirtual #86
951: aload         9
953: invokevirtual #87
956: ldc           #88
958: invokevirtual #86
961: getstatic     #133
964: invokevirtual #87
967: ldc           #85
969: invokevirtual #86
972: invokevirtual #89
975: aload         9
977: getstatic     #133
980: invokevirtual #90
983: invokestatic  #91
986: new           #83
989: dup
990: invokespecial #84
993: ldc           #85
995: invokevirtual #86
998: aload         10
1000: invokevirtual #87
1003: ldc           #88
1005: invokevirtual #86
1008: getstatic     #134
1011: invokevirtual #87
1014: ldc           #85
1016: invokevirtual #86
1019: invokevirtual #89
1022: aload         10
1024: getstatic     #134
1027: invokevirtual #90
1030: invokestatic  #91
1033: aload         11
1035: invokestatic  #20
1038: aload         11
1040: invokestatic  #92
1043: ldc           #141
1045: invokestatic  #23
1048: aload         11
1050: invokestatic  #93
1053: ldc           #141
1055: invokestatic  #23
1058: aload         13
1060: invokestatic  #20
1063: new           #83
1066: dup
1067: invokespecial #84
1070: ldc           #85
1072: invokevirtual #86
1075: aload         14
1077: invokevirtual #87
1080: ldc           #88
1082: invokevirtual #86
1085: getstatic     #382
1088: invokevirtual #87
1091: ldc           #85
1093: invokevirtual #86
1096: invokevirtual #89
1099: aload         14
1101: getstatic     #382
1104: invokevirtual #90
1107: invokestatic  #91
1110: aload         15
1112: invokestatic  #20
1115: aload         15
1117: invokevirtual #289
1120: ldc_w         #575
1123: invokestatic  #23
1126: aload         15
1128: invokevirtual #291
1131: ldc_w         #575
1134: invokestatic  #23
1137: aload         15
1139: invokevirtual #292
1142: ldc_w         #576
1145: invokestatic  #23
1148: new           #83
1151: dup
1152: invokespecial #84
1155: ldc           #85
1157: invokevirtual #86
1160: aload         16
1162: invokevirtual #87
1165: ldc           #88
1167: invokevirtual #86
1170: getstatic     #363
1173: invokevirtual #87
1176: ldc           #85
1178: invokevirtual #86
1181: invokevirtual #89
1184: aload         16
1186: getstatic     #363
1189: invokevirtual #90
1192: invokestatic  #91
1195: new           #83
1198: dup
1199: invokespecial #84
1202: ldc           #85
1204: invokevirtual #86
1207: aload         17
1209: invokevirtual #87
1212: ldc           #88
1214: invokevirtual #86
1217: getstatic     #127
1220: invokevirtual #87
1223: ldc           #85
1225: invokevirtual #86
1228: invokevirtual #89
1231: aload         17
1233: getstatic     #127
1236: invokevirtual #90
1239: invokestatic  #91
1242: new           #83
1245: dup
1246: invokespecial #84
1249: ldc           #85
1251: invokevirtual #86
1254: aload         18
1256: invokevirtual #87
1259: ldc           #88
1261: invokevirtual #86
1264: getstatic     #128
1267: invokevirtual #87
1270: ldc           #85
1272: invokevirtual #86
1275: invokevirtual #89
1278: aload         18
1280: getstatic     #128
1283: invokevirtual #90
1286: invokestatic  #91
1289: aload         19
1291: invokestatic  #20
1294: aload         19
1296: invokestatic  #92
1299: ldc           #140
1301: invokestatic  #23
1304: aload         19
1306: invokestatic  #93
1309: ldc           #140
1311: invokestatic  #23
1314: new           #83
1317: dup
1318: invokespecial #84
1321: ldc           #85
1323: invokevirtual #86
1326: aload         21
1328: invokevirtual #87
1331: ldc           #88
1333: invokevirtual #86
1336: getstatic     #328
1339: invokevirtual #87
1342: ldc           #85
1344: invokevirtual #86
1347: invokevirtual #89
1350: aload         21
1352: getstatic     #328
1355: invokevirtual #90
1358: invokestatic  #91
1361: new           #83
1364: dup
1365: invokespecial #84
1368: ldc           #85
1370: invokevirtual #86
1373: aload         22
1375: invokevirtual #87
1378: ldc           #88
1380: invokevirtual #86
1383: getstatic     #329
1386: invokevirtual #87
1389: ldc           #85
1391: invokevirtual #86
1394: invokevirtual #89
1397: aload         22
1399: getstatic     #329
1402: invokevirtual #90
1405: invokestatic  #91
1408: new           #83
1411: dup
1412: invokespecial #84
1415: ldc           #85
1417: invokevirtual #86
1420: aload         23
1422: invokevirtual #87
1425: ldc           #88
1427: invokevirtual #86
1430: getstatic     #330
1433: invokevirtual #87
1436: ldc           #85
1438: invokevirtual #86
1441: invokevirtual #89
1444: aload         23
1446: getstatic     #330
1449: invokevirtual #90
1452: invokestatic  #91
1455: new           #83
1458: dup
1459: invokespecial #84
1462: ldc           #85
1464: invokevirtual #86
1467: aload         24
1469: invokevirtual #87
1472: ldc           #88
1474: invokevirtual #86
1477: getstatic     #331
1480: invokevirtual #87
1483: ldc           #85
1485: invokevirtual #86
1488: invokevirtual #89
1491: aload         24
1493: getstatic     #331
1496: invokevirtual #90
1499: invokestatic  #91
1502: new           #83
1505: dup
1506: invokespecial #84
1509: ldc           #85
1511: invokevirtual #86
1514: aload         25
1516: invokevirtual #87
1519: ldc           #88
1521: invokevirtual #86
1524: getstatic     #332
1527: invokevirtual #87
1530: ldc           #85
1532: invokevirtual #86
1535: invokevirtual #89
1538: aload         25
1540: getstatic     #332
1543: invokevirtual #90
1546: invokestatic  #91
1549: aload         26
1551: invokestatic  #20
1554: aload         26
1556: invokestatic  #92
1559: ldc_w         #336
1562: invokestatic  #23
1565: aload         26
1567: invokestatic  #93
1570: ldc_w         #336
1573: invokestatic  #23
1576: new           #83
1579: dup
1580: invokespecial #84
1583: ldc           #85
1585: invokevirtual #86
1588: aload         28
1590: invokevirtual #87
1593: ldc           #88
1595: invokevirtual #86
1598: getstatic     #333
1601: invokevirtual #87
1604: ldc           #85
1606: invokevirtual #86
1609: invokevirtual #89
1612: aload         28
1614: getstatic     #333
1617: invokevirtual #90
1620: invokestatic  #91
1623: aload         30
1625: invokestatic  #20
1628: aload         32
1630: invokestatic  #20
1633: new           #83
1636: dup
1637: invokespecial #84
1640: ldc           #85
1642: invokevirtual #86
1645: aload         33
1647: invokevirtual #87
1650: ldc           #88
1652: invokevirtual #86
1655: getstatic     #335
1658: invokevirtual #87
1661: ldc           #85
1663: invokevirtual #86
1666: invokevirtual #89
1669: aload         33
1671: getstatic     #335
1674: invokevirtual #90
1677: invokestatic  #91
1680: aload         34
1682: invokestatic  #20
1685: aload         34
1687: invokestatic  #92
1690: ldc           #74
1692: invokestatic  #23
1695: aload         34
1697: invokestatic  #93
1700: ldc           #74
1702: invokestatic  #23
1705: aload         38
1707: invokestatic  #20
1710: aload         39
1712: invokestatic  #20
1715: aload         39
1717: invokestatic  #92
1720: ldc           #74
1722: invokestatic  #23
1725: aload         39
1727: invokestatic  #93
1730: ldc           #74
1732: invokestatic  #23
1735: aload         40
1737: invokestatic  #20
1740: aload         41
1742: invokestatic  #171
1745: aload         42
1747: invokestatic  #20
1750: aload         42
1752: invokevirtual #289
1755: ldc_w         #529
1758: invokestatic  #23
1761: aload         42
1763: invokevirtual #291
1766: ldc_w         #529
1769: invokestatic  #23
1772: aload         42
1774: invokevirtual #292
1777: ldc_w         #530
1780: invokestatic  #23
1783: new           #83
1786: dup
1787: invokespecial #84
1790: ldc           #85
1792: invokevirtual #86
1795: aload         43
1797: invokevirtual #87
1800: ldc           #88
1802: invokevirtual #86
1805: getstatic     #526
1808: invokevirtual #87
1811: ldc           #85
1813: invokevirtual #86
1816: invokevirtual #89
1819: aload         43
1821: getstatic     #526
1824: invokevirtual #90
1827: invokestatic  #91
1830: new           #83
1833: dup
1834: invokespecial #84
1837: ldc           #85
1839: invokevirtual #86
1842: aload         44
1844: invokevirtual #87
1847: ldc           #88
1849: invokevirtual #86
1852: getstatic     #127
1855: invokevirtual #87
1858: ldc           #85
1860: invokevirtual #86
1863: invokevirtual #89
1866: aload         44
1868: getstatic     #127
1871: invokevirtual #90
1874: invokestatic  #91
1877: new           #83
1880: dup
1881: invokespecial #84
1884: ldc           #85
1886: invokevirtual #86
1889: aload         45
1891: invokevirtual #87
1894: ldc           #88
1896: invokevirtual #86
1899: getstatic     #128
1902: invokevirtual #87
1905: ldc           #85
1907: invokevirtual #86
1910: invokevirtual #89
1913: aload         45
1915: getstatic     #128
1918: invokevirtual #90
1921: invokestatic  #91
1924: aload         46
1926: invokestatic  #20
1929: aload         46
1931: invokestatic  #92
1934: ldc           #140
1936: invokestatic  #23
1939: aload         46
1941: invokestatic  #93
1944: ldc           #140
1946: invokestatic  #23
1949: new           #83
1952: dup
1953: invokespecial #84
1956: ldc           #85
1958: invokevirtual #86
1961: aload         48
1963: invokevirtual #87
1966: ldc           #88
1968: invokevirtual #86
1971: getstatic     #328
1974: invokevirtual #87
1977: ldc           #85
1979: invokevirtual #86
1982: invokevirtual #89
1985: aload         48
1987: getstatic     #328
1990: invokevirtual #90
1993: invokestatic  #91
1996: new           #83
1999: dup
2000: invokespecial #84
2003: ldc           #85
2005: invokevirtual #86
2008: aload         49
2010: invokevirtual #87
2013: ldc           #88
2015: invokevirtual #86
2018: getstatic     #329
2021: invokevirtual #87
2024: ldc           #85
2026: invokevirtual #86
2029: invokevirtual #89
2032: aload         49
2034: getstatic     #329
2037: invokevirtual #90
2040: invokestatic  #91
2043: new           #83
2046: dup
2047: invokespecial #84
2050: ldc           #85
2052: invokevirtual #86
2055: aload         50
2057: invokevirtual #87
2060: ldc           #88
2062: invokevirtual #86
2065: getstatic     #330
2068: invokevirtual #87
2071: ldc           #85
2073: invokevirtual #86
2076: invokevirtual #89
2079: aload         50
2081: getstatic     #330
2084: invokevirtual #90
2087: invokestatic  #91
2090: new           #83
2093: dup
2094: invokespecial #84
2097: ldc           #85
2099: invokevirtual #86
2102: aload         51
2104: invokevirtual #87
2107: ldc           #88
2109: invokevirtual #86
2112: getstatic     #331
2115: invokevirtual #87
2118: ldc           #85
2120: invokevirtual #86
2123: invokevirtual #89
2126: aload         51
2128: getstatic     #331
2131: invokevirtual #90
2134: invokestatic  #91
2137: new           #83
2140: dup
2141: invokespecial #84
2144: ldc           #85
2146: invokevirtual #86
2149: aload         52
2151: invokevirtual #87
2154: ldc           #88
2156: invokevirtual #86
2159: getstatic     #332
2162: invokevirtual #87
2165: ldc           #85
2167: invokevirtual #86
2170: invokevirtual #89
2173: aload         52
2175: getstatic     #332
2178: invokevirtual #90
2181: invokestatic  #91
2184: aload         53
2186: invokestatic  #20
2189: aload         53
2191: invokestatic  #92
2194: ldc_w         #336
2197: invokestatic  #23
2200: aload         53
2202: invokestatic  #93
2205: ldc_w         #336
2208: invokestatic  #23
2211: new           #83
2214: dup
2215: invokespecial #84
2218: ldc           #85
2220: invokevirtual #86
2223: aload         55
2225: invokevirtual #87
2228: ldc           #88
2230: invokevirtual #86
2233: getstatic     #527
2236: invokevirtual #87
2239: ldc           #85
2241: invokevirtual #86
2244: invokevirtual #89
2247: aload         55
2249: getstatic     #527
2252: invokevirtual #90
2255: invokestatic  #91
2258: new           #83
2261: dup
2262: invokespecial #84
2265: ldc           #85
2267: invokevirtual #86
2270: aload         58
2272: invokevirtual #87
2275: ldc           #88
2277: invokevirtual #86
2280: getstatic     #254
2283: invokevirtual #87
2286: ldc           #85
2288: invokevirtual #86
2291: invokevirtual #89
2294: aload         58
2296: getstatic     #254
2299: invokevirtual #90
2302: invokestatic  #91
2305: aload         61
2307: invokestatic  #20
2310: aload         62
2312: invokestatic  #20
2315: aload         63
2317: invokestatic  #20
2320: new           #83
2323: dup
2324: invokespecial #84
2327: ldc           #85
2329: invokevirtual #86
2332: aload         66
2334: invokevirtual #86
2337: ldc_w         #698
2340: invokevirtual #86
2343: invokevirtual #89
2346: aload         66
2348: ldc_w         #699
2351: invokestatic  #245
2354: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test354
Start line: 11419
End line: 11439
Method source code: 
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(52.0d, 52.0d, 35.0d);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 1, 52.0d);
        double[] doubleArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = harmonicFitter1.fit(doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #700
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: ldc2_w        #12
64: ldc2_w        #12
67: ldc2_w        #14
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: dconst_1
79: ldc2_w        #12
82: invokevirtual #43
85: aconst_null
86: astore_3
87: aload_2
88: aload_3
89: invokevirtual #16
92: astore        4
94: ldc           #17
96: invokestatic  #18
99: goto          104
102: astore        4
104: return
Exception table:
from    to  target type
87    99   102   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test355
Start line: 11442
End line: 11552
Method source code: 
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        java.lang.Number number1 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number1, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException6 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats4, objArray5);
        boolean boolean7 = numberIsTooSmallException3.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext8 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats10 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray12 = new java.lang.Object[] { localizedFormats10, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException13 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats9, objArray12);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray17 = new java.lang.Object[] { localizedFormats15, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException18 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats14, objArray17);
        mathIllegalArgumentException13.addSuppressed((java.lang.Throwable) mathIllegalArgumentException18);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext20 = mathIllegalArgumentException13.getContext();
        java.lang.Object obj22 = exceptionContext20.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer24 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter25 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer24);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray26 = harmonicFitter25.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter25.getObservations();
        exceptionContext20.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, (java.lang.Object[]) weightedObservedPointArray27);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer30 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter31 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer30);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray32 = harmonicFitter31.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException33 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats29, (java.lang.Object[]) weightedObservedPointArray32);
        exceptionContext8.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, (java.lang.Object[]) weightedObservedPointArray32);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats35 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats36 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats37 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats38 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray40 = new java.lang.Object[] { localizedFormats38, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException41 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats37, objArray40);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats42 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats43 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray45 = new java.lang.Object[] { localizedFormats43, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException46 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats42, objArray45);
        mathIllegalArgumentException41.addSuppressed((java.lang.Throwable) mathIllegalArgumentException46);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats48 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats49 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray51 = new java.lang.Object[] { localizedFormats49, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException52 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException46, (org.apache.commons.math3.exception.util.Localizable) localizedFormats48, objArray51);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException53 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats36, objArray51);
        java.lang.Object[] objArray54 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray51);
        org.apache.commons.math3.exception.ZeroException zeroException55 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats35, objArray54);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats56 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException60 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray61 = numberIsTooSmallException60.getSuppressed();
        java.lang.Throwable[] throwableArray62 = numberIsTooSmallException60.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException63 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) zeroException55, (org.apache.commons.math3.exception.util.Localizable) localizedFormats56, (java.lang.Object[]) throwableArray62);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException64 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, (java.lang.Object[]) throwableArray62);
        java.util.Locale locale65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = localizedFormats23.getLocalizedString(locale65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats10 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats10.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext20);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray26);
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray32);
        org.junit.Assert.assertTrue("'" + localizedFormats35 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats35.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats36 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats36.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats37 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats37.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats38 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats38.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats42 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats42.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats43 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats43.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats48 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats48.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats49 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats49.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats56 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES + "'", localizedFormats56.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_ADDITION_COMPATIBLE_MATRICES));
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #701
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #28
30: dup
31: bipush        100
33: invokestatic  #159
36: aload_1
37: iconst_0
38: invokespecial #160
41: astore_2
42: getstatic     #161
45: astore_3
46: iconst_0
47: anewarray     #5
50: astore        4
52: new           #136
55: dup
56: aload_2
57: aload_3
58: aload         4
60: invokespecial #137
63: astore        5
65: aload_2
66: invokevirtual #162
69: istore        6
71: new           #163
74: dup
75: aload_2
76: invokespecial #164
79: astore        7
81: getstatic     #127
84: astore        8
86: getstatic     #128
89: astore        9
91: iconst_2
92: anewarray     #5
95: dup
96: iconst_0
97: aload         9
99: aastore
100: dup
101: iconst_1
102: lconst_1
103: invokestatic  #129
106: aastore
107: astore        10
109: new           #130
112: dup
113: aload         8
115: aload         10
117: invokespecial #131
120: astore        11
122: getstatic     #127
125: astore        12
127: getstatic     #128
130: astore        13
132: iconst_2
133: anewarray     #5
136: dup
137: iconst_0
138: aload         13
140: aastore
141: dup
142: iconst_1
143: lconst_1
144: invokestatic  #129
147: aastore
148: astore        14
150: new           #130
153: dup
154: aload         12
156: aload         14
158: invokespecial #131
161: astore        15
163: aload         11
165: aload         15
167: invokevirtual #132
170: aload         11
172: invokevirtual #165
175: astore        16
177: aload         16
179: ldc           #166
181: invokevirtual #167
184: astore        17
186: getstatic     #168
189: astore        18
191: aconst_null
192: astore        19
194: new           #8
197: dup
198: aload         19
200: invokespecial #9
203: astore        20
205: aload         20
207: invokevirtual #25
210: astore        21
212: aload         20
214: invokevirtual #25
217: astore        22
219: aload         16
221: aload         18
223: aload         22
225: checkcast     #79
228: invokevirtual #169
231: getstatic     #156
234: astore        23
236: aconst_null
237: astore        24
239: new           #8
242: dup
243: aload         24
245: invokespecial #9
248: astore        25
250: aload         25
252: invokevirtual #25
255: astore        26
257: new           #81
260: dup
261: aload         23
263: aload         26
265: checkcast     #79
268: invokespecial #82
271: astore        27
273: aload         7
275: aload         18
277: aload         26
279: checkcast     #79
282: invokevirtual #169
285: getstatic     #125
288: astore        28
290: getstatic     #126
293: astore        29
295: getstatic     #127
298: astore        30
300: getstatic     #128
303: astore        31
305: iconst_2
306: anewarray     #5
309: dup
310: iconst_0
311: aload         31
313: aastore
314: dup
315: iconst_1
316: lconst_1
317: invokestatic  #129
320: aastore
321: astore        32
323: new           #130
326: dup
327: aload         30
329: aload         32
331: invokespecial #131
334: astore        33
336: getstatic     #127
339: astore        34
341: getstatic     #128
344: astore        35
346: iconst_2
347: anewarray     #5
350: dup
351: iconst_0
352: aload         35
354: aastore
355: dup
356: iconst_1
357: lconst_1
358: invokestatic  #129
361: aastore
362: astore        36
364: new           #130
367: dup
368: aload         34
370: aload         36
372: invokespecial #131
375: astore        37
377: aload         33
379: aload         37
381: invokevirtual #132
384: getstatic     #133
387: astore        38
389: getstatic     #134
392: astore        39
394: iconst_2
395: anewarray     #5
398: dup
399: iconst_0
400: aload         39
402: aastore
403: dup
404: iconst_1
405: bipush        10
407: invokestatic  #135
410: aastore
411: astore        40
413: new           #136
416: dup
417: aload         37
419: aload         38
421: aload         40
423: invokespecial #137
426: astore        41
428: new           #136
431: dup
432: aload         29
434: aload         40
436: invokespecial #138
439: astore        42
441: aload         40
443: invokestatic  #80
446: astore        43
448: new           #81
451: dup
452: aload         28
454: aload         43
456: invokespecial #82
459: astore        44
461: getstatic     #363
464: astore        45
466: new           #28
469: dup
470: ldc2_w        #277
473: invokestatic  #129
476: bipush        10
478: invokestatic  #159
481: iconst_1
482: invokespecial #160
485: astore        46
487: aload         46
489: invokevirtual #334
492: astore        47
494: aload         46
496: invokevirtual #334
499: astore        48
501: new           #136
504: dup
505: aload         44
507: aload         45
509: aload         48
511: checkcast     #79
514: invokespecial #137
517: astore        49
519: new           #130
522: dup
523: aload         18
525: aload         48
527: checkcast     #79
530: invokespecial #131
533: astore        50
535: aconst_null
536: astore        51
538: aload         18
540: aload         51
542: invokevirtual #321
545: astore        52
547: ldc           #17
549: invokestatic  #18
552: goto          557
555: astore        52
557: new           #83
560: dup
561: invokespecial #84
564: ldc           #85
566: invokevirtual #86
569: aload_3
570: invokevirtual #87
573: ldc           #88
575: invokevirtual #86
578: getstatic     #161
581: invokevirtual #87
584: ldc           #85
586: invokevirtual #86
589: invokevirtual #89
592: aload_3
593: getstatic     #161
596: invokevirtual #90
599: invokestatic  #91
602: aload         4
604: invokestatic  #20
607: aload         4
609: invokestatic  #92
612: ldc           #74
614: invokestatic  #23
617: aload         4
619: invokestatic  #93
622: ldc           #74
624: invokestatic  #23
627: new           #83
630: dup
631: invokespecial #84
634: ldc           #85
636: invokevirtual #86
639: iload         6
641: invokevirtual #170
644: ldc           #88
646: invokevirtual #86
649: iconst_0
650: invokevirtual #170
653: ldc           #85
655: invokevirtual #86
658: invokevirtual #89
661: iload         6
663: ifne          670
666: iconst_1
667: goto          671
670: iconst_0
671: invokestatic  #91
674: new           #83
677: dup
678: invokespecial #84
681: ldc           #85
683: invokevirtual #86
686: aload         8
688: invokevirtual #87
691: ldc           #88
693: invokevirtual #86
696: getstatic     #127
699: invokevirtual #87
702: ldc           #85
704: invokevirtual #86
707: invokevirtual #89
710: aload         8
712: getstatic     #127
715: invokevirtual #90
718: invokestatic  #91
721: new           #83
724: dup
725: invokespecial #84
728: ldc           #85
730: invokevirtual #86
733: aload         9
735: invokevirtual #87
738: ldc           #88
740: invokevirtual #86
743: getstatic     #128
746: invokevirtual #87
749: ldc           #85
751: invokevirtual #86
754: invokevirtual #89
757: aload         9
759: getstatic     #128
762: invokevirtual #90
765: invokestatic  #91
768: aload         10
770: invokestatic  #20
773: aload         10
775: invokestatic  #92
778: ldc           #140
780: invokestatic  #23
783: aload         10
785: invokestatic  #93
788: ldc           #140
790: invokestatic  #23
793: new           #83
796: dup
797: invokespecial #84
800: ldc           #85
802: invokevirtual #86
805: aload         12
807: invokevirtual #87
810: ldc           #88
812: invokevirtual #86
815: getstatic     #127
818: invokevirtual #87
821: ldc           #85
823: invokevirtual #86
826: invokevirtual #89
829: aload         12
831: getstatic     #127
834: invokevirtual #90
837: invokestatic  #91
840: new           #83
843: dup
844: invokespecial #84
847: ldc           #85
849: invokevirtual #86
852: aload         13
854: invokevirtual #87
857: ldc           #88
859: invokevirtual #86
862: getstatic     #128
865: invokevirtual #87
868: ldc           #85
870: invokevirtual #86
873: invokevirtual #89
876: aload         13
878: getstatic     #128
881: invokevirtual #90
884: invokestatic  #91
887: aload         14
889: invokestatic  #20
892: aload         14
894: invokestatic  #92
897: ldc           #140
899: invokestatic  #23
902: aload         14
904: invokestatic  #93
907: ldc           #140
909: invokestatic  #23
912: aload         16
914: invokestatic  #20
917: aload         17
919: invokestatic  #171
922: new           #83
925: dup
926: invokespecial #84
929: ldc           #85
931: invokevirtual #86
934: aload         18
936: invokevirtual #87
939: ldc           #88
941: invokevirtual #86
944: getstatic     #168
947: invokevirtual #87
950: ldc           #85
952: invokevirtual #86
955: invokevirtual #89
958: aload         18
960: getstatic     #168
963: invokevirtual #90
966: invokestatic  #91
969: aload         21
971: invokestatic  #20
974: aload         22
976: invokestatic  #20
979: new           #83
982: dup
983: invokespecial #84
986: ldc           #85
988: invokevirtual #86
991: aload         23
993: invokevirtual #87
996: ldc           #88
998: invokevirtual #86
1001: getstatic     #156
1004: invokevirtual #87
1007: ldc           #85
1009: invokevirtual #86
1012: invokevirtual #89
1015: aload         23
1017: getstatic     #156
1020: invokevirtual #90
1023: invokestatic  #91
1026: aload         26
1028: invokestatic  #20
1031: new           #83
1034: dup
1035: invokespecial #84
1038: ldc           #85
1040: invokevirtual #86
1043: aload         28
1045: invokevirtual #87
1048: ldc           #88
1050: invokevirtual #86
1053: getstatic     #125
1056: invokevirtual #87
1059: ldc           #85
1061: invokevirtual #86
1064: invokevirtual #89
1067: aload         28
1069: getstatic     #125
1072: invokevirtual #90
1075: invokestatic  #91
1078: new           #83
1081: dup
1082: invokespecial #84
1085: ldc           #85
1087: invokevirtual #86
1090: aload         29
1092: invokevirtual #87
1095: ldc           #88
1097: invokevirtual #86
1100: getstatic     #126
1103: invokevirtual #87
1106: ldc           #85
1108: invokevirtual #86
1111: invokevirtual #89
1114: aload         29
1116: getstatic     #126
1119: invokevirtual #90
1122: invokestatic  #91
1125: new           #83
1128: dup
1129: invokespecial #84
1132: ldc           #85
1134: invokevirtual #86
1137: aload         30
1139: invokevirtual #87
1142: ldc           #88
1144: invokevirtual #86
1147: getstatic     #127
1150: invokevirtual #87
1153: ldc           #85
1155: invokevirtual #86
1158: invokevirtual #89
1161: aload         30
1163: getstatic     #127
1166: invokevirtual #90
1169: invokestatic  #91
1172: new           #83
1175: dup
1176: invokespecial #84
1179: ldc           #85
1181: invokevirtual #86
1184: aload         31
1186: invokevirtual #87
1189: ldc           #88
1191: invokevirtual #86
1194: getstatic     #128
1197: invokevirtual #87
1200: ldc           #85
1202: invokevirtual #86
1205: invokevirtual #89
1208: aload         31
1210: getstatic     #128
1213: invokevirtual #90
1216: invokestatic  #91
1219: aload         32
1221: invokestatic  #20
1224: aload         32
1226: invokestatic  #92
1229: ldc           #140
1231: invokestatic  #23
1234: aload         32
1236: invokestatic  #93
1239: ldc           #140
1241: invokestatic  #23
1244: new           #83
1247: dup
1248: invokespecial #84
1251: ldc           #85
1253: invokevirtual #86
1256: aload         34
1258: invokevirtual #87
1261: ldc           #88
1263: invokevirtual #86
1266: getstatic     #127
1269: invokevirtual #87
1272: ldc           #85
1274: invokevirtual #86
1277: invokevirtual #89
1280: aload         34
1282: getstatic     #127
1285: invokevirtual #90
1288: invokestatic  #91
1291: new           #83
1294: dup
1295: invokespecial #84
1298: ldc           #85
1300: invokevirtual #86
1303: aload         35
1305: invokevirtual #87
1308: ldc           #88
1310: invokevirtual #86
1313: getstatic     #128
1316: invokevirtual #87
1319: ldc           #85
1321: invokevirtual #86
1324: invokevirtual #89
1327: aload         35
1329: getstatic     #128
1332: invokevirtual #90
1335: invokestatic  #91
1338: aload         36
1340: invokestatic  #20
1343: aload         36
1345: invokestatic  #92
1348: ldc           #140
1350: invokestatic  #23
1353: aload         36
1355: invokestatic  #93
1358: ldc           #140
1360: invokestatic  #23
1363: new           #83
1366: dup
1367: invokespecial #84
1370: ldc           #85
1372: invokevirtual #86
1375: aload         38
1377: invokevirtual #87
1380: ldc           #88
1382: invokevirtual #86
1385: getstatic     #133
1388: invokevirtual #87
1391: ldc           #85
1393: invokevirtual #86
1396: invokevirtual #89
1399: aload         38
1401: getstatic     #133
1404: invokevirtual #90
1407: invokestatic  #91
1410: new           #83
1413: dup
1414: invokespecial #84
1417: ldc           #85
1419: invokevirtual #86
1422: aload         39
1424: invokevirtual #87
1427: ldc           #88
1429: invokevirtual #86
1432: getstatic     #134
1435: invokevirtual #87
1438: ldc           #85
1440: invokevirtual #86
1443: invokevirtual #89
1446: aload         39
1448: getstatic     #134
1451: invokevirtual #90
1454: invokestatic  #91
1457: aload         40
1459: invokestatic  #20
1462: aload         40
1464: invokestatic  #92
1467: ldc           #141
1469: invokestatic  #23
1472: aload         40
1474: invokestatic  #93
1477: ldc           #141
1479: invokestatic  #23
1482: aload         43
1484: invokestatic  #20
1487: aload         43
1489: invokestatic  #92
1492: ldc           #141
1494: invokestatic  #23
1497: aload         43
1499: invokestatic  #93
1502: ldc           #141
1504: invokestatic  #23
1507: new           #83
1510: dup
1511: invokespecial #84
1514: ldc           #85
1516: invokevirtual #86
1519: aload         45
1521: invokevirtual #87
1524: ldc           #88
1526: invokevirtual #86
1529: getstatic     #363
1532: invokevirtual #87
1535: ldc           #85
1537: invokevirtual #86
1540: invokevirtual #89
1543: aload         45
1545: getstatic     #363
1548: invokevirtual #90
1551: invokestatic  #91
1554: aload         47
1556: invokestatic  #20
1559: aload         48
1561: invokestatic  #20
1564: return
Exception table:
from    to  target type
538   552   555   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test356
Start line: 11555
End line: 11603
Method source code: 
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer11 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter12 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer11);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray13 = harmonicFitter12.getObservations();
        harmonicFitter12.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter12.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer16 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter17 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer16);
        harmonicFitter17.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter17.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter17.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray25 = harmonicFitter17.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint29 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double30 = weightedObservedPoint29.getX();
        double double31 = weightedObservedPoint29.getY();
        double double32 = weightedObservedPoint29.getX();
        double double33 = weightedObservedPoint29.getY();
        harmonicFitter17.addObservedPoint(weightedObservedPoint29);
        double double35 = weightedObservedPoint29.getWeight();
        harmonicFitter12.addObservedPoint(weightedObservedPoint29);
        harmonicFitter1.addObservedPoint(weightedObservedPoint29);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint41 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) 1L, (double) (-1), 0.0d);
        harmonicFitter1.addObservedPoint(weightedObservedPoint41);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray43 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray13);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertNotNull(weightedObservedPointArray25);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #702
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: invokevirtual #25
66: astore        4
68: aconst_null
69: astore        5
71: new           #8
74: dup
75: aload         5
77: invokespecial #9
80: astore        6
82: aload         6
84: invokevirtual #25
87: astore        7
89: aload         6
91: invokevirtual #59
94: aload         6
96: invokevirtual #25
99: astore        8
101: aconst_null
102: astore        9
104: new           #8
107: dup
108: aload         9
110: invokespecial #9
113: astore        10
115: aload         10
117: dconst_1
118: ldc2_w        #32
121: invokevirtual #43
124: aload         10
126: dconst_0
127: ldc2_w        #34
130: invokevirtual #43
133: aload         10
135: invokevirtual #59
138: aload         10
140: invokevirtual #25
143: astore        11
145: new           #145
148: dup
149: ldc2_w        #14
152: ldc2_w        #12
155: ldc2_w        #12
158: invokespecial #146
161: astore        12
163: aload         12
165: invokevirtual #147
168: dstore        13
170: aload         12
172: invokevirtual #149
175: dstore        15
177: aload         12
179: invokevirtual #147
182: dstore        17
184: aload         12
186: invokevirtual #149
189: dstore        19
191: aload         10
193: aload         12
195: invokevirtual #123
198: aload         12
200: invokevirtual #148
203: dstore        21
205: aload         6
207: aload         12
209: invokevirtual #123
212: aload_2
213: aload         12
215: invokevirtual #123
218: new           #145
221: dup
222: dconst_1
223: ldc2_w        #10
226: dconst_0
227: invokespecial #146
230: astore        23
232: aload_2
233: aload         23
235: invokevirtual #123
238: aload_2
239: invokevirtual #26
242: astore        24
244: ldc           #17
246: invokestatic  #18
249: goto          254
252: astore        24
254: aload_3
255: invokestatic  #20
258: aload         4
260: invokestatic  #20
263: aload         7
265: invokestatic  #20
268: aload         8
270: invokestatic  #20
273: aload         11
275: invokestatic  #20
278: new           #83
281: dup
282: invokespecial #84
285: ldc           #85
287: invokevirtual #86
290: dload         13
292: invokevirtual #150
295: ldc           #88
297: invokevirtual #86
300: ldc2_w        #12
303: invokevirtual #150
306: ldc           #85
308: invokevirtual #86
311: invokevirtual #89
314: dload         13
316: ldc2_w        #12
319: dcmpl
320: ifne          327
323: iconst_1
324: goto          328
327: iconst_0
328: invokestatic  #91
331: new           #83
334: dup
335: invokespecial #84
338: ldc           #85
340: invokevirtual #86
343: dload         15
345: invokevirtual #150
348: ldc           #88
350: invokevirtual #86
353: ldc2_w        #12
356: invokevirtual #150
359: ldc           #85
361: invokevirtual #86
364: invokevirtual #89
367: dload         15
369: ldc2_w        #12
372: dcmpl
373: ifne          380
376: iconst_1
377: goto          381
380: iconst_0
381: invokestatic  #91
384: new           #83
387: dup
388: invokespecial #84
391: ldc           #85
393: invokevirtual #86
396: dload         17
398: invokevirtual #150
401: ldc           #88
403: invokevirtual #86
406: ldc2_w        #12
409: invokevirtual #150
412: ldc           #85
414: invokevirtual #86
417: invokevirtual #89
420: dload         17
422: ldc2_w        #12
425: dcmpl
426: ifne          433
429: iconst_1
430: goto          434
433: iconst_0
434: invokestatic  #91
437: new           #83
440: dup
441: invokespecial #84
444: ldc           #85
446: invokevirtual #86
449: dload         19
451: invokevirtual #150
454: ldc           #88
456: invokevirtual #86
459: ldc2_w        #12
462: invokevirtual #150
465: ldc           #85
467: invokevirtual #86
470: invokevirtual #89
473: dload         19
475: ldc2_w        #12
478: dcmpl
479: ifne          486
482: iconst_1
483: goto          487
486: iconst_0
487: invokestatic  #91
490: new           #83
493: dup
494: invokespecial #84
497: ldc           #85
499: invokevirtual #86
502: dload         21
504: invokevirtual #150
507: ldc           #88
509: invokevirtual #86
512: ldc2_w        #14
515: invokevirtual #150
518: ldc           #85
520: invokevirtual #86
523: invokevirtual #89
526: dload         21
528: ldc2_w        #14
531: dcmpl
532: ifne          539
535: iconst_1
536: goto          540
539: iconst_0
540: invokestatic  #91
543: return
Exception table:
from    to  target type
238   249   252   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test357
Start line: 11606
End line: 11723
Method source code: 
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray3 = harmonicFitter2.getObservations();
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray5 = harmonicFitter2.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException6 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray5);
        org.apache.commons.math3.exception.util.Localizable localizable7 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray11 = new java.lang.Object[] { localizedFormats9, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException12 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats8, objArray11);
        org.apache.commons.math3.exception.ZeroException zeroException13 = new org.apache.commons.math3.exception.ZeroException(localizable7, objArray11);
        java.lang.Number number14 = zeroException13.getArgument();
        java.lang.Number number15 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException18 = new org.apache.commons.math3.exception.NumberIsTooSmallException(number15, (java.lang.Number) (byte) 0, true);
        boolean boolean19 = numberIsTooSmallException18.getBoundIsAllowed();
        zeroException13.addSuppressed((java.lang.Throwable) numberIsTooSmallException18);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats24 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray26 = new java.lang.Object[] { localizedFormats24, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException27 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, objArray26);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats28 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats31 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats32 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray33 = new java.lang.Object[] { localizedFormats29, localizedFormats30, localizedFormats31, localizedFormats32 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException34 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException27, (org.apache.commons.math3.exception.util.Localizable) localizedFormats28, objArray33);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext35 = mathIllegalArgumentException27.getContext();
        java.lang.Throwable[] throwableArray36 = mathIllegalArgumentException27.getSuppressed();
        org.apache.commons.math3.exception.ZeroException zeroException37 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats22, (java.lang.Object[]) throwableArray36);
        org.apache.commons.math3.exception.ZeroException zeroException38 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats21, (java.lang.Object[]) throwableArray36);
        numberIsTooSmallException18.addSuppressed((java.lang.Throwable) zeroException38);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats40 = org.apache.commons.math3.exception.util.LocalizedFormats.INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats41 = org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_ORDER_ABSCISSA_ARRAY;
        java.lang.String str42 = localizedFormats41.getSourceString();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats43 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats44 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray46 = new java.lang.Object[] { localizedFormats44, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException47 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats43, objArray46);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats48 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats49 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray51 = new java.lang.Object[] { localizedFormats49, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException52 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats48, objArray51);
        mathIllegalArgumentException47.addSuppressed((java.lang.Throwable) mathIllegalArgumentException52);
        java.lang.Throwable[] throwableArray54 = mathIllegalArgumentException47.getSuppressed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext55 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException47);
        java.util.Set<java.lang.String> strSet56 = exceptionContext55.getKeys();
        java.lang.Object obj58 = exceptionContext55.getValue("");
        java.util.Set<java.lang.String> strSet59 = exceptionContext55.getKeys();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats60 = org.apache.commons.math3.exception.util.LocalizedFormats.REAL_FORMAT;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer61 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter62 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer61);
        harmonicFitter62.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter62.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter62.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray70 = harmonicFitter62.getObservations();
        java.lang.Object[] objArray71 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray70);
        exceptionContext55.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats60, (java.lang.Object[]) weightedObservedPointArray70);
        org.apache.commons.math3.exception.ZeroException zeroException73 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats41, (java.lang.Object[]) weightedObservedPointArray70);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException74 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) zeroException38, (org.apache.commons.math3.exception.util.Localizable) localizedFormats40, (java.lang.Object[]) weightedObservedPointArray70);
        org.apache.commons.math3.exception.ZeroException zeroException75 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray70);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray3);
        org.junit.Assert.assertNotNull(weightedObservedPointArray5);
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals("'" + number14 + "' != '" + 0 + "'", number14, 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE));
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N));
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats24 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats24.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats28 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats28.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats31 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats31.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats32 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats32.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertNotNull(exceptionContext35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertTrue("'" + localizedFormats40 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES + "'", localizedFormats40.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES));
        org.junit.Assert.assertTrue("'" + localizedFormats41 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_ORDER_ABSCISSA_ARRAY + "'", localizedFormats41.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_ORDER_ABSCISSA_ARRAY));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}" + "'", str42, "the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}");
        org.junit.Assert.assertTrue("'" + localizedFormats43 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats43.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats44 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats44.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats48 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats48.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats49 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats49.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNull(obj58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + localizedFormats60 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.REAL_FORMAT + "'", localizedFormats60.equals(org.apache.commons.math3.exception.util.LocalizedFormats.REAL_FORMAT));
        org.junit.Assert.assertNotNull(weightedObservedPointArray70);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #703
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #376
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: invokevirtual #25
44: astore        4
46: aload_3
47: invokevirtual #59
50: aload_3
51: invokevirtual #25
54: astore        5
56: new           #81
59: dup
60: aload_1
61: aload         5
63: checkcast     #79
66: invokespecial #82
69: astore        6
71: aconst_null
72: astore        7
74: getstatic     #127
77: astore        8
79: getstatic     #128
82: astore        9
84: iconst_2
85: anewarray     #5
88: dup
89: iconst_0
90: aload         9
92: aastore
93: dup
94: iconst_1
95: lconst_1
96: invokestatic  #129
99: aastore
100: astore        10
102: new           #130
105: dup
106: aload         8
108: aload         10
110: invokespecial #131
113: astore        11
115: new           #81
118: dup
119: aload         7
121: aload         10
123: invokespecial #82
126: astore        12
128: aload         12
130: invokevirtual #243
133: astore        13
135: aconst_null
136: astore        14
138: new           #28
141: dup
142: aload         14
144: iconst_0
145: invokestatic  #159
148: iconst_1
149: invokespecial #160
152: astore        15
154: aload         15
156: invokevirtual #162
159: istore        16
161: aload         12
163: aload         15
165: invokevirtual #590
168: getstatic     #591
171: astore        17
173: getstatic     #592
176: astore        18
178: getstatic     #127
181: astore        19
183: getstatic     #128
186: astore        20
188: iconst_2
189: anewarray     #5
192: dup
193: iconst_0
194: aload         20
196: aastore
197: dup
198: iconst_1
199: lconst_1
200: invokestatic  #129
203: aastore
204: astore        21
206: new           #130
209: dup
210: aload         19
212: aload         21
214: invokespecial #131
217: astore        22
219: getstatic     #328
222: astore        23
224: getstatic     #329
227: astore        24
229: getstatic     #330
232: astore        25
234: getstatic     #331
237: astore        26
239: getstatic     #332
242: astore        27
244: iconst_4
245: anewarray     #5
248: dup
249: iconst_0
250: aload         24
252: aastore
253: dup
254: iconst_1
255: aload         25
257: aastore
258: dup
259: iconst_2
260: aload         26
262: aastore
263: dup
264: iconst_3
265: aload         27
267: aastore
268: astore        28
270: new           #136
273: dup
274: aload         22
276: aload         23
278: aload         28
280: invokespecial #137
283: astore        29
285: aload         22
287: invokevirtual #165
290: astore        30
292: aload         22
294: invokevirtual #234
297: astore        31
299: new           #81
302: dup
303: aload         18
305: aload         31
307: checkcast     #79
310: invokespecial #82
313: astore        32
315: new           #81
318: dup
319: aload         17
321: aload         31
323: checkcast     #79
326: invokespecial #82
329: astore        33
331: aload         15
333: aload         33
335: invokevirtual #573
338: getstatic     #593
341: astore        34
343: getstatic     #476
346: astore        35
348: aload         35
350: invokevirtual #301
353: astore        36
355: getstatic     #127
358: astore        37
360: getstatic     #128
363: astore        38
365: iconst_2
366: anewarray     #5
369: dup
370: iconst_0
371: aload         38
373: aastore
374: dup
375: iconst_1
376: lconst_1
377: invokestatic  #129
380: aastore
381: astore        39
383: new           #130
386: dup
387: aload         37
389: aload         39
391: invokespecial #131
394: astore        40
396: getstatic     #127
399: astore        41
401: getstatic     #128
404: astore        42
406: iconst_2
407: anewarray     #5
410: dup
411: iconst_0
412: aload         42
414: aastore
415: dup
416: iconst_1
417: lconst_1
418: invokestatic  #129
421: aastore
422: astore        43
424: new           #130
427: dup
428: aload         41
430: aload         43
432: invokespecial #131
435: astore        44
437: aload         40
439: aload         44
441: invokevirtual #132
444: aload         40
446: invokevirtual #234
449: astore        45
451: new           #163
454: dup
455: aload         40
457: invokespecial #164
460: astore        46
462: aload         46
464: invokevirtual #370
467: astore        47
469: aload         46
471: ldc_w         #384
474: invokevirtual #167
477: astore        48
479: aload         46
481: invokevirtual #370
484: astore        49
486: getstatic     #477
489: astore        50
491: aconst_null
492: astore        51
494: new           #8
497: dup
498: aload         51
500: invokespecial #9
503: astore        52
505: aload         52
507: dconst_1
508: ldc2_w        #32
511: invokevirtual #43
514: aload         52
516: dconst_0
517: ldc2_w        #34
520: invokevirtual #43
523: aload         52
525: invokevirtual #59
528: aload         52
530: invokevirtual #25
533: astore        53
535: aload         53
537: checkcast     #79
540: invokestatic  #80
543: astore        54
545: aload         46
547: aload         50
549: aload         53
551: checkcast     #79
554: invokevirtual #169
557: new           #81
560: dup
561: aload         35
563: aload         53
565: checkcast     #79
568: invokespecial #82
571: astore        55
573: new           #136
576: dup
577: aload         33
579: aload         34
581: aload         53
583: checkcast     #79
586: invokespecial #137
589: astore        56
591: new           #81
594: dup
595: aload_1
596: aload         53
598: checkcast     #79
601: invokespecial #82
604: astore        57
606: new           #83
609: dup
610: invokespecial #84
613: ldc           #85
615: invokevirtual #86
618: aload_1
619: invokevirtual #87
622: ldc           #88
624: invokevirtual #86
627: getstatic     #376
630: invokevirtual #87
633: ldc           #85
635: invokevirtual #86
638: invokevirtual #89
641: aload_1
642: getstatic     #376
645: invokevirtual #90
648: invokestatic  #91
651: aload         4
653: invokestatic  #20
656: aload         5
658: invokestatic  #20
661: new           #83
664: dup
665: invokespecial #84
668: ldc           #85
670: invokevirtual #86
673: aload         8
675: invokevirtual #87
678: ldc           #88
680: invokevirtual #86
683: getstatic     #127
686: invokevirtual #87
689: ldc           #85
691: invokevirtual #86
694: invokevirtual #89
697: aload         8
699: getstatic     #127
702: invokevirtual #90
705: invokestatic  #91
708: new           #83
711: dup
712: invokespecial #84
715: ldc           #85
717: invokevirtual #86
720: aload         9
722: invokevirtual #87
725: ldc           #88
727: invokevirtual #86
730: getstatic     #128
733: invokevirtual #87
736: ldc           #85
738: invokevirtual #86
741: invokevirtual #89
744: aload         9
746: getstatic     #128
749: invokevirtual #90
752: invokestatic  #91
755: aload         10
757: invokestatic  #20
760: aload         10
762: invokestatic  #92
765: ldc           #140
767: invokestatic  #23
770: aload         10
772: invokestatic  #93
775: ldc           #140
777: invokestatic  #23
780: new           #83
783: dup
784: invokespecial #84
787: ldc           #85
789: invokevirtual #86
792: aload         13
794: invokevirtual #87
797: ldc           #88
799: invokevirtual #86
802: iconst_0
803: invokevirtual #244
806: ldc           #85
808: invokevirtual #86
811: invokevirtual #89
814: aload         13
816: iconst_0
817: invokestatic  #135
820: invokestatic  #245
823: new           #83
826: dup
827: invokespecial #84
830: ldc           #85
832: invokevirtual #86
835: iload         16
837: invokevirtual #170
840: ldc           #88
842: invokevirtual #86
845: iconst_1
846: invokevirtual #170
849: ldc           #85
851: invokevirtual #86
854: invokevirtual #89
857: iload         16
859: iconst_1
860: if_icmpne     867
863: iconst_1
864: goto          868
867: iconst_0
868: invokestatic  #91
871: new           #83
874: dup
875: invokespecial #84
878: ldc           #85
880: invokevirtual #86
883: aload         17
885: invokevirtual #87
888: ldc           #88
890: invokevirtual #86
893: getstatic     #591
896: invokevirtual #87
899: ldc           #85
901: invokevirtual #86
904: invokevirtual #89
907: aload         17
909: getstatic     #591
912: invokevirtual #90
915: invokestatic  #91
918: new           #83
921: dup
922: invokespecial #84
925: ldc           #85
927: invokevirtual #86
930: aload         18
932: invokevirtual #87
935: ldc           #88
937: invokevirtual #86
940: getstatic     #592
943: invokevirtual #87
946: ldc           #85
948: invokevirtual #86
951: invokevirtual #89
954: aload         18
956: getstatic     #592
959: invokevirtual #90
962: invokestatic  #91
965: new           #83
968: dup
969: invokespecial #84
972: ldc           #85
974: invokevirtual #86
977: aload         19
979: invokevirtual #87
982: ldc           #88
984: invokevirtual #86
987: getstatic     #127
990: invokevirtual #87
993: ldc           #85
995: invokevirtual #86
998: invokevirtual #89
1001: aload         19
1003: getstatic     #127
1006: invokevirtual #90
1009: invokestatic  #91
1012: new           #83
1015: dup
1016: invokespecial #84
1019: ldc           #85
1021: invokevirtual #86
1024: aload         20
1026: invokevirtual #87
1029: ldc           #88
1031: invokevirtual #86
1034: getstatic     #128
1037: invokevirtual #87
1040: ldc           #85
1042: invokevirtual #86
1045: invokevirtual #89
1048: aload         20
1050: getstatic     #128
1053: invokevirtual #90
1056: invokestatic  #91
1059: aload         21
1061: invokestatic  #20
1064: aload         21
1066: invokestatic  #92
1069: ldc           #140
1071: invokestatic  #23
1074: aload         21
1076: invokestatic  #93
1079: ldc           #140
1081: invokestatic  #23
1084: new           #83
1087: dup
1088: invokespecial #84
1091: ldc           #85
1093: invokevirtual #86
1096: aload         23
1098: invokevirtual #87
1101: ldc           #88
1103: invokevirtual #86
1106: getstatic     #328
1109: invokevirtual #87
1112: ldc           #85
1114: invokevirtual #86
1117: invokevirtual #89
1120: aload         23
1122: getstatic     #328
1125: invokevirtual #90
1128: invokestatic  #91
1131: new           #83
1134: dup
1135: invokespecial #84
1138: ldc           #85
1140: invokevirtual #86
1143: aload         24
1145: invokevirtual #87
1148: ldc           #88
1150: invokevirtual #86
1153: getstatic     #329
1156: invokevirtual #87
1159: ldc           #85
1161: invokevirtual #86
1164: invokevirtual #89
1167: aload         24
1169: getstatic     #329
1172: invokevirtual #90
1175: invokestatic  #91
1178: new           #83
1181: dup
1182: invokespecial #84
1185: ldc           #85
1187: invokevirtual #86
1190: aload         25
1192: invokevirtual #87
1195: ldc           #88
1197: invokevirtual #86
1200: getstatic     #330
1203: invokevirtual #87
1206: ldc           #85
1208: invokevirtual #86
1211: invokevirtual #89
1214: aload         25
1216: getstatic     #330
1219: invokevirtual #90
1222: invokestatic  #91
1225: new           #83
1228: dup
1229: invokespecial #84
1232: ldc           #85
1234: invokevirtual #86
1237: aload         26
1239: invokevirtual #87
1242: ldc           #88
1244: invokevirtual #86
1247: getstatic     #331
1250: invokevirtual #87
1253: ldc           #85
1255: invokevirtual #86
1258: invokevirtual #89
1261: aload         26
1263: getstatic     #331
1266: invokevirtual #90
1269: invokestatic  #91
1272: new           #83
1275: dup
1276: invokespecial #84
1279: ldc           #85
1281: invokevirtual #86
1284: aload         27
1286: invokevirtual #87
1289: ldc           #88
1291: invokevirtual #86
1294: getstatic     #332
1297: invokevirtual #87
1300: ldc           #85
1302: invokevirtual #86
1305: invokevirtual #89
1308: aload         27
1310: getstatic     #332
1313: invokevirtual #90
1316: invokestatic  #91
1319: aload         28
1321: invokestatic  #20
1324: aload         28
1326: invokestatic  #92
1329: ldc_w         #336
1332: invokestatic  #23
1335: aload         28
1337: invokestatic  #93
1340: ldc_w         #336
1343: invokestatic  #23
1346: aload         30
1348: invokestatic  #20
1351: aload         31
1353: invokestatic  #20
1356: new           #83
1359: dup
1360: invokespecial #84
1363: ldc           #85
1365: invokevirtual #86
1368: aload         34
1370: invokevirtual #87
1373: ldc           #88
1375: invokevirtual #86
1378: getstatic     #593
1381: invokevirtual #87
1384: ldc           #85
1386: invokevirtual #86
1389: invokevirtual #89
1392: aload         34
1394: getstatic     #593
1397: invokevirtual #90
1400: invokestatic  #91
1403: new           #83
1406: dup
1407: invokespecial #84
1410: ldc           #85
1412: invokevirtual #86
1415: aload         35
1417: invokevirtual #87
1420: ldc           #88
1422: invokevirtual #86
1425: getstatic     #476
1428: invokevirtual #87
1431: ldc           #85
1433: invokevirtual #86
1436: invokevirtual #89
1439: aload         35
1441: getstatic     #476
1444: invokevirtual #90
1447: invokestatic  #91
1450: new           #83
1453: dup
1454: invokespecial #84
1457: ldc           #85
1459: invokevirtual #86
1462: aload         36
1464: invokevirtual #86
1467: ldc_w         #478
1470: invokevirtual #86
1473: invokevirtual #89
1476: aload         36
1478: ldc_w         #479
1481: invokestatic  #245
1484: new           #83
1487: dup
1488: invokespecial #84
1491: ldc           #85
1493: invokevirtual #86
1496: aload         37
1498: invokevirtual #87
1501: ldc           #88
1503: invokevirtual #86
1506: getstatic     #127
1509: invokevirtual #87
1512: ldc           #85
1514: invokevirtual #86
1517: invokevirtual #89
1520: aload         37
1522: getstatic     #127
1525: invokevirtual #90
1528: invokestatic  #91
1531: new           #83
1534: dup
1535: invokespecial #84
1538: ldc           #85
1540: invokevirtual #86
1543: aload         38
1545: invokevirtual #87
1548: ldc           #88
1550: invokevirtual #86
1553: getstatic     #128
1556: invokevirtual #87
1559: ldc           #85
1561: invokevirtual #86
1564: invokevirtual #89
1567: aload         38
1569: getstatic     #128
1572: invokevirtual #90
1575: invokestatic  #91
1578: aload         39
1580: invokestatic  #20
1583: aload         39
1585: invokestatic  #92
1588: ldc           #140
1590: invokestatic  #23
1593: aload         39
1595: invokestatic  #93
1598: ldc           #140
1600: invokestatic  #23
1603: new           #83
1606: dup
1607: invokespecial #84
1610: ldc           #85
1612: invokevirtual #86
1615: aload         41
1617: invokevirtual #87
1620: ldc           #88
1622: invokevirtual #86
1625: getstatic     #127
1628: invokevirtual #87
1631: ldc           #85
1633: invokevirtual #86
1636: invokevirtual #89
1639: aload         41
1641: getstatic     #127
1644: invokevirtual #90
1647: invokestatic  #91
1650: new           #83
1653: dup
1654: invokespecial #84
1657: ldc           #85
1659: invokevirtual #86
1662: aload         42
1664: invokevirtual #87
1667: ldc           #88
1669: invokevirtual #86
1672: getstatic     #128
1675: invokevirtual #87
1678: ldc           #85
1680: invokevirtual #86
1683: invokevirtual #89
1686: aload         42
1688: getstatic     #128
1691: invokevirtual #90
1694: invokestatic  #91
1697: aload         43
1699: invokestatic  #20
1702: aload         43
1704: invokestatic  #92
1707: ldc           #140
1709: invokestatic  #23
1712: aload         43
1714: invokestatic  #93
1717: ldc           #140
1719: invokestatic  #23
1722: aload         45
1724: invokestatic  #20
1727: aload         47
1729: invokestatic  #20
1732: aload         48
1734: invokestatic  #171
1737: aload         49
1739: invokestatic  #20
1742: new           #83
1745: dup
1746: invokespecial #84
1749: ldc           #85
1751: invokevirtual #86
1754: aload         50
1756: invokevirtual #87
1759: ldc           #88
1761: invokevirtual #86
1764: getstatic     #477
1767: invokevirtual #87
1770: ldc           #85
1772: invokevirtual #86
1775: invokevirtual #89
1778: aload         50
1780: getstatic     #477
1783: invokevirtual #90
1786: invokestatic  #91
1789: aload         53
1791: invokestatic  #20
1794: aload         54
1796: invokestatic  #20
1799: aload         54
1801: invokestatic  #92
1804: ldc           #74
1806: invokestatic  #23
1809: aload         54
1811: invokestatic  #93
1814: ldc           #74
1816: invokestatic  #23
1819: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test358
Start line: 11726
End line: 11749
Method source code: 
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric13 = null;
        double[] doubleArray14 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = harmonicFitter1.fit(parametric13, doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #704
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: invokevirtual #59
66: aload_2
67: invokevirtual #59
70: aload_2
71: invokevirtual #59
74: aconst_null
75: astore        4
77: iconst_0
78: newarray       double
80: astore        5
82: aload_2
83: aload         4
85: aload         5
87: invokevirtual #30
90: astore        6
92: ldc           #17
94: invokestatic  #18
97: goto          102
100: astore        6
102: aload_3
103: invokestatic  #20
106: aload         5
108: invokestatic  #20
111: aload         5
113: invokestatic  #21
116: ldc           #74
118: invokestatic  #23
121: return
Exception table:
from    to  target type
82    97   100   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test359
Start line: 11752
End line: 11769
Method source code: 
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(10.0d, 100.0d, 100.0d);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray20 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray21 = harmonicFitter1.getObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray20);
        org.junit.Assert.assertNotNull(weightedObservedPointArray21);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #705
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: invokevirtual #59
81: aload_2
82: ldc2_w        #32
85: ldc2_w        #34
88: ldc2_w        #34
91: invokevirtual #54
94: aload_2
95: invokevirtual #25
98: astore        4
100: aload_2
101: invokevirtual #25
104: astore        5
106: aload_3
107: invokestatic  #20
110: aload         4
112: invokestatic  #20
115: aload         5
117: invokestatic  #20
120: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test360
Start line: 11772
End line: 11796
Method source code: 
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.addObservedPoint((double) (-1), (double) (byte) 1);
        harmonicFitter1.addObservedPoint((double) 10L, 52.0d);
        harmonicFitter1.addObservedPoint((double) (byte) 0, (double) (byte) 0);
        double[] doubleArray24 = new double[] { (-1.0f) };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray25 = harmonicFitter1.fit(doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #706
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload_2
78: ldc2_w        #10
81: dconst_1
82: invokevirtual #43
85: aload_2
86: ldc2_w        #32
89: ldc2_w        #12
92: invokevirtual #43
95: aload_2
96: dconst_0
97: dconst_0
98: invokevirtual #43
101: iconst_1
102: newarray       double
104: dup
105: iconst_0
106: ldc2_w        #10
109: dastore
110: astore        5
112: aload_2
113: aload         5
115: invokevirtual #16
118: astore        6
120: ldc           #17
122: invokestatic  #18
125: goto          130
128: astore        6
130: aload_3
131: invokestatic  #20
134: aload         5
136: invokestatic  #20
139: aload         5
141: invokestatic  #21
144: ldc           #72
146: invokestatic  #23
149: return
Exception table:
from    to  target type
112   125   128   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test361
Start line: 11799
End line: 11812
Method source code: 
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 10, (double) 0);
        harmonicFitter1.addObservedPoint(0.0d, 35.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #707
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: invokevirtual #25
61: astore        4
63: aload_2
64: ldc2_w        #32
67: dconst_0
68: invokevirtual #43
71: aload_2
72: dconst_0
73: ldc2_w        #14
76: invokevirtual #43
79: aload_3
80: invokestatic  #20
83: aload         4
85: invokestatic  #20
88: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test362
Start line: 11815
End line: 11837
Method source code: 
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric11 = null;
        double[] doubleArray15 = new double[] { (short) -1, (byte) 10, 10L };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = harmonicFitter1.fit(1, parametric11, doubleArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 10.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #708
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: invokevirtual #25
61: astore        4
63: aconst_null
64: astore        5
66: iconst_3
67: newarray       double
69: dup
70: iconst_0
71: ldc2_w        #10
74: dastore
75: dup
76: iconst_1
77: ldc2_w        #32
80: dastore
81: dup
82: iconst_2
83: ldc2_w        #32
86: dastore
87: astore        6
89: aload_2
90: iconst_1
91: aload         5
93: aload         6
95: invokevirtual #40
98: astore        7
100: ldc           #17
102: invokestatic  #18
105: goto          110
108: astore        7
110: aload_3
111: invokestatic  #20
114: aload         4
116: invokestatic  #20
119: aload         6
121: invokestatic  #20
124: aload         6
126: invokestatic  #21
129: ldc_w         #709
132: invokestatic  #23
135: return
Exception table:
from    to  target type
89   105   108   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test363
Start line: 11840
End line: 11865
Method source code: 
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint15 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double16 = weightedObservedPoint15.getX();
        double double17 = weightedObservedPoint15.getY();
        double double18 = weightedObservedPoint15.getX();
        double double19 = weightedObservedPoint15.getY();
        double double20 = weightedObservedPoint15.getX();
        double double21 = weightedObservedPoint15.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint15);
        harmonicFitter1.addObservedPoint((double) (short) 0, (double) (-1L));
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #710
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: dconst_0
54: ldc2_w        #12
57: ldc2_w        #10
60: invokevirtual #54
63: new           #145
66: dup
67: ldc2_w        #14
70: ldc2_w        #12
73: ldc2_w        #12
76: invokespecial #146
79: astore_3
80: aload_3
81: invokevirtual #147
84: dstore        4
86: aload_3
87: invokevirtual #149
90: dstore        6
92: aload_3
93: invokevirtual #147
96: dstore        8
98: aload_3
99: invokevirtual #149
102: dstore        10
104: aload_3
105: invokevirtual #147
108: dstore        12
110: aload_3
111: invokevirtual #147
114: dstore        14
116: aload_2
117: aload_3
118: invokevirtual #123
121: aload_2
122: dconst_0
123: ldc2_w        #10
126: invokevirtual #43
129: aload_2
130: invokevirtual #59
133: aload_2
134: invokevirtual #59
137: new           #83
140: dup
141: invokespecial #84
144: ldc           #85
146: invokevirtual #86
149: dload         4
151: invokevirtual #150
154: ldc           #88
156: invokevirtual #86
159: ldc2_w        #12
162: invokevirtual #150
165: ldc           #85
167: invokevirtual #86
170: invokevirtual #89
173: dload         4
175: ldc2_w        #12
178: dcmpl
179: ifne          186
182: iconst_1
183: goto          187
186: iconst_0
187: invokestatic  #91
190: new           #83
193: dup
194: invokespecial #84
197: ldc           #85
199: invokevirtual #86
202: dload         6
204: invokevirtual #150
207: ldc           #88
209: invokevirtual #86
212: ldc2_w        #12
215: invokevirtual #150
218: ldc           #85
220: invokevirtual #86
223: invokevirtual #89
226: dload         6
228: ldc2_w        #12
231: dcmpl
232: ifne          239
235: iconst_1
236: goto          240
239: iconst_0
240: invokestatic  #91
243: new           #83
246: dup
247: invokespecial #84
250: ldc           #85
252: invokevirtual #86
255: dload         8
257: invokevirtual #150
260: ldc           #88
262: invokevirtual #86
265: ldc2_w        #12
268: invokevirtual #150
271: ldc           #85
273: invokevirtual #86
276: invokevirtual #89
279: dload         8
281: ldc2_w        #12
284: dcmpl
285: ifne          292
288: iconst_1
289: goto          293
292: iconst_0
293: invokestatic  #91
296: new           #83
299: dup
300: invokespecial #84
303: ldc           #85
305: invokevirtual #86
308: dload         10
310: invokevirtual #150
313: ldc           #88
315: invokevirtual #86
318: ldc2_w        #12
321: invokevirtual #150
324: ldc           #85
326: invokevirtual #86
329: invokevirtual #89
332: dload         10
334: ldc2_w        #12
337: dcmpl
338: ifne          345
341: iconst_1
342: goto          346
345: iconst_0
346: invokestatic  #91
349: new           #83
352: dup
353: invokespecial #84
356: ldc           #85
358: invokevirtual #86
361: dload         12
363: invokevirtual #150
366: ldc           #88
368: invokevirtual #86
371: ldc2_w        #12
374: invokevirtual #150
377: ldc           #85
379: invokevirtual #86
382: invokevirtual #89
385: dload         12
387: ldc2_w        #12
390: dcmpl
391: ifne          398
394: iconst_1
395: goto          399
398: iconst_0
399: invokestatic  #91
402: new           #83
405: dup
406: invokespecial #84
409: ldc           #85
411: invokevirtual #86
414: dload         14
416: invokevirtual #150
419: ldc           #88
421: invokevirtual #86
424: ldc2_w        #12
427: invokevirtual #150
430: ldc           #85
432: invokevirtual #86
435: invokevirtual #89
438: dload         14
440: ldc2_w        #12
443: dcmpl
444: ifne          451
447: iconst_1
448: goto          452
451: iconst_0
452: invokestatic  #91
455: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test364
Start line: 11868
End line: 11889
Method source code: 
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric14 = null;
        double[] doubleArray21 = new double[] { (short) -1, 0.0d, 10.0d, 100, (short) 100, 10L };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = harmonicFitter1.fit((int) '#', parametric14, doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 0.0, 10.0, 100.0, 100.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #711
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: dconst_0
59: dconst_1
60: ldc2_w        #34
63: invokevirtual #54
66: aconst_null
67: astore        4
69: bipush        6
71: newarray       double
73: dup
74: iconst_0
75: ldc2_w        #10
78: dastore
79: dup
80: iconst_1
81: dconst_0
82: dastore
83: dup
84: iconst_2
85: ldc2_w        #32
88: dastore
89: dup
90: iconst_3
91: ldc2_w        #34
94: dastore
95: dup
96: iconst_4
97: ldc2_w        #34
100: dastore
101: dup
102: iconst_5
103: ldc2_w        #32
106: dastore
107: astore        5
109: aload_2
110: bipush        35
112: aload         4
114: aload         5
116: invokevirtual #40
119: astore        6
121: ldc           #17
123: invokestatic  #18
126: goto          131
129: astore        6
131: aload_3
132: invokestatic  #20
135: aload         5
137: invokestatic  #20
140: aload         5
142: invokestatic  #21
145: ldc_w         #712
148: invokestatic  #23
151: return
Exception table:
from    to  target type
109   126   129   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test365
Start line: 11892
End line: 11912
Method source code: 
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER;
        java.lang.String str2 = localizedFormats1.getSourceString();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer3 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter4 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer3);
        harmonicFitter4.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter4.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter4.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray12 = harmonicFitter4.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray13 = harmonicFitter4.getObservations();
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException14 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) weightedObservedPointArray13);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException15 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable0, (java.lang.Object[]) weightedObservedPointArray13);
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.BINOMIAL_INVALID_PARAMETERS_ORDER));
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}" + "'", str2, "must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}");
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
        org.junit.Assert.assertNotNull(weightedObservedPointArray12);
        org.junit.Assert.assertNotNull(weightedObservedPointArray13);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #713
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: getstatic     #300
30: astore_2
31: aload_2
32: invokevirtual #301
35: astore_3
36: aconst_null
37: astore        4
39: new           #8
42: dup
43: aload         4
45: invokespecial #9
48: astore        5
50: aload         5
52: dconst_1
53: ldc2_w        #32
56: invokevirtual #43
59: aload         5
61: dconst_0
62: ldc2_w        #34
65: invokevirtual #43
68: aload         5
70: invokevirtual #25
73: astore        6
75: aload         5
77: invokevirtual #25
80: astore        7
82: aload         5
84: invokevirtual #25
87: astore        8
89: new           #130
92: dup
93: aload_2
94: aload         8
96: checkcast     #79
99: invokespecial #131
102: astore        9
104: new           #136
107: dup
108: aload_1
109: aload         8
111: checkcast     #79
114: invokespecial #138
117: astore        10
119: new           #83
122: dup
123: invokespecial #84
126: ldc           #85
128: invokevirtual #86
131: aload_2
132: invokevirtual #87
135: ldc           #88
137: invokevirtual #86
140: getstatic     #300
143: invokevirtual #87
146: ldc           #85
148: invokevirtual #86
151: invokevirtual #89
154: aload_2
155: getstatic     #300
158: invokevirtual #90
161: invokestatic  #91
164: new           #83
167: dup
168: invokespecial #84
171: ldc           #85
173: invokevirtual #86
176: aload_3
177: invokevirtual #86
180: ldc_w         #302
183: invokevirtual #86
186: invokevirtual #89
189: aload_3
190: ldc_w         #303
193: invokestatic  #245
196: aload         6
198: invokestatic  #20
201: aload         7
203: invokestatic  #20
206: aload         8
208: invokestatic  #20
211: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test366
Start line: 11915
End line: 11934
Method source code: 
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter1.addObservedPoint((double) (short) 100, 100.0d);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint20 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double21 = weightedObservedPoint20.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint20);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint23 = null;
        harmonicFitter1.addObservedPoint(weightedObservedPoint23);
        java.lang.Class<?> wildcardClass25 = harmonicFitter1.getClass();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #714
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: aload_2
74: ldc2_w        #34
77: ldc2_w        #34
80: invokevirtual #43
83: new           #145
86: dup
87: ldc2_w        #14
90: ldc2_w        #12
93: ldc2_w        #12
96: invokespecial #146
99: astore        4
101: aload         4
103: invokevirtual #148
106: dstore        5
108: aload_2
109: aload         4
111: invokevirtual #123
114: aconst_null
115: astore        7
117: aload_2
118: aload         7
120: invokevirtual #123
123: aload_2
124: invokevirtual #98
127: astore        8
129: aload_3
130: invokestatic  #20
133: new           #83
136: dup
137: invokespecial #84
140: ldc           #85
142: invokevirtual #86
145: dload         5
147: invokevirtual #150
150: ldc           #88
152: invokevirtual #86
155: ldc2_w        #14
158: invokevirtual #150
161: ldc           #85
163: invokevirtual #86
166: invokevirtual #89
169: dload         5
171: ldc2_w        #14
174: dcmpl
175: ifne          182
178: iconst_1
179: goto          183
182: iconst_0
183: invokestatic  #91
186: aload         8
188: invokestatic  #20
191: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test367
Start line: 11937
End line: 12001
Method source code: 
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer9 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter10 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer9);
        harmonicFitter10.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter10.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter10.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint24 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double25 = weightedObservedPoint24.getX();
        double double26 = weightedObservedPoint24.getY();
        double double27 = weightedObservedPoint24.getX();
        double double28 = weightedObservedPoint24.getY();
        double double29 = weightedObservedPoint24.getX();
        double double30 = weightedObservedPoint24.getX();
        harmonicFitter10.addObservedPoint(weightedObservedPoint24);
        double double32 = weightedObservedPoint24.getWeight();
        double double33 = weightedObservedPoint24.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint24);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(0.0d, (double) 10L);
        harmonicFitter1.addObservedPoint((double) 'a', (double) 10);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer42 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter43 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer42);
        harmonicFitter43.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter43.addObservedPoint((double) (-1), 0.0d, (double) (short) 0);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer51 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter52 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer51);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray53 = harmonicFitter52.getObservations();
        harmonicFitter52.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter52.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter52.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint68 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double69 = weightedObservedPoint68.getX();
        double double70 = weightedObservedPoint68.getY();
        double double71 = weightedObservedPoint68.getY();
        harmonicFitter52.addObservedPoint(weightedObservedPoint68);
        double double73 = weightedObservedPoint68.getY();
        double double74 = weightedObservedPoint68.getWeight();
        harmonicFitter43.addObservedPoint(weightedObservedPoint68);
        double double76 = weightedObservedPoint68.getX();
        double double77 = weightedObservedPoint68.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint68);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray53);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 52.0d + "'", double69 == 52.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 52.0d + "'", double70 == 52.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 52.0d + "'", double71 == 52.0d);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 52.0d + "'", double73 == 52.0d);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 35.0d + "'", double74 == 35.0d);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 52.0d + "'", double76 == 52.0d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 35.0d + "'", double77 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #715
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aconst_null
57: astore_3
58: new           #8
61: dup
62: aload_3
63: invokespecial #9
66: astore        4
68: aload         4
70: dconst_1
71: ldc2_w        #32
74: invokevirtual #43
77: aload         4
79: dconst_0
80: ldc2_w        #34
83: invokevirtual #43
86: aload         4
88: dconst_0
89: ldc2_w        #12
92: ldc2_w        #10
95: invokevirtual #54
98: new           #145
101: dup
102: ldc2_w        #14
105: ldc2_w        #12
108: ldc2_w        #12
111: invokespecial #146
114: astore        5
116: aload         5
118: invokevirtual #147
121: dstore        6
123: aload         5
125: invokevirtual #149
128: dstore        8
130: aload         5
132: invokevirtual #147
135: dstore        10
137: aload         5
139: invokevirtual #149
142: dstore        12
144: aload         5
146: invokevirtual #147
149: dstore        14
151: aload         5
153: invokevirtual #147
156: dstore        16
158: aload         4
160: aload         5
162: invokevirtual #123
165: aload         5
167: invokevirtual #148
170: dstore        18
172: aload         5
174: invokevirtual #147
177: dstore        20
179: aload_2
180: aload         5
182: invokevirtual #123
185: aload_2
186: invokevirtual #59
189: aload_2
190: dconst_0
191: ldc2_w        #32
194: invokevirtual #43
197: aload_2
198: ldc2_w        #44
201: ldc2_w        #32
204: invokevirtual #43
207: aconst_null
208: astore        22
210: new           #8
213: dup
214: aload         22
216: invokespecial #9
219: astore        23
221: aload         23
223: dconst_1
224: ldc2_w        #32
227: invokevirtual #43
230: aload         23
232: ldc2_w        #10
235: dconst_0
236: dconst_0
237: invokevirtual #54
240: aconst_null
241: astore        24
243: new           #8
246: dup
247: aload         24
249: invokespecial #9
252: astore        25
254: aload         25
256: invokevirtual #25
259: astore        26
261: aload         25
263: ldc2_w        #32
266: ldc2_w        #10
269: dconst_0
270: invokevirtual #54
273: aload         25
275: ldc2_w        #44
278: ldc2_w        #14
281: invokevirtual #43
284: aload         25
286: ldc2_w        #12
289: dconst_0
290: ldc2_w        #44
293: invokevirtual #54
296: new           #145
299: dup
300: ldc2_w        #14
303: ldc2_w        #12
306: ldc2_w        #12
309: invokespecial #146
312: astore        27
314: aload         27
316: invokevirtual #147
319: dstore        28
321: aload         27
323: invokevirtual #149
326: dstore        30
328: aload         27
330: invokevirtual #149
333: dstore        32
335: aload         25
337: aload         27
339: invokevirtual #123
342: aload         27
344: invokevirtual #149
347: dstore        34
349: aload         27
351: invokevirtual #148
354: dstore        36
356: aload         23
358: aload         27
360: invokevirtual #123
363: aload         27
365: invokevirtual #147
368: dstore        38
370: aload         27
372: invokevirtual #148
375: dstore        40
377: aload_2
378: aload         27
380: invokevirtual #123
383: new           #83
386: dup
387: invokespecial #84
390: ldc           #85
392: invokevirtual #86
395: dload         6
397: invokevirtual #150
400: ldc           #88
402: invokevirtual #86
405: ldc2_w        #12
408: invokevirtual #150
411: ldc           #85
413: invokevirtual #86
416: invokevirtual #89
419: dload         6
421: ldc2_w        #12
424: dcmpl
425: ifne          432
428: iconst_1
429: goto          433
432: iconst_0
433: invokestatic  #91
436: new           #83
439: dup
440: invokespecial #84
443: ldc           #85
445: invokevirtual #86
448: dload         8
450: invokevirtual #150
453: ldc           #88
455: invokevirtual #86
458: ldc2_w        #12
461: invokevirtual #150
464: ldc           #85
466: invokevirtual #86
469: invokevirtual #89
472: dload         8
474: ldc2_w        #12
477: dcmpl
478: ifne          485
481: iconst_1
482: goto          486
485: iconst_0
486: invokestatic  #91
489: new           #83
492: dup
493: invokespecial #84
496: ldc           #85
498: invokevirtual #86
501: dload         10
503: invokevirtual #150
506: ldc           #88
508: invokevirtual #86
511: ldc2_w        #12
514: invokevirtual #150
517: ldc           #85
519: invokevirtual #86
522: invokevirtual #89
525: dload         10
527: ldc2_w        #12
530: dcmpl
531: ifne          538
534: iconst_1
535: goto          539
538: iconst_0
539: invokestatic  #91
542: new           #83
545: dup
546: invokespecial #84
549: ldc           #85
551: invokevirtual #86
554: dload         12
556: invokevirtual #150
559: ldc           #88
561: invokevirtual #86
564: ldc2_w        #12
567: invokevirtual #150
570: ldc           #85
572: invokevirtual #86
575: invokevirtual #89
578: dload         12
580: ldc2_w        #12
583: dcmpl
584: ifne          591
587: iconst_1
588: goto          592
591: iconst_0
592: invokestatic  #91
595: new           #83
598: dup
599: invokespecial #84
602: ldc           #85
604: invokevirtual #86
607: dload         14
609: invokevirtual #150
612: ldc           #88
614: invokevirtual #86
617: ldc2_w        #12
620: invokevirtual #150
623: ldc           #85
625: invokevirtual #86
628: invokevirtual #89
631: dload         14
633: ldc2_w        #12
636: dcmpl
637: ifne          644
640: iconst_1
641: goto          645
644: iconst_0
645: invokestatic  #91
648: new           #83
651: dup
652: invokespecial #84
655: ldc           #85
657: invokevirtual #86
660: dload         16
662: invokevirtual #150
665: ldc           #88
667: invokevirtual #86
670: ldc2_w        #12
673: invokevirtual #150
676: ldc           #85
678: invokevirtual #86
681: invokevirtual #89
684: dload         16
686: ldc2_w        #12
689: dcmpl
690: ifne          697
693: iconst_1
694: goto          698
697: iconst_0
698: invokestatic  #91
701: new           #83
704: dup
705: invokespecial #84
708: ldc           #85
710: invokevirtual #86
713: dload         18
715: invokevirtual #150
718: ldc           #88
720: invokevirtual #86
723: ldc2_w        #14
726: invokevirtual #150
729: ldc           #85
731: invokevirtual #86
734: invokevirtual #89
737: dload         18
739: ldc2_w        #14
742: dcmpl
743: ifne          750
746: iconst_1
747: goto          751
750: iconst_0
751: invokestatic  #91
754: new           #83
757: dup
758: invokespecial #84
761: ldc           #85
763: invokevirtual #86
766: dload         20
768: invokevirtual #150
771: ldc           #88
773: invokevirtual #86
776: ldc2_w        #12
779: invokevirtual #150
782: ldc           #85
784: invokevirtual #86
787: invokevirtual #89
790: dload         20
792: ldc2_w        #12
795: dcmpl
796: ifne          803
799: iconst_1
800: goto          804
803: iconst_0
804: invokestatic  #91
807: aload         26
809: invokestatic  #20
812: new           #83
815: dup
816: invokespecial #84
819: ldc           #85
821: invokevirtual #86
824: dload         28
826: invokevirtual #150
829: ldc           #88
831: invokevirtual #86
834: ldc2_w        #12
837: invokevirtual #150
840: ldc           #85
842: invokevirtual #86
845: invokevirtual #89
848: dload         28
850: ldc2_w        #12
853: dcmpl
854: ifne          861
857: iconst_1
858: goto          862
861: iconst_0
862: invokestatic  #91
865: new           #83
868: dup
869: invokespecial #84
872: ldc           #85
874: invokevirtual #86
877: dload         30
879: invokevirtual #150
882: ldc           #88
884: invokevirtual #86
887: ldc2_w        #12
890: invokevirtual #150
893: ldc           #85
895: invokevirtual #86
898: invokevirtual #89
901: dload         30
903: ldc2_w        #12
906: dcmpl
907: ifne          914
910: iconst_1
911: goto          915
914: iconst_0
915: invokestatic  #91
918: new           #83
921: dup
922: invokespecial #84
925: ldc           #85
927: invokevirtual #86
930: dload         32
932: invokevirtual #150
935: ldc           #88
937: invokevirtual #86
940: ldc2_w        #12
943: invokevirtual #150
946: ldc           #85
948: invokevirtual #86
951: invokevirtual #89
954: dload         32
956: ldc2_w        #12
959: dcmpl
960: ifne          967
963: iconst_1
964: goto          968
967: iconst_0
968: invokestatic  #91
971: new           #83
974: dup
975: invokespecial #84
978: ldc           #85
980: invokevirtual #86
983: dload         34
985: invokevirtual #150
988: ldc           #88
990: invokevirtual #86
993: ldc2_w        #12
996: invokevirtual #150
999: ldc           #85
1001: invokevirtual #86
1004: invokevirtual #89
1007: dload         34
1009: ldc2_w        #12
1012: dcmpl
1013: ifne          1020
1016: iconst_1
1017: goto          1021
1020: iconst_0
1021: invokestatic  #91
1024: new           #83
1027: dup
1028: invokespecial #84
1031: ldc           #85
1033: invokevirtual #86
1036: dload         36
1038: invokevirtual #150
1041: ldc           #88
1043: invokevirtual #86
1046: ldc2_w        #14
1049: invokevirtual #150
1052: ldc           #85
1054: invokevirtual #86
1057: invokevirtual #89
1060: dload         36
1062: ldc2_w        #14
1065: dcmpl
1066: ifne          1073
1069: iconst_1
1070: goto          1074
1073: iconst_0
1074: invokestatic  #91
1077: new           #83
1080: dup
1081: invokespecial #84
1084: ldc           #85
1086: invokevirtual #86
1089: dload         38
1091: invokevirtual #150
1094: ldc           #88
1096: invokevirtual #86
1099: ldc2_w        #12
1102: invokevirtual #150
1105: ldc           #85
1107: invokevirtual #86
1110: invokevirtual #89
1113: dload         38
1115: ldc2_w        #12
1118: dcmpl
1119: ifne          1126
1122: iconst_1
1123: goto          1127
1126: iconst_0
1127: invokestatic  #91
1130: new           #83
1133: dup
1134: invokespecial #84
1137: ldc           #85
1139: invokevirtual #86
1142: dload         40
1144: invokevirtual #150
1147: ldc           #88
1149: invokevirtual #86
1152: ldc2_w        #14
1155: invokevirtual #150
1158: ldc           #85
1160: invokevirtual #86
1163: invokevirtual #89
1166: dload         40
1168: ldc2_w        #14
1171: dcmpl
1172: ifne          1179
1175: iconst_1
1176: goto          1180
1179: iconst_0
1180: invokestatic  #91
1183: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test368
Start line: 12004
End line: 12025
Method source code: 
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric11 = null;
        double[] doubleArray17 = new double[] { 0, 100, 10.0f, 52.0d, (short) 1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = harmonicFitter1.fit((int) (short) 1, parametric11, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 100.0, 10.0, 52.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #716
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: dconst_0
50: ldc2_w        #10
53: invokevirtual #43
56: aload_2
57: invokevirtual #25
60: astore_3
61: aconst_null
62: astore        4
64: iconst_5
65: newarray       double
67: dup
68: iconst_0
69: dconst_0
70: dastore
71: dup
72: iconst_1
73: ldc2_w        #34
76: dastore
77: dup
78: iconst_2
79: ldc2_w        #32
82: dastore
83: dup
84: iconst_3
85: ldc2_w        #12
88: dastore
89: dup
90: iconst_4
91: dconst_1
92: dastore
93: astore        5
95: aload_2
96: iconst_1
97: aload         4
99: aload         5
101: invokevirtual #40
104: astore        6
106: ldc           #17
108: invokestatic  #18
111: goto          116
114: astore        6
116: aload_3
117: invokestatic  #20
120: aload         5
122: invokestatic  #20
125: aload         5
127: invokestatic  #21
130: ldc_w         #717
133: invokestatic  #23
136: return
Exception table:
from    to  target type
95   111   114   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test369
Start line: 12028
End line: 12094
Method source code: 
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.INDEX;
        java.lang.Number number2 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number2, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException7 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException4, (org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray6);
        boolean boolean8 = numberIsTooSmallException4.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext9 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException4);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats10 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats11 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray13 = new java.lang.Object[] { localizedFormats11, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException14 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats10, objArray13);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray18 = new java.lang.Object[] { localizedFormats16, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException19 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats15, objArray18);
        mathIllegalArgumentException14.addSuppressed((java.lang.Throwable) mathIllegalArgumentException19);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext21 = mathIllegalArgumentException14.getContext();
        java.lang.Object obj23 = exceptionContext21.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats24 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer25 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter26 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer25);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter26.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray28 = harmonicFitter26.getObservations();
        exceptionContext21.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats24, (java.lang.Object[]) weightedObservedPointArray28);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer31 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter32 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer31);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray33 = harmonicFitter32.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException34 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats30, (java.lang.Object[]) weightedObservedPointArray33);
        exceptionContext9.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats24, (java.lang.Object[]) weightedObservedPointArray33);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException36 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray33);
        java.util.Locale locale37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = localizedFormats0.getLocalizedString(locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INDEX + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX));
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats10 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats10.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats11 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats11.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + localizedFormats24 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats24.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertNotNull(weightedObservedPointArray28);
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray33);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #718
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #231
28: astore_1
29: aconst_null
30: astore_2
31: new           #28
34: dup
35: bipush        100
37: invokestatic  #159
40: aload_2
41: iconst_0
42: invokespecial #160
45: astore_3
46: getstatic     #161
49: astore        4
51: iconst_0
52: anewarray     #5
55: astore        5
57: new           #136
60: dup
61: aload_3
62: aload         4
64: aload         5
66: invokespecial #137
69: astore        6
71: aload_3
72: invokevirtual #162
75: istore        7
77: new           #163
80: dup
81: aload_3
82: invokespecial #164
85: astore        8
87: getstatic     #127
90: astore        9
92: getstatic     #128
95: astore        10
97: iconst_2
98: anewarray     #5
101: dup
102: iconst_0
103: aload         10
105: aastore
106: dup
107: iconst_1
108: lconst_1
109: invokestatic  #129
112: aastore
113: astore        11
115: new           #130
118: dup
119: aload         9
121: aload         11
123: invokespecial #131
126: astore        12
128: getstatic     #127
131: astore        13
133: getstatic     #128
136: astore        14
138: iconst_2
139: anewarray     #5
142: dup
143: iconst_0
144: aload         14
146: aastore
147: dup
148: iconst_1
149: lconst_1
150: invokestatic  #129
153: aastore
154: astore        15
156: new           #130
159: dup
160: aload         13
162: aload         15
164: invokespecial #131
167: astore        16
169: aload         12
171: aload         16
173: invokevirtual #132
176: aload         12
178: invokevirtual #165
181: astore        17
183: aload         17
185: ldc           #166
187: invokevirtual #167
190: astore        18
192: getstatic     #168
195: astore        19
197: aconst_null
198: astore        20
200: new           #8
203: dup
204: aload         20
206: invokespecial #9
209: astore        21
211: aload         21
213: invokevirtual #25
216: astore        22
218: aload         21
220: invokevirtual #25
223: astore        23
225: aload         17
227: aload         19
229: aload         23
231: checkcast     #79
234: invokevirtual #169
237: getstatic     #156
240: astore        24
242: aconst_null
243: astore        25
245: new           #8
248: dup
249: aload         25
251: invokespecial #9
254: astore        26
256: aload         26
258: invokevirtual #25
261: astore        27
263: new           #81
266: dup
267: aload         24
269: aload         27
271: checkcast     #79
274: invokespecial #82
277: astore        28
279: aload         8
281: aload         19
283: aload         27
285: checkcast     #79
288: invokevirtual #169
291: new           #130
294: dup
295: aload_1
296: aload         27
298: checkcast     #79
301: invokespecial #131
304: astore        29
306: aconst_null
307: astore        30
309: aload_1
310: aload         30
312: invokevirtual #321
315: astore        31
317: ldc           #17
319: invokestatic  #18
322: goto          327
325: astore        31
327: new           #83
330: dup
331: invokespecial #84
334: ldc           #85
336: invokevirtual #86
339: aload_1
340: invokevirtual #87
343: ldc           #88
345: invokevirtual #86
348: getstatic     #231
351: invokevirtual #87
354: ldc           #85
356: invokevirtual #86
359: invokevirtual #89
362: aload_1
363: getstatic     #231
366: invokevirtual #90
369: invokestatic  #91
372: new           #83
375: dup
376: invokespecial #84
379: ldc           #85
381: invokevirtual #86
384: aload         4
386: invokevirtual #87
389: ldc           #88
391: invokevirtual #86
394: getstatic     #161
397: invokevirtual #87
400: ldc           #85
402: invokevirtual #86
405: invokevirtual #89
408: aload         4
410: getstatic     #161
413: invokevirtual #90
416: invokestatic  #91
419: aload         5
421: invokestatic  #20
424: aload         5
426: invokestatic  #92
429: ldc           #74
431: invokestatic  #23
434: aload         5
436: invokestatic  #93
439: ldc           #74
441: invokestatic  #23
444: new           #83
447: dup
448: invokespecial #84
451: ldc           #85
453: invokevirtual #86
456: iload         7
458: invokevirtual #170
461: ldc           #88
463: invokevirtual #86
466: iconst_0
467: invokevirtual #170
470: ldc           #85
472: invokevirtual #86
475: invokevirtual #89
478: iload         7
480: ifne          487
483: iconst_1
484: goto          488
487: iconst_0
488: invokestatic  #91
491: new           #83
494: dup
495: invokespecial #84
498: ldc           #85
500: invokevirtual #86
503: aload         9
505: invokevirtual #87
508: ldc           #88
510: invokevirtual #86
513: getstatic     #127
516: invokevirtual #87
519: ldc           #85
521: invokevirtual #86
524: invokevirtual #89
527: aload         9
529: getstatic     #127
532: invokevirtual #90
535: invokestatic  #91
538: new           #83
541: dup
542: invokespecial #84
545: ldc           #85
547: invokevirtual #86
550: aload         10
552: invokevirtual #87
555: ldc           #88
557: invokevirtual #86
560: getstatic     #128
563: invokevirtual #87
566: ldc           #85
568: invokevirtual #86
571: invokevirtual #89
574: aload         10
576: getstatic     #128
579: invokevirtual #90
582: invokestatic  #91
585: aload         11
587: invokestatic  #20
590: aload         11
592: invokestatic  #92
595: ldc           #140
597: invokestatic  #23
600: aload         11
602: invokestatic  #93
605: ldc           #140
607: invokestatic  #23
610: new           #83
613: dup
614: invokespecial #84
617: ldc           #85
619: invokevirtual #86
622: aload         13
624: invokevirtual #87
627: ldc           #88
629: invokevirtual #86
632: getstatic     #127
635: invokevirtual #87
638: ldc           #85
640: invokevirtual #86
643: invokevirtual #89
646: aload         13
648: getstatic     #127
651: invokevirtual #90
654: invokestatic  #91
657: new           #83
660: dup
661: invokespecial #84
664: ldc           #85
666: invokevirtual #86
669: aload         14
671: invokevirtual #87
674: ldc           #88
676: invokevirtual #86
679: getstatic     #128
682: invokevirtual #87
685: ldc           #85
687: invokevirtual #86
690: invokevirtual #89
693: aload         14
695: getstatic     #128
698: invokevirtual #90
701: invokestatic  #91
704: aload         15
706: invokestatic  #20
709: aload         15
711: invokestatic  #92
714: ldc           #140
716: invokestatic  #23
719: aload         15
721: invokestatic  #93
724: ldc           #140
726: invokestatic  #23
729: aload         17
731: invokestatic  #20
734: aload         18
736: invokestatic  #171
739: new           #83
742: dup
743: invokespecial #84
746: ldc           #85
748: invokevirtual #86
751: aload         19
753: invokevirtual #87
756: ldc           #88
758: invokevirtual #86
761: getstatic     #168
764: invokevirtual #87
767: ldc           #85
769: invokevirtual #86
772: invokevirtual #89
775: aload         19
777: getstatic     #168
780: invokevirtual #90
783: invokestatic  #91
786: aload         22
788: invokestatic  #20
791: aload         23
793: invokestatic  #20
796: new           #83
799: dup
800: invokespecial #84
803: ldc           #85
805: invokevirtual #86
808: aload         24
810: invokevirtual #87
813: ldc           #88
815: invokevirtual #86
818: getstatic     #156
821: invokevirtual #87
824: ldc           #85
826: invokevirtual #86
829: invokevirtual #89
832: aload         24
834: getstatic     #156
837: invokevirtual #90
840: invokestatic  #91
843: aload         27
845: invokestatic  #20
848: return
Exception table:
from    to  target type
309   322   325   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test370
Start line: 12097
End line: 12119
Method source code: 
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) 0, (double) (byte) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint13 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint(0.0d, (double) 1.0f, 35.0d);
        harmonicFitter1.addObservedPoint(weightedObservedPoint13);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric15 = null;
        double[] doubleArray22 = new double[] { 0.0d, 0, 1L, (byte) 10, 10, (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray23 = harmonicFitter1.fit(parametric15, doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0, 1.0, 10.0, 10.0, -1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #719
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: invokevirtual #59
52: aload_2
53: dconst_0
54: ldc2_w        #32
57: invokevirtual #43
60: new           #145
63: dup
64: dconst_0
65: dconst_1
66: ldc2_w        #14
69: invokespecial #146
72: astore_3
73: aload_2
74: aload_3
75: invokevirtual #123
78: aconst_null
79: astore        4
81: bipush        6
83: newarray       double
85: dup
86: iconst_0
87: dconst_0
88: dastore
89: dup
90: iconst_1
91: dconst_0
92: dastore
93: dup
94: iconst_2
95: dconst_1
96: dastore
97: dup
98: iconst_3
99: ldc2_w        #32
102: dastore
103: dup
104: iconst_4
105: ldc2_w        #32
108: dastore
109: dup
110: iconst_5
111: ldc2_w        #10
114: dastore
115: astore        5
117: aload_2
118: aload         4
120: aload         5
122: invokevirtual #30
125: astore        6
127: ldc           #17
129: invokestatic  #18
132: goto          137
135: astore        6
137: aload         5
139: invokestatic  #20
142: aload         5
144: invokestatic  #21
147: ldc_w         #720
150: invokestatic  #23
153: return
Exception table:
from    to  target type
117   132   135   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test371
Start line: 12122
End line: 12138
Method source code: 
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) 0, 52.0d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #721
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: dconst_0
58: ldc2_w        #12
61: invokevirtual #43
64: aload_2
65: invokevirtual #26
68: astore_3
69: ldc           #64
71: invokestatic  #18
74: goto          78
77: astore_3
78: return
Exception table:
from    to  target type
64    74    77   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test372
Start line: 12141
End line: 12156
Method source code: 
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter1.addObservedPoint((double) (short) 0, 0.0d, (double) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray18 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) 1L, 0.0d, (double) 0);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #722
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: aload_2
74: dconst_0
75: dconst_0
76: ldc2_w        #32
79: invokevirtual #54
82: aload_2
83: invokevirtual #25
86: astore        4
88: aload_2
89: invokevirtual #59
92: aload_2
93: dconst_1
94: dconst_0
95: dconst_0
96: invokevirtual #54
99: aload_3
100: invokestatic  #20
103: aload         4
105: invokestatic  #20
108: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test373
Start line: 12159
End line: 12184
Method source code: 
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter1.addObservedPoint((double) (short) 100, 100.0d);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint20 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double21 = weightedObservedPoint20.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint20);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint26 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) (-1), (double) 1);
        double double27 = weightedObservedPoint26.getX();
        double double28 = weightedObservedPoint26.getWeight();
        double double29 = weightedObservedPoint26.getY();
        double double30 = weightedObservedPoint26.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint26);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 35.0d + "'", double21 == 35.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0d + "'", double29 == 1.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 35.0d + "'", double30 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #723
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: aload_2
74: ldc2_w        #34
77: ldc2_w        #34
80: invokevirtual #43
83: new           #145
86: dup
87: ldc2_w        #14
90: ldc2_w        #12
93: ldc2_w        #12
96: invokespecial #146
99: astore        4
101: aload         4
103: invokevirtual #148
106: dstore        5
108: aload_2
109: aload         4
111: invokevirtual #123
114: new           #145
117: dup
118: ldc2_w        #14
121: ldc2_w        #10
124: dconst_1
125: invokespecial #146
128: astore        7
130: aload         7
132: invokevirtual #147
135: dstore        8
137: aload         7
139: invokevirtual #148
142: dstore        10
144: aload         7
146: invokevirtual #149
149: dstore        12
151: aload         7
153: invokevirtual #148
156: dstore        14
158: aload_2
159: aload         7
161: invokevirtual #123
164: aload_3
165: invokestatic  #20
168: new           #83
171: dup
172: invokespecial #84
175: ldc           #85
177: invokevirtual #86
180: dload         5
182: invokevirtual #150
185: ldc           #88
187: invokevirtual #86
190: ldc2_w        #14
193: invokevirtual #150
196: ldc           #85
198: invokevirtual #86
201: invokevirtual #89
204: dload         5
206: ldc2_w        #14
209: dcmpl
210: ifne          217
213: iconst_1
214: goto          218
217: iconst_0
218: invokestatic  #91
221: new           #83
224: dup
225: invokespecial #84
228: ldc           #85
230: invokevirtual #86
233: dload         8
235: invokevirtual #150
238: ldc           #88
240: invokevirtual #86
243: ldc2_w        #10
246: invokevirtual #150
249: ldc           #85
251: invokevirtual #86
254: invokevirtual #89
257: dload         8
259: ldc2_w        #10
262: dcmpl
263: ifne          270
266: iconst_1
267: goto          271
270: iconst_0
271: invokestatic  #91
274: new           #83
277: dup
278: invokespecial #84
281: ldc           #85
283: invokevirtual #86
286: dload         10
288: invokevirtual #150
291: ldc           #88
293: invokevirtual #86
296: ldc2_w        #14
299: invokevirtual #150
302: ldc           #85
304: invokevirtual #86
307: invokevirtual #89
310: dload         10
312: ldc2_w        #14
315: dcmpl
316: ifne          323
319: iconst_1
320: goto          324
323: iconst_0
324: invokestatic  #91
327: new           #83
330: dup
331: invokespecial #84
334: ldc           #85
336: invokevirtual #86
339: dload         12
341: invokevirtual #150
344: ldc           #88
346: invokevirtual #86
349: dconst_1
350: invokevirtual #150
353: ldc           #85
355: invokevirtual #86
358: invokevirtual #89
361: dload         12
363: dconst_1
364: dcmpl
365: ifne          372
368: iconst_1
369: goto          373
372: iconst_0
373: invokestatic  #91
376: new           #83
379: dup
380: invokespecial #84
383: ldc           #85
385: invokevirtual #86
388: dload         14
390: invokevirtual #150
393: ldc           #88
395: invokevirtual #86
398: ldc2_w        #14
401: invokevirtual #150
404: ldc           #85
406: invokevirtual #86
409: invokevirtual #89
412: dload         14
414: ldc2_w        #14
417: dcmpl
418: ifne          425
421: iconst_1
422: goto          426
425: iconst_0
426: invokestatic  #91
429: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test374
Start line: 12187
End line: 12212
Method source code: 
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) (-1L), (-1.0d));
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) 0, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint((double) 10, 35.0d);
        harmonicFitter1.addObservedPoint(0.0d, (double) 10L);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric20 = null;
        double[] doubleArray23 = new double[] { 100.0f, (-1) };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray24 = harmonicFitter1.fit(parametric20, doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, -1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #724
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: ldc2_w        #34
49: ldc2_w        #10
52: ldc2_w        #10
55: invokevirtual #54
58: aload_2
59: invokevirtual #59
62: aload_2
63: dconst_0
64: dconst_0
65: ldc2_w        #34
68: invokevirtual #54
71: aload_2
72: ldc2_w        #32
75: ldc2_w        #14
78: invokevirtual #43
81: aload_2
82: dconst_0
83: ldc2_w        #32
86: invokevirtual #43
89: aload_2
90: invokevirtual #59
93: aconst_null
94: astore        4
96: iconst_2
97: newarray       double
99: dup
100: iconst_0
101: ldc2_w        #34
104: dastore
105: dup
106: iconst_1
107: ldc2_w        #10
110: dastore
111: astore        5
113: aload_2
114: aload         4
116: aload         5
118: invokevirtual #30
121: astore        6
123: ldc           #17
125: invokestatic  #18
128: goto          133
131: astore        6
133: aload_3
134: invokestatic  #20
137: aload         5
139: invokestatic  #20
142: aload         5
144: invokestatic  #21
147: ldc_w         #725
150: invokestatic  #23
153: return
Exception table:
from    to  target type
113   128   131   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test375
Start line: 12215
End line: 12236
Method source code: 
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric10 = null;
        double[] doubleArray17 = new double[] { 97.0d, (byte) 100, '4', 100L, 100.0d, 52.0d };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = harmonicFitter1.fit(parametric10, doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[97.0, 100.0, 52.0, 100.0, 100.0, 52.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #726
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: dconst_0
50: ldc2_w        #10
53: invokevirtual #43
56: aload_2
57: invokevirtual #25
60: astore_3
61: aconst_null
62: astore        4
64: bipush        6
66: newarray       double
68: dup
69: iconst_0
70: ldc2_w        #44
73: dastore
74: dup
75: iconst_1
76: ldc2_w        #34
79: dastore
80: dup
81: iconst_2
82: ldc2_w        #12
85: dastore
86: dup
87: iconst_3
88: ldc2_w        #34
91: dastore
92: dup
93: iconst_4
94: ldc2_w        #34
97: dastore
98: dup
99: iconst_5
100: ldc2_w        #12
103: dastore
104: astore        5
106: aload_2
107: aload         4
109: aload         5
111: invokevirtual #30
114: astore        6
116: ldc           #17
118: invokestatic  #18
121: goto          126
124: astore        6
126: aload_3
127: invokestatic  #20
130: aload         5
132: invokestatic  #20
135: aload         5
137: invokestatic  #21
140: ldc_w         #727
143: invokestatic  #23
146: return
Exception table:
from    to  target type
106   121   124   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test376
Start line: 12239
End line: 12313
Method source code: 
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_SIZE;
        java.lang.Object[] objArray1 = null;
        org.apache.commons.math3.exception.ZeroException zeroException2 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray1);
        java.lang.Number number3 = zeroException2.getArgument();
        java.lang.Number number4 = zeroException2.getArgument();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.INDEX;
        java.lang.Number number9 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException11 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number9, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException14 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException11, (org.apache.commons.math3.exception.util.Localizable) localizedFormats12, objArray13);
        boolean boolean15 = numberIsTooSmallException11.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext16 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException11);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats18 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray20 = new java.lang.Object[] { localizedFormats18, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException21 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats17, objArray20);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray25 = new java.lang.Object[] { localizedFormats23, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException26 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats22, objArray25);
        mathIllegalArgumentException21.addSuppressed((java.lang.Throwable) mathIllegalArgumentException26);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext28 = mathIllegalArgumentException21.getContext();
        java.lang.Object obj30 = exceptionContext28.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats31 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer32 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter33 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer32);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray34 = harmonicFitter33.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray35 = harmonicFitter33.getObservations();
        exceptionContext28.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats31, (java.lang.Object[]) weightedObservedPointArray35);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats37 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer38 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter39 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer38);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray40 = harmonicFitter39.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException41 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats37, (java.lang.Object[]) weightedObservedPointArray40);
        exceptionContext16.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats31, (java.lang.Object[]) weightedObservedPointArray40);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException43 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats7, (java.lang.Object[]) weightedObservedPointArray40);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException44 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats6, (java.lang.Object[]) weightedObservedPointArray40);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException45 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) zeroException2, (org.apache.commons.math3.exception.util.Localizable) localizedFormats5, (java.lang.Object[]) weightedObservedPointArray40);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext46 = zeroException2.getContext();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_SIZE + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_SIZE));
        org.junit.Assert.assertEquals("'" + number3 + "' != '" + 0 + "'", number3, 0);
        org.junit.Assert.assertEquals("'" + number4 + "' != '" + 0 + "'", number4, 0);
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ILLEGAL_STATE));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INDEX + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX));
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats18 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats18.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext28);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + localizedFormats31 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats31.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray34);
        org.junit.Assert.assertNotNull(weightedObservedPointArray35);
        org.junit.Assert.assertTrue("'" + localizedFormats37 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats37.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray40);
        org.junit.Assert.assertNotNull(exceptionContext46);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #728
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #327
28: astore_1
29: aconst_null
30: astore_2
31: new           #81
34: dup
35: aload_1
36: aload_2
37: invokespecial #82
40: astore_3
41: aload_3
42: invokevirtual #243
45: astore        4
47: aload_3
48: invokevirtual #243
51: astore        5
53: getstatic     #729
56: astore        6
58: getstatic     #230
61: astore        7
63: getstatic     #231
66: astore        8
68: aconst_null
69: astore        9
71: new           #28
74: dup
75: bipush        100
77: invokestatic  #159
80: aload         9
82: iconst_0
83: invokespecial #160
86: astore        10
88: getstatic     #161
91: astore        11
93: iconst_0
94: anewarray     #5
97: astore        12
99: new           #136
102: dup
103: aload         10
105: aload         11
107: aload         12
109: invokespecial #137
112: astore        13
114: aload         10
116: invokevirtual #162
119: istore        14
121: new           #163
124: dup
125: aload         10
127: invokespecial #164
130: astore        15
132: getstatic     #127
135: astore        16
137: getstatic     #128
140: astore        17
142: iconst_2
143: anewarray     #5
146: dup
147: iconst_0
148: aload         17
150: aastore
151: dup
152: iconst_1
153: lconst_1
154: invokestatic  #129
157: aastore
158: astore        18
160: new           #130
163: dup
164: aload         16
166: aload         18
168: invokespecial #131
171: astore        19
173: getstatic     #127
176: astore        20
178: getstatic     #128
181: astore        21
183: iconst_2
184: anewarray     #5
187: dup
188: iconst_0
189: aload         21
191: aastore
192: dup
193: iconst_1
194: lconst_1
195: invokestatic  #129
198: aastore
199: astore        22
201: new           #130
204: dup
205: aload         20
207: aload         22
209: invokespecial #131
212: astore        23
214: aload         19
216: aload         23
218: invokevirtual #132
221: aload         19
223: invokevirtual #165
226: astore        24
228: aload         24
230: ldc           #166
232: invokevirtual #167
235: astore        25
237: getstatic     #168
240: astore        26
242: aconst_null
243: astore        27
245: new           #8
248: dup
249: aload         27
251: invokespecial #9
254: astore        28
256: aload         28
258: invokevirtual #25
261: astore        29
263: aload         28
265: invokevirtual #25
268: astore        30
270: aload         24
272: aload         26
274: aload         30
276: checkcast     #79
279: invokevirtual #169
282: getstatic     #156
285: astore        31
287: aconst_null
288: astore        32
290: new           #8
293: dup
294: aload         32
296: invokespecial #9
299: astore        33
301: aload         33
303: invokevirtual #25
306: astore        34
308: new           #81
311: dup
312: aload         31
314: aload         34
316: checkcast     #79
319: invokespecial #82
322: astore        35
324: aload         15
326: aload         26
328: aload         34
330: checkcast     #79
333: invokevirtual #169
336: new           #130
339: dup
340: aload         8
342: aload         34
344: checkcast     #79
347: invokespecial #131
350: astore        36
352: new           #130
355: dup
356: aload         7
358: aload         34
360: checkcast     #79
363: invokespecial #131
366: astore        37
368: new           #136
371: dup
372: aload_3
373: aload         6
375: aload         34
377: checkcast     #79
380: invokespecial #137
383: astore        38
385: aload_3
386: invokevirtual #412
389: astore        39
391: new           #83
394: dup
395: invokespecial #84
398: ldc           #85
400: invokevirtual #86
403: aload_1
404: invokevirtual #87
407: ldc           #88
409: invokevirtual #86
412: getstatic     #327
415: invokevirtual #87
418: ldc           #85
420: invokevirtual #86
423: invokevirtual #89
426: aload_1
427: getstatic     #327
430: invokevirtual #90
433: invokestatic  #91
436: new           #83
439: dup
440: invokespecial #84
443: ldc           #85
445: invokevirtual #86
448: aload         4
450: invokevirtual #87
453: ldc           #88
455: invokevirtual #86
458: iconst_0
459: invokevirtual #244
462: ldc           #85
464: invokevirtual #86
467: invokevirtual #89
470: aload         4
472: iconst_0
473: invokestatic  #135
476: invokestatic  #245
479: new           #83
482: dup
483: invokespecial #84
486: ldc           #85
488: invokevirtual #86
491: aload         5
493: invokevirtual #87
496: ldc           #88
498: invokevirtual #86
501: iconst_0
502: invokevirtual #244
505: ldc           #85
507: invokevirtual #86
510: invokevirtual #89
513: aload         5
515: iconst_0
516: invokestatic  #135
519: invokestatic  #245
522: new           #83
525: dup
526: invokespecial #84
529: ldc           #85
531: invokevirtual #86
534: aload         6
536: invokevirtual #87
539: ldc           #88
541: invokevirtual #86
544: getstatic     #729
547: invokevirtual #87
550: ldc           #85
552: invokevirtual #86
555: invokevirtual #89
558: aload         6
560: getstatic     #729
563: invokevirtual #90
566: invokestatic  #91
569: new           #83
572: dup
573: invokespecial #84
576: ldc           #85
578: invokevirtual #86
581: aload         7
583: invokevirtual #87
586: ldc           #88
588: invokevirtual #86
591: getstatic     #230
594: invokevirtual #87
597: ldc           #85
599: invokevirtual #86
602: invokevirtual #89
605: aload         7
607: getstatic     #230
610: invokevirtual #90
613: invokestatic  #91
616: new           #83
619: dup
620: invokespecial #84
623: ldc           #85
625: invokevirtual #86
628: aload         8
630: invokevirtual #87
633: ldc           #88
635: invokevirtual #86
638: getstatic     #231
641: invokevirtual #87
644: ldc           #85
646: invokevirtual #86
649: invokevirtual #89
652: aload         8
654: getstatic     #231
657: invokevirtual #90
660: invokestatic  #91
663: new           #83
666: dup
667: invokespecial #84
670: ldc           #85
672: invokevirtual #86
675: aload         11
677: invokevirtual #87
680: ldc           #88
682: invokevirtual #86
685: getstatic     #161
688: invokevirtual #87
691: ldc           #85
693: invokevirtual #86
696: invokevirtual #89
699: aload         11
701: getstatic     #161
704: invokevirtual #90
707: invokestatic  #91
710: aload         12
712: invokestatic  #20
715: aload         12
717: invokestatic  #92
720: ldc           #74
722: invokestatic  #23
725: aload         12
727: invokestatic  #93
730: ldc           #74
732: invokestatic  #23
735: new           #83
738: dup
739: invokespecial #84
742: ldc           #85
744: invokevirtual #86
747: iload         14
749: invokevirtual #170
752: ldc           #88
754: invokevirtual #86
757: iconst_0
758: invokevirtual #170
761: ldc           #85
763: invokevirtual #86
766: invokevirtual #89
769: iload         14
771: ifne          778
774: iconst_1
775: goto          779
778: iconst_0
779: invokestatic  #91
782: new           #83
785: dup
786: invokespecial #84
789: ldc           #85
791: invokevirtual #86
794: aload         16
796: invokevirtual #87
799: ldc           #88
801: invokevirtual #86
804: getstatic     #127
807: invokevirtual #87
810: ldc           #85
812: invokevirtual #86
815: invokevirtual #89
818: aload         16
820: getstatic     #127
823: invokevirtual #90
826: invokestatic  #91
829: new           #83
832: dup
833: invokespecial #84
836: ldc           #85
838: invokevirtual #86
841: aload         17
843: invokevirtual #87
846: ldc           #88
848: invokevirtual #86
851: getstatic     #128
854: invokevirtual #87
857: ldc           #85
859: invokevirtual #86
862: invokevirtual #89
865: aload         17
867: getstatic     #128
870: invokevirtual #90
873: invokestatic  #91
876: aload         18
878: invokestatic  #20
881: aload         18
883: invokestatic  #92
886: ldc           #140
888: invokestatic  #23
891: aload         18
893: invokestatic  #93
896: ldc           #140
898: invokestatic  #23
901: new           #83
904: dup
905: invokespecial #84
908: ldc           #85
910: invokevirtual #86
913: aload         20
915: invokevirtual #87
918: ldc           #88
920: invokevirtual #86
923: getstatic     #127
926: invokevirtual #87
929: ldc           #85
931: invokevirtual #86
934: invokevirtual #89
937: aload         20
939: getstatic     #127
942: invokevirtual #90
945: invokestatic  #91
948: new           #83
951: dup
952: invokespecial #84
955: ldc           #85
957: invokevirtual #86
960: aload         21
962: invokevirtual #87
965: ldc           #88
967: invokevirtual #86
970: getstatic     #128
973: invokevirtual #87
976: ldc           #85
978: invokevirtual #86
981: invokevirtual #89
984: aload         21
986: getstatic     #128
989: invokevirtual #90
992: invokestatic  #91
995: aload         22
997: invokestatic  #20
1000: aload         22
1002: invokestatic  #92
1005: ldc           #140
1007: invokestatic  #23
1010: aload         22
1012: invokestatic  #93
1015: ldc           #140
1017: invokestatic  #23
1020: aload         24
1022: invokestatic  #20
1025: aload         25
1027: invokestatic  #171
1030: new           #83
1033: dup
1034: invokespecial #84
1037: ldc           #85
1039: invokevirtual #86
1042: aload         26
1044: invokevirtual #87
1047: ldc           #88
1049: invokevirtual #86
1052: getstatic     #168
1055: invokevirtual #87
1058: ldc           #85
1060: invokevirtual #86
1063: invokevirtual #89
1066: aload         26
1068: getstatic     #168
1071: invokevirtual #90
1074: invokestatic  #91
1077: aload         29
1079: invokestatic  #20
1082: aload         30
1084: invokestatic  #20
1087: new           #83
1090: dup
1091: invokespecial #84
1094: ldc           #85
1096: invokevirtual #86
1099: aload         31
1101: invokevirtual #87
1104: ldc           #88
1106: invokevirtual #86
1109: getstatic     #156
1112: invokevirtual #87
1115: ldc           #85
1117: invokevirtual #86
1120: invokevirtual #89
1123: aload         31
1125: getstatic     #156
1128: invokevirtual #90
1131: invokestatic  #91
1134: aload         34
1136: invokestatic  #20
1139: aload         39
1141: invokestatic  #20
1144: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test377
Start line: 12316
End line: 12349
Method source code: 
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint15 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double16 = weightedObservedPoint15.getX();
        double double17 = weightedObservedPoint15.getY();
        double double18 = weightedObservedPoint15.getX();
        double double19 = weightedObservedPoint15.getY();
        double double20 = weightedObservedPoint15.getX();
        double double21 = weightedObservedPoint15.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint15);
        harmonicFitter1.addObservedPoint((double) 100, (double) 0);
        double[] doubleArray30 = new double[] { 0L, '#', 52.0d, (short) 10 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray31 = harmonicFitter1.fit(doubleArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[0.0, 35.0, 52.0, 10.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #730
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: dconst_0
54: ldc2_w        #12
57: ldc2_w        #10
60: invokevirtual #54
63: new           #145
66: dup
67: ldc2_w        #14
70: ldc2_w        #12
73: ldc2_w        #12
76: invokespecial #146
79: astore_3
80: aload_3
81: invokevirtual #147
84: dstore        4
86: aload_3
87: invokevirtual #149
90: dstore        6
92: aload_3
93: invokevirtual #147
96: dstore        8
98: aload_3
99: invokevirtual #149
102: dstore        10
104: aload_3
105: invokevirtual #147
108: dstore        12
110: aload_3
111: invokevirtual #147
114: dstore        14
116: aload_2
117: aload_3
118: invokevirtual #123
121: aload_2
122: ldc2_w        #34
125: dconst_0
126: invokevirtual #43
129: iconst_4
130: newarray       double
132: dup
133: iconst_0
134: dconst_0
135: dastore
136: dup
137: iconst_1
138: ldc2_w        #14
141: dastore
142: dup
143: iconst_2
144: ldc2_w        #12
147: dastore
148: dup
149: iconst_3
150: ldc2_w        #32
153: dastore
154: astore        16
156: aload_2
157: aload         16
159: invokevirtual #16
162: astore        17
164: ldc           #17
166: invokestatic  #18
169: goto          174
172: astore        17
174: new           #83
177: dup
178: invokespecial #84
181: ldc           #85
183: invokevirtual #86
186: dload         4
188: invokevirtual #150
191: ldc           #88
193: invokevirtual #86
196: ldc2_w        #12
199: invokevirtual #150
202: ldc           #85
204: invokevirtual #86
207: invokevirtual #89
210: dload         4
212: ldc2_w        #12
215: dcmpl
216: ifne          223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #91
227: new           #83
230: dup
231: invokespecial #84
234: ldc           #85
236: invokevirtual #86
239: dload         6
241: invokevirtual #150
244: ldc           #88
246: invokevirtual #86
249: ldc2_w        #12
252: invokevirtual #150
255: ldc           #85
257: invokevirtual #86
260: invokevirtual #89
263: dload         6
265: ldc2_w        #12
268: dcmpl
269: ifne          276
272: iconst_1
273: goto          277
276: iconst_0
277: invokestatic  #91
280: new           #83
283: dup
284: invokespecial #84
287: ldc           #85
289: invokevirtual #86
292: dload         8
294: invokevirtual #150
297: ldc           #88
299: invokevirtual #86
302: ldc2_w        #12
305: invokevirtual #150
308: ldc           #85
310: invokevirtual #86
313: invokevirtual #89
316: dload         8
318: ldc2_w        #12
321: dcmpl
322: ifne          329
325: iconst_1
326: goto          330
329: iconst_0
330: invokestatic  #91
333: new           #83
336: dup
337: invokespecial #84
340: ldc           #85
342: invokevirtual #86
345: dload         10
347: invokevirtual #150
350: ldc           #88
352: invokevirtual #86
355: ldc2_w        #12
358: invokevirtual #150
361: ldc           #85
363: invokevirtual #86
366: invokevirtual #89
369: dload         10
371: ldc2_w        #12
374: dcmpl
375: ifne          382
378: iconst_1
379: goto          383
382: iconst_0
383: invokestatic  #91
386: new           #83
389: dup
390: invokespecial #84
393: ldc           #85
395: invokevirtual #86
398: dload         12
400: invokevirtual #150
403: ldc           #88
405: invokevirtual #86
408: ldc2_w        #12
411: invokevirtual #150
414: ldc           #85
416: invokevirtual #86
419: invokevirtual #89
422: dload         12
424: ldc2_w        #12
427: dcmpl
428: ifne          435
431: iconst_1
432: goto          436
435: iconst_0
436: invokestatic  #91
439: new           #83
442: dup
443: invokespecial #84
446: ldc           #85
448: invokevirtual #86
451: dload         14
453: invokevirtual #150
456: ldc           #88
458: invokevirtual #86
461: ldc2_w        #12
464: invokevirtual #150
467: ldc           #85
469: invokevirtual #86
472: invokevirtual #89
475: dload         14
477: ldc2_w        #12
480: dcmpl
481: ifne          488
484: iconst_1
485: goto          489
488: iconst_0
489: invokestatic  #91
492: aload         16
494: invokestatic  #20
497: aload         16
499: invokestatic  #21
502: ldc_w         #731
505: invokestatic  #23
508: return
Exception table:
from    to  target type
156   169   172   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test378
Start line: 12352
End line: 12393
Method source code: 
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint19 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter8.addObservedPoint(weightedObservedPoint19);
        harmonicFitter1.addObservedPoint(weightedObservedPoint19);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer22 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter23 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer22);
        harmonicFitter23.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter23.clearObservations();
        harmonicFitter23.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint34 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double35 = weightedObservedPoint34.getX();
        harmonicFitter23.addObservedPoint(weightedObservedPoint34);
        harmonicFitter1.addObservedPoint(weightedObservedPoint34);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint41 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((-1.0d), (double) 100, (double) (-1));
        harmonicFitter1.addObservedPoint(weightedObservedPoint41);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint46 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double47 = weightedObservedPoint46.getX();
        double double48 = weightedObservedPoint46.getWeight();
        double double49 = weightedObservedPoint46.getWeight();
        double double50 = weightedObservedPoint46.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint46);
        double double52 = weightedObservedPoint46.getY();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 52.0d + "'", double47 == 52.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 35.0d + "'", double48 == 35.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 35.0d + "'", double49 == 35.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 52.0d + "'", double50 == 52.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 52.0d + "'", double52 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #732
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aconst_null
53: astore        4
55: new           #8
58: dup
59: aload         4
61: invokespecial #9
64: astore        5
66: aload         5
68: dconst_1
69: ldc2_w        #32
72: invokevirtual #43
75: aload         5
77: dconst_0
78: ldc2_w        #34
81: invokevirtual #43
84: aload         5
86: invokevirtual #25
89: astore        6
91: new           #145
94: dup
95: dconst_1
96: dconst_0
97: ldc2_w        #34
100: invokespecial #146
103: astore        7
105: aload         5
107: aload         7
109: invokevirtual #123
112: aload_2
113: aload         7
115: invokevirtual #123
118: aconst_null
119: astore        8
121: new           #8
124: dup
125: aload         8
127: invokespecial #9
130: astore        9
132: aload         9
134: dconst_1
135: ldc2_w        #32
138: invokevirtual #43
141: aload         9
143: invokevirtual #59
146: aload         9
148: dconst_0
149: ldc2_w        #10
152: invokevirtual #43
155: new           #145
158: dup
159: ldc2_w        #14
162: ldc2_w        #12
165: ldc2_w        #12
168: invokespecial #146
171: astore        10
173: aload         10
175: invokevirtual #147
178: dstore        11
180: aload         9
182: aload         10
184: invokevirtual #123
187: aload_2
188: aload         10
190: invokevirtual #123
193: new           #145
196: dup
197: ldc2_w        #10
200: ldc2_w        #34
203: ldc2_w        #10
206: invokespecial #146
209: astore        13
211: aload_2
212: aload         13
214: invokevirtual #123
217: new           #145
220: dup
221: ldc2_w        #14
224: ldc2_w        #12
227: ldc2_w        #12
230: invokespecial #146
233: astore        14
235: aload         14
237: invokevirtual #147
240: dstore        15
242: aload         14
244: invokevirtual #148
247: dstore        17
249: aload         14
251: invokevirtual #148
254: dstore        19
256: aload         14
258: invokevirtual #149
261: dstore        21
263: aload_2
264: aload         14
266: invokevirtual #123
269: aload         14
271: invokevirtual #149
274: dstore        23
276: aload_3
277: invokestatic  #20
280: aload         6
282: invokestatic  #20
285: new           #83
288: dup
289: invokespecial #84
292: ldc           #85
294: invokevirtual #86
297: dload         11
299: invokevirtual #150
302: ldc           #88
304: invokevirtual #86
307: ldc2_w        #12
310: invokevirtual #150
313: ldc           #85
315: invokevirtual #86
318: invokevirtual #89
321: dload         11
323: ldc2_w        #12
326: dcmpl
327: ifne          334
330: iconst_1
331: goto          335
334: iconst_0
335: invokestatic  #91
338: new           #83
341: dup
342: invokespecial #84
345: ldc           #85
347: invokevirtual #86
350: dload         15
352: invokevirtual #150
355: ldc           #88
357: invokevirtual #86
360: ldc2_w        #12
363: invokevirtual #150
366: ldc           #85
368: invokevirtual #86
371: invokevirtual #89
374: dload         15
376: ldc2_w        #12
379: dcmpl
380: ifne          387
383: iconst_1
384: goto          388
387: iconst_0
388: invokestatic  #91
391: new           #83
394: dup
395: invokespecial #84
398: ldc           #85
400: invokevirtual #86
403: dload         17
405: invokevirtual #150
408: ldc           #88
410: invokevirtual #86
413: ldc2_w        #14
416: invokevirtual #150
419: ldc           #85
421: invokevirtual #86
424: invokevirtual #89
427: dload         17
429: ldc2_w        #14
432: dcmpl
433: ifne          440
436: iconst_1
437: goto          441
440: iconst_0
441: invokestatic  #91
444: new           #83
447: dup
448: invokespecial #84
451: ldc           #85
453: invokevirtual #86
456: dload         19
458: invokevirtual #150
461: ldc           #88
463: invokevirtual #86
466: ldc2_w        #14
469: invokevirtual #150
472: ldc           #85
474: invokevirtual #86
477: invokevirtual #89
480: dload         19
482: ldc2_w        #14
485: dcmpl
486: ifne          493
489: iconst_1
490: goto          494
493: iconst_0
494: invokestatic  #91
497: new           #83
500: dup
501: invokespecial #84
504: ldc           #85
506: invokevirtual #86
509: dload         21
511: invokevirtual #150
514: ldc           #88
516: invokevirtual #86
519: ldc2_w        #12
522: invokevirtual #150
525: ldc           #85
527: invokevirtual #86
530: invokevirtual #89
533: dload         21
535: ldc2_w        #12
538: dcmpl
539: ifne          546
542: iconst_1
543: goto          547
546: iconst_0
547: invokestatic  #91
550: new           #83
553: dup
554: invokespecial #84
557: ldc           #85
559: invokevirtual #86
562: dload         23
564: invokevirtual #150
567: ldc           #88
569: invokevirtual #86
572: ldc2_w        #12
575: invokevirtual #150
578: ldc           #85
580: invokevirtual #86
583: invokevirtual #89
586: dload         23
588: ldc2_w        #12
591: dcmpl
592: ifne          599
595: iconst_1
596: goto          600
599: iconst_0
600: invokestatic  #91
603: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test379
Start line: 12396
End line: 12410
Method source code: 
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((-1.0d), (double) 10, (double) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) 100L, (double) 'a', (double) 10L);
        harmonicFitter1.addObservedPoint((double) ' ', (double) (-1));
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #733
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: aload_2
62: ldc2_w        #10
65: ldc2_w        #32
68: ldc2_w        #32
71: invokevirtual #54
74: aload_2
75: invokevirtual #59
78: aload_2
79: ldc2_w        #34
82: ldc2_w        #44
85: ldc2_w        #32
88: invokevirtual #54
91: aload_2
92: ldc2_w        #38
95: ldc2_w        #10
98: invokevirtual #43
101: aload_3
102: invokestatic  #20
105: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test380
Start line: 12413
End line: 12561
Method source code: 
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats3 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray7 = new java.lang.Object[] { localizedFormats5, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException8 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats4, objArray7);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats10 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray12 = new java.lang.Object[] { localizedFormats10, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException13 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats9, objArray12);
        mathIllegalArgumentException8.addSuppressed((java.lang.Throwable) mathIllegalArgumentException13);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray18 = new java.lang.Object[] { localizedFormats16, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException19 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException13, (org.apache.commons.math3.exception.util.Localizable) localizedFormats15, objArray18);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException20 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats3, objArray18);
        java.lang.Object[] objArray21 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray18);
        org.apache.commons.math3.exception.ZeroException zeroException22 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats2, objArray21);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException23 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, objArray21);
        java.lang.Throwable[] throwableArray24 = mathIllegalStateException23.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException25 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) throwableArray24);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext26 = mathIllegalStateException25.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext27 = mathIllegalStateException25.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats28 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_TRANSFORM_TO_DOUBLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException33 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats29, (java.lang.Number) 1.0d, (java.lang.Number) (byte) 100, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats34 = org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats35 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats36 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats37 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats38 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray40 = new java.lang.Object[] { localizedFormats38, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException41 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats37, objArray40);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats42 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats43 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray45 = new java.lang.Object[] { localizedFormats43, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException46 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats42, objArray45);
        mathIllegalArgumentException41.addSuppressed((java.lang.Throwable) mathIllegalArgumentException46);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats48 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats49 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray51 = new java.lang.Object[] { localizedFormats49, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException52 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException46, (org.apache.commons.math3.exception.util.Localizable) localizedFormats48, objArray51);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException53 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats36, objArray51);
        java.lang.Object[] objArray54 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray51);
        org.apache.commons.math3.exception.ZeroException zeroException55 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats35, objArray54);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException56 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats34, objArray54);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats57 = org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats58 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats59 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray61 = new java.lang.Object[] { localizedFormats59, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException62 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats58, objArray61);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats63 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats64 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray66 = new java.lang.Object[] { localizedFormats64, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException67 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats63, objArray66);
        mathIllegalArgumentException62.addSuppressed((java.lang.Throwable) mathIllegalArgumentException67);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats69 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats70 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray72 = new java.lang.Object[] { localizedFormats70, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException73 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException67, (org.apache.commons.math3.exception.util.Localizable) localizedFormats69, objArray72);
        java.lang.Object[] objArray74 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray72);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException75 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats57, objArray74);
        org.apache.commons.math3.exception.ZeroException zeroException76 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats34, objArray74);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer77 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter78 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer77);
        harmonicFitter78.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter78.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter78.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray86 = harmonicFitter78.getObservations();
        java.lang.Object[] objArray87 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray86);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException88 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException33, (org.apache.commons.math3.exception.util.Localizable) localizedFormats34, (java.lang.Object[]) weightedObservedPointArray86);
        exceptionContext27.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats28, (java.lang.Object[]) weightedObservedPointArray86);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats3 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats3.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats10 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats10.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(exceptionContext26);
        org.junit.Assert.assertNotNull(exceptionContext27);
        org.junit.Assert.assertTrue("'" + localizedFormats28 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_TRANSFORM_TO_DOUBLE + "'", localizedFormats28.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_TRANSFORM_TO_DOUBLE));
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY));
        org.junit.Assert.assertTrue("'" + localizedFormats34 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM + "'", localizedFormats34.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM));
        org.junit.Assert.assertTrue("'" + localizedFormats35 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats35.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats36 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats36.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats37 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats37.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats38 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats38.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats42 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats42.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats43 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats43.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats48 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats48.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats49 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats49.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats57 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED + "'", localizedFormats57.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED));
        org.junit.Assert.assertTrue("'" + localizedFormats58 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats58.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats59 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats59.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats63 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats63.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats64 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats64.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats69 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats69.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats70 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats70.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(weightedObservedPointArray86);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #734
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #333
28: astore_1
29: getstatic     #735
32: astore_2
33: getstatic     #125
36: astore_3
37: getstatic     #126
40: astore        4
42: getstatic     #127
45: astore        5
47: getstatic     #128
50: astore        6
52: iconst_2
53: anewarray     #5
56: dup
57: iconst_0
58: aload         6
60: aastore
61: dup
62: iconst_1
63: lconst_1
64: invokestatic  #129
67: aastore
68: astore        7
70: new           #130
73: dup
74: aload         5
76: aload         7
78: invokespecial #131
81: astore        8
83: getstatic     #127
86: astore        9
88: getstatic     #128
91: astore        10
93: iconst_2
94: anewarray     #5
97: dup
98: iconst_0
99: aload         10
101: aastore
102: dup
103: iconst_1
104: lconst_1
105: invokestatic  #129
108: aastore
109: astore        11
111: new           #130
114: dup
115: aload         9
117: aload         11
119: invokespecial #131
122: astore        12
124: aload         8
126: aload         12
128: invokevirtual #132
131: getstatic     #133
134: astore        13
136: getstatic     #134
139: astore        14
141: iconst_2
142: anewarray     #5
145: dup
146: iconst_0
147: aload         14
149: aastore
150: dup
151: iconst_1
152: bipush        10
154: invokestatic  #135
157: aastore
158: astore        15
160: new           #136
163: dup
164: aload         12
166: aload         13
168: aload         15
170: invokespecial #137
173: astore        16
175: new           #136
178: dup
179: aload         4
181: aload         15
183: invokespecial #138
186: astore        17
188: aload         15
190: invokestatic  #80
193: astore        18
195: new           #81
198: dup
199: aload_3
200: aload         18
202: invokespecial #82
205: astore        19
207: new           #136
210: dup
211: aload_2
212: aload         18
214: invokespecial #138
217: astore        20
219: aload         20
221: invokevirtual #556
224: astore        21
226: new           #136
229: dup
230: aload_1
231: aload         21
233: checkcast     #79
236: invokespecial #138
239: astore        22
241: aload         22
243: invokevirtual #282
246: astore        23
248: aload         22
250: invokevirtual #282
253: astore        24
255: getstatic     #736
258: astore        25
260: getstatic     #424
263: astore        26
265: new           #28
268: dup
269: aload         26
271: dconst_1
272: invokestatic  #247
275: bipush        100
277: invokestatic  #159
280: iconst_1
281: invokespecial #195
284: astore        27
286: getstatic     #425
289: astore        28
291: getstatic     #125
294: astore        29
296: getstatic     #126
299: astore        30
301: getstatic     #127
304: astore        31
306: getstatic     #128
309: astore        32
311: iconst_2
312: anewarray     #5
315: dup
316: iconst_0
317: aload         32
319: aastore
320: dup
321: iconst_1
322: lconst_1
323: invokestatic  #129
326: aastore
327: astore        33
329: new           #130
332: dup
333: aload         31
335: aload         33
337: invokespecial #131
340: astore        34
342: getstatic     #127
345: astore        35
347: getstatic     #128
350: astore        36
352: iconst_2
353: anewarray     #5
356: dup
357: iconst_0
358: aload         36
360: aastore
361: dup
362: iconst_1
363: lconst_1
364: invokestatic  #129
367: aastore
368: astore        37
370: new           #130
373: dup
374: aload         35
376: aload         37
378: invokespecial #131
381: astore        38
383: aload         34
385: aload         38
387: invokevirtual #132
390: getstatic     #133
393: astore        39
395: getstatic     #134
398: astore        40
400: iconst_2
401: anewarray     #5
404: dup
405: iconst_0
406: aload         40
408: aastore
409: dup
410: iconst_1
411: bipush        10
413: invokestatic  #135
416: aastore
417: astore        41
419: new           #136
422: dup
423: aload         38
425: aload         39
427: aload         41
429: invokespecial #137
432: astore        42
434: new           #136
437: dup
438: aload         30
440: aload         41
442: invokespecial #138
445: astore        43
447: aload         41
449: invokestatic  #80
452: astore        44
454: new           #81
457: dup
458: aload         29
460: aload         44
462: invokespecial #82
465: astore        45
467: new           #130
470: dup
471: aload         28
473: aload         44
475: invokespecial #131
478: astore        46
480: getstatic     #426
483: astore        47
485: getstatic     #127
488: astore        48
490: getstatic     #128
493: astore        49
495: iconst_2
496: anewarray     #5
499: dup
500: iconst_0
501: aload         49
503: aastore
504: dup
505: iconst_1
506: lconst_1
507: invokestatic  #129
510: aastore
511: astore        50
513: new           #130
516: dup
517: aload         48
519: aload         50
521: invokespecial #131
524: astore        51
526: getstatic     #127
529: astore        52
531: getstatic     #128
534: astore        53
536: iconst_2
537: anewarray     #5
540: dup
541: iconst_0
542: aload         53
544: aastore
545: dup
546: iconst_1
547: lconst_1
548: invokestatic  #129
551: aastore
552: astore        54
554: new           #130
557: dup
558: aload         52
560: aload         54
562: invokespecial #131
565: astore        55
567: aload         51
569: aload         55
571: invokevirtual #132
574: getstatic     #133
577: astore        56
579: getstatic     #134
582: astore        57
584: iconst_2
585: anewarray     #5
588: dup
589: iconst_0
590: aload         57
592: aastore
593: dup
594: iconst_1
595: bipush        10
597: invokestatic  #135
600: aastore
601: astore        58
603: new           #136
606: dup
607: aload         55
609: aload         56
611: aload         58
613: invokespecial #137
616: astore        59
618: aload         58
620: invokestatic  #80
623: astore        60
625: new           #136
628: dup
629: aload         47
631: aload         60
633: invokespecial #138
636: astore        61
638: new           #81
641: dup
642: aload         28
644: aload         60
646: invokespecial #82
649: astore        62
651: aconst_null
652: astore        63
654: new           #8
657: dup
658: aload         63
660: invokespecial #9
663: astore        64
665: aload         64
667: dconst_1
668: ldc2_w        #32
671: invokevirtual #43
674: aload         64
676: dconst_0
677: ldc2_w        #34
680: invokevirtual #43
683: aload         64
685: invokevirtual #59
688: aload         64
690: invokevirtual #25
693: astore        65
695: aload         65
697: checkcast     #79
700: invokestatic  #80
703: astore        66
705: new           #136
708: dup
709: aload         27
711: aload         28
713: aload         65
715: checkcast     #79
718: invokespecial #137
721: astore        67
723: aload         24
725: aload         25
727: aload         65
729: checkcast     #79
732: invokevirtual #169
735: new           #83
738: dup
739: invokespecial #84
742: ldc           #85
744: invokevirtual #86
747: aload_1
748: invokevirtual #87
751: ldc           #88
753: invokevirtual #86
756: getstatic     #333
759: invokevirtual #87
762: ldc           #85
764: invokevirtual #86
767: invokevirtual #89
770: aload_1
771: getstatic     #333
774: invokevirtual #90
777: invokestatic  #91
780: new           #83
783: dup
784: invokespecial #84
787: ldc           #85
789: invokevirtual #86
792: aload_2
793: invokevirtual #87
796: ldc           #88
798: invokevirtual #86
801: getstatic     #735
804: invokevirtual #87
807: ldc           #85
809: invokevirtual #86
812: invokevirtual #89
815: aload_2
816: getstatic     #735
819: invokevirtual #90
822: invokestatic  #91
825: new           #83
828: dup
829: invokespecial #84
832: ldc           #85
834: invokevirtual #86
837: aload_3
838: invokevirtual #87
841: ldc           #88
843: invokevirtual #86
846: getstatic     #125
849: invokevirtual #87
852: ldc           #85
854: invokevirtual #86
857: invokevirtual #89
860: aload_3
861: getstatic     #125
864: invokevirtual #90
867: invokestatic  #91
870: new           #83
873: dup
874: invokespecial #84
877: ldc           #85
879: invokevirtual #86
882: aload         4
884: invokevirtual #87
887: ldc           #88
889: invokevirtual #86
892: getstatic     #126
895: invokevirtual #87
898: ldc           #85
900: invokevirtual #86
903: invokevirtual #89
906: aload         4
908: getstatic     #126
911: invokevirtual #90
914: invokestatic  #91
917: new           #83
920: dup
921: invokespecial #84
924: ldc           #85
926: invokevirtual #86
929: aload         5
931: invokevirtual #87
934: ldc           #88
936: invokevirtual #86
939: getstatic     #127
942: invokevirtual #87
945: ldc           #85
947: invokevirtual #86
950: invokevirtual #89
953: aload         5
955: getstatic     #127
958: invokevirtual #90
961: invokestatic  #91
964: new           #83
967: dup
968: invokespecial #84
971: ldc           #85
973: invokevirtual #86
976: aload         6
978: invokevirtual #87
981: ldc           #88
983: invokevirtual #86
986: getstatic     #128
989: invokevirtual #87
992: ldc           #85
994: invokevirtual #86
997: invokevirtual #89
1000: aload         6
1002: getstatic     #128
1005: invokevirtual #90
1008: invokestatic  #91
1011: aload         7
1013: invokestatic  #20
1016: aload         7
1018: invokestatic  #92
1021: ldc           #140
1023: invokestatic  #23
1026: aload         7
1028: invokestatic  #93
1031: ldc           #140
1033: invokestatic  #23
1036: new           #83
1039: dup
1040: invokespecial #84
1043: ldc           #85
1045: invokevirtual #86
1048: aload         9
1050: invokevirtual #87
1053: ldc           #88
1055: invokevirtual #86
1058: getstatic     #127
1061: invokevirtual #87
1064: ldc           #85
1066: invokevirtual #86
1069: invokevirtual #89
1072: aload         9
1074: getstatic     #127
1077: invokevirtual #90
1080: invokestatic  #91
1083: new           #83
1086: dup
1087: invokespecial #84
1090: ldc           #85
1092: invokevirtual #86
1095: aload         10
1097: invokevirtual #87
1100: ldc           #88
1102: invokevirtual #86
1105: getstatic     #128
1108: invokevirtual #87
1111: ldc           #85
1113: invokevirtual #86
1116: invokevirtual #89
1119: aload         10
1121: getstatic     #128
1124: invokevirtual #90
1127: invokestatic  #91
1130: aload         11
1132: invokestatic  #20
1135: aload         11
1137: invokestatic  #92
1140: ldc           #140
1142: invokestatic  #23
1145: aload         11
1147: invokestatic  #93
1150: ldc           #140
1152: invokestatic  #23
1155: new           #83
1158: dup
1159: invokespecial #84
1162: ldc           #85
1164: invokevirtual #86
1167: aload         13
1169: invokevirtual #87
1172: ldc           #88
1174: invokevirtual #86
1177: getstatic     #133
1180: invokevirtual #87
1183: ldc           #85
1185: invokevirtual #86
1188: invokevirtual #89
1191: aload         13
1193: getstatic     #133
1196: invokevirtual #90
1199: invokestatic  #91
1202: new           #83
1205: dup
1206: invokespecial #84
1209: ldc           #85
1211: invokevirtual #86
1214: aload         14
1216: invokevirtual #87
1219: ldc           #88
1221: invokevirtual #86
1224: getstatic     #134
1227: invokevirtual #87
1230: ldc           #85
1232: invokevirtual #86
1235: invokevirtual #89
1238: aload         14
1240: getstatic     #134
1243: invokevirtual #90
1246: invokestatic  #91
1249: aload         15
1251: invokestatic  #20
1254: aload         15
1256: invokestatic  #92
1259: ldc           #141
1261: invokestatic  #23
1264: aload         15
1266: invokestatic  #93
1269: ldc           #141
1271: invokestatic  #23
1274: aload         18
1276: invokestatic  #20
1279: aload         18
1281: invokestatic  #92
1284: ldc           #141
1286: invokestatic  #23
1289: aload         18
1291: invokestatic  #93
1294: ldc           #141
1296: invokestatic  #23
1299: aload         21
1301: invokestatic  #20
1304: aload         23
1306: invokestatic  #20
1309: aload         24
1311: invokestatic  #20
1314: new           #83
1317: dup
1318: invokespecial #84
1321: ldc           #85
1323: invokevirtual #86
1326: aload         25
1328: invokevirtual #87
1331: ldc           #88
1333: invokevirtual #86
1336: getstatic     #736
1339: invokevirtual #87
1342: ldc           #85
1344: invokevirtual #86
1347: invokevirtual #89
1350: aload         25
1352: getstatic     #736
1355: invokevirtual #90
1358: invokestatic  #91
1361: new           #83
1364: dup
1365: invokespecial #84
1368: ldc           #85
1370: invokevirtual #86
1373: aload         26
1375: invokevirtual #87
1378: ldc           #88
1380: invokevirtual #86
1383: getstatic     #424
1386: invokevirtual #87
1389: ldc           #85
1391: invokevirtual #86
1394: invokevirtual #89
1397: aload         26
1399: getstatic     #424
1402: invokevirtual #90
1405: invokestatic  #91
1408: new           #83
1411: dup
1412: invokespecial #84
1415: ldc           #85
1417: invokevirtual #86
1420: aload         28
1422: invokevirtual #87
1425: ldc           #88
1427: invokevirtual #86
1430: getstatic     #425
1433: invokevirtual #87
1436: ldc           #85
1438: invokevirtual #86
1441: invokevirtual #89
1444: aload         28
1446: getstatic     #425
1449: invokevirtual #90
1452: invokestatic  #91
1455: new           #83
1458: dup
1459: invokespecial #84
1462: ldc           #85
1464: invokevirtual #86
1467: aload         29
1469: invokevirtual #87
1472: ldc           #88
1474: invokevirtual #86
1477: getstatic     #125
1480: invokevirtual #87
1483: ldc           #85
1485: invokevirtual #86
1488: invokevirtual #89
1491: aload         29
1493: getstatic     #125
1496: invokevirtual #90
1499: invokestatic  #91
1502: new           #83
1505: dup
1506: invokespecial #84
1509: ldc           #85
1511: invokevirtual #86
1514: aload         30
1516: invokevirtual #87
1519: ldc           #88
1521: invokevirtual #86
1524: getstatic     #126
1527: invokevirtual #87
1530: ldc           #85
1532: invokevirtual #86
1535: invokevirtual #89
1538: aload         30
1540: getstatic     #126
1543: invokevirtual #90
1546: invokestatic  #91
1549: new           #83
1552: dup
1553: invokespecial #84
1556: ldc           #85
1558: invokevirtual #86
1561: aload         31
1563: invokevirtual #87
1566: ldc           #88
1568: invokevirtual #86
1571: getstatic     #127
1574: invokevirtual #87
1577: ldc           #85
1579: invokevirtual #86
1582: invokevirtual #89
1585: aload         31
1587: getstatic     #127
1590: invokevirtual #90
1593: invokestatic  #91
1596: new           #83
1599: dup
1600: invokespecial #84
1603: ldc           #85
1605: invokevirtual #86
1608: aload         32
1610: invokevirtual #87
1613: ldc           #88
1615: invokevirtual #86
1618: getstatic     #128
1621: invokevirtual #87
1624: ldc           #85
1626: invokevirtual #86
1629: invokevirtual #89
1632: aload         32
1634: getstatic     #128
1637: invokevirtual #90
1640: invokestatic  #91
1643: aload         33
1645: invokestatic  #20
1648: aload         33
1650: invokestatic  #92
1653: ldc           #140
1655: invokestatic  #23
1658: aload         33
1660: invokestatic  #93
1663: ldc           #140
1665: invokestatic  #23
1668: new           #83
1671: dup
1672: invokespecial #84
1675: ldc           #85
1677: invokevirtual #86
1680: aload         35
1682: invokevirtual #87
1685: ldc           #88
1687: invokevirtual #86
1690: getstatic     #127
1693: invokevirtual #87
1696: ldc           #85
1698: invokevirtual #86
1701: invokevirtual #89
1704: aload         35
1706: getstatic     #127
1709: invokevirtual #90
1712: invokestatic  #91
1715: new           #83
1718: dup
1719: invokespecial #84
1722: ldc           #85
1724: invokevirtual #86
1727: aload         36
1729: invokevirtual #87
1732: ldc           #88
1734: invokevirtual #86
1737: getstatic     #128
1740: invokevirtual #87
1743: ldc           #85
1745: invokevirtual #86
1748: invokevirtual #89
1751: aload         36
1753: getstatic     #128
1756: invokevirtual #90
1759: invokestatic  #91
1762: aload         37
1764: invokestatic  #20
1767: aload         37
1769: invokestatic  #92
1772: ldc           #140
1774: invokestatic  #23
1777: aload         37
1779: invokestatic  #93
1782: ldc           #140
1784: invokestatic  #23
1787: new           #83
1790: dup
1791: invokespecial #84
1794: ldc           #85
1796: invokevirtual #86
1799: aload         39
1801: invokevirtual #87
1804: ldc           #88
1806: invokevirtual #86
1809: getstatic     #133
1812: invokevirtual #87
1815: ldc           #85
1817: invokevirtual #86
1820: invokevirtual #89
1823: aload         39
1825: getstatic     #133
1828: invokevirtual #90
1831: invokestatic  #91
1834: new           #83
1837: dup
1838: invokespecial #84
1841: ldc           #85
1843: invokevirtual #86
1846: aload         40
1848: invokevirtual #87
1851: ldc           #88
1853: invokevirtual #86
1856: getstatic     #134
1859: invokevirtual #87
1862: ldc           #85
1864: invokevirtual #86
1867: invokevirtual #89
1870: aload         40
1872: getstatic     #134
1875: invokevirtual #90
1878: invokestatic  #91
1881: aload         41
1883: invokestatic  #20
1886: aload         41
1888: invokestatic  #92
1891: ldc           #141
1893: invokestatic  #23
1896: aload         41
1898: invokestatic  #93
1901: ldc           #141
1903: invokestatic  #23
1906: aload         44
1908: invokestatic  #20
1911: aload         44
1913: invokestatic  #92
1916: ldc           #141
1918: invokestatic  #23
1921: aload         44
1923: invokestatic  #93
1926: ldc           #141
1928: invokestatic  #23
1931: new           #83
1934: dup
1935: invokespecial #84
1938: ldc           #85
1940: invokevirtual #86
1943: aload         47
1945: invokevirtual #87
1948: ldc           #88
1950: invokevirtual #86
1953: getstatic     #426
1956: invokevirtual #87
1959: ldc           #85
1961: invokevirtual #86
1964: invokevirtual #89
1967: aload         47
1969: getstatic     #426
1972: invokevirtual #90
1975: invokestatic  #91
1978: new           #83
1981: dup
1982: invokespecial #84
1985: ldc           #85
1987: invokevirtual #86
1990: aload         48
1992: invokevirtual #87
1995: ldc           #88
1997: invokevirtual #86
2000: getstatic     #127
2003: invokevirtual #87
2006: ldc           #85
2008: invokevirtual #86
2011: invokevirtual #89
2014: aload         48
2016: getstatic     #127
2019: invokevirtual #90
2022: invokestatic  #91
2025: new           #83
2028: dup
2029: invokespecial #84
2032: ldc           #85
2034: invokevirtual #86
2037: aload         49
2039: invokevirtual #87
2042: ldc           #88
2044: invokevirtual #86
2047: getstatic     #128
2050: invokevirtual #87
2053: ldc           #85
2055: invokevirtual #86
2058: invokevirtual #89
2061: aload         49
2063: getstatic     #128
2066: invokevirtual #90
2069: invokestatic  #91
2072: aload         50
2074: invokestatic  #20
2077: aload         50
2079: invokestatic  #92
2082: ldc           #140
2084: invokestatic  #23
2087: aload         50
2089: invokestatic  #93
2092: ldc           #140
2094: invokestatic  #23
2097: new           #83
2100: dup
2101: invokespecial #84
2104: ldc           #85
2106: invokevirtual #86
2109: aload         52
2111: invokevirtual #87
2114: ldc           #88
2116: invokevirtual #86
2119: getstatic     #127
2122: invokevirtual #87
2125: ldc           #85
2127: invokevirtual #86
2130: invokevirtual #89
2133: aload         52
2135: getstatic     #127
2138: invokevirtual #90
2141: invokestatic  #91
2144: new           #83
2147: dup
2148: invokespecial #84
2151: ldc           #85
2153: invokevirtual #86
2156: aload         53
2158: invokevirtual #87
2161: ldc           #88
2163: invokevirtual #86
2166: getstatic     #128
2169: invokevirtual #87
2172: ldc           #85
2174: invokevirtual #86
2177: invokevirtual #89
2180: aload         53
2182: getstatic     #128
2185: invokevirtual #90
2188: invokestatic  #91
2191: aload         54
2193: invokestatic  #20
2196: aload         54
2198: invokestatic  #92
2201: ldc           #140
2203: invokestatic  #23
2206: aload         54
2208: invokestatic  #93
2211: ldc           #140
2213: invokestatic  #23
2216: new           #83
2219: dup
2220: invokespecial #84
2223: ldc           #85
2225: invokevirtual #86
2228: aload         56
2230: invokevirtual #87
2233: ldc           #88
2235: invokevirtual #86
2238: getstatic     #133
2241: invokevirtual #87
2244: ldc           #85
2246: invokevirtual #86
2249: invokevirtual #89
2252: aload         56
2254: getstatic     #133
2257: invokevirtual #90
2260: invokestatic  #91
2263: new           #83
2266: dup
2267: invokespecial #84
2270: ldc           #85
2272: invokevirtual #86
2275: aload         57
2277: invokevirtual #87
2280: ldc           #88
2282: invokevirtual #86
2285: getstatic     #134
2288: invokevirtual #87
2291: ldc           #85
2293: invokevirtual #86
2296: invokevirtual #89
2299: aload         57
2301: getstatic     #134
2304: invokevirtual #90
2307: invokestatic  #91
2310: aload         58
2312: invokestatic  #20
2315: aload         58
2317: invokestatic  #92
2320: ldc           #141
2322: invokestatic  #23
2325: aload         58
2327: invokestatic  #93
2330: ldc           #141
2332: invokestatic  #23
2335: aload         60
2337: invokestatic  #20
2340: aload         60
2342: invokestatic  #92
2345: ldc           #141
2347: invokestatic  #23
2350: aload         60
2352: invokestatic  #93
2355: ldc           #141
2357: invokestatic  #23
2360: aload         65
2362: invokestatic  #20
2365: aload         66
2367: invokestatic  #20
2370: aload         66
2372: invokestatic  #92
2375: ldc           #74
2377: invokestatic  #23
2380: aload         66
2382: invokestatic  #93
2385: ldc           #74
2387: invokestatic  #23
2390: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test381
Start line: 12564
End line: 12585
Method source code: 
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray4 = numberIsTooSmallException3.getSuppressed();
        boolean boolean5 = numberIsTooSmallException3.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ABSCISSA;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException16 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats6, (java.lang.Object[]) weightedObservedPointArray15);
        boolean boolean17 = numberIsTooSmallException3.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext18 = numberIsTooSmallException3.getContext();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ABSCISSA + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ABSCISSA));
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(exceptionContext18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #737
20: aastore
21: invokevirtual #7
24: pop
25: new           #28
28: dup
29: ldc2_w        #277
32: invokestatic  #129
35: bipush        10
37: invokestatic  #159
40: iconst_1
41: invokespecial #160
44: astore_1
45: aload_1
46: invokevirtual #334
49: astore_2
50: aload_1
51: invokevirtual #162
54: istore_3
55: getstatic     #399
58: astore        4
60: aconst_null
61: astore        5
63: new           #8
66: dup
67: aload         5
69: invokespecial #9
72: astore        6
74: aload         6
76: dconst_1
77: ldc2_w        #32
80: invokevirtual #43
83: aload         6
85: dconst_0
86: ldc2_w        #34
89: invokevirtual #43
92: aload         6
94: invokevirtual #25
97: astore        7
99: new           #136
102: dup
103: aload_1
104: aload         4
106: aload         7
108: checkcast     #79
111: invokespecial #137
114: astore        8
116: aload_1
117: invokevirtual #162
120: istore        9
122: aload_1
123: invokevirtual #656
126: astore        10
128: aload_2
129: invokestatic  #20
132: new           #83
135: dup
136: invokespecial #84
139: ldc           #85
141: invokevirtual #86
144: iload_3
145: invokevirtual #170
148: ldc           #88
150: invokevirtual #86
153: iconst_1
154: invokevirtual #170
157: ldc           #85
159: invokevirtual #86
162: invokevirtual #89
165: iload_3
166: iconst_1
167: if_icmpne     174
170: iconst_1
171: goto          175
174: iconst_0
175: invokestatic  #91
178: new           #83
181: dup
182: invokespecial #84
185: ldc           #85
187: invokevirtual #86
190: aload         4
192: invokevirtual #87
195: ldc           #88
197: invokevirtual #86
200: getstatic     #399
203: invokevirtual #87
206: ldc           #85
208: invokevirtual #86
211: invokevirtual #89
214: aload         4
216: getstatic     #399
219: invokevirtual #90
222: invokestatic  #91
225: aload         7
227: invokestatic  #20
230: new           #83
233: dup
234: invokespecial #84
237: ldc           #85
239: invokevirtual #86
242: iload         9
244: invokevirtual #170
247: ldc           #88
249: invokevirtual #86
252: iconst_1
253: invokevirtual #170
256: ldc           #85
258: invokevirtual #86
261: invokevirtual #89
264: iload         9
266: iconst_1
267: if_icmpne     274
270: iconst_1
271: goto          275
274: iconst_0
275: invokestatic  #91
278: aload         10
280: invokestatic  #20
283: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test382
Start line: 12588
End line: 12707
Method source code: 
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray4 = new java.lang.Object[] { localizedFormats2, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException5 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, objArray4);
        org.apache.commons.math3.exception.ZeroException zeroException6 = new org.apache.commons.math3.exception.ZeroException(localizable0, objArray4);
        java.lang.Number number7 = zeroException6.getArgument();
        java.lang.Number number8 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException11 = new org.apache.commons.math3.exception.NumberIsTooSmallException(number8, (java.lang.Number) (byte) 0, true);
        boolean boolean12 = numberIsTooSmallException11.getBoundIsAllowed();
        zeroException6.addSuppressed((java.lang.Throwable) numberIsTooSmallException11);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext14 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) zeroException6);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext15 = zeroException6.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException21 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats17, (java.lang.Number) 1.0d, (java.lang.Number) (byte) 100, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats24 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats25 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats26 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray28 = new java.lang.Object[] { localizedFormats26, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException29 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, objArray28);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats31 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray33 = new java.lang.Object[] { localizedFormats31, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException34 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats30, objArray33);
        mathIllegalArgumentException29.addSuppressed((java.lang.Throwable) mathIllegalArgumentException34);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats36 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats37 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray39 = new java.lang.Object[] { localizedFormats37, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException40 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException34, (org.apache.commons.math3.exception.util.Localizable) localizedFormats36, objArray39);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException41 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats24, objArray39);
        java.lang.Object[] objArray42 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray39);
        org.apache.commons.math3.exception.ZeroException zeroException43 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, objArray42);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException44 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats22, objArray42);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats45 = org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats46 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats47 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray49 = new java.lang.Object[] { localizedFormats47, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException50 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats46, objArray49);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats51 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats52 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray54 = new java.lang.Object[] { localizedFormats52, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException55 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats51, objArray54);
        mathIllegalArgumentException50.addSuppressed((java.lang.Throwable) mathIllegalArgumentException55);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats57 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats58 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray60 = new java.lang.Object[] { localizedFormats58, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException61 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException55, (org.apache.commons.math3.exception.util.Localizable) localizedFormats57, objArray60);
        java.lang.Object[] objArray62 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray60);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException63 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats45, objArray62);
        org.apache.commons.math3.exception.ZeroException zeroException64 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats22, objArray62);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer65 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter66 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer65);
        harmonicFitter66.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter66.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter66.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray74 = harmonicFitter66.getObservations();
        java.lang.Object[] objArray75 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray74);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException76 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException21, (org.apache.commons.math3.exception.util.Localizable) localizedFormats22, (java.lang.Object[]) weightedObservedPointArray74);
        java.lang.Object[] objArray77 = null;
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException78 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats22, objArray77);
        exceptionContext15.setValue("wrong array shape (block length = {0}, expected {1})", (java.lang.Object) localizedFormats22);
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals("'" + number7 + "' != '" + 0 + "'", number7, 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(exceptionContext15);
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CARDAN_ANGLES_SINGULARITY));
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM));
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats24 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats24.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats25 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats25.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats26 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats26.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats31 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats31.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats36 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats36.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats37 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats37.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats45 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED + "'", localizedFormats45.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CONVERGENCE_FAILED));
        org.junit.Assert.assertTrue("'" + localizedFormats46 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats46.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats47 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats47.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats51 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats51.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats52 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats52.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats57 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats57.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats58 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats58.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(weightedObservedPointArray74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #738
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: getstatic     #127
30: astore_2
31: getstatic     #128
34: astore_3
35: iconst_2
36: anewarray     #5
39: dup
40: iconst_0
41: aload_3
42: aastore
43: dup
44: iconst_1
45: lconst_1
46: invokestatic  #129
49: aastore
50: astore        4
52: new           #130
55: dup
56: aload_2
57: aload         4
59: invokespecial #131
62: astore        5
64: new           #81
67: dup
68: aload_1
69: aload         4
71: invokespecial #82
74: astore        6
76: aload         6
78: invokevirtual #243
81: astore        7
83: aconst_null
84: astore        8
86: new           #28
89: dup
90: aload         8
92: iconst_0
93: invokestatic  #159
96: iconst_1
97: invokespecial #160
100: astore        9
102: aload         9
104: invokevirtual #162
107: istore        10
109: aload         6
111: aload         9
113: invokevirtual #590
116: new           #163
119: dup
120: aload         6
122: invokespecial #164
125: astore        11
127: aload         6
129: invokevirtual #412
132: astore        12
134: getstatic     #424
137: astore        13
139: new           #28
142: dup
143: aload         13
145: dconst_1
146: invokestatic  #247
149: bipush        100
151: invokestatic  #159
154: iconst_1
155: invokespecial #195
158: astore        14
160: getstatic     #425
163: astore        15
165: getstatic     #125
168: astore        16
170: getstatic     #126
173: astore        17
175: getstatic     #127
178: astore        18
180: getstatic     #128
183: astore        19
185: iconst_2
186: anewarray     #5
189: dup
190: iconst_0
191: aload         19
193: aastore
194: dup
195: iconst_1
196: lconst_1
197: invokestatic  #129
200: aastore
201: astore        20
203: new           #130
206: dup
207: aload         18
209: aload         20
211: invokespecial #131
214: astore        21
216: getstatic     #127
219: astore        22
221: getstatic     #128
224: astore        23
226: iconst_2
227: anewarray     #5
230: dup
231: iconst_0
232: aload         23
234: aastore
235: dup
236: iconst_1
237: lconst_1
238: invokestatic  #129
241: aastore
242: astore        24
244: new           #130
247: dup
248: aload         22
250: aload         24
252: invokespecial #131
255: astore        25
257: aload         21
259: aload         25
261: invokevirtual #132
264: getstatic     #133
267: astore        26
269: getstatic     #134
272: astore        27
274: iconst_2
275: anewarray     #5
278: dup
279: iconst_0
280: aload         27
282: aastore
283: dup
284: iconst_1
285: bipush        10
287: invokestatic  #135
290: aastore
291: astore        28
293: new           #136
296: dup
297: aload         25
299: aload         26
301: aload         28
303: invokespecial #137
306: astore        29
308: new           #136
311: dup
312: aload         17
314: aload         28
316: invokespecial #138
319: astore        30
321: aload         28
323: invokestatic  #80
326: astore        31
328: new           #81
331: dup
332: aload         16
334: aload         31
336: invokespecial #82
339: astore        32
341: new           #130
344: dup
345: aload         15
347: aload         31
349: invokespecial #131
352: astore        33
354: getstatic     #426
357: astore        34
359: getstatic     #127
362: astore        35
364: getstatic     #128
367: astore        36
369: iconst_2
370: anewarray     #5
373: dup
374: iconst_0
375: aload         36
377: aastore
378: dup
379: iconst_1
380: lconst_1
381: invokestatic  #129
384: aastore
385: astore        37
387: new           #130
390: dup
391: aload         35
393: aload         37
395: invokespecial #131
398: astore        38
400: getstatic     #127
403: astore        39
405: getstatic     #128
408: astore        40
410: iconst_2
411: anewarray     #5
414: dup
415: iconst_0
416: aload         40
418: aastore
419: dup
420: iconst_1
421: lconst_1
422: invokestatic  #129
425: aastore
426: astore        41
428: new           #130
431: dup
432: aload         39
434: aload         41
436: invokespecial #131
439: astore        42
441: aload         38
443: aload         42
445: invokevirtual #132
448: getstatic     #133
451: astore        43
453: getstatic     #134
456: astore        44
458: iconst_2
459: anewarray     #5
462: dup
463: iconst_0
464: aload         44
466: aastore
467: dup
468: iconst_1
469: bipush        10
471: invokestatic  #135
474: aastore
475: astore        45
477: new           #136
480: dup
481: aload         42
483: aload         43
485: aload         45
487: invokespecial #137
490: astore        46
492: aload         45
494: invokestatic  #80
497: astore        47
499: new           #136
502: dup
503: aload         34
505: aload         47
507: invokespecial #138
510: astore        48
512: new           #81
515: dup
516: aload         15
518: aload         47
520: invokespecial #82
523: astore        49
525: aconst_null
526: astore        50
528: new           #8
531: dup
532: aload         50
534: invokespecial #9
537: astore        51
539: aload         51
541: dconst_1
542: ldc2_w        #32
545: invokevirtual #43
548: aload         51
550: dconst_0
551: ldc2_w        #34
554: invokevirtual #43
557: aload         51
559: invokevirtual #59
562: aload         51
564: invokevirtual #25
567: astore        52
569: aload         52
571: checkcast     #79
574: invokestatic  #80
577: astore        53
579: new           #136
582: dup
583: aload         14
585: aload         15
587: aload         52
589: checkcast     #79
592: invokespecial #137
595: astore        54
597: aconst_null
598: astore        55
600: new           #136
603: dup
604: aload         15
606: aload         55
608: invokespecial #138
611: astore        56
613: aload         12
615: ldc_w         #739
618: aload         15
620: invokevirtual #373
623: new           #83
626: dup
627: invokespecial #84
630: ldc           #85
632: invokevirtual #86
635: aload_2
636: invokevirtual #87
639: ldc           #88
641: invokevirtual #86
644: getstatic     #127
647: invokevirtual #87
650: ldc           #85
652: invokevirtual #86
655: invokevirtual #89
658: aload_2
659: getstatic     #127
662: invokevirtual #90
665: invokestatic  #91
668: new           #83
671: dup
672: invokespecial #84
675: ldc           #85
677: invokevirtual #86
680: aload_3
681: invokevirtual #87
684: ldc           #88
686: invokevirtual #86
689: getstatic     #128
692: invokevirtual #87
695: ldc           #85
697: invokevirtual #86
700: invokevirtual #89
703: aload_3
704: getstatic     #128
707: invokevirtual #90
710: invokestatic  #91
713: aload         4
715: invokestatic  #20
718: aload         4
720: invokestatic  #92
723: ldc           #140
725: invokestatic  #23
728: aload         4
730: invokestatic  #93
733: ldc           #140
735: invokestatic  #23
738: new           #83
741: dup
742: invokespecial #84
745: ldc           #85
747: invokevirtual #86
750: aload         7
752: invokevirtual #87
755: ldc           #88
757: invokevirtual #86
760: iconst_0
761: invokevirtual #244
764: ldc           #85
766: invokevirtual #86
769: invokevirtual #89
772: aload         7
774: iconst_0
775: invokestatic  #135
778: invokestatic  #245
781: new           #83
784: dup
785: invokespecial #84
788: ldc           #85
790: invokevirtual #86
793: iload         10
795: invokevirtual #170
798: ldc           #88
800: invokevirtual #86
803: iconst_1
804: invokevirtual #170
807: ldc           #85
809: invokevirtual #86
812: invokevirtual #89
815: iload         10
817: iconst_1
818: if_icmpne     825
821: iconst_1
822: goto          826
825: iconst_0
826: invokestatic  #91
829: aload         12
831: invokestatic  #20
834: new           #83
837: dup
838: invokespecial #84
841: ldc           #85
843: invokevirtual #86
846: aload         13
848: invokevirtual #87
851: ldc           #88
853: invokevirtual #86
856: getstatic     #424
859: invokevirtual #87
862: ldc           #85
864: invokevirtual #86
867: invokevirtual #89
870: aload         13
872: getstatic     #424
875: invokevirtual #90
878: invokestatic  #91
881: new           #83
884: dup
885: invokespecial #84
888: ldc           #85
890: invokevirtual #86
893: aload         15
895: invokevirtual #87
898: ldc           #88
900: invokevirtual #86
903: getstatic     #425
906: invokevirtual #87
909: ldc           #85
911: invokevirtual #86
914: invokevirtual #89
917: aload         15
919: getstatic     #425
922: invokevirtual #90
925: invokestatic  #91
928: new           #83
931: dup
932: invokespecial #84
935: ldc           #85
937: invokevirtual #86
940: aload         16
942: invokevirtual #87
945: ldc           #88
947: invokevirtual #86
950: getstatic     #125
953: invokevirtual #87
956: ldc           #85
958: invokevirtual #86
961: invokevirtual #89
964: aload         16
966: getstatic     #125
969: invokevirtual #90
972: invokestatic  #91
975: new           #83
978: dup
979: invokespecial #84
982: ldc           #85
984: invokevirtual #86
987: aload         17
989: invokevirtual #87
992: ldc           #88
994: invokevirtual #86
997: getstatic     #126
1000: invokevirtual #87
1003: ldc           #85
1005: invokevirtual #86
1008: invokevirtual #89
1011: aload         17
1013: getstatic     #126
1016: invokevirtual #90
1019: invokestatic  #91
1022: new           #83
1025: dup
1026: invokespecial #84
1029: ldc           #85
1031: invokevirtual #86
1034: aload         18
1036: invokevirtual #87
1039: ldc           #88
1041: invokevirtual #86
1044: getstatic     #127
1047: invokevirtual #87
1050: ldc           #85
1052: invokevirtual #86
1055: invokevirtual #89
1058: aload         18
1060: getstatic     #127
1063: invokevirtual #90
1066: invokestatic  #91
1069: new           #83
1072: dup
1073: invokespecial #84
1076: ldc           #85
1078: invokevirtual #86
1081: aload         19
1083: invokevirtual #87
1086: ldc           #88
1088: invokevirtual #86
1091: getstatic     #128
1094: invokevirtual #87
1097: ldc           #85
1099: invokevirtual #86
1102: invokevirtual #89
1105: aload         19
1107: getstatic     #128
1110: invokevirtual #90
1113: invokestatic  #91
1116: aload         20
1118: invokestatic  #20
1121: aload         20
1123: invokestatic  #92
1126: ldc           #140
1128: invokestatic  #23
1131: aload         20
1133: invokestatic  #93
1136: ldc           #140
1138: invokestatic  #23
1141: new           #83
1144: dup
1145: invokespecial #84
1148: ldc           #85
1150: invokevirtual #86
1153: aload         22
1155: invokevirtual #87
1158: ldc           #88
1160: invokevirtual #86
1163: getstatic     #127
1166: invokevirtual #87
1169: ldc           #85
1171: invokevirtual #86
1174: invokevirtual #89
1177: aload         22
1179: getstatic     #127
1182: invokevirtual #90
1185: invokestatic  #91
1188: new           #83
1191: dup
1192: invokespecial #84
1195: ldc           #85
1197: invokevirtual #86
1200: aload         23
1202: invokevirtual #87
1205: ldc           #88
1207: invokevirtual #86
1210: getstatic     #128
1213: invokevirtual #87
1216: ldc           #85
1218: invokevirtual #86
1221: invokevirtual #89
1224: aload         23
1226: getstatic     #128
1229: invokevirtual #90
1232: invokestatic  #91
1235: aload         24
1237: invokestatic  #20
1240: aload         24
1242: invokestatic  #92
1245: ldc           #140
1247: invokestatic  #23
1250: aload         24
1252: invokestatic  #93
1255: ldc           #140
1257: invokestatic  #23
1260: new           #83
1263: dup
1264: invokespecial #84
1267: ldc           #85
1269: invokevirtual #86
1272: aload         26
1274: invokevirtual #87
1277: ldc           #88
1279: invokevirtual #86
1282: getstatic     #133
1285: invokevirtual #87
1288: ldc           #85
1290: invokevirtual #86
1293: invokevirtual #89
1296: aload         26
1298: getstatic     #133
1301: invokevirtual #90
1304: invokestatic  #91
1307: new           #83
1310: dup
1311: invokespecial #84
1314: ldc           #85
1316: invokevirtual #86
1319: aload         27
1321: invokevirtual #87
1324: ldc           #88
1326: invokevirtual #86
1329: getstatic     #134
1332: invokevirtual #87
1335: ldc           #85
1337: invokevirtual #86
1340: invokevirtual #89
1343: aload         27
1345: getstatic     #134
1348: invokevirtual #90
1351: invokestatic  #91
1354: aload         28
1356: invokestatic  #20
1359: aload         28
1361: invokestatic  #92
1364: ldc           #141
1366: invokestatic  #23
1369: aload         28
1371: invokestatic  #93
1374: ldc           #141
1376: invokestatic  #23
1379: aload         31
1381: invokestatic  #20
1384: aload         31
1386: invokestatic  #92
1389: ldc           #141
1391: invokestatic  #23
1394: aload         31
1396: invokestatic  #93
1399: ldc           #141
1401: invokestatic  #23
1404: new           #83
1407: dup
1408: invokespecial #84
1411: ldc           #85
1413: invokevirtual #86
1416: aload         34
1418: invokevirtual #87
1421: ldc           #88
1423: invokevirtual #86
1426: getstatic     #426
1429: invokevirtual #87
1432: ldc           #85
1434: invokevirtual #86
1437: invokevirtual #89
1440: aload         34
1442: getstatic     #426
1445: invokevirtual #90
1448: invokestatic  #91
1451: new           #83
1454: dup
1455: invokespecial #84
1458: ldc           #85
1460: invokevirtual #86
1463: aload         35
1465: invokevirtual #87
1468: ldc           #88
1470: invokevirtual #86
1473: getstatic     #127
1476: invokevirtual #87
1479: ldc           #85
1481: invokevirtual #86
1484: invokevirtual #89
1487: aload         35
1489: getstatic     #127
1492: invokevirtual #90
1495: invokestatic  #91
1498: new           #83
1501: dup
1502: invokespecial #84
1505: ldc           #85
1507: invokevirtual #86
1510: aload         36
1512: invokevirtual #87
1515: ldc           #88
1517: invokevirtual #86
1520: getstatic     #128
1523: invokevirtual #87
1526: ldc           #85
1528: invokevirtual #86
1531: invokevirtual #89
1534: aload         36
1536: getstatic     #128
1539: invokevirtual #90
1542: invokestatic  #91
1545: aload         37
1547: invokestatic  #20
1550: aload         37
1552: invokestatic  #92
1555: ldc           #140
1557: invokestatic  #23
1560: aload         37
1562: invokestatic  #93
1565: ldc           #140
1567: invokestatic  #23
1570: new           #83
1573: dup
1574: invokespecial #84
1577: ldc           #85
1579: invokevirtual #86
1582: aload         39
1584: invokevirtual #87
1587: ldc           #88
1589: invokevirtual #86
1592: getstatic     #127
1595: invokevirtual #87
1598: ldc           #85
1600: invokevirtual #86
1603: invokevirtual #89
1606: aload         39
1608: getstatic     #127
1611: invokevirtual #90
1614: invokestatic  #91
1617: new           #83
1620: dup
1621: invokespecial #84
1624: ldc           #85
1626: invokevirtual #86
1629: aload         40
1631: invokevirtual #87
1634: ldc           #88
1636: invokevirtual #86
1639: getstatic     #128
1642: invokevirtual #87
1645: ldc           #85
1647: invokevirtual #86
1650: invokevirtual #89
1653: aload         40
1655: getstatic     #128
1658: invokevirtual #90
1661: invokestatic  #91
1664: aload         41
1666: invokestatic  #20
1669: aload         41
1671: invokestatic  #92
1674: ldc           #140
1676: invokestatic  #23
1679: aload         41
1681: invokestatic  #93
1684: ldc           #140
1686: invokestatic  #23
1689: new           #83
1692: dup
1693: invokespecial #84
1696: ldc           #85
1698: invokevirtual #86
1701: aload         43
1703: invokevirtual #87
1706: ldc           #88
1708: invokevirtual #86
1711: getstatic     #133
1714: invokevirtual #87
1717: ldc           #85
1719: invokevirtual #86
1722: invokevirtual #89
1725: aload         43
1727: getstatic     #133
1730: invokevirtual #90
1733: invokestatic  #91
1736: new           #83
1739: dup
1740: invokespecial #84
1743: ldc           #85
1745: invokevirtual #86
1748: aload         44
1750: invokevirtual #87
1753: ldc           #88
1755: invokevirtual #86
1758: getstatic     #134
1761: invokevirtual #87
1764: ldc           #85
1766: invokevirtual #86
1769: invokevirtual #89
1772: aload         44
1774: getstatic     #134
1777: invokevirtual #90
1780: invokestatic  #91
1783: aload         45
1785: invokestatic  #20
1788: aload         45
1790: invokestatic  #92
1793: ldc           #141
1795: invokestatic  #23
1798: aload         45
1800: invokestatic  #93
1803: ldc           #141
1805: invokestatic  #23
1808: aload         47
1810: invokestatic  #20
1813: aload         47
1815: invokestatic  #92
1818: ldc           #141
1820: invokestatic  #23
1823: aload         47
1825: invokestatic  #93
1828: ldc           #141
1830: invokestatic  #23
1833: aload         52
1835: invokestatic  #20
1838: aload         53
1840: invokestatic  #20
1843: aload         53
1845: invokestatic  #92
1848: ldc           #74
1850: invokestatic  #23
1853: aload         53
1855: invokestatic  #93
1858: ldc           #74
1860: invokestatic  #23
1863: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test383
Start line: 12710
End line: 12740
Method source code: 
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint15 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double16 = weightedObservedPoint15.getX();
        double double17 = weightedObservedPoint15.getY();
        double double18 = weightedObservedPoint15.getX();
        double double19 = weightedObservedPoint15.getY();
        double double20 = weightedObservedPoint15.getX();
        double double21 = weightedObservedPoint15.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint15);
        double double23 = weightedObservedPoint15.getWeight();
        double double24 = weightedObservedPoint15.getWeight();
        double double25 = weightedObservedPoint15.getY();
        double double26 = weightedObservedPoint15.getWeight();
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #740
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: dconst_0
54: ldc2_w        #12
57: ldc2_w        #10
60: invokevirtual #54
63: new           #145
66: dup
67: ldc2_w        #14
70: ldc2_w        #12
73: ldc2_w        #12
76: invokespecial #146
79: astore_3
80: aload_3
81: invokevirtual #147
84: dstore        4
86: aload_3
87: invokevirtual #149
90: dstore        6
92: aload_3
93: invokevirtual #147
96: dstore        8
98: aload_3
99: invokevirtual #149
102: dstore        10
104: aload_3
105: invokevirtual #147
108: dstore        12
110: aload_3
111: invokevirtual #147
114: dstore        14
116: aload_2
117: aload_3
118: invokevirtual #123
121: aload_3
122: invokevirtual #148
125: dstore        16
127: aload_3
128: invokevirtual #148
131: dstore        18
133: aload_3
134: invokevirtual #149
137: dstore        20
139: aload_3
140: invokevirtual #148
143: dstore        22
145: new           #83
148: dup
149: invokespecial #84
152: ldc           #85
154: invokevirtual #86
157: dload         4
159: invokevirtual #150
162: ldc           #88
164: invokevirtual #86
167: ldc2_w        #12
170: invokevirtual #150
173: ldc           #85
175: invokevirtual #86
178: invokevirtual #89
181: dload         4
183: ldc2_w        #12
186: dcmpl
187: ifne          194
190: iconst_1
191: goto          195
194: iconst_0
195: invokestatic  #91
198: new           #83
201: dup
202: invokespecial #84
205: ldc           #85
207: invokevirtual #86
210: dload         6
212: invokevirtual #150
215: ldc           #88
217: invokevirtual #86
220: ldc2_w        #12
223: invokevirtual #150
226: ldc           #85
228: invokevirtual #86
231: invokevirtual #89
234: dload         6
236: ldc2_w        #12
239: dcmpl
240: ifne          247
243: iconst_1
244: goto          248
247: iconst_0
248: invokestatic  #91
251: new           #83
254: dup
255: invokespecial #84
258: ldc           #85
260: invokevirtual #86
263: dload         8
265: invokevirtual #150
268: ldc           #88
270: invokevirtual #86
273: ldc2_w        #12
276: invokevirtual #150
279: ldc           #85
281: invokevirtual #86
284: invokevirtual #89
287: dload         8
289: ldc2_w        #12
292: dcmpl
293: ifne          300
296: iconst_1
297: goto          301
300: iconst_0
301: invokestatic  #91
304: new           #83
307: dup
308: invokespecial #84
311: ldc           #85
313: invokevirtual #86
316: dload         10
318: invokevirtual #150
321: ldc           #88
323: invokevirtual #86
326: ldc2_w        #12
329: invokevirtual #150
332: ldc           #85
334: invokevirtual #86
337: invokevirtual #89
340: dload         10
342: ldc2_w        #12
345: dcmpl
346: ifne          353
349: iconst_1
350: goto          354
353: iconst_0
354: invokestatic  #91
357: new           #83
360: dup
361: invokespecial #84
364: ldc           #85
366: invokevirtual #86
369: dload         12
371: invokevirtual #150
374: ldc           #88
376: invokevirtual #86
379: ldc2_w        #12
382: invokevirtual #150
385: ldc           #85
387: invokevirtual #86
390: invokevirtual #89
393: dload         12
395: ldc2_w        #12
398: dcmpl
399: ifne          406
402: iconst_1
403: goto          407
406: iconst_0
407: invokestatic  #91
410: new           #83
413: dup
414: invokespecial #84
417: ldc           #85
419: invokevirtual #86
422: dload         14
424: invokevirtual #150
427: ldc           #88
429: invokevirtual #86
432: ldc2_w        #12
435: invokevirtual #150
438: ldc           #85
440: invokevirtual #86
443: invokevirtual #89
446: dload         14
448: ldc2_w        #12
451: dcmpl
452: ifne          459
455: iconst_1
456: goto          460
459: iconst_0
460: invokestatic  #91
463: new           #83
466: dup
467: invokespecial #84
470: ldc           #85
472: invokevirtual #86
475: dload         16
477: invokevirtual #150
480: ldc           #88
482: invokevirtual #86
485: ldc2_w        #14
488: invokevirtual #150
491: ldc           #85
493: invokevirtual #86
496: invokevirtual #89
499: dload         16
501: ldc2_w        #14
504: dcmpl
505: ifne          512
508: iconst_1
509: goto          513
512: iconst_0
513: invokestatic  #91
516: new           #83
519: dup
520: invokespecial #84
523: ldc           #85
525: invokevirtual #86
528: dload         18
530: invokevirtual #150
533: ldc           #88
535: invokevirtual #86
538: ldc2_w        #14
541: invokevirtual #150
544: ldc           #85
546: invokevirtual #86
549: invokevirtual #89
552: dload         18
554: ldc2_w        #14
557: dcmpl
558: ifne          565
561: iconst_1
562: goto          566
565: iconst_0
566: invokestatic  #91
569: new           #83
572: dup
573: invokespecial #84
576: ldc           #85
578: invokevirtual #86
581: dload         20
583: invokevirtual #150
586: ldc           #88
588: invokevirtual #86
591: ldc2_w        #12
594: invokevirtual #150
597: ldc           #85
599: invokevirtual #86
602: invokevirtual #89
605: dload         20
607: ldc2_w        #12
610: dcmpl
611: ifne          618
614: iconst_1
615: goto          619
618: iconst_0
619: invokestatic  #91
622: new           #83
625: dup
626: invokespecial #84
629: ldc           #85
631: invokevirtual #86
634: dload         22
636: invokevirtual #150
639: ldc           #88
641: invokevirtual #86
644: ldc2_w        #14
647: invokevirtual #150
650: ldc           #85
652: invokevirtual #86
655: invokevirtual #89
658: dload         22
660: ldc2_w        #14
663: dcmpl
664: ifne          671
667: iconst_1
668: goto          672
671: iconst_0
672: invokestatic  #91
675: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test384
Start line: 12743
End line: 12847
Method source code: 
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray10 = new java.lang.Object[] { localizedFormats6, localizedFormats7, localizedFormats8, localizedFormats9 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException4, (org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray10);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext12 = mathIllegalArgumentException4.getContext();
        org.apache.commons.math3.exception.util.Localizable localizable13 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray17 = new java.lang.Object[] { localizedFormats15, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException18 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats14, objArray17);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats19 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray22 = new java.lang.Object[] { localizedFormats20, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException23 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats19, objArray22);
        mathIllegalArgumentException18.addSuppressed((java.lang.Throwable) mathIllegalArgumentException23);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext25 = mathIllegalArgumentException18.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats26 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats27 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats28 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray30 = new java.lang.Object[] { localizedFormats28, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException31 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats27, objArray30);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats32 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats33 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray35 = new java.lang.Object[] { localizedFormats33, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException36 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats32, objArray35);
        mathIllegalArgumentException31.addSuppressed((java.lang.Throwable) mathIllegalArgumentException36);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats38 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats39 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray41 = new java.lang.Object[] { localizedFormats39, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException42 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException36, (org.apache.commons.math3.exception.util.Localizable) localizedFormats38, objArray41);
        exceptionContext25.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats26, objArray41);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException44 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException4, localizable13, objArray41);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext45 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException4);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext46 = mathIllegalArgumentException4.getContext();
        java.lang.Throwable throwable47 = exceptionContext46.getThrowable();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats48 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer49 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter50 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer49);
        harmonicFitter50.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter50.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter50.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter50.addObservedPoint((double) (short) 10, 0.0d);
        harmonicFitter50.addObservedPoint((double) (byte) 10, (-1.0d), (double) 'a');
        harmonicFitter50.addObservedPoint((double) 1L, (double) ' ');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray71 = harmonicFitter50.getObservations();
        exceptionContext46.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats48, (java.lang.Object[]) weightedObservedPointArray71);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertNotNull(exceptionContext12);
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats19 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats19.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext25);
        org.junit.Assert.assertTrue("'" + localizedFormats26 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION + "'", localizedFormats26.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION));
        org.junit.Assert.assertTrue("'" + localizedFormats27 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats27.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats28 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats28.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats32 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats32.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats33 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats33.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats38 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats38.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats39 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats39.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(exceptionContext46);
        org.junit.Assert.assertNotNull(throwable47);
        org.junit.Assert.assertEquals(throwable47.getLocalizedMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1: This distribution does not have a density function implemented");
        org.junit.Assert.assertEquals(throwable47.getMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1: This distribution does not have a density function implemented");
        org.junit.Assert.assertEquals(throwable47.toString(), "org.apache.commons.math3.exception.MathIllegalArgumentException: overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1: This distribution does not have a density function implemented");
        org.junit.Assert.assertTrue("'" + localizedFormats48 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION + "'", localizedFormats48.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray71);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #741
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #328
63: astore        5
65: getstatic     #329
68: astore        6
70: getstatic     #330
73: astore        7
75: getstatic     #331
78: astore        8
80: getstatic     #332
83: astore        9
85: iconst_4
86: anewarray     #5
89: dup
90: iconst_0
91: aload         6
93: aastore
94: dup
95: iconst_1
96: aload         7
98: aastore
99: dup
100: iconst_2
101: aload         8
103: aastore
104: dup
105: iconst_3
106: aload         9
108: aastore
109: astore        10
111: new           #136
114: dup
115: aload         4
117: aload         5
119: aload         10
121: invokespecial #137
124: astore        11
126: aload         4
128: invokevirtual #165
131: astore        12
133: aconst_null
134: astore        13
136: getstatic     #127
139: astore        14
141: getstatic     #128
144: astore        15
146: iconst_2
147: anewarray     #5
150: dup
151: iconst_0
152: aload         15
154: aastore
155: dup
156: iconst_1
157: lconst_1
158: invokestatic  #129
161: aastore
162: astore        16
164: new           #130
167: dup
168: aload         14
170: aload         16
172: invokespecial #131
175: astore        17
177: getstatic     #127
180: astore        18
182: getstatic     #128
185: astore        19
187: iconst_2
188: anewarray     #5
191: dup
192: iconst_0
193: aload         19
195: aastore
196: dup
197: iconst_1
198: lconst_1
199: invokestatic  #129
202: aastore
203: astore        20
205: new           #130
208: dup
209: aload         18
211: aload         20
213: invokespecial #131
216: astore        21
218: aload         17
220: aload         21
222: invokevirtual #132
225: aload         17
227: invokevirtual #165
230: astore        22
232: getstatic     #519
235: astore        23
237: getstatic     #127
240: astore        24
242: getstatic     #128
245: astore        25
247: iconst_2
248: anewarray     #5
251: dup
252: iconst_0
253: aload         25
255: aastore
256: dup
257: iconst_1
258: lconst_1
259: invokestatic  #129
262: aastore
263: astore        26
265: new           #130
268: dup
269: aload         24
271: aload         26
273: invokespecial #131
276: astore        27
278: getstatic     #127
281: astore        28
283: getstatic     #128
286: astore        29
288: iconst_2
289: anewarray     #5
292: dup
293: iconst_0
294: aload         29
296: aastore
297: dup
298: iconst_1
299: lconst_1
300: invokestatic  #129
303: aastore
304: astore        30
306: new           #130
309: dup
310: aload         28
312: aload         30
314: invokespecial #131
317: astore        31
319: aload         27
321: aload         31
323: invokevirtual #132
326: getstatic     #133
329: astore        32
331: getstatic     #134
334: astore        33
336: iconst_2
337: anewarray     #5
340: dup
341: iconst_0
342: aload         33
344: aastore
345: dup
346: iconst_1
347: bipush        10
349: invokestatic  #135
352: aastore
353: astore        34
355: new           #136
358: dup
359: aload         31
361: aload         32
363: aload         34
365: invokespecial #137
368: astore        35
370: aload         22
372: aload         23
374: aload         34
376: invokevirtual #169
379: new           #136
382: dup
383: aload         4
385: aload         13
387: aload         34
389: invokespecial #137
392: astore        36
394: new           #163
397: dup
398: aload         4
400: invokespecial #164
403: astore        37
405: aload         4
407: invokevirtual #165
410: astore        38
412: aload         38
414: invokevirtual #288
417: astore        39
419: getstatic     #742
422: astore        40
424: aconst_null
425: astore        41
427: new           #8
430: dup
431: aload         41
433: invokespecial #9
436: astore        42
438: aload         42
440: dconst_1
441: ldc2_w        #32
444: invokevirtual #43
447: aload         42
449: dconst_0
450: ldc2_w        #34
453: invokevirtual #43
456: aload         42
458: ldc2_w        #34
461: ldc2_w        #34
464: ldc2_w        #32
467: invokevirtual #54
470: aload         42
472: ldc2_w        #32
475: dconst_0
476: invokevirtual #43
479: aload         42
481: ldc2_w        #32
484: ldc2_w        #10
487: ldc2_w        #44
490: invokevirtual #54
493: aload         42
495: dconst_1
496: ldc2_w        #38
499: invokevirtual #43
502: aload         42
504: invokevirtual #25
507: astore        43
509: aload         38
511: aload         40
513: aload         43
515: checkcast     #79
518: invokevirtual #169
521: new           #83
524: dup
525: invokespecial #84
528: ldc           #85
530: invokevirtual #86
533: aload_1
534: invokevirtual #87
537: ldc           #88
539: invokevirtual #86
542: getstatic     #127
545: invokevirtual #87
548: ldc           #85
550: invokevirtual #86
553: invokevirtual #89
556: aload_1
557: getstatic     #127
560: invokevirtual #90
563: invokestatic  #91
566: new           #83
569: dup
570: invokespecial #84
573: ldc           #85
575: invokevirtual #86
578: aload_2
579: invokevirtual #87
582: ldc           #88
584: invokevirtual #86
587: getstatic     #128
590: invokevirtual #87
593: ldc           #85
595: invokevirtual #86
598: invokevirtual #89
601: aload_2
602: getstatic     #128
605: invokevirtual #90
608: invokestatic  #91
611: aload_3
612: invokestatic  #20
615: aload_3
616: invokestatic  #92
619: ldc           #140
621: invokestatic  #23
624: aload_3
625: invokestatic  #93
628: ldc           #140
630: invokestatic  #23
633: new           #83
636: dup
637: invokespecial #84
640: ldc           #85
642: invokevirtual #86
645: aload         5
647: invokevirtual #87
650: ldc           #88
652: invokevirtual #86
655: getstatic     #328
658: invokevirtual #87
661: ldc           #85
663: invokevirtual #86
666: invokevirtual #89
669: aload         5
671: getstatic     #328
674: invokevirtual #90
677: invokestatic  #91
680: new           #83
683: dup
684: invokespecial #84
687: ldc           #85
689: invokevirtual #86
692: aload         6
694: invokevirtual #87
697: ldc           #88
699: invokevirtual #86
702: getstatic     #329
705: invokevirtual #87
708: ldc           #85
710: invokevirtual #86
713: invokevirtual #89
716: aload         6
718: getstatic     #329
721: invokevirtual #90
724: invokestatic  #91
727: new           #83
730: dup
731: invokespecial #84
734: ldc           #85
736: invokevirtual #86
739: aload         7
741: invokevirtual #87
744: ldc           #88
746: invokevirtual #86
749: getstatic     #330
752: invokevirtual #87
755: ldc           #85
757: invokevirtual #86
760: invokevirtual #89
763: aload         7
765: getstatic     #330
768: invokevirtual #90
771: invokestatic  #91
774: new           #83
777: dup
778: invokespecial #84
781: ldc           #85
783: invokevirtual #86
786: aload         8
788: invokevirtual #87
791: ldc           #88
793: invokevirtual #86
796: getstatic     #331
799: invokevirtual #87
802: ldc           #85
804: invokevirtual #86
807: invokevirtual #89
810: aload         8
812: getstatic     #331
815: invokevirtual #90
818: invokestatic  #91
821: new           #83
824: dup
825: invokespecial #84
828: ldc           #85
830: invokevirtual #86
833: aload         9
835: invokevirtual #87
838: ldc           #88
840: invokevirtual #86
843: getstatic     #332
846: invokevirtual #87
849: ldc           #85
851: invokevirtual #86
854: invokevirtual #89
857: aload         9
859: getstatic     #332
862: invokevirtual #90
865: invokestatic  #91
868: aload         10
870: invokestatic  #20
873: aload         10
875: invokestatic  #92
878: ldc_w         #336
881: invokestatic  #23
884: aload         10
886: invokestatic  #93
889: ldc_w         #336
892: invokestatic  #23
895: aload         12
897: invokestatic  #20
900: new           #83
903: dup
904: invokespecial #84
907: ldc           #85
909: invokevirtual #86
912: aload         14
914: invokevirtual #87
917: ldc           #88
919: invokevirtual #86
922: getstatic     #127
925: invokevirtual #87
928: ldc           #85
930: invokevirtual #86
933: invokevirtual #89
936: aload         14
938: getstatic     #127
941: invokevirtual #90
944: invokestatic  #91
947: new           #83
950: dup
951: invokespecial #84
954: ldc           #85
956: invokevirtual #86
959: aload         15
961: invokevirtual #87
964: ldc           #88
966: invokevirtual #86
969: getstatic     #128
972: invokevirtual #87
975: ldc           #85
977: invokevirtual #86
980: invokevirtual #89
983: aload         15
985: getstatic     #128
988: invokevirtual #90
991: invokestatic  #91
994: aload         16
996: invokestatic  #20
999: aload         16
1001: invokestatic  #92
1004: ldc           #140
1006: invokestatic  #23
1009: aload         16
1011: invokestatic  #93
1014: ldc           #140
1016: invokestatic  #23
1019: new           #83
1022: dup
1023: invokespecial #84
1026: ldc           #85
1028: invokevirtual #86
1031: aload         18
1033: invokevirtual #87
1036: ldc           #88
1038: invokevirtual #86
1041: getstatic     #127
1044: invokevirtual #87
1047: ldc           #85
1049: invokevirtual #86
1052: invokevirtual #89
1055: aload         18
1057: getstatic     #127
1060: invokevirtual #90
1063: invokestatic  #91
1066: new           #83
1069: dup
1070: invokespecial #84
1073: ldc           #85
1075: invokevirtual #86
1078: aload         19
1080: invokevirtual #87
1083: ldc           #88
1085: invokevirtual #86
1088: getstatic     #128
1091: invokevirtual #87
1094: ldc           #85
1096: invokevirtual #86
1099: invokevirtual #89
1102: aload         19
1104: getstatic     #128
1107: invokevirtual #90
1110: invokestatic  #91
1113: aload         20
1115: invokestatic  #20
1118: aload         20
1120: invokestatic  #92
1123: ldc           #140
1125: invokestatic  #23
1128: aload         20
1130: invokestatic  #93
1133: ldc           #140
1135: invokestatic  #23
1138: aload         22
1140: invokestatic  #20
1143: new           #83
1146: dup
1147: invokespecial #84
1150: ldc           #85
1152: invokevirtual #86
1155: aload         23
1157: invokevirtual #87
1160: ldc           #88
1162: invokevirtual #86
1165: getstatic     #519
1168: invokevirtual #87
1171: ldc           #85
1173: invokevirtual #86
1176: invokevirtual #89
1179: aload         23
1181: getstatic     #519
1184: invokevirtual #90
1187: invokestatic  #91
1190: new           #83
1193: dup
1194: invokespecial #84
1197: ldc           #85
1199: invokevirtual #86
1202: aload         24
1204: invokevirtual #87
1207: ldc           #88
1209: invokevirtual #86
1212: getstatic     #127
1215: invokevirtual #87
1218: ldc           #85
1220: invokevirtual #86
1223: invokevirtual #89
1226: aload         24
1228: getstatic     #127
1231: invokevirtual #90
1234: invokestatic  #91
1237: new           #83
1240: dup
1241: invokespecial #84
1244: ldc           #85
1246: invokevirtual #86
1249: aload         25
1251: invokevirtual #87
1254: ldc           #88
1256: invokevirtual #86
1259: getstatic     #128
1262: invokevirtual #87
1265: ldc           #85
1267: invokevirtual #86
1270: invokevirtual #89
1273: aload         25
1275: getstatic     #128
1278: invokevirtual #90
1281: invokestatic  #91
1284: aload         26
1286: invokestatic  #20
1289: aload         26
1291: invokestatic  #92
1294: ldc           #140
1296: invokestatic  #23
1299: aload         26
1301: invokestatic  #93
1304: ldc           #140
1306: invokestatic  #23
1309: new           #83
1312: dup
1313: invokespecial #84
1316: ldc           #85
1318: invokevirtual #86
1321: aload         28
1323: invokevirtual #87
1326: ldc           #88
1328: invokevirtual #86
1331: getstatic     #127
1334: invokevirtual #87
1337: ldc           #85
1339: invokevirtual #86
1342: invokevirtual #89
1345: aload         28
1347: getstatic     #127
1350: invokevirtual #90
1353: invokestatic  #91
1356: new           #83
1359: dup
1360: invokespecial #84
1363: ldc           #85
1365: invokevirtual #86
1368: aload         29
1370: invokevirtual #87
1373: ldc           #88
1375: invokevirtual #86
1378: getstatic     #128
1381: invokevirtual #87
1384: ldc           #85
1386: invokevirtual #86
1389: invokevirtual #89
1392: aload         29
1394: getstatic     #128
1397: invokevirtual #90
1400: invokestatic  #91
1403: aload         30
1405: invokestatic  #20
1408: aload         30
1410: invokestatic  #92
1413: ldc           #140
1415: invokestatic  #23
1418: aload         30
1420: invokestatic  #93
1423: ldc           #140
1425: invokestatic  #23
1428: new           #83
1431: dup
1432: invokespecial #84
1435: ldc           #85
1437: invokevirtual #86
1440: aload         32
1442: invokevirtual #87
1445: ldc           #88
1447: invokevirtual #86
1450: getstatic     #133
1453: invokevirtual #87
1456: ldc           #85
1458: invokevirtual #86
1461: invokevirtual #89
1464: aload         32
1466: getstatic     #133
1469: invokevirtual #90
1472: invokestatic  #91
1475: new           #83
1478: dup
1479: invokespecial #84
1482: ldc           #85
1484: invokevirtual #86
1487: aload         33
1489: invokevirtual #87
1492: ldc           #88
1494: invokevirtual #86
1497: getstatic     #134
1500: invokevirtual #87
1503: ldc           #85
1505: invokevirtual #86
1508: invokevirtual #89
1511: aload         33
1513: getstatic     #134
1516: invokevirtual #90
1519: invokestatic  #91
1522: aload         34
1524: invokestatic  #20
1527: aload         34
1529: invokestatic  #92
1532: ldc           #141
1534: invokestatic  #23
1537: aload         34
1539: invokestatic  #93
1542: ldc           #141
1544: invokestatic  #23
1547: aload         38
1549: invokestatic  #20
1552: aload         39
1554: invokestatic  #20
1557: aload         39
1559: invokevirtual #289
1562: ldc_w         #743
1565: invokestatic  #23
1568: aload         39
1570: invokevirtual #291
1573: ldc_w         #743
1576: invokestatic  #23
1579: aload         39
1581: invokevirtual #292
1584: ldc_w         #744
1587: invokestatic  #23
1590: new           #83
1593: dup
1594: invokespecial #84
1597: ldc           #85
1599: invokevirtual #86
1602: aload         40
1604: invokevirtual #87
1607: ldc           #88
1609: invokevirtual #86
1612: getstatic     #742
1615: invokevirtual #87
1618: ldc           #85
1620: invokevirtual #86
1623: invokevirtual #89
1626: aload         40
1628: getstatic     #742
1631: invokevirtual #90
1634: invokestatic  #91
1637: aload         43
1639: invokestatic  #20
1642: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test385
Start line: 12850
End line: 12859
Method source code: 
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(35.0d, (double) (byte) -1);
        harmonicFitter1.addObservedPoint((double) (-1L), 0.0d, (double) 0.0f);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #745
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: ldc2_w        #14
52: ldc2_w        #10
55: invokevirtual #43
58: aload_2
59: ldc2_w        #10
62: dconst_0
63: dconst_0
64: invokevirtual #54
67: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test386
Start line: 12862
End line: 12882
Method source code: 
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.addObservedPoint((double) (-1), (double) (byte) 1);
        harmonicFitter1.addObservedPoint((double) (byte) 0, (double) '4');
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray20 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #746
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload_2
78: ldc2_w        #10
81: dconst_1
82: invokevirtual #43
85: aload_2
86: dconst_0
87: ldc2_w        #12
90: invokevirtual #43
93: aload_2
94: invokevirtual #26
97: astore        5
99: ldc           #17
101: invokestatic  #18
104: goto          109
107: astore        5
109: aload_3
110: invokestatic  #20
113: return
Exception table:
from    to  target type
93   104   107   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test387
Start line: 12885
End line: 12904
Method source code: 
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray4 = numberIsTooSmallException3.getSuppressed();
        boolean boolean5 = numberIsTooSmallException3.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ABSCISSA;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException16 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats6, (java.lang.Object[]) weightedObservedPointArray15);
        java.lang.Number number17 = numberIsTooSmallException3.getMin();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ABSCISSA + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ABSCISSA));
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertEquals("'" + number17 + "' != '" + (byte) 10 + "'", number17, (byte) 10);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #747
20: aastore
21: invokevirtual #7
24: pop
25: new           #28
28: dup
29: ldc2_w        #277
32: invokestatic  #129
35: bipush        10
37: invokestatic  #159
40: iconst_1
41: invokespecial #160
44: astore_1
45: aload_1
46: invokevirtual #334
49: astore_2
50: aload_1
51: invokevirtual #162
54: istore_3
55: getstatic     #399
58: astore        4
60: aconst_null
61: astore        5
63: new           #8
66: dup
67: aload         5
69: invokespecial #9
72: astore        6
74: aload         6
76: dconst_1
77: ldc2_w        #32
80: invokevirtual #43
83: aload         6
85: dconst_0
86: ldc2_w        #34
89: invokevirtual #43
92: aload         6
94: invokevirtual #25
97: astore        7
99: new           #136
102: dup
103: aload_1
104: aload         4
106: aload         7
108: checkcast     #79
111: invokespecial #137
114: astore        8
116: aload_1
117: invokevirtual #572
120: astore        9
122: aload_2
123: invokestatic  #20
126: new           #83
129: dup
130: invokespecial #84
133: ldc           #85
135: invokevirtual #86
138: iload_3
139: invokevirtual #170
142: ldc           #88
144: invokevirtual #86
147: iconst_1
148: invokevirtual #170
151: ldc           #85
153: invokevirtual #86
156: invokevirtual #89
159: iload_3
160: iconst_1
161: if_icmpne     168
164: iconst_1
165: goto          169
168: iconst_0
169: invokestatic  #91
172: new           #83
175: dup
176: invokespecial #84
179: ldc           #85
181: invokevirtual #86
184: aload         4
186: invokevirtual #87
189: ldc           #88
191: invokevirtual #86
194: getstatic     #399
197: invokevirtual #87
200: ldc           #85
202: invokevirtual #86
205: invokevirtual #89
208: aload         4
210: getstatic     #399
213: invokevirtual #90
216: invokestatic  #91
219: aload         7
221: invokestatic  #20
224: new           #83
227: dup
228: invokespecial #84
231: ldc           #85
233: invokevirtual #86
236: aload         9
238: invokevirtual #87
241: ldc           #88
243: invokevirtual #86
246: bipush        10
248: invokevirtual #244
251: ldc           #85
253: invokevirtual #86
256: invokevirtual #89
259: aload         9
261: bipush        10
263: invokestatic  #159
266: invokestatic  #245
269: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test388
Start line: 12907
End line: 12930
Method source code: 
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) 0L);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric13 = null;
        double[] doubleArray16 = new double[] { 0L, (short) 1 };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = harmonicFitter1.fit((int) (byte) 100, parametric13, doubleArray16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #748
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore        4
62: aload_2
63: ldc2_w        #34
66: dconst_0
67: invokevirtual #43
70: aconst_null
71: astore        5
73: iconst_2
74: newarray       double
76: dup
77: iconst_0
78: dconst_0
79: dastore
80: dup
81: iconst_1
82: dconst_1
83: dastore
84: astore        6
86: aload_2
87: bipush        100
89: aload         5
91: aload         6
93: invokevirtual #40
96: astore        7
98: ldc           #17
100: invokestatic  #18
103: goto          108
106: astore        7
108: aload_3
109: invokestatic  #20
112: aload         4
114: invokestatic  #20
117: aload         6
119: invokestatic  #20
122: aload         6
124: invokestatic  #21
127: ldc_w         #749
130: invokestatic  #23
133: return
Exception table:
from    to  target type
86   103   106   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test389
Start line: 12933
End line: 13052
Method source code: 
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray10 = new java.lang.Object[] { localizedFormats6, localizedFormats7, localizedFormats8, localizedFormats9 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException11 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException4, (org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray10);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException16 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray17 = numberIsTooSmallException16.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException18 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalStateException11, (org.apache.commons.math3.exception.util.Localizable) localizedFormats12, (java.lang.Object[]) throwableArray17);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext19 = mathIllegalStateException11.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION;
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.ZeroException zeroException22 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, objArray21);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException26 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, (java.lang.Number) (short) 0, (java.lang.Number) 0L, true);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException30 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray31 = numberIsTooSmallException30.getSuppressed();
        java.lang.Object[] objArray32 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) throwableArray31);
        exceptionContext19.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, objArray32);
        java.lang.Throwable throwable34 = exceptionContext19.getThrowable();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats35 = org.apache.commons.math3.exception.util.LocalizedFormats.NULL_NOT_ALLOWED;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats36 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer37 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter38 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer37);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray39 = harmonicFitter38.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException40 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats36, (java.lang.Object[]) weightedObservedPointArray39);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException41 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable34, (org.apache.commons.math3.exception.util.Localizable) localizedFormats35, (java.lang.Object[]) weightedObservedPointArray39);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext42 = mathIllegalStateException41.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats43 = org.apache.commons.math3.exception.util.LocalizedFormats.ROBUSTNESS_ITERATIONS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats44 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats45 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray47 = new java.lang.Object[] { localizedFormats45, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException48 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats44, objArray47);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats49 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats50 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats51 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats52 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats53 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray54 = new java.lang.Object[] { localizedFormats50, localizedFormats51, localizedFormats52, localizedFormats53 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException55 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException48, (org.apache.commons.math3.exception.util.Localizable) localizedFormats49, objArray54);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats56 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException60 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray61 = numberIsTooSmallException60.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException62 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalStateException55, (org.apache.commons.math3.exception.util.Localizable) localizedFormats56, (java.lang.Object[]) throwableArray61);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext63 = mathIllegalStateException55.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats64 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION;
        java.lang.Object[] objArray65 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.ZeroException zeroException66 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats64, objArray65);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException70 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats64, (java.lang.Number) (short) 0, (java.lang.Number) 0L, true);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException74 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray75 = numberIsTooSmallException74.getSuppressed();
        java.lang.Object[] objArray76 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) throwableArray75);
        exceptionContext63.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats64, objArray76);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException78 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalStateException41, (org.apache.commons.math3.exception.util.Localizable) localizedFormats43, objArray76);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE));
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(exceptionContext19);
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION));
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(throwable34);
        org.junit.Assert.assertEquals(throwable34.getLocalizedMessage(), "overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive");
        org.junit.Assert.assertEquals(throwable34.getMessage(), "overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive");
        org.junit.Assert.assertEquals(throwable34.toString(), "org.apache.commons.math3.exception.MathIllegalStateException: overflow: lcm(NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT) is 2^31: permutation k ({0}) must be positive");
        org.junit.Assert.assertTrue("'" + localizedFormats35 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NULL_NOT_ALLOWED + "'", localizedFormats35.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NULL_NOT_ALLOWED));
        org.junit.Assert.assertTrue("'" + localizedFormats36 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats36.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray39);
        org.junit.Assert.assertNotNull(exceptionContext42);
        org.junit.Assert.assertTrue("'" + localizedFormats43 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROBUSTNESS_ITERATIONS + "'", localizedFormats43.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROBUSTNESS_ITERATIONS));
        org.junit.Assert.assertTrue("'" + localizedFormats44 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats44.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats45 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats45.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats49 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats49.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats50 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats50.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats51 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats51.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats52 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats52.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats53 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats53.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertTrue("'" + localizedFormats56 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE + "'", localizedFormats56.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE));
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(exceptionContext63);
        org.junit.Assert.assertTrue("'" + localizedFormats64 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION + "'", localizedFormats64.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_PERMUTATION));
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #750
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #328
63: astore        5
65: getstatic     #329
68: astore        6
70: getstatic     #330
73: astore        7
75: getstatic     #331
78: astore        8
80: getstatic     #332
83: astore        9
85: iconst_4
86: anewarray     #5
89: dup
90: iconst_0
91: aload         6
93: aastore
94: dup
95: iconst_1
96: aload         7
98: aastore
99: dup
100: iconst_2
101: aload         8
103: aastore
104: dup
105: iconst_3
106: aload         9
108: aastore
109: astore        10
111: new           #136
114: dup
115: aload         4
117: aload         5
119: aload         10
121: invokespecial #137
124: astore        11
126: getstatic     #333
129: astore        12
131: new           #28
134: dup
135: ldc2_w        #277
138: invokestatic  #129
141: bipush        10
143: invokestatic  #159
146: iconst_1
147: invokespecial #160
150: astore        13
152: aload         13
154: invokevirtual #334
157: astore        14
159: new           #136
162: dup
163: aload         11
165: aload         12
167: aload         14
169: checkcast     #79
172: invokespecial #137
175: astore        15
177: aload         11
179: invokevirtual #282
182: astore        16
184: getstatic     #335
187: astore        17
189: iconst_0
190: anewarray     #5
193: astore        18
195: new           #81
198: dup
199: aload         17
201: aload         18
203: invokespecial #82
206: astore        19
208: new           #28
211: dup
212: aload         17
214: iconst_0
215: invokestatic  #194
218: lconst_0
219: invokestatic  #129
222: iconst_1
223: invokespecial #195
226: astore        20
228: new           #28
231: dup
232: ldc2_w        #277
235: invokestatic  #129
238: bipush        10
240: invokestatic  #159
243: iconst_1
244: invokespecial #160
247: astore        21
249: aload         21
251: invokevirtual #334
254: astore        22
256: aload         22
258: checkcast     #79
261: invokestatic  #80
264: astore        23
266: aload         16
268: aload         17
270: aload         23
272: invokevirtual #169
275: aload         16
277: invokevirtual #288
280: astore        24
282: getstatic     #751
285: astore        25
287: getstatic     #156
290: astore        26
292: aconst_null
293: astore        27
295: new           #8
298: dup
299: aload         27
301: invokespecial #9
304: astore        28
306: aload         28
308: invokevirtual #25
311: astore        29
313: new           #81
316: dup
317: aload         26
319: aload         29
321: checkcast     #79
324: invokespecial #82
327: astore        30
329: new           #136
332: dup
333: aload         24
335: aload         25
337: aload         29
339: checkcast     #79
342: invokespecial #137
345: astore        31
347: aload         31
349: invokevirtual #282
352: astore        32
354: getstatic     #752
357: astore        33
359: getstatic     #127
362: astore        34
364: getstatic     #128
367: astore        35
369: iconst_2
370: anewarray     #5
373: dup
374: iconst_0
375: aload         35
377: aastore
378: dup
379: iconst_1
380: lconst_1
381: invokestatic  #129
384: aastore
385: astore        36
387: new           #130
390: dup
391: aload         34
393: aload         36
395: invokespecial #131
398: astore        37
400: getstatic     #328
403: astore        38
405: getstatic     #329
408: astore        39
410: getstatic     #330
413: astore        40
415: getstatic     #331
418: astore        41
420: getstatic     #332
423: astore        42
425: iconst_4
426: anewarray     #5
429: dup
430: iconst_0
431: aload         39
433: aastore
434: dup
435: iconst_1
436: aload         40
438: aastore
439: dup
440: iconst_2
441: aload         41
443: aastore
444: dup
445: iconst_3
446: aload         42
448: aastore
449: astore        43
451: new           #136
454: dup
455: aload         37
457: aload         38
459: aload         43
461: invokespecial #137
464: astore        44
466: getstatic     #333
469: astore        45
471: new           #28
474: dup
475: ldc2_w        #277
478: invokestatic  #129
481: bipush        10
483: invokestatic  #159
486: iconst_1
487: invokespecial #160
490: astore        46
492: aload         46
494: invokevirtual #334
497: astore        47
499: new           #136
502: dup
503: aload         44
505: aload         45
507: aload         47
509: checkcast     #79
512: invokespecial #137
515: astore        48
517: aload         44
519: invokevirtual #282
522: astore        49
524: getstatic     #335
527: astore        50
529: iconst_0
530: anewarray     #5
533: astore        51
535: new           #81
538: dup
539: aload         50
541: aload         51
543: invokespecial #82
546: astore        52
548: new           #28
551: dup
552: aload         50
554: iconst_0
555: invokestatic  #194
558: lconst_0
559: invokestatic  #129
562: iconst_1
563: invokespecial #195
566: astore        53
568: new           #28
571: dup
572: ldc2_w        #277
575: invokestatic  #129
578: bipush        10
580: invokestatic  #159
583: iconst_1
584: invokespecial #160
587: astore        54
589: aload         54
591: invokevirtual #334
594: astore        55
596: aload         55
598: checkcast     #79
601: invokestatic  #80
604: astore        56
606: aload         49
608: aload         50
610: aload         56
612: invokevirtual #169
615: new           #136
618: dup
619: aload         31
621: aload         33
623: aload         56
625: invokespecial #137
628: astore        57
630: new           #83
633: dup
634: invokespecial #84
637: ldc           #85
639: invokevirtual #86
642: aload_1
643: invokevirtual #87
646: ldc           #88
648: invokevirtual #86
651: getstatic     #127
654: invokevirtual #87
657: ldc           #85
659: invokevirtual #86
662: invokevirtual #89
665: aload_1
666: getstatic     #127
669: invokevirtual #90
672: invokestatic  #91
675: new           #83
678: dup
679: invokespecial #84
682: ldc           #85
684: invokevirtual #86
687: aload_2
688: invokevirtual #87
691: ldc           #88
693: invokevirtual #86
696: getstatic     #128
699: invokevirtual #87
702: ldc           #85
704: invokevirtual #86
707: invokevirtual #89
710: aload_2
711: getstatic     #128
714: invokevirtual #90
717: invokestatic  #91
720: aload_3
721: invokestatic  #20
724: aload_3
725: invokestatic  #92
728: ldc           #140
730: invokestatic  #23
733: aload_3
734: invokestatic  #93
737: ldc           #140
739: invokestatic  #23
742: new           #83
745: dup
746: invokespecial #84
749: ldc           #85
751: invokevirtual #86
754: aload         5
756: invokevirtual #87
759: ldc           #88
761: invokevirtual #86
764: getstatic     #328
767: invokevirtual #87
770: ldc           #85
772: invokevirtual #86
775: invokevirtual #89
778: aload         5
780: getstatic     #328
783: invokevirtual #90
786: invokestatic  #91
789: new           #83
792: dup
793: invokespecial #84
796: ldc           #85
798: invokevirtual #86
801: aload         6
803: invokevirtual #87
806: ldc           #88
808: invokevirtual #86
811: getstatic     #329
814: invokevirtual #87
817: ldc           #85
819: invokevirtual #86
822: invokevirtual #89
825: aload         6
827: getstatic     #329
830: invokevirtual #90
833: invokestatic  #91
836: new           #83
839: dup
840: invokespecial #84
843: ldc           #85
845: invokevirtual #86
848: aload         7
850: invokevirtual #87
853: ldc           #88
855: invokevirtual #86
858: getstatic     #330
861: invokevirtual #87
864: ldc           #85
866: invokevirtual #86
869: invokevirtual #89
872: aload         7
874: getstatic     #330
877: invokevirtual #90
880: invokestatic  #91
883: new           #83
886: dup
887: invokespecial #84
890: ldc           #85
892: invokevirtual #86
895: aload         8
897: invokevirtual #87
900: ldc           #88
902: invokevirtual #86
905: getstatic     #331
908: invokevirtual #87
911: ldc           #85
913: invokevirtual #86
916: invokevirtual #89
919: aload         8
921: getstatic     #331
924: invokevirtual #90
927: invokestatic  #91
930: new           #83
933: dup
934: invokespecial #84
937: ldc           #85
939: invokevirtual #86
942: aload         9
944: invokevirtual #87
947: ldc           #88
949: invokevirtual #86
952: getstatic     #332
955: invokevirtual #87
958: ldc           #85
960: invokevirtual #86
963: invokevirtual #89
966: aload         9
968: getstatic     #332
971: invokevirtual #90
974: invokestatic  #91
977: aload         10
979: invokestatic  #20
982: aload         10
984: invokestatic  #92
987: ldc_w         #336
990: invokestatic  #23
993: aload         10
995: invokestatic  #93
998: ldc_w         #336
1001: invokestatic  #23
1004: new           #83
1007: dup
1008: invokespecial #84
1011: ldc           #85
1013: invokevirtual #86
1016: aload         12
1018: invokevirtual #87
1021: ldc           #88
1023: invokevirtual #86
1026: getstatic     #333
1029: invokevirtual #87
1032: ldc           #85
1034: invokevirtual #86
1037: invokevirtual #89
1040: aload         12
1042: getstatic     #333
1045: invokevirtual #90
1048: invokestatic  #91
1051: aload         14
1053: invokestatic  #20
1056: aload         16
1058: invokestatic  #20
1061: new           #83
1064: dup
1065: invokespecial #84
1068: ldc           #85
1070: invokevirtual #86
1073: aload         17
1075: invokevirtual #87
1078: ldc           #88
1080: invokevirtual #86
1083: getstatic     #335
1086: invokevirtual #87
1089: ldc           #85
1091: invokevirtual #86
1094: invokevirtual #89
1097: aload         17
1099: getstatic     #335
1102: invokevirtual #90
1105: invokestatic  #91
1108: aload         18
1110: invokestatic  #20
1113: aload         18
1115: invokestatic  #92
1118: ldc           #74
1120: invokestatic  #23
1123: aload         18
1125: invokestatic  #93
1128: ldc           #74
1130: invokestatic  #23
1133: aload         22
1135: invokestatic  #20
1138: aload         23
1140: invokestatic  #20
1143: aload         23
1145: invokestatic  #92
1148: ldc           #74
1150: invokestatic  #23
1153: aload         23
1155: invokestatic  #93
1158: ldc           #74
1160: invokestatic  #23
1163: aload         24
1165: invokestatic  #20
1168: aload         24
1170: invokevirtual #289
1173: ldc_w         #565
1176: invokestatic  #23
1179: aload         24
1181: invokevirtual #291
1184: ldc_w         #565
1187: invokestatic  #23
1190: aload         24
1192: invokevirtual #292
1195: ldc_w         #566
1198: invokestatic  #23
1201: new           #83
1204: dup
1205: invokespecial #84
1208: ldc           #85
1210: invokevirtual #86
1213: aload         25
1215: invokevirtual #87
1218: ldc           #88
1220: invokevirtual #86
1223: getstatic     #751
1226: invokevirtual #87
1229: ldc           #85
1231: invokevirtual #86
1234: invokevirtual #89
1237: aload         25
1239: getstatic     #751
1242: invokevirtual #90
1245: invokestatic  #91
1248: new           #83
1251: dup
1252: invokespecial #84
1255: ldc           #85
1257: invokevirtual #86
1260: aload         26
1262: invokevirtual #87
1265: ldc           #88
1267: invokevirtual #86
1270: getstatic     #156
1273: invokevirtual #87
1276: ldc           #85
1278: invokevirtual #86
1281: invokevirtual #89
1284: aload         26
1286: getstatic     #156
1289: invokevirtual #90
1292: invokestatic  #91
1295: aload         29
1297: invokestatic  #20
1300: aload         32
1302: invokestatic  #20
1305: new           #83
1308: dup
1309: invokespecial #84
1312: ldc           #85
1314: invokevirtual #86
1317: aload         33
1319: invokevirtual #87
1322: ldc           #88
1324: invokevirtual #86
1327: getstatic     #752
1330: invokevirtual #87
1333: ldc           #85
1335: invokevirtual #86
1338: invokevirtual #89
1341: aload         33
1343: getstatic     #752
1346: invokevirtual #90
1349: invokestatic  #91
1352: new           #83
1355: dup
1356: invokespecial #84
1359: ldc           #85
1361: invokevirtual #86
1364: aload         34
1366: invokevirtual #87
1369: ldc           #88
1371: invokevirtual #86
1374: getstatic     #127
1377: invokevirtual #87
1380: ldc           #85
1382: invokevirtual #86
1385: invokevirtual #89
1388: aload         34
1390: getstatic     #127
1393: invokevirtual #90
1396: invokestatic  #91
1399: new           #83
1402: dup
1403: invokespecial #84
1406: ldc           #85
1408: invokevirtual #86
1411: aload         35
1413: invokevirtual #87
1416: ldc           #88
1418: invokevirtual #86
1421: getstatic     #128
1424: invokevirtual #87
1427: ldc           #85
1429: invokevirtual #86
1432: invokevirtual #89
1435: aload         35
1437: getstatic     #128
1440: invokevirtual #90
1443: invokestatic  #91
1446: aload         36
1448: invokestatic  #20
1451: aload         36
1453: invokestatic  #92
1456: ldc           #140
1458: invokestatic  #23
1461: aload         36
1463: invokestatic  #93
1466: ldc           #140
1468: invokestatic  #23
1471: new           #83
1474: dup
1475: invokespecial #84
1478: ldc           #85
1480: invokevirtual #86
1483: aload         38
1485: invokevirtual #87
1488: ldc           #88
1490: invokevirtual #86
1493: getstatic     #328
1496: invokevirtual #87
1499: ldc           #85
1501: invokevirtual #86
1504: invokevirtual #89
1507: aload         38
1509: getstatic     #328
1512: invokevirtual #90
1515: invokestatic  #91
1518: new           #83
1521: dup
1522: invokespecial #84
1525: ldc           #85
1527: invokevirtual #86
1530: aload         39
1532: invokevirtual #87
1535: ldc           #88
1537: invokevirtual #86
1540: getstatic     #329
1543: invokevirtual #87
1546: ldc           #85
1548: invokevirtual #86
1551: invokevirtual #89
1554: aload         39
1556: getstatic     #329
1559: invokevirtual #90
1562: invokestatic  #91
1565: new           #83
1568: dup
1569: invokespecial #84
1572: ldc           #85
1574: invokevirtual #86
1577: aload         40
1579: invokevirtual #87
1582: ldc           #88
1584: invokevirtual #86
1587: getstatic     #330
1590: invokevirtual #87
1593: ldc           #85
1595: invokevirtual #86
1598: invokevirtual #89
1601: aload         40
1603: getstatic     #330
1606: invokevirtual #90
1609: invokestatic  #91
1612: new           #83
1615: dup
1616: invokespecial #84
1619: ldc           #85
1621: invokevirtual #86
1624: aload         41
1626: invokevirtual #87
1629: ldc           #88
1631: invokevirtual #86
1634: getstatic     #331
1637: invokevirtual #87
1640: ldc           #85
1642: invokevirtual #86
1645: invokevirtual #89
1648: aload         41
1650: getstatic     #331
1653: invokevirtual #90
1656: invokestatic  #91
1659: new           #83
1662: dup
1663: invokespecial #84
1666: ldc           #85
1668: invokevirtual #86
1671: aload         42
1673: invokevirtual #87
1676: ldc           #88
1678: invokevirtual #86
1681: getstatic     #332
1684: invokevirtual #87
1687: ldc           #85
1689: invokevirtual #86
1692: invokevirtual #89
1695: aload         42
1697: getstatic     #332
1700: invokevirtual #90
1703: invokestatic  #91
1706: aload         43
1708: invokestatic  #20
1711: aload         43
1713: invokestatic  #92
1716: ldc_w         #336
1719: invokestatic  #23
1722: aload         43
1724: invokestatic  #93
1727: ldc_w         #336
1730: invokestatic  #23
1733: new           #83
1736: dup
1737: invokespecial #84
1740: ldc           #85
1742: invokevirtual #86
1745: aload         45
1747: invokevirtual #87
1750: ldc           #88
1752: invokevirtual #86
1755: getstatic     #333
1758: invokevirtual #87
1761: ldc           #85
1763: invokevirtual #86
1766: invokevirtual #89
1769: aload         45
1771: getstatic     #333
1774: invokevirtual #90
1777: invokestatic  #91
1780: aload         47
1782: invokestatic  #20
1785: aload         49
1787: invokestatic  #20
1790: new           #83
1793: dup
1794: invokespecial #84
1797: ldc           #85
1799: invokevirtual #86
1802: aload         50
1804: invokevirtual #87
1807: ldc           #88
1809: invokevirtual #86
1812: getstatic     #335
1815: invokevirtual #87
1818: ldc           #85
1820: invokevirtual #86
1823: invokevirtual #89
1826: aload         50
1828: getstatic     #335
1831: invokevirtual #90
1834: invokestatic  #91
1837: aload         51
1839: invokestatic  #20
1842: aload         51
1844: invokestatic  #92
1847: ldc           #74
1849: invokestatic  #23
1852: aload         51
1854: invokestatic  #93
1857: ldc           #74
1859: invokestatic  #23
1862: aload         55
1864: invokestatic  #20
1867: aload         56
1869: invokestatic  #20
1872: aload         56
1874: invokestatic  #92
1877: ldc           #74
1879: invokestatic  #23
1882: aload         56
1884: invokestatic  #93
1887: ldc           #74
1889: invokestatic  #23
1892: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test390
Start line: 13055
End line: 13095
Method source code: 
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.addObservedPoint((double) (-1), (double) (byte) 1);
        harmonicFitter1.addObservedPoint((double) (byte) 0, (double) '4');
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer20 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter21 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer20);
        harmonicFitter21.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter21.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter21.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint35 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double36 = weightedObservedPoint35.getX();
        double double37 = weightedObservedPoint35.getY();
        double double38 = weightedObservedPoint35.getX();
        double double39 = weightedObservedPoint35.getY();
        double double40 = weightedObservedPoint35.getX();
        double double41 = weightedObservedPoint35.getX();
        harmonicFitter21.addObservedPoint(weightedObservedPoint35);
        double double43 = weightedObservedPoint35.getWeight();
        double double44 = weightedObservedPoint35.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint35);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray46 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(10.0d, (double) (short) 1);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 52.0d + "'", double39 == 52.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 52.0d + "'", double40 == 52.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 52.0d + "'", double44 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray46);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #753
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload_2
78: ldc2_w        #10
81: dconst_1
82: invokevirtual #43
85: aload_2
86: dconst_0
87: ldc2_w        #12
90: invokevirtual #43
93: aconst_null
94: astore        5
96: new           #8
99: dup
100: aload         5
102: invokespecial #9
105: astore        6
107: aload         6
109: dconst_1
110: ldc2_w        #32
113: invokevirtual #43
116: aload         6
118: dconst_0
119: ldc2_w        #34
122: invokevirtual #43
125: aload         6
127: dconst_0
128: ldc2_w        #12
131: ldc2_w        #10
134: invokevirtual #54
137: new           #145
140: dup
141: ldc2_w        #14
144: ldc2_w        #12
147: ldc2_w        #12
150: invokespecial #146
153: astore        7
155: aload         7
157: invokevirtual #147
160: dstore        8
162: aload         7
164: invokevirtual #149
167: dstore        10
169: aload         7
171: invokevirtual #147
174: dstore        12
176: aload         7
178: invokevirtual #149
181: dstore        14
183: aload         7
185: invokevirtual #147
188: dstore        16
190: aload         7
192: invokevirtual #147
195: dstore        18
197: aload         6
199: aload         7
201: invokevirtual #123
204: aload         7
206: invokevirtual #148
209: dstore        20
211: aload         7
213: invokevirtual #147
216: dstore        22
218: aload_2
219: aload         7
221: invokevirtual #123
224: aload_2
225: invokevirtual #25
228: astore        24
230: aload_2
231: ldc2_w        #32
234: dconst_1
235: invokevirtual #43
238: aload_3
239: invokestatic  #20
242: new           #83
245: dup
246: invokespecial #84
249: ldc           #85
251: invokevirtual #86
254: dload         8
256: invokevirtual #150
259: ldc           #88
261: invokevirtual #86
264: ldc2_w        #12
267: invokevirtual #150
270: ldc           #85
272: invokevirtual #86
275: invokevirtual #89
278: dload         8
280: ldc2_w        #12
283: dcmpl
284: ifne          291
287: iconst_1
288: goto          292
291: iconst_0
292: invokestatic  #91
295: new           #83
298: dup
299: invokespecial #84
302: ldc           #85
304: invokevirtual #86
307: dload         10
309: invokevirtual #150
312: ldc           #88
314: invokevirtual #86
317: ldc2_w        #12
320: invokevirtual #150
323: ldc           #85
325: invokevirtual #86
328: invokevirtual #89
331: dload         10
333: ldc2_w        #12
336: dcmpl
337: ifne          344
340: iconst_1
341: goto          345
344: iconst_0
345: invokestatic  #91
348: new           #83
351: dup
352: invokespecial #84
355: ldc           #85
357: invokevirtual #86
360: dload         12
362: invokevirtual #150
365: ldc           #88
367: invokevirtual #86
370: ldc2_w        #12
373: invokevirtual #150
376: ldc           #85
378: invokevirtual #86
381: invokevirtual #89
384: dload         12
386: ldc2_w        #12
389: dcmpl
390: ifne          397
393: iconst_1
394: goto          398
397: iconst_0
398: invokestatic  #91
401: new           #83
404: dup
405: invokespecial #84
408: ldc           #85
410: invokevirtual #86
413: dload         14
415: invokevirtual #150
418: ldc           #88
420: invokevirtual #86
423: ldc2_w        #12
426: invokevirtual #150
429: ldc           #85
431: invokevirtual #86
434: invokevirtual #89
437: dload         14
439: ldc2_w        #12
442: dcmpl
443: ifne          450
446: iconst_1
447: goto          451
450: iconst_0
451: invokestatic  #91
454: new           #83
457: dup
458: invokespecial #84
461: ldc           #85
463: invokevirtual #86
466: dload         16
468: invokevirtual #150
471: ldc           #88
473: invokevirtual #86
476: ldc2_w        #12
479: invokevirtual #150
482: ldc           #85
484: invokevirtual #86
487: invokevirtual #89
490: dload         16
492: ldc2_w        #12
495: dcmpl
496: ifne          503
499: iconst_1
500: goto          504
503: iconst_0
504: invokestatic  #91
507: new           #83
510: dup
511: invokespecial #84
514: ldc           #85
516: invokevirtual #86
519: dload         18
521: invokevirtual #150
524: ldc           #88
526: invokevirtual #86
529: ldc2_w        #12
532: invokevirtual #150
535: ldc           #85
537: invokevirtual #86
540: invokevirtual #89
543: dload         18
545: ldc2_w        #12
548: dcmpl
549: ifne          556
552: iconst_1
553: goto          557
556: iconst_0
557: invokestatic  #91
560: new           #83
563: dup
564: invokespecial #84
567: ldc           #85
569: invokevirtual #86
572: dload         20
574: invokevirtual #150
577: ldc           #88
579: invokevirtual #86
582: ldc2_w        #14
585: invokevirtual #150
588: ldc           #85
590: invokevirtual #86
593: invokevirtual #89
596: dload         20
598: ldc2_w        #14
601: dcmpl
602: ifne          609
605: iconst_1
606: goto          610
609: iconst_0
610: invokestatic  #91
613: new           #83
616: dup
617: invokespecial #84
620: ldc           #85
622: invokevirtual #86
625: dload         22
627: invokevirtual #150
630: ldc           #88
632: invokevirtual #86
635: ldc2_w        #12
638: invokevirtual #150
641: ldc           #85
643: invokevirtual #86
646: invokevirtual #89
649: dload         22
651: ldc2_w        #12
654: dcmpl
655: ifne          662
658: iconst_1
659: goto          663
662: iconst_0
663: invokestatic  #91
666: aload         24
668: invokestatic  #20
671: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test391
Start line: 13098
End line: 13112
Method source code: 
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(52.0d, 52.0d, 35.0d);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 1, 52.0d);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray18 = harmonicFitter1.getObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray18);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #754
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: ldc2_w        #12
64: ldc2_w        #12
67: ldc2_w        #14
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: dconst_1
79: ldc2_w        #12
82: invokevirtual #43
85: aload_2
86: invokevirtual #25
89: astore_3
90: aload_3
91: invokestatic  #20
94: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test392
Start line: 13115
End line: 13143
Method source code: 
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint16 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double17 = weightedObservedPoint16.getWeight();
        double double18 = weightedObservedPoint16.getX();
        double double19 = weightedObservedPoint16.getX();
        double double20 = weightedObservedPoint16.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint16);
        double double22 = weightedObservedPoint16.getY();
        double double23 = weightedObservedPoint16.getWeight();
        double double24 = weightedObservedPoint16.getY();
        double double25 = weightedObservedPoint16.getX();
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 35.0d + "'", double23 == 35.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #755
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: dconst_0
59: dconst_1
60: ldc2_w        #34
63: invokevirtual #54
66: new           #145
69: dup
70: ldc2_w        #14
73: ldc2_w        #12
76: ldc2_w        #12
79: invokespecial #146
82: astore        4
84: aload         4
86: invokevirtual #148
89: dstore        5
91: aload         4
93: invokevirtual #147
96: dstore        7
98: aload         4
100: invokevirtual #147
103: dstore        9
105: aload         4
107: invokevirtual #148
110: dstore        11
112: aload_2
113: aload         4
115: invokevirtual #123
118: aload         4
120: invokevirtual #149
123: dstore        13
125: aload         4
127: invokevirtual #148
130: dstore        15
132: aload         4
134: invokevirtual #149
137: dstore        17
139: aload         4
141: invokevirtual #147
144: dstore        19
146: aload_3
147: invokestatic  #20
150: new           #83
153: dup
154: invokespecial #84
157: ldc           #85
159: invokevirtual #86
162: dload         5
164: invokevirtual #150
167: ldc           #88
169: invokevirtual #86
172: ldc2_w        #14
175: invokevirtual #150
178: ldc           #85
180: invokevirtual #86
183: invokevirtual #89
186: dload         5
188: ldc2_w        #14
191: dcmpl
192: ifne          199
195: iconst_1
196: goto          200
199: iconst_0
200: invokestatic  #91
203: new           #83
206: dup
207: invokespecial #84
210: ldc           #85
212: invokevirtual #86
215: dload         7
217: invokevirtual #150
220: ldc           #88
222: invokevirtual #86
225: ldc2_w        #12
228: invokevirtual #150
231: ldc           #85
233: invokevirtual #86
236: invokevirtual #89
239: dload         7
241: ldc2_w        #12
244: dcmpl
245: ifne          252
248: iconst_1
249: goto          253
252: iconst_0
253: invokestatic  #91
256: new           #83
259: dup
260: invokespecial #84
263: ldc           #85
265: invokevirtual #86
268: dload         9
270: invokevirtual #150
273: ldc           #88
275: invokevirtual #86
278: ldc2_w        #12
281: invokevirtual #150
284: ldc           #85
286: invokevirtual #86
289: invokevirtual #89
292: dload         9
294: ldc2_w        #12
297: dcmpl
298: ifne          305
301: iconst_1
302: goto          306
305: iconst_0
306: invokestatic  #91
309: new           #83
312: dup
313: invokespecial #84
316: ldc           #85
318: invokevirtual #86
321: dload         11
323: invokevirtual #150
326: ldc           #88
328: invokevirtual #86
331: ldc2_w        #14
334: invokevirtual #150
337: ldc           #85
339: invokevirtual #86
342: invokevirtual #89
345: dload         11
347: ldc2_w        #14
350: dcmpl
351: ifne          358
354: iconst_1
355: goto          359
358: iconst_0
359: invokestatic  #91
362: new           #83
365: dup
366: invokespecial #84
369: ldc           #85
371: invokevirtual #86
374: dload         13
376: invokevirtual #150
379: ldc           #88
381: invokevirtual #86
384: ldc2_w        #12
387: invokevirtual #150
390: ldc           #85
392: invokevirtual #86
395: invokevirtual #89
398: dload         13
400: ldc2_w        #12
403: dcmpl
404: ifne          411
407: iconst_1
408: goto          412
411: iconst_0
412: invokestatic  #91
415: new           #83
418: dup
419: invokespecial #84
422: ldc           #85
424: invokevirtual #86
427: dload         15
429: invokevirtual #150
432: ldc           #88
434: invokevirtual #86
437: ldc2_w        #14
440: invokevirtual #150
443: ldc           #85
445: invokevirtual #86
448: invokevirtual #89
451: dload         15
453: ldc2_w        #14
456: dcmpl
457: ifne          464
460: iconst_1
461: goto          465
464: iconst_0
465: invokestatic  #91
468: new           #83
471: dup
472: invokespecial #84
475: ldc           #85
477: invokevirtual #86
480: dload         17
482: invokevirtual #150
485: ldc           #88
487: invokevirtual #86
490: ldc2_w        #12
493: invokevirtual #150
496: ldc           #85
498: invokevirtual #86
501: invokevirtual #89
504: dload         17
506: ldc2_w        #12
509: dcmpl
510: ifne          517
513: iconst_1
514: goto          518
517: iconst_0
518: invokestatic  #91
521: new           #83
524: dup
525: invokespecial #84
528: ldc           #85
530: invokevirtual #86
533: dload         19
535: invokevirtual #150
538: ldc           #88
540: invokevirtual #86
543: ldc2_w        #12
546: invokevirtual #150
549: ldc           #85
551: invokevirtual #86
554: invokevirtual #89
557: dload         19
559: ldc2_w        #12
562: dcmpl
563: ifne          570
566: iconst_1
567: goto          571
570: iconst_0
571: invokestatic  #91
574: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test393
Start line: 13146
End line: 13179
Method source code: 
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer5 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter6 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer5);
        harmonicFitter6.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter6.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter6.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray14 = harmonicFitter6.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint18 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double19 = weightedObservedPoint18.getX();
        double double20 = weightedObservedPoint18.getY();
        double double21 = weightedObservedPoint18.getX();
        double double22 = weightedObservedPoint18.getY();
        harmonicFitter6.addObservedPoint(weightedObservedPoint18);
        double double24 = weightedObservedPoint18.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint18);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray26 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertNotNull(weightedObservedPointArray14);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 35.0d + "'", double24 == 35.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray26);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #756
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: aconst_null
52: astore        5
54: new           #8
57: dup
58: aload         5
60: invokespecial #9
63: astore        6
65: aload         6
67: dconst_1
68: ldc2_w        #32
71: invokevirtual #43
74: aload         6
76: dconst_0
77: ldc2_w        #34
80: invokevirtual #43
83: aload         6
85: invokevirtual #59
88: aload         6
90: invokevirtual #25
93: astore        7
95: new           #145
98: dup
99: ldc2_w        #14
102: ldc2_w        #12
105: ldc2_w        #12
108: invokespecial #146
111: astore        8
113: aload         8
115: invokevirtual #147
118: dstore        9
120: aload         8
122: invokevirtual #149
125: dstore        11
127: aload         8
129: invokevirtual #147
132: dstore        13
134: aload         8
136: invokevirtual #149
139: dstore        15
141: aload         6
143: aload         8
145: invokevirtual #123
148: aload         8
150: invokevirtual #148
153: dstore        17
155: aload_2
156: aload         8
158: invokevirtual #123
161: aload_2
162: invokevirtual #25
165: astore        19
167: aload_2
168: invokevirtual #59
171: aload_3
172: invokestatic  #20
175: aload         4
177: invokestatic  #20
180: aload         7
182: invokestatic  #20
185: new           #83
188: dup
189: invokespecial #84
192: ldc           #85
194: invokevirtual #86
197: dload         9
199: invokevirtual #150
202: ldc           #88
204: invokevirtual #86
207: ldc2_w        #12
210: invokevirtual #150
213: ldc           #85
215: invokevirtual #86
218: invokevirtual #89
221: dload         9
223: ldc2_w        #12
226: dcmpl
227: ifne          234
230: iconst_1
231: goto          235
234: iconst_0
235: invokestatic  #91
238: new           #83
241: dup
242: invokespecial #84
245: ldc           #85
247: invokevirtual #86
250: dload         11
252: invokevirtual #150
255: ldc           #88
257: invokevirtual #86
260: ldc2_w        #12
263: invokevirtual #150
266: ldc           #85
268: invokevirtual #86
271: invokevirtual #89
274: dload         11
276: ldc2_w        #12
279: dcmpl
280: ifne          287
283: iconst_1
284: goto          288
287: iconst_0
288: invokestatic  #91
291: new           #83
294: dup
295: invokespecial #84
298: ldc           #85
300: invokevirtual #86
303: dload         13
305: invokevirtual #150
308: ldc           #88
310: invokevirtual #86
313: ldc2_w        #12
316: invokevirtual #150
319: ldc           #85
321: invokevirtual #86
324: invokevirtual #89
327: dload         13
329: ldc2_w        #12
332: dcmpl
333: ifne          340
336: iconst_1
337: goto          341
340: iconst_0
341: invokestatic  #91
344: new           #83
347: dup
348: invokespecial #84
351: ldc           #85
353: invokevirtual #86
356: dload         15
358: invokevirtual #150
361: ldc           #88
363: invokevirtual #86
366: ldc2_w        #12
369: invokevirtual #150
372: ldc           #85
374: invokevirtual #86
377: invokevirtual #89
380: dload         15
382: ldc2_w        #12
385: dcmpl
386: ifne          393
389: iconst_1
390: goto          394
393: iconst_0
394: invokestatic  #91
397: new           #83
400: dup
401: invokespecial #84
404: ldc           #85
406: invokevirtual #86
409: dload         17
411: invokevirtual #150
414: ldc           #88
416: invokevirtual #86
419: ldc2_w        #14
422: invokevirtual #150
425: ldc           #85
427: invokevirtual #86
430: invokevirtual #89
433: dload         17
435: ldc2_w        #14
438: dcmpl
439: ifne          446
442: iconst_1
443: goto          447
446: iconst_0
447: invokestatic  #91
450: aload         19
452: invokestatic  #20
455: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test394
Start line: 13182
End line: 13227
Method source code: 
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric10 = null;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer11 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter12 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer11);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray13 = harmonicFitter12.getObservations();
        harmonicFitter12.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter12.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter12.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint28 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double29 = weightedObservedPoint28.getX();
        double double30 = weightedObservedPoint28.getY();
        double double31 = weightedObservedPoint28.getY();
        harmonicFitter12.addObservedPoint(weightedObservedPoint28);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray33 = harmonicFitter12.getObservations();
        org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser34 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray33);
        double[] doubleArray35 = parameterGuesser34.guess();
        double[] doubleArray36 = parameterGuesser34.guess();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray37 = harmonicFitter1.fit(parametric10, doubleArray36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray13);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[31.0, 0.0641141357875468, -1.5191688395158496]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[31.0, 0.0641141357875468, -1.5191688395158496]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #757
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore        4
62: aload_2
63: invokevirtual #25
66: astore        5
68: aconst_null
69: astore        6
71: aconst_null
72: astore        7
74: new           #8
77: dup
78: aload         7
80: invokespecial #9
83: astore        8
85: aload         8
87: invokevirtual #25
90: astore        9
92: aload         8
94: ldc2_w        #32
97: ldc2_w        #10
100: dconst_0
101: invokevirtual #54
104: aload         8
106: ldc2_w        #44
109: ldc2_w        #14
112: invokevirtual #43
115: aload         8
117: ldc2_w        #12
120: dconst_0
121: ldc2_w        #44
124: invokevirtual #54
127: new           #145
130: dup
131: ldc2_w        #14
134: ldc2_w        #12
137: ldc2_w        #12
140: invokespecial #146
143: astore        10
145: aload         10
147: invokevirtual #147
150: dstore        11
152: aload         10
154: invokevirtual #149
157: dstore        13
159: aload         10
161: invokevirtual #149
164: dstore        15
166: aload         8
168: aload         10
170: invokevirtual #123
173: aload         8
175: invokevirtual #25
178: astore        17
180: new           #69
183: dup
184: aload         17
186: invokespecial #70
189: astore        18
191: aload         18
193: invokevirtual #758
196: astore        19
198: aload         18
200: invokevirtual #758
203: astore        20
205: aload_2
206: aload         6
208: aload         20
210: invokevirtual #30
213: astore        21
215: ldc           #17
217: invokestatic  #18
220: goto          225
223: astore        21
225: aload_3
226: invokestatic  #20
229: aload         4
231: invokestatic  #20
234: aload         5
236: invokestatic  #20
239: aload         9
241: invokestatic  #20
244: new           #83
247: dup
248: invokespecial #84
251: ldc           #85
253: invokevirtual #86
256: dload         11
258: invokevirtual #150
261: ldc           #88
263: invokevirtual #86
266: ldc2_w        #12
269: invokevirtual #150
272: ldc           #85
274: invokevirtual #86
277: invokevirtual #89
280: dload         11
282: ldc2_w        #12
285: dcmpl
286: ifne          293
289: iconst_1
290: goto          294
293: iconst_0
294: invokestatic  #91
297: new           #83
300: dup
301: invokespecial #84
304: ldc           #85
306: invokevirtual #86
309: dload         13
311: invokevirtual #150
314: ldc           #88
316: invokevirtual #86
319: ldc2_w        #12
322: invokevirtual #150
325: ldc           #85
327: invokevirtual #86
330: invokevirtual #89
333: dload         13
335: ldc2_w        #12
338: dcmpl
339: ifne          346
342: iconst_1
343: goto          347
346: iconst_0
347: invokestatic  #91
350: new           #83
353: dup
354: invokespecial #84
357: ldc           #85
359: invokevirtual #86
362: dload         15
364: invokevirtual #150
367: ldc           #88
369: invokevirtual #86
372: ldc2_w        #12
375: invokevirtual #150
378: ldc           #85
380: invokevirtual #86
383: invokevirtual #89
386: dload         15
388: ldc2_w        #12
391: dcmpl
392: ifne          399
395: iconst_1
396: goto          400
399: iconst_0
400: invokestatic  #91
403: aload         17
405: invokestatic  #20
408: aload         19
410: invokestatic  #20
413: aload         19
415: invokestatic  #21
418: ldc_w         #759
421: invokestatic  #23
424: aload         20
426: invokestatic  #20
429: aload         20
431: invokestatic  #21
434: ldc_w         #759
437: invokestatic  #23
440: return
Exception table:
from    to  target type
205   220   223   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test395
Start line: 13230
End line: 13280
Method source code: 
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint15 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double16 = weightedObservedPoint15.getX();
        double double17 = weightedObservedPoint15.getY();
        double double18 = weightedObservedPoint15.getX();
        double double19 = weightedObservedPoint15.getY();
        double double20 = weightedObservedPoint15.getX();
        double double21 = weightedObservedPoint15.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint15);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer23 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter24 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer23);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray25 = harmonicFitter24.getObservations();
        harmonicFitter24.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter24.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter24.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint40 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double41 = weightedObservedPoint40.getX();
        double double42 = weightedObservedPoint40.getY();
        double double43 = weightedObservedPoint40.getY();
        harmonicFitter24.addObservedPoint(weightedObservedPoint40);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray45 = harmonicFitter24.getObservations();
        org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser46 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray45);
        double[] doubleArray47 = parameterGuesser46.guess();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray48 = harmonicFitter1.fit(doubleArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray25);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 52.0d + "'", double41 == 52.0d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 52.0d + "'", double42 == 52.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 52.0d + "'", double43 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[31.0, 0.0641141357875468, -1.5191688395158496]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #760
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: dconst_0
54: ldc2_w        #12
57: ldc2_w        #10
60: invokevirtual #54
63: new           #145
66: dup
67: ldc2_w        #14
70: ldc2_w        #12
73: ldc2_w        #12
76: invokespecial #146
79: astore_3
80: aload_3
81: invokevirtual #147
84: dstore        4
86: aload_3
87: invokevirtual #149
90: dstore        6
92: aload_3
93: invokevirtual #147
96: dstore        8
98: aload_3
99: invokevirtual #149
102: dstore        10
104: aload_3
105: invokevirtual #147
108: dstore        12
110: aload_3
111: invokevirtual #147
114: dstore        14
116: aload_2
117: aload_3
118: invokevirtual #123
121: aconst_null
122: astore        16
124: new           #8
127: dup
128: aload         16
130: invokespecial #9
133: astore        17
135: aload         17
137: invokevirtual #25
140: astore        18
142: aload         17
144: ldc2_w        #32
147: ldc2_w        #10
150: dconst_0
151: invokevirtual #54
154: aload         17
156: ldc2_w        #44
159: ldc2_w        #14
162: invokevirtual #43
165: aload         17
167: ldc2_w        #12
170: dconst_0
171: ldc2_w        #44
174: invokevirtual #54
177: new           #145
180: dup
181: ldc2_w        #14
184: ldc2_w        #12
187: ldc2_w        #12
190: invokespecial #146
193: astore        19
195: aload         19
197: invokevirtual #147
200: dstore        20
202: aload         19
204: invokevirtual #149
207: dstore        22
209: aload         19
211: invokevirtual #149
214: dstore        24
216: aload         17
218: aload         19
220: invokevirtual #123
223: aload         17
225: invokevirtual #25
228: astore        26
230: new           #69
233: dup
234: aload         26
236: invokespecial #70
239: astore        27
241: aload         27
243: invokevirtual #758
246: astore        28
248: aload_2
249: aload         28
251: invokevirtual #16
254: astore        29
256: ldc           #17
258: invokestatic  #18
261: goto          266
264: astore        29
266: new           #83
269: dup
270: invokespecial #84
273: ldc           #85
275: invokevirtual #86
278: dload         4
280: invokevirtual #150
283: ldc           #88
285: invokevirtual #86
288: ldc2_w        #12
291: invokevirtual #150
294: ldc           #85
296: invokevirtual #86
299: invokevirtual #89
302: dload         4
304: ldc2_w        #12
307: dcmpl
308: ifne          315
311: iconst_1
312: goto          316
315: iconst_0
316: invokestatic  #91
319: new           #83
322: dup
323: invokespecial #84
326: ldc           #85
328: invokevirtual #86
331: dload         6
333: invokevirtual #150
336: ldc           #88
338: invokevirtual #86
341: ldc2_w        #12
344: invokevirtual #150
347: ldc           #85
349: invokevirtual #86
352: invokevirtual #89
355: dload         6
357: ldc2_w        #12
360: dcmpl
361: ifne          368
364: iconst_1
365: goto          369
368: iconst_0
369: invokestatic  #91
372: new           #83
375: dup
376: invokespecial #84
379: ldc           #85
381: invokevirtual #86
384: dload         8
386: invokevirtual #150
389: ldc           #88
391: invokevirtual #86
394: ldc2_w        #12
397: invokevirtual #150
400: ldc           #85
402: invokevirtual #86
405: invokevirtual #89
408: dload         8
410: ldc2_w        #12
413: dcmpl
414: ifne          421
417: iconst_1
418: goto          422
421: iconst_0
422: invokestatic  #91
425: new           #83
428: dup
429: invokespecial #84
432: ldc           #85
434: invokevirtual #86
437: dload         10
439: invokevirtual #150
442: ldc           #88
444: invokevirtual #86
447: ldc2_w        #12
450: invokevirtual #150
453: ldc           #85
455: invokevirtual #86
458: invokevirtual #89
461: dload         10
463: ldc2_w        #12
466: dcmpl
467: ifne          474
470: iconst_1
471: goto          475
474: iconst_0
475: invokestatic  #91
478: new           #83
481: dup
482: invokespecial #84
485: ldc           #85
487: invokevirtual #86
490: dload         12
492: invokevirtual #150
495: ldc           #88
497: invokevirtual #86
500: ldc2_w        #12
503: invokevirtual #150
506: ldc           #85
508: invokevirtual #86
511: invokevirtual #89
514: dload         12
516: ldc2_w        #12
519: dcmpl
520: ifne          527
523: iconst_1
524: goto          528
527: iconst_0
528: invokestatic  #91
531: new           #83
534: dup
535: invokespecial #84
538: ldc           #85
540: invokevirtual #86
543: dload         14
545: invokevirtual #150
548: ldc           #88
550: invokevirtual #86
553: ldc2_w        #12
556: invokevirtual #150
559: ldc           #85
561: invokevirtual #86
564: invokevirtual #89
567: dload         14
569: ldc2_w        #12
572: dcmpl
573: ifne          580
576: iconst_1
577: goto          581
580: iconst_0
581: invokestatic  #91
584: aload         18
586: invokestatic  #20
589: new           #83
592: dup
593: invokespecial #84
596: ldc           #85
598: invokevirtual #86
601: dload         20
603: invokevirtual #150
606: ldc           #88
608: invokevirtual #86
611: ldc2_w        #12
614: invokevirtual #150
617: ldc           #85
619: invokevirtual #86
622: invokevirtual #89
625: dload         20
627: ldc2_w        #12
630: dcmpl
631: ifne          638
634: iconst_1
635: goto          639
638: iconst_0
639: invokestatic  #91
642: new           #83
645: dup
646: invokespecial #84
649: ldc           #85
651: invokevirtual #86
654: dload         22
656: invokevirtual #150
659: ldc           #88
661: invokevirtual #86
664: ldc2_w        #12
667: invokevirtual #150
670: ldc           #85
672: invokevirtual #86
675: invokevirtual #89
678: dload         22
680: ldc2_w        #12
683: dcmpl
684: ifne          691
687: iconst_1
688: goto          692
691: iconst_0
692: invokestatic  #91
695: new           #83
698: dup
699: invokespecial #84
702: ldc           #85
704: invokevirtual #86
707: dload         24
709: invokevirtual #150
712: ldc           #88
714: invokevirtual #86
717: ldc2_w        #12
720: invokevirtual #150
723: ldc           #85
725: invokevirtual #86
728: invokevirtual #89
731: dload         24
733: ldc2_w        #12
736: dcmpl
737: ifne          744
740: iconst_1
741: goto          745
744: iconst_0
745: invokestatic  #91
748: aload         26
750: invokestatic  #20
753: aload         28
755: invokestatic  #20
758: aload         28
760: invokestatic  #21
763: ldc_w         #759
766: invokestatic  #23
769: return
Exception table:
from    to  target type
248   261   264   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test396
Start line: 13283
End line: 13329
Method source code: 
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        org.apache.commons.math3.exception.util.Localizable localizable0 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.UNSUPPORTED_OPERATION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer2 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter3 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer2);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter3.getObservations();
        harmonicFitter3.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter3.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray12 = harmonicFitter3.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer13 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter14 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer13);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter14.getObservations();
        harmonicFitter14.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray17 = harmonicFitter14.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer18 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter19 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer18);
        harmonicFitter19.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter19.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter19.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter19.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint31 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double32 = weightedObservedPoint31.getX();
        double double33 = weightedObservedPoint31.getY();
        double double34 = weightedObservedPoint31.getX();
        double double35 = weightedObservedPoint31.getY();
        harmonicFitter19.addObservedPoint(weightedObservedPoint31);
        double double37 = weightedObservedPoint31.getWeight();
        harmonicFitter14.addObservedPoint(weightedObservedPoint31);
        harmonicFitter3.addObservedPoint(weightedObservedPoint31);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray40 = harmonicFitter3.getObservations();
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException41 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) weightedObservedPointArray40);
        org.apache.commons.math3.exception.ZeroException zeroException42 = new org.apache.commons.math3.exception.ZeroException(localizable0, (java.lang.Object[]) weightedObservedPointArray40);
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNSUPPORTED_OPERATION + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNSUPPORTED_OPERATION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertNotNull(weightedObservedPointArray12);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertNotNull(weightedObservedPointArray17);
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 52.0d + "'", double34 == 52.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 35.0d + "'", double37 == 35.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray40);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #761
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: getstatic     #762
30: astore_2
31: aconst_null
32: astore_3
33: new           #8
36: dup
37: aload_3
38: invokespecial #9
41: astore        4
43: aload         4
45: invokevirtual #25
48: astore        5
50: aload         4
52: ldc2_w        #32
55: ldc2_w        #10
58: dconst_0
59: invokevirtual #54
62: aload         4
64: ldc2_w        #44
67: ldc2_w        #14
70: invokevirtual #43
73: aload         4
75: invokevirtual #25
78: astore        6
80: aconst_null
81: astore        7
83: new           #8
86: dup
87: aload         7
89: invokespecial #9
92: astore        8
94: aload         8
96: invokevirtual #25
99: astore        9
101: aload         8
103: invokevirtual #59
106: aload         8
108: invokevirtual #25
111: astore        10
113: aconst_null
114: astore        11
116: new           #8
119: dup
120: aload         11
122: invokespecial #9
125: astore        12
127: aload         12
129: dconst_1
130: ldc2_w        #32
133: invokevirtual #43
136: aload         12
138: dconst_0
139: ldc2_w        #34
142: invokevirtual #43
145: aload         12
147: invokevirtual #59
150: aload         12
152: invokevirtual #25
155: astore        13
157: new           #145
160: dup
161: ldc2_w        #14
164: ldc2_w        #12
167: ldc2_w        #12
170: invokespecial #146
173: astore        14
175: aload         14
177: invokevirtual #147
180: dstore        15
182: aload         14
184: invokevirtual #149
187: dstore        17
189: aload         14
191: invokevirtual #147
194: dstore        19
196: aload         14
198: invokevirtual #149
201: dstore        21
203: aload         12
205: aload         14
207: invokevirtual #123
210: aload         14
212: invokevirtual #148
215: dstore        23
217: aload         8
219: aload         14
221: invokevirtual #123
224: aload         4
226: aload         14
228: invokevirtual #123
231: aload         4
233: invokevirtual #25
236: astore        25
238: new           #130
241: dup
242: aload_2
243: aload         25
245: checkcast     #79
248: invokespecial #131
251: astore        26
253: new           #81
256: dup
257: aload_1
258: aload         25
260: checkcast     #79
263: invokespecial #82
266: astore        27
268: new           #83
271: dup
272: invokespecial #84
275: ldc           #85
277: invokevirtual #86
280: aload_2
281: invokevirtual #87
284: ldc           #88
286: invokevirtual #86
289: getstatic     #762
292: invokevirtual #87
295: ldc           #85
297: invokevirtual #86
300: invokevirtual #89
303: aload_2
304: getstatic     #762
307: invokevirtual #90
310: invokestatic  #91
313: aload         5
315: invokestatic  #20
318: aload         6
320: invokestatic  #20
323: aload         9
325: invokestatic  #20
328: aload         10
330: invokestatic  #20
333: aload         13
335: invokestatic  #20
338: new           #83
341: dup
342: invokespecial #84
345: ldc           #85
347: invokevirtual #86
350: dload         15
352: invokevirtual #150
355: ldc           #88
357: invokevirtual #86
360: ldc2_w        #12
363: invokevirtual #150
366: ldc           #85
368: invokevirtual #86
371: invokevirtual #89
374: dload         15
376: ldc2_w        #12
379: dcmpl
380: ifne          387
383: iconst_1
384: goto          388
387: iconst_0
388: invokestatic  #91
391: new           #83
394: dup
395: invokespecial #84
398: ldc           #85
400: invokevirtual #86
403: dload         17
405: invokevirtual #150
408: ldc           #88
410: invokevirtual #86
413: ldc2_w        #12
416: invokevirtual #150
419: ldc           #85
421: invokevirtual #86
424: invokevirtual #89
427: dload         17
429: ldc2_w        #12
432: dcmpl
433: ifne          440
436: iconst_1
437: goto          441
440: iconst_0
441: invokestatic  #91
444: new           #83
447: dup
448: invokespecial #84
451: ldc           #85
453: invokevirtual #86
456: dload         19
458: invokevirtual #150
461: ldc           #88
463: invokevirtual #86
466: ldc2_w        #12
469: invokevirtual #150
472: ldc           #85
474: invokevirtual #86
477: invokevirtual #89
480: dload         19
482: ldc2_w        #12
485: dcmpl
486: ifne          493
489: iconst_1
490: goto          494
493: iconst_0
494: invokestatic  #91
497: new           #83
500: dup
501: invokespecial #84
504: ldc           #85
506: invokevirtual #86
509: dload         21
511: invokevirtual #150
514: ldc           #88
516: invokevirtual #86
519: ldc2_w        #12
522: invokevirtual #150
525: ldc           #85
527: invokevirtual #86
530: invokevirtual #89
533: dload         21
535: ldc2_w        #12
538: dcmpl
539: ifne          546
542: iconst_1
543: goto          547
546: iconst_0
547: invokestatic  #91
550: new           #83
553: dup
554: invokespecial #84
557: ldc           #85
559: invokevirtual #86
562: dload         23
564: invokevirtual #150
567: ldc           #88
569: invokevirtual #86
572: ldc2_w        #14
575: invokevirtual #150
578: ldc           #85
580: invokevirtual #86
583: invokevirtual #89
586: dload         23
588: ldc2_w        #14
591: dcmpl
592: ifne          599
595: iconst_1
596: goto          600
599: iconst_0
600: invokestatic  #91
603: aload         25
605: invokestatic  #20
608: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test397
Start line: 13332
End line: 13360
Method source code: 
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint19 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter8.addObservedPoint(weightedObservedPoint19);
        harmonicFitter1.addObservedPoint(weightedObservedPoint19);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer22 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter23 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer22);
        harmonicFitter23.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter23.clearObservations();
        harmonicFitter23.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint34 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double35 = weightedObservedPoint34.getX();
        harmonicFitter23.addObservedPoint(weightedObservedPoint34);
        harmonicFitter1.addObservedPoint(weightedObservedPoint34);
        harmonicFitter1.addObservedPoint(10.0d, (double) ' ', 10.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #763
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aconst_null
53: astore        4
55: new           #8
58: dup
59: aload         4
61: invokespecial #9
64: astore        5
66: aload         5
68: dconst_1
69: ldc2_w        #32
72: invokevirtual #43
75: aload         5
77: dconst_0
78: ldc2_w        #34
81: invokevirtual #43
84: aload         5
86: invokevirtual #25
89: astore        6
91: new           #145
94: dup
95: dconst_1
96: dconst_0
97: ldc2_w        #34
100: invokespecial #146
103: astore        7
105: aload         5
107: aload         7
109: invokevirtual #123
112: aload_2
113: aload         7
115: invokevirtual #123
118: aconst_null
119: astore        8
121: new           #8
124: dup
125: aload         8
127: invokespecial #9
130: astore        9
132: aload         9
134: dconst_1
135: ldc2_w        #32
138: invokevirtual #43
141: aload         9
143: invokevirtual #59
146: aload         9
148: dconst_0
149: ldc2_w        #10
152: invokevirtual #43
155: new           #145
158: dup
159: ldc2_w        #14
162: ldc2_w        #12
165: ldc2_w        #12
168: invokespecial #146
171: astore        10
173: aload         10
175: invokevirtual #147
178: dstore        11
180: aload         9
182: aload         10
184: invokevirtual #123
187: aload_2
188: aload         10
190: invokevirtual #123
193: aload_2
194: ldc2_w        #32
197: ldc2_w        #38
200: ldc2_w        #32
203: invokevirtual #54
206: aload_3
207: invokestatic  #20
210: aload         6
212: invokestatic  #20
215: new           #83
218: dup
219: invokespecial #84
222: ldc           #85
224: invokevirtual #86
227: dload         11
229: invokevirtual #150
232: ldc           #88
234: invokevirtual #86
237: ldc2_w        #12
240: invokevirtual #150
243: ldc           #85
245: invokevirtual #86
248: invokevirtual #89
251: dload         11
253: ldc2_w        #12
256: dcmpl
257: ifne          264
260: iconst_1
261: goto          265
264: iconst_0
265: invokestatic  #91
268: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test398
Start line: 13363
End line: 13390
Method source code: 
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 1, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray14 = harmonicFitter1.getObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric16 = null;
        double[] doubleArray22 = new double[] { 10.0f, 1L, 100.0f, 'a', 1L };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray23 = harmonicFitter1.fit((int) ' ', parametric16, doubleArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray14);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 1.0, 100.0, 97.0, 1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #764
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: invokevirtual #25
61: astore        4
63: aload_2
64: invokevirtual #25
67: astore        5
69: aload_2
70: dconst_1
71: ldc2_w        #10
74: invokevirtual #43
77: aload_2
78: invokevirtual #25
81: astore        6
83: aconst_null
84: astore        7
86: iconst_5
87: newarray       double
89: dup
90: iconst_0
91: ldc2_w        #32
94: dastore
95: dup
96: iconst_1
97: dconst_1
98: dastore
99: dup
100: iconst_2
101: ldc2_w        #34
104: dastore
105: dup
106: iconst_3
107: ldc2_w        #44
110: dastore
111: dup
112: iconst_4
113: dconst_1
114: dastore
115: astore        8
117: aload_2
118: bipush        32
120: aload         7
122: aload         8
124: invokevirtual #40
127: astore        9
129: ldc           #17
131: invokestatic  #18
134: goto          139
137: astore        9
139: aload_3
140: invokestatic  #20
143: aload         4
145: invokestatic  #20
148: aload         5
150: invokestatic  #20
153: aload         6
155: invokestatic  #20
158: aload         8
160: invokestatic  #20
163: aload         8
165: invokestatic  #21
168: ldc_w         #765
171: invokestatic  #23
174: return
Exception table:
from    to  target type
117   134   137   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test399
Start line: 13393
End line: 13443
Method source code: 
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        java.lang.Object[] objArray11 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray10);
        org.apache.commons.math3.exception.ZeroException zeroException12 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray10);
        java.lang.Object[] objArray13 = null;
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException14 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray13);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray19 = new java.lang.Object[] { localizedFormats17, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException20 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats16, objArray19);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray24 = new java.lang.Object[] { localizedFormats22, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException25 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats21, objArray24);
        mathIllegalArgumentException20.addSuppressed((java.lang.Throwable) mathIllegalArgumentException25);
        java.lang.Throwable[] throwableArray27 = mathIllegalArgumentException20.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException28 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats15, (java.lang.Object[]) throwableArray27);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext29 = mathIllegalStateException28.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext30 = mathIllegalStateException28.getContext();
        mathIllegalStateException14.addSuppressed((java.lang.Throwable) mathIllegalStateException28);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext32 = mathIllegalStateException28.getContext();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION));
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(exceptionContext29);
        org.junit.Assert.assertNotNull(exceptionContext30);
        org.junit.Assert.assertNotNull(exceptionContext32);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #766
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #220
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: dconst_1
42: ldc2_w        #32
45: invokevirtual #43
48: aload_3
49: dconst_0
50: ldc2_w        #34
53: invokevirtual #43
56: aload_3
57: invokevirtual #59
60: aload_3
61: invokevirtual #25
64: astore        4
66: aload         4
68: checkcast     #79
71: invokestatic  #80
74: astore        5
76: new           #81
79: dup
80: aload_1
81: aload         4
83: checkcast     #79
86: invokespecial #82
89: astore        6
91: aconst_null
92: astore        7
94: new           #136
97: dup
98: aload_1
99: aload         7
101: invokespecial #138
104: astore        8
106: getstatic     #233
109: astore        9
111: getstatic     #127
114: astore        10
116: getstatic     #128
119: astore        11
121: iconst_2
122: anewarray     #5
125: dup
126: iconst_0
127: aload         11
129: aastore
130: dup
131: iconst_1
132: lconst_1
133: invokestatic  #129
136: aastore
137: astore        12
139: new           #130
142: dup
143: aload         10
145: aload         12
147: invokespecial #131
150: astore        13
152: getstatic     #127
155: astore        14
157: getstatic     #128
160: astore        15
162: iconst_2
163: anewarray     #5
166: dup
167: iconst_0
168: aload         15
170: aastore
171: dup
172: iconst_1
173: lconst_1
174: invokestatic  #129
177: aastore
178: astore        16
180: new           #130
183: dup
184: aload         14
186: aload         16
188: invokespecial #131
191: astore        17
193: aload         13
195: aload         17
197: invokevirtual #132
200: aload         13
202: invokevirtual #234
205: astore        18
207: new           #136
210: dup
211: aload         9
213: aload         18
215: checkcast     #79
218: invokespecial #138
221: astore        19
223: aload         19
225: invokevirtual #282
228: astore        20
230: aload         19
232: invokevirtual #282
235: astore        21
237: aload         8
239: aload         19
241: invokevirtual #555
244: aload         19
246: invokevirtual #282
249: astore        22
251: new           #83
254: dup
255: invokespecial #84
258: ldc           #85
260: invokevirtual #86
263: aload_1
264: invokevirtual #87
267: ldc           #88
269: invokevirtual #86
272: getstatic     #220
275: invokevirtual #87
278: ldc           #85
280: invokevirtual #86
283: invokevirtual #89
286: aload_1
287: getstatic     #220
290: invokevirtual #90
293: invokestatic  #91
296: aload         4
298: invokestatic  #20
301: aload         5
303: invokestatic  #20
306: aload         5
308: invokestatic  #92
311: ldc           #74
313: invokestatic  #23
316: aload         5
318: invokestatic  #93
321: ldc           #74
323: invokestatic  #23
326: new           #83
329: dup
330: invokespecial #84
333: ldc           #85
335: invokevirtual #86
338: aload         9
340: invokevirtual #87
343: ldc           #88
345: invokevirtual #86
348: getstatic     #233
351: invokevirtual #87
354: ldc           #85
356: invokevirtual #86
359: invokevirtual #89
362: aload         9
364: getstatic     #233
367: invokevirtual #90
370: invokestatic  #91
373: new           #83
376: dup
377: invokespecial #84
380: ldc           #85
382: invokevirtual #86
385: aload         10
387: invokevirtual #87
390: ldc           #88
392: invokevirtual #86
395: getstatic     #127
398: invokevirtual #87
401: ldc           #85
403: invokevirtual #86
406: invokevirtual #89
409: aload         10
411: getstatic     #127
414: invokevirtual #90
417: invokestatic  #91
420: new           #83
423: dup
424: invokespecial #84
427: ldc           #85
429: invokevirtual #86
432: aload         11
434: invokevirtual #87
437: ldc           #88
439: invokevirtual #86
442: getstatic     #128
445: invokevirtual #87
448: ldc           #85
450: invokevirtual #86
453: invokevirtual #89
456: aload         11
458: getstatic     #128
461: invokevirtual #90
464: invokestatic  #91
467: aload         12
469: invokestatic  #20
472: aload         12
474: invokestatic  #92
477: ldc           #140
479: invokestatic  #23
482: aload         12
484: invokestatic  #93
487: ldc           #140
489: invokestatic  #23
492: new           #83
495: dup
496: invokespecial #84
499: ldc           #85
501: invokevirtual #86
504: aload         14
506: invokevirtual #87
509: ldc           #88
511: invokevirtual #86
514: getstatic     #127
517: invokevirtual #87
520: ldc           #85
522: invokevirtual #86
525: invokevirtual #89
528: aload         14
530: getstatic     #127
533: invokevirtual #90
536: invokestatic  #91
539: new           #83
542: dup
543: invokespecial #84
546: ldc           #85
548: invokevirtual #86
551: aload         15
553: invokevirtual #87
556: ldc           #88
558: invokevirtual #86
561: getstatic     #128
564: invokevirtual #87
567: ldc           #85
569: invokevirtual #86
572: invokevirtual #89
575: aload         15
577: getstatic     #128
580: invokevirtual #90
583: invokestatic  #91
586: aload         16
588: invokestatic  #20
591: aload         16
593: invokestatic  #92
596: ldc           #140
598: invokestatic  #23
601: aload         16
603: invokestatic  #93
606: ldc           #140
608: invokestatic  #23
611: aload         18
613: invokestatic  #20
616: aload         20
618: invokestatic  #20
621: aload         21
623: invokestatic  #20
626: aload         22
628: invokestatic  #20
631: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test400
Start line: 13446
End line: 13511
Method source code: 
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer11 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter12 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer11);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray13 = harmonicFitter12.getObservations();
        harmonicFitter12.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter12.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer16 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter17 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer16);
        harmonicFitter17.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter17.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter17.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray25 = harmonicFitter17.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint29 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double30 = weightedObservedPoint29.getX();
        double double31 = weightedObservedPoint29.getY();
        double double32 = weightedObservedPoint29.getX();
        double double33 = weightedObservedPoint29.getY();
        harmonicFitter17.addObservedPoint(weightedObservedPoint29);
        double double35 = weightedObservedPoint29.getWeight();
        harmonicFitter12.addObservedPoint(weightedObservedPoint29);
        harmonicFitter1.addObservedPoint(weightedObservedPoint29);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer38 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter39 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer38);
        harmonicFitter39.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter39.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray46 = harmonicFitter39.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray47 = harmonicFitter39.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray48 = harmonicFitter39.getObservations();
        harmonicFitter39.addObservedPoint((double) (byte) 1, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray52 = harmonicFitter39.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint56 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double57 = weightedObservedPoint56.getX();
        double double58 = weightedObservedPoint56.getY();
        double double59 = weightedObservedPoint56.getX();
        double double60 = weightedObservedPoint56.getY();
        double double61 = weightedObservedPoint56.getX();
        harmonicFitter39.addObservedPoint(weightedObservedPoint56);
        harmonicFitter1.addObservedPoint(weightedObservedPoint56);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray13);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertNotNull(weightedObservedPointArray25);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 52.0d + "'", double32 == 52.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 35.0d + "'", double35 == 35.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray46);
        org.junit.Assert.assertNotNull(weightedObservedPointArray47);
        org.junit.Assert.assertNotNull(weightedObservedPointArray48);
        org.junit.Assert.assertNotNull(weightedObservedPointArray52);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 52.0d + "'", double57 == 52.0d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 52.0d + "'", double58 == 52.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 52.0d + "'", double59 == 52.0d);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 52.0d + "'", double60 == 52.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 52.0d + "'", double61 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #767
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: invokevirtual #25
66: astore        4
68: aconst_null
69: astore        5
71: new           #8
74: dup
75: aload         5
77: invokespecial #9
80: astore        6
82: aload         6
84: invokevirtual #25
87: astore        7
89: aload         6
91: invokevirtual #59
94: aload         6
96: invokevirtual #25
99: astore        8
101: aconst_null
102: astore        9
104: new           #8
107: dup
108: aload         9
110: invokespecial #9
113: astore        10
115: aload         10
117: dconst_1
118: ldc2_w        #32
121: invokevirtual #43
124: aload         10
126: dconst_0
127: ldc2_w        #34
130: invokevirtual #43
133: aload         10
135: invokevirtual #59
138: aload         10
140: invokevirtual #25
143: astore        11
145: new           #145
148: dup
149: ldc2_w        #14
152: ldc2_w        #12
155: ldc2_w        #12
158: invokespecial #146
161: astore        12
163: aload         12
165: invokevirtual #147
168: dstore        13
170: aload         12
172: invokevirtual #149
175: dstore        15
177: aload         12
179: invokevirtual #147
182: dstore        17
184: aload         12
186: invokevirtual #149
189: dstore        19
191: aload         10
193: aload         12
195: invokevirtual #123
198: aload         12
200: invokevirtual #148
203: dstore        21
205: aload         6
207: aload         12
209: invokevirtual #123
212: aload_2
213: aload         12
215: invokevirtual #123
218: aconst_null
219: astore        23
221: new           #8
224: dup
225: aload         23
227: invokespecial #9
230: astore        24
232: aload         24
234: dconst_1
235: ldc2_w        #32
238: invokevirtual #43
241: aload         24
243: dconst_0
244: ldc2_w        #34
247: invokevirtual #43
250: aload         24
252: invokevirtual #25
255: astore        25
257: aload         24
259: invokevirtual #25
262: astore        26
264: aload         24
266: invokevirtual #25
269: astore        27
271: aload         24
273: dconst_1
274: ldc2_w        #10
277: invokevirtual #43
280: aload         24
282: invokevirtual #25
285: astore        28
287: new           #145
290: dup
291: ldc2_w        #14
294: ldc2_w        #12
297: ldc2_w        #12
300: invokespecial #146
303: astore        29
305: aload         29
307: invokevirtual #147
310: dstore        30
312: aload         29
314: invokevirtual #149
317: dstore        32
319: aload         29
321: invokevirtual #147
324: dstore        34
326: aload         29
328: invokevirtual #149
331: dstore        36
333: aload         29
335: invokevirtual #147
338: dstore        38
340: aload         24
342: aload         29
344: invokevirtual #123
347: aload_2
348: aload         29
350: invokevirtual #123
353: aload_3
354: invokestatic  #20
357: aload         4
359: invokestatic  #20
362: aload         7
364: invokestatic  #20
367: aload         8
369: invokestatic  #20
372: aload         11
374: invokestatic  #20
377: new           #83
380: dup
381: invokespecial #84
384: ldc           #85
386: invokevirtual #86
389: dload         13
391: invokevirtual #150
394: ldc           #88
396: invokevirtual #86
399: ldc2_w        #12
402: invokevirtual #150
405: ldc           #85
407: invokevirtual #86
410: invokevirtual #89
413: dload         13
415: ldc2_w        #12
418: dcmpl
419: ifne          426
422: iconst_1
423: goto          427
426: iconst_0
427: invokestatic  #91
430: new           #83
433: dup
434: invokespecial #84
437: ldc           #85
439: invokevirtual #86
442: dload         15
444: invokevirtual #150
447: ldc           #88
449: invokevirtual #86
452: ldc2_w        #12
455: invokevirtual #150
458: ldc           #85
460: invokevirtual #86
463: invokevirtual #89
466: dload         15
468: ldc2_w        #12
471: dcmpl
472: ifne          479
475: iconst_1
476: goto          480
479: iconst_0
480: invokestatic  #91
483: new           #83
486: dup
487: invokespecial #84
490: ldc           #85
492: invokevirtual #86
495: dload         17
497: invokevirtual #150
500: ldc           #88
502: invokevirtual #86
505: ldc2_w        #12
508: invokevirtual #150
511: ldc           #85
513: invokevirtual #86
516: invokevirtual #89
519: dload         17
521: ldc2_w        #12
524: dcmpl
525: ifne          532
528: iconst_1
529: goto          533
532: iconst_0
533: invokestatic  #91
536: new           #83
539: dup
540: invokespecial #84
543: ldc           #85
545: invokevirtual #86
548: dload         19
550: invokevirtual #150
553: ldc           #88
555: invokevirtual #86
558: ldc2_w        #12
561: invokevirtual #150
564: ldc           #85
566: invokevirtual #86
569: invokevirtual #89
572: dload         19
574: ldc2_w        #12
577: dcmpl
578: ifne          585
581: iconst_1
582: goto          586
585: iconst_0
586: invokestatic  #91
589: new           #83
592: dup
593: invokespecial #84
596: ldc           #85
598: invokevirtual #86
601: dload         21
603: invokevirtual #150
606: ldc           #88
608: invokevirtual #86
611: ldc2_w        #14
614: invokevirtual #150
617: ldc           #85
619: invokevirtual #86
622: invokevirtual #89
625: dload         21
627: ldc2_w        #14
630: dcmpl
631: ifne          638
634: iconst_1
635: goto          639
638: iconst_0
639: invokestatic  #91
642: aload         25
644: invokestatic  #20
647: aload         26
649: invokestatic  #20
652: aload         27
654: invokestatic  #20
657: aload         28
659: invokestatic  #20
662: new           #83
665: dup
666: invokespecial #84
669: ldc           #85
671: invokevirtual #86
674: dload         30
676: invokevirtual #150
679: ldc           #88
681: invokevirtual #86
684: ldc2_w        #12
687: invokevirtual #150
690: ldc           #85
692: invokevirtual #86
695: invokevirtual #89
698: dload         30
700: ldc2_w        #12
703: dcmpl
704: ifne          711
707: iconst_1
708: goto          712
711: iconst_0
712: invokestatic  #91
715: new           #83
718: dup
719: invokespecial #84
722: ldc           #85
724: invokevirtual #86
727: dload         32
729: invokevirtual #150
732: ldc           #88
734: invokevirtual #86
737: ldc2_w        #12
740: invokevirtual #150
743: ldc           #85
745: invokevirtual #86
748: invokevirtual #89
751: dload         32
753: ldc2_w        #12
756: dcmpl
757: ifne          764
760: iconst_1
761: goto          765
764: iconst_0
765: invokestatic  #91
768: new           #83
771: dup
772: invokespecial #84
775: ldc           #85
777: invokevirtual #86
780: dload         34
782: invokevirtual #150
785: ldc           #88
787: invokevirtual #86
790: ldc2_w        #12
793: invokevirtual #150
796: ldc           #85
798: invokevirtual #86
801: invokevirtual #89
804: dload         34
806: ldc2_w        #12
809: dcmpl
810: ifne          817
813: iconst_1
814: goto          818
817: iconst_0
818: invokestatic  #91
821: new           #83
824: dup
825: invokespecial #84
828: ldc           #85
830: invokevirtual #86
833: dload         36
835: invokevirtual #150
838: ldc           #88
840: invokevirtual #86
843: ldc2_w        #12
846: invokevirtual #150
849: ldc           #85
851: invokevirtual #86
854: invokevirtual #89
857: dload         36
859: ldc2_w        #12
862: dcmpl
863: ifne          870
866: iconst_1
867: goto          871
870: iconst_0
871: invokestatic  #91
874: new           #83
877: dup
878: invokespecial #84
881: ldc           #85
883: invokevirtual #86
886: dload         38
888: invokevirtual #150
891: ldc           #88
893: invokevirtual #86
896: ldc2_w        #12
899: invokevirtual #150
902: ldc           #85
904: invokevirtual #86
907: invokevirtual #89
910: dload         38
912: ldc2_w        #12
915: dcmpl
916: ifne          923
919: iconst_1
920: goto          924
923: iconst_0
924: invokestatic  #91
927: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test401
Start line: 13514
End line: 13542
Method source code: 
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint19 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) 0L, (double) 'a', (double) 0);
        harmonicFitter1.addObservedPoint(weightedObservedPoint19);
        harmonicFitter1.addObservedPoint((double) (byte) 10, (double) (short) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint27 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 100, 0.0d, (double) (-1));
        harmonicFitter1.addObservedPoint(weightedObservedPoint27);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #768
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: invokevirtual #59
107: aload_2
108: invokevirtual #25
111: astore        14
113: new           #145
116: dup
117: dconst_0
118: ldc2_w        #44
121: dconst_0
122: invokespecial #146
125: astore        15
127: aload_2
128: aload         15
130: invokevirtual #123
133: aload_2
134: ldc2_w        #32
137: ldc2_w        #32
140: invokevirtual #43
143: new           #145
146: dup
147: ldc2_w        #34
150: dconst_0
151: ldc2_w        #10
154: invokespecial #146
157: astore        16
159: aload_2
160: aload         16
162: invokevirtual #123
165: aload_3
166: invokestatic  #20
169: aload         4
171: invokestatic  #20
174: new           #83
177: dup
178: invokespecial #84
181: ldc           #85
183: invokevirtual #86
186: dload         6
188: invokevirtual #150
191: ldc           #88
193: invokevirtual #86
196: ldc2_w        #12
199: invokevirtual #150
202: ldc           #85
204: invokevirtual #86
207: invokevirtual #89
210: dload         6
212: ldc2_w        #12
215: dcmpl
216: ifne          223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #91
227: new           #83
230: dup
231: invokespecial #84
234: ldc           #85
236: invokevirtual #86
239: dload         8
241: invokevirtual #150
244: ldc           #88
246: invokevirtual #86
249: ldc2_w        #14
252: invokevirtual #150
255: ldc           #85
257: invokevirtual #86
260: invokevirtual #89
263: dload         8
265: ldc2_w        #14
268: dcmpl
269: ifne          276
272: iconst_1
273: goto          277
276: iconst_0
277: invokestatic  #91
280: new           #83
283: dup
284: invokespecial #84
287: ldc           #85
289: invokevirtual #86
292: dload         10
294: invokevirtual #150
297: ldc           #88
299: invokevirtual #86
302: ldc2_w        #14
305: invokevirtual #150
308: ldc           #85
310: invokevirtual #86
313: invokevirtual #89
316: dload         10
318: ldc2_w        #14
321: dcmpl
322: ifne          329
325: iconst_1
326: goto          330
329: iconst_0
330: invokestatic  #91
333: new           #83
336: dup
337: invokespecial #84
340: ldc           #85
342: invokevirtual #86
345: dload         12
347: invokevirtual #150
350: ldc           #88
352: invokevirtual #86
355: ldc2_w        #12
358: invokevirtual #150
361: ldc           #85
363: invokevirtual #86
366: invokevirtual #89
369: dload         12
371: ldc2_w        #12
374: dcmpl
375: ifne          382
378: iconst_1
379: goto          383
382: iconst_0
383: invokestatic  #91
386: aload         14
388: invokestatic  #20
391: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test402
Start line: 13545
End line: 13566
Method source code: 
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(52.0d, 52.0d, 35.0d);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray16 = harmonicFitter1.getObservations();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser17 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray16);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray16);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #769
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: ldc2_w        #12
64: ldc2_w        #12
67: ldc2_w        #14
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: invokevirtual #59
81: aload_2
82: invokevirtual #25
85: astore_3
86: new           #69
89: dup
90: aload_3
91: invokespecial #70
94: astore        4
96: ldc           #27
98: invokestatic  #18
101: goto          106
104: astore        4
106: aload_3
107: invokestatic  #20
110: return
Exception table:
from    to  target type
86   101   104   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test403
Start line: 13569
End line: 13614
Method source code: 
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray5 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint9 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double10 = weightedObservedPoint9.getX();
        double double11 = weightedObservedPoint9.getWeight();
        double double12 = weightedObservedPoint9.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint9);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric15 = null;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer16 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter17 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer16);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray18 = harmonicFitter17.getObservations();
        harmonicFitter17.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter17.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter17.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint33 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double34 = weightedObservedPoint33.getX();
        double double35 = weightedObservedPoint33.getY();
        double double36 = weightedObservedPoint33.getY();
        harmonicFitter17.addObservedPoint(weightedObservedPoint33);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray38 = harmonicFitter17.getObservations();
        org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser39 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray38);
        double[] doubleArray40 = parameterGuesser39.guess();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray41 = harmonicFitter1.fit(10, parametric15, doubleArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray5);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 52.0d + "'", double10 == 52.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray18);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 52.0d + "'", double34 == 52.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[31.0, 0.0641141357875468, -1.5191688395158496]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #770
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #25
48: astore_3
49: new           #145
52: dup
53: ldc2_w        #14
56: ldc2_w        #12
59: ldc2_w        #12
62: invokespecial #146
65: astore        4
67: aload         4
69: invokevirtual #147
72: dstore        5
74: aload         4
76: invokevirtual #148
79: dstore        7
81: aload         4
83: invokevirtual #147
86: dstore        9
88: aload_2
89: aload         4
91: invokevirtual #123
94: aconst_null
95: astore        11
97: aconst_null
98: astore        12
100: new           #8
103: dup
104: aload         12
106: invokespecial #9
109: astore        13
111: aload         13
113: invokevirtual #25
116: astore        14
118: aload         13
120: ldc2_w        #32
123: ldc2_w        #10
126: dconst_0
127: invokevirtual #54
130: aload         13
132: ldc2_w        #44
135: ldc2_w        #14
138: invokevirtual #43
141: aload         13
143: ldc2_w        #12
146: dconst_0
147: ldc2_w        #44
150: invokevirtual #54
153: new           #145
156: dup
157: ldc2_w        #14
160: ldc2_w        #12
163: ldc2_w        #12
166: invokespecial #146
169: astore        15
171: aload         15
173: invokevirtual #147
176: dstore        16
178: aload         15
180: invokevirtual #149
183: dstore        18
185: aload         15
187: invokevirtual #149
190: dstore        20
192: aload         13
194: aload         15
196: invokevirtual #123
199: aload         13
201: invokevirtual #25
204: astore        22
206: new           #69
209: dup
210: aload         22
212: invokespecial #70
215: astore        23
217: aload         23
219: invokevirtual #758
222: astore        24
224: aload_2
225: bipush        10
227: aload         11
229: aload         24
231: invokevirtual #40
234: astore        25
236: ldc           #17
238: invokestatic  #18
241: goto          246
244: astore        25
246: aload_3
247: invokestatic  #20
250: new           #83
253: dup
254: invokespecial #84
257: ldc           #85
259: invokevirtual #86
262: dload         5
264: invokevirtual #150
267: ldc           #88
269: invokevirtual #86
272: ldc2_w        #12
275: invokevirtual #150
278: ldc           #85
280: invokevirtual #86
283: invokevirtual #89
286: dload         5
288: ldc2_w        #12
291: dcmpl
292: ifne          299
295: iconst_1
296: goto          300
299: iconst_0
300: invokestatic  #91
303: new           #83
306: dup
307: invokespecial #84
310: ldc           #85
312: invokevirtual #86
315: dload         7
317: invokevirtual #150
320: ldc           #88
322: invokevirtual #86
325: ldc2_w        #14
328: invokevirtual #150
331: ldc           #85
333: invokevirtual #86
336: invokevirtual #89
339: dload         7
341: ldc2_w        #14
344: dcmpl
345: ifne          352
348: iconst_1
349: goto          353
352: iconst_0
353: invokestatic  #91
356: new           #83
359: dup
360: invokespecial #84
363: ldc           #85
365: invokevirtual #86
368: dload         9
370: invokevirtual #150
373: ldc           #88
375: invokevirtual #86
378: ldc2_w        #12
381: invokevirtual #150
384: ldc           #85
386: invokevirtual #86
389: invokevirtual #89
392: dload         9
394: ldc2_w        #12
397: dcmpl
398: ifne          405
401: iconst_1
402: goto          406
405: iconst_0
406: invokestatic  #91
409: aload         14
411: invokestatic  #20
414: new           #83
417: dup
418: invokespecial #84
421: ldc           #85
423: invokevirtual #86
426: dload         16
428: invokevirtual #150
431: ldc           #88
433: invokevirtual #86
436: ldc2_w        #12
439: invokevirtual #150
442: ldc           #85
444: invokevirtual #86
447: invokevirtual #89
450: dload         16
452: ldc2_w        #12
455: dcmpl
456: ifne          463
459: iconst_1
460: goto          464
463: iconst_0
464: invokestatic  #91
467: new           #83
470: dup
471: invokespecial #84
474: ldc           #85
476: invokevirtual #86
479: dload         18
481: invokevirtual #150
484: ldc           #88
486: invokevirtual #86
489: ldc2_w        #12
492: invokevirtual #150
495: ldc           #85
497: invokevirtual #86
500: invokevirtual #89
503: dload         18
505: ldc2_w        #12
508: dcmpl
509: ifne          516
512: iconst_1
513: goto          517
516: iconst_0
517: invokestatic  #91
520: new           #83
523: dup
524: invokespecial #84
527: ldc           #85
529: invokevirtual #86
532: dload         20
534: invokevirtual #150
537: ldc           #88
539: invokevirtual #86
542: ldc2_w        #12
545: invokevirtual #150
548: ldc           #85
550: invokevirtual #86
553: invokevirtual #89
556: dload         20
558: ldc2_w        #12
561: dcmpl
562: ifne          569
565: iconst_1
566: goto          570
569: iconst_0
570: invokestatic  #91
573: aload         22
575: invokestatic  #20
578: aload         24
580: invokestatic  #20
583: aload         24
585: invokestatic  #21
588: ldc_w         #759
591: invokestatic  #23
594: return
Exception table:
from    to  target type
224   241   244   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test404
Start line: 13617
End line: 13754
Method source code: 
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext11 = mathIllegalArgumentException4.getContext();
        java.lang.Object obj13 = exceptionContext11.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray18 = new java.lang.Object[] { localizedFormats16, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException19 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats15, objArray18);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray23 = new java.lang.Object[] { localizedFormats21, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException24 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, objArray23);
        mathIllegalArgumentException19.addSuppressed((java.lang.Throwable) mathIllegalArgumentException24);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext26 = mathIllegalArgumentException19.getContext();
        java.lang.Object obj28 = exceptionContext26.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.Localizable localizable29 = null;
        java.lang.Object[] objArray30 = null;
        exceptionContext26.addMessage(localizable29, objArray30);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats32 = org.apache.commons.math3.exception.util.LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException36 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray37 = numberIsTooSmallException36.getSuppressed();
        java.lang.Object[] objArray38 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) throwableArray37);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException39 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats32, objArray38);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats40 = org.apache.commons.math3.exception.util.LocalizedFormats.CUMULATIVE_PROBABILITY_RETURNED_NAN;
        java.lang.Object[] objArray41 = null;
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException42 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalStateException39, (org.apache.commons.math3.exception.util.Localizable) localizedFormats40, objArray41);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats43 = org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats44 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats45 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats46 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats47 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray49 = new java.lang.Object[] { localizedFormats47, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException50 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats46, objArray49);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats51 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats52 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray54 = new java.lang.Object[] { localizedFormats52, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException55 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats51, objArray54);
        mathIllegalArgumentException50.addSuppressed((java.lang.Throwable) mathIllegalArgumentException55);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats57 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats58 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray60 = new java.lang.Object[] { localizedFormats58, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException61 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException55, (org.apache.commons.math3.exception.util.Localizable) localizedFormats57, objArray60);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException62 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats45, objArray60);
        java.lang.Object[] objArray63 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray60);
        org.apache.commons.math3.exception.ZeroException zeroException64 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats44, objArray63);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException65 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats43, objArray63);
        java.lang.Throwable[] throwableArray66 = mathIllegalStateException65.getSuppressed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext67 = mathIllegalStateException65.getContext();
        java.lang.Object obj69 = null;
        exceptionContext67.setValue("org.apache.commons.math3.exception.NumberIsTooSmallException: 10 is smaller than the minimum (-1)", obj69);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats71 = org.apache.commons.math3.exception.util.LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats72 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_OBJECT_TO_FRACTION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats73 = org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer74 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter75 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer74);
        harmonicFitter75.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter75.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter75.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray83 = harmonicFitter75.getObservations();
        java.lang.Object[] objArray84 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray83);
        org.apache.commons.math3.exception.ZeroException zeroException85 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats73, (java.lang.Object[]) weightedObservedPointArray83);
        org.apache.commons.math3.exception.ZeroException zeroException86 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats72, (java.lang.Object[]) weightedObservedPointArray83);
        exceptionContext67.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats71, (java.lang.Object[]) weightedObservedPointArray83);
        exceptionContext26.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats40, (java.lang.Object[]) weightedObservedPointArray83);
        exceptionContext11.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats14, (java.lang.Object[]) weightedObservedPointArray83);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN));
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + localizedFormats32 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX + "'", localizedFormats32.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX));
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + localizedFormats40 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CUMULATIVE_PROBABILITY_RETURNED_NAN + "'", localizedFormats40.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CUMULATIVE_PROBABILITY_RETURNED_NAN));
        org.junit.Assert.assertTrue("'" + localizedFormats43 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY + "'", localizedFormats43.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY));
        org.junit.Assert.assertTrue("'" + localizedFormats44 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats44.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats45 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats45.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats46 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats46.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats47 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats47.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats51 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats51.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats52 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats52.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats57 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats57.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats58 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats58.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(exceptionContext67);
        org.junit.Assert.assertTrue("'" + localizedFormats71 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS + "'", localizedFormats71.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS));
        org.junit.Assert.assertTrue("'" + localizedFormats72 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_OBJECT_TO_FRACTION + "'", localizedFormats72.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_OBJECT_TO_FRACTION));
        org.junit.Assert.assertTrue("'" + localizedFormats73 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED + "'", localizedFormats73.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED));
        org.junit.Assert.assertNotNull(weightedObservedPointArray83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #771
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: aload         4
110: invokevirtual #165
113: astore        9
115: aload         9
117: ldc           #166
119: invokevirtual #167
122: astore        10
124: getstatic     #509
127: astore        11
129: getstatic     #127
132: astore        12
134: getstatic     #128
137: astore        13
139: iconst_2
140: anewarray     #5
143: dup
144: iconst_0
145: aload         13
147: aastore
148: dup
149: iconst_1
150: lconst_1
151: invokestatic  #129
154: aastore
155: astore        14
157: new           #130
160: dup
161: aload         12
163: aload         14
165: invokespecial #131
168: astore        15
170: getstatic     #127
173: astore        16
175: getstatic     #128
178: astore        17
180: iconst_2
181: anewarray     #5
184: dup
185: iconst_0
186: aload         17
188: aastore
189: dup
190: iconst_1
191: lconst_1
192: invokestatic  #129
195: aastore
196: astore        18
198: new           #130
201: dup
202: aload         16
204: aload         18
206: invokespecial #131
209: astore        19
211: aload         15
213: aload         19
215: invokevirtual #132
218: aload         15
220: invokevirtual #165
223: astore        20
225: aload         20
227: ldc           #166
229: invokevirtual #167
232: astore        21
234: aconst_null
235: astore        22
237: aconst_null
238: astore        23
240: aload         20
242: aload         22
244: aload         23
246: invokevirtual #169
249: getstatic     #657
252: astore        24
254: new           #28
257: dup
258: ldc2_w        #277
261: invokestatic  #129
264: bipush        10
266: invokestatic  #159
269: iconst_1
270: invokespecial #160
273: astore        25
275: aload         25
277: invokevirtual #334
280: astore        26
282: aload         26
284: checkcast     #79
287: invokestatic  #80
290: astore        27
292: new           #136
295: dup
296: aload         24
298: aload         27
300: invokespecial #138
303: astore        28
305: getstatic     #772
308: astore        29
310: aconst_null
311: astore        30
313: new           #136
316: dup
317: aload         28
319: aload         29
321: aload         30
323: invokespecial #137
326: astore        31
328: getstatic     #735
331: astore        32
333: getstatic     #125
336: astore        33
338: getstatic     #126
341: astore        34
343: getstatic     #127
346: astore        35
348: getstatic     #128
351: astore        36
353: iconst_2
354: anewarray     #5
357: dup
358: iconst_0
359: aload         36
361: aastore
362: dup
363: iconst_1
364: lconst_1
365: invokestatic  #129
368: aastore
369: astore        37
371: new           #130
374: dup
375: aload         35
377: aload         37
379: invokespecial #131
382: astore        38
384: getstatic     #127
387: astore        39
389: getstatic     #128
392: astore        40
394: iconst_2
395: anewarray     #5
398: dup
399: iconst_0
400: aload         40
402: aastore
403: dup
404: iconst_1
405: lconst_1
406: invokestatic  #129
409: aastore
410: astore        41
412: new           #130
415: dup
416: aload         39
418: aload         41
420: invokespecial #131
423: astore        42
425: aload         38
427: aload         42
429: invokevirtual #132
432: getstatic     #133
435: astore        43
437: getstatic     #134
440: astore        44
442: iconst_2
443: anewarray     #5
446: dup
447: iconst_0
448: aload         44
450: aastore
451: dup
452: iconst_1
453: bipush        10
455: invokestatic  #135
458: aastore
459: astore        45
461: new           #136
464: dup
465: aload         42
467: aload         43
469: aload         45
471: invokespecial #137
474: astore        46
476: new           #136
479: dup
480: aload         34
482: aload         45
484: invokespecial #138
487: astore        47
489: aload         45
491: invokestatic  #80
494: astore        48
496: new           #81
499: dup
500: aload         33
502: aload         48
504: invokespecial #82
507: astore        49
509: new           #136
512: dup
513: aload         32
515: aload         48
517: invokespecial #138
520: astore        50
522: aload         50
524: invokevirtual #556
527: astore        51
529: aload         50
531: invokevirtual #282
534: astore        52
536: aconst_null
537: astore        53
539: aload         52
541: ldc_w         #773
544: aload         53
546: invokevirtual #373
549: getstatic     #507
552: astore        54
554: getstatic     #219
557: astore        55
559: getstatic     #220
562: astore        56
564: aconst_null
565: astore        57
567: new           #8
570: dup
571: aload         57
573: invokespecial #9
576: astore        58
578: aload         58
580: dconst_1
581: ldc2_w        #32
584: invokevirtual #43
587: aload         58
589: dconst_0
590: ldc2_w        #34
593: invokevirtual #43
596: aload         58
598: invokevirtual #59
601: aload         58
603: invokevirtual #25
606: astore        59
608: aload         59
610: checkcast     #79
613: invokestatic  #80
616: astore        60
618: new           #81
621: dup
622: aload         56
624: aload         59
626: checkcast     #79
629: invokespecial #82
632: astore        61
634: new           #81
637: dup
638: aload         55
640: aload         59
642: checkcast     #79
645: invokespecial #82
648: astore        62
650: aload         52
652: aload         54
654: aload         59
656: checkcast     #79
659: invokevirtual #169
662: aload         20
664: aload         29
666: aload         59
668: checkcast     #79
671: invokevirtual #169
674: aload         9
676: aload         11
678: aload         59
680: checkcast     #79
683: invokevirtual #169
686: new           #83
689: dup
690: invokespecial #84
693: ldc           #85
695: invokevirtual #86
698: aload_1
699: invokevirtual #87
702: ldc           #88
704: invokevirtual #86
707: getstatic     #127
710: invokevirtual #87
713: ldc           #85
715: invokevirtual #86
718: invokevirtual #89
721: aload_1
722: getstatic     #127
725: invokevirtual #90
728: invokestatic  #91
731: new           #83
734: dup
735: invokespecial #84
738: ldc           #85
740: invokevirtual #86
743: aload_2
744: invokevirtual #87
747: ldc           #88
749: invokevirtual #86
752: getstatic     #128
755: invokevirtual #87
758: ldc           #85
760: invokevirtual #86
763: invokevirtual #89
766: aload_2
767: getstatic     #128
770: invokevirtual #90
773: invokestatic  #91
776: aload_3
777: invokestatic  #20
780: aload_3
781: invokestatic  #92
784: ldc           #140
786: invokestatic  #23
789: aload_3
790: invokestatic  #93
793: ldc           #140
795: invokestatic  #23
798: new           #83
801: dup
802: invokespecial #84
805: ldc           #85
807: invokevirtual #86
810: aload         5
812: invokevirtual #87
815: ldc           #88
817: invokevirtual #86
820: getstatic     #127
823: invokevirtual #87
826: ldc           #85
828: invokevirtual #86
831: invokevirtual #89
834: aload         5
836: getstatic     #127
839: invokevirtual #90
842: invokestatic  #91
845: new           #83
848: dup
849: invokespecial #84
852: ldc           #85
854: invokevirtual #86
857: aload         6
859: invokevirtual #87
862: ldc           #88
864: invokevirtual #86
867: getstatic     #128
870: invokevirtual #87
873: ldc           #85
875: invokevirtual #86
878: invokevirtual #89
881: aload         6
883: getstatic     #128
886: invokevirtual #90
889: invokestatic  #91
892: aload         7
894: invokestatic  #20
897: aload         7
899: invokestatic  #92
902: ldc           #140
904: invokestatic  #23
907: aload         7
909: invokestatic  #93
912: ldc           #140
914: invokestatic  #23
917: aload         9
919: invokestatic  #20
922: aload         10
924: invokestatic  #171
927: new           #83
930: dup
931: invokespecial #84
934: ldc           #85
936: invokevirtual #86
939: aload         11
941: invokevirtual #87
944: ldc           #88
946: invokevirtual #86
949: getstatic     #509
952: invokevirtual #87
955: ldc           #85
957: invokevirtual #86
960: invokevirtual #89
963: aload         11
965: getstatic     #509
968: invokevirtual #90
971: invokestatic  #91
974: new           #83
977: dup
978: invokespecial #84
981: ldc           #85
983: invokevirtual #86
986: aload         12
988: invokevirtual #87
991: ldc           #88
993: invokevirtual #86
996: getstatic     #127
999: invokevirtual #87
1002: ldc           #85
1004: invokevirtual #86
1007: invokevirtual #89
1010: aload         12
1012: getstatic     #127
1015: invokevirtual #90
1018: invokestatic  #91
1021: new           #83
1024: dup
1025: invokespecial #84
1028: ldc           #85
1030: invokevirtual #86
1033: aload         13
1035: invokevirtual #87
1038: ldc           #88
1040: invokevirtual #86
1043: getstatic     #128
1046: invokevirtual #87
1049: ldc           #85
1051: invokevirtual #86
1054: invokevirtual #89
1057: aload         13
1059: getstatic     #128
1062: invokevirtual #90
1065: invokestatic  #91
1068: aload         14
1070: invokestatic  #20
1073: aload         14
1075: invokestatic  #92
1078: ldc           #140
1080: invokestatic  #23
1083: aload         14
1085: invokestatic  #93
1088: ldc           #140
1090: invokestatic  #23
1093: new           #83
1096: dup
1097: invokespecial #84
1100: ldc           #85
1102: invokevirtual #86
1105: aload         16
1107: invokevirtual #87
1110: ldc           #88
1112: invokevirtual #86
1115: getstatic     #127
1118: invokevirtual #87
1121: ldc           #85
1123: invokevirtual #86
1126: invokevirtual #89
1129: aload         16
1131: getstatic     #127
1134: invokevirtual #90
1137: invokestatic  #91
1140: new           #83
1143: dup
1144: invokespecial #84
1147: ldc           #85
1149: invokevirtual #86
1152: aload         17
1154: invokevirtual #87
1157: ldc           #88
1159: invokevirtual #86
1162: getstatic     #128
1165: invokevirtual #87
1168: ldc           #85
1170: invokevirtual #86
1173: invokevirtual #89
1176: aload         17
1178: getstatic     #128
1181: invokevirtual #90
1184: invokestatic  #91
1187: aload         18
1189: invokestatic  #20
1192: aload         18
1194: invokestatic  #92
1197: ldc           #140
1199: invokestatic  #23
1202: aload         18
1204: invokestatic  #93
1207: ldc           #140
1209: invokestatic  #23
1212: aload         20
1214: invokestatic  #20
1217: aload         21
1219: invokestatic  #171
1222: new           #83
1225: dup
1226: invokespecial #84
1229: ldc           #85
1231: invokevirtual #86
1234: aload         24
1236: invokevirtual #87
1239: ldc           #88
1241: invokevirtual #86
1244: getstatic     #657
1247: invokevirtual #87
1250: ldc           #85
1252: invokevirtual #86
1255: invokevirtual #89
1258: aload         24
1260: getstatic     #657
1263: invokevirtual #90
1266: invokestatic  #91
1269: aload         26
1271: invokestatic  #20
1274: aload         27
1276: invokestatic  #20
1279: aload         27
1281: invokestatic  #92
1284: ldc           #74
1286: invokestatic  #23
1289: aload         27
1291: invokestatic  #93
1294: ldc           #74
1296: invokestatic  #23
1299: new           #83
1302: dup
1303: invokespecial #84
1306: ldc           #85
1308: invokevirtual #86
1311: aload         29
1313: invokevirtual #87
1316: ldc           #88
1318: invokevirtual #86
1321: getstatic     #772
1324: invokevirtual #87
1327: ldc           #85
1329: invokevirtual #86
1332: invokevirtual #89
1335: aload         29
1337: getstatic     #772
1340: invokevirtual #90
1343: invokestatic  #91
1346: new           #83
1349: dup
1350: invokespecial #84
1353: ldc           #85
1355: invokevirtual #86
1358: aload         32
1360: invokevirtual #87
1363: ldc           #88
1365: invokevirtual #86
1368: getstatic     #735
1371: invokevirtual #87
1374: ldc           #85
1376: invokevirtual #86
1379: invokevirtual #89
1382: aload         32
1384: getstatic     #735
1387: invokevirtual #90
1390: invokestatic  #91
1393: new           #83
1396: dup
1397: invokespecial #84
1400: ldc           #85
1402: invokevirtual #86
1405: aload         33
1407: invokevirtual #87
1410: ldc           #88
1412: invokevirtual #86
1415: getstatic     #125
1418: invokevirtual #87
1421: ldc           #85
1423: invokevirtual #86
1426: invokevirtual #89
1429: aload         33
1431: getstatic     #125
1434: invokevirtual #90
1437: invokestatic  #91
1440: new           #83
1443: dup
1444: invokespecial #84
1447: ldc           #85
1449: invokevirtual #86
1452: aload         34
1454: invokevirtual #87
1457: ldc           #88
1459: invokevirtual #86
1462: getstatic     #126
1465: invokevirtual #87
1468: ldc           #85
1470: invokevirtual #86
1473: invokevirtual #89
1476: aload         34
1478: getstatic     #126
1481: invokevirtual #90
1484: invokestatic  #91
1487: new           #83
1490: dup
1491: invokespecial #84
1494: ldc           #85
1496: invokevirtual #86
1499: aload         35
1501: invokevirtual #87
1504: ldc           #88
1506: invokevirtual #86
1509: getstatic     #127
1512: invokevirtual #87
1515: ldc           #85
1517: invokevirtual #86
1520: invokevirtual #89
1523: aload         35
1525: getstatic     #127
1528: invokevirtual #90
1531: invokestatic  #91
1534: new           #83
1537: dup
1538: invokespecial #84
1541: ldc           #85
1543: invokevirtual #86
1546: aload         36
1548: invokevirtual #87
1551: ldc           #88
1553: invokevirtual #86
1556: getstatic     #128
1559: invokevirtual #87
1562: ldc           #85
1564: invokevirtual #86
1567: invokevirtual #89
1570: aload         36
1572: getstatic     #128
1575: invokevirtual #90
1578: invokestatic  #91
1581: aload         37
1583: invokestatic  #20
1586: aload         37
1588: invokestatic  #92
1591: ldc           #140
1593: invokestatic  #23
1596: aload         37
1598: invokestatic  #93
1601: ldc           #140
1603: invokestatic  #23
1606: new           #83
1609: dup
1610: invokespecial #84
1613: ldc           #85
1615: invokevirtual #86
1618: aload         39
1620: invokevirtual #87
1623: ldc           #88
1625: invokevirtual #86
1628: getstatic     #127
1631: invokevirtual #87
1634: ldc           #85
1636: invokevirtual #86
1639: invokevirtual #89
1642: aload         39
1644: getstatic     #127
1647: invokevirtual #90
1650: invokestatic  #91
1653: new           #83
1656: dup
1657: invokespecial #84
1660: ldc           #85
1662: invokevirtual #86
1665: aload         40
1667: invokevirtual #87
1670: ldc           #88
1672: invokevirtual #86
1675: getstatic     #128
1678: invokevirtual #87
1681: ldc           #85
1683: invokevirtual #86
1686: invokevirtual #89
1689: aload         40
1691: getstatic     #128
1694: invokevirtual #90
1697: invokestatic  #91
1700: aload         41
1702: invokestatic  #20
1705: aload         41
1707: invokestatic  #92
1710: ldc           #140
1712: invokestatic  #23
1715: aload         41
1717: invokestatic  #93
1720: ldc           #140
1722: invokestatic  #23
1725: new           #83
1728: dup
1729: invokespecial #84
1732: ldc           #85
1734: invokevirtual #86
1737: aload         43
1739: invokevirtual #87
1742: ldc           #88
1744: invokevirtual #86
1747: getstatic     #133
1750: invokevirtual #87
1753: ldc           #85
1755: invokevirtual #86
1758: invokevirtual #89
1761: aload         43
1763: getstatic     #133
1766: invokevirtual #90
1769: invokestatic  #91
1772: new           #83
1775: dup
1776: invokespecial #84
1779: ldc           #85
1781: invokevirtual #86
1784: aload         44
1786: invokevirtual #87
1789: ldc           #88
1791: invokevirtual #86
1794: getstatic     #134
1797: invokevirtual #87
1800: ldc           #85
1802: invokevirtual #86
1805: invokevirtual #89
1808: aload         44
1810: getstatic     #134
1813: invokevirtual #90
1816: invokestatic  #91
1819: aload         45
1821: invokestatic  #20
1824: aload         45
1826: invokestatic  #92
1829: ldc           #141
1831: invokestatic  #23
1834: aload         45
1836: invokestatic  #93
1839: ldc           #141
1841: invokestatic  #23
1844: aload         48
1846: invokestatic  #20
1849: aload         48
1851: invokestatic  #92
1854: ldc           #141
1856: invokestatic  #23
1859: aload         48
1861: invokestatic  #93
1864: ldc           #141
1866: invokestatic  #23
1869: aload         51
1871: invokestatic  #20
1874: aload         52
1876: invokestatic  #20
1879: new           #83
1882: dup
1883: invokespecial #84
1886: ldc           #85
1888: invokevirtual #86
1891: aload         54
1893: invokevirtual #87
1896: ldc           #88
1898: invokevirtual #86
1901: getstatic     #507
1904: invokevirtual #87
1907: ldc           #85
1909: invokevirtual #86
1912: invokevirtual #89
1915: aload         54
1917: getstatic     #507
1920: invokevirtual #90
1923: invokestatic  #91
1926: new           #83
1929: dup
1930: invokespecial #84
1933: ldc           #85
1935: invokevirtual #86
1938: aload         55
1940: invokevirtual #87
1943: ldc           #88
1945: invokevirtual #86
1948: getstatic     #219
1951: invokevirtual #87
1954: ldc           #85
1956: invokevirtual #86
1959: invokevirtual #89
1962: aload         55
1964: getstatic     #219
1967: invokevirtual #90
1970: invokestatic  #91
1973: new           #83
1976: dup
1977: invokespecial #84
1980: ldc           #85
1982: invokevirtual #86
1985: aload         56
1987: invokevirtual #87
1990: ldc           #88
1992: invokevirtual #86
1995: getstatic     #220
1998: invokevirtual #87
2001: ldc           #85
2003: invokevirtual #86
2006: invokevirtual #89
2009: aload         56
2011: getstatic     #220
2014: invokevirtual #90
2017: invokestatic  #91
2020: aload         59
2022: invokestatic  #20
2025: aload         60
2027: invokestatic  #20
2030: aload         60
2032: invokestatic  #92
2035: ldc           #74
2037: invokestatic  #23
2040: aload         60
2042: invokestatic  #93
2045: ldc           #74
2047: invokestatic  #23
2050: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test405
Start line: 13757
End line: 13798
Method source code: 
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer9 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter10 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer9);
        harmonicFitter10.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter10.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter10.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint24 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double25 = weightedObservedPoint24.getX();
        double double26 = weightedObservedPoint24.getY();
        double double27 = weightedObservedPoint24.getX();
        double double28 = weightedObservedPoint24.getY();
        double double29 = weightedObservedPoint24.getX();
        double double30 = weightedObservedPoint24.getX();
        harmonicFitter10.addObservedPoint(weightedObservedPoint24);
        double double32 = weightedObservedPoint24.getWeight();
        double double33 = weightedObservedPoint24.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint24);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(0.0d, (double) 10L);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray39 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #774
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aconst_null
57: astore_3
58: new           #8
61: dup
62: aload_3
63: invokespecial #9
66: astore        4
68: aload         4
70: dconst_1
71: ldc2_w        #32
74: invokevirtual #43
77: aload         4
79: dconst_0
80: ldc2_w        #34
83: invokevirtual #43
86: aload         4
88: dconst_0
89: ldc2_w        #12
92: ldc2_w        #10
95: invokevirtual #54
98: new           #145
101: dup
102: ldc2_w        #14
105: ldc2_w        #12
108: ldc2_w        #12
111: invokespecial #146
114: astore        5
116: aload         5
118: invokevirtual #147
121: dstore        6
123: aload         5
125: invokevirtual #149
128: dstore        8
130: aload         5
132: invokevirtual #147
135: dstore        10
137: aload         5
139: invokevirtual #149
142: dstore        12
144: aload         5
146: invokevirtual #147
149: dstore        14
151: aload         5
153: invokevirtual #147
156: dstore        16
158: aload         4
160: aload         5
162: invokevirtual #123
165: aload         5
167: invokevirtual #148
170: dstore        18
172: aload         5
174: invokevirtual #147
177: dstore        20
179: aload_2
180: aload         5
182: invokevirtual #123
185: aload_2
186: invokevirtual #59
189: aload_2
190: dconst_0
191: ldc2_w        #32
194: invokevirtual #43
197: aload_2
198: invokevirtual #26
201: astore        22
203: ldc           #64
205: invokestatic  #18
208: goto          213
211: astore        22
213: new           #83
216: dup
217: invokespecial #84
220: ldc           #85
222: invokevirtual #86
225: dload         6
227: invokevirtual #150
230: ldc           #88
232: invokevirtual #86
235: ldc2_w        #12
238: invokevirtual #150
241: ldc           #85
243: invokevirtual #86
246: invokevirtual #89
249: dload         6
251: ldc2_w        #12
254: dcmpl
255: ifne          262
258: iconst_1
259: goto          263
262: iconst_0
263: invokestatic  #91
266: new           #83
269: dup
270: invokespecial #84
273: ldc           #85
275: invokevirtual #86
278: dload         8
280: invokevirtual #150
283: ldc           #88
285: invokevirtual #86
288: ldc2_w        #12
291: invokevirtual #150
294: ldc           #85
296: invokevirtual #86
299: invokevirtual #89
302: dload         8
304: ldc2_w        #12
307: dcmpl
308: ifne          315
311: iconst_1
312: goto          316
315: iconst_0
316: invokestatic  #91
319: new           #83
322: dup
323: invokespecial #84
326: ldc           #85
328: invokevirtual #86
331: dload         10
333: invokevirtual #150
336: ldc           #88
338: invokevirtual #86
341: ldc2_w        #12
344: invokevirtual #150
347: ldc           #85
349: invokevirtual #86
352: invokevirtual #89
355: dload         10
357: ldc2_w        #12
360: dcmpl
361: ifne          368
364: iconst_1
365: goto          369
368: iconst_0
369: invokestatic  #91
372: new           #83
375: dup
376: invokespecial #84
379: ldc           #85
381: invokevirtual #86
384: dload         12
386: invokevirtual #150
389: ldc           #88
391: invokevirtual #86
394: ldc2_w        #12
397: invokevirtual #150
400: ldc           #85
402: invokevirtual #86
405: invokevirtual #89
408: dload         12
410: ldc2_w        #12
413: dcmpl
414: ifne          421
417: iconst_1
418: goto          422
421: iconst_0
422: invokestatic  #91
425: new           #83
428: dup
429: invokespecial #84
432: ldc           #85
434: invokevirtual #86
437: dload         14
439: invokevirtual #150
442: ldc           #88
444: invokevirtual #86
447: ldc2_w        #12
450: invokevirtual #150
453: ldc           #85
455: invokevirtual #86
458: invokevirtual #89
461: dload         14
463: ldc2_w        #12
466: dcmpl
467: ifne          474
470: iconst_1
471: goto          475
474: iconst_0
475: invokestatic  #91
478: new           #83
481: dup
482: invokespecial #84
485: ldc           #85
487: invokevirtual #86
490: dload         16
492: invokevirtual #150
495: ldc           #88
497: invokevirtual #86
500: ldc2_w        #12
503: invokevirtual #150
506: ldc           #85
508: invokevirtual #86
511: invokevirtual #89
514: dload         16
516: ldc2_w        #12
519: dcmpl
520: ifne          527
523: iconst_1
524: goto          528
527: iconst_0
528: invokestatic  #91
531: new           #83
534: dup
535: invokespecial #84
538: ldc           #85
540: invokevirtual #86
543: dload         18
545: invokevirtual #150
548: ldc           #88
550: invokevirtual #86
553: ldc2_w        #14
556: invokevirtual #150
559: ldc           #85
561: invokevirtual #86
564: invokevirtual #89
567: dload         18
569: ldc2_w        #14
572: dcmpl
573: ifne          580
576: iconst_1
577: goto          581
580: iconst_0
581: invokestatic  #91
584: new           #83
587: dup
588: invokespecial #84
591: ldc           #85
593: invokevirtual #86
596: dload         20
598: invokevirtual #150
601: ldc           #88
603: invokevirtual #86
606: ldc2_w        #12
609: invokevirtual #150
612: ldc           #85
614: invokevirtual #86
617: invokevirtual #89
620: dload         20
622: ldc2_w        #12
625: dcmpl
626: ifne          633
629: iconst_1
630: goto          634
633: iconst_0
634: invokestatic  #91
637: return
Exception table:
from    to  target type
197   208   211   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test406
Start line: 13801
End line: 13871
Method source code: 
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats3 = org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray7 = new java.lang.Object[] { localizedFormats5, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException8 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats4, objArray7);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats10 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats11 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray14 = new java.lang.Object[] { localizedFormats10, localizedFormats11, localizedFormats12, localizedFormats13 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException15 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException8, (org.apache.commons.math3.exception.util.Localizable) localizedFormats9, objArray14);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext16 = mathIllegalArgumentException8.getContext();
        java.lang.Throwable[] throwableArray17 = mathIllegalArgumentException8.getSuppressed();
        org.apache.commons.math3.exception.ZeroException zeroException18 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats3, (java.lang.Object[]) throwableArray17);
        org.apache.commons.math3.exception.ZeroException zeroException19 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats2, (java.lang.Object[]) throwableArray17);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException20 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) throwableArray17);
        org.apache.commons.math3.exception.ZeroException zeroException21 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) throwableArray17);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_SUBTRACTION_COMPATIBLE_MATRICES;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.UNSUPPORTED_EXPANSION_MODE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException27 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats28 = org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED;
        java.lang.Number number30 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException32 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number30, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats33 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException35 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException32, (org.apache.commons.math3.exception.util.Localizable) localizedFormats33, objArray34);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException36 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException27, (org.apache.commons.math3.exception.util.Localizable) localizedFormats28, objArray34);
        org.apache.commons.math3.exception.ZeroException zeroException37 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, objArray34);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException38 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats22, objArray34);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer39 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter40 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer39);
        harmonicFitter40.addObservedPoint((double) 1.0f, (double) (short) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray44 = harmonicFitter40.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException45 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) zeroException21, (org.apache.commons.math3.exception.util.Localizable) localizedFormats22, (java.lang.Object[]) weightedObservedPointArray44);
        java.lang.Number number46 = zeroException21.getArgument();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_PARSE_AS_TYPE));
        org.junit.Assert.assertTrue("'" + localizedFormats3 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N + "'", localizedFormats3.equals(org.apache.commons.math3.exception.util.LocalizedFormats.PERMUTATION_EXCEEDS_N));
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats10 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats10.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats11 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats11.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertNotNull(exceptionContext16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_SUBTRACTION_COMPATIBLE_MATRICES + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_SUBTRACTION_COMPATIBLE_MATRICES));
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNSUPPORTED_EXPANSION_MODE + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNSUPPORTED_EXPANSION_MODE));
        org.junit.Assert.assertTrue("'" + localizedFormats28 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED + "'", localizedFormats28.equals(org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED));
        org.junit.Assert.assertTrue("'" + localizedFormats33 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats33.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(weightedObservedPointArray44);
        org.junit.Assert.assertEquals("'" + number46 + "' != '" + 0 + "'", number46, 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #775
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #668
28: astore_1
29: getstatic     #640
32: astore_2
33: getstatic     #591
36: astore_3
37: getstatic     #592
40: astore        4
42: getstatic     #127
45: astore        5
47: getstatic     #128
50: astore        6
52: iconst_2
53: anewarray     #5
56: dup
57: iconst_0
58: aload         6
60: aastore
61: dup
62: iconst_1
63: lconst_1
64: invokestatic  #129
67: aastore
68: astore        7
70: new           #130
73: dup
74: aload         5
76: aload         7
78: invokespecial #131
81: astore        8
83: getstatic     #328
86: astore        9
88: getstatic     #329
91: astore        10
93: getstatic     #330
96: astore        11
98: getstatic     #331
101: astore        12
103: getstatic     #332
106: astore        13
108: iconst_4
109: anewarray     #5
112: dup
113: iconst_0
114: aload         10
116: aastore
117: dup
118: iconst_1
119: aload         11
121: aastore
122: dup
123: iconst_2
124: aload         12
126: aastore
127: dup
128: iconst_3
129: aload         13
131: aastore
132: astore        14
134: new           #136
137: dup
138: aload         8
140: aload         9
142: aload         14
144: invokespecial #137
147: astore        15
149: aload         8
151: invokevirtual #165
154: astore        16
156: aload         8
158: invokevirtual #234
161: astore        17
163: new           #81
166: dup
167: aload         4
169: aload         17
171: checkcast     #79
174: invokespecial #82
177: astore        18
179: new           #81
182: dup
183: aload_3
184: aload         17
186: checkcast     #79
189: invokespecial #82
192: astore        19
194: new           #130
197: dup
198: aload_2
199: aload         17
201: checkcast     #79
204: invokespecial #131
207: astore        20
209: new           #81
212: dup
213: aload_1
214: aload         17
216: checkcast     #79
219: invokespecial #82
222: astore        21
224: getstatic     #275
227: astore        22
229: getstatic     #276
232: astore        23
234: new           #28
237: dup
238: ldc2_w        #277
241: invokestatic  #129
244: bipush        10
246: invokestatic  #159
249: iconst_1
250: invokespecial #160
253: astore        24
255: getstatic     #279
258: astore        25
260: aconst_null
261: astore        26
263: new           #28
266: dup
267: bipush        100
269: invokestatic  #159
272: aload         26
274: iconst_0
275: invokespecial #160
278: astore        27
280: getstatic     #161
283: astore        28
285: iconst_0
286: anewarray     #5
289: astore        29
291: new           #136
294: dup
295: aload         27
297: aload         28
299: aload         29
301: invokespecial #137
304: astore        30
306: new           #136
309: dup
310: aload         24
312: aload         25
314: aload         29
316: invokespecial #137
319: astore        31
321: new           #81
324: dup
325: aload         23
327: aload         29
329: invokespecial #82
332: astore        32
334: new           #130
337: dup
338: aload         22
340: aload         29
342: invokespecial #131
345: astore        33
347: aconst_null
348: astore        34
350: new           #8
353: dup
354: aload         34
356: invokespecial #9
359: astore        35
361: aload         35
363: dconst_1
364: ldc2_w        #32
367: invokevirtual #43
370: aload         35
372: invokevirtual #25
375: astore        36
377: new           #136
380: dup
381: aload         21
383: aload         22
385: aload         36
387: checkcast     #79
390: invokespecial #137
393: astore        37
395: aload         21
397: invokevirtual #243
400: astore        38
402: new           #83
405: dup
406: invokespecial #84
409: ldc           #85
411: invokevirtual #86
414: aload_1
415: invokevirtual #87
418: ldc           #88
420: invokevirtual #86
423: getstatic     #668
426: invokevirtual #87
429: ldc           #85
431: invokevirtual #86
434: invokevirtual #89
437: aload_1
438: getstatic     #668
441: invokevirtual #90
444: invokestatic  #91
447: new           #83
450: dup
451: invokespecial #84
454: ldc           #85
456: invokevirtual #86
459: aload_2
460: invokevirtual #87
463: ldc           #88
465: invokevirtual #86
468: getstatic     #640
471: invokevirtual #87
474: ldc           #85
476: invokevirtual #86
479: invokevirtual #89
482: aload_2
483: getstatic     #640
486: invokevirtual #90
489: invokestatic  #91
492: new           #83
495: dup
496: invokespecial #84
499: ldc           #85
501: invokevirtual #86
504: aload_3
505: invokevirtual #87
508: ldc           #88
510: invokevirtual #86
513: getstatic     #591
516: invokevirtual #87
519: ldc           #85
521: invokevirtual #86
524: invokevirtual #89
527: aload_3
528: getstatic     #591
531: invokevirtual #90
534: invokestatic  #91
537: new           #83
540: dup
541: invokespecial #84
544: ldc           #85
546: invokevirtual #86
549: aload         4
551: invokevirtual #87
554: ldc           #88
556: invokevirtual #86
559: getstatic     #592
562: invokevirtual #87
565: ldc           #85
567: invokevirtual #86
570: invokevirtual #89
573: aload         4
575: getstatic     #592
578: invokevirtual #90
581: invokestatic  #91
584: new           #83
587: dup
588: invokespecial #84
591: ldc           #85
593: invokevirtual #86
596: aload         5
598: invokevirtual #87
601: ldc           #88
603: invokevirtual #86
606: getstatic     #127
609: invokevirtual #87
612: ldc           #85
614: invokevirtual #86
617: invokevirtual #89
620: aload         5
622: getstatic     #127
625: invokevirtual #90
628: invokestatic  #91
631: new           #83
634: dup
635: invokespecial #84
638: ldc           #85
640: invokevirtual #86
643: aload         6
645: invokevirtual #87
648: ldc           #88
650: invokevirtual #86
653: getstatic     #128
656: invokevirtual #87
659: ldc           #85
661: invokevirtual #86
664: invokevirtual #89
667: aload         6
669: getstatic     #128
672: invokevirtual #90
675: invokestatic  #91
678: aload         7
680: invokestatic  #20
683: aload         7
685: invokestatic  #92
688: ldc           #140
690: invokestatic  #23
693: aload         7
695: invokestatic  #93
698: ldc           #140
700: invokestatic  #23
703: new           #83
706: dup
707: invokespecial #84
710: ldc           #85
712: invokevirtual #86
715: aload         9
717: invokevirtual #87
720: ldc           #88
722: invokevirtual #86
725: getstatic     #328
728: invokevirtual #87
731: ldc           #85
733: invokevirtual #86
736: invokevirtual #89
739: aload         9
741: getstatic     #328
744: invokevirtual #90
747: invokestatic  #91
750: new           #83
753: dup
754: invokespecial #84
757: ldc           #85
759: invokevirtual #86
762: aload         10
764: invokevirtual #87
767: ldc           #88
769: invokevirtual #86
772: getstatic     #329
775: invokevirtual #87
778: ldc           #85
780: invokevirtual #86
783: invokevirtual #89
786: aload         10
788: getstatic     #329
791: invokevirtual #90
794: invokestatic  #91
797: new           #83
800: dup
801: invokespecial #84
804: ldc           #85
806: invokevirtual #86
809: aload         11
811: invokevirtual #87
814: ldc           #88
816: invokevirtual #86
819: getstatic     #330
822: invokevirtual #87
825: ldc           #85
827: invokevirtual #86
830: invokevirtual #89
833: aload         11
835: getstatic     #330
838: invokevirtual #90
841: invokestatic  #91
844: new           #83
847: dup
848: invokespecial #84
851: ldc           #85
853: invokevirtual #86
856: aload         12
858: invokevirtual #87
861: ldc           #88
863: invokevirtual #86
866: getstatic     #331
869: invokevirtual #87
872: ldc           #85
874: invokevirtual #86
877: invokevirtual #89
880: aload         12
882: getstatic     #331
885: invokevirtual #90
888: invokestatic  #91
891: new           #83
894: dup
895: invokespecial #84
898: ldc           #85
900: invokevirtual #86
903: aload         13
905: invokevirtual #87
908: ldc           #88
910: invokevirtual #86
913: getstatic     #332
916: invokevirtual #87
919: ldc           #85
921: invokevirtual #86
924: invokevirtual #89
927: aload         13
929: getstatic     #332
932: invokevirtual #90
935: invokestatic  #91
938: aload         14
940: invokestatic  #20
943: aload         14
945: invokestatic  #92
948: ldc_w         #336
951: invokestatic  #23
954: aload         14
956: invokestatic  #93
959: ldc_w         #336
962: invokestatic  #23
965: aload         16
967: invokestatic  #20
970: aload         17
972: invokestatic  #20
975: new           #83
978: dup
979: invokespecial #84
982: ldc           #85
984: invokevirtual #86
987: aload         22
989: invokevirtual #87
992: ldc           #88
994: invokevirtual #86
997: getstatic     #275
1000: invokevirtual #87
1003: ldc           #85
1005: invokevirtual #86
1008: invokevirtual #89
1011: aload         22
1013: getstatic     #275
1016: invokevirtual #90
1019: invokestatic  #91
1022: new           #83
1025: dup
1026: invokespecial #84
1029: ldc           #85
1031: invokevirtual #86
1034: aload         23
1036: invokevirtual #87
1039: ldc           #88
1041: invokevirtual #86
1044: getstatic     #276
1047: invokevirtual #87
1050: ldc           #85
1052: invokevirtual #86
1055: invokevirtual #89
1058: aload         23
1060: getstatic     #276
1063: invokevirtual #90
1066: invokestatic  #91
1069: new           #83
1072: dup
1073: invokespecial #84
1076: ldc           #85
1078: invokevirtual #86
1081: aload         25
1083: invokevirtual #87
1086: ldc           #88
1088: invokevirtual #86
1091: getstatic     #279
1094: invokevirtual #87
1097: ldc           #85
1099: invokevirtual #86
1102: invokevirtual #89
1105: aload         25
1107: getstatic     #279
1110: invokevirtual #90
1113: invokestatic  #91
1116: new           #83
1119: dup
1120: invokespecial #84
1123: ldc           #85
1125: invokevirtual #86
1128: aload         28
1130: invokevirtual #87
1133: ldc           #88
1135: invokevirtual #86
1138: getstatic     #161
1141: invokevirtual #87
1144: ldc           #85
1146: invokevirtual #86
1149: invokevirtual #89
1152: aload         28
1154: getstatic     #161
1157: invokevirtual #90
1160: invokestatic  #91
1163: aload         29
1165: invokestatic  #20
1168: aload         29
1170: invokestatic  #92
1173: ldc           #74
1175: invokestatic  #23
1178: aload         29
1180: invokestatic  #93
1183: ldc           #74
1185: invokestatic  #23
1188: aload         36
1190: invokestatic  #20
1193: new           #83
1196: dup
1197: invokespecial #84
1200: ldc           #85
1202: invokevirtual #86
1205: aload         38
1207: invokevirtual #87
1210: ldc           #88
1212: invokevirtual #86
1215: iconst_0
1216: invokevirtual #244
1219: ldc           #85
1221: invokevirtual #86
1224: invokevirtual #89
1227: aload         38
1229: iconst_0
1230: invokestatic  #135
1233: invokestatic  #245
1236: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test407
Start line: 13874
End line: 13894
Method source code: 
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.SINGULAR_OPERATOR;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer2 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter3 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer2);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter3.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException5 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) weightedObservedPointArray4);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException6 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray4);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser7 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SINGULAR_OPERATOR + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SINGULAR_OPERATOR));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #776
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #558
28: astore_1
29: getstatic     #156
32: astore_2
33: aconst_null
34: astore_3
35: new           #8
38: dup
39: aload_3
40: invokespecial #9
43: astore        4
45: aload         4
47: invokevirtual #25
50: astore        5
52: new           #81
55: dup
56: aload_2
57: aload         5
59: checkcast     #79
62: invokespecial #82
65: astore        6
67: new           #130
70: dup
71: aload_1
72: aload         5
74: checkcast     #79
77: invokespecial #131
80: astore        7
82: new           #69
85: dup
86: aload         5
88: invokespecial #70
91: astore        8
93: ldc           #27
95: invokestatic  #18
98: goto          103
101: astore        8
103: new           #83
106: dup
107: invokespecial #84
110: ldc           #85
112: invokevirtual #86
115: aload_1
116: invokevirtual #87
119: ldc           #88
121: invokevirtual #86
124: getstatic     #558
127: invokevirtual #87
130: ldc           #85
132: invokevirtual #86
135: invokevirtual #89
138: aload_1
139: getstatic     #558
142: invokevirtual #90
145: invokestatic  #91
148: new           #83
151: dup
152: invokespecial #84
155: ldc           #85
157: invokevirtual #86
160: aload_2
161: invokevirtual #87
164: ldc           #88
166: invokevirtual #86
169: getstatic     #156
172: invokevirtual #87
175: ldc           #85
177: invokevirtual #86
180: invokevirtual #89
183: aload_2
184: getstatic     #156
187: invokevirtual #90
190: invokestatic  #91
193: aload         5
195: invokestatic  #20
198: return
Exception table:
from    to  target type
82    98   101   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test408
Start line: 13897
End line: 13910
Method source code: 
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((-1.0d), (double) 10, (double) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) (short) 1, (double) '4');
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #777
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: aload_2
62: ldc2_w        #10
65: ldc2_w        #32
68: ldc2_w        #32
71: invokevirtual #54
74: aload_2
75: invokevirtual #59
78: aload_2
79: dconst_1
80: ldc2_w        #12
83: invokevirtual #43
86: aload_3
87: invokestatic  #20
90: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test409
Start line: 13913
End line: 13937
Method source code: 
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.addObservedPoint((double) 0, (double) (short) 100, (double) (short) 0);
        harmonicFitter1.addObservedPoint((double) 10.0f, (double) (-1), (double) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray22 = harmonicFitter1.getObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray22);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #778
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: dconst_0
105: ldc2_w        #34
108: dconst_0
109: invokevirtual #54
112: aload_2
113: ldc2_w        #32
116: ldc2_w        #10
119: ldc2_w        #32
122: invokevirtual #54
125: aload_2
126: invokevirtual #25
129: astore        14
131: aload_3
132: invokestatic  #20
135: aload         4
137: invokestatic  #20
140: new           #83
143: dup
144: invokespecial #84
147: ldc           #85
149: invokevirtual #86
152: dload         6
154: invokevirtual #150
157: ldc           #88
159: invokevirtual #86
162: ldc2_w        #12
165: invokevirtual #150
168: ldc           #85
170: invokevirtual #86
173: invokevirtual #89
176: dload         6
178: ldc2_w        #12
181: dcmpl
182: ifne          189
185: iconst_1
186: goto          190
189: iconst_0
190: invokestatic  #91
193: new           #83
196: dup
197: invokespecial #84
200: ldc           #85
202: invokevirtual #86
205: dload         8
207: invokevirtual #150
210: ldc           #88
212: invokevirtual #86
215: ldc2_w        #14
218: invokevirtual #150
221: ldc           #85
223: invokevirtual #86
226: invokevirtual #89
229: dload         8
231: ldc2_w        #14
234: dcmpl
235: ifne          242
238: iconst_1
239: goto          243
242: iconst_0
243: invokestatic  #91
246: new           #83
249: dup
250: invokespecial #84
253: ldc           #85
255: invokevirtual #86
258: dload         10
260: invokevirtual #150
263: ldc           #88
265: invokevirtual #86
268: ldc2_w        #14
271: invokevirtual #150
274: ldc           #85
276: invokevirtual #86
279: invokevirtual #89
282: dload         10
284: ldc2_w        #14
287: dcmpl
288: ifne          295
291: iconst_1
292: goto          296
295: iconst_0
296: invokestatic  #91
299: new           #83
302: dup
303: invokespecial #84
306: ldc           #85
308: invokevirtual #86
311: dload         12
313: invokevirtual #150
316: ldc           #88
318: invokevirtual #86
321: ldc2_w        #12
324: invokevirtual #150
327: ldc           #85
329: invokevirtual #86
332: invokevirtual #89
335: dload         12
337: ldc2_w        #12
340: dcmpl
341: ifne          348
344: iconst_1
345: goto          349
348: iconst_0
349: invokestatic  #91
352: aload         14
354: invokestatic  #20
357: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test410
Start line: 13940
End line: 13991
Method source code: 
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray4 = new java.lang.Object[] { localizedFormats2, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException5 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, objArray4);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray9 = new java.lang.Object[] { localizedFormats7, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats6, objArray9);
        mathIllegalArgumentException5.addSuppressed((java.lang.Throwable) mathIllegalArgumentException10);
        java.lang.Throwable[] throwableArray12 = mathIllegalArgumentException5.getSuppressed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext13 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException5);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE;
        exceptionContext13.setValue("cannot compute beta density at 0 when alpha = {0,number}", (java.lang.Object) localizedFormats15);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats18 = org.apache.commons.math3.exception.util.LocalizedFormats.DIGEST_NOT_INITIALIZED;
        exceptionContext13.setValue("imaginary format", (java.lang.Object) localizedFormats18);
        java.lang.Throwable throwable20 = exceptionContext13.getThrowable();
        java.lang.Object obj22 = exceptionContext13.getValue("equal vertices {0} and {1} in simplex configuration");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats24 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer25 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter26 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer25);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter26.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException28 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats24, (java.lang.Object[]) weightedObservedPointArray27);
        java.lang.Throwable[] throwableArray29 = zeroException28.getSuppressed();
        exceptionContext13.setValue("degrees of freedom ({0})", (java.lang.Object) throwableArray29);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) throwableArray29);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE));
        org.junit.Assert.assertTrue("'" + localizedFormats18 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.DIGEST_NOT_INITIALIZED + "'", localizedFormats18.equals(org.apache.commons.math3.exception.util.LocalizedFormats.DIGEST_NOT_INITIALIZED));
        org.junit.Assert.assertNotNull(throwable20);
        org.junit.Assert.assertEquals(throwable20.getLocalizedMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertEquals(throwable20.getMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertEquals(throwable20.toString(), "org.apache.commons.math3.exception.MathIllegalArgumentException: overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + localizedFormats24 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats24.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #779
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #638
28: astore_1
29: getstatic     #127
32: astore_2
33: getstatic     #128
36: astore_3
37: iconst_2
38: anewarray     #5
41: dup
42: iconst_0
43: aload_3
44: aastore
45: dup
46: iconst_1
47: lconst_1
48: invokestatic  #129
51: aastore
52: astore        4
54: new           #130
57: dup
58: aload_2
59: aload         4
61: invokespecial #131
64: astore        5
66: getstatic     #127
69: astore        6
71: getstatic     #128
74: astore        7
76: iconst_2
77: anewarray     #5
80: dup
81: iconst_0
82: aload         7
84: aastore
85: dup
86: iconst_1
87: lconst_1
88: invokestatic  #129
91: aastore
92: astore        8
94: new           #130
97: dup
98: aload         6
100: aload         8
102: invokespecial #131
105: astore        9
107: aload         5
109: aload         9
111: invokevirtual #132
114: aload         5
116: invokevirtual #234
119: astore        10
121: new           #163
124: dup
125: aload         5
127: invokespecial #164
130: astore        11
132: getstatic     #378
135: astore        12
137: aload         11
139: ldc_w         #379
142: aload         12
144: invokevirtual #373
147: getstatic     #402
150: astore        13
152: aload         11
154: ldc_w         #403
157: aload         13
159: invokevirtual #373
162: aload         11
164: invokevirtual #288
167: astore        14
169: aload         11
171: ldc_w         #404
174: invokevirtual #167
177: astore        15
179: getstatic     #156
182: astore        16
184: aconst_null
185: astore        17
187: new           #8
190: dup
191: aload         17
193: invokespecial #9
196: astore        18
198: aload         18
200: invokevirtual #25
203: astore        19
205: new           #81
208: dup
209: aload         16
211: aload         19
213: checkcast     #79
216: invokespecial #82
219: astore        20
221: aload         20
223: invokevirtual #405
226: astore        21
228: aload         11
230: ldc_w         #406
233: aload         21
235: invokevirtual #373
238: new           #136
241: dup
242: aload_1
243: aload         21
245: checkcast     #79
248: invokespecial #138
251: astore        22
253: new           #83
256: dup
257: invokespecial #84
260: ldc           #85
262: invokevirtual #86
265: aload_1
266: invokevirtual #87
269: ldc           #88
271: invokevirtual #86
274: getstatic     #638
277: invokevirtual #87
280: ldc           #85
282: invokevirtual #86
285: invokevirtual #89
288: aload_1
289: getstatic     #638
292: invokevirtual #90
295: invokestatic  #91
298: new           #83
301: dup
302: invokespecial #84
305: ldc           #85
307: invokevirtual #86
310: aload_2
311: invokevirtual #87
314: ldc           #88
316: invokevirtual #86
319: getstatic     #127
322: invokevirtual #87
325: ldc           #85
327: invokevirtual #86
330: invokevirtual #89
333: aload_2
334: getstatic     #127
337: invokevirtual #90
340: invokestatic  #91
343: new           #83
346: dup
347: invokespecial #84
350: ldc           #85
352: invokevirtual #86
355: aload_3
356: invokevirtual #87
359: ldc           #88
361: invokevirtual #86
364: getstatic     #128
367: invokevirtual #87
370: ldc           #85
372: invokevirtual #86
375: invokevirtual #89
378: aload_3
379: getstatic     #128
382: invokevirtual #90
385: invokestatic  #91
388: aload         4
390: invokestatic  #20
393: aload         4
395: invokestatic  #92
398: ldc           #140
400: invokestatic  #23
403: aload         4
405: invokestatic  #93
408: ldc           #140
410: invokestatic  #23
413: new           #83
416: dup
417: invokespecial #84
420: ldc           #85
422: invokevirtual #86
425: aload         6
427: invokevirtual #87
430: ldc           #88
432: invokevirtual #86
435: getstatic     #127
438: invokevirtual #87
441: ldc           #85
443: invokevirtual #86
446: invokevirtual #89
449: aload         6
451: getstatic     #127
454: invokevirtual #90
457: invokestatic  #91
460: new           #83
463: dup
464: invokespecial #84
467: ldc           #85
469: invokevirtual #86
472: aload         7
474: invokevirtual #87
477: ldc           #88
479: invokevirtual #86
482: getstatic     #128
485: invokevirtual #87
488: ldc           #85
490: invokevirtual #86
493: invokevirtual #89
496: aload         7
498: getstatic     #128
501: invokevirtual #90
504: invokestatic  #91
507: aload         8
509: invokestatic  #20
512: aload         8
514: invokestatic  #92
517: ldc           #140
519: invokestatic  #23
522: aload         8
524: invokestatic  #93
527: ldc           #140
529: invokestatic  #23
532: aload         10
534: invokestatic  #20
537: new           #83
540: dup
541: invokespecial #84
544: ldc           #85
546: invokevirtual #86
549: aload         12
551: invokevirtual #87
554: ldc           #88
556: invokevirtual #86
559: getstatic     #378
562: invokevirtual #87
565: ldc           #85
567: invokevirtual #86
570: invokevirtual #89
573: aload         12
575: getstatic     #378
578: invokevirtual #90
581: invokestatic  #91
584: new           #83
587: dup
588: invokespecial #84
591: ldc           #85
593: invokevirtual #86
596: aload         13
598: invokevirtual #87
601: ldc           #88
603: invokevirtual #86
606: getstatic     #402
609: invokevirtual #87
612: ldc           #85
614: invokevirtual #86
617: invokevirtual #89
620: aload         13
622: getstatic     #402
625: invokevirtual #90
628: invokestatic  #91
631: aload         14
633: invokestatic  #20
636: aload         14
638: invokevirtual #289
641: ldc_w         #407
644: invokestatic  #23
647: aload         14
649: invokevirtual #291
652: ldc_w         #407
655: invokestatic  #23
658: aload         14
660: invokevirtual #292
663: ldc_w         #408
666: invokestatic  #23
669: aload         15
671: invokestatic  #171
674: new           #83
677: dup
678: invokespecial #84
681: ldc           #85
683: invokevirtual #86
686: aload         16
688: invokevirtual #87
691: ldc           #88
693: invokevirtual #86
696: getstatic     #156
699: invokevirtual #87
702: ldc           #85
704: invokevirtual #86
707: invokevirtual #89
710: aload         16
712: getstatic     #156
715: invokevirtual #90
718: invokestatic  #91
721: aload         19
723: invokestatic  #20
726: aload         21
728: invokestatic  #20
731: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test411
Start line: 13994
End line: 14023
Method source code: 
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.UNMATCHED_ODE_IN_EXPANDED_SET;
        org.apache.commons.math3.exception.util.Localizable localizable1 = null;
        java.lang.Number number3 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException5 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number3, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter8.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException12 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException5, (org.apache.commons.math3.exception.util.Localizable) localizedFormats6, (java.lang.Object[]) weightedObservedPointArray11);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException13 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable1, (java.lang.Object[]) weightedObservedPointArray11);
        java.lang.Object[] objArray14 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray11);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException15 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray14);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext16 = mathIllegalStateException15.getContext();
        java.util.Set<java.lang.String> strSet17 = exceptionContext16.getKeys();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNMATCHED_ODE_IN_EXPANDED_SET + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNMATCHED_ODE_IN_EXPANDED_SET));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(exceptionContext16);
        org.junit.Assert.assertNotNull(strSet17);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #780
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #781
28: astore_1
29: aconst_null
30: astore_2
31: aconst_null
32: astore_3
33: new           #28
36: dup
37: ldc2_w        #252
40: invokestatic  #129
43: aload_3
44: iconst_1
45: invokespecial #160
48: astore        4
50: getstatic     #254
53: astore        5
55: aconst_null
56: astore        6
58: new           #8
61: dup
62: aload         6
64: invokespecial #9
67: astore        7
69: aload         7
71: invokevirtual #25
74: astore        8
76: aload         7
78: invokevirtual #25
81: astore        9
83: aload         7
85: invokevirtual #25
88: astore        10
90: new           #136
93: dup
94: aload         4
96: aload         5
98: aload         10
100: checkcast     #79
103: invokespecial #137
106: astore        11
108: new           #130
111: dup
112: aload_2
113: aload         10
115: checkcast     #79
118: invokespecial #131
121: astore        12
123: aload         10
125: checkcast     #79
128: invokestatic  #80
131: astore        13
133: new           #136
136: dup
137: aload_1
138: aload         13
140: invokespecial #138
143: astore        14
145: aload         14
147: invokevirtual #282
150: astore        15
152: aload         15
154: invokevirtual #370
157: astore        16
159: new           #83
162: dup
163: invokespecial #84
166: ldc           #85
168: invokevirtual #86
171: aload_1
172: invokevirtual #87
175: ldc           #88
177: invokevirtual #86
180: getstatic     #781
183: invokevirtual #87
186: ldc           #85
188: invokevirtual #86
191: invokevirtual #89
194: aload_1
195: getstatic     #781
198: invokevirtual #90
201: invokestatic  #91
204: new           #83
207: dup
208: invokespecial #84
211: ldc           #85
213: invokevirtual #86
216: aload         5
218: invokevirtual #87
221: ldc           #88
223: invokevirtual #86
226: getstatic     #254
229: invokevirtual #87
232: ldc           #85
234: invokevirtual #86
237: invokevirtual #89
240: aload         5
242: getstatic     #254
245: invokevirtual #90
248: invokestatic  #91
251: aload         8
253: invokestatic  #20
256: aload         9
258: invokestatic  #20
261: aload         10
263: invokestatic  #20
266: aload         13
268: invokestatic  #20
271: aload         13
273: invokestatic  #92
276: ldc           #74
278: invokestatic  #23
281: aload         13
283: invokestatic  #93
286: ldc           #74
288: invokestatic  #23
291: aload         15
293: invokestatic  #20
296: aload         16
298: invokestatic  #20
301: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test412
Start line: 14026
End line: 14057
Method source code: 
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint19 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter8.addObservedPoint(weightedObservedPoint19);
        harmonicFitter1.addObservedPoint(weightedObservedPoint19);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer22 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter23 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer22);
        harmonicFitter23.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter23.clearObservations();
        harmonicFitter23.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint34 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double35 = weightedObservedPoint34.getX();
        harmonicFitter23.addObservedPoint(weightedObservedPoint34);
        harmonicFitter1.addObservedPoint(weightedObservedPoint34);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint41 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((-1.0d), (double) 100, (double) (-1));
        harmonicFitter1.addObservedPoint(weightedObservedPoint41);
        double double43 = weightedObservedPoint41.getX();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #782
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aconst_null
53: astore        4
55: new           #8
58: dup
59: aload         4
61: invokespecial #9
64: astore        5
66: aload         5
68: dconst_1
69: ldc2_w        #32
72: invokevirtual #43
75: aload         5
77: dconst_0
78: ldc2_w        #34
81: invokevirtual #43
84: aload         5
86: invokevirtual #25
89: astore        6
91: new           #145
94: dup
95: dconst_1
96: dconst_0
97: ldc2_w        #34
100: invokespecial #146
103: astore        7
105: aload         5
107: aload         7
109: invokevirtual #123
112: aload_2
113: aload         7
115: invokevirtual #123
118: aconst_null
119: astore        8
121: new           #8
124: dup
125: aload         8
127: invokespecial #9
130: astore        9
132: aload         9
134: dconst_1
135: ldc2_w        #32
138: invokevirtual #43
141: aload         9
143: invokevirtual #59
146: aload         9
148: dconst_0
149: ldc2_w        #10
152: invokevirtual #43
155: new           #145
158: dup
159: ldc2_w        #14
162: ldc2_w        #12
165: ldc2_w        #12
168: invokespecial #146
171: astore        10
173: aload         10
175: invokevirtual #147
178: dstore        11
180: aload         9
182: aload         10
184: invokevirtual #123
187: aload_2
188: aload         10
190: invokevirtual #123
193: new           #145
196: dup
197: ldc2_w        #10
200: ldc2_w        #34
203: ldc2_w        #10
206: invokespecial #146
209: astore        13
211: aload_2
212: aload         13
214: invokevirtual #123
217: aload         13
219: invokevirtual #147
222: dstore        14
224: aload_3
225: invokestatic  #20
228: aload         6
230: invokestatic  #20
233: new           #83
236: dup
237: invokespecial #84
240: ldc           #85
242: invokevirtual #86
245: dload         11
247: invokevirtual #150
250: ldc           #88
252: invokevirtual #86
255: ldc2_w        #12
258: invokevirtual #150
261: ldc           #85
263: invokevirtual #86
266: invokevirtual #89
269: dload         11
271: ldc2_w        #12
274: dcmpl
275: ifne          282
278: iconst_1
279: goto          283
282: iconst_0
283: invokestatic  #91
286: new           #83
289: dup
290: invokespecial #84
293: ldc           #85
295: invokevirtual #86
298: dload         14
300: invokevirtual #150
303: ldc           #88
305: invokevirtual #86
308: ldc2_w        #34
311: invokevirtual #150
314: ldc           #85
316: invokevirtual #86
319: invokevirtual #89
322: dload         14
324: ldc2_w        #34
327: dcmpl
328: ifne          335
331: iconst_1
332: goto          336
335: iconst_0
336: invokestatic  #91
339: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test413
Start line: 14060
End line: 14095
Method source code: 
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint((double) 1.0f, 1.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer18 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter19 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer18);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray20 = harmonicFitter19.getObservations();
        harmonicFitter19.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray22 = harmonicFitter19.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint26 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double27 = weightedObservedPoint26.getX();
        double double28 = weightedObservedPoint26.getWeight();
        double double29 = weightedObservedPoint26.getWeight();
        double double30 = weightedObservedPoint26.getY();
        harmonicFitter19.addObservedPoint(weightedObservedPoint26);
        harmonicFitter19.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray33 = harmonicFitter19.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint37 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) 0L, (double) 'a', (double) 0);
        harmonicFitter19.addObservedPoint(weightedObservedPoint37);
        harmonicFitter1.addObservedPoint(weightedObservedPoint37);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray20);
        org.junit.Assert.assertNotNull(weightedObservedPointArray22);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 35.0d + "'", double28 == 35.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray33);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #783
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: dconst_1
79: dconst_1
80: invokevirtual #43
83: aconst_null
84: astore        4
86: new           #8
89: dup
90: aload         4
92: invokespecial #9
95: astore        5
97: aload         5
99: invokevirtual #25
102: astore        6
104: aload         5
106: invokevirtual #59
109: aload         5
111: invokevirtual #25
114: astore        7
116: new           #145
119: dup
120: ldc2_w        #14
123: ldc2_w        #12
126: ldc2_w        #12
129: invokespecial #146
132: astore        8
134: aload         8
136: invokevirtual #147
139: dstore        9
141: aload         8
143: invokevirtual #148
146: dstore        11
148: aload         8
150: invokevirtual #148
153: dstore        13
155: aload         8
157: invokevirtual #149
160: dstore        15
162: aload         5
164: aload         8
166: invokevirtual #123
169: aload         5
171: invokevirtual #59
174: aload         5
176: invokevirtual #25
179: astore        17
181: new           #145
184: dup
185: dconst_0
186: ldc2_w        #44
189: dconst_0
190: invokespecial #146
193: astore        18
195: aload         5
197: aload         18
199: invokevirtual #123
202: aload_2
203: aload         18
205: invokevirtual #123
208: aload_3
209: invokestatic  #20
212: aload         6
214: invokestatic  #20
217: aload         7
219: invokestatic  #20
222: new           #83
225: dup
226: invokespecial #84
229: ldc           #85
231: invokevirtual #86
234: dload         9
236: invokevirtual #150
239: ldc           #88
241: invokevirtual #86
244: ldc2_w        #12
247: invokevirtual #150
250: ldc           #85
252: invokevirtual #86
255: invokevirtual #89
258: dload         9
260: ldc2_w        #12
263: dcmpl
264: ifne          271
267: iconst_1
268: goto          272
271: iconst_0
272: invokestatic  #91
275: new           #83
278: dup
279: invokespecial #84
282: ldc           #85
284: invokevirtual #86
287: dload         11
289: invokevirtual #150
292: ldc           #88
294: invokevirtual #86
297: ldc2_w        #14
300: invokevirtual #150
303: ldc           #85
305: invokevirtual #86
308: invokevirtual #89
311: dload         11
313: ldc2_w        #14
316: dcmpl
317: ifne          324
320: iconst_1
321: goto          325
324: iconst_0
325: invokestatic  #91
328: new           #83
331: dup
332: invokespecial #84
335: ldc           #85
337: invokevirtual #86
340: dload         13
342: invokevirtual #150
345: ldc           #88
347: invokevirtual #86
350: ldc2_w        #14
353: invokevirtual #150
356: ldc           #85
358: invokevirtual #86
361: invokevirtual #89
364: dload         13
366: ldc2_w        #14
369: dcmpl
370: ifne          377
373: iconst_1
374: goto          378
377: iconst_0
378: invokestatic  #91
381: new           #83
384: dup
385: invokespecial #84
388: ldc           #85
390: invokevirtual #86
393: dload         15
395: invokevirtual #150
398: ldc           #88
400: invokevirtual #86
403: ldc2_w        #12
406: invokevirtual #150
409: ldc           #85
411: invokevirtual #86
414: invokevirtual #89
417: dload         15
419: ldc2_w        #12
422: dcmpl
423: ifne          430
426: iconst_1
427: goto          431
430: iconst_0
431: invokestatic  #91
434: aload         17
436: invokestatic  #20
439: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test414
Start line: 14098
End line: 14143
Method source code: 
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.addObservedPoint((double) 0, (double) (short) 100, (double) (short) 0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray18 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer19 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter20 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer19);
        harmonicFitter20.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter20.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter20.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint31 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter20.addObservedPoint(weightedObservedPoint31);
        double double33 = weightedObservedPoint31.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint31);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric36 = null;
        double[] doubleArray37 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray38 = harmonicFitter1.fit(0, parametric36, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray18);
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #784
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: dconst_0
105: ldc2_w        #34
108: dconst_0
109: invokevirtual #54
112: aload_2
113: invokevirtual #25
116: astore        14
118: aconst_null
119: astore        15
121: new           #8
124: dup
125: aload         15
127: invokespecial #9
130: astore        16
132: aload         16
134: dconst_1
135: ldc2_w        #32
138: invokevirtual #43
141: aload         16
143: dconst_0
144: ldc2_w        #34
147: invokevirtual #43
150: aload         16
152: invokevirtual #25
155: astore        17
157: new           #145
160: dup
161: dconst_1
162: dconst_0
163: ldc2_w        #34
166: invokespecial #146
169: astore        18
171: aload         16
173: aload         18
175: invokevirtual #123
178: aload         18
180: invokevirtual #147
183: dstore        19
185: aload_2
186: aload         18
188: invokevirtual #123
191: aconst_null
192: astore        21
194: iconst_0
195: newarray       double
197: astore        22
199: aload_2
200: iconst_0
201: aload         21
203: aload         22
205: invokevirtual #40
208: astore        23
210: ldc           #17
212: invokestatic  #18
215: goto          220
218: astore        23
220: aload_3
221: invokestatic  #20
224: aload         4
226: invokestatic  #20
229: new           #83
232: dup
233: invokespecial #84
236: ldc           #85
238: invokevirtual #86
241: dload         6
243: invokevirtual #150
246: ldc           #88
248: invokevirtual #86
251: ldc2_w        #12
254: invokevirtual #150
257: ldc           #85
259: invokevirtual #86
262: invokevirtual #89
265: dload         6
267: ldc2_w        #12
270: dcmpl
271: ifne          278
274: iconst_1
275: goto          279
278: iconst_0
279: invokestatic  #91
282: new           #83
285: dup
286: invokespecial #84
289: ldc           #85
291: invokevirtual #86
294: dload         8
296: invokevirtual #150
299: ldc           #88
301: invokevirtual #86
304: ldc2_w        #14
307: invokevirtual #150
310: ldc           #85
312: invokevirtual #86
315: invokevirtual #89
318: dload         8
320: ldc2_w        #14
323: dcmpl
324: ifne          331
327: iconst_1
328: goto          332
331: iconst_0
332: invokestatic  #91
335: new           #83
338: dup
339: invokespecial #84
342: ldc           #85
344: invokevirtual #86
347: dload         10
349: invokevirtual #150
352: ldc           #88
354: invokevirtual #86
357: ldc2_w        #14
360: invokevirtual #150
363: ldc           #85
365: invokevirtual #86
368: invokevirtual #89
371: dload         10
373: ldc2_w        #14
376: dcmpl
377: ifne          384
380: iconst_1
381: goto          385
384: iconst_0
385: invokestatic  #91
388: new           #83
391: dup
392: invokespecial #84
395: ldc           #85
397: invokevirtual #86
400: dload         12
402: invokevirtual #150
405: ldc           #88
407: invokevirtual #86
410: ldc2_w        #12
413: invokevirtual #150
416: ldc           #85
418: invokevirtual #86
421: invokevirtual #89
424: dload         12
426: ldc2_w        #12
429: dcmpl
430: ifne          437
433: iconst_1
434: goto          438
437: iconst_0
438: invokestatic  #91
441: aload         14
443: invokestatic  #20
446: aload         17
448: invokestatic  #20
451: new           #83
454: dup
455: invokespecial #84
458: ldc           #85
460: invokevirtual #86
463: dload         19
465: invokevirtual #150
468: ldc           #88
470: invokevirtual #86
473: dconst_0
474: invokevirtual #150
477: ldc           #85
479: invokevirtual #86
482: invokevirtual #89
485: dload         19
487: dconst_0
488: dcmpl
489: ifne          496
492: iconst_1
493: goto          497
496: iconst_0
497: invokestatic  #91
500: aload         22
502: invokestatic  #20
505: aload         22
507: invokestatic  #21
510: ldc           #74
512: invokestatic  #23
515: return
Exception table:
from    to  target type
199   215   218   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test415
Start line: 14146
End line: 14211
Method source code: 
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_INCREASING_NUMBER_OF_POINTS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_COMPLEX_MODULE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats3 = org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats10 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats11 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray13 = new java.lang.Object[] { localizedFormats11, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException14 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats10, objArray13);
        mathIllegalArgumentException9.addSuppressed((java.lang.Throwable) mathIllegalArgumentException14);
        java.lang.Throwable[] throwableArray16 = mathIllegalArgumentException9.getSuppressed();
        java.lang.Object[] objArray17 = new java.lang.Object[] { localizedFormats3, localizedFormats4, throwableArray16 };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException18 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats2, (java.lang.Object[]) throwableArray16);
        org.apache.commons.math3.exception.ZeroException zeroException19 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) throwableArray16);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException23 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats24 = org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED;
        java.lang.Number number26 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException28 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number26, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException28, (org.apache.commons.math3.exception.util.Localizable) localizedFormats29, objArray30);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException32 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException23, (org.apache.commons.math3.exception.util.Localizable) localizedFormats24, objArray30);
        java.lang.Throwable throwable33 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats34 = org.apache.commons.math3.exception.util.LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer35 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter36 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer35);
        harmonicFitter36.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter36.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray43 = harmonicFitter36.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException44 = new org.apache.commons.math3.exception.MathIllegalStateException(throwable33, (org.apache.commons.math3.exception.util.Localizable) localizedFormats34, (java.lang.Object[]) weightedObservedPointArray43);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException45 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats24, (java.lang.Object[]) weightedObservedPointArray43);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException46 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, (java.lang.Object[]) weightedObservedPointArray43);
        org.apache.commons.math3.exception.ZeroException zeroException47 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray43);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_INCREASING_NUMBER_OF_POINTS + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_INCREASING_NUMBER_OF_POINTS));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_COMPLEX_MODULE + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_COMPLEX_MODULE));
        org.junit.Assert.assertTrue("'" + localizedFormats3 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE + "'", localizedFormats3.equals(org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE));
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION));
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats10 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats10.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats11 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats11.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[DIMENSIONS_MISMATCH_SIMPLE, NOT_POSITIVE_STANDARD_DEVIATION, [org.apache.commons.math3.exception.MathIllegalArgumentException: overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1]]");
        org.junit.Assert.assertTrue("'" + localizedFormats24 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED + "'", localizedFormats24.equals(org.apache.commons.math3.exception.util.LocalizedFormats.TRUST_REGION_STEP_FAILED));
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + localizedFormats34 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS + "'", localizedFormats34.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INSUFFICIENT_ROWS_AND_COLUMNS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray43);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #785
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #786
28: astore_1
29: getstatic     #554
32: astore_2
33: getstatic     #381
36: astore_3
37: getstatic     #382
40: astore        4
42: getstatic     #233
45: astore        5
47: getstatic     #127
50: astore        6
52: getstatic     #128
55: astore        7
57: iconst_2
58: anewarray     #5
61: dup
62: iconst_0
63: aload         7
65: aastore
66: dup
67: iconst_1
68: lconst_1
69: invokestatic  #129
72: aastore
73: astore        8
75: new           #130
78: dup
79: aload         6
81: aload         8
83: invokespecial #131
86: astore        9
88: getstatic     #127
91: astore        10
93: getstatic     #128
96: astore        11
98: iconst_2
99: anewarray     #5
102: dup
103: iconst_0
104: aload         11
106: aastore
107: dup
108: iconst_1
109: lconst_1
110: invokestatic  #129
113: aastore
114: astore        12
116: new           #130
119: dup
120: aload         10
122: aload         12
124: invokespecial #131
127: astore        13
129: aload         9
131: aload         13
133: invokevirtual #132
136: aload         9
138: invokevirtual #234
141: astore        14
143: iconst_3
144: anewarray     #5
147: dup
148: iconst_0
149: aload         4
151: aastore
152: dup
153: iconst_1
154: aload         5
156: aastore
157: dup
158: iconst_2
159: aload         14
161: aastore
162: astore        15
164: new           #130
167: dup
168: aload_3
169: aload         14
171: checkcast     #79
174: invokespecial #131
177: astore        16
179: new           #81
182: dup
183: aload_2
184: aload         14
186: checkcast     #79
189: invokespecial #82
192: astore        17
194: new           #28
197: dup
198: ldc2_w        #277
201: invokestatic  #129
204: bipush        10
206: invokestatic  #159
209: iconst_1
210: invokespecial #160
213: astore        18
215: getstatic     #279
218: astore        19
220: aconst_null
221: astore        20
223: new           #28
226: dup
227: bipush        100
229: invokestatic  #159
232: aload         20
234: iconst_0
235: invokespecial #160
238: astore        21
240: getstatic     #161
243: astore        22
245: iconst_0
246: anewarray     #5
249: astore        23
251: new           #136
254: dup
255: aload         21
257: aload         22
259: aload         23
261: invokespecial #137
264: astore        24
266: new           #136
269: dup
270: aload         18
272: aload         19
274: aload         23
276: invokespecial #137
279: astore        25
281: aconst_null
282: astore        26
284: getstatic     #507
287: astore        27
289: aconst_null
290: astore        28
292: new           #8
295: dup
296: aload         28
298: invokespecial #9
301: astore        29
303: aload         29
305: dconst_1
306: ldc2_w        #32
309: invokevirtual #43
312: aload         29
314: dconst_0
315: ldc2_w        #34
318: invokevirtual #43
321: aload         29
323: invokevirtual #25
326: astore        30
328: new           #136
331: dup
332: aload         26
334: aload         27
336: aload         30
338: checkcast     #79
341: invokespecial #137
344: astore        31
346: new           #136
349: dup
350: aload         19
352: aload         30
354: checkcast     #79
357: invokespecial #138
360: astore        32
362: new           #130
365: dup
366: aload_2
367: aload         30
369: checkcast     #79
372: invokespecial #131
375: astore        33
377: new           #81
380: dup
381: aload_1
382: aload         30
384: checkcast     #79
387: invokespecial #82
390: astore        34
392: new           #83
395: dup
396: invokespecial #84
399: ldc           #85
401: invokevirtual #86
404: aload_1
405: invokevirtual #87
408: ldc           #88
410: invokevirtual #86
413: getstatic     #786
416: invokevirtual #87
419: ldc           #85
421: invokevirtual #86
424: invokevirtual #89
427: aload_1
428: getstatic     #786
431: invokevirtual #90
434: invokestatic  #91
437: new           #83
440: dup
441: invokespecial #84
444: ldc           #85
446: invokevirtual #86
449: aload_2
450: invokevirtual #87
453: ldc           #88
455: invokevirtual #86
458: getstatic     #554
461: invokevirtual #87
464: ldc           #85
466: invokevirtual #86
469: invokevirtual #89
472: aload_2
473: getstatic     #554
476: invokevirtual #90
479: invokestatic  #91
482: new           #83
485: dup
486: invokespecial #84
489: ldc           #85
491: invokevirtual #86
494: aload_3
495: invokevirtual #87
498: ldc           #88
500: invokevirtual #86
503: getstatic     #381
506: invokevirtual #87
509: ldc           #85
511: invokevirtual #86
514: invokevirtual #89
517: aload_3
518: getstatic     #381
521: invokevirtual #90
524: invokestatic  #91
527: new           #83
530: dup
531: invokespecial #84
534: ldc           #85
536: invokevirtual #86
539: aload         4
541: invokevirtual #87
544: ldc           #88
546: invokevirtual #86
549: getstatic     #382
552: invokevirtual #87
555: ldc           #85
557: invokevirtual #86
560: invokevirtual #89
563: aload         4
565: getstatic     #382
568: invokevirtual #90
571: invokestatic  #91
574: new           #83
577: dup
578: invokespecial #84
581: ldc           #85
583: invokevirtual #86
586: aload         5
588: invokevirtual #87
591: ldc           #88
593: invokevirtual #86
596: getstatic     #233
599: invokevirtual #87
602: ldc           #85
604: invokevirtual #86
607: invokevirtual #89
610: aload         5
612: getstatic     #233
615: invokevirtual #90
618: invokestatic  #91
621: new           #83
624: dup
625: invokespecial #84
628: ldc           #85
630: invokevirtual #86
633: aload         6
635: invokevirtual #87
638: ldc           #88
640: invokevirtual #86
643: getstatic     #127
646: invokevirtual #87
649: ldc           #85
651: invokevirtual #86
654: invokevirtual #89
657: aload         6
659: getstatic     #127
662: invokevirtual #90
665: invokestatic  #91
668: new           #83
671: dup
672: invokespecial #84
675: ldc           #85
677: invokevirtual #86
680: aload         7
682: invokevirtual #87
685: ldc           #88
687: invokevirtual #86
690: getstatic     #128
693: invokevirtual #87
696: ldc           #85
698: invokevirtual #86
701: invokevirtual #89
704: aload         7
706: getstatic     #128
709: invokevirtual #90
712: invokestatic  #91
715: aload         8
717: invokestatic  #20
720: aload         8
722: invokestatic  #92
725: ldc           #140
727: invokestatic  #23
730: aload         8
732: invokestatic  #93
735: ldc           #140
737: invokestatic  #23
740: new           #83
743: dup
744: invokespecial #84
747: ldc           #85
749: invokevirtual #86
752: aload         10
754: invokevirtual #87
757: ldc           #88
759: invokevirtual #86
762: getstatic     #127
765: invokevirtual #87
768: ldc           #85
770: invokevirtual #86
773: invokevirtual #89
776: aload         10
778: getstatic     #127
781: invokevirtual #90
784: invokestatic  #91
787: new           #83
790: dup
791: invokespecial #84
794: ldc           #85
796: invokevirtual #86
799: aload         11
801: invokevirtual #87
804: ldc           #88
806: invokevirtual #86
809: getstatic     #128
812: invokevirtual #87
815: ldc           #85
817: invokevirtual #86
820: invokevirtual #89
823: aload         11
825: getstatic     #128
828: invokevirtual #90
831: invokestatic  #91
834: aload         12
836: invokestatic  #20
839: aload         12
841: invokestatic  #92
844: ldc           #140
846: invokestatic  #23
849: aload         12
851: invokestatic  #93
854: ldc           #140
856: invokestatic  #23
859: aload         14
861: invokestatic  #20
864: aload         15
866: invokestatic  #20
869: aload         15
871: invokestatic  #92
874: ldc_w         #385
877: invokestatic  #23
880: new           #83
883: dup
884: invokespecial #84
887: ldc           #85
889: invokevirtual #86
892: aload         19
894: invokevirtual #87
897: ldc           #88
899: invokevirtual #86
902: getstatic     #279
905: invokevirtual #87
908: ldc           #85
910: invokevirtual #86
913: invokevirtual #89
916: aload         19
918: getstatic     #279
921: invokevirtual #90
924: invokestatic  #91
927: new           #83
930: dup
931: invokespecial #84
934: ldc           #85
936: invokevirtual #86
939: aload         22
941: invokevirtual #87
944: ldc           #88
946: invokevirtual #86
949: getstatic     #161
952: invokevirtual #87
955: ldc           #85
957: invokevirtual #86
960: invokevirtual #89
963: aload         22
965: getstatic     #161
968: invokevirtual #90
971: invokestatic  #91
974: aload         23
976: invokestatic  #20
979: aload         23
981: invokestatic  #92
984: ldc           #74
986: invokestatic  #23
989: aload         23
991: invokestatic  #93
994: ldc           #74
996: invokestatic  #23
999: new           #83
1002: dup
1003: invokespecial #84
1006: ldc           #85
1008: invokevirtual #86
1011: aload         27
1013: invokevirtual #87
1016: ldc           #88
1018: invokevirtual #86
1021: getstatic     #507
1024: invokevirtual #87
1027: ldc           #85
1029: invokevirtual #86
1032: invokevirtual #89
1035: aload         27
1037: getstatic     #507
1040: invokevirtual #90
1043: invokestatic  #91
1046: aload         30
1048: invokestatic  #20
1051: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test416
Start line: 14214
End line: 14236
Method source code: 
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint17 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double18 = weightedObservedPoint17.getX();
        double double19 = weightedObservedPoint17.getY();
        double double20 = weightedObservedPoint17.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint17);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray22 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser23 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray22);
        org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser24 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray22);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 52.0d + "'", double20 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray22);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #787
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: ldc2_w        #12
66: dconst_0
67: ldc2_w        #44
70: invokevirtual #54
73: new           #145
76: dup
77: ldc2_w        #14
80: ldc2_w        #12
83: ldc2_w        #12
86: invokespecial #146
89: astore        4
91: aload         4
93: invokevirtual #147
96: dstore        5
98: aload         4
100: invokevirtual #149
103: dstore        7
105: aload         4
107: invokevirtual #149
110: dstore        9
112: aload_2
113: aload         4
115: invokevirtual #123
118: aload_2
119: invokevirtual #25
122: astore        11
124: new           #69
127: dup
128: aload         11
130: invokespecial #70
133: astore        12
135: new           #69
138: dup
139: aload         11
141: invokespecial #70
144: astore        13
146: aload_3
147: invokestatic  #20
150: new           #83
153: dup
154: invokespecial #84
157: ldc           #85
159: invokevirtual #86
162: dload         5
164: invokevirtual #150
167: ldc           #88
169: invokevirtual #86
172: ldc2_w        #12
175: invokevirtual #150
178: ldc           #85
180: invokevirtual #86
183: invokevirtual #89
186: dload         5
188: ldc2_w        #12
191: dcmpl
192: ifne          199
195: iconst_1
196: goto          200
199: iconst_0
200: invokestatic  #91
203: new           #83
206: dup
207: invokespecial #84
210: ldc           #85
212: invokevirtual #86
215: dload         7
217: invokevirtual #150
220: ldc           #88
222: invokevirtual #86
225: ldc2_w        #12
228: invokevirtual #150
231: ldc           #85
233: invokevirtual #86
236: invokevirtual #89
239: dload         7
241: ldc2_w        #12
244: dcmpl
245: ifne          252
248: iconst_1
249: goto          253
252: iconst_0
253: invokestatic  #91
256: new           #83
259: dup
260: invokespecial #84
263: ldc           #85
265: invokevirtual #86
268: dload         9
270: invokevirtual #150
273: ldc           #88
275: invokevirtual #86
278: ldc2_w        #12
281: invokevirtual #150
284: ldc           #85
286: invokevirtual #86
289: invokevirtual #89
292: dload         9
294: ldc2_w        #12
297: dcmpl
298: ifne          305
301: iconst_1
302: goto          306
305: iconst_0
306: invokestatic  #91
309: aload         11
311: invokestatic  #20
314: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test417
Start line: 14239
End line: 14256
Method source code: 
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OBSERVED_COUNTS_ALL_ZERO;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter2.clearObservations();
        harmonicFitter2.clearObservations();
        harmonicFitter2.addObservedPoint((double) (byte) 0, (double) (short) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray14 = harmonicFitter2.getObservations();
        java.lang.Object[] objArray15 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) weightedObservedPointArray14);
        org.apache.commons.math3.exception.ZeroException zeroException16 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray15);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OBSERVED_COUNTS_ALL_ZERO + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OBSERVED_COUNTS_ALL_ZERO));
        org.junit.Assert.assertNotNull(weightedObservedPointArray14);
        org.junit.Assert.assertNotNull(objArray15);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #788
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #789
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: dconst_1
42: ldc2_w        #32
45: invokevirtual #43
48: aload_3
49: dconst_0
50: ldc2_w        #34
53: invokevirtual #43
56: aload_3
57: invokevirtual #59
60: aload_3
61: invokevirtual #59
64: aload_3
65: dconst_0
66: ldc2_w        #32
69: invokevirtual #43
72: aload_3
73: invokevirtual #25
76: astore        4
78: aload         4
80: checkcast     #79
83: invokestatic  #80
86: astore        5
88: new           #81
91: dup
92: aload_1
93: aload         5
95: invokespecial #82
98: astore        6
100: new           #83
103: dup
104: invokespecial #84
107: ldc           #85
109: invokevirtual #86
112: aload_1
113: invokevirtual #87
116: ldc           #88
118: invokevirtual #86
121: getstatic     #789
124: invokevirtual #87
127: ldc           #85
129: invokevirtual #86
132: invokevirtual #89
135: aload_1
136: getstatic     #789
139: invokevirtual #90
142: invokestatic  #91
145: aload         4
147: invokestatic  #20
150: aload         5
152: invokestatic  #20
155: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test418
Start line: 14259
End line: 14322
Method source code: 
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer9 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter10 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer9);
        harmonicFitter10.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter10.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter10.addObservedPoint((double) 0.0f, 52.0d, (double) (-1.0f));
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint24 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double25 = weightedObservedPoint24.getX();
        double double26 = weightedObservedPoint24.getY();
        double double27 = weightedObservedPoint24.getX();
        double double28 = weightedObservedPoint24.getY();
        double double29 = weightedObservedPoint24.getX();
        double double30 = weightedObservedPoint24.getX();
        harmonicFitter10.addObservedPoint(weightedObservedPoint24);
        double double32 = weightedObservedPoint24.getWeight();
        double double33 = weightedObservedPoint24.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint24);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(0.0d, (double) 10L);
        harmonicFitter1.addObservedPoint((double) 'a', (double) 10);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer42 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter43 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer42);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray44 = harmonicFitter43.getObservations();
        harmonicFitter43.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter43.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter43.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint59 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double60 = weightedObservedPoint59.getX();
        double double61 = weightedObservedPoint59.getY();
        double double62 = weightedObservedPoint59.getY();
        harmonicFitter43.addObservedPoint(weightedObservedPoint59);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray64 = harmonicFitter43.getObservations();
        org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser65 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray64);
        double[] doubleArray66 = parameterGuesser65.guess();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray67 = harmonicFitter1.fit(doubleArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 52.0d + "'", double25 == 52.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 52.0d + "'", double26 == 52.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 52.0d + "'", double27 == 52.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 52.0d + "'", double28 == 52.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 35.0d + "'", double32 == 35.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 52.0d + "'", double33 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray44);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 52.0d + "'", double60 == 52.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 52.0d + "'", double61 == 52.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 52.0d + "'", double62 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[31.0, 0.0641141357875468, -1.5191688395158496]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #790
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aconst_null
57: astore_3
58: new           #8
61: dup
62: aload_3
63: invokespecial #9
66: astore        4
68: aload         4
70: dconst_1
71: ldc2_w        #32
74: invokevirtual #43
77: aload         4
79: dconst_0
80: ldc2_w        #34
83: invokevirtual #43
86: aload         4
88: dconst_0
89: ldc2_w        #12
92: ldc2_w        #10
95: invokevirtual #54
98: new           #145
101: dup
102: ldc2_w        #14
105: ldc2_w        #12
108: ldc2_w        #12
111: invokespecial #146
114: astore        5
116: aload         5
118: invokevirtual #147
121: dstore        6
123: aload         5
125: invokevirtual #149
128: dstore        8
130: aload         5
132: invokevirtual #147
135: dstore        10
137: aload         5
139: invokevirtual #149
142: dstore        12
144: aload         5
146: invokevirtual #147
149: dstore        14
151: aload         5
153: invokevirtual #147
156: dstore        16
158: aload         4
160: aload         5
162: invokevirtual #123
165: aload         5
167: invokevirtual #148
170: dstore        18
172: aload         5
174: invokevirtual #147
177: dstore        20
179: aload_2
180: aload         5
182: invokevirtual #123
185: aload_2
186: invokevirtual #59
189: aload_2
190: dconst_0
191: ldc2_w        #32
194: invokevirtual #43
197: aload_2
198: ldc2_w        #44
201: ldc2_w        #32
204: invokevirtual #43
207: aconst_null
208: astore        22
210: new           #8
213: dup
214: aload         22
216: invokespecial #9
219: astore        23
221: aload         23
223: invokevirtual #25
226: astore        24
228: aload         23
230: ldc2_w        #32
233: ldc2_w        #10
236: dconst_0
237: invokevirtual #54
240: aload         23
242: ldc2_w        #44
245: ldc2_w        #14
248: invokevirtual #43
251: aload         23
253: ldc2_w        #12
256: dconst_0
257: ldc2_w        #44
260: invokevirtual #54
263: new           #145
266: dup
267: ldc2_w        #14
270: ldc2_w        #12
273: ldc2_w        #12
276: invokespecial #146
279: astore        25
281: aload         25
283: invokevirtual #147
286: dstore        26
288: aload         25
290: invokevirtual #149
293: dstore        28
295: aload         25
297: invokevirtual #149
300: dstore        30
302: aload         23
304: aload         25
306: invokevirtual #123
309: aload         23
311: invokevirtual #25
314: astore        32
316: new           #69
319: dup
320: aload         32
322: invokespecial #70
325: astore        33
327: aload         33
329: invokevirtual #758
332: astore        34
334: aload_2
335: aload         34
337: invokevirtual #16
340: astore        35
342: ldc           #17
344: invokestatic  #18
347: goto          352
350: astore        35
352: new           #83
355: dup
356: invokespecial #84
359: ldc           #85
361: invokevirtual #86
364: dload         6
366: invokevirtual #150
369: ldc           #88
371: invokevirtual #86
374: ldc2_w        #12
377: invokevirtual #150
380: ldc           #85
382: invokevirtual #86
385: invokevirtual #89
388: dload         6
390: ldc2_w        #12
393: dcmpl
394: ifne          401
397: iconst_1
398: goto          402
401: iconst_0
402: invokestatic  #91
405: new           #83
408: dup
409: invokespecial #84
412: ldc           #85
414: invokevirtual #86
417: dload         8
419: invokevirtual #150
422: ldc           #88
424: invokevirtual #86
427: ldc2_w        #12
430: invokevirtual #150
433: ldc           #85
435: invokevirtual #86
438: invokevirtual #89
441: dload         8
443: ldc2_w        #12
446: dcmpl
447: ifne          454
450: iconst_1
451: goto          455
454: iconst_0
455: invokestatic  #91
458: new           #83
461: dup
462: invokespecial #84
465: ldc           #85
467: invokevirtual #86
470: dload         10
472: invokevirtual #150
475: ldc           #88
477: invokevirtual #86
480: ldc2_w        #12
483: invokevirtual #150
486: ldc           #85
488: invokevirtual #86
491: invokevirtual #89
494: dload         10
496: ldc2_w        #12
499: dcmpl
500: ifne          507
503: iconst_1
504: goto          508
507: iconst_0
508: invokestatic  #91
511: new           #83
514: dup
515: invokespecial #84
518: ldc           #85
520: invokevirtual #86
523: dload         12
525: invokevirtual #150
528: ldc           #88
530: invokevirtual #86
533: ldc2_w        #12
536: invokevirtual #150
539: ldc           #85
541: invokevirtual #86
544: invokevirtual #89
547: dload         12
549: ldc2_w        #12
552: dcmpl
553: ifne          560
556: iconst_1
557: goto          561
560: iconst_0
561: invokestatic  #91
564: new           #83
567: dup
568: invokespecial #84
571: ldc           #85
573: invokevirtual #86
576: dload         14
578: invokevirtual #150
581: ldc           #88
583: invokevirtual #86
586: ldc2_w        #12
589: invokevirtual #150
592: ldc           #85
594: invokevirtual #86
597: invokevirtual #89
600: dload         14
602: ldc2_w        #12
605: dcmpl
606: ifne          613
609: iconst_1
610: goto          614
613: iconst_0
614: invokestatic  #91
617: new           #83
620: dup
621: invokespecial #84
624: ldc           #85
626: invokevirtual #86
629: dload         16
631: invokevirtual #150
634: ldc           #88
636: invokevirtual #86
639: ldc2_w        #12
642: invokevirtual #150
645: ldc           #85
647: invokevirtual #86
650: invokevirtual #89
653: dload         16
655: ldc2_w        #12
658: dcmpl
659: ifne          666
662: iconst_1
663: goto          667
666: iconst_0
667: invokestatic  #91
670: new           #83
673: dup
674: invokespecial #84
677: ldc           #85
679: invokevirtual #86
682: dload         18
684: invokevirtual #150
687: ldc           #88
689: invokevirtual #86
692: ldc2_w        #14
695: invokevirtual #150
698: ldc           #85
700: invokevirtual #86
703: invokevirtual #89
706: dload         18
708: ldc2_w        #14
711: dcmpl
712: ifne          719
715: iconst_1
716: goto          720
719: iconst_0
720: invokestatic  #91
723: new           #83
726: dup
727: invokespecial #84
730: ldc           #85
732: invokevirtual #86
735: dload         20
737: invokevirtual #150
740: ldc           #88
742: invokevirtual #86
745: ldc2_w        #12
748: invokevirtual #150
751: ldc           #85
753: invokevirtual #86
756: invokevirtual #89
759: dload         20
761: ldc2_w        #12
764: dcmpl
765: ifne          772
768: iconst_1
769: goto          773
772: iconst_0
773: invokestatic  #91
776: aload         24
778: invokestatic  #20
781: new           #83
784: dup
785: invokespecial #84
788: ldc           #85
790: invokevirtual #86
793: dload         26
795: invokevirtual #150
798: ldc           #88
800: invokevirtual #86
803: ldc2_w        #12
806: invokevirtual #150
809: ldc           #85
811: invokevirtual #86
814: invokevirtual #89
817: dload         26
819: ldc2_w        #12
822: dcmpl
823: ifne          830
826: iconst_1
827: goto          831
830: iconst_0
831: invokestatic  #91
834: new           #83
837: dup
838: invokespecial #84
841: ldc           #85
843: invokevirtual #86
846: dload         28
848: invokevirtual #150
851: ldc           #88
853: invokevirtual #86
856: ldc2_w        #12
859: invokevirtual #150
862: ldc           #85
864: invokevirtual #86
867: invokevirtual #89
870: dload         28
872: ldc2_w        #12
875: dcmpl
876: ifne          883
879: iconst_1
880: goto          884
883: iconst_0
884: invokestatic  #91
887: new           #83
890: dup
891: invokespecial #84
894: ldc           #85
896: invokevirtual #86
899: dload         30
901: invokevirtual #150
904: ldc           #88
906: invokevirtual #86
909: ldc2_w        #12
912: invokevirtual #150
915: ldc           #85
917: invokevirtual #86
920: invokevirtual #89
923: dload         30
925: ldc2_w        #12
928: dcmpl
929: ifne          936
932: iconst_1
933: goto          937
936: iconst_0
937: invokestatic  #91
940: aload         32
942: invokestatic  #20
945: aload         34
947: invokestatic  #20
950: aload         34
952: invokestatic  #21
955: ldc_w         #759
958: invokestatic  #23
961: return
Exception table:
from    to  target type
334   347   350   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test419
Start line: 14325
End line: 14400
Method source code: 
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException4 = new org.apache.commons.math3.exception.NumberIsTooSmallException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Number) (byte) 10, (java.lang.Number) 10, false);
        java.lang.String str5 = localizedFormats0.getSourceString();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray9 = new java.lang.Object[] { localizedFormats7, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats6, objArray9);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats11 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats13 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats15 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray16 = new java.lang.Object[] { localizedFormats12, localizedFormats13, localizedFormats14, localizedFormats15 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException17 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException10, (org.apache.commons.math3.exception.util.Localizable) localizedFormats11, objArray16);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext18 = mathIllegalArgumentException10.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext19 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException10);
        java.lang.Throwable throwable20 = exceptionContext19.getThrowable();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray24 = new java.lang.Object[] { localizedFormats22, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException25 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats21, objArray24);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats26 = org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats27 = org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats28 = org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE;
        java.lang.Object[] objArray31 = new java.lang.Object[] { localizedFormats27, localizedFormats28, localizedFormats29, localizedFormats30 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException32 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException25, (org.apache.commons.math3.exception.util.Localizable) localizedFormats26, objArray31);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats33 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer34 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter35 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer34);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray36 = harmonicFitter35.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException37 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats33, (java.lang.Object[]) weightedObservedPointArray36);
        java.lang.Throwable[] throwableArray38 = zeroException37.getSuppressed();
        exceptionContext19.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats26, (java.lang.Object[]) throwableArray38);
        org.apache.commons.math3.exception.ZeroException zeroException40 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) throwableArray38);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "class ({0}) does not implement Comparable" + "'", str5, "class ({0}) does not implement Comparable");
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats11 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats11.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats13 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats13.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats15 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats15.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertNotNull(exceptionContext18);
        org.junit.Assert.assertNotNull(throwable20);
        org.junit.Assert.assertEquals(throwable20.getLocalizedMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertEquals(throwable20.getMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertEquals(throwable20.toString(), "org.apache.commons.math3.exception.MathIllegalArgumentException: overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats26 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS + "'", localizedFormats26.equals(org.apache.commons.math3.exception.util.LocalizedFormats.LCM_OVERFLOW_32_BITS));
        org.junit.Assert.assertTrue("'" + localizedFormats27 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT + "'", localizedFormats27.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats28 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT + "'", localizedFormats28.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SIMPLEX_NEED_ONE_POINT));
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_DEGREES_OF_FREEDOM));
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE));
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[NO_CONVERGENCE_WITH_ANY_START_POINT, SIMPLEX_NEED_ONE_POINT, NOT_POSITIVE_DEGREES_OF_FREEDOM, SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE]");
        org.junit.Assert.assertTrue("'" + localizedFormats33 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats33.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #791
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #668
28: astore_1
29: new           #28
32: dup
33: aload_1
34: bipush        10
36: invokestatic  #159
39: bipush        10
41: invokestatic  #135
44: iconst_0
45: invokespecial #195
48: astore_2
49: aload_1
50: invokevirtual #301
53: astore_3
54: getstatic     #127
57: astore        4
59: getstatic     #128
62: astore        5
64: iconst_2
65: anewarray     #5
68: dup
69: iconst_0
70: aload         5
72: aastore
73: dup
74: iconst_1
75: lconst_1
76: invokestatic  #129
79: aastore
80: astore        6
82: new           #130
85: dup
86: aload         4
88: aload         6
90: invokespecial #131
93: astore        7
95: getstatic     #328
98: astore        8
100: getstatic     #329
103: astore        9
105: getstatic     #330
108: astore        10
110: getstatic     #331
113: astore        11
115: getstatic     #332
118: astore        12
120: iconst_4
121: anewarray     #5
124: dup
125: iconst_0
126: aload         9
128: aastore
129: dup
130: iconst_1
131: aload         10
133: aastore
134: dup
135: iconst_2
136: aload         11
138: aastore
139: dup
140: iconst_3
141: aload         12
143: aastore
144: astore        13
146: new           #136
149: dup
150: aload         7
152: aload         8
154: aload         13
156: invokespecial #137
159: astore        14
161: aload         7
163: invokevirtual #165
166: astore        15
168: new           #163
171: dup
172: aload         7
174: invokespecial #164
177: astore        16
179: aload         16
181: invokevirtual #288
184: astore        17
186: getstatic     #127
189: astore        18
191: getstatic     #128
194: astore        19
196: iconst_2
197: anewarray     #5
200: dup
201: iconst_0
202: aload         19
204: aastore
205: dup
206: iconst_1
207: lconst_1
208: invokestatic  #129
211: aastore
212: astore        20
214: new           #130
217: dup
218: aload         18
220: aload         20
222: invokespecial #131
225: astore        21
227: getstatic     #328
230: astore        22
232: getstatic     #329
235: astore        23
237: getstatic     #330
240: astore        24
242: getstatic     #331
245: astore        25
247: getstatic     #332
250: astore        26
252: iconst_4
253: anewarray     #5
256: dup
257: iconst_0
258: aload         23
260: aastore
261: dup
262: iconst_1
263: aload         24
265: aastore
266: dup
267: iconst_2
268: aload         25
270: aastore
271: dup
272: iconst_3
273: aload         26
275: aastore
276: astore        27
278: new           #136
281: dup
282: aload         21
284: aload         22
286: aload         27
288: invokespecial #137
291: astore        28
293: getstatic     #156
296: astore        29
298: aconst_null
299: astore        30
301: new           #8
304: dup
305: aload         30
307: invokespecial #9
310: astore        31
312: aload         31
314: invokevirtual #25
317: astore        32
319: new           #81
322: dup
323: aload         29
325: aload         32
327: checkcast     #79
330: invokespecial #82
333: astore        33
335: aload         33
337: invokevirtual #405
340: astore        34
342: aload         16
344: aload         22
346: aload         34
348: checkcast     #79
351: invokevirtual #169
354: new           #81
357: dup
358: aload_1
359: aload         34
361: checkcast     #79
364: invokespecial #82
367: astore        35
369: new           #83
372: dup
373: invokespecial #84
376: ldc           #85
378: invokevirtual #86
381: aload_1
382: invokevirtual #87
385: ldc           #88
387: invokevirtual #86
390: getstatic     #668
393: invokevirtual #87
396: ldc           #85
398: invokevirtual #86
401: invokevirtual #89
404: aload_1
405: getstatic     #668
408: invokevirtual #90
411: invokestatic  #91
414: new           #83
417: dup
418: invokespecial #84
421: ldc           #85
423: invokevirtual #86
426: aload_3
427: invokevirtual #86
430: ldc_w         #792
433: invokevirtual #86
436: invokevirtual #89
439: aload_3
440: ldc_w         #371
443: invokestatic  #245
446: new           #83
449: dup
450: invokespecial #84
453: ldc           #85
455: invokevirtual #86
458: aload         4
460: invokevirtual #87
463: ldc           #88
465: invokevirtual #86
468: getstatic     #127
471: invokevirtual #87
474: ldc           #85
476: invokevirtual #86
479: invokevirtual #89
482: aload         4
484: getstatic     #127
487: invokevirtual #90
490: invokestatic  #91
493: new           #83
496: dup
497: invokespecial #84
500: ldc           #85
502: invokevirtual #86
505: aload         5
507: invokevirtual #87
510: ldc           #88
512: invokevirtual #86
515: getstatic     #128
518: invokevirtual #87
521: ldc           #85
523: invokevirtual #86
526: invokevirtual #89
529: aload         5
531: getstatic     #128
534: invokevirtual #90
537: invokestatic  #91
540: aload         6
542: invokestatic  #20
545: aload         6
547: invokestatic  #92
550: ldc           #140
552: invokestatic  #23
555: aload         6
557: invokestatic  #93
560: ldc           #140
562: invokestatic  #23
565: new           #83
568: dup
569: invokespecial #84
572: ldc           #85
574: invokevirtual #86
577: aload         8
579: invokevirtual #87
582: ldc           #88
584: invokevirtual #86
587: getstatic     #328
590: invokevirtual #87
593: ldc           #85
595: invokevirtual #86
598: invokevirtual #89
601: aload         8
603: getstatic     #328
606: invokevirtual #90
609: invokestatic  #91
612: new           #83
615: dup
616: invokespecial #84
619: ldc           #85
621: invokevirtual #86
624: aload         9
626: invokevirtual #87
629: ldc           #88
631: invokevirtual #86
634: getstatic     #329
637: invokevirtual #87
640: ldc           #85
642: invokevirtual #86
645: invokevirtual #89
648: aload         9
650: getstatic     #329
653: invokevirtual #90
656: invokestatic  #91
659: new           #83
662: dup
663: invokespecial #84
666: ldc           #85
668: invokevirtual #86
671: aload         10
673: invokevirtual #87
676: ldc           #88
678: invokevirtual #86
681: getstatic     #330
684: invokevirtual #87
687: ldc           #85
689: invokevirtual #86
692: invokevirtual #89
695: aload         10
697: getstatic     #330
700: invokevirtual #90
703: invokestatic  #91
706: new           #83
709: dup
710: invokespecial #84
713: ldc           #85
715: invokevirtual #86
718: aload         11
720: invokevirtual #87
723: ldc           #88
725: invokevirtual #86
728: getstatic     #331
731: invokevirtual #87
734: ldc           #85
736: invokevirtual #86
739: invokevirtual #89
742: aload         11
744: getstatic     #331
747: invokevirtual #90
750: invokestatic  #91
753: new           #83
756: dup
757: invokespecial #84
760: ldc           #85
762: invokevirtual #86
765: aload         12
767: invokevirtual #87
770: ldc           #88
772: invokevirtual #86
775: getstatic     #332
778: invokevirtual #87
781: ldc           #85
783: invokevirtual #86
786: invokevirtual #89
789: aload         12
791: getstatic     #332
794: invokevirtual #90
797: invokestatic  #91
800: aload         13
802: invokestatic  #20
805: aload         13
807: invokestatic  #92
810: ldc_w         #336
813: invokestatic  #23
816: aload         13
818: invokestatic  #93
821: ldc_w         #336
824: invokestatic  #23
827: aload         15
829: invokestatic  #20
832: aload         17
834: invokestatic  #20
837: aload         17
839: invokevirtual #289
842: ldc_w         #407
845: invokestatic  #23
848: aload         17
850: invokevirtual #291
853: ldc_w         #407
856: invokestatic  #23
859: aload         17
861: invokevirtual #292
864: ldc_w         #408
867: invokestatic  #23
870: new           #83
873: dup
874: invokespecial #84
877: ldc           #85
879: invokevirtual #86
882: aload         18
884: invokevirtual #87
887: ldc           #88
889: invokevirtual #86
892: getstatic     #127
895: invokevirtual #87
898: ldc           #85
900: invokevirtual #86
903: invokevirtual #89
906: aload         18
908: getstatic     #127
911: invokevirtual #90
914: invokestatic  #91
917: new           #83
920: dup
921: invokespecial #84
924: ldc           #85
926: invokevirtual #86
929: aload         19
931: invokevirtual #87
934: ldc           #88
936: invokevirtual #86
939: getstatic     #128
942: invokevirtual #87
945: ldc           #85
947: invokevirtual #86
950: invokevirtual #89
953: aload         19
955: getstatic     #128
958: invokevirtual #90
961: invokestatic  #91
964: aload         20
966: invokestatic  #20
969: aload         20
971: invokestatic  #92
974: ldc           #140
976: invokestatic  #23
979: aload         20
981: invokestatic  #93
984: ldc           #140
986: invokestatic  #23
989: new           #83
992: dup
993: invokespecial #84
996: ldc           #85
998: invokevirtual #86
1001: aload         22
1003: invokevirtual #87
1006: ldc           #88
1008: invokevirtual #86
1011: getstatic     #328
1014: invokevirtual #87
1017: ldc           #85
1019: invokevirtual #86
1022: invokevirtual #89
1025: aload         22
1027: getstatic     #328
1030: invokevirtual #90
1033: invokestatic  #91
1036: new           #83
1039: dup
1040: invokespecial #84
1043: ldc           #85
1045: invokevirtual #86
1048: aload         23
1050: invokevirtual #87
1053: ldc           #88
1055: invokevirtual #86
1058: getstatic     #329
1061: invokevirtual #87
1064: ldc           #85
1066: invokevirtual #86
1069: invokevirtual #89
1072: aload         23
1074: getstatic     #329
1077: invokevirtual #90
1080: invokestatic  #91
1083: new           #83
1086: dup
1087: invokespecial #84
1090: ldc           #85
1092: invokevirtual #86
1095: aload         24
1097: invokevirtual #87
1100: ldc           #88
1102: invokevirtual #86
1105: getstatic     #330
1108: invokevirtual #87
1111: ldc           #85
1113: invokevirtual #86
1116: invokevirtual #89
1119: aload         24
1121: getstatic     #330
1124: invokevirtual #90
1127: invokestatic  #91
1130: new           #83
1133: dup
1134: invokespecial #84
1137: ldc           #85
1139: invokevirtual #86
1142: aload         25
1144: invokevirtual #87
1147: ldc           #88
1149: invokevirtual #86
1152: getstatic     #331
1155: invokevirtual #87
1158: ldc           #85
1160: invokevirtual #86
1163: invokevirtual #89
1166: aload         25
1168: getstatic     #331
1171: invokevirtual #90
1174: invokestatic  #91
1177: new           #83
1180: dup
1181: invokespecial #84
1184: ldc           #85
1186: invokevirtual #86
1189: aload         26
1191: invokevirtual #87
1194: ldc           #88
1196: invokevirtual #86
1199: getstatic     #332
1202: invokevirtual #87
1205: ldc           #85
1207: invokevirtual #86
1210: invokevirtual #89
1213: aload         26
1215: getstatic     #332
1218: invokevirtual #90
1221: invokestatic  #91
1224: aload         27
1226: invokestatic  #20
1229: aload         27
1231: invokestatic  #92
1234: ldc_w         #336
1237: invokestatic  #23
1240: aload         27
1242: invokestatic  #93
1245: ldc_w         #336
1248: invokestatic  #23
1251: new           #83
1254: dup
1255: invokespecial #84
1258: ldc           #85
1260: invokevirtual #86
1263: aload         29
1265: invokevirtual #87
1268: ldc           #88
1270: invokevirtual #86
1273: getstatic     #156
1276: invokevirtual #87
1279: ldc           #85
1281: invokevirtual #86
1284: invokevirtual #89
1287: aload         29
1289: getstatic     #156
1292: invokevirtual #90
1295: invokestatic  #91
1298: aload         32
1300: invokestatic  #20
1303: aload         34
1305: invokestatic  #20
1308: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test420
Start line: 14403
End line: 14424
Method source code: 
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer7 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter8 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer7);
        harmonicFitter8.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter8.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray15 = harmonicFitter8.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint19 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter8.addObservedPoint(weightedObservedPoint19);
        harmonicFitter1.addObservedPoint(weightedObservedPoint19);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint25 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double26 = weightedObservedPoint25.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint25);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray15);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 35.0d + "'", double26 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #793
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aconst_null
53: astore        4
55: new           #8
58: dup
59: aload         4
61: invokespecial #9
64: astore        5
66: aload         5
68: dconst_1
69: ldc2_w        #32
72: invokevirtual #43
75: aload         5
77: dconst_0
78: ldc2_w        #34
81: invokevirtual #43
84: aload         5
86: invokevirtual #25
89: astore        6
91: new           #145
94: dup
95: dconst_1
96: dconst_0
97: ldc2_w        #34
100: invokespecial #146
103: astore        7
105: aload         5
107: aload         7
109: invokevirtual #123
112: aload_2
113: aload         7
115: invokevirtual #123
118: new           #145
121: dup
122: ldc2_w        #14
125: ldc2_w        #12
128: ldc2_w        #12
131: invokespecial #146
134: astore        8
136: aload         8
138: invokevirtual #148
141: dstore        9
143: aload_2
144: aload         8
146: invokevirtual #123
149: aload_3
150: invokestatic  #20
153: aload         6
155: invokestatic  #20
158: new           #83
161: dup
162: invokespecial #84
165: ldc           #85
167: invokevirtual #86
170: dload         9
172: invokevirtual #150
175: ldc           #88
177: invokevirtual #86
180: ldc2_w        #14
183: invokevirtual #150
186: ldc           #85
188: invokevirtual #86
191: invokevirtual #89
194: dload         9
196: ldc2_w        #14
199: dcmpl
200: ifne          207
203: iconst_1
204: goto          208
207: iconst_0
208: invokestatic  #91
211: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test421
Start line: 14427
End line: 14442
Method source code: 
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.addObservedPoint((double) (-1), (double) (byte) 1);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint21 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) 1.0f, (double) (short) 1, (double) 0.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint21);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #794
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload_2
78: ldc2_w        #10
81: dconst_1
82: invokevirtual #43
85: aload_2
86: invokevirtual #59
89: new           #145
92: dup
93: dconst_1
94: dconst_1
95: dconst_0
96: invokespecial #146
99: astore        5
101: aload_2
102: aload         5
104: invokevirtual #123
107: aload_3
108: invokestatic  #20
111: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test422
Start line: 14445
End line: 14458
Method source code: 
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint12 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter1.addObservedPoint(weightedObservedPoint12);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) 100);
        harmonicFitter1.addObservedPoint((double) (short) 1, 0.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #795
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: new           #145
60: dup
61: dconst_1
62: dconst_0
63: ldc2_w        #34
66: invokespecial #146
69: astore        4
71: aload_2
72: aload         4
74: invokevirtual #123
77: aload_2
78: dconst_1
79: ldc2_w        #34
82: invokevirtual #43
85: aload_2
86: dconst_1
87: dconst_0
88: invokevirtual #43
91: aload_3
92: invokestatic  #20
95: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test423
Start line: 14461
End line: 14589
Method source code: 
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATIONS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint14 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double15 = weightedObservedPoint14.getX();
        double double16 = weightedObservedPoint14.getY();
        double double17 = weightedObservedPoint14.getX();
        double double18 = weightedObservedPoint14.getY();
        harmonicFitter2.addObservedPoint(weightedObservedPoint14);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray20 = harmonicFitter2.getObservations();
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException21 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray20);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats23 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats24 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats25 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray27 = new java.lang.Object[] { localizedFormats25, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException28 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats24, objArray27);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats30 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray32 = new java.lang.Object[] { localizedFormats30, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException33 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats29, objArray32);
        mathIllegalArgumentException28.addSuppressed((java.lang.Throwable) mathIllegalArgumentException33);
        java.lang.Throwable[] throwableArray35 = mathIllegalArgumentException28.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException36 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats23, (java.lang.Object[]) throwableArray35);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext37 = mathIllegalStateException36.getContext();
        java.util.Set<java.lang.String> strSet38 = exceptionContext37.getKeys();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats39 = org.apache.commons.math3.exception.util.LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats40 = org.apache.commons.math3.exception.util.LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats41 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats42 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats43 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray45 = new java.lang.Object[] { localizedFormats43, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException46 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats42, objArray45);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats47 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats48 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray50 = new java.lang.Object[] { localizedFormats48, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException51 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats47, objArray50);
        mathIllegalArgumentException46.addSuppressed((java.lang.Throwable) mathIllegalArgumentException51);
        java.lang.Throwable[] throwableArray53 = mathIllegalArgumentException46.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException54 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats41, (java.lang.Object[]) throwableArray53);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats55 = org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats56 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats57 = org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats58 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats59 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray61 = new java.lang.Object[] { localizedFormats59, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException62 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats58, objArray61);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats63 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats64 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray66 = new java.lang.Object[] { localizedFormats64, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException67 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats63, objArray66);
        mathIllegalArgumentException62.addSuppressed((java.lang.Throwable) mathIllegalArgumentException67);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats69 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats70 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray72 = new java.lang.Object[] { localizedFormats70, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException73 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException67, (org.apache.commons.math3.exception.util.Localizable) localizedFormats69, objArray72);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException74 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats57, objArray72);
        java.lang.Object[] objArray75 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray72);
        org.apache.commons.math3.exception.ZeroException zeroException76 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats56, objArray75);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException77 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats55, objArray75);
        org.apache.commons.math3.exception.ZeroException zeroException78 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats41, objArray75);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException79 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats40, objArray75);
        exceptionContext37.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats39, objArray75);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException81 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException21, (org.apache.commons.math3.exception.util.Localizable) localizedFormats22, objArray75);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATIONS + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATIONS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray20);
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertTrue("'" + localizedFormats23 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION + "'", localizedFormats23.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION));
        org.junit.Assert.assertTrue("'" + localizedFormats24 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats24.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats25 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats25.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats30 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats30.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(exceptionContext37);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + localizedFormats39 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE + "'", localizedFormats39.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INITIAL_CAPACITY_NOT_POSITIVE));
        org.junit.Assert.assertTrue("'" + localizedFormats40 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING + "'", localizedFormats40.equals(org.apache.commons.math3.exception.util.LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING));
        org.junit.Assert.assertTrue("'" + localizedFormats41 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION + "'", localizedFormats41.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION));
        org.junit.Assert.assertTrue("'" + localizedFormats42 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats42.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats43 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats43.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats47 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats47.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats48 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats48.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertTrue("'" + localizedFormats55 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY + "'", localizedFormats55.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY));
        org.junit.Assert.assertTrue("'" + localizedFormats56 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW + "'", localizedFormats56.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW));
        org.junit.Assert.assertTrue("'" + localizedFormats57 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT + "'", localizedFormats57.equals(org.apache.commons.math3.exception.util.LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT));
        org.junit.Assert.assertTrue("'" + localizedFormats58 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats58.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats59 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats59.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats63 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats63.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats64 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats64.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats69 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats69.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats70 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats70.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[ROW_INDEX_OUT_OF_RANGE, 10]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #796
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #797
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: dconst_1
42: ldc2_w        #32
45: invokevirtual #43
48: aload_3
49: dconst_0
50: ldc2_w        #34
53: invokevirtual #43
56: aload_3
57: invokevirtual #59
60: aload_3
61: invokevirtual #25
64: astore        4
66: new           #145
69: dup
70: ldc2_w        #14
73: ldc2_w        #12
76: ldc2_w        #12
79: invokespecial #146
82: astore        5
84: aload         5
86: invokevirtual #147
89: dstore        6
91: aload         5
93: invokevirtual #149
96: dstore        8
98: aload         5
100: invokevirtual #147
103: dstore        10
105: aload         5
107: invokevirtual #149
110: dstore        12
112: aload_3
113: aload         5
115: invokevirtual #123
118: aload_3
119: invokevirtual #25
122: astore        14
124: new           #130
127: dup
128: aload_1
129: aload         14
131: checkcast     #79
134: invokespecial #131
137: astore        15
139: getstatic     #161
142: astore        16
144: getstatic     #233
147: astore        17
149: getstatic     #127
152: astore        18
154: getstatic     #128
157: astore        19
159: iconst_2
160: anewarray     #5
163: dup
164: iconst_0
165: aload         19
167: aastore
168: dup
169: iconst_1
170: lconst_1
171: invokestatic  #129
174: aastore
175: astore        20
177: new           #130
180: dup
181: aload         18
183: aload         20
185: invokespecial #131
188: astore        21
190: getstatic     #127
193: astore        22
195: getstatic     #128
198: astore        23
200: iconst_2
201: anewarray     #5
204: dup
205: iconst_0
206: aload         23
208: aastore
209: dup
210: iconst_1
211: lconst_1
212: invokestatic  #129
215: aastore
216: astore        24
218: new           #130
221: dup
222: aload         22
224: aload         24
226: invokespecial #131
229: astore        25
231: aload         21
233: aload         25
235: invokevirtual #132
238: aload         21
240: invokevirtual #234
243: astore        26
245: new           #136
248: dup
249: aload         17
251: aload         26
253: checkcast     #79
256: invokespecial #138
259: astore        27
261: aload         27
263: invokevirtual #282
266: astore        28
268: aload         28
270: invokevirtual #370
273: astore        29
275: getstatic     #798
278: astore        30
280: getstatic     #445
283: astore        31
285: getstatic     #233
288: astore        32
290: getstatic     #127
293: astore        33
295: getstatic     #128
298: astore        34
300: iconst_2
301: anewarray     #5
304: dup
305: iconst_0
306: aload         34
308: aastore
309: dup
310: iconst_1
311: lconst_1
312: invokestatic  #129
315: aastore
316: astore        35
318: new           #130
321: dup
322: aload         33
324: aload         35
326: invokespecial #131
329: astore        36
331: getstatic     #127
334: astore        37
336: getstatic     #128
339: astore        38
341: iconst_2
342: anewarray     #5
345: dup
346: iconst_0
347: aload         38
349: aastore
350: dup
351: iconst_1
352: lconst_1
353: invokestatic  #129
356: aastore
357: astore        39
359: new           #130
362: dup
363: aload         37
365: aload         39
367: invokespecial #131
370: astore        40
372: aload         36
374: aload         40
376: invokevirtual #132
379: aload         36
381: invokevirtual #234
384: astore        41
386: new           #136
389: dup
390: aload         32
392: aload         41
394: checkcast     #79
397: invokespecial #138
400: astore        42
402: getstatic     #735
405: astore        43
407: getstatic     #125
410: astore        44
412: getstatic     #126
415: astore        45
417: getstatic     #127
420: astore        46
422: getstatic     #128
425: astore        47
427: iconst_2
428: anewarray     #5
431: dup
432: iconst_0
433: aload         47
435: aastore
436: dup
437: iconst_1
438: lconst_1
439: invokestatic  #129
442: aastore
443: astore        48
445: new           #130
448: dup
449: aload         46
451: aload         48
453: invokespecial #131
456: astore        49
458: getstatic     #127
461: astore        50
463: getstatic     #128
466: astore        51
468: iconst_2
469: anewarray     #5
472: dup
473: iconst_0
474: aload         51
476: aastore
477: dup
478: iconst_1
479: lconst_1
480: invokestatic  #129
483: aastore
484: astore        52
486: new           #130
489: dup
490: aload         50
492: aload         52
494: invokespecial #131
497: astore        53
499: aload         49
501: aload         53
503: invokevirtual #132
506: getstatic     #133
509: astore        54
511: getstatic     #134
514: astore        55
516: iconst_2
517: anewarray     #5
520: dup
521: iconst_0
522: aload         55
524: aastore
525: dup
526: iconst_1
527: bipush        10
529: invokestatic  #135
532: aastore
533: astore        56
535: new           #136
538: dup
539: aload         53
541: aload         54
543: aload         56
545: invokespecial #137
548: astore        57
550: new           #136
553: dup
554: aload         45
556: aload         56
558: invokespecial #138
561: astore        58
563: aload         56
565: invokestatic  #80
568: astore        59
570: new           #81
573: dup
574: aload         44
576: aload         59
578: invokespecial #82
581: astore        60
583: new           #136
586: dup
587: aload         43
589: aload         59
591: invokespecial #138
594: astore        61
596: new           #81
599: dup
600: aload         32
602: aload         59
604: invokespecial #82
607: astore        62
609: new           #130
612: dup
613: aload         31
615: aload         59
617: invokespecial #131
620: astore        63
622: aload         28
624: aload         30
626: aload         59
628: invokevirtual #169
631: new           #136
634: dup
635: aload         15
637: aload         16
639: aload         59
641: invokespecial #137
644: astore        64
646: new           #83
649: dup
650: invokespecial #84
653: ldc           #85
655: invokevirtual #86
658: aload_1
659: invokevirtual #87
662: ldc           #88
664: invokevirtual #86
667: getstatic     #797
670: invokevirtual #87
673: ldc           #85
675: invokevirtual #86
678: invokevirtual #89
681: aload_1
682: getstatic     #797
685: invokevirtual #90
688: invokestatic  #91
691: aload         4
693: invokestatic  #20
696: new           #83
699: dup
700: invokespecial #84
703: ldc           #85
705: invokevirtual #86
708: dload         6
710: invokevirtual #150
713: ldc           #88
715: invokevirtual #86
718: ldc2_w        #12
721: invokevirtual #150
724: ldc           #85
726: invokevirtual #86
729: invokevirtual #89
732: dload         6
734: ldc2_w        #12
737: dcmpl
738: ifne          745
741: iconst_1
742: goto          746
745: iconst_0
746: invokestatic  #91
749: new           #83
752: dup
753: invokespecial #84
756: ldc           #85
758: invokevirtual #86
761: dload         8
763: invokevirtual #150
766: ldc           #88
768: invokevirtual #86
771: ldc2_w        #12
774: invokevirtual #150
777: ldc           #85
779: invokevirtual #86
782: invokevirtual #89
785: dload         8
787: ldc2_w        #12
790: dcmpl
791: ifne          798
794: iconst_1
795: goto          799
798: iconst_0
799: invokestatic  #91
802: new           #83
805: dup
806: invokespecial #84
809: ldc           #85
811: invokevirtual #86
814: dload         10
816: invokevirtual #150
819: ldc           #88
821: invokevirtual #86
824: ldc2_w        #12
827: invokevirtual #150
830: ldc           #85
832: invokevirtual #86
835: invokevirtual #89
838: dload         10
840: ldc2_w        #12
843: dcmpl
844: ifne          851
847: iconst_1
848: goto          852
851: iconst_0
852: invokestatic  #91
855: new           #83
858: dup
859: invokespecial #84
862: ldc           #85
864: invokevirtual #86
867: dload         12
869: invokevirtual #150
872: ldc           #88
874: invokevirtual #86
877: ldc2_w        #12
880: invokevirtual #150
883: ldc           #85
885: invokevirtual #86
888: invokevirtual #89
891: dload         12
893: ldc2_w        #12
896: dcmpl
897: ifne          904
900: iconst_1
901: goto          905
904: iconst_0
905: invokestatic  #91
908: aload         14
910: invokestatic  #20
913: new           #83
916: dup
917: invokespecial #84
920: ldc           #85
922: invokevirtual #86
925: aload         16
927: invokevirtual #87
930: ldc           #88
932: invokevirtual #86
935: getstatic     #161
938: invokevirtual #87
941: ldc           #85
943: invokevirtual #86
946: invokevirtual #89
949: aload         16
951: getstatic     #161
954: invokevirtual #90
957: invokestatic  #91
960: new           #83
963: dup
964: invokespecial #84
967: ldc           #85
969: invokevirtual #86
972: aload         17
974: invokevirtual #87
977: ldc           #88
979: invokevirtual #86
982: getstatic     #233
985: invokevirtual #87
988: ldc           #85
990: invokevirtual #86
993: invokevirtual #89
996: aload         17
998: getstatic     #233
1001: invokevirtual #90
1004: invokestatic  #91
1007: new           #83
1010: dup
1011: invokespecial #84
1014: ldc           #85
1016: invokevirtual #86
1019: aload         18
1021: invokevirtual #87
1024: ldc           #88
1026: invokevirtual #86
1029: getstatic     #127
1032: invokevirtual #87
1035: ldc           #85
1037: invokevirtual #86
1040: invokevirtual #89
1043: aload         18
1045: getstatic     #127
1048: invokevirtual #90
1051: invokestatic  #91
1054: new           #83
1057: dup
1058: invokespecial #84
1061: ldc           #85
1063: invokevirtual #86
1066: aload         19
1068: invokevirtual #87
1071: ldc           #88
1073: invokevirtual #86
1076: getstatic     #128
1079: invokevirtual #87
1082: ldc           #85
1084: invokevirtual #86
1087: invokevirtual #89
1090: aload         19
1092: getstatic     #128
1095: invokevirtual #90
1098: invokestatic  #91
1101: aload         20
1103: invokestatic  #20
1106: aload         20
1108: invokestatic  #92
1111: ldc           #140
1113: invokestatic  #23
1116: aload         20
1118: invokestatic  #93
1121: ldc           #140
1123: invokestatic  #23
1126: new           #83
1129: dup
1130: invokespecial #84
1133: ldc           #85
1135: invokevirtual #86
1138: aload         22
1140: invokevirtual #87
1143: ldc           #88
1145: invokevirtual #86
1148: getstatic     #127
1151: invokevirtual #87
1154: ldc           #85
1156: invokevirtual #86
1159: invokevirtual #89
1162: aload         22
1164: getstatic     #127
1167: invokevirtual #90
1170: invokestatic  #91
1173: new           #83
1176: dup
1177: invokespecial #84
1180: ldc           #85
1182: invokevirtual #86
1185: aload         23
1187: invokevirtual #87
1190: ldc           #88
1192: invokevirtual #86
1195: getstatic     #128
1198: invokevirtual #87
1201: ldc           #85
1203: invokevirtual #86
1206: invokevirtual #89
1209: aload         23
1211: getstatic     #128
1214: invokevirtual #90
1217: invokestatic  #91
1220: aload         24
1222: invokestatic  #20
1225: aload         24
1227: invokestatic  #92
1230: ldc           #140
1232: invokestatic  #23
1235: aload         24
1237: invokestatic  #93
1240: ldc           #140
1242: invokestatic  #23
1245: aload         26
1247: invokestatic  #20
1250: aload         28
1252: invokestatic  #20
1255: aload         29
1257: invokestatic  #20
1260: new           #83
1263: dup
1264: invokespecial #84
1267: ldc           #85
1269: invokevirtual #86
1272: aload         30
1274: invokevirtual #87
1277: ldc           #88
1279: invokevirtual #86
1282: getstatic     #798
1285: invokevirtual #87
1288: ldc           #85
1290: invokevirtual #86
1293: invokevirtual #89
1296: aload         30
1298: getstatic     #798
1301: invokevirtual #90
1304: invokestatic  #91
1307: new           #83
1310: dup
1311: invokespecial #84
1314: ldc           #85
1316: invokevirtual #86
1319: aload         31
1321: invokevirtual #87
1324: ldc           #88
1326: invokevirtual #86
1329: getstatic     #445
1332: invokevirtual #87
1335: ldc           #85
1337: invokevirtual #86
1340: invokevirtual #89
1343: aload         31
1345: getstatic     #445
1348: invokevirtual #90
1351: invokestatic  #91
1354: new           #83
1357: dup
1358: invokespecial #84
1361: ldc           #85
1363: invokevirtual #86
1366: aload         32
1368: invokevirtual #87
1371: ldc           #88
1373: invokevirtual #86
1376: getstatic     #233
1379: invokevirtual #87
1382: ldc           #85
1384: invokevirtual #86
1387: invokevirtual #89
1390: aload         32
1392: getstatic     #233
1395: invokevirtual #90
1398: invokestatic  #91
1401: new           #83
1404: dup
1405: invokespecial #84
1408: ldc           #85
1410: invokevirtual #86
1413: aload         33
1415: invokevirtual #87
1418: ldc           #88
1420: invokevirtual #86
1423: getstatic     #127
1426: invokevirtual #87
1429: ldc           #85
1431: invokevirtual #86
1434: invokevirtual #89
1437: aload         33
1439: getstatic     #127
1442: invokevirtual #90
1445: invokestatic  #91
1448: new           #83
1451: dup
1452: invokespecial #84
1455: ldc           #85
1457: invokevirtual #86
1460: aload         34
1462: invokevirtual #87
1465: ldc           #88
1467: invokevirtual #86
1470: getstatic     #128
1473: invokevirtual #87
1476: ldc           #85
1478: invokevirtual #86
1481: invokevirtual #89
1484: aload         34
1486: getstatic     #128
1489: invokevirtual #90
1492: invokestatic  #91
1495: aload         35
1497: invokestatic  #20
1500: aload         35
1502: invokestatic  #92
1505: ldc           #140
1507: invokestatic  #23
1510: aload         35
1512: invokestatic  #93
1515: ldc           #140
1517: invokestatic  #23
1520: new           #83
1523: dup
1524: invokespecial #84
1527: ldc           #85
1529: invokevirtual #86
1532: aload         37
1534: invokevirtual #87
1537: ldc           #88
1539: invokevirtual #86
1542: getstatic     #127
1545: invokevirtual #87
1548: ldc           #85
1550: invokevirtual #86
1553: invokevirtual #89
1556: aload         37
1558: getstatic     #127
1561: invokevirtual #90
1564: invokestatic  #91
1567: new           #83
1570: dup
1571: invokespecial #84
1574: ldc           #85
1576: invokevirtual #86
1579: aload         38
1581: invokevirtual #87
1584: ldc           #88
1586: invokevirtual #86
1589: getstatic     #128
1592: invokevirtual #87
1595: ldc           #85
1597: invokevirtual #86
1600: invokevirtual #89
1603: aload         38
1605: getstatic     #128
1608: invokevirtual #90
1611: invokestatic  #91
1614: aload         39
1616: invokestatic  #20
1619: aload         39
1621: invokestatic  #92
1624: ldc           #140
1626: invokestatic  #23
1629: aload         39
1631: invokestatic  #93
1634: ldc           #140
1636: invokestatic  #23
1639: aload         41
1641: invokestatic  #20
1644: new           #83
1647: dup
1648: invokespecial #84
1651: ldc           #85
1653: invokevirtual #86
1656: aload         43
1658: invokevirtual #87
1661: ldc           #88
1663: invokevirtual #86
1666: getstatic     #735
1669: invokevirtual #87
1672: ldc           #85
1674: invokevirtual #86
1677: invokevirtual #89
1680: aload         43
1682: getstatic     #735
1685: invokevirtual #90
1688: invokestatic  #91
1691: new           #83
1694: dup
1695: invokespecial #84
1698: ldc           #85
1700: invokevirtual #86
1703: aload         44
1705: invokevirtual #87
1708: ldc           #88
1710: invokevirtual #86
1713: getstatic     #125
1716: invokevirtual #87
1719: ldc           #85
1721: invokevirtual #86
1724: invokevirtual #89
1727: aload         44
1729: getstatic     #125
1732: invokevirtual #90
1735: invokestatic  #91
1738: new           #83
1741: dup
1742: invokespecial #84
1745: ldc           #85
1747: invokevirtual #86
1750: aload         45
1752: invokevirtual #87
1755: ldc           #88
1757: invokevirtual #86
1760: getstatic     #126
1763: invokevirtual #87
1766: ldc           #85
1768: invokevirtual #86
1771: invokevirtual #89
1774: aload         45
1776: getstatic     #126
1779: invokevirtual #90
1782: invokestatic  #91
1785: new           #83
1788: dup
1789: invokespecial #84
1792: ldc           #85
1794: invokevirtual #86
1797: aload         46
1799: invokevirtual #87
1802: ldc           #88
1804: invokevirtual #86
1807: getstatic     #127
1810: invokevirtual #87
1813: ldc           #85
1815: invokevirtual #86
1818: invokevirtual #89
1821: aload         46
1823: getstatic     #127
1826: invokevirtual #90
1829: invokestatic  #91
1832: new           #83
1835: dup
1836: invokespecial #84
1839: ldc           #85
1841: invokevirtual #86
1844: aload         47
1846: invokevirtual #87
1849: ldc           #88
1851: invokevirtual #86
1854: getstatic     #128
1857: invokevirtual #87
1860: ldc           #85
1862: invokevirtual #86
1865: invokevirtual #89
1868: aload         47
1870: getstatic     #128
1873: invokevirtual #90
1876: invokestatic  #91
1879: aload         48
1881: invokestatic  #20
1884: aload         48
1886: invokestatic  #92
1889: ldc           #140
1891: invokestatic  #23
1894: aload         48
1896: invokestatic  #93
1899: ldc           #140
1901: invokestatic  #23
1904: new           #83
1907: dup
1908: invokespecial #84
1911: ldc           #85
1913: invokevirtual #86
1916: aload         50
1918: invokevirtual #87
1921: ldc           #88
1923: invokevirtual #86
1926: getstatic     #127
1929: invokevirtual #87
1932: ldc           #85
1934: invokevirtual #86
1937: invokevirtual #89
1940: aload         50
1942: getstatic     #127
1945: invokevirtual #90
1948: invokestatic  #91
1951: new           #83
1954: dup
1955: invokespecial #84
1958: ldc           #85
1960: invokevirtual #86
1963: aload         51
1965: invokevirtual #87
1968: ldc           #88
1970: invokevirtual #86
1973: getstatic     #128
1976: invokevirtual #87
1979: ldc           #85
1981: invokevirtual #86
1984: invokevirtual #89
1987: aload         51
1989: getstatic     #128
1992: invokevirtual #90
1995: invokestatic  #91
1998: aload         52
2000: invokestatic  #20
2003: aload         52
2005: invokestatic  #92
2008: ldc           #140
2010: invokestatic  #23
2013: aload         52
2015: invokestatic  #93
2018: ldc           #140
2020: invokestatic  #23
2023: new           #83
2026: dup
2027: invokespecial #84
2030: ldc           #85
2032: invokevirtual #86
2035: aload         54
2037: invokevirtual #87
2040: ldc           #88
2042: invokevirtual #86
2045: getstatic     #133
2048: invokevirtual #87
2051: ldc           #85
2053: invokevirtual #86
2056: invokevirtual #89
2059: aload         54
2061: getstatic     #133
2064: invokevirtual #90
2067: invokestatic  #91
2070: new           #83
2073: dup
2074: invokespecial #84
2077: ldc           #85
2079: invokevirtual #86
2082: aload         55
2084: invokevirtual #87
2087: ldc           #88
2089: invokevirtual #86
2092: getstatic     #134
2095: invokevirtual #87
2098: ldc           #85
2100: invokevirtual #86
2103: invokevirtual #89
2106: aload         55
2108: getstatic     #134
2111: invokevirtual #90
2114: invokestatic  #91
2117: aload         56
2119: invokestatic  #20
2122: aload         56
2124: invokestatic  #92
2127: ldc           #141
2129: invokestatic  #23
2132: aload         56
2134: invokestatic  #93
2137: ldc           #141
2139: invokestatic  #23
2142: aload         59
2144: invokestatic  #20
2147: aload         59
2149: invokestatic  #92
2152: ldc           #141
2154: invokestatic  #23
2157: aload         59
2159: invokestatic  #93
2162: ldc           #141
2164: invokestatic  #23
2167: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test424
Start line: 14592
End line: 14728
Method source code: 
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext11 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException9);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats12 = org.apache.commons.math3.exception.util.LocalizedFormats.WHOLE_FORMAT;
        java.lang.Number number14 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException16 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number14, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException19 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException16, (org.apache.commons.math3.exception.util.Localizable) localizedFormats17, objArray18);
        org.apache.commons.math3.exception.util.Localizable localizable20 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray24 = new java.lang.Object[] { localizedFormats22, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException25 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats21, objArray24);
        org.apache.commons.math3.exception.ZeroException zeroException26 = new org.apache.commons.math3.exception.ZeroException(localizable20, objArray24);
        java.lang.Number number27 = zeroException26.getArgument();
        java.lang.Number number28 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException31 = new org.apache.commons.math3.exception.NumberIsTooSmallException(number28, (java.lang.Number) (byte) 0, true);
        boolean boolean32 = numberIsTooSmallException31.getBoundIsAllowed();
        zeroException26.addSuppressed((java.lang.Throwable) numberIsTooSmallException31);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext34 = zeroException26.getContext();
        numberIsTooSmallException16.addSuppressed((java.lang.Throwable) zeroException26);
        java.lang.Number number36 = zeroException26.getArgument();
        java.lang.Throwable[] throwableArray37 = zeroException26.getSuppressed();
        exceptionContext11.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats12, (java.lang.Object[]) throwableArray37);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats39 = org.apache.commons.math3.exception.util.LocalizedFormats.INDEX;
        java.lang.Number number41 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException43 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number41, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats44 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException46 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException43, (org.apache.commons.math3.exception.util.Localizable) localizedFormats44, objArray45);
        boolean boolean47 = numberIsTooSmallException43.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext48 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException43);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats49 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats50 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray52 = new java.lang.Object[] { localizedFormats50, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException53 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats49, objArray52);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats54 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats55 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray57 = new java.lang.Object[] { localizedFormats55, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException58 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats54, objArray57);
        mathIllegalArgumentException53.addSuppressed((java.lang.Throwable) mathIllegalArgumentException58);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext60 = mathIllegalArgumentException53.getContext();
        java.lang.Object obj62 = exceptionContext60.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats63 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer64 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter65 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer64);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray66 = harmonicFitter65.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray67 = harmonicFitter65.getObservations();
        exceptionContext60.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats63, (java.lang.Object[]) weightedObservedPointArray67);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats69 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer70 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter71 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer70);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray72 = harmonicFitter71.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException73 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats69, (java.lang.Object[]) weightedObservedPointArray72);
        exceptionContext48.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats63, (java.lang.Object[]) weightedObservedPointArray72);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException75 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats39, (java.lang.Object[]) weightedObservedPointArray72);
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException79 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray80 = numberIsTooSmallException79.getSuppressed();
        java.lang.Object[] objArray81 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) throwableArray80);
        exceptionContext11.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats39, objArray81);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats83 = org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_RANGE_RIGHT;
        java.lang.String str84 = localizedFormats83.getSourceString();
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException88 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray89 = numberIsTooSmallException88.getSuppressed();
        java.lang.Object[] objArray90 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) throwableArray89);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException91 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats83, objArray90);
        org.apache.commons.math3.exception.ZeroException zeroException92 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats39, objArray90);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats12 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.WHOLE_FORMAT + "'", localizedFormats12.equals(org.apache.commons.math3.exception.util.LocalizedFormats.WHOLE_FORMAT));
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals("'" + number27 + "' != '" + 0 + "'", number27, 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(exceptionContext34);
        org.junit.Assert.assertEquals("'" + number36 + "' != '" + 0 + "'", number36, 0);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertTrue("'" + localizedFormats39 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INDEX + "'", localizedFormats39.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INDEX));
        org.junit.Assert.assertTrue("'" + localizedFormats44 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats44.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats49 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats49.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats50 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats50.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats54 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats54.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats55 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats55.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext60);
        org.junit.Assert.assertNull(obj62);
        org.junit.Assert.assertTrue("'" + localizedFormats63 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats63.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray66);
        org.junit.Assert.assertNotNull(weightedObservedPointArray67);
        org.junit.Assert.assertTrue("'" + localizedFormats69 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats69.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray72);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertTrue("'" + localizedFormats83 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_RANGE_RIGHT + "'", localizedFormats83.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OUT_OF_RANGE_RIGHT));
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "{0} out of [{1}, {2}) range" + "'", str84, "{0} out of [{1}, {2}) range");
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #799
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: new           #163
111: dup
112: aload         8
114: invokespecial #164
117: astore        9
119: getstatic     #800
122: astore        10
124: aconst_null
125: astore        11
127: new           #28
130: dup
131: bipush        100
133: invokestatic  #159
136: aload         11
138: iconst_0
139: invokespecial #160
142: astore        12
144: getstatic     #161
147: astore        13
149: iconst_0
150: anewarray     #5
153: astore        14
155: new           #136
158: dup
159: aload         12
161: aload         13
163: aload         14
165: invokespecial #137
168: astore        15
170: aconst_null
171: astore        16
173: getstatic     #127
176: astore        17
178: getstatic     #128
181: astore        18
183: iconst_2
184: anewarray     #5
187: dup
188: iconst_0
189: aload         18
191: aastore
192: dup
193: iconst_1
194: lconst_1
195: invokestatic  #129
198: aastore
199: astore        19
201: new           #130
204: dup
205: aload         17
207: aload         19
209: invokespecial #131
212: astore        20
214: new           #81
217: dup
218: aload         16
220: aload         19
222: invokespecial #82
225: astore        21
227: aload         21
229: invokevirtual #243
232: astore        22
234: aconst_null
235: astore        23
237: new           #28
240: dup
241: aload         23
243: iconst_0
244: invokestatic  #159
247: iconst_1
248: invokespecial #160
251: astore        24
253: aload         24
255: invokevirtual #162
258: istore        25
260: aload         21
262: aload         24
264: invokevirtual #590
267: aload         21
269: invokevirtual #412
272: astore        26
274: aload         12
276: aload         21
278: invokevirtual #573
281: aload         21
283: invokevirtual #243
286: astore        27
288: aload         21
290: invokevirtual #405
293: astore        28
295: aload         9
297: aload         10
299: aload         28
301: checkcast     #79
304: invokevirtual #169
307: getstatic     #231
310: astore        29
312: aconst_null
313: astore        30
315: new           #28
318: dup
319: bipush        100
321: invokestatic  #159
324: aload         30
326: iconst_0
327: invokespecial #160
330: astore        31
332: getstatic     #161
335: astore        32
337: iconst_0
338: anewarray     #5
341: astore        33
343: new           #136
346: dup
347: aload         31
349: aload         32
351: aload         33
353: invokespecial #137
356: astore        34
358: aload         31
360: invokevirtual #162
363: istore        35
365: new           #163
368: dup
369: aload         31
371: invokespecial #164
374: astore        36
376: getstatic     #127
379: astore        37
381: getstatic     #128
384: astore        38
386: iconst_2
387: anewarray     #5
390: dup
391: iconst_0
392: aload         38
394: aastore
395: dup
396: iconst_1
397: lconst_1
398: invokestatic  #129
401: aastore
402: astore        39
404: new           #130
407: dup
408: aload         37
410: aload         39
412: invokespecial #131
415: astore        40
417: getstatic     #127
420: astore        41
422: getstatic     #128
425: astore        42
427: iconst_2
428: anewarray     #5
431: dup
432: iconst_0
433: aload         42
435: aastore
436: dup
437: iconst_1
438: lconst_1
439: invokestatic  #129
442: aastore
443: astore        43
445: new           #130
448: dup
449: aload         41
451: aload         43
453: invokespecial #131
456: astore        44
458: aload         40
460: aload         44
462: invokevirtual #132
465: aload         40
467: invokevirtual #165
470: astore        45
472: aload         45
474: ldc           #166
476: invokevirtual #167
479: astore        46
481: getstatic     #168
484: astore        47
486: aconst_null
487: astore        48
489: new           #8
492: dup
493: aload         48
495: invokespecial #9
498: astore        49
500: aload         49
502: invokevirtual #25
505: astore        50
507: aload         49
509: invokevirtual #25
512: astore        51
514: aload         45
516: aload         47
518: aload         51
520: checkcast     #79
523: invokevirtual #169
526: getstatic     #156
529: astore        52
531: aconst_null
532: astore        53
534: new           #8
537: dup
538: aload         53
540: invokespecial #9
543: astore        54
545: aload         54
547: invokevirtual #25
550: astore        55
552: new           #81
555: dup
556: aload         52
558: aload         55
560: checkcast     #79
563: invokespecial #82
566: astore        56
568: aload         36
570: aload         47
572: aload         55
574: checkcast     #79
577: invokevirtual #169
580: new           #130
583: dup
584: aload         29
586: aload         55
588: checkcast     #79
591: invokespecial #131
594: astore        57
596: new           #28
599: dup
600: ldc2_w        #277
603: invokestatic  #129
606: bipush        10
608: invokestatic  #159
611: iconst_1
612: invokespecial #160
615: astore        58
617: aload         58
619: invokevirtual #334
622: astore        59
624: aload         59
626: checkcast     #79
629: invokestatic  #80
632: astore        60
634: aload         9
636: aload         29
638: aload         60
640: invokevirtual #169
643: getstatic     #801
646: astore        61
648: aload         61
650: invokevirtual #301
653: astore        62
655: new           #28
658: dup
659: ldc2_w        #277
662: invokestatic  #129
665: bipush        10
667: invokestatic  #159
670: iconst_1
671: invokespecial #160
674: astore        63
676: aload         63
678: invokevirtual #334
681: astore        64
683: aload         64
685: checkcast     #79
688: invokestatic  #80
691: astore        65
693: new           #130
696: dup
697: aload         61
699: aload         65
701: invokespecial #131
704: astore        66
706: new           #81
709: dup
710: aload         29
712: aload         65
714: invokespecial #82
717: astore        67
719: new           #83
722: dup
723: invokespecial #84
726: ldc           #85
728: invokevirtual #86
731: aload_1
732: invokevirtual #87
735: ldc           #88
737: invokevirtual #86
740: getstatic     #127
743: invokevirtual #87
746: ldc           #85
748: invokevirtual #86
751: invokevirtual #89
754: aload_1
755: getstatic     #127
758: invokevirtual #90
761: invokestatic  #91
764: new           #83
767: dup
768: invokespecial #84
771: ldc           #85
773: invokevirtual #86
776: aload_2
777: invokevirtual #87
780: ldc           #88
782: invokevirtual #86
785: getstatic     #128
788: invokevirtual #87
791: ldc           #85
793: invokevirtual #86
796: invokevirtual #89
799: aload_2
800: getstatic     #128
803: invokevirtual #90
806: invokestatic  #91
809: aload_3
810: invokestatic  #20
813: aload_3
814: invokestatic  #92
817: ldc           #140
819: invokestatic  #23
822: aload_3
823: invokestatic  #93
826: ldc           #140
828: invokestatic  #23
831: new           #83
834: dup
835: invokespecial #84
838: ldc           #85
840: invokevirtual #86
843: aload         5
845: invokevirtual #87
848: ldc           #88
850: invokevirtual #86
853: getstatic     #127
856: invokevirtual #87
859: ldc           #85
861: invokevirtual #86
864: invokevirtual #89
867: aload         5
869: getstatic     #127
872: invokevirtual #90
875: invokestatic  #91
878: new           #83
881: dup
882: invokespecial #84
885: ldc           #85
887: invokevirtual #86
890: aload         6
892: invokevirtual #87
895: ldc           #88
897: invokevirtual #86
900: getstatic     #128
903: invokevirtual #87
906: ldc           #85
908: invokevirtual #86
911: invokevirtual #89
914: aload         6
916: getstatic     #128
919: invokevirtual #90
922: invokestatic  #91
925: aload         7
927: invokestatic  #20
930: aload         7
932: invokestatic  #92
935: ldc           #140
937: invokestatic  #23
940: aload         7
942: invokestatic  #93
945: ldc           #140
947: invokestatic  #23
950: new           #83
953: dup
954: invokespecial #84
957: ldc           #85
959: invokevirtual #86
962: aload         10
964: invokevirtual #87
967: ldc           #88
969: invokevirtual #86
972: getstatic     #800
975: invokevirtual #87
978: ldc           #85
980: invokevirtual #86
983: invokevirtual #89
986: aload         10
988: getstatic     #800
991: invokevirtual #90
994: invokestatic  #91
997: new           #83
1000: dup
1001: invokespecial #84
1004: ldc           #85
1006: invokevirtual #86
1009: aload         13
1011: invokevirtual #87
1014: ldc           #88
1016: invokevirtual #86
1019: getstatic     #161
1022: invokevirtual #87
1025: ldc           #85
1027: invokevirtual #86
1030: invokevirtual #89
1033: aload         13
1035: getstatic     #161
1038: invokevirtual #90
1041: invokestatic  #91
1044: aload         14
1046: invokestatic  #20
1049: aload         14
1051: invokestatic  #92
1054: ldc           #74
1056: invokestatic  #23
1059: aload         14
1061: invokestatic  #93
1064: ldc           #74
1066: invokestatic  #23
1069: new           #83
1072: dup
1073: invokespecial #84
1076: ldc           #85
1078: invokevirtual #86
1081: aload         17
1083: invokevirtual #87
1086: ldc           #88
1088: invokevirtual #86
1091: getstatic     #127
1094: invokevirtual #87
1097: ldc           #85
1099: invokevirtual #86
1102: invokevirtual #89
1105: aload         17
1107: getstatic     #127
1110: invokevirtual #90
1113: invokestatic  #91
1116: new           #83
1119: dup
1120: invokespecial #84
1123: ldc           #85
1125: invokevirtual #86
1128: aload         18
1130: invokevirtual #87
1133: ldc           #88
1135: invokevirtual #86
1138: getstatic     #128
1141: invokevirtual #87
1144: ldc           #85
1146: invokevirtual #86
1149: invokevirtual #89
1152: aload         18
1154: getstatic     #128
1157: invokevirtual #90
1160: invokestatic  #91
1163: aload         19
1165: invokestatic  #20
1168: aload         19
1170: invokestatic  #92
1173: ldc           #140
1175: invokestatic  #23
1178: aload         19
1180: invokestatic  #93
1183: ldc           #140
1185: invokestatic  #23
1188: new           #83
1191: dup
1192: invokespecial #84
1195: ldc           #85
1197: invokevirtual #86
1200: aload         22
1202: invokevirtual #87
1205: ldc           #88
1207: invokevirtual #86
1210: iconst_0
1211: invokevirtual #244
1214: ldc           #85
1216: invokevirtual #86
1219: invokevirtual #89
1222: aload         22
1224: iconst_0
1225: invokestatic  #135
1228: invokestatic  #245
1231: new           #83
1234: dup
1235: invokespecial #84
1238: ldc           #85
1240: invokevirtual #86
1243: iload         25
1245: invokevirtual #170
1248: ldc           #88
1250: invokevirtual #86
1253: iconst_1
1254: invokevirtual #170
1257: ldc           #85
1259: invokevirtual #86
1262: invokevirtual #89
1265: iload         25
1267: iconst_1
1268: if_icmpne     1275
1271: iconst_1
1272: goto          1276
1275: iconst_0
1276: invokestatic  #91
1279: aload         26
1281: invokestatic  #20
1284: new           #83
1287: dup
1288: invokespecial #84
1291: ldc           #85
1293: invokevirtual #86
1296: aload         27
1298: invokevirtual #87
1301: ldc           #88
1303: invokevirtual #86
1306: iconst_0
1307: invokevirtual #244
1310: ldc           #85
1312: invokevirtual #86
1315: invokevirtual #89
1318: aload         27
1320: iconst_0
1321: invokestatic  #135
1324: invokestatic  #245
1327: aload         28
1329: invokestatic  #20
1332: new           #83
1335: dup
1336: invokespecial #84
1339: ldc           #85
1341: invokevirtual #86
1344: aload         29
1346: invokevirtual #87
1349: ldc           #88
1351: invokevirtual #86
1354: getstatic     #231
1357: invokevirtual #87
1360: ldc           #85
1362: invokevirtual #86
1365: invokevirtual #89
1368: aload         29
1370: getstatic     #231
1373: invokevirtual #90
1376: invokestatic  #91
1379: new           #83
1382: dup
1383: invokespecial #84
1386: ldc           #85
1388: invokevirtual #86
1391: aload         32
1393: invokevirtual #87
1396: ldc           #88
1398: invokevirtual #86
1401: getstatic     #161
1404: invokevirtual #87
1407: ldc           #85
1409: invokevirtual #86
1412: invokevirtual #89
1415: aload         32
1417: getstatic     #161
1420: invokevirtual #90
1423: invokestatic  #91
1426: aload         33
1428: invokestatic  #20
1431: aload         33
1433: invokestatic  #92
1436: ldc           #74
1438: invokestatic  #23
1441: aload         33
1443: invokestatic  #93
1446: ldc           #74
1448: invokestatic  #23
1451: new           #83
1454: dup
1455: invokespecial #84
1458: ldc           #85
1460: invokevirtual #86
1463: iload         35
1465: invokevirtual #170
1468: ldc           #88
1470: invokevirtual #86
1473: iconst_0
1474: invokevirtual #170
1477: ldc           #85
1479: invokevirtual #86
1482: invokevirtual #89
1485: iload         35
1487: ifne          1494
1490: iconst_1
1491: goto          1495
1494: iconst_0
1495: invokestatic  #91
1498: new           #83
1501: dup
1502: invokespecial #84
1505: ldc           #85
1507: invokevirtual #86
1510: aload         37
1512: invokevirtual #87
1515: ldc           #88
1517: invokevirtual #86
1520: getstatic     #127
1523: invokevirtual #87
1526: ldc           #85
1528: invokevirtual #86
1531: invokevirtual #89
1534: aload         37
1536: getstatic     #127
1539: invokevirtual #90
1542: invokestatic  #91
1545: new           #83
1548: dup
1549: invokespecial #84
1552: ldc           #85
1554: invokevirtual #86
1557: aload         38
1559: invokevirtual #87
1562: ldc           #88
1564: invokevirtual #86
1567: getstatic     #128
1570: invokevirtual #87
1573: ldc           #85
1575: invokevirtual #86
1578: invokevirtual #89
1581: aload         38
1583: getstatic     #128
1586: invokevirtual #90
1589: invokestatic  #91
1592: aload         39
1594: invokestatic  #20
1597: aload         39
1599: invokestatic  #92
1602: ldc           #140
1604: invokestatic  #23
1607: aload         39
1609: invokestatic  #93
1612: ldc           #140
1614: invokestatic  #23
1617: new           #83
1620: dup
1621: invokespecial #84
1624: ldc           #85
1626: invokevirtual #86
1629: aload         41
1631: invokevirtual #87
1634: ldc           #88
1636: invokevirtual #86
1639: getstatic     #127
1642: invokevirtual #87
1645: ldc           #85
1647: invokevirtual #86
1650: invokevirtual #89
1653: aload         41
1655: getstatic     #127
1658: invokevirtual #90
1661: invokestatic  #91
1664: new           #83
1667: dup
1668: invokespecial #84
1671: ldc           #85
1673: invokevirtual #86
1676: aload         42
1678: invokevirtual #87
1681: ldc           #88
1683: invokevirtual #86
1686: getstatic     #128
1689: invokevirtual #87
1692: ldc           #85
1694: invokevirtual #86
1697: invokevirtual #89
1700: aload         42
1702: getstatic     #128
1705: invokevirtual #90
1708: invokestatic  #91
1711: aload         43
1713: invokestatic  #20
1716: aload         43
1718: invokestatic  #92
1721: ldc           #140
1723: invokestatic  #23
1726: aload         43
1728: invokestatic  #93
1731: ldc           #140
1733: invokestatic  #23
1736: aload         45
1738: invokestatic  #20
1741: aload         46
1743: invokestatic  #171
1746: new           #83
1749: dup
1750: invokespecial #84
1753: ldc           #85
1755: invokevirtual #86
1758: aload         47
1760: invokevirtual #87
1763: ldc           #88
1765: invokevirtual #86
1768: getstatic     #168
1771: invokevirtual #87
1774: ldc           #85
1776: invokevirtual #86
1779: invokevirtual #89
1782: aload         47
1784: getstatic     #168
1787: invokevirtual #90
1790: invokestatic  #91
1793: aload         50
1795: invokestatic  #20
1798: aload         51
1800: invokestatic  #20
1803: new           #83
1806: dup
1807: invokespecial #84
1810: ldc           #85
1812: invokevirtual #86
1815: aload         52
1817: invokevirtual #87
1820: ldc           #88
1822: invokevirtual #86
1825: getstatic     #156
1828: invokevirtual #87
1831: ldc           #85
1833: invokevirtual #86
1836: invokevirtual #89
1839: aload         52
1841: getstatic     #156
1844: invokevirtual #90
1847: invokestatic  #91
1850: aload         55
1852: invokestatic  #20
1855: aload         59
1857: invokestatic  #20
1860: aload         60
1862: invokestatic  #20
1865: aload         60
1867: invokestatic  #92
1870: ldc           #74
1872: invokestatic  #23
1875: aload         60
1877: invokestatic  #93
1880: ldc           #74
1882: invokestatic  #23
1885: new           #83
1888: dup
1889: invokespecial #84
1892: ldc           #85
1894: invokevirtual #86
1897: aload         61
1899: invokevirtual #87
1902: ldc           #88
1904: invokevirtual #86
1907: getstatic     #801
1910: invokevirtual #87
1913: ldc           #85
1915: invokevirtual #86
1918: invokevirtual #89
1921: aload         61
1923: getstatic     #801
1926: invokevirtual #90
1929: invokestatic  #91
1932: new           #83
1935: dup
1936: invokespecial #84
1939: ldc           #85
1941: invokevirtual #86
1944: aload         62
1946: invokevirtual #86
1949: ldc_w         #802
1952: invokevirtual #86
1955: invokevirtual #89
1958: aload         62
1960: ldc_w         #446
1963: invokestatic  #245
1966: aload         64
1968: invokestatic  #20
1971: aload         65
1973: invokestatic  #20
1976: aload         65
1978: invokestatic  #92
1981: ldc           #74
1983: invokestatic  #23
1986: aload         65
1988: invokestatic  #93
1991: ldc           #74
1993: invokestatic  #23
1996: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test425
Start line: 14731
End line: 14763
Method source code: 
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (-1), (java.lang.Number) (short) 1, false);
        java.lang.Number number4 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException7 = new org.apache.commons.math3.exception.NumberIsTooSmallException(number4, (java.lang.Number) (byte) 0, true);
        java.lang.Number number8 = numberIsTooSmallException7.getMin();
        boolean boolean9 = numberIsTooSmallException7.getBoundIsAllowed();
        numberIsTooSmallException3.addSuppressed((java.lang.Throwable) numberIsTooSmallException7);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext11 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException3);
        java.lang.Object obj13 = exceptionContext11.getValue("org.apache.commons.math3.exception.NumberIsTooSmallException: -1 is smaller than, or equal to, the minimum (1)");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.NON_SQUARE_MATRIX;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer15 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter16 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer15);
        harmonicFitter16.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter16.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray23 = harmonicFitter16.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray24 = harmonicFitter16.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray25 = harmonicFitter16.getObservations();
        harmonicFitter16.addObservedPoint((double) (byte) 1, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray29 = harmonicFitter16.getObservations();
        exceptionContext11.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats14, (java.lang.Object[]) weightedObservedPointArray29);
        java.lang.Class<?> wildcardClass31 = exceptionContext11.getClass();
        org.junit.Assert.assertEquals("'" + number8 + "' != '" + (byte) 0 + "'", number8, (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NON_SQUARE_MATRIX + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NON_SQUARE_MATRIX));
        org.junit.Assert.assertNotNull(weightedObservedPointArray23);
        org.junit.Assert.assertNotNull(weightedObservedPointArray24);
        org.junit.Assert.assertNotNull(weightedObservedPointArray25);
        org.junit.Assert.assertNotNull(weightedObservedPointArray29);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #803
20: aastore
21: invokevirtual #7
24: pop
25: new           #28
28: dup
29: iconst_m1
30: invokestatic  #135
33: iconst_1
34: invokestatic  #194
37: iconst_0
38: invokespecial #160
41: astore_1
42: aconst_null
43: astore_2
44: new           #28
47: dup
48: aload_2
49: iconst_0
50: invokestatic  #159
53: iconst_1
54: invokespecial #160
57: astore_3
58: aload_3
59: invokevirtual #572
62: astore        4
64: aload_3
65: invokevirtual #162
68: istore        5
70: aload_1
71: aload_3
72: invokevirtual #573
75: new           #163
78: dup
79: aload_1
80: invokespecial #164
83: astore        6
85: aload         6
87: ldc_w         #372
90: invokevirtual #167
93: astore        7
95: getstatic     #690
98: astore        8
100: aconst_null
101: astore        9
103: new           #8
106: dup
107: aload         9
109: invokespecial #9
112: astore        10
114: aload         10
116: dconst_1
117: ldc2_w        #32
120: invokevirtual #43
123: aload         10
125: dconst_0
126: ldc2_w        #34
129: invokevirtual #43
132: aload         10
134: invokevirtual #25
137: astore        11
139: aload         10
141: invokevirtual #25
144: astore        12
146: aload         10
148: invokevirtual #25
151: astore        13
153: aload         10
155: dconst_1
156: ldc2_w        #10
159: invokevirtual #43
162: aload         10
164: invokevirtual #25
167: astore        14
169: aload         6
171: aload         8
173: aload         14
175: checkcast     #79
178: invokevirtual #169
181: aload         6
183: invokevirtual #98
186: astore        15
188: new           #83
191: dup
192: invokespecial #84
195: ldc           #85
197: invokevirtual #86
200: aload         4
202: invokevirtual #87
205: ldc           #88
207: invokevirtual #86
210: iconst_0
211: invokevirtual #244
214: ldc           #85
216: invokevirtual #86
219: invokevirtual #89
222: aload         4
224: iconst_0
225: invokestatic  #159
228: invokestatic  #245
231: new           #83
234: dup
235: invokespecial #84
238: ldc           #85
240: invokevirtual #86
243: iload         5
245: invokevirtual #170
248: ldc           #88
250: invokevirtual #86
253: iconst_1
254: invokevirtual #170
257: ldc           #85
259: invokevirtual #86
262: invokevirtual #89
265: iload         5
267: iconst_1
268: if_icmpne     275
271: iconst_1
272: goto          276
275: iconst_0
276: invokestatic  #91
279: aload         7
281: invokestatic  #171
284: new           #83
287: dup
288: invokespecial #84
291: ldc           #85
293: invokevirtual #86
296: aload         8
298: invokevirtual #87
301: ldc           #88
303: invokevirtual #86
306: getstatic     #690
309: invokevirtual #87
312: ldc           #85
314: invokevirtual #86
317: invokevirtual #89
320: aload         8
322: getstatic     #690
325: invokevirtual #90
328: invokestatic  #91
331: aload         11
333: invokestatic  #20
336: aload         12
338: invokestatic  #20
341: aload         13
343: invokestatic  #20
346: aload         14
348: invokestatic  #20
351: aload         15
353: invokestatic  #20
356: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test426
Start line: 14766
End line: 14781
Method source code: 
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray11 = harmonicFitter1.getObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertNotNull(weightedObservedPointArray11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #804
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: invokevirtual #25
61: astore        4
63: aload_2
64: invokevirtual #25
67: astore        5
69: aload_2
70: invokevirtual #25
73: astore        6
75: aload_3
76: invokestatic  #20
79: aload         4
81: invokestatic  #20
84: aload         5
86: invokestatic  #20
89: aload         6
91: invokestatic  #20
94: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test427
Start line: 14784
End line: 14795
Method source code: 
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.addObservedPoint((double) 100, (double) 100L, (double) 10);
        harmonicFitter1.addObservedPoint((double) (short) 10, 0.0d);
        harmonicFitter1.addObservedPoint((double) (byte) 10, (-1.0d), (double) 'a');
        harmonicFitter1.addObservedPoint((double) 0L, (double) '#', (double) 'a');
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #805
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: ldc2_w        #34
56: ldc2_w        #34
59: ldc2_w        #32
62: invokevirtual #54
65: aload_2
66: ldc2_w        #32
69: dconst_0
70: invokevirtual #43
73: aload_2
74: ldc2_w        #32
77: ldc2_w        #10
80: ldc2_w        #44
83: invokevirtual #54
86: aload_2
87: dconst_0
88: ldc2_w        #14
91: ldc2_w        #44
94: invokevirtual #54
97: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test428
Start line: 14798
End line: 14817
Method source code: 
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(100.0d, (double) 0L);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 1 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #806
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore        4
62: aload_2
63: ldc2_w        #34
66: dconst_0
67: invokevirtual #43
70: aload_2
71: invokevirtual #26
74: astore        5
76: ldc           #64
78: invokestatic  #18
81: goto          86
84: astore        5
86: aload_3
87: invokestatic  #20
90: aload         4
92: invokestatic  #20
95: return
Exception table:
from    to  target type
70    81    84   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test429
Start line: 14820
End line: 14867
Method source code: 
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((-1.0d), (double) 10, (double) 10);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric16 = null;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer17 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter18 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer17);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray19 = harmonicFitter18.getObservations();
        harmonicFitter18.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter18.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter18.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint34 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double35 = weightedObservedPoint34.getX();
        double double36 = weightedObservedPoint34.getY();
        double double37 = weightedObservedPoint34.getY();
        harmonicFitter18.addObservedPoint(weightedObservedPoint34);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray39 = harmonicFitter18.getObservations();
        org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser40 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray39);
        double[] doubleArray41 = parameterGuesser40.guess();
        double[] doubleArray42 = parameterGuesser40.guess();
        double[] doubleArray43 = parameterGuesser40.guess();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray44 = harmonicFitter1.fit((int) (byte) 10, parametric16, doubleArray43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(weightedObservedPointArray19);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[31.0, 0.0641141357875468, -1.5191688395158496]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[31.0, 0.0641141357875468, -1.5191688395158496]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[31.0, 0.0641141357875468, -1.5191688395158496]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #807
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: aload_2
62: ldc2_w        #10
65: ldc2_w        #32
68: ldc2_w        #32
71: invokevirtual #54
74: aload_2
75: invokevirtual #59
78: aconst_null
79: astore        4
81: aconst_null
82: astore        5
84: new           #8
87: dup
88: aload         5
90: invokespecial #9
93: astore        6
95: aload         6
97: invokevirtual #25
100: astore        7
102: aload         6
104: ldc2_w        #32
107: ldc2_w        #10
110: dconst_0
111: invokevirtual #54
114: aload         6
116: ldc2_w        #44
119: ldc2_w        #14
122: invokevirtual #43
125: aload         6
127: ldc2_w        #12
130: dconst_0
131: ldc2_w        #44
134: invokevirtual #54
137: new           #145
140: dup
141: ldc2_w        #14
144: ldc2_w        #12
147: ldc2_w        #12
150: invokespecial #146
153: astore        8
155: aload         8
157: invokevirtual #147
160: dstore        9
162: aload         8
164: invokevirtual #149
167: dstore        11
169: aload         8
171: invokevirtual #149
174: dstore        13
176: aload         6
178: aload         8
180: invokevirtual #123
183: aload         6
185: invokevirtual #25
188: astore        15
190: new           #69
193: dup
194: aload         15
196: invokespecial #70
199: astore        16
201: aload         16
203: invokevirtual #758
206: astore        17
208: aload         16
210: invokevirtual #758
213: astore        18
215: aload         16
217: invokevirtual #758
220: astore        19
222: aload_2
223: bipush        10
225: aload         4
227: aload         19
229: invokevirtual #40
232: astore        20
234: ldc           #17
236: invokestatic  #18
239: goto          244
242: astore        20
244: aload_3
245: invokestatic  #20
248: aload         7
250: invokestatic  #20
253: new           #83
256: dup
257: invokespecial #84
260: ldc           #85
262: invokevirtual #86
265: dload         9
267: invokevirtual #150
270: ldc           #88
272: invokevirtual #86
275: ldc2_w        #12
278: invokevirtual #150
281: ldc           #85
283: invokevirtual #86
286: invokevirtual #89
289: dload         9
291: ldc2_w        #12
294: dcmpl
295: ifne          302
298: iconst_1
299: goto          303
302: iconst_0
303: invokestatic  #91
306: new           #83
309: dup
310: invokespecial #84
313: ldc           #85
315: invokevirtual #86
318: dload         11
320: invokevirtual #150
323: ldc           #88
325: invokevirtual #86
328: ldc2_w        #12
331: invokevirtual #150
334: ldc           #85
336: invokevirtual #86
339: invokevirtual #89
342: dload         11
344: ldc2_w        #12
347: dcmpl
348: ifne          355
351: iconst_1
352: goto          356
355: iconst_0
356: invokestatic  #91
359: new           #83
362: dup
363: invokespecial #84
366: ldc           #85
368: invokevirtual #86
371: dload         13
373: invokevirtual #150
376: ldc           #88
378: invokevirtual #86
381: ldc2_w        #12
384: invokevirtual #150
387: ldc           #85
389: invokevirtual #86
392: invokevirtual #89
395: dload         13
397: ldc2_w        #12
400: dcmpl
401: ifne          408
404: iconst_1
405: goto          409
408: iconst_0
409: invokestatic  #91
412: aload         15
414: invokestatic  #20
417: aload         17
419: invokestatic  #20
422: aload         17
424: invokestatic  #21
427: ldc_w         #759
430: invokestatic  #23
433: aload         18
435: invokestatic  #20
438: aload         18
440: invokestatic  #21
443: ldc_w         #759
446: invokestatic  #23
449: aload         19
451: invokestatic  #20
454: aload         19
456: invokestatic  #21
459: ldc_w         #759
462: invokestatic  #23
465: return
Exception table:
from    to  target type
222   239   242   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test430
Start line: 14870
End line: 14890
Method source code: 
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(35.0d, (double) (byte) -1);
        harmonicFitter1.addObservedPoint((double) (byte) 0, (double) (short) 0, 100.0d);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric13 = null;
        double[] doubleArray18 = new double[] { 10.0d, ' ', (short) 1, (-1L) };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = harmonicFitter1.fit(parametric13, doubleArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0, 32.0, 1.0, -1.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #808
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: ldc2_w        #14
52: ldc2_w        #10
55: invokevirtual #43
58: aload_2
59: dconst_0
60: dconst_0
61: ldc2_w        #34
64: invokevirtual #54
67: aconst_null
68: astore_3
69: iconst_4
70: newarray       double
72: dup
73: iconst_0
74: ldc2_w        #32
77: dastore
78: dup
79: iconst_1
80: ldc2_w        #38
83: dastore
84: dup
85: iconst_2
86: dconst_1
87: dastore
88: dup
89: iconst_3
90: ldc2_w        #10
93: dastore
94: astore        4
96: aload_2
97: aload_3
98: aload         4
100: invokevirtual #30
103: astore        5
105: ldc           #17
107: invokestatic  #18
110: goto          115
113: astore        5
115: aload         4
117: invokestatic  #20
120: aload         4
122: invokestatic  #21
125: ldc_w         #809
128: invokestatic  #23
131: return
Exception table:
from    to  target type
96   110   113   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test431
Start line: 14893
End line: 14976
Method source code: 
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        java.lang.Throwable[] throwableArray11 = mathIllegalArgumentException4.getSuppressed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext12 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException4);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE;
        exceptionContext12.setValue("cannot compute beta density at 0 when alpha = {0,number}", (java.lang.Object) localizedFormats14);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_COMPLEX_MODULE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats18 = org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats19 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray23 = new java.lang.Object[] { localizedFormats21, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException24 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, objArray23);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats25 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats26 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray28 = new java.lang.Object[] { localizedFormats26, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException29 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, objArray28);
        mathIllegalArgumentException24.addSuppressed((java.lang.Throwable) mathIllegalArgumentException29);
        java.lang.Throwable[] throwableArray31 = mathIllegalArgumentException24.getSuppressed();
        java.lang.Object[] objArray32 = new java.lang.Object[] { localizedFormats18, localizedFormats19, throwableArray31 };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException33 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats17, (java.lang.Object[]) throwableArray31);
        exceptionContext12.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats16, (java.lang.Object[]) throwableArray31);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats35 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_MEAN;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats36 = org.apache.commons.math3.exception.util.LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer37 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter38 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer37);
        harmonicFitter38.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter38.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray45 = harmonicFitter38.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray46 = harmonicFitter38.getObservations();
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException47 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats36, (java.lang.Object[]) weightedObservedPointArray46);
        exceptionContext12.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats35, (java.lang.Object[]) weightedObservedPointArray46);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser49 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray46);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 2 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE));
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.HOLE_BETWEEN_MODELS_TIME_RANGES));
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_COMPLEX_MODULE + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_COMPLEX_MODULE));
        org.junit.Assert.assertTrue("'" + localizedFormats18 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE + "'", localizedFormats18.equals(org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE));
        org.junit.Assert.assertTrue("'" + localizedFormats19 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION + "'", localizedFormats19.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION));
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats25 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats25.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats26 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats26.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[DIMENSIONS_MISMATCH_SIMPLE, NOT_POSITIVE_STANDARD_DEVIATION, [org.apache.commons.math3.exception.MathIllegalArgumentException: overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1]]");
        org.junit.Assert.assertTrue("'" + localizedFormats35 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_MEAN + "'", localizedFormats35.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_MEAN));
        org.junit.Assert.assertTrue("'" + localizedFormats36 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS + "'", localizedFormats36.equals(org.apache.commons.math3.exception.util.LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_TWO_PREVIOUS_POINTS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray45);
        org.junit.Assert.assertNotNull(weightedObservedPointArray46);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #810
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: aload         4
110: invokevirtual #234
113: astore        9
115: new           #163
118: dup
119: aload         4
121: invokespecial #164
124: astore        10
126: getstatic     #378
129: astore        11
131: aload         10
133: ldc_w         #379
136: aload         11
138: invokevirtual #373
141: getstatic     #380
144: astore        12
146: getstatic     #381
149: astore        13
151: getstatic     #382
154: astore        14
156: getstatic     #233
159: astore        15
161: getstatic     #127
164: astore        16
166: getstatic     #128
169: astore        17
171: iconst_2
172: anewarray     #5
175: dup
176: iconst_0
177: aload         17
179: aastore
180: dup
181: iconst_1
182: lconst_1
183: invokestatic  #129
186: aastore
187: astore        18
189: new           #130
192: dup
193: aload         16
195: aload         18
197: invokespecial #131
200: astore        19
202: getstatic     #127
205: astore        20
207: getstatic     #128
210: astore        21
212: iconst_2
213: anewarray     #5
216: dup
217: iconst_0
218: aload         21
220: aastore
221: dup
222: iconst_1
223: lconst_1
224: invokestatic  #129
227: aastore
228: astore        22
230: new           #130
233: dup
234: aload         20
236: aload         22
238: invokespecial #131
241: astore        23
243: aload         19
245: aload         23
247: invokevirtual #132
250: aload         19
252: invokevirtual #234
255: astore        24
257: iconst_3
258: anewarray     #5
261: dup
262: iconst_0
263: aload         14
265: aastore
266: dup
267: iconst_1
268: aload         15
270: aastore
271: dup
272: iconst_2
273: aload         24
275: aastore
276: astore        25
278: new           #130
281: dup
282: aload         13
284: aload         24
286: checkcast     #79
289: invokespecial #131
292: astore        26
294: aload         10
296: aload         12
298: aload         24
300: checkcast     #79
303: invokevirtual #169
306: getstatic     #383
309: astore        27
311: getstatic     #193
314: astore        28
316: aconst_null
317: astore        29
319: new           #8
322: dup
323: aload         29
325: invokespecial #9
328: astore        30
330: aload         30
332: dconst_1
333: ldc2_w        #32
336: invokevirtual #43
339: aload         30
341: dconst_0
342: ldc2_w        #34
345: invokevirtual #43
348: aload         30
350: invokevirtual #25
353: astore        31
355: aload         30
357: invokevirtual #25
360: astore        32
362: new           #130
365: dup
366: aload         28
368: aload         32
370: checkcast     #79
373: invokespecial #131
376: astore        33
378: aload         10
380: aload         27
382: aload         32
384: checkcast     #79
387: invokevirtual #169
390: new           #69
393: dup
394: aload         32
396: invokespecial #70
399: astore        34
401: ldc           #186
403: invokestatic  #18
406: goto          411
409: astore        34
411: new           #83
414: dup
415: invokespecial #84
418: ldc           #85
420: invokevirtual #86
423: aload_1
424: invokevirtual #87
427: ldc           #88
429: invokevirtual #86
432: getstatic     #127
435: invokevirtual #87
438: ldc           #85
440: invokevirtual #86
443: invokevirtual #89
446: aload_1
447: getstatic     #127
450: invokevirtual #90
453: invokestatic  #91
456: new           #83
459: dup
460: invokespecial #84
463: ldc           #85
465: invokevirtual #86
468: aload_2
469: invokevirtual #87
472: ldc           #88
474: invokevirtual #86
477: getstatic     #128
480: invokevirtual #87
483: ldc           #85
485: invokevirtual #86
488: invokevirtual #89
491: aload_2
492: getstatic     #128
495: invokevirtual #90
498: invokestatic  #91
501: aload_3
502: invokestatic  #20
505: aload_3
506: invokestatic  #92
509: ldc           #140
511: invokestatic  #23
514: aload_3
515: invokestatic  #93
518: ldc           #140
520: invokestatic  #23
523: new           #83
526: dup
527: invokespecial #84
530: ldc           #85
532: invokevirtual #86
535: aload         5
537: invokevirtual #87
540: ldc           #88
542: invokevirtual #86
545: getstatic     #127
548: invokevirtual #87
551: ldc           #85
553: invokevirtual #86
556: invokevirtual #89
559: aload         5
561: getstatic     #127
564: invokevirtual #90
567: invokestatic  #91
570: new           #83
573: dup
574: invokespecial #84
577: ldc           #85
579: invokevirtual #86
582: aload         6
584: invokevirtual #87
587: ldc           #88
589: invokevirtual #86
592: getstatic     #128
595: invokevirtual #87
598: ldc           #85
600: invokevirtual #86
603: invokevirtual #89
606: aload         6
608: getstatic     #128
611: invokevirtual #90
614: invokestatic  #91
617: aload         7
619: invokestatic  #20
622: aload         7
624: invokestatic  #92
627: ldc           #140
629: invokestatic  #23
632: aload         7
634: invokestatic  #93
637: ldc           #140
639: invokestatic  #23
642: aload         9
644: invokestatic  #20
647: new           #83
650: dup
651: invokespecial #84
654: ldc           #85
656: invokevirtual #86
659: aload         11
661: invokevirtual #87
664: ldc           #88
666: invokevirtual #86
669: getstatic     #378
672: invokevirtual #87
675: ldc           #85
677: invokevirtual #86
680: invokevirtual #89
683: aload         11
685: getstatic     #378
688: invokevirtual #90
691: invokestatic  #91
694: new           #83
697: dup
698: invokespecial #84
701: ldc           #85
703: invokevirtual #86
706: aload         12
708: invokevirtual #87
711: ldc           #88
713: invokevirtual #86
716: getstatic     #380
719: invokevirtual #87
722: ldc           #85
724: invokevirtual #86
727: invokevirtual #89
730: aload         12
732: getstatic     #380
735: invokevirtual #90
738: invokestatic  #91
741: new           #83
744: dup
745: invokespecial #84
748: ldc           #85
750: invokevirtual #86
753: aload         13
755: invokevirtual #87
758: ldc           #88
760: invokevirtual #86
763: getstatic     #381
766: invokevirtual #87
769: ldc           #85
771: invokevirtual #86
774: invokevirtual #89
777: aload         13
779: getstatic     #381
782: invokevirtual #90
785: invokestatic  #91
788: new           #83
791: dup
792: invokespecial #84
795: ldc           #85
797: invokevirtual #86
800: aload         14
802: invokevirtual #87
805: ldc           #88
807: invokevirtual #86
810: getstatic     #382
813: invokevirtual #87
816: ldc           #85
818: invokevirtual #86
821: invokevirtual #89
824: aload         14
826: getstatic     #382
829: invokevirtual #90
832: invokestatic  #91
835: new           #83
838: dup
839: invokespecial #84
842: ldc           #85
844: invokevirtual #86
847: aload         15
849: invokevirtual #87
852: ldc           #88
854: invokevirtual #86
857: getstatic     #233
860: invokevirtual #87
863: ldc           #85
865: invokevirtual #86
868: invokevirtual #89
871: aload         15
873: getstatic     #233
876: invokevirtual #90
879: invokestatic  #91
882: new           #83
885: dup
886: invokespecial #84
889: ldc           #85
891: invokevirtual #86
894: aload         16
896: invokevirtual #87
899: ldc           #88
901: invokevirtual #86
904: getstatic     #127
907: invokevirtual #87
910: ldc           #85
912: invokevirtual #86
915: invokevirtual #89
918: aload         16
920: getstatic     #127
923: invokevirtual #90
926: invokestatic  #91
929: new           #83
932: dup
933: invokespecial #84
936: ldc           #85
938: invokevirtual #86
941: aload         17
943: invokevirtual #87
946: ldc           #88
948: invokevirtual #86
951: getstatic     #128
954: invokevirtual #87
957: ldc           #85
959: invokevirtual #86
962: invokevirtual #89
965: aload         17
967: getstatic     #128
970: invokevirtual #90
973: invokestatic  #91
976: aload         18
978: invokestatic  #20
981: aload         18
983: invokestatic  #92
986: ldc           #140
988: invokestatic  #23
991: aload         18
993: invokestatic  #93
996: ldc           #140
998: invokestatic  #23
1001: new           #83
1004: dup
1005: invokespecial #84
1008: ldc           #85
1010: invokevirtual #86
1013: aload         20
1015: invokevirtual #87
1018: ldc           #88
1020: invokevirtual #86
1023: getstatic     #127
1026: invokevirtual #87
1029: ldc           #85
1031: invokevirtual #86
1034: invokevirtual #89
1037: aload         20
1039: getstatic     #127
1042: invokevirtual #90
1045: invokestatic  #91
1048: new           #83
1051: dup
1052: invokespecial #84
1055: ldc           #85
1057: invokevirtual #86
1060: aload         21
1062: invokevirtual #87
1065: ldc           #88
1067: invokevirtual #86
1070: getstatic     #128
1073: invokevirtual #87
1076: ldc           #85
1078: invokevirtual #86
1081: invokevirtual #89
1084: aload         21
1086: getstatic     #128
1089: invokevirtual #90
1092: invokestatic  #91
1095: aload         22
1097: invokestatic  #20
1100: aload         22
1102: invokestatic  #92
1105: ldc           #140
1107: invokestatic  #23
1110: aload         22
1112: invokestatic  #93
1115: ldc           #140
1117: invokestatic  #23
1120: aload         24
1122: invokestatic  #20
1125: aload         25
1127: invokestatic  #20
1130: aload         25
1132: invokestatic  #92
1135: ldc_w         #385
1138: invokestatic  #23
1141: new           #83
1144: dup
1145: invokespecial #84
1148: ldc           #85
1150: invokevirtual #86
1153: aload         27
1155: invokevirtual #87
1158: ldc           #88
1160: invokevirtual #86
1163: getstatic     #383
1166: invokevirtual #87
1169: ldc           #85
1171: invokevirtual #86
1174: invokevirtual #89
1177: aload         27
1179: getstatic     #383
1182: invokevirtual #90
1185: invokestatic  #91
1188: new           #83
1191: dup
1192: invokespecial #84
1195: ldc           #85
1197: invokevirtual #86
1200: aload         28
1202: invokevirtual #87
1205: ldc           #88
1207: invokevirtual #86
1210: getstatic     #193
1213: invokevirtual #87
1216: ldc           #85
1218: invokevirtual #86
1221: invokevirtual #89
1224: aload         28
1226: getstatic     #193
1229: invokevirtual #90
1232: invokestatic  #91
1235: aload         31
1237: invokestatic  #20
1240: aload         32
1242: invokestatic  #20
1245: return
Exception table:
from    to  target type
390   406   409   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test432
Start line: 14979
End line: 14991
Method source code: 
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter1.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint14 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((-1.0d), (double) 100, (-1.0d));
        harmonicFitter1.addObservedPoint(weightedObservedPoint14);
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #811
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: ldc2_w        #32
45: ldc2_w        #10
48: dconst_0
49: invokevirtual #54
52: aload_2
53: ldc2_w        #44
56: ldc2_w        #14
59: invokevirtual #43
62: aload_2
63: invokevirtual #59
66: new           #145
69: dup
70: ldc2_w        #10
73: ldc2_w        #34
76: ldc2_w        #10
79: invokespecial #146
82: astore        4
84: aload_2
85: aload         4
87: invokevirtual #123
90: aload_3
91: invokestatic  #20
94: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test433
Start line: 14994
End line: 15037
Method source code: 
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(52.0d, (double) (short) 1, (double) 10);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric10 = null;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer11 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter12 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer11);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray13 = harmonicFitter12.getObservations();
        harmonicFitter12.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter12.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter12.addObservedPoint(52.0d, 0.0d, (double) 'a');
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint28 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double29 = weightedObservedPoint28.getX();
        double double30 = weightedObservedPoint28.getY();
        double double31 = weightedObservedPoint28.getY();
        harmonicFitter12.addObservedPoint(weightedObservedPoint28);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray33 = harmonicFitter12.getObservations();
        org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser34 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray33);
        double[] doubleArray35 = parameterGuesser34.guess();
        double[] doubleArray36 = parameterGuesser34.guess();
        double[] doubleArray37 = parameterGuesser34.guess();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray38 = harmonicFitter1.fit(parametric10, doubleArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray13);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 52.0d + "'", double29 == 52.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 52.0d + "'", double30 == 52.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 52.0d + "'", double31 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[31.0, 0.0641141357875468, -1.5191688395158496]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[31.0, 0.0641141357875468, -1.5191688395158496]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[31.0, 0.0641141357875468, -1.5191688395158496]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #812
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: ldc2_w        #12
52: dconst_1
53: ldc2_w        #32
56: invokevirtual #54
59: aconst_null
60: astore_3
61: aconst_null
62: astore        4
64: new           #8
67: dup
68: aload         4
70: invokespecial #9
73: astore        5
75: aload         5
77: invokevirtual #25
80: astore        6
82: aload         5
84: ldc2_w        #32
87: ldc2_w        #10
90: dconst_0
91: invokevirtual #54
94: aload         5
96: ldc2_w        #44
99: ldc2_w        #14
102: invokevirtual #43
105: aload         5
107: ldc2_w        #12
110: dconst_0
111: ldc2_w        #44
114: invokevirtual #54
117: new           #145
120: dup
121: ldc2_w        #14
124: ldc2_w        #12
127: ldc2_w        #12
130: invokespecial #146
133: astore        7
135: aload         7
137: invokevirtual #147
140: dstore        8
142: aload         7
144: invokevirtual #149
147: dstore        10
149: aload         7
151: invokevirtual #149
154: dstore        12
156: aload         5
158: aload         7
160: invokevirtual #123
163: aload         5
165: invokevirtual #25
168: astore        14
170: new           #69
173: dup
174: aload         14
176: invokespecial #70
179: astore        15
181: aload         15
183: invokevirtual #758
186: astore        16
188: aload         15
190: invokevirtual #758
193: astore        17
195: aload         15
197: invokevirtual #758
200: astore        18
202: aload_2
203: aload_3
204: aload         18
206: invokevirtual #30
209: astore        19
211: ldc           #17
213: invokestatic  #18
216: goto          221
219: astore        19
221: aload         6
223: invokestatic  #20
226: new           #83
229: dup
230: invokespecial #84
233: ldc           #85
235: invokevirtual #86
238: dload         8
240: invokevirtual #150
243: ldc           #88
245: invokevirtual #86
248: ldc2_w        #12
251: invokevirtual #150
254: ldc           #85
256: invokevirtual #86
259: invokevirtual #89
262: dload         8
264: ldc2_w        #12
267: dcmpl
268: ifne          275
271: iconst_1
272: goto          276
275: iconst_0
276: invokestatic  #91
279: new           #83
282: dup
283: invokespecial #84
286: ldc           #85
288: invokevirtual #86
291: dload         10
293: invokevirtual #150
296: ldc           #88
298: invokevirtual #86
301: ldc2_w        #12
304: invokevirtual #150
307: ldc           #85
309: invokevirtual #86
312: invokevirtual #89
315: dload         10
317: ldc2_w        #12
320: dcmpl
321: ifne          328
324: iconst_1
325: goto          329
328: iconst_0
329: invokestatic  #91
332: new           #83
335: dup
336: invokespecial #84
339: ldc           #85
341: invokevirtual #86
344: dload         12
346: invokevirtual #150
349: ldc           #88
351: invokevirtual #86
354: ldc2_w        #12
357: invokevirtual #150
360: ldc           #85
362: invokevirtual #86
365: invokevirtual #89
368: dload         12
370: ldc2_w        #12
373: dcmpl
374: ifne          381
377: iconst_1
378: goto          382
381: iconst_0
382: invokestatic  #91
385: aload         14
387: invokestatic  #20
390: aload         16
392: invokestatic  #20
395: aload         16
397: invokestatic  #21
400: ldc_w         #759
403: invokestatic  #23
406: aload         17
408: invokestatic  #20
411: aload         17
413: invokestatic  #21
416: ldc_w         #759
419: invokestatic  #23
422: aload         18
424: invokestatic  #20
427: aload         18
429: invokestatic  #21
432: ldc_w         #759
435: invokestatic  #23
438: return
Exception table:
from    to  target type
202   216   219   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test434
Start line: 15040
End line: 15053
Method source code: 
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.clearObservations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray3 = harmonicFitter1.fit();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #813
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #59
40: aload_2
41: invokevirtual #26
44: astore_3
45: ldc           #27
47: invokestatic  #18
50: goto          54
53: astore_3
54: return
Exception table:
from    to  target type
40    50    53   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test435
Start line: 15056
End line: 15092
Method source code: 
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray2 = harmonicFitter1.getObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint8 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double9 = weightedObservedPoint8.getX();
        double double10 = weightedObservedPoint8.getWeight();
        double double11 = weightedObservedPoint8.getWeight();
        double double12 = weightedObservedPoint8.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint8);
        harmonicFitter1.addObservedPoint((double) 0, (double) (short) 100, (double) (short) 0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray18 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer19 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter20 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer19);
        harmonicFitter20.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter20.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter20.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint31 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) (byte) 1, 0.0d, (double) 100.0f);
        harmonicFitter20.addObservedPoint(weightedObservedPoint31);
        double double33 = weightedObservedPoint31.getX();
        harmonicFitter1.addObservedPoint(weightedObservedPoint31);
        double double35 = weightedObservedPoint31.getWeight();
        org.junit.Assert.assertNotNull(weightedObservedPointArray2);
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 52.0d + "'", double9 == 52.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 35.0d + "'", double11 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 52.0d + "'", double12 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray18);
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #814
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #25
40: astore_3
41: aload_2
42: invokevirtual #59
45: aload_2
46: invokevirtual #25
49: astore        4
51: new           #145
54: dup
55: ldc2_w        #14
58: ldc2_w        #12
61: ldc2_w        #12
64: invokespecial #146
67: astore        5
69: aload         5
71: invokevirtual #147
74: dstore        6
76: aload         5
78: invokevirtual #148
81: dstore        8
83: aload         5
85: invokevirtual #148
88: dstore        10
90: aload         5
92: invokevirtual #149
95: dstore        12
97: aload_2
98: aload         5
100: invokevirtual #123
103: aload_2
104: dconst_0
105: ldc2_w        #34
108: dconst_0
109: invokevirtual #54
112: aload_2
113: invokevirtual #25
116: astore        14
118: aconst_null
119: astore        15
121: new           #8
124: dup
125: aload         15
127: invokespecial #9
130: astore        16
132: aload         16
134: dconst_1
135: ldc2_w        #32
138: invokevirtual #43
141: aload         16
143: dconst_0
144: ldc2_w        #34
147: invokevirtual #43
150: aload         16
152: invokevirtual #25
155: astore        17
157: new           #145
160: dup
161: dconst_1
162: dconst_0
163: ldc2_w        #34
166: invokespecial #146
169: astore        18
171: aload         16
173: aload         18
175: invokevirtual #123
178: aload         18
180: invokevirtual #147
183: dstore        19
185: aload_2
186: aload         18
188: invokevirtual #123
191: aload         18
193: invokevirtual #148
196: dstore        21
198: aload_3
199: invokestatic  #20
202: aload         4
204: invokestatic  #20
207: new           #83
210: dup
211: invokespecial #84
214: ldc           #85
216: invokevirtual #86
219: dload         6
221: invokevirtual #150
224: ldc           #88
226: invokevirtual #86
229: ldc2_w        #12
232: invokevirtual #150
235: ldc           #85
237: invokevirtual #86
240: invokevirtual #89
243: dload         6
245: ldc2_w        #12
248: dcmpl
249: ifne          256
252: iconst_1
253: goto          257
256: iconst_0
257: invokestatic  #91
260: new           #83
263: dup
264: invokespecial #84
267: ldc           #85
269: invokevirtual #86
272: dload         8
274: invokevirtual #150
277: ldc           #88
279: invokevirtual #86
282: ldc2_w        #14
285: invokevirtual #150
288: ldc           #85
290: invokevirtual #86
293: invokevirtual #89
296: dload         8
298: ldc2_w        #14
301: dcmpl
302: ifne          309
305: iconst_1
306: goto          310
309: iconst_0
310: invokestatic  #91
313: new           #83
316: dup
317: invokespecial #84
320: ldc           #85
322: invokevirtual #86
325: dload         10
327: invokevirtual #150
330: ldc           #88
332: invokevirtual #86
335: ldc2_w        #14
338: invokevirtual #150
341: ldc           #85
343: invokevirtual #86
346: invokevirtual #89
349: dload         10
351: ldc2_w        #14
354: dcmpl
355: ifne          362
358: iconst_1
359: goto          363
362: iconst_0
363: invokestatic  #91
366: new           #83
369: dup
370: invokespecial #84
373: ldc           #85
375: invokevirtual #86
378: dload         12
380: invokevirtual #150
383: ldc           #88
385: invokevirtual #86
388: ldc2_w        #12
391: invokevirtual #150
394: ldc           #85
396: invokevirtual #86
399: invokevirtual #89
402: dload         12
404: ldc2_w        #12
407: dcmpl
408: ifne          415
411: iconst_1
412: goto          416
415: iconst_0
416: invokestatic  #91
419: aload         14
421: invokestatic  #20
424: aload         17
426: invokestatic  #20
429: new           #83
432: dup
433: invokespecial #84
436: ldc           #85
438: invokevirtual #86
441: dload         19
443: invokevirtual #150
446: ldc           #88
448: invokevirtual #86
451: dconst_0
452: invokevirtual #150
455: ldc           #85
457: invokevirtual #86
460: invokevirtual #89
463: dload         19
465: dconst_0
466: dcmpl
467: ifne          474
470: iconst_1
471: goto          475
474: iconst_0
475: invokestatic  #91
478: new           #83
481: dup
482: invokespecial #84
485: ldc           #85
487: invokevirtual #86
490: dload         21
492: invokevirtual #150
495: ldc           #88
497: invokevirtual #86
500: dconst_1
501: invokevirtual #150
504: ldc           #85
506: invokevirtual #86
509: invokevirtual #89
512: dload         21
514: dconst_1
515: dcmpl
516: ifne          523
519: iconst_1
520: goto          524
523: iconst_0
524: invokestatic  #91
527: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test436
Start line: 15095
End line: 15218
Method source code: 
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        java.lang.Throwable[] throwableArray11 = mathIllegalArgumentException4.getSuppressed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext12 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException4);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats14 = org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE;
        exceptionContext12.setValue("cannot compute beta density at 0 when alpha = {0,number}", (java.lang.Object) localizedFormats14);
        java.lang.Throwable throwable16 = exceptionContext12.getThrowable();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext17 = new org.apache.commons.math3.exception.util.ExceptionContext(throwable16);
        java.lang.Object obj19 = exceptionContext17.getValue("");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats20 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray23 = new java.lang.Object[] { localizedFormats21, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException24 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats20, objArray23);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats25 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats26 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray28 = new java.lang.Object[] { localizedFormats26, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException29 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats25, objArray28);
        mathIllegalArgumentException24.addSuppressed((java.lang.Throwable) mathIllegalArgumentException29);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext31 = mathIllegalArgumentException24.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats32 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats33 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats34 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray36 = new java.lang.Object[] { localizedFormats34, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException37 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats33, objArray36);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats38 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats39 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray41 = new java.lang.Object[] { localizedFormats39, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException42 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats38, objArray41);
        mathIllegalArgumentException37.addSuppressed((java.lang.Throwable) mathIllegalArgumentException42);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats44 = org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats45 = org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE;
        java.lang.Object[] objArray47 = new java.lang.Object[] { localizedFormats45, 10 };
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException48 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException42, (org.apache.commons.math3.exception.util.Localizable) localizedFormats44, objArray47);
        exceptionContext31.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats32, objArray47);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats50 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_WINDOW_SIZE;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats51 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats52 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray54 = new java.lang.Object[] { localizedFormats52, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException55 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats51, objArray54);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException56 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats50, objArray54);
        java.lang.Object[] objArray57 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray54);
        exceptionContext17.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats32, objArray54);
        java.lang.Object obj60 = exceptionContext17.getValue("{0} != {1}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats61 = org.apache.commons.math3.exception.util.LocalizedFormats.COLUMN_INDEX;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer62 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter63 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer62);
        harmonicFitter63.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter63.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray70 = harmonicFitter63.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray71 = harmonicFitter63.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray72 = harmonicFitter63.getObservations();
        harmonicFitter63.addObservedPoint((double) (byte) 1, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray76 = harmonicFitter63.getObservations();
        exceptionContext17.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats61, (java.lang.Object[]) weightedObservedPointArray76);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertTrue("'" + localizedFormats14 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE + "'", localizedFormats14.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NON_REAL_FINITE_ORDINATE));
        org.junit.Assert.assertNotNull(throwable16);
        org.junit.Assert.assertEquals(throwable16.getLocalizedMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertEquals(throwable16.getMessage(), "overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertEquals(throwable16.toString(), "org.apache.commons.math3.exception.MathIllegalArgumentException: overflow in addition: NEGATIVE_BRIGHTNESS_EXPONENT + 1");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + localizedFormats20 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats20.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats25 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats25.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats26 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats26.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext31);
        org.junit.Assert.assertTrue("'" + localizedFormats32 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION + "'", localizedFormats32.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_SUBTRACTION));
        org.junit.Assert.assertTrue("'" + localizedFormats33 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats33.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats34 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats34.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats38 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats38.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats39 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats39.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats44 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE + "'", localizedFormats44.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FUNCTION_NOT_DIFFERENTIABLE));
        org.junit.Assert.assertTrue("'" + localizedFormats45 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE + "'", localizedFormats45.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ROW_INDEX_OUT_OF_RANGE));
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[ROW_INDEX_OUT_OF_RANGE, 10]");
        org.junit.Assert.assertTrue("'" + localizedFormats50 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_WINDOW_SIZE + "'", localizedFormats50.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_WINDOW_SIZE));
        org.junit.Assert.assertTrue("'" + localizedFormats51 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats51.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats52 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats52.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNull(obj60);
        org.junit.Assert.assertTrue("'" + localizedFormats61 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.COLUMN_INDEX + "'", localizedFormats61.equals(org.apache.commons.math3.exception.util.LocalizedFormats.COLUMN_INDEX));
        org.junit.Assert.assertNotNull(weightedObservedPointArray70);
        org.junit.Assert.assertNotNull(weightedObservedPointArray71);
        org.junit.Assert.assertNotNull(weightedObservedPointArray72);
        org.junit.Assert.assertNotNull(weightedObservedPointArray76);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #815
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: aload         4
110: invokevirtual #234
113: astore        9
115: new           #163
118: dup
119: aload         4
121: invokespecial #164
124: astore        10
126: getstatic     #378
129: astore        11
131: aload         10
133: ldc_w         #379
136: aload         11
138: invokevirtual #373
141: aload         10
143: invokevirtual #288
146: astore        12
148: new           #163
151: dup
152: aload         12
154: invokespecial #164
157: astore        13
159: aload         13
161: ldc_w         #384
164: invokevirtual #167
167: astore        14
169: getstatic     #127
172: astore        15
174: getstatic     #128
177: astore        16
179: iconst_2
180: anewarray     #5
183: dup
184: iconst_0
185: aload         16
187: aastore
188: dup
189: iconst_1
190: lconst_1
191: invokestatic  #129
194: aastore
195: astore        17
197: new           #130
200: dup
201: aload         15
203: aload         17
205: invokespecial #131
208: astore        18
210: getstatic     #127
213: astore        19
215: getstatic     #128
218: astore        20
220: iconst_2
221: anewarray     #5
224: dup
225: iconst_0
226: aload         20
228: aastore
229: dup
230: iconst_1
231: lconst_1
232: invokestatic  #129
235: aastore
236: astore        21
238: new           #130
241: dup
242: aload         19
244: aload         21
246: invokespecial #131
249: astore        22
251: aload         18
253: aload         22
255: invokevirtual #132
258: aload         18
260: invokevirtual #165
263: astore        23
265: getstatic     #519
268: astore        24
270: getstatic     #127
273: astore        25
275: getstatic     #128
278: astore        26
280: iconst_2
281: anewarray     #5
284: dup
285: iconst_0
286: aload         26
288: aastore
289: dup
290: iconst_1
291: lconst_1
292: invokestatic  #129
295: aastore
296: astore        27
298: new           #130
301: dup
302: aload         25
304: aload         27
306: invokespecial #131
309: astore        28
311: getstatic     #127
314: astore        29
316: getstatic     #128
319: astore        30
321: iconst_2
322: anewarray     #5
325: dup
326: iconst_0
327: aload         30
329: aastore
330: dup
331: iconst_1
332: lconst_1
333: invokestatic  #129
336: aastore
337: astore        31
339: new           #130
342: dup
343: aload         29
345: aload         31
347: invokespecial #131
350: astore        32
352: aload         28
354: aload         32
356: invokevirtual #132
359: getstatic     #133
362: astore        33
364: getstatic     #134
367: astore        34
369: iconst_2
370: anewarray     #5
373: dup
374: iconst_0
375: aload         34
377: aastore
378: dup
379: iconst_1
380: bipush        10
382: invokestatic  #135
385: aastore
386: astore        35
388: new           #136
391: dup
392: aload         32
394: aload         33
396: aload         35
398: invokespecial #137
401: astore        36
403: aload         23
405: aload         24
407: aload         35
409: invokevirtual #169
412: getstatic     #816
415: astore        37
417: getstatic     #127
420: astore        38
422: getstatic     #128
425: astore        39
427: iconst_2
428: anewarray     #5
431: dup
432: iconst_0
433: aload         39
435: aastore
436: dup
437: iconst_1
438: lconst_1
439: invokestatic  #129
442: aastore
443: astore        40
445: new           #130
448: dup
449: aload         38
451: aload         40
453: invokespecial #131
456: astore        41
458: new           #130
461: dup
462: aload         37
464: aload         40
466: invokespecial #131
469: astore        42
471: aload         40
473: invokestatic  #80
476: astore        43
478: aload         13
480: aload         24
482: aload         40
484: invokevirtual #169
487: aload         13
489: ldc_w         #817
492: invokevirtual #167
495: astore        44
497: getstatic     #639
500: astore        45
502: aconst_null
503: astore        46
505: new           #8
508: dup
509: aload         46
511: invokespecial #9
514: astore        47
516: aload         47
518: dconst_1
519: ldc2_w        #32
522: invokevirtual #43
525: aload         47
527: dconst_0
528: ldc2_w        #34
531: invokevirtual #43
534: aload         47
536: invokevirtual #25
539: astore        48
541: aload         47
543: invokevirtual #25
546: astore        49
548: aload         47
550: invokevirtual #25
553: astore        50
555: aload         47
557: dconst_1
558: ldc2_w        #10
561: invokevirtual #43
564: aload         47
566: invokevirtual #25
569: astore        51
571: aload         13
573: aload         45
575: aload         51
577: checkcast     #79
580: invokevirtual #169
583: new           #83
586: dup
587: invokespecial #84
590: ldc           #85
592: invokevirtual #86
595: aload_1
596: invokevirtual #87
599: ldc           #88
601: invokevirtual #86
604: getstatic     #127
607: invokevirtual #87
610: ldc           #85
612: invokevirtual #86
615: invokevirtual #89
618: aload_1
619: getstatic     #127
622: invokevirtual #90
625: invokestatic  #91
628: new           #83
631: dup
632: invokespecial #84
635: ldc           #85
637: invokevirtual #86
640: aload_2
641: invokevirtual #87
644: ldc           #88
646: invokevirtual #86
649: getstatic     #128
652: invokevirtual #87
655: ldc           #85
657: invokevirtual #86
660: invokevirtual #89
663: aload_2
664: getstatic     #128
667: invokevirtual #90
670: invokestatic  #91
673: aload_3
674: invokestatic  #20
677: aload_3
678: invokestatic  #92
681: ldc           #140
683: invokestatic  #23
686: aload_3
687: invokestatic  #93
690: ldc           #140
692: invokestatic  #23
695: new           #83
698: dup
699: invokespecial #84
702: ldc           #85
704: invokevirtual #86
707: aload         5
709: invokevirtual #87
712: ldc           #88
714: invokevirtual #86
717: getstatic     #127
720: invokevirtual #87
723: ldc           #85
725: invokevirtual #86
728: invokevirtual #89
731: aload         5
733: getstatic     #127
736: invokevirtual #90
739: invokestatic  #91
742: new           #83
745: dup
746: invokespecial #84
749: ldc           #85
751: invokevirtual #86
754: aload         6
756: invokevirtual #87
759: ldc           #88
761: invokevirtual #86
764: getstatic     #128
767: invokevirtual #87
770: ldc           #85
772: invokevirtual #86
775: invokevirtual #89
778: aload         6
780: getstatic     #128
783: invokevirtual #90
786: invokestatic  #91
789: aload         7
791: invokestatic  #20
794: aload         7
796: invokestatic  #92
799: ldc           #140
801: invokestatic  #23
804: aload         7
806: invokestatic  #93
809: ldc           #140
811: invokestatic  #23
814: aload         9
816: invokestatic  #20
819: new           #83
822: dup
823: invokespecial #84
826: ldc           #85
828: invokevirtual #86
831: aload         11
833: invokevirtual #87
836: ldc           #88
838: invokevirtual #86
841: getstatic     #378
844: invokevirtual #87
847: ldc           #85
849: invokevirtual #86
852: invokevirtual #89
855: aload         11
857: getstatic     #378
860: invokevirtual #90
863: invokestatic  #91
866: aload         12
868: invokestatic  #20
871: aload         12
873: invokevirtual #289
876: ldc_w         #407
879: invokestatic  #23
882: aload         12
884: invokevirtual #291
887: ldc_w         #407
890: invokestatic  #23
893: aload         12
895: invokevirtual #292
898: ldc_w         #408
901: invokestatic  #23
904: aload         14
906: invokestatic  #171
909: new           #83
912: dup
913: invokespecial #84
916: ldc           #85
918: invokevirtual #86
921: aload         15
923: invokevirtual #87
926: ldc           #88
928: invokevirtual #86
931: getstatic     #127
934: invokevirtual #87
937: ldc           #85
939: invokevirtual #86
942: invokevirtual #89
945: aload         15
947: getstatic     #127
950: invokevirtual #90
953: invokestatic  #91
956: new           #83
959: dup
960: invokespecial #84
963: ldc           #85
965: invokevirtual #86
968: aload         16
970: invokevirtual #87
973: ldc           #88
975: invokevirtual #86
978: getstatic     #128
981: invokevirtual #87
984: ldc           #85
986: invokevirtual #86
989: invokevirtual #89
992: aload         16
994: getstatic     #128
997: invokevirtual #90
1000: invokestatic  #91
1003: aload         17
1005: invokestatic  #20
1008: aload         17
1010: invokestatic  #92
1013: ldc           #140
1015: invokestatic  #23
1018: aload         17
1020: invokestatic  #93
1023: ldc           #140
1025: invokestatic  #23
1028: new           #83
1031: dup
1032: invokespecial #84
1035: ldc           #85
1037: invokevirtual #86
1040: aload         19
1042: invokevirtual #87
1045: ldc           #88
1047: invokevirtual #86
1050: getstatic     #127
1053: invokevirtual #87
1056: ldc           #85
1058: invokevirtual #86
1061: invokevirtual #89
1064: aload         19
1066: getstatic     #127
1069: invokevirtual #90
1072: invokestatic  #91
1075: new           #83
1078: dup
1079: invokespecial #84
1082: ldc           #85
1084: invokevirtual #86
1087: aload         20
1089: invokevirtual #87
1092: ldc           #88
1094: invokevirtual #86
1097: getstatic     #128
1100: invokevirtual #87
1103: ldc           #85
1105: invokevirtual #86
1108: invokevirtual #89
1111: aload         20
1113: getstatic     #128
1116: invokevirtual #90
1119: invokestatic  #91
1122: aload         21
1124: invokestatic  #20
1127: aload         21
1129: invokestatic  #92
1132: ldc           #140
1134: invokestatic  #23
1137: aload         21
1139: invokestatic  #93
1142: ldc           #140
1144: invokestatic  #23
1147: aload         23
1149: invokestatic  #20
1152: new           #83
1155: dup
1156: invokespecial #84
1159: ldc           #85
1161: invokevirtual #86
1164: aload         24
1166: invokevirtual #87
1169: ldc           #88
1171: invokevirtual #86
1174: getstatic     #519
1177: invokevirtual #87
1180: ldc           #85
1182: invokevirtual #86
1185: invokevirtual #89
1188: aload         24
1190: getstatic     #519
1193: invokevirtual #90
1196: invokestatic  #91
1199: new           #83
1202: dup
1203: invokespecial #84
1206: ldc           #85
1208: invokevirtual #86
1211: aload         25
1213: invokevirtual #87
1216: ldc           #88
1218: invokevirtual #86
1221: getstatic     #127
1224: invokevirtual #87
1227: ldc           #85
1229: invokevirtual #86
1232: invokevirtual #89
1235: aload         25
1237: getstatic     #127
1240: invokevirtual #90
1243: invokestatic  #91
1246: new           #83
1249: dup
1250: invokespecial #84
1253: ldc           #85
1255: invokevirtual #86
1258: aload         26
1260: invokevirtual #87
1263: ldc           #88
1265: invokevirtual #86
1268: getstatic     #128
1271: invokevirtual #87
1274: ldc           #85
1276: invokevirtual #86
1279: invokevirtual #89
1282: aload         26
1284: getstatic     #128
1287: invokevirtual #90
1290: invokestatic  #91
1293: aload         27
1295: invokestatic  #20
1298: aload         27
1300: invokestatic  #92
1303: ldc           #140
1305: invokestatic  #23
1308: aload         27
1310: invokestatic  #93
1313: ldc           #140
1315: invokestatic  #23
1318: new           #83
1321: dup
1322: invokespecial #84
1325: ldc           #85
1327: invokevirtual #86
1330: aload         29
1332: invokevirtual #87
1335: ldc           #88
1337: invokevirtual #86
1340: getstatic     #127
1343: invokevirtual #87
1346: ldc           #85
1348: invokevirtual #86
1351: invokevirtual #89
1354: aload         29
1356: getstatic     #127
1359: invokevirtual #90
1362: invokestatic  #91
1365: new           #83
1368: dup
1369: invokespecial #84
1372: ldc           #85
1374: invokevirtual #86
1377: aload         30
1379: invokevirtual #87
1382: ldc           #88
1384: invokevirtual #86
1387: getstatic     #128
1390: invokevirtual #87
1393: ldc           #85
1395: invokevirtual #86
1398: invokevirtual #89
1401: aload         30
1403: getstatic     #128
1406: invokevirtual #90
1409: invokestatic  #91
1412: aload         31
1414: invokestatic  #20
1417: aload         31
1419: invokestatic  #92
1422: ldc           #140
1424: invokestatic  #23
1427: aload         31
1429: invokestatic  #93
1432: ldc           #140
1434: invokestatic  #23
1437: new           #83
1440: dup
1441: invokespecial #84
1444: ldc           #85
1446: invokevirtual #86
1449: aload         33
1451: invokevirtual #87
1454: ldc           #88
1456: invokevirtual #86
1459: getstatic     #133
1462: invokevirtual #87
1465: ldc           #85
1467: invokevirtual #86
1470: invokevirtual #89
1473: aload         33
1475: getstatic     #133
1478: invokevirtual #90
1481: invokestatic  #91
1484: new           #83
1487: dup
1488: invokespecial #84
1491: ldc           #85
1493: invokevirtual #86
1496: aload         34
1498: invokevirtual #87
1501: ldc           #88
1503: invokevirtual #86
1506: getstatic     #134
1509: invokevirtual #87
1512: ldc           #85
1514: invokevirtual #86
1517: invokevirtual #89
1520: aload         34
1522: getstatic     #134
1525: invokevirtual #90
1528: invokestatic  #91
1531: aload         35
1533: invokestatic  #20
1536: aload         35
1538: invokestatic  #92
1541: ldc           #141
1543: invokestatic  #23
1546: aload         35
1548: invokestatic  #93
1551: ldc           #141
1553: invokestatic  #23
1556: new           #83
1559: dup
1560: invokespecial #84
1563: ldc           #85
1565: invokevirtual #86
1568: aload         37
1570: invokevirtual #87
1573: ldc           #88
1575: invokevirtual #86
1578: getstatic     #816
1581: invokevirtual #87
1584: ldc           #85
1586: invokevirtual #86
1589: invokevirtual #89
1592: aload         37
1594: getstatic     #816
1597: invokevirtual #90
1600: invokestatic  #91
1603: new           #83
1606: dup
1607: invokespecial #84
1610: ldc           #85
1612: invokevirtual #86
1615: aload         38
1617: invokevirtual #87
1620: ldc           #88
1622: invokevirtual #86
1625: getstatic     #127
1628: invokevirtual #87
1631: ldc           #85
1633: invokevirtual #86
1636: invokevirtual #89
1639: aload         38
1641: getstatic     #127
1644: invokevirtual #90
1647: invokestatic  #91
1650: new           #83
1653: dup
1654: invokespecial #84
1657: ldc           #85
1659: invokevirtual #86
1662: aload         39
1664: invokevirtual #87
1667: ldc           #88
1669: invokevirtual #86
1672: getstatic     #128
1675: invokevirtual #87
1678: ldc           #85
1680: invokevirtual #86
1683: invokevirtual #89
1686: aload         39
1688: getstatic     #128
1691: invokevirtual #90
1694: invokestatic  #91
1697: aload         40
1699: invokestatic  #20
1702: aload         40
1704: invokestatic  #92
1707: ldc           #140
1709: invokestatic  #23
1712: aload         40
1714: invokestatic  #93
1717: ldc           #140
1719: invokestatic  #23
1722: aload         43
1724: invokestatic  #20
1727: aload         43
1729: invokestatic  #92
1732: ldc           #140
1734: invokestatic  #23
1737: aload         43
1739: invokestatic  #93
1742: ldc           #140
1744: invokestatic  #23
1747: aload         44
1749: invokestatic  #171
1752: new           #83
1755: dup
1756: invokespecial #84
1759: ldc           #85
1761: invokevirtual #86
1764: aload         45
1766: invokevirtual #87
1769: ldc           #88
1771: invokevirtual #86
1774: getstatic     #639
1777: invokevirtual #87
1780: ldc           #85
1782: invokevirtual #86
1785: invokevirtual #89
1788: aload         45
1790: getstatic     #639
1793: invokevirtual #90
1796: invokestatic  #91
1799: aload         48
1801: invokestatic  #20
1804: aload         49
1806: invokestatic  #20
1809: aload         50
1811: invokestatic  #20
1814: aload         51
1816: invokestatic  #20
1819: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test437
Start line: 15221
End line: 15242
Method source code: 
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (-1), 10.0d);
        double[] doubleArray19 = new double[] { 97.0d, 0.0d, 0.0f, 100, 0L, '4' };
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray20 = harmonicFitter1.fit(doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[97.0, 0.0, 0.0, 100.0, 0.0, 52.0]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #818
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #25
60: astore_3
61: aload_2
62: ldc2_w        #10
65: ldc2_w        #32
68: invokevirtual #43
71: bipush        6
73: newarray       double
75: dup
76: iconst_0
77: ldc2_w        #44
80: dastore
81: dup
82: iconst_1
83: dconst_0
84: dastore
85: dup
86: iconst_2
87: dconst_0
88: dastore
89: dup
90: iconst_3
91: ldc2_w        #34
94: dastore
95: dup
96: iconst_4
97: dconst_0
98: dastore
99: dup
100: iconst_5
101: ldc2_w        #12
104: dastore
105: astore        4
107: aload_2
108: aload         4
110: invokevirtual #16
113: astore        5
115: ldc           #17
117: invokestatic  #18
120: goto          125
123: astore        5
125: aload_3
126: invokestatic  #20
129: aload         4
131: invokestatic  #20
134: aload         4
136: invokestatic  #21
139: ldc_w         #819
142: invokestatic  #23
145: return
Exception table:
from    to  target type
107   120   123   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test438
Start line: 15245
End line: 15254
Method source code: 
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(52.0d, (double) '#');
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #820
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: invokevirtual #59
48: aload_2
49: invokevirtual #59
52: aload_2
53: ldc2_w        #12
56: ldc2_w        #14
59: invokevirtual #43
62: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test439
Start line: 15257
End line: 15279
Method source code: 
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint(0.0d, (double) (byte) 1, (double) (byte) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint16 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double17 = weightedObservedPoint16.getWeight();
        double double18 = weightedObservedPoint16.getX();
        double double19 = weightedObservedPoint16.getX();
        double double20 = weightedObservedPoint16.getWeight();
        harmonicFitter1.addObservedPoint(weightedObservedPoint16);
        double double22 = weightedObservedPoint16.getWeight();
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 35.0d + "'", double17 == 35.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 52.0d + "'", double19 == 52.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 35.0d + "'", double20 == 35.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #821
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: dconst_0
59: dconst_1
60: ldc2_w        #34
63: invokevirtual #54
66: new           #145
69: dup
70: ldc2_w        #14
73: ldc2_w        #12
76: ldc2_w        #12
79: invokespecial #146
82: astore        4
84: aload         4
86: invokevirtual #148
89: dstore        5
91: aload         4
93: invokevirtual #147
96: dstore        7
98: aload         4
100: invokevirtual #147
103: dstore        9
105: aload         4
107: invokevirtual #148
110: dstore        11
112: aload_2
113: aload         4
115: invokevirtual #123
118: aload         4
120: invokevirtual #148
123: dstore        13
125: aload_3
126: invokestatic  #20
129: new           #83
132: dup
133: invokespecial #84
136: ldc           #85
138: invokevirtual #86
141: dload         5
143: invokevirtual #150
146: ldc           #88
148: invokevirtual #86
151: ldc2_w        #14
154: invokevirtual #150
157: ldc           #85
159: invokevirtual #86
162: invokevirtual #89
165: dload         5
167: ldc2_w        #14
170: dcmpl
171: ifne          178
174: iconst_1
175: goto          179
178: iconst_0
179: invokestatic  #91
182: new           #83
185: dup
186: invokespecial #84
189: ldc           #85
191: invokevirtual #86
194: dload         7
196: invokevirtual #150
199: ldc           #88
201: invokevirtual #86
204: ldc2_w        #12
207: invokevirtual #150
210: ldc           #85
212: invokevirtual #86
215: invokevirtual #89
218: dload         7
220: ldc2_w        #12
223: dcmpl
224: ifne          231
227: iconst_1
228: goto          232
231: iconst_0
232: invokestatic  #91
235: new           #83
238: dup
239: invokespecial #84
242: ldc           #85
244: invokevirtual #86
247: dload         9
249: invokevirtual #150
252: ldc           #88
254: invokevirtual #86
257: ldc2_w        #12
260: invokevirtual #150
263: ldc           #85
265: invokevirtual #86
268: invokevirtual #89
271: dload         9
273: ldc2_w        #12
276: dcmpl
277: ifne          284
280: iconst_1
281: goto          285
284: iconst_0
285: invokestatic  #91
288: new           #83
291: dup
292: invokespecial #84
295: ldc           #85
297: invokevirtual #86
300: dload         11
302: invokevirtual #150
305: ldc           #88
307: invokevirtual #86
310: ldc2_w        #14
313: invokevirtual #150
316: ldc           #85
318: invokevirtual #86
321: invokevirtual #89
324: dload         11
326: ldc2_w        #14
329: dcmpl
330: ifne          337
333: iconst_1
334: goto          338
337: iconst_0
338: invokestatic  #91
341: new           #83
344: dup
345: invokespecial #84
348: ldc           #85
350: invokevirtual #86
353: dload         13
355: invokevirtual #150
358: ldc           #88
360: invokevirtual #86
363: ldc2_w        #14
366: invokevirtual #150
369: ldc           #85
371: invokevirtual #86
374: invokevirtual #89
377: dload         13
379: ldc2_w        #14
382: dcmpl
383: ifne          390
386: iconst_1
387: goto          391
390: iconst_0
391: invokestatic  #91
394: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test440
Start line: 15282
End line: 15304
Method source code: 
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 10, (double) 0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint16 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint(0.0d, (double) (short) 10, (double) 0L);
        harmonicFitter1.addObservedPoint(weightedObservedPoint16);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint21 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double22 = weightedObservedPoint21.getX();
        double double23 = weightedObservedPoint21.getY();
        double double24 = weightedObservedPoint21.getY();
        harmonicFitter1.addObservedPoint(weightedObservedPoint21);
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 52.0d + "'", double22 == 52.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 52.0d + "'", double23 == 52.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 52.0d + "'", double24 == 52.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #822
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: invokevirtual #25
61: astore        4
63: aload_2
64: ldc2_w        #32
67: dconst_0
68: invokevirtual #43
71: new           #145
74: dup
75: dconst_0
76: ldc2_w        #32
79: dconst_0
80: invokespecial #146
83: astore        5
85: aload_2
86: aload         5
88: invokevirtual #123
91: new           #145
94: dup
95: ldc2_w        #14
98: ldc2_w        #12
101: ldc2_w        #12
104: invokespecial #146
107: astore        6
109: aload         6
111: invokevirtual #147
114: dstore        7
116: aload         6
118: invokevirtual #149
121: dstore        9
123: aload         6
125: invokevirtual #149
128: dstore        11
130: aload_2
131: aload         6
133: invokevirtual #123
136: aload_3
137: invokestatic  #20
140: aload         4
142: invokestatic  #20
145: new           #83
148: dup
149: invokespecial #84
152: ldc           #85
154: invokevirtual #86
157: dload         7
159: invokevirtual #150
162: ldc           #88
164: invokevirtual #86
167: ldc2_w        #12
170: invokevirtual #150
173: ldc           #85
175: invokevirtual #86
178: invokevirtual #89
181: dload         7
183: ldc2_w        #12
186: dcmpl
187: ifne          194
190: iconst_1
191: goto          195
194: iconst_0
195: invokestatic  #91
198: new           #83
201: dup
202: invokespecial #84
205: ldc           #85
207: invokevirtual #86
210: dload         9
212: invokevirtual #150
215: ldc           #88
217: invokevirtual #86
220: ldc2_w        #12
223: invokevirtual #150
226: ldc           #85
228: invokevirtual #86
231: invokevirtual #89
234: dload         9
236: ldc2_w        #12
239: dcmpl
240: ifne          247
243: iconst_1
244: goto          248
247: iconst_0
248: invokestatic  #91
251: new           #83
254: dup
255: invokespecial #84
258: ldc           #85
260: invokevirtual #86
263: dload         11
265: invokevirtual #150
268: ldc           #88
270: invokevirtual #86
273: ldc2_w        #12
276: invokevirtual #150
279: ldc           #85
281: invokevirtual #86
284: invokevirtual #89
287: dload         11
289: ldc2_w        #12
292: dcmpl
293: ifne          300
296: iconst_1
297: goto          301
300: iconst_0
301: invokestatic  #91
304: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test441
Start line: 15307
End line: 15325
Method source code: 
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSION;
        java.lang.String str1 = localizedFormats0.getSourceString();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer2 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter3 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer2);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray4 = harmonicFitter3.getObservations();
        harmonicFitter3.addObservedPoint((double) 10L, (double) (-1.0f), 0.0d);
        harmonicFitter3.addObservedPoint((double) 'a', (double) '#');
        harmonicFitter3.addObservedPoint(52.0d, 0.0d, (double) 'a');
        harmonicFitter3.addObservedPoint((double) (short) 0, 0.0d, (double) 10);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray20 = harmonicFitter3.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException21 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray20);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.DIMENSION));
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "dimension ({0})" + "'", str1, "dimension ({0})");
        org.junit.Assert.assertNotNull(weightedObservedPointArray4);
        org.junit.Assert.assertNotNull(weightedObservedPointArray20);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #823
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #638
28: astore_1
29: aload_1
30: invokevirtual #301
33: astore_2
34: aconst_null
35: astore_3
36: new           #8
39: dup
40: aload_3
41: invokespecial #9
44: astore        4
46: aload         4
48: invokevirtual #25
51: astore        5
53: aload         4
55: ldc2_w        #32
58: ldc2_w        #10
61: dconst_0
62: invokevirtual #54
65: aload         4
67: ldc2_w        #44
70: ldc2_w        #14
73: invokevirtual #43
76: aload         4
78: ldc2_w        #12
81: dconst_0
82: ldc2_w        #44
85: invokevirtual #54
88: aload         4
90: dconst_0
91: dconst_0
92: ldc2_w        #32
95: invokevirtual #54
98: aload         4
100: invokevirtual #25
103: astore        6
105: new           #136
108: dup
109: aload_1
110: aload         6
112: checkcast     #79
115: invokespecial #138
118: astore        7
120: new           #83
123: dup
124: invokespecial #84
127: ldc           #85
129: invokevirtual #86
132: aload_1
133: invokevirtual #87
136: ldc           #88
138: invokevirtual #86
141: getstatic     #638
144: invokevirtual #87
147: ldc           #85
149: invokevirtual #86
152: invokevirtual #89
155: aload_1
156: getstatic     #638
159: invokevirtual #90
162: invokestatic  #91
165: new           #83
168: dup
169: invokespecial #84
172: ldc           #85
174: invokevirtual #86
177: aload_2
178: invokevirtual #86
181: ldc_w         #641
184: invokevirtual #86
187: invokevirtual #89
190: aload_2
191: ldc_w         #642
194: invokestatic  #245
197: aload         5
199: invokestatic  #20
202: aload         6
204: invokestatic  #20
207: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test442
Start line: 15328
End line: 15355
Method source code: 
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATIONS;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer1 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter2 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer1);
        harmonicFitter2.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter2.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter2.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray10 = harmonicFitter2.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint14 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double15 = weightedObservedPoint14.getX();
        double double16 = weightedObservedPoint14.getY();
        double double17 = weightedObservedPoint14.getX();
        double double18 = weightedObservedPoint14.getY();
        harmonicFitter2.addObservedPoint(weightedObservedPoint14);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray20 = harmonicFitter2.getObservations();
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException21 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) weightedObservedPointArray20);
        java.lang.Throwable[] throwableArray22 = mathIllegalArgumentException21.getSuppressed();
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATIONS + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EVALUATIONS));
        org.junit.Assert.assertNotNull(weightedObservedPointArray10);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 52.0d + "'", double15 == 52.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 52.0d + "'", double16 == 52.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 52.0d + "'", double17 == 52.0d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 52.0d + "'", double18 == 52.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #824
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #797
28: astore_1
29: aconst_null
30: astore_2
31: new           #8
34: dup
35: aload_2
36: invokespecial #9
39: astore_3
40: aload_3
41: dconst_1
42: ldc2_w        #32
45: invokevirtual #43
48: aload_3
49: dconst_0
50: ldc2_w        #34
53: invokevirtual #43
56: aload_3
57: invokevirtual #59
60: aload_3
61: invokevirtual #25
64: astore        4
66: new           #145
69: dup
70: ldc2_w        #14
73: ldc2_w        #12
76: ldc2_w        #12
79: invokespecial #146
82: astore        5
84: aload         5
86: invokevirtual #147
89: dstore        6
91: aload         5
93: invokevirtual #149
96: dstore        8
98: aload         5
100: invokevirtual #147
103: dstore        10
105: aload         5
107: invokevirtual #149
110: dstore        12
112: aload_3
113: aload         5
115: invokevirtual #123
118: aload_3
119: invokevirtual #25
122: astore        14
124: new           #130
127: dup
128: aload_1
129: aload         14
131: checkcast     #79
134: invokespecial #131
137: astore        15
139: aload         15
141: invokevirtual #234
144: astore        16
146: new           #83
149: dup
150: invokespecial #84
153: ldc           #85
155: invokevirtual #86
158: aload_1
159: invokevirtual #87
162: ldc           #88
164: invokevirtual #86
167: getstatic     #797
170: invokevirtual #87
173: ldc           #85
175: invokevirtual #86
178: invokevirtual #89
181: aload_1
182: getstatic     #797
185: invokevirtual #90
188: invokestatic  #91
191: aload         4
193: invokestatic  #20
196: new           #83
199: dup
200: invokespecial #84
203: ldc           #85
205: invokevirtual #86
208: dload         6
210: invokevirtual #150
213: ldc           #88
215: invokevirtual #86
218: ldc2_w        #12
221: invokevirtual #150
224: ldc           #85
226: invokevirtual #86
229: invokevirtual #89
232: dload         6
234: ldc2_w        #12
237: dcmpl
238: ifne          245
241: iconst_1
242: goto          246
245: iconst_0
246: invokestatic  #91
249: new           #83
252: dup
253: invokespecial #84
256: ldc           #85
258: invokevirtual #86
261: dload         8
263: invokevirtual #150
266: ldc           #88
268: invokevirtual #86
271: ldc2_w        #12
274: invokevirtual #150
277: ldc           #85
279: invokevirtual #86
282: invokevirtual #89
285: dload         8
287: ldc2_w        #12
290: dcmpl
291: ifne          298
294: iconst_1
295: goto          299
298: iconst_0
299: invokestatic  #91
302: new           #83
305: dup
306: invokespecial #84
309: ldc           #85
311: invokevirtual #86
314: dload         10
316: invokevirtual #150
319: ldc           #88
321: invokevirtual #86
324: ldc2_w        #12
327: invokevirtual #150
330: ldc           #85
332: invokevirtual #86
335: invokevirtual #89
338: dload         10
340: ldc2_w        #12
343: dcmpl
344: ifne          351
347: iconst_1
348: goto          352
351: iconst_0
352: invokestatic  #91
355: new           #83
358: dup
359: invokespecial #84
362: ldc           #85
364: invokevirtual #86
367: dload         12
369: invokevirtual #150
372: ldc           #88
374: invokevirtual #86
377: ldc2_w        #12
380: invokevirtual #150
383: ldc           #85
385: invokevirtual #86
388: invokevirtual #89
391: dload         12
393: ldc2_w        #12
396: dcmpl
397: ifne          404
400: iconst_1
401: goto          405
404: iconst_0
405: invokestatic  #91
408: aload         14
410: invokestatic  #20
413: aload         16
415: invokestatic  #20
418: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test443
Start line: 15358
End line: 15381
Method source code: 
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray8 = harmonicFitter1.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray9 = harmonicFitter1.getObservations();
        harmonicFitter1.addObservedPoint((double) (byte) 10, (double) 0);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint16 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint(0.0d, (double) (short) 10, (double) 0L);
        harmonicFitter1.addObservedPoint(weightedObservedPoint16);
        org.apache.commons.math3.analysis.function.HarmonicOscillator.Parametric parametric19 = null;
        double[] doubleArray20 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = harmonicFitter1.fit(10, parametric19, doubleArray20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(weightedObservedPointArray8);
        org.junit.Assert.assertNotNull(weightedObservedPointArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #825
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #25
56: astore_3
57: aload_2
58: invokevirtual #25
61: astore        4
63: aload_2
64: ldc2_w        #32
67: dconst_0
68: invokevirtual #43
71: new           #145
74: dup
75: dconst_0
76: ldc2_w        #32
79: dconst_0
80: invokespecial #146
83: astore        5
85: aload_2
86: aload         5
88: invokevirtual #123
91: aconst_null
92: astore        6
94: aconst_null
95: astore        7
97: aload_2
98: bipush        10
100: aload         6
102: aload         7
104: invokevirtual #40
107: astore        8
109: ldc           #17
111: invokestatic  #18
114: goto          119
117: astore        8
119: aload_3
120: invokestatic  #20
123: aload         4
125: invokestatic  #20
128: return
Exception table:
from    to  target type
97   114   117   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test444
Start line: 15384
End line: 15440
Method source code: 
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray3 = new java.lang.Object[] { localizedFormats1, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException4 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, objArray3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats5 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray8 = new java.lang.Object[] { localizedFormats6, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException9 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats5, objArray8);
        mathIllegalArgumentException4.addSuppressed((java.lang.Throwable) mathIllegalArgumentException9);
        java.lang.Throwable[] throwableArray11 = mathIllegalArgumentException4.getSuppressed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext12 = mathIllegalArgumentException4.getContext();
        java.lang.Object obj14 = exceptionContext12.getValue("");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING;
        exceptionContext12.setValue("{0} out of [{1}, {2}) range", (java.lang.Object) localizedFormats16);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats18 = org.apache.commons.math3.exception.util.LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED;
        org.apache.commons.math3.exception.util.Localizable localizable19 = null;
        java.lang.Number number21 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException23 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 100L, number21, true);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats24 = org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer25 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter26 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer25);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray27 = harmonicFitter26.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray28 = harmonicFitter26.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray29 = harmonicFitter26.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException30 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException23, (org.apache.commons.math3.exception.util.Localizable) localizedFormats24, (java.lang.Object[]) weightedObservedPointArray29);
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException31 = new org.apache.commons.math3.exception.MathIllegalArgumentException(localizable19, (java.lang.Object[]) weightedObservedPointArray29);
        exceptionContext12.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats18, (java.lang.Object[]) weightedObservedPointArray29);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser parameterGuesser33 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter.ParameterGuesser(weightedObservedPointArray29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: sample contains 0 observed points, at least 4 are required");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats5 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats5.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(exceptionContext12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.MAP_MODIFIED_WHILE_ITERATING));
        org.junit.Assert.assertTrue("'" + localizedFormats18 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED + "'", localizedFormats18.equals(org.apache.commons.math3.exception.util.LocalizedFormats.TWO_OR_MORE_CATEGORIES_REQUIRED));
        org.junit.Assert.assertTrue("'" + localizedFormats24 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE + "'", localizedFormats24.equals(org.apache.commons.math3.exception.util.LocalizedFormats.SHAPE));
        org.junit.Assert.assertNotNull(weightedObservedPointArray27);
        org.junit.Assert.assertNotNull(weightedObservedPointArray28);
        org.junit.Assert.assertNotNull(weightedObservedPointArray29);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #826
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #127
28: astore_1
29: getstatic     #128
32: astore_2
33: iconst_2
34: anewarray     #5
37: dup
38: iconst_0
39: aload_2
40: aastore
41: dup
42: iconst_1
43: lconst_1
44: invokestatic  #129
47: aastore
48: astore_3
49: new           #130
52: dup
53: aload_1
54: aload_3
55: invokespecial #131
58: astore        4
60: getstatic     #127
63: astore        5
65: getstatic     #128
68: astore        6
70: iconst_2
71: anewarray     #5
74: dup
75: iconst_0
76: aload         6
78: aastore
79: dup
80: iconst_1
81: lconst_1
82: invokestatic  #129
85: aastore
86: astore        7
88: new           #130
91: dup
92: aload         5
94: aload         7
96: invokespecial #131
99: astore        8
101: aload         4
103: aload         8
105: invokevirtual #132
108: aload         4
110: invokevirtual #234
113: astore        9
115: aload         4
117: invokevirtual #165
120: astore        10
122: aload         10
124: ldc_w         #384
127: invokevirtual #167
130: astore        11
132: getstatic     #445
135: astore        12
137: aload         10
139: ldc_w         #446
142: aload         12
144: invokevirtual #373
147: getstatic     #447
150: astore        13
152: aconst_null
153: astore        14
155: aconst_null
156: astore        15
158: new           #28
161: dup
162: ldc2_w        #252
165: invokestatic  #129
168: aload         15
170: iconst_1
171: invokespecial #160
174: astore        16
176: getstatic     #254
179: astore        17
181: aconst_null
182: astore        18
184: new           #8
187: dup
188: aload         18
190: invokespecial #9
193: astore        19
195: aload         19
197: invokevirtual #25
200: astore        20
202: aload         19
204: invokevirtual #25
207: astore        21
209: aload         19
211: invokevirtual #25
214: astore        22
216: new           #136
219: dup
220: aload         16
222: aload         17
224: aload         22
226: checkcast     #79
229: invokespecial #137
232: astore        23
234: new           #130
237: dup
238: aload         14
240: aload         22
242: checkcast     #79
245: invokespecial #131
248: astore        24
250: aload         10
252: aload         13
254: aload         22
256: checkcast     #79
259: invokevirtual #169
262: new           #69
265: dup
266: aload         22
268: invokespecial #70
271: astore        25
273: ldc           #27
275: invokestatic  #18
278: goto          283
281: astore        25
283: new           #83
286: dup
287: invokespecial #84
290: ldc           #85
292: invokevirtual #86
295: aload_1
296: invokevirtual #87
299: ldc           #88
301: invokevirtual #86
304: getstatic     #127
307: invokevirtual #87
310: ldc           #85
312: invokevirtual #86
315: invokevirtual #89
318: aload_1
319: getstatic     #127
322: invokevirtual #90
325: invokestatic  #91
328: new           #83
331: dup
332: invokespecial #84
335: ldc           #85
337: invokevirtual #86
340: aload_2
341: invokevirtual #87
344: ldc           #88
346: invokevirtual #86
349: getstatic     #128
352: invokevirtual #87
355: ldc           #85
357: invokevirtual #86
360: invokevirtual #89
363: aload_2
364: getstatic     #128
367: invokevirtual #90
370: invokestatic  #91
373: aload_3
374: invokestatic  #20
377: aload_3
378: invokestatic  #92
381: ldc           #140
383: invokestatic  #23
386: aload_3
387: invokestatic  #93
390: ldc           #140
392: invokestatic  #23
395: new           #83
398: dup
399: invokespecial #84
402: ldc           #85
404: invokevirtual #86
407: aload         5
409: invokevirtual #87
412: ldc           #88
414: invokevirtual #86
417: getstatic     #127
420: invokevirtual #87
423: ldc           #85
425: invokevirtual #86
428: invokevirtual #89
431: aload         5
433: getstatic     #127
436: invokevirtual #90
439: invokestatic  #91
442: new           #83
445: dup
446: invokespecial #84
449: ldc           #85
451: invokevirtual #86
454: aload         6
456: invokevirtual #87
459: ldc           #88
461: invokevirtual #86
464: getstatic     #128
467: invokevirtual #87
470: ldc           #85
472: invokevirtual #86
475: invokevirtual #89
478: aload         6
480: getstatic     #128
483: invokevirtual #90
486: invokestatic  #91
489: aload         7
491: invokestatic  #20
494: aload         7
496: invokestatic  #92
499: ldc           #140
501: invokestatic  #23
504: aload         7
506: invokestatic  #93
509: ldc           #140
511: invokestatic  #23
514: aload         9
516: invokestatic  #20
519: aload         10
521: invokestatic  #20
524: aload         11
526: invokestatic  #171
529: new           #83
532: dup
533: invokespecial #84
536: ldc           #85
538: invokevirtual #86
541: aload         12
543: invokevirtual #87
546: ldc           #88
548: invokevirtual #86
551: getstatic     #445
554: invokevirtual #87
557: ldc           #85
559: invokevirtual #86
562: invokevirtual #89
565: aload         12
567: getstatic     #445
570: invokevirtual #90
573: invokestatic  #91
576: new           #83
579: dup
580: invokespecial #84
583: ldc           #85
585: invokevirtual #86
588: aload         13
590: invokevirtual #87
593: ldc           #88
595: invokevirtual #86
598: getstatic     #447
601: invokevirtual #87
604: ldc           #85
606: invokevirtual #86
609: invokevirtual #89
612: aload         13
614: getstatic     #447
617: invokevirtual #90
620: invokestatic  #91
623: new           #83
626: dup
627: invokespecial #84
630: ldc           #85
632: invokevirtual #86
635: aload         17
637: invokevirtual #87
640: ldc           #88
642: invokevirtual #86
645: getstatic     #254
648: invokevirtual #87
651: ldc           #85
653: invokevirtual #86
656: invokevirtual #89
659: aload         17
661: getstatic     #254
664: invokevirtual #90
667: invokestatic  #91
670: aload         20
672: invokestatic  #20
675: aload         21
677: invokestatic  #20
680: aload         22
682: invokestatic  #20
685: return
Exception table:
from    to  target type
262   278   281   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test445
Start line: 15443
End line: 15586
Method source code: 
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats0 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats1 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats2 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray4 = new java.lang.Object[] { localizedFormats2, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException5 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats1, objArray4);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats6 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats7 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray9 = new java.lang.Object[] { localizedFormats7, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException10 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats6, objArray9);
        mathIllegalArgumentException5.addSuppressed((java.lang.Throwable) mathIllegalArgumentException10);
        java.lang.Throwable[] throwableArray12 = mathIllegalArgumentException5.getSuppressed();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException13 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats0, (java.lang.Object[]) throwableArray12);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext14 = mathIllegalStateException13.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats16 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats17 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray19 = new java.lang.Object[] { localizedFormats17, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException20 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats16, objArray19);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats21 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats22 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray24 = new java.lang.Object[] { localizedFormats22, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException25 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats21, objArray24);
        mathIllegalArgumentException20.addSuppressed((java.lang.Throwable) mathIllegalArgumentException25);
        java.lang.Throwable[] throwableArray27 = mathIllegalArgumentException20.getSuppressed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext28 = mathIllegalArgumentException20.getContext();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats29 = org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NOT_ALLOWED;
        java.lang.Number number31 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException33 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number31, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats34 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException36 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException33, (org.apache.commons.math3.exception.util.Localizable) localizedFormats34, objArray35);
        boolean boolean37 = numberIsTooSmallException33.getBoundIsAllowed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext38 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException33);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats39 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats40 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray42 = new java.lang.Object[] { localizedFormats40, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException43 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats39, objArray42);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats44 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats45 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray47 = new java.lang.Object[] { localizedFormats45, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException48 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats44, objArray47);
        mathIllegalArgumentException43.addSuppressed((java.lang.Throwable) mathIllegalArgumentException48);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext50 = mathIllegalArgumentException43.getContext();
        java.lang.Object obj52 = exceptionContext50.getValue("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}");
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats53 = org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer54 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter55 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer54);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray56 = harmonicFitter55.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray57 = harmonicFitter55.getObservations();
        exceptionContext50.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats53, (java.lang.Object[]) weightedObservedPointArray57);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats59 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer60 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter61 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer60);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray62 = harmonicFitter61.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException63 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats59, (java.lang.Object[]) weightedObservedPointArray62);
        exceptionContext38.addMessage((org.apache.commons.math3.exception.util.Localizable) localizedFormats53, (java.lang.Object[]) weightedObservedPointArray62);
        org.apache.commons.math3.exception.util.Localizable localizable65 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats66 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats67 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray69 = new java.lang.Object[] { localizedFormats67, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException70 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats66, objArray69);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats71 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats72 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray74 = new java.lang.Object[] { localizedFormats72, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException75 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats71, objArray74);
        mathIllegalArgumentException70.addSuppressed((java.lang.Throwable) mathIllegalArgumentException75);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext77 = mathIllegalArgumentException70.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext78 = mathIllegalArgumentException70.getContext();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext79 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) mathIllegalArgumentException70);
        org.apache.commons.math3.exception.util.Localizable localizable80 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats81 = org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer82 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter83 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer82);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray84 = harmonicFitter83.getObservations();
        org.apache.commons.math3.exception.ZeroException zeroException85 = new org.apache.commons.math3.exception.ZeroException((org.apache.commons.math3.exception.util.Localizable) localizedFormats81, (java.lang.Object[]) weightedObservedPointArray84);
        exceptionContext79.addMessage(localizable80, (java.lang.Object[]) weightedObservedPointArray84);
        exceptionContext38.addMessage(localizable65, (java.lang.Object[]) weightedObservedPointArray84);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException88 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalArgumentException20, (org.apache.commons.math3.exception.util.Localizable) localizedFormats29, (java.lang.Object[]) weightedObservedPointArray84);
        exceptionContext14.setValue("org.apache.commons.math3.exception.NumberIsTooSmallException: 10 is smaller than the minimum (null)", (java.lang.Object) mathIllegalStateException88);
        org.junit.Assert.assertTrue("'" + localizedFormats0 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION + "'", localizedFormats0.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION));
        org.junit.Assert.assertTrue("'" + localizedFormats1 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats1.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats2 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats2.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats6 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats6.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats7 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats7.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(exceptionContext14);
        org.junit.Assert.assertTrue("'" + localizedFormats16 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats16.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats17 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats17.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats21 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats21.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats22 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats22.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(exceptionContext28);
        org.junit.Assert.assertTrue("'" + localizedFormats29 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NOT_ALLOWED + "'", localizedFormats29.equals(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NOT_ALLOWED));
        org.junit.Assert.assertTrue("'" + localizedFormats34 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats34.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + localizedFormats39 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats39.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats40 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats40.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats44 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats44.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats45 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats45.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext50);
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertTrue("'" + localizedFormats53 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION + "'", localizedFormats53.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NAN_VALUE_CONVERSION));
        org.junit.Assert.assertNotNull(weightedObservedPointArray56);
        org.junit.Assert.assertNotNull(weightedObservedPointArray57);
        org.junit.Assert.assertTrue("'" + localizedFormats59 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats59.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray62);
        org.junit.Assert.assertTrue("'" + localizedFormats66 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats66.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats67 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats67.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertTrue("'" + localizedFormats71 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats71.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats72 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats72.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertNotNull(exceptionContext77);
        org.junit.Assert.assertNotNull(exceptionContext78);
        org.junit.Assert.assertTrue("'" + localizedFormats81 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR + "'", localizedFormats81.equals(org.apache.commons.math3.exception.util.LocalizedFormats.UNPARSEABLE_3D_VECTOR));
        org.junit.Assert.assertNotNull(weightedObservedPointArray84);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #827
20: aastore
21: invokevirtual #7
24: pop
25: getstatic     #233
28: astore_1
29: getstatic     #127
32: astore_2
33: getstatic     #128
36: astore_3
37: iconst_2
38: anewarray     #5
41: dup
42: iconst_0
43: aload_3
44: aastore
45: dup
46: iconst_1
47: lconst_1
48: invokestatic  #129
51: aastore
52: astore        4
54: new           #130
57: dup
58: aload_2
59: aload         4
61: invokespecial #131
64: astore        5
66: getstatic     #127
69: astore        6
71: getstatic     #128
74: astore        7
76: iconst_2
77: anewarray     #5
80: dup
81: iconst_0
82: aload         7
84: aastore
85: dup
86: iconst_1
87: lconst_1
88: invokestatic  #129
91: aastore
92: astore        8
94: new           #130
97: dup
98: aload         6
100: aload         8
102: invokespecial #131
105: astore        9
107: aload         5
109: aload         9
111: invokevirtual #132
114: aload         5
116: invokevirtual #234
119: astore        10
121: new           #136
124: dup
125: aload_1
126: aload         10
128: checkcast     #79
131: invokespecial #138
134: astore        11
136: aload         11
138: invokevirtual #282
141: astore        12
143: getstatic     #127
146: astore        13
148: getstatic     #128
151: astore        14
153: iconst_2
154: anewarray     #5
157: dup
158: iconst_0
159: aload         14
161: aastore
162: dup
163: iconst_1
164: lconst_1
165: invokestatic  #129
168: aastore
169: astore        15
171: new           #130
174: dup
175: aload         13
177: aload         15
179: invokespecial #131
182: astore        16
184: getstatic     #127
187: astore        17
189: getstatic     #128
192: astore        18
194: iconst_2
195: anewarray     #5
198: dup
199: iconst_0
200: aload         18
202: aastore
203: dup
204: iconst_1
205: lconst_1
206: invokestatic  #129
209: aastore
210: astore        19
212: new           #130
215: dup
216: aload         17
218: aload         19
220: invokespecial #131
223: astore        20
225: aload         16
227: aload         20
229: invokevirtual #132
232: aload         16
234: invokevirtual #234
237: astore        21
239: aload         16
241: invokevirtual #165
244: astore        22
246: getstatic     #828
249: astore        23
251: aconst_null
252: astore        24
254: new           #28
257: dup
258: bipush        100
260: invokestatic  #159
263: aload         24
265: iconst_0
266: invokespecial #160
269: astore        25
271: getstatic     #161
274: astore        26
276: iconst_0
277: anewarray     #5
280: astore        27
282: new           #136
285: dup
286: aload         25
288: aload         26
290: aload         27
292: invokespecial #137
295: astore        28
297: aload         25
299: invokevirtual #162
302: istore        29
304: new           #163
307: dup
308: aload         25
310: invokespecial #164
313: astore        30
315: getstatic     #127
318: astore        31
320: getstatic     #128
323: astore        32
325: iconst_2
326: anewarray     #5
329: dup
330: iconst_0
331: aload         32
333: aastore
334: dup
335: iconst_1
336: lconst_1
337: invokestatic  #129
340: aastore
341: astore        33
343: new           #130
346: dup
347: aload         31
349: aload         33
351: invokespecial #131
354: astore        34
356: getstatic     #127
359: astore        35
361: getstatic     #128
364: astore        36
366: iconst_2
367: anewarray     #5
370: dup
371: iconst_0
372: aload         36
374: aastore
375: dup
376: iconst_1
377: lconst_1
378: invokestatic  #129
381: aastore
382: astore        37
384: new           #130
387: dup
388: aload         35
390: aload         37
392: invokespecial #131
395: astore        38
397: aload         34
399: aload         38
401: invokevirtual #132
404: aload         34
406: invokevirtual #165
409: astore        39
411: aload         39
413: ldc           #166
415: invokevirtual #167
418: astore        40
420: getstatic     #168
423: astore        41
425: aconst_null
426: astore        42
428: new           #8
431: dup
432: aload         42
434: invokespecial #9
437: astore        43
439: aload         43
441: invokevirtual #25
444: astore        44
446: aload         43
448: invokevirtual #25
451: astore        45
453: aload         39
455: aload         41
457: aload         45
459: checkcast     #79
462: invokevirtual #169
465: getstatic     #156
468: astore        46
470: aconst_null
471: astore        47
473: new           #8
476: dup
477: aload         47
479: invokespecial #9
482: astore        48
484: aload         48
486: invokevirtual #25
489: astore        49
491: new           #81
494: dup
495: aload         46
497: aload         49
499: checkcast     #79
502: invokespecial #82
505: astore        50
507: aload         30
509: aload         41
511: aload         49
513: checkcast     #79
516: invokevirtual #169
519: aconst_null
520: astore        51
522: getstatic     #127
525: astore        52
527: getstatic     #128
530: astore        53
532: iconst_2
533: anewarray     #5
536: dup
537: iconst_0
538: aload         53
540: aastore
541: dup
542: iconst_1
543: lconst_1
544: invokestatic  #129
547: aastore
548: astore        54
550: new           #130
553: dup
554: aload         52
556: aload         54
558: invokespecial #131
561: astore        55
563: getstatic     #127
566: astore        56
568: getstatic     #128
571: astore        57
573: iconst_2
574: anewarray     #5
577: dup
578: iconst_0
579: aload         57
581: aastore
582: dup
583: iconst_1
584: lconst_1
585: invokestatic  #129
588: aastore
589: astore        58
591: new           #130
594: dup
595: aload         56
597: aload         58
599: invokespecial #131
602: astore        59
604: aload         55
606: aload         59
608: invokevirtual #132
611: aload         55
613: invokevirtual #165
616: astore        60
618: aload         55
620: invokevirtual #165
623: astore        61
625: new           #163
628: dup
629: aload         55
631: invokespecial #164
634: astore        62
636: aconst_null
637: astore        63
639: getstatic     #156
642: astore        64
644: aconst_null
645: astore        65
647: new           #8
650: dup
651: aload         65
653: invokespecial #9
656: astore        66
658: aload         66
660: invokevirtual #25
663: astore        67
665: new           #81
668: dup
669: aload         64
671: aload         67
673: checkcast     #79
676: invokespecial #82
679: astore        68
681: aload         62
683: aload         63
685: aload         67
687: checkcast     #79
690: invokevirtual #169
693: aload         30
695: aload         51
697: aload         67
699: checkcast     #79
702: invokevirtual #169
705: new           #136
708: dup
709: aload         16
711: aload         23
713: aload         67
715: checkcast     #79
718: invokespecial #137
721: astore        69
723: aload         12
725: ldc_w         #521
728: aload         69
730: invokevirtual #373
733: new           #83
736: dup
737: invokespecial #84
740: ldc           #85
742: invokevirtual #86
745: aload_1
746: invokevirtual #87
749: ldc           #88
751: invokevirtual #86
754: getstatic     #233
757: invokevirtual #87
760: ldc           #85
762: invokevirtual #86
765: invokevirtual #89
768: aload_1
769: getstatic     #233
772: invokevirtual #90
775: invokestatic  #91
778: new           #83
781: dup
782: invokespecial #84
785: ldc           #85
787: invokevirtual #86
790: aload_2
791: invokevirtual #87
794: ldc           #88
796: invokevirtual #86
799: getstatic     #127
802: invokevirtual #87
805: ldc           #85
807: invokevirtual #86
810: invokevirtual #89
813: aload_2
814: getstatic     #127
817: invokevirtual #90
820: invokestatic  #91
823: new           #83
826: dup
827: invokespecial #84
830: ldc           #85
832: invokevirtual #86
835: aload_3
836: invokevirtual #87
839: ldc           #88
841: invokevirtual #86
844: getstatic     #128
847: invokevirtual #87
850: ldc           #85
852: invokevirtual #86
855: invokevirtual #89
858: aload_3
859: getstatic     #128
862: invokevirtual #90
865: invokestatic  #91
868: aload         4
870: invokestatic  #20
873: aload         4
875: invokestatic  #92
878: ldc           #140
880: invokestatic  #23
883: aload         4
885: invokestatic  #93
888: ldc           #140
890: invokestatic  #23
893: new           #83
896: dup
897: invokespecial #84
900: ldc           #85
902: invokevirtual #86
905: aload         6
907: invokevirtual #87
910: ldc           #88
912: invokevirtual #86
915: getstatic     #127
918: invokevirtual #87
921: ldc           #85
923: invokevirtual #86
926: invokevirtual #89
929: aload         6
931: getstatic     #127
934: invokevirtual #90
937: invokestatic  #91
940: new           #83
943: dup
944: invokespecial #84
947: ldc           #85
949: invokevirtual #86
952: aload         7
954: invokevirtual #87
957: ldc           #88
959: invokevirtual #86
962: getstatic     #128
965: invokevirtual #87
968: ldc           #85
970: invokevirtual #86
973: invokevirtual #89
976: aload         7
978: getstatic     #128
981: invokevirtual #90
984: invokestatic  #91
987: aload         8
989: invokestatic  #20
992: aload         8
994: invokestatic  #92
997: ldc           #140
999: invokestatic  #23
1002: aload         8
1004: invokestatic  #93
1007: ldc           #140
1009: invokestatic  #23
1012: aload         10
1014: invokestatic  #20
1017: aload         12
1019: invokestatic  #20
1022: new           #83
1025: dup
1026: invokespecial #84
1029: ldc           #85
1031: invokevirtual #86
1034: aload         13
1036: invokevirtual #87
1039: ldc           #88
1041: invokevirtual #86
1044: getstatic     #127
1047: invokevirtual #87
1050: ldc           #85
1052: invokevirtual #86
1055: invokevirtual #89
1058: aload         13
1060: getstatic     #127
1063: invokevirtual #90
1066: invokestatic  #91
1069: new           #83
1072: dup
1073: invokespecial #84
1076: ldc           #85
1078: invokevirtual #86
1081: aload         14
1083: invokevirtual #87
1086: ldc           #88
1088: invokevirtual #86
1091: getstatic     #128
1094: invokevirtual #87
1097: ldc           #85
1099: invokevirtual #86
1102: invokevirtual #89
1105: aload         14
1107: getstatic     #128
1110: invokevirtual #90
1113: invokestatic  #91
1116: aload         15
1118: invokestatic  #20
1121: aload         15
1123: invokestatic  #92
1126: ldc           #140
1128: invokestatic  #23
1131: aload         15
1133: invokestatic  #93
1136: ldc           #140
1138: invokestatic  #23
1141: new           #83
1144: dup
1145: invokespecial #84
1148: ldc           #85
1150: invokevirtual #86
1153: aload         17
1155: invokevirtual #87
1158: ldc           #88
1160: invokevirtual #86
1163: getstatic     #127
1166: invokevirtual #87
1169: ldc           #85
1171: invokevirtual #86
1174: invokevirtual #89
1177: aload         17
1179: getstatic     #127
1182: invokevirtual #90
1185: invokestatic  #91
1188: new           #83
1191: dup
1192: invokespecial #84
1195: ldc           #85
1197: invokevirtual #86
1200: aload         18
1202: invokevirtual #87
1205: ldc           #88
1207: invokevirtual #86
1210: getstatic     #128
1213: invokevirtual #87
1216: ldc           #85
1218: invokevirtual #86
1221: invokevirtual #89
1224: aload         18
1226: getstatic     #128
1229: invokevirtual #90
1232: invokestatic  #91
1235: aload         19
1237: invokestatic  #20
1240: aload         19
1242: invokestatic  #92
1245: ldc           #140
1247: invokestatic  #23
1250: aload         19
1252: invokestatic  #93
1255: ldc           #140
1257: invokestatic  #23
1260: aload         21
1262: invokestatic  #20
1265: aload         22
1267: invokestatic  #20
1270: new           #83
1273: dup
1274: invokespecial #84
1277: ldc           #85
1279: invokevirtual #86
1282: aload         23
1284: invokevirtual #87
1287: ldc           #88
1289: invokevirtual #86
1292: getstatic     #828
1295: invokevirtual #87
1298: ldc           #85
1300: invokevirtual #86
1303: invokevirtual #89
1306: aload         23
1308: getstatic     #828
1311: invokevirtual #90
1314: invokestatic  #91
1317: new           #83
1320: dup
1321: invokespecial #84
1324: ldc           #85
1326: invokevirtual #86
1329: aload         26
1331: invokevirtual #87
1334: ldc           #88
1336: invokevirtual #86
1339: getstatic     #161
1342: invokevirtual #87
1345: ldc           #85
1347: invokevirtual #86
1350: invokevirtual #89
1353: aload         26
1355: getstatic     #161
1358: invokevirtual #90
1361: invokestatic  #91
1364: aload         27
1366: invokestatic  #20
1369: aload         27
1371: invokestatic  #92
1374: ldc           #74
1376: invokestatic  #23
1379: aload         27
1381: invokestatic  #93
1384: ldc           #74
1386: invokestatic  #23
1389: new           #83
1392: dup
1393: invokespecial #84
1396: ldc           #85
1398: invokevirtual #86
1401: iload         29
1403: invokevirtual #170
1406: ldc           #88
1408: invokevirtual #86
1411: iconst_0
1412: invokevirtual #170
1415: ldc           #85
1417: invokevirtual #86
1420: invokevirtual #89
1423: iload         29
1425: ifne          1432
1428: iconst_1
1429: goto          1433
1432: iconst_0
1433: invokestatic  #91
1436: new           #83
1439: dup
1440: invokespecial #84
1443: ldc           #85
1445: invokevirtual #86
1448: aload         31
1450: invokevirtual #87
1453: ldc           #88
1455: invokevirtual #86
1458: getstatic     #127
1461: invokevirtual #87
1464: ldc           #85
1466: invokevirtual #86
1469: invokevirtual #89
1472: aload         31
1474: getstatic     #127
1477: invokevirtual #90
1480: invokestatic  #91
1483: new           #83
1486: dup
1487: invokespecial #84
1490: ldc           #85
1492: invokevirtual #86
1495: aload         32
1497: invokevirtual #87
1500: ldc           #88
1502: invokevirtual #86
1505: getstatic     #128
1508: invokevirtual #87
1511: ldc           #85
1513: invokevirtual #86
1516: invokevirtual #89
1519: aload         32
1521: getstatic     #128
1524: invokevirtual #90
1527: invokestatic  #91
1530: aload         33
1532: invokestatic  #20
1535: aload         33
1537: invokestatic  #92
1540: ldc           #140
1542: invokestatic  #23
1545: aload         33
1547: invokestatic  #93
1550: ldc           #140
1552: invokestatic  #23
1555: new           #83
1558: dup
1559: invokespecial #84
1562: ldc           #85
1564: invokevirtual #86
1567: aload         35
1569: invokevirtual #87
1572: ldc           #88
1574: invokevirtual #86
1577: getstatic     #127
1580: invokevirtual #87
1583: ldc           #85
1585: invokevirtual #86
1588: invokevirtual #89
1591: aload         35
1593: getstatic     #127
1596: invokevirtual #90
1599: invokestatic  #91
1602: new           #83
1605: dup
1606: invokespecial #84
1609: ldc           #85
1611: invokevirtual #86
1614: aload         36
1616: invokevirtual #87
1619: ldc           #88
1621: invokevirtual #86
1624: getstatic     #128
1627: invokevirtual #87
1630: ldc           #85
1632: invokevirtual #86
1635: invokevirtual #89
1638: aload         36
1640: getstatic     #128
1643: invokevirtual #90
1646: invokestatic  #91
1649: aload         37
1651: invokestatic  #20
1654: aload         37
1656: invokestatic  #92
1659: ldc           #140
1661: invokestatic  #23
1664: aload         37
1666: invokestatic  #93
1669: ldc           #140
1671: invokestatic  #23
1674: aload         39
1676: invokestatic  #20
1679: aload         40
1681: invokestatic  #171
1684: new           #83
1687: dup
1688: invokespecial #84
1691: ldc           #85
1693: invokevirtual #86
1696: aload         41
1698: invokevirtual #87
1701: ldc           #88
1703: invokevirtual #86
1706: getstatic     #168
1709: invokevirtual #87
1712: ldc           #85
1714: invokevirtual #86
1717: invokevirtual #89
1720: aload         41
1722: getstatic     #168
1725: invokevirtual #90
1728: invokestatic  #91
1731: aload         44
1733: invokestatic  #20
1736: aload         45
1738: invokestatic  #20
1741: new           #83
1744: dup
1745: invokespecial #84
1748: ldc           #85
1750: invokevirtual #86
1753: aload         46
1755: invokevirtual #87
1758: ldc           #88
1760: invokevirtual #86
1763: getstatic     #156
1766: invokevirtual #87
1769: ldc           #85
1771: invokevirtual #86
1774: invokevirtual #89
1777: aload         46
1779: getstatic     #156
1782: invokevirtual #90
1785: invokestatic  #91
1788: aload         49
1790: invokestatic  #20
1793: new           #83
1796: dup
1797: invokespecial #84
1800: ldc           #85
1802: invokevirtual #86
1805: aload         52
1807: invokevirtual #87
1810: ldc           #88
1812: invokevirtual #86
1815: getstatic     #127
1818: invokevirtual #87
1821: ldc           #85
1823: invokevirtual #86
1826: invokevirtual #89
1829: aload         52
1831: getstatic     #127
1834: invokevirtual #90
1837: invokestatic  #91
1840: new           #83
1843: dup
1844: invokespecial #84
1847: ldc           #85
1849: invokevirtual #86
1852: aload         53
1854: invokevirtual #87
1857: ldc           #88
1859: invokevirtual #86
1862: getstatic     #128
1865: invokevirtual #87
1868: ldc           #85
1870: invokevirtual #86
1873: invokevirtual #89
1876: aload         53
1878: getstatic     #128
1881: invokevirtual #90
1884: invokestatic  #91
1887: aload         54
1889: invokestatic  #20
1892: aload         54
1894: invokestatic  #92
1897: ldc           #140
1899: invokestatic  #23
1902: aload         54
1904: invokestatic  #93
1907: ldc           #140
1909: invokestatic  #23
1912: new           #83
1915: dup
1916: invokespecial #84
1919: ldc           #85
1921: invokevirtual #86
1924: aload         56
1926: invokevirtual #87
1929: ldc           #88
1931: invokevirtual #86
1934: getstatic     #127
1937: invokevirtual #87
1940: ldc           #85
1942: invokevirtual #86
1945: invokevirtual #89
1948: aload         56
1950: getstatic     #127
1953: invokevirtual #90
1956: invokestatic  #91
1959: new           #83
1962: dup
1963: invokespecial #84
1966: ldc           #85
1968: invokevirtual #86
1971: aload         57
1973: invokevirtual #87
1976: ldc           #88
1978: invokevirtual #86
1981: getstatic     #128
1984: invokevirtual #87
1987: ldc           #85
1989: invokevirtual #86
1992: invokevirtual #89
1995: aload         57
1997: getstatic     #128
2000: invokevirtual #90
2003: invokestatic  #91
2006: aload         58
2008: invokestatic  #20
2011: aload         58
2013: invokestatic  #92
2016: ldc           #140
2018: invokestatic  #23
2021: aload         58
2023: invokestatic  #93
2026: ldc           #140
2028: invokestatic  #23
2031: aload         60
2033: invokestatic  #20
2036: aload         61
2038: invokestatic  #20
2041: new           #83
2044: dup
2045: invokespecial #84
2048: ldc           #85
2050: invokevirtual #86
2053: aload         64
2055: invokevirtual #87
2058: ldc           #88
2060: invokevirtual #86
2063: getstatic     #156
2066: invokevirtual #87
2069: ldc           #85
2071: invokevirtual #86
2074: invokevirtual #89
2077: aload         64
2079: getstatic     #156
2082: invokevirtual #90
2085: invokestatic  #91
2088: aload         67
2090: invokestatic  #20
2093: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test446
Start line: 15589
End line: 15664
Method source code: 
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        java.lang.Number number1 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException3 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (byte) 100, number1, false);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats4 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE;
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException6 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats4, objArray5);
        org.apache.commons.math3.exception.util.Localizable localizable7 = null;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats8 = org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats9 = org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT;
        java.lang.Object[] objArray11 = new java.lang.Object[] { localizedFormats9, 1L };
        org.apache.commons.math3.exception.MathIllegalArgumentException mathIllegalArgumentException12 = new org.apache.commons.math3.exception.MathIllegalArgumentException((org.apache.commons.math3.exception.util.Localizable) localizedFormats8, objArray11);
        org.apache.commons.math3.exception.ZeroException zeroException13 = new org.apache.commons.math3.exception.ZeroException(localizable7, objArray11);
        java.lang.Number number14 = zeroException13.getArgument();
        java.lang.Number number15 = null;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException18 = new org.apache.commons.math3.exception.NumberIsTooSmallException(number15, (java.lang.Number) (byte) 0, true);
        boolean boolean19 = numberIsTooSmallException18.getBoundIsAllowed();
        zeroException13.addSuppressed((java.lang.Throwable) numberIsTooSmallException18);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext21 = zeroException13.getContext();
        numberIsTooSmallException3.addSuppressed((java.lang.Throwable) zeroException13);
        boolean boolean23 = numberIsTooSmallException3.getBoundIsAllowed();
        boolean boolean24 = numberIsTooSmallException3.getBoundIsAllowed();
        java.lang.Throwable[] throwableArray25 = numberIsTooSmallException3.getSuppressed();
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext26 = new org.apache.commons.math3.exception.util.ExceptionContext((java.lang.Throwable) numberIsTooSmallException3);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats27 = org.apache.commons.math3.exception.util.LocalizedFormats.MUTATION_RATE;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException31 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) (-1), (java.lang.Number) (short) 1, false);
        java.lang.Number number32 = numberIsTooSmallException31.getMin();
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats33 = org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS;
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats34 = org.apache.commons.math3.exception.util.LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX;
        org.apache.commons.math3.exception.NumberIsTooSmallException numberIsTooSmallException38 = new org.apache.commons.math3.exception.NumberIsTooSmallException((java.lang.Number) 10L, (java.lang.Number) (byte) 10, true);
        java.lang.Throwable[] throwableArray39 = numberIsTooSmallException38.getSuppressed();
        java.lang.Object[] objArray40 = org.apache.commons.math3.exception.util.ArgUtils.flatten((java.lang.Object[]) throwableArray39);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException41 = new org.apache.commons.math3.exception.MathIllegalStateException((org.apache.commons.math3.exception.util.Localizable) localizedFormats34, objArray40);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException42 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException31, (org.apache.commons.math3.exception.util.Localizable) localizedFormats33, objArray40);
        java.lang.Object[] objArray43 = org.apache.commons.math3.exception.util.ArgUtils.flatten(objArray40);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException44 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) numberIsTooSmallException3, (org.apache.commons.math3.exception.util.Localizable) localizedFormats27, objArray43);
        org.apache.commons.math3.exception.util.LocalizedFormats localizedFormats45 = org.apache.commons.math3.exception.util.LocalizedFormats.FRACTION_CONVERSION_OVERFLOW;
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer46 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter47 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer46);
        harmonicFitter47.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter47.clearObservations();
        harmonicFitter47.addObservedPoint((double) 0.0f, (double) (short) -1);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray55 = harmonicFitter47.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray56 = harmonicFitter47.getObservations();
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException57 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) mathIllegalStateException44, (org.apache.commons.math3.exception.util.Localizable) localizedFormats45, (java.lang.Object[]) weightedObservedPointArray56);
        org.junit.Assert.assertTrue("'" + localizedFormats4 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE + "'", localizedFormats4.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_INCREASING_SEQUENCE));
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertTrue("'" + localizedFormats8 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION + "'", localizedFormats8.equals(org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION));
        org.junit.Assert.assertTrue("'" + localizedFormats9 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT + "'", localizedFormats9.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT));
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[NEGATIVE_BRIGHTNESS_EXPONENT, 1]");
        org.junit.Assert.assertEquals("'" + number14 + "' != '" + 0 + "'", number14, 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(exceptionContext21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertTrue("'" + localizedFormats27 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.MUTATION_RATE + "'", localizedFormats27.equals(org.apache.commons.math3.exception.util.LocalizedFormats.MUTATION_RATE));
        org.junit.Assert.assertEquals("'" + number32 + "' != '" + (short) 1 + "'", number32, (short) 1);
        org.junit.Assert.assertTrue("'" + localizedFormats33 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS + "'", localizedFormats33.equals(org.apache.commons.math3.exception.util.LocalizedFormats.NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS));
        org.junit.Assert.assertTrue("'" + localizedFormats34 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX + "'", localizedFormats34.equals(org.apache.commons.math3.exception.util.LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX));
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + localizedFormats45 + "' != '" + org.apache.commons.math3.exception.util.LocalizedFormats.FRACTION_CONVERSION_OVERFLOW + "'", localizedFormats45.equals(org.apache.commons.math3.exception.util.LocalizedFormats.FRACTION_CONVERSION_OVERFLOW));
        org.junit.Assert.assertNotNull(weightedObservedPointArray55);
        org.junit.Assert.assertNotNull(weightedObservedPointArray56);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #829
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #28
30: dup
31: bipush        100
33: invokestatic  #159
36: aload_1
37: iconst_0
38: invokespecial #160
41: astore_2
42: getstatic     #161
45: astore_3
46: iconst_0
47: anewarray     #5
50: astore        4
52: new           #136
55: dup
56: aload_2
57: aload_3
58: aload         4
60: invokespecial #137
63: astore        5
65: aconst_null
66: astore        6
68: getstatic     #127
71: astore        7
73: getstatic     #128
76: astore        8
78: iconst_2
79: anewarray     #5
82: dup
83: iconst_0
84: aload         8
86: aastore
87: dup
88: iconst_1
89: lconst_1
90: invokestatic  #129
93: aastore
94: astore        9
96: new           #130
99: dup
100: aload         7
102: aload         9
104: invokespecial #131
107: astore        10
109: new           #81
112: dup
113: aload         6
115: aload         9
117: invokespecial #82
120: astore        11
122: aload         11
124: invokevirtual #243
127: astore        12
129: aconst_null
130: astore        13
132: new           #28
135: dup
136: aload         13
138: iconst_0
139: invokestatic  #159
142: iconst_1
143: invokespecial #160
146: astore        14
148: aload         14
150: invokevirtual #162
153: istore        15
155: aload         11
157: aload         14
159: invokevirtual #590
162: aload         11
164: invokevirtual #412
167: astore        16
169: aload_2
170: aload         11
172: invokevirtual #573
175: aload_2
176: invokevirtual #162
179: istore        17
181: aload_2
182: invokevirtual #162
185: istore        18
187: aload_2
188: invokevirtual #334
191: astore        19
193: new           #163
196: dup
197: aload_2
198: invokespecial #164
201: astore        20
203: getstatic     #830
206: astore        21
208: new           #28
211: dup
212: iconst_m1
213: invokestatic  #135
216: iconst_1
217: invokestatic  #194
220: iconst_0
221: invokespecial #160
224: astore        22
226: aload         22
228: invokevirtual #572
231: astore        23
233: getstatic     #831
236: astore        24
238: getstatic     #657
241: astore        25
243: new           #28
246: dup
247: ldc2_w        #277
250: invokestatic  #129
253: bipush        10
255: invokestatic  #159
258: iconst_1
259: invokespecial #160
262: astore        26
264: aload         26
266: invokevirtual #334
269: astore        27
271: aload         27
273: checkcast     #79
276: invokestatic  #80
279: astore        28
281: new           #136
284: dup
285: aload         25
287: aload         28
289: invokespecial #138
292: astore        29
294: new           #136
297: dup
298: aload         22
300: aload         24
302: aload         28
304: invokespecial #137
307: astore        30
309: aload         28
311: invokestatic  #80
314: astore        31
316: new           #136
319: dup
320: aload_2
321: aload         21
323: aload         31
325: invokespecial #137
328: astore        32
330: getstatic     #832
333: astore        33
335: aconst_null
336: astore        34
338: new           #8
341: dup
342: aload         34
344: invokespecial #9
347: astore        35
349: aload         35
351: dconst_1
352: ldc2_w        #32
355: invokevirtual #43
358: aload         35
360: invokevirtual #59
363: aload         35
365: dconst_0
366: ldc2_w        #10
369: invokevirtual #43
372: aload         35
374: invokevirtual #25
377: astore        36
379: aload         35
381: invokevirtual #25
384: astore        37
386: new           #136
389: dup
390: aload         32
392: aload         33
394: aload         37
396: checkcast     #79
399: invokespecial #137
402: astore        38
404: new           #83
407: dup
408: invokespecial #84
411: ldc           #85
413: invokevirtual #86
416: aload_3
417: invokevirtual #87
420: ldc           #88
422: invokevirtual #86
425: getstatic     #161
428: invokevirtual #87
431: ldc           #85
433: invokevirtual #86
436: invokevirtual #89
439: aload_3
440: getstatic     #161
443: invokevirtual #90
446: invokestatic  #91
449: aload         4
451: invokestatic  #20
454: aload         4
456: invokestatic  #92
459: ldc           #74
461: invokestatic  #23
464: aload         4
466: invokestatic  #93
469: ldc           #74
471: invokestatic  #23
474: new           #83
477: dup
478: invokespecial #84
481: ldc           #85
483: invokevirtual #86
486: aload         7
488: invokevirtual #87
491: ldc           #88
493: invokevirtual #86
496: getstatic     #127
499: invokevirtual #87
502: ldc           #85
504: invokevirtual #86
507: invokevirtual #89
510: aload         7
512: getstatic     #127
515: invokevirtual #90
518: invokestatic  #91
521: new           #83
524: dup
525: invokespecial #84
528: ldc           #85
530: invokevirtual #86
533: aload         8
535: invokevirtual #87
538: ldc           #88
540: invokevirtual #86
543: getstatic     #128
546: invokevirtual #87
549: ldc           #85
551: invokevirtual #86
554: invokevirtual #89
557: aload         8
559: getstatic     #128
562: invokevirtual #90
565: invokestatic  #91
568: aload         9
570: invokestatic  #20
573: aload         9
575: invokestatic  #92
578: ldc           #140
580: invokestatic  #23
583: aload         9
585: invokestatic  #93
588: ldc           #140
590: invokestatic  #23
593: new           #83
596: dup
597: invokespecial #84
600: ldc           #85
602: invokevirtual #86
605: aload         12
607: invokevirtual #87
610: ldc           #88
612: invokevirtual #86
615: iconst_0
616: invokevirtual #244
619: ldc           #85
621: invokevirtual #86
624: invokevirtual #89
627: aload         12
629: iconst_0
630: invokestatic  #135
633: invokestatic  #245
636: new           #83
639: dup
640: invokespecial #84
643: ldc           #85
645: invokevirtual #86
648: iload         15
650: invokevirtual #170
653: ldc           #88
655: invokevirtual #86
658: iconst_1
659: invokevirtual #170
662: ldc           #85
664: invokevirtual #86
667: invokevirtual #89
670: iload         15
672: iconst_1
673: if_icmpne     680
676: iconst_1
677: goto          681
680: iconst_0
681: invokestatic  #91
684: aload         16
686: invokestatic  #20
689: new           #83
692: dup
693: invokespecial #84
696: ldc           #85
698: invokevirtual #86
701: iload         17
703: invokevirtual #170
706: ldc           #88
708: invokevirtual #86
711: iconst_0
712: invokevirtual #170
715: ldc           #85
717: invokevirtual #86
720: invokevirtual #89
723: iload         17
725: ifne          732
728: iconst_1
729: goto          733
732: iconst_0
733: invokestatic  #91
736: new           #83
739: dup
740: invokespecial #84
743: ldc           #85
745: invokevirtual #86
748: iload         18
750: invokevirtual #170
753: ldc           #88
755: invokevirtual #86
758: iconst_0
759: invokevirtual #170
762: ldc           #85
764: invokevirtual #86
767: invokevirtual #89
770: iload         18
772: ifne          779
775: iconst_1
776: goto          780
779: iconst_0
780: invokestatic  #91
783: aload         19
785: invokestatic  #20
788: new           #83
791: dup
792: invokespecial #84
795: ldc           #85
797: invokevirtual #86
800: aload         21
802: invokevirtual #87
805: ldc           #88
807: invokevirtual #86
810: getstatic     #830
813: invokevirtual #87
816: ldc           #85
818: invokevirtual #86
821: invokevirtual #89
824: aload         21
826: getstatic     #830
829: invokevirtual #90
832: invokestatic  #91
835: new           #83
838: dup
839: invokespecial #84
842: ldc           #85
844: invokevirtual #86
847: aload         23
849: invokevirtual #87
852: ldc           #88
854: invokevirtual #86
857: iconst_1
858: invokevirtual #244
861: ldc           #85
863: invokevirtual #86
866: invokevirtual #89
869: aload         23
871: iconst_1
872: invokestatic  #194
875: invokestatic  #245
878: new           #83
881: dup
882: invokespecial #84
885: ldc           #85
887: invokevirtual #86
890: aload         24
892: invokevirtual #87
895: ldc           #88
897: invokevirtual #86
900: getstatic     #831
903: invokevirtual #87
906: ldc           #85
908: invokevirtual #86
911: invokevirtual #89
914: aload         24
916: getstatic     #831
919: invokevirtual #90
922: invokestatic  #91
925: new           #83
928: dup
929: invokespecial #84
932: ldc           #85
934: invokevirtual #86
937: aload         25
939: invokevirtual #87
942: ldc           #88
944: invokevirtual #86
947: getstatic     #657
950: invokevirtual #87
953: ldc           #85
955: invokevirtual #86
958: invokevirtual #89
961: aload         25
963: getstatic     #657
966: invokevirtual #90
969: invokestatic  #91
972: aload         27
974: invokestatic  #20
977: aload         28
979: invokestatic  #20
982: aload         28
984: invokestatic  #92
987: ldc           #74
989: invokestatic  #23
992: aload         28
994: invokestatic  #93
997: ldc           #74
999: invokestatic  #23
1002: aload         31
1004: invokestatic  #20
1007: aload         31
1009: invokestatic  #92
1012: ldc           #74
1014: invokestatic  #23
1017: aload         31
1019: invokestatic  #93
1022: ldc           #74
1024: invokestatic  #23
1027: new           #83
1030: dup
1031: invokespecial #84
1034: ldc           #85
1036: invokevirtual #86
1039: aload         33
1041: invokevirtual #87
1044: ldc           #88
1046: invokevirtual #86
1049: getstatic     #832
1052: invokevirtual #87
1055: ldc           #85
1057: invokevirtual #86
1060: invokevirtual #89
1063: aload         33
1065: getstatic     #832
1068: invokevirtual #90
1071: invokestatic  #91
1074: aload         36
1076: invokestatic  #20
1079: aload         37
1081: invokestatic  #20
1084: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/RegressionTest0.class
Class name: RegressionTest0
Method name: test447
Start line: 15667
End line: 15709
Method source code: 
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer0 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter1 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer0);
        harmonicFitter1.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter1.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        harmonicFitter1.addObservedPoint(52.0d, 52.0d, 35.0d);
        harmonicFitter1.clearObservations();
        harmonicFitter1.clearObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer16 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter17 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer16);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray18 = harmonicFitter17.getObservations();
        harmonicFitter17.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray20 = harmonicFitter17.getObservations();
        org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer differentiableMultivariateVectorOptimizer21 = null;
        org.apache.commons.math3.optimization.fitting.HarmonicFitter harmonicFitter22 = new org.apache.commons.math3.optimization.fitting.HarmonicFitter(differentiableMultivariateVectorOptimizer21);
        harmonicFitter22.addObservedPoint((double) 1.0f, (double) (short) 10);
        harmonicFitter22.addObservedPoint(0.0d, (double) (short) 100);
        harmonicFitter22.clearObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray30 = harmonicFitter22.getObservations();
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint weightedObservedPoint34 = new org.apache.commons.math3.optimization.fitting.WeightedObservedPoint((double) '#', (double) '4', (double) '4');
        double double35 = weightedObservedPoint34.getX();
        double double36 = weightedObservedPoint34.getY();
        double double37 = weightedObservedPoint34.getX();
        double double38 = weightedObservedPoint34.getY();
        harmonicFitter22.addObservedPoint(weightedObservedPoint34);
        double double40 = weightedObservedPoint34.getWeight();
        harmonicFitter17.addObservedPoint(weightedObservedPoint34);
        harmonicFitter1.addObservedPoint(weightedObservedPoint34);
        org.apache.commons.math3.optimization.fitting.WeightedObservedPoint[] weightedObservedPointArray43 = harmonicFitter1.getObservations();
        org.junit.Assert.assertNotNull(weightedObservedPointArray18);
        org.junit.Assert.assertNotNull(weightedObservedPointArray20);
        org.junit.Assert.assertNotNull(weightedObservedPointArray30);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 52.0d + "'", double35 == 52.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 52.0d + "'", double36 == 52.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 52.0d + "'", double37 == 52.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 52.0d + "'", double38 == 52.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 35.0d + "'", double40 == 35.0d);
        org.junit.Assert.assertNotNull(weightedObservedPointArray43);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #833
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: dconst_1
38: ldc2_w        #32
41: invokevirtual #43
44: aload_2
45: dconst_0
46: ldc2_w        #34
49: invokevirtual #43
52: aload_2
53: invokevirtual #59
56: aload_2
57: invokevirtual #59
60: aload_2
61: ldc2_w        #12
64: ldc2_w        #12
67: ldc2_w        #14
70: invokevirtual #54
73: aload_2
74: invokevirtual #59
77: aload_2
78: invokevirtual #59
81: aconst_null
82: astore_3
83: new           #8
86: dup
87: aload_3
88: invokespecial #9
91: astore        4
93: aload         4
95: invokevirtual #25
98: astore        5
100: aload         4
102: invokevirtual #59
105: aload         4
107: invokevirtual #25
110: astore        6
112: aconst_null
113: astore        7
115: new           #8
118: dup
119: aload         7
121: invokespecial #9
124: astore        8
126: aload         8
128: dconst_1
129: ldc2_w        #32
132: invokevirtual #43
135: aload         8
137: dconst_0
138: ldc2_w        #34
141: invokevirtual #43
144: aload         8
146: invokevirtual #59
149: aload         8
151: invokevirtual #25
154: astore        9
156: new           #145
159: dup
160: ldc2_w        #14
163: ldc2_w        #12
166: ldc2_w        #12
169: invokespecial #146
172: astore        10
174: aload         10
176: invokevirtual #147
179: dstore        11
181: aload         10
183: invokevirtual #149
186: dstore        13
188: aload         10
190: invokevirtual #147
193: dstore        15
195: aload         10
197: invokevirtual #149
200: dstore        17
202: aload         8
204: aload         10
206: invokevirtual #123
209: aload         10
211: invokevirtual #148
214: dstore        19
216: aload         4
218: aload         10
220: invokevirtual #123
223: aload_2
224: aload         10
226: invokevirtual #123
229: aload_2
230: invokevirtual #25
233: astore        21
235: aload         5
237: invokestatic  #20
240: aload         6
242: invokestatic  #20
245: aload         9
247: invokestatic  #20
250: new           #83
253: dup
254: invokespecial #84
257: ldc           #85
259: invokevirtual #86
262: dload         11
264: invokevirtual #150
267: ldc           #88
269: invokevirtual #86
272: ldc2_w        #12
275: invokevirtual #150
278: ldc           #85
280: invokevirtual #86
283: invokevirtual #89
286: dload         11
288: ldc2_w        #12
291: dcmpl
292: ifne          299
295: iconst_1
296: goto          300
299: iconst_0
300: invokestatic  #91
303: new           #83
306: dup
307: invokespecial #84
310: ldc           #85
312: invokevirtual #86
315: dload         13
317: invokevirtual #150
320: ldc           #88
322: invokevirtual #86
325: ldc2_w        #12
328: invokevirtual #150
331: ldc           #85
333: invokevirtual #86
336: invokevirtual #89
339: dload         13
341: ldc2_w        #12
344: dcmpl
345: ifne          352
348: iconst_1
349: goto          353
352: iconst_0
353: invokestatic  #91
356: new           #83
359: dup
360: invokespecial #84
363: ldc           #85
365: invokevirtual #86
368: dload         15
370: invokevirtual #150
373: ldc           #88
375: invokevirtual #86
378: ldc2_w        #12
381: invokevirtual #150
384: ldc           #85
386: invokevirtual #86
389: invokevirtual #89
392: dload         15
394: ldc2_w        #12
397: dcmpl
398: ifne          405
401: iconst_1
402: goto          406
405: iconst_0
406: invokestatic  #91
409: new           #83
412: dup
413: invokespecial #84
416: ldc           #85
418: invokevirtual #86
421: dload         17
423: invokevirtual #150
426: ldc           #88
428: invokevirtual #86
431: ldc2_w        #12
434: invokevirtual #150
437: ldc           #85
439: invokevirtual #86
442: invokevirtual #89
445: dload         17
447: ldc2_w        #12
450: dcmpl
451: ifne          458
454: iconst_1
455: goto          459
458: iconst_0
459: invokestatic  #91
462: new           #83
465: dup
466: invokespecial #84
469: ldc           #85
471: invokevirtual #86
474: dload         19
476: invokevirtual #150
479: ldc           #88
481: invokevirtual #86
484: ldc2_w        #14
487: invokevirtual #150
490: ldc           #85
492: invokevirtual #86
495: invokevirtual #89
498: dload         19
500: ldc2_w        #14
503: dcmpl
504: ifne          511
507: iconst_1
508: goto          512
511: iconst_0
512: invokestatic  #91
515: aload         21
517: invokestatic  #20
520: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/HarmonicFitter_ESTest.class
Class name: HarmonicFitter_ESTest
Method name: test0
Start line: 19
End line: 33
Method source code: 
  public void test0()  throws Throwable  {
      HarmonicFitter harmonicFitter0 = new HarmonicFitter((DifferentiableMultivariateVectorOptimizer) null);
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try { 
        harmonicFitter0.fit(doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.CurveFitter", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: aconst_null
5: checkcast     #3
8: invokespecial #4
11: astore_1
12: bipush        7
14: newarray       double
16: astore_2
17: aload_1
18: aload_2
19: invokevirtual #5
22: pop
23: ldc           #6
25: invokestatic  #7
28: goto          38
31: astore_3
32: ldc           #9
34: aload_3
35: invokestatic  #10
38: return
Exception table:
from    to  target type
17    28    31   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/HarmonicFitter_ESTest.class
Class name: HarmonicFitter_ESTest
Method name: test1
Start line: 36
End line: 49
Method source code: 
  public void test1()  throws Throwable  {
      HarmonicFitter harmonicFitter0 = new HarmonicFitter((DifferentiableMultivariateVectorOptimizer) null);
      // Undeclared exception!
      try { 
        harmonicFitter0.fit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample contains 0 observed points, at least 4 are required
         //
         verifyException("org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: aconst_null
5: checkcast     #3
8: invokespecial #4
11: astore_1
12: aload_1
13: invokevirtual #11
16: pop
17: ldc           #12
19: invokestatic  #7
22: goto          32
25: astore_2
26: ldc           #14
28: aload_2
29: invokestatic  #10
32: return
Exception table:
from    to  target type
12    22    25   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/HarmonicFitter_ESTest.class
Class name: HarmonicFitter_ESTest
Method name: test2
Start line: 52
End line: 62
Method source code: 
  public void test2()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, (-2.070841011504222E-9), 10.521054212839923);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      weightedObservedPointArray0[2] = weightedObservedPointArray0[1];
      weightedObservedPointArray0[3] = weightedObservedPointArray0[0];
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
  }
Method byte code: 
0: iconst_4
1: anewarray     #15
4: astore_1
5: new           #15
8: dup
9: dconst_0
10: ldc2_w        #16
13: ldc2_w        #18
16: invokespecial #20
19: astore_2
20: aload_1
21: iconst_0
22: aload_2
23: aastore
24: aload_1
25: iconst_1
26: aload_2
27: aastore
28: aload_1
29: iconst_2
30: aload_1
31: iconst_1
32: aaload
33: aastore
34: aload_1
35: iconst_3
36: aload_1
37: iconst_0
38: aaload
39: aastore
40: new           #21
43: dup
44: aload_1
45: invokespecial #22
48: astore_3
49: aload_3
50: invokevirtual #23
53: astore        4
55: iconst_3
56: newarray       double
58: dup
59: iconst_0
60: ldc2_w        #25
63: dastore
64: dup
65: iconst_1
66: ldc2_w        #25
69: dastore
70: dup
71: iconst_2
72: ldc2_w        #25
75: dastore
76: aload         4
78: ldc2_w        #27
81: invokestatic  #29
84: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/HarmonicFitter_ESTest.class
Class name: HarmonicFitter_ESTest
Method name: test3
Start line: 65
End line: 78
Method source code: 
  public void test3()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, (-37.73901176216823), (-140.6256737315799));
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.0, (-187.7012268844877), (-140.6256737315799));
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint((-140.6256737315799), 0.0, (-37.73901176216823));
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint((-140.6256737315799), (-140.6256737315799), 0.0);
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {70.31283686578995, 0.03347439657944426, (-2.3702848761900857)}, doubleArray0, 0.01);
  }
Method byte code: 
0: iconst_4
1: anewarray     #15
4: astore_1
5: new           #15
8: dup
9: dconst_0
10: ldc2_w        #30
13: ldc2_w        #32
16: invokespecial #20
19: astore_2
20: aload_1
21: iconst_0
22: aload_2
23: aastore
24: new           #15
27: dup
28: dconst_0
29: ldc2_w        #34
32: ldc2_w        #32
35: invokespecial #20
38: astore_3
39: aload_1
40: iconst_1
41: aload_3
42: aastore
43: new           #15
46: dup
47: ldc2_w        #32
50: dconst_0
51: ldc2_w        #30
54: invokespecial #20
57: astore        4
59: aload_1
60: iconst_2
61: aload         4
63: aastore
64: new           #15
67: dup
68: ldc2_w        #32
71: ldc2_w        #32
74: dconst_0
75: invokespecial #20
78: astore        5
80: aload_1
81: iconst_3
82: aload         5
84: aastore
85: new           #21
88: dup
89: aload_1
90: invokespecial #22
93: astore        6
95: aload         6
97: invokevirtual #23
100: astore        7
102: iconst_3
103: newarray       double
105: dup
106: iconst_0
107: ldc2_w        #36
110: dastore
111: dup
112: iconst_1
113: ldc2_w        #38
116: dastore
117: dup
118: iconst_2
119: ldc2_w        #40
122: dastore
123: aload         7
125: ldc2_w        #27
128: invokestatic  #29
131: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/HarmonicFitter_ESTest.class
Class name: HarmonicFitter_ESTest
Method name: test4
Start line: 81
End line: 94
Method source code: 
  public void test4()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, (-37.73901176216823), (-7.043545052852817E-9));
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.0, (-1.0), (-7.043545052852817E-9));
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint((-7.043545052852817E-9), 0.0, (-37.73901176216823));
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint((-7.043545052852817E-9), (-7.043545052852817E-9), 0.0);
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {18.869505881084116, 0.16649045679246469, 1.5707963279675796}, doubleArray0, 0.01);
  }
Method byte code: 
0: iconst_4
1: anewarray     #15
4: astore_1
5: new           #15
8: dup
9: dconst_0
10: ldc2_w        #30
13: ldc2_w        #42
16: invokespecial #20
19: astore_2
20: aload_1
21: iconst_0
22: aload_2
23: aastore
24: new           #15
27: dup
28: dconst_0
29: ldc2_w        #44
32: ldc2_w        #42
35: invokespecial #20
38: astore_3
39: aload_1
40: iconst_1
41: aload_3
42: aastore
43: new           #15
46: dup
47: ldc2_w        #42
50: dconst_0
51: ldc2_w        #30
54: invokespecial #20
57: astore        4
59: aload_1
60: iconst_2
61: aload         4
63: aastore
64: new           #15
67: dup
68: ldc2_w        #42
71: ldc2_w        #42
74: dconst_0
75: invokespecial #20
78: astore        5
80: aload_1
81: iconst_3
82: aload         5
84: aastore
85: new           #21
88: dup
89: aload_1
90: invokespecial #22
93: astore        6
95: aload         6
97: invokevirtual #23
100: astore        7
102: iconst_3
103: newarray       double
105: dup
106: iconst_0
107: ldc2_w        #46
110: dastore
111: dup
112: iconst_1
113: ldc2_w        #48
116: dastore
117: dup
118: iconst_2
119: ldc2_w        #50
122: dastore
123: aload         7
125: ldc2_w        #27
128: invokestatic  #29
131: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/HarmonicFitter_ESTest.class
Class name: HarmonicFitter_ESTest
Method name: test5
Start line: 97
End line: 119
Method source code: 
  public void test5()  throws Throwable  {
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, (-2.070841011504222E-9), 10.521054212839923);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.0, 6.196016947859854E-34, 10.521054212839923);
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(10.521054212839923, 0.0, (-2.070841011504222E-9));
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(10.521054212839923, 10.521054212839923, 0.0);
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      // Undeclared exception!
      try { 
        harmonicFitter_ParameterGuesser0.guess();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser", e);
      }
  }
Method byte code: 
0: iconst_4
1: anewarray     #15
4: astore_1
5: new           #15
8: dup
9: dconst_0
10: ldc2_w        #16
13: ldc2_w        #18
16: invokespecial #20
19: astore_2
20: aload_1
21: iconst_0
22: aload_2
23: aastore
24: new           #15
27: dup
28: dconst_0
29: ldc2_w        #52
32: ldc2_w        #18
35: invokespecial #20
38: astore_3
39: aload_1
40: iconst_1
41: aload_3
42: aastore
43: new           #15
46: dup
47: ldc2_w        #18
50: dconst_0
51: ldc2_w        #16
54: invokespecial #20
57: astore        4
59: aload_1
60: iconst_2
61: aload         4
63: aastore
64: new           #15
67: dup
68: ldc2_w        #18
71: ldc2_w        #18
74: dconst_0
75: invokespecial #20
78: astore        5
80: aload_1
81: iconst_3
82: aload         5
84: aastore
85: new           #21
88: dup
89: aload_1
90: invokespecial #22
93: astore        6
95: aload         6
97: invokevirtual #23
100: pop
101: ldc           #54
103: invokestatic  #7
106: goto          118
109: astore        7
111: ldc           #14
113: aload         7
115: invokestatic  #10
118: return
Exception table:
from    to  target type
95   106   109   Class java/lang/IllegalStateException
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.class
Class name: HarmonicFitterTest
Method name: testPreconditions1
Start line: 33
End line: 38
Method source code: 
    public void testPreconditions1() {
        HarmonicFitter fitter =
            new HarmonicFitter(new LevenbergMarquardtOptimizer());

        fitter.fit();
    }
Method byte code: 
0: new           #2
3: dup
4: new           #3
7: dup
8: invokespecial #4
11: invokespecial #5
14: astore_1
15: aload_1
16: invokevirtual #6
19: pop
20: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.class
Class name: HarmonicFitterTest
Method name: testNoError
Start line: 56
End line: 78
Method source code: 
    public void testNoError() {
        final double a = 0.2;
        final double w = 3.4;
        final double p = 4.1;
        HarmonicOscillator f = new HarmonicOscillator(a, w, p);

        HarmonicFitter fitter =
            new HarmonicFitter(new LevenbergMarquardtOptimizer());
        for (double x = 0.0; x < 1.3; x += 0.01) {
            fitter.addObservedPoint(1, x, f.value(x));
        }

        final double[] fitted = fitter.fit();
        Assert.assertEquals(a, fitted[0], 1.0e-13);
        Assert.assertEquals(w, fitted[1], 1.0e-13);
        Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1e-13);

        HarmonicOscillator ff = new HarmonicOscillator(fitted[0], fitted[1], fitted[2]);

        for (double x = -1.0; x < 1.0; x += 0.01) {
            Assert.assertTrue(FastMath.abs(f.value(x) - ff.value(x)) < 1e-13);
        }
    }
Method byte code: 
0: ldc2_w        #7
3: dstore_1
4: ldc2_w        #9
7: dstore_3
8: ldc2_w        #11
11: dstore        5
13: new           #13
16: dup
17: ldc2_w        #7
20: ldc2_w        #9
23: ldc2_w        #11
26: invokespecial #14
29: astore        7
31: new           #2
34: dup
35: new           #3
38: dup
39: invokespecial #4
42: invokespecial #5
45: astore        8
47: dconst_0
48: dstore        9
50: dload         9
52: ldc2_w        #15
55: dcmpg
56: ifge          85
59: aload         8
61: dconst_1
62: dload         9
64: aload         7
66: dload         9
68: invokevirtual #17
71: invokevirtual #18
74: dload         9
76: ldc2_w        #19
79: dadd
80: dstore        9
82: goto          50
85: aload         8
87: invokevirtual #6
90: astore        9
92: ldc2_w        #7
95: aload         9
97: iconst_0
98: daload
99: ldc2_w        #21
102: invokestatic  #23
105: ldc2_w        #9
108: aload         9
110: iconst_1
111: daload
112: ldc2_w        #21
115: invokestatic  #23
118: ldc2_w        #11
121: aload         9
123: iconst_2
124: daload
125: ldc2_w        #11
128: invokestatic  #24
131: ldc2_w        #21
134: invokestatic  #23
137: new           #13
140: dup
141: aload         9
143: iconst_0
144: daload
145: aload         9
147: iconst_1
148: daload
149: aload         9
151: iconst_2
152: daload
153: invokespecial #14
156: astore        10
158: ldc2_w        #25
161: dstore        11
163: dload         11
165: dconst_1
166: dcmpg
167: ifge          214
170: aload         7
172: dload         11
174: invokevirtual #17
177: aload         10
179: dload         11
181: invokevirtual #17
184: dsub
185: invokestatic  #27
188: ldc2_w        #21
191: dcmpg
192: ifge          199
195: iconst_1
196: goto          200
199: iconst_0
200: invokestatic  #28
203: dload         11
205: ldc2_w        #19
208: dadd
209: dstore        11
211: goto          163
214: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.class
Class name: HarmonicFitterTest
Method name: test1PercentError
Start line: 81
End line: 99
Method source code: 
    public void test1PercentError() {
        Random randomizer = new Random(64925784252l);
        final double a = 0.2;
        final double w = 3.4;
        final double p = 4.1;
        HarmonicOscillator f = new HarmonicOscillator(a, w, p);

        HarmonicFitter fitter =
            new HarmonicFitter(new LevenbergMarquardtOptimizer());
        for (double x = 0.0; x < 10.0; x += 0.1) {
            fitter.addObservedPoint(1, x,
                                    f.value(x) + 0.01 * randomizer.nextGaussian());
        }

        final double[] fitted = fitter.fit();
        Assert.assertEquals(a, fitted[0], 7.6e-4);
        Assert.assertEquals(w, fitted[1], 2.7e-3);
        Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.3e-2);
    }
Method byte code: 
0: new           #29
3: dup
4: ldc2_w        #30
7: invokespecial #32
10: astore_1
11: ldc2_w        #7
14: dstore_2
15: ldc2_w        #9
18: dstore        4
20: ldc2_w        #11
23: dstore        6
25: new           #13
28: dup
29: ldc2_w        #7
32: ldc2_w        #9
35: ldc2_w        #11
38: invokespecial #14
41: astore        8
43: new           #2
46: dup
47: new           #3
50: dup
51: invokespecial #4
54: invokespecial #5
57: astore        9
59: dconst_0
60: dstore        10
62: dload         10
64: ldc2_w        #33
67: dcmpg
68: ifge          106
71: aload         9
73: dconst_1
74: dload         10
76: aload         8
78: dload         10
80: invokevirtual #17
83: ldc2_w        #19
86: aload_1
87: invokevirtual #35
90: dmul
91: dadd
92: invokevirtual #18
95: dload         10
97: ldc2_w        #36
100: dadd
101: dstore        10
103: goto          62
106: aload         9
108: invokevirtual #6
111: astore        10
113: ldc2_w        #7
116: aload         10
118: iconst_0
119: daload
120: ldc2_w        #38
123: invokestatic  #23
126: ldc2_w        #9
129: aload         10
131: iconst_1
132: daload
133: ldc2_w        #40
136: invokestatic  #23
139: ldc2_w        #11
142: aload         10
144: iconst_2
145: daload
146: ldc2_w        #11
149: invokestatic  #24
152: ldc2_w        #42
155: invokestatic  #23
158: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.class
Class name: HarmonicFitterTest
Method name: testTinyVariationsData
Start line: 102
End line: 114
Method source code: 
    public void testTinyVariationsData() {
        Random randomizer = new Random(64925784252l);

        HarmonicFitter fitter =
            new HarmonicFitter(new LevenbergMarquardtOptimizer());
        for (double x = 0.0; x < 10.0; x += 0.1) {
            fitter.addObservedPoint(1, x, 1e-7 * randomizer.nextGaussian());
        }

        fitter.fit();
        // This test serves to cover the part of the code of "guessAOmega"
        // when the algorithm using integrals fails.
    }
Method byte code: 
0: new           #29
3: dup
4: ldc2_w        #30
7: invokespecial #32
10: astore_1
11: new           #2
14: dup
15: new           #3
18: dup
19: invokespecial #4
22: invokespecial #5
25: astore_2
26: dconst_0
27: dstore_3
28: dload_3
29: ldc2_w        #33
32: dcmpg
33: ifge          59
36: aload_2
37: dconst_1
38: dload_3
39: ldc2_w        #44
42: aload_1
43: invokevirtual #35
46: dmul
47: invokevirtual #18
50: dload_3
51: ldc2_w        #36
54: dadd
55: dstore_3
56: goto          28
59: aload_2
60: invokevirtual #6
63: pop
64: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.class
Class name: HarmonicFitterTest
Method name: testInitialGuess
Start line: 117
End line: 135
Method source code: 
    public void testInitialGuess() {
        Random randomizer = new Random(45314242l);
        final double a = 0.2;
        final double w = 3.4;
        final double p = 4.1;
        HarmonicOscillator f = new HarmonicOscillator(a, w, p);

        HarmonicFitter fitter =
            new HarmonicFitter(new LevenbergMarquardtOptimizer());
        for (double x = 0.0; x < 10.0; x += 0.1) {
            fitter.addObservedPoint(1, x,
                                    f.value(x) + 0.01 * randomizer.nextGaussian());
        }

        final double[] fitted = fitter.fit(new double[] { 0.15, 3.6, 4.5 });
        Assert.assertEquals(a, fitted[0], 1.2e-3);
        Assert.assertEquals(w, fitted[1], 3.3e-3);
        Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.7e-2);
    }
Method byte code: 
0: new           #29
3: dup
4: ldc2_w        #46
7: invokespecial #32
10: astore_1
11: ldc2_w        #7
14: dstore_2
15: ldc2_w        #9
18: dstore        4
20: ldc2_w        #11
23: dstore        6
25: new           #13
28: dup
29: ldc2_w        #7
32: ldc2_w        #9
35: ldc2_w        #11
38: invokespecial #14
41: astore        8
43: new           #2
46: dup
47: new           #3
50: dup
51: invokespecial #4
54: invokespecial #5
57: astore        9
59: dconst_0
60: dstore        10
62: dload         10
64: ldc2_w        #33
67: dcmpg
68: ifge          106
71: aload         9
73: dconst_1
74: dload         10
76: aload         8
78: dload         10
80: invokevirtual #17
83: ldc2_w        #19
86: aload_1
87: invokevirtual #35
90: dmul
91: dadd
92: invokevirtual #18
95: dload         10
97: ldc2_w        #36
100: dadd
101: dstore        10
103: goto          62
106: aload         9
108: iconst_3
109: newarray       double
111: dup
112: iconst_0
113: ldc2_w        #48
116: dastore
117: dup
118: iconst_1
119: ldc2_w        #50
122: dastore
123: dup
124: iconst_2
125: ldc2_w        #52
128: dastore
129: invokevirtual #54
132: astore        10
134: ldc2_w        #7
137: aload         10
139: iconst_0
140: daload
141: ldc2_w        #55
144: invokestatic  #23
147: ldc2_w        #9
150: aload         10
152: iconst_1
153: daload
154: ldc2_w        #57
157: invokestatic  #23
160: ldc2_w        #11
163: aload         10
165: iconst_2
166: daload
167: ldc2_w        #11
170: invokestatic  #24
173: ldc2_w        #59
176: invokestatic  #23
179: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.class
Class name: HarmonicFitterTest
Method name: testUnsorted
Start line: 138
End line: 178
Method source code: 
    public void testUnsorted() {
        Random randomizer = new Random(64925784252l);
        final double a = 0.2;
        final double w = 3.4;
        final double p = 4.1;
        HarmonicOscillator f = new HarmonicOscillator(a, w, p);

        HarmonicFitter fitter =
            new HarmonicFitter(new LevenbergMarquardtOptimizer());

        // build a regularly spaced array of measurements
        int size = 100;
        double[] xTab = new double[size];
        double[] yTab = new double[size];
        for (int i = 0; i < size; ++i) {
            xTab[i] = 0.1 * i;
            yTab[i] = f.value(xTab[i]) + 0.01 * randomizer.nextGaussian();
        }

        // shake it
        for (int i = 0; i < size; ++i) {
            int i1 = randomizer.nextInt(size);
            int i2 = randomizer.nextInt(size);
            double xTmp = xTab[i1];
            double yTmp = yTab[i1];
            xTab[i1] = xTab[i2];
            yTab[i1] = yTab[i2];
            xTab[i2] = xTmp;
            yTab[i2] = yTmp;
        }

        // pass it to the fitter
        for (int i = 0; i < size; ++i) {
            fitter.addObservedPoint(1, xTab[i], yTab[i]);
        }

        final double[] fitted = fitter.fit();
        Assert.assertEquals(a, fitted[0], 7.6e-4);
        Assert.assertEquals(w, fitted[1], 3.5e-3);
        Assert.assertEquals(p, MathUtils.normalizeAngle(fitted[2], p), 1.5e-2);
    }
Method byte code: 
0: new           #29
3: dup
4: ldc2_w        #30
7: invokespecial #32
10: astore_1
11: ldc2_w        #7
14: dstore_2
15: ldc2_w        #9
18: dstore        4
20: ldc2_w        #11
23: dstore        6
25: new           #13
28: dup
29: ldc2_w        #7
32: ldc2_w        #9
35: ldc2_w        #11
38: invokespecial #14
41: astore        8
43: new           #2
46: dup
47: new           #3
50: dup
51: invokespecial #4
54: invokespecial #5
57: astore        9
59: bipush        100
61: istore        10
63: iload         10
65: newarray       double
67: astore        11
69: iload         10
71: newarray       double
73: astore        12
75: iconst_0
76: istore        13
78: iload         13
80: iload         10
82: if_icmpge     127
85: aload         11
87: iload         13
89: ldc2_w        #36
92: iload         13
94: i2d
95: dmul
96: dastore
97: aload         12
99: iload         13
101: aload         8
103: aload         11
105: iload         13
107: daload
108: invokevirtual #17
111: ldc2_w        #19
114: aload_1
115: invokevirtual #35
118: dmul
119: dadd
120: dastore
121: iinc          13, 1
124: goto          78
127: iconst_0
128: istore        13
130: iload         13
132: iload         10
134: if_icmpge     207
137: aload_1
138: iload         10
140: invokevirtual #61
143: istore        14
145: aload_1
146: iload         10
148: invokevirtual #61
151: istore        15
153: aload         11
155: iload         14
157: daload
158: dstore        16
160: aload         12
162: iload         14
164: daload
165: dstore        18
167: aload         11
169: iload         14
171: aload         11
173: iload         15
175: daload
176: dastore
177: aload         12
179: iload         14
181: aload         12
183: iload         15
185: daload
186: dastore
187: aload         11
189: iload         15
191: dload         16
193: dastore
194: aload         12
196: iload         15
198: dload         18
200: dastore
201: iinc          13, 1
204: goto          130
207: iconst_0
208: istore        13
210: iload         13
212: iload         10
214: if_icmpge     239
217: aload         9
219: dconst_1
220: aload         11
222: iload         13
224: daload
225: aload         12
227: iload         13
229: daload
230: invokevirtual #18
233: iinc          13, 1
236: goto          210
239: aload         9
241: invokevirtual #6
244: astore        13
246: ldc2_w        #7
249: aload         13
251: iconst_0
252: daload
253: ldc2_w        #38
256: invokestatic  #23
259: ldc2_w        #9
262: aload         13
264: iconst_1
265: daload
266: ldc2_w        #62
269: invokestatic  #23
272: ldc2_w        #11
275: aload         13
277: iconst_2
278: daload
279: ldc2_w        #11
282: invokestatic  #24
285: ldc2_w        #64
288: invokestatic  #23
291: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/src/test/java/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/25/target/test-classes/org/apache/commons/math3/optimization/fitting/HarmonicFitterTest.class
Class name: HarmonicFitterTest
Method name: testMath844
Start line: 181
End line: 202
Method source code: 
    public void testMath844() {
        final double[] y = { 0, 1, 2, 3, 2, 1,
                             0, -1, -2, -3, -2, -1,
                             0, 1, 2, 3, 2, 1,
                             0, -1, -2, -3, -2, -1,
                             0, 1, 2, 3, 2, 1, 0 };
        final int len = y.length;
        final WeightedObservedPoint[] points = new WeightedObservedPoint[len];
        for (int i = 0; i < len; i++) {
            points[i] = new WeightedObservedPoint(1, i, y[i]);
        }

        final HarmonicFitter.ParameterGuesser guesser
            = new HarmonicFitter.ParameterGuesser(points);

        // The guesser fails because the function is far from an harmonic
        // function: It is a triangular periodic function with amplitude 3
        // and period 12, and all sample points are taken at integer abscissae
        // so function values all belong to the integer subset {-3, -2, -1, 0,
        // 1, 2, 3}.
        guesser.guess();
    }
Method byte code: 
0: bipush        31
2: newarray       double
4: dup
5: iconst_0
6: dconst_0
7: dastore
8: dup
9: iconst_1
10: dconst_1
11: dastore
12: dup
13: iconst_2
14: ldc2_w        #66
17: dastore
18: dup
19: iconst_3
20: ldc2_w        #68
23: dastore
24: dup
25: iconst_4
26: ldc2_w        #66
29: dastore
30: dup
31: iconst_5
32: dconst_1
33: dastore
34: dup
35: bipush        6
37: dconst_0
38: dastore
39: dup
40: bipush        7
42: ldc2_w        #25
45: dastore
46: dup
47: bipush        8
49: ldc2_w        #70
52: dastore
53: dup
54: bipush        9
56: ldc2_w        #72
59: dastore
60: dup
61: bipush        10
63: ldc2_w        #70
66: dastore
67: dup
68: bipush        11
70: ldc2_w        #25
73: dastore
74: dup
75: bipush        12
77: dconst_0
78: dastore
79: dup
80: bipush        13
82: dconst_1
83: dastore
84: dup
85: bipush        14
87: ldc2_w        #66
90: dastore
91: dup
92: bipush        15
94: ldc2_w        #68
97: dastore
98: dup
99: bipush        16
101: ldc2_w        #66
104: dastore
105: dup
106: bipush        17
108: dconst_1
109: dastore
110: dup
111: bipush        18
113: dconst_0
114: dastore
115: dup
116: bipush        19
118: ldc2_w        #25
121: dastore
122: dup
123: bipush        20
125: ldc2_w        #70
128: dastore
129: dup
130: bipush        21
132: ldc2_w        #72
135: dastore
136: dup
137: bipush        22
139: ldc2_w        #70
142: dastore
143: dup
144: bipush        23
146: ldc2_w        #25
149: dastore
150: dup
151: bipush        24
153: dconst_0
154: dastore
155: dup
156: bipush        25
158: dconst_1
159: dastore
160: dup
161: bipush        26
163: ldc2_w        #66
166: dastore
167: dup
168: bipush        27
170: ldc2_w        #68
173: dastore
174: dup
175: bipush        28
177: ldc2_w        #66
180: dastore
181: dup
182: bipush        29
184: dconst_1
185: dastore
186: dup
187: bipush        30
189: dconst_0
190: dastore
191: astore_1
192: aload_1
193: arraylength
194: istore_2
195: iload_2
196: anewarray     #74
199: astore_3
200: iconst_0
201: istore        4
203: iload         4
205: iload_2
206: if_icmpge     234
209: aload_3
210: iload         4
212: new           #74
215: dup
216: dconst_1
217: iload         4
219: i2d
220: aload_1
221: iload         4
223: daload
224: invokespecial #75
227: aastore
228: iinc          4, 1
231: goto          203
234: new           #76
237: dup
238: aload_3
239: invokespecial #77
242: astore        4
244: aload         4
246: invokevirtual #78
249: pop
250: return
}
