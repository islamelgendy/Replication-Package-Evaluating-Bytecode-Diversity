Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test001
Start line: 12
End line: 28
Method source code: 
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointValuePair pointValuePair4 = simplexOptimizer1.doOptimize();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #6
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #11
44: astore        4
46: aload_2
47: invokevirtual #12
50: astore        5
52: ldc           #13
54: invokestatic  #14
57: goto          62
60: astore        5
62: aload_3
63: invokestatic  #16
66: aload         4
68: invokestatic  #16
71: return
Exception table:
from    to  target type
46    57    60   Class org/apache/commons/math3/exception/NullArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test002
Start line: 31
End line: 41
Method source code: 
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optim.univariate.BrentOptimizer((double) (short) 10, (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -1 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #17
19: aastore
20: invokevirtual #7
23: pop
24: new           #18
27: dup
28: ldc2_w        #19
31: ldc2_w        #21
34: invokespecial #23
37: astore_1
38: ldc           #24
40: invokestatic  #14
43: goto          47
46: astore_1
47: return
Exception table:
from    to  target type
24    43    46   Class org/apache/commons/math3/exception/NotStrictlyPositiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test003
Start line: 44
End line: 65
Method source code: 
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        double[] doubleArray4 = simplexOptimizer1.getLowerBound();
        double[] doubleArray5 = simplexOptimizer1.getLowerBound();
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointValuePair pointValuePair7 = simplexOptimizer1.optimize(optimizationDataArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #26
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #11
44: astore        4
46: aload_2
47: invokevirtual #27
50: astore        5
52: aload_2
53: invokevirtual #27
56: astore        6
58: aconst_null
59: astore        7
61: aload_2
62: aload         7
64: invokevirtual #28
67: astore        8
69: ldc           #29
71: invokestatic  #14
74: goto          79
77: astore        8
79: aload_3
80: invokestatic  #16
83: aload         4
85: invokestatic  #16
88: aload         5
90: invokestatic  #16
93: aload         6
95: invokestatic  #16
98: return
Exception table:
from    to  target type
61    74    77   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test004
Start line: 68
End line: 80
Method source code: 
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((double) (byte) -1, pointVectorValuePairConvergenceChecker1, 2.147483647E9d, (double) (-127), (-1.0d), 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.linear.RealMatrix realMatrix7 = levenbergMarquardtOptimizer6.getWeight();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #31
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #32
29: dup
30: ldc2_w        #21
33: aload_1
34: ldc2_w        #33
37: ldc2_w        #35
40: ldc2_w        #21
43: dconst_0
44: invokespecial #37
47: astore_2
48: aload_2
49: invokevirtual #38
52: astore_3
53: ldc           #29
55: invokestatic  #14
58: goto          62
61: astore_3
62: return
Exception table:
from    to  target type
48    58    61   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test005
Start line: 83
End line: 89
Method source code: 
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer powellOptimizer4 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer((double) 10, (double) '#', (double) 1, (double) (byte) 100);
        int int5 = powellOptimizer4.getEvaluations();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #39
19: aastore
20: invokevirtual #7
23: pop
24: new           #40
27: dup
28: ldc2_w        #19
31: ldc2_w        #41
34: dconst_1
35: ldc2_w        #43
38: invokespecial #45
41: astore_1
42: aload_1
43: invokevirtual #46
46: istore_2
47: new           #47
50: dup
51: invokespecial #48
54: ldc           #49
56: invokevirtual #50
59: iload_2
60: invokevirtual #51
63: ldc           #52
65: invokevirtual #50
68: iconst_0
69: invokevirtual #51
72: ldc           #49
74: invokevirtual #50
77: invokevirtual #53
80: iload_2
81: ifne          88
84: iconst_1
85: goto          89
88: iconst_0
89: invokestatic  #54
92: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test006
Start line: 92
End line: 138
Method source code: 
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        double[] doubleArray4 = simplexOptimizer1.getLowerBound();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker5 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer6 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker5);
        double[] doubleArray7 = simplexOptimizer6.getUpperBound();
        double[] doubleArray8 = simplexOptimizer6.getStartPoint();
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction9 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction10 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction9);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction11 = objectiveFunction10.getObjectiveFunction();
        org.apache.commons.math3.optim.MaxEval maxEval12 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray14 = new double[] { 0.0f };
        double[] doubleArray15 = new double[] {};
        double[] doubleArray16 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair17 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray15, doubleArray16);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair18 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray14, doubleArray15);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection19 = null;
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray14, orderDirection19, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target23 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray14);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray24 = new org.apache.commons.math3.optim.OptimizationData[] { objectiveFunction10, maxEval12, target23 };
        simplexOptimizer6.parseOptimizationData(optimizationDataArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointValuePair pointValuePair26 = simplexOptimizer1.optimize(optimizationDataArray24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray7);
        org.junit.Assert.assertNull(doubleArray8);
        org.junit.Assert.assertNull(multivariateFunction11);
        org.junit.Assert.assertNotNull(maxEval12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray24);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #55
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #11
44: astore        4
46: aload_2
47: invokevirtual #27
50: astore        5
52: aconst_null
53: astore        6
55: new           #8
58: dup
59: aload         6
61: invokespecial #9
64: astore        7
66: aload         7
68: invokevirtual #10
71: astore        8
73: aload         7
75: invokevirtual #56
78: astore        9
80: aconst_null
81: astore        10
83: new           #57
86: dup
87: aload         10
89: invokespecial #58
92: astore        11
94: aload         11
96: invokevirtual #59
99: astore        12
101: invokestatic  #60
104: astore        13
106: iconst_1
107: newarray       double
109: dup
110: iconst_0
111: dconst_0
112: dastore
113: astore        14
115: iconst_0
116: newarray       double
118: astore        15
120: aconst_null
121: astore        16
123: new           #61
126: dup
127: aload         15
129: aload         16
131: invokespecial #62
134: astore        17
136: new           #63
139: dup
140: aload         14
142: aload         15
144: invokespecial #64
147: astore        18
149: aconst_null
150: astore        19
152: aload         14
154: aload         19
156: iconst_0
157: iconst_1
158: invokestatic  #65
161: istore        20
163: new           #66
166: dup
167: aload         14
169: invokespecial #67
172: astore        21
174: iconst_3
175: anewarray     #68
178: dup
179: iconst_0
180: aload         11
182: aastore
183: dup
184: iconst_1
185: aload         13
187: aastore
188: dup
189: iconst_2
190: aload         21
192: aastore
193: astore        22
195: aload         7
197: aload         22
199: invokevirtual #69
202: aload_2
203: aload         22
205: invokevirtual #28
208: astore        23
210: ldc           #13
212: invokestatic  #14
215: goto          220
218: astore        23
220: aload_3
221: invokestatic  #16
224: aload         4
226: invokestatic  #16
229: aload         5
231: invokestatic  #16
234: aload         8
236: invokestatic  #16
239: aload         9
241: invokestatic  #16
244: aload         12
246: invokestatic  #16
249: aload         13
251: invokestatic  #70
254: aload         14
256: invokestatic  #70
259: aload         14
261: invokestatic  #71
264: ldc           #72
266: invokestatic  #73
269: aload         15
271: invokestatic  #70
274: aload         15
276: invokestatic  #71
279: ldc           #74
281: invokestatic  #73
284: new           #47
287: dup
288: invokespecial #48
291: ldc           #49
293: invokevirtual #50
296: iload         20
298: invokevirtual #75
301: ldc           #52
303: invokevirtual #50
306: iconst_1
307: invokevirtual #75
310: ldc           #49
312: invokevirtual #50
315: invokevirtual #53
318: iload         20
320: iconst_1
321: if_icmpne     328
324: iconst_1
325: goto          329
328: iconst_0
329: invokestatic  #54
332: aload         22
334: invokestatic  #70
337: return
Exception table:
from    to  target type
202   215   218   Class org/apache/commons/math3/exception/NullArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test007
Start line: 141
End line: 151
Method source code: 
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optim.univariate.BrentOptimizer((double) (-100), (double) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -100 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #76
19: aastore
20: invokevirtual #7
23: pop
24: new           #18
27: dup
28: ldc2_w        #77
31: ldc2_w        #79
34: invokespecial #23
37: astore_1
38: ldc           #81
40: invokestatic  #14
43: goto          47
46: astore_1
47: return
Exception table:
from    to  target type
24    43    46   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test008
Start line: 154
End line: 166
Method source code: 
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair3 = gaussNewtonOptimizer2.doOptimize();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #83
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #84
29: dup
30: iconst_0
31: aload_1
32: invokespecial #85
35: astore_2
36: aload_2
37: invokevirtual #86
40: astore_3
41: ldc           #13
43: invokestatic  #14
46: goto          50
49: astore_3
50: return
Exception table:
from    to  target type
36    46    49   Class org/apache/commons/math3/exception/NullArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test009
Start line: 169
End line: 201
Method source code: 
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.Formula formula0 = null;
        org.apache.commons.math3.optim.SimpleValueChecker simpleValueChecker3 = new org.apache.commons.math3.optim.SimpleValueChecker((double) 2147483647, (double) (-1L));
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer nonLinearConjugateGradientOptimizer4 = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer(formula0, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair>) simpleValueChecker3);
        double[] doubleArray6 = new double[] { 0.0f };
        double[] doubleArray7 = new double[] {};
        double[] doubleArray8 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair9 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray7, doubleArray8);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair10 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray6, doubleArray7);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection11 = null;
        boolean boolean14 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray6, orderDirection11, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target15 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray6);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction16 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction17 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction16);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction18 = objectiveFunction17.getObjectiveFunction();
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray19 = new org.apache.commons.math3.optim.OptimizationData[] { target15, objectiveFunction17 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointValuePair pointValuePair20 = nonLinearConjugateGradientOptimizer4.optimize(optimizationDataArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(multivariateFunction18);
        org.junit.Assert.assertNotNull(optimizationDataArray19);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #87
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #88
29: dup
30: ldc2_w        #33
33: ldc2_w        #21
36: invokespecial #89
39: astore_2
40: new           #90
43: dup
44: aload_1
45: aload_2
46: invokespecial #91
49: astore_3
50: iconst_1
51: newarray       double
53: dup
54: iconst_0
55: dconst_0
56: dastore
57: astore        4
59: iconst_0
60: newarray       double
62: astore        5
64: aconst_null
65: astore        6
67: new           #61
70: dup
71: aload         5
73: aload         6
75: invokespecial #62
78: astore        7
80: new           #63
83: dup
84: aload         4
86: aload         5
88: invokespecial #64
91: astore        8
93: aconst_null
94: astore        9
96: aload         4
98: aload         9
100: iconst_0
101: iconst_1
102: invokestatic  #65
105: istore        10
107: new           #66
110: dup
111: aload         4
113: invokespecial #67
116: astore        11
118: aconst_null
119: astore        12
121: new           #57
124: dup
125: aload         12
127: invokespecial #58
130: astore        13
132: aload         13
134: invokevirtual #59
137: astore        14
139: iconst_2
140: anewarray     #68
143: dup
144: iconst_0
145: aload         11
147: aastore
148: dup
149: iconst_1
150: aload         13
152: aastore
153: astore        15
155: aload_3
156: aload         15
158: invokevirtual #92
161: astore        16
163: ldc           #29
165: invokestatic  #14
168: goto          173
171: astore        16
173: aload         4
175: invokestatic  #70
178: aload         4
180: invokestatic  #71
183: ldc           #72
185: invokestatic  #73
188: aload         5
190: invokestatic  #70
193: aload         5
195: invokestatic  #71
198: ldc           #74
200: invokestatic  #73
203: new           #47
206: dup
207: invokespecial #48
210: ldc           #49
212: invokevirtual #50
215: iload         10
217: invokevirtual #75
220: ldc           #52
222: invokevirtual #50
225: iconst_1
226: invokevirtual #75
229: ldc           #49
231: invokevirtual #50
234: invokevirtual #53
237: iload         10
239: iconst_1
240: if_icmpne     247
243: iconst_1
244: goto          248
247: iconst_0
248: invokestatic  #54
251: aload         14
253: invokestatic  #16
256: aload         15
258: invokestatic  #70
261: return
Exception table:
from    to  target type
155   168   171   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test010
Start line: 204
End line: 219
Method source code: 
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        double[] doubleArray4 = simplexOptimizer1.getLowerBound();
        double[] doubleArray5 = simplexOptimizer1.getLowerBound();
        int int6 = simplexOptimizer1.getMaxEvaluations();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #93
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #11
44: astore        4
46: aload_2
47: invokevirtual #27
50: astore        5
52: aload_2
53: invokevirtual #27
56: astore        6
58: aload_2
59: invokevirtual #94
62: istore        7
64: aload_3
65: invokestatic  #16
68: aload         4
70: invokestatic  #16
73: aload         5
75: invokestatic  #16
78: aload         6
80: invokestatic  #16
83: new           #47
86: dup
87: invokespecial #48
90: ldc           #49
92: invokevirtual #50
95: iload         7
97: invokevirtual #51
100: ldc           #52
102: invokevirtual #50
105: iconst_0
106: invokevirtual #51
109: ldc           #49
111: invokevirtual #50
114: invokevirtual #53
117: iload         7
119: ifne          126
122: iconst_1
123: goto          127
126: iconst_0
127: invokestatic  #54
130: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test011
Start line: 222
End line: 268
Method source code: 
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        int int3 = gaussNewtonOptimizer2.getEvaluations();
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex nelderMeadSimplex5 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex((int) (short) 100);
        double[] doubleArray7 = new double[] { 0.0f };
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair10 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray8, doubleArray9);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair11 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray7, doubleArray8);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection12 = null;
        boolean boolean15 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray7, orderDirection12, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target16 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray7);
        org.apache.commons.math3.optim.MaxEval maxEval17 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray19 = new double[] { 0.0f };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair22 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray20, doubleArray21);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair23 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray19, doubleArray20);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection24 = null;
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19, orderDirection24, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target28 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray19);
        org.apache.commons.math3.optim.univariate.SearchInterval searchInterval31 = new org.apache.commons.math3.optim.univariate.SearchInterval(100.0d, 6.8719476736E12d);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray32 = new org.apache.commons.math3.optim.OptimizationData[] { nelderMeadSimplex5, target16, maxEval17, target28, searchInterval31 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair33 = gaussNewtonOptimizer2.optimize(optimizationDataArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(maxEval17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray32);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #95
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #84
29: dup
30: iconst_0
31: aload_1
32: invokespecial #85
35: astore_2
36: aload_2
37: invokevirtual #96
40: istore_3
41: new           #97
44: dup
45: bipush        100
47: invokespecial #98
50: astore        4
52: iconst_1
53: newarray       double
55: dup
56: iconst_0
57: dconst_0
58: dastore
59: astore        5
61: iconst_0
62: newarray       double
64: astore        6
66: aconst_null
67: astore        7
69: new           #61
72: dup
73: aload         6
75: aload         7
77: invokespecial #62
80: astore        8
82: new           #63
85: dup
86: aload         5
88: aload         6
90: invokespecial #64
93: astore        9
95: aconst_null
96: astore        10
98: aload         5
100: aload         10
102: iconst_0
103: iconst_1
104: invokestatic  #65
107: istore        11
109: new           #66
112: dup
113: aload         5
115: invokespecial #67
118: astore        12
120: invokestatic  #60
123: astore        13
125: iconst_1
126: newarray       double
128: dup
129: iconst_0
130: dconst_0
131: dastore
132: astore        14
134: iconst_0
135: newarray       double
137: astore        15
139: aconst_null
140: astore        16
142: new           #61
145: dup
146: aload         15
148: aload         16
150: invokespecial #62
153: astore        17
155: new           #63
158: dup
159: aload         14
161: aload         15
163: invokespecial #64
166: astore        18
168: aconst_null
169: astore        19
171: aload         14
173: aload         19
175: iconst_0
176: iconst_1
177: invokestatic  #65
180: istore        20
182: new           #66
185: dup
186: aload         14
188: invokespecial #67
191: astore        21
193: new           #99
196: dup
197: ldc2_w        #43
200: ldc2_w        #100
203: invokespecial #102
206: astore        22
208: iconst_5
209: anewarray     #68
212: dup
213: iconst_0
214: aload         4
216: aastore
217: dup
218: iconst_1
219: aload         12
221: aastore
222: dup
223: iconst_2
224: aload         13
226: aastore
227: dup
228: iconst_3
229: aload         21
231: aastore
232: dup
233: iconst_4
234: aload         22
236: aastore
237: astore        23
239: aload_2
240: aload         23
242: invokevirtual #103
245: astore        24
247: ldc           #29
249: invokestatic  #14
252: goto          257
255: astore        24
257: new           #47
260: dup
261: invokespecial #48
264: ldc           #49
266: invokevirtual #50
269: iload_3
270: invokevirtual #51
273: ldc           #52
275: invokevirtual #50
278: iconst_0
279: invokevirtual #51
282: ldc           #49
284: invokevirtual #50
287: invokevirtual #53
290: iload_3
291: ifne          298
294: iconst_1
295: goto          299
298: iconst_0
299: invokestatic  #54
302: aload         5
304: invokestatic  #70
307: aload         5
309: invokestatic  #71
312: ldc           #72
314: invokestatic  #73
317: aload         6
319: invokestatic  #70
322: aload         6
324: invokestatic  #71
327: ldc           #74
329: invokestatic  #73
332: new           #47
335: dup
336: invokespecial #48
339: ldc           #49
341: invokevirtual #50
344: iload         11
346: invokevirtual #75
349: ldc           #52
351: invokevirtual #50
354: iconst_1
355: invokevirtual #75
358: ldc           #49
360: invokevirtual #50
363: invokevirtual #53
366: iload         11
368: iconst_1
369: if_icmpne     376
372: iconst_1
373: goto          377
376: iconst_0
377: invokestatic  #54
380: aload         13
382: invokestatic  #70
385: aload         14
387: invokestatic  #70
390: aload         14
392: invokestatic  #71
395: ldc           #72
397: invokestatic  #73
400: aload         15
402: invokestatic  #70
405: aload         15
407: invokestatic  #71
410: ldc           #74
412: invokestatic  #73
415: new           #47
418: dup
419: invokespecial #48
422: ldc           #49
424: invokevirtual #50
427: iload         20
429: invokevirtual #75
432: ldc           #52
434: invokevirtual #50
437: iconst_1
438: invokevirtual #75
441: ldc           #49
443: invokevirtual #50
446: invokevirtual #53
449: iload         20
451: iconst_1
452: if_icmpne     459
455: iconst_1
456: goto          460
459: iconst_0
460: invokestatic  #54
463: aload         23
465: invokestatic  #70
468: return
Exception table:
from    to  target type
239   252   255   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test012
Start line: 271
End line: 279
Method source code: 
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.Formula formula0 = null;
        org.apache.commons.math3.optim.SimpleValueChecker simpleValueChecker3 = new org.apache.commons.math3.optim.SimpleValueChecker((double) 2147483647, (double) (-1L));
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer nonLinearConjugateGradientOptimizer4 = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer(formula0, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair>) simpleValueChecker3);
        double double5 = simpleValueChecker3.getRelativeThreshold();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 2.147483647E9d + "'", double5 == 2.147483647E9d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #104
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #88
29: dup
30: ldc2_w        #33
33: ldc2_w        #21
36: invokespecial #89
39: astore_2
40: new           #90
43: dup
44: aload_1
45: aload_2
46: invokespecial #91
49: astore_3
50: aload_2
51: invokevirtual #105
54: dstore        4
56: new           #47
59: dup
60: invokespecial #48
63: ldc           #49
65: invokevirtual #50
68: dload         4
70: invokevirtual #106
73: ldc           #52
75: invokevirtual #50
78: ldc2_w        #33
81: invokevirtual #106
84: ldc           #49
86: invokevirtual #50
89: invokevirtual #53
92: dload         4
94: ldc2_w        #33
97: dcmpl
98: ifne          105
101: iconst_1
102: goto          106
105: iconst_0
106: invokestatic  #54
109: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test013
Start line: 282
End line: 298
Method source code: 
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        double[] doubleArray3 = gaussNewtonOptimizer2.getStartPoint();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker4 = gaussNewtonOptimizer2.getConvergenceChecker();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.linear.RealMatrix realMatrix5 = gaussNewtonOptimizer2.getWeight();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(pointVectorValuePairConvergenceChecker4);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #107
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #84
29: dup
30: iconst_0
31: aload_1
32: invokespecial #85
35: astore_2
36: aload_2
37: invokevirtual #108
40: astore_3
41: aload_2
42: invokevirtual #109
45: astore        4
47: aload_2
48: invokevirtual #110
51: astore        5
53: ldc           #29
55: invokestatic  #14
58: goto          63
61: astore        5
63: aload_3
64: invokestatic  #16
67: aload         4
69: invokestatic  #16
72: return
Exception table:
from    to  target type
47    58    61   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test014
Start line: 301
End line: 317
Method source code: 
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        double[] doubleArray3 = gaussNewtonOptimizer2.getStartPoint();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker4 = gaussNewtonOptimizer2.getConvergenceChecker();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = gaussNewtonOptimizer2.getTargetSize();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(pointVectorValuePairConvergenceChecker4);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #111
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #84
29: dup
30: iconst_0
31: aload_1
32: invokespecial #85
35: astore_2
36: aload_2
37: invokevirtual #108
40: astore_3
41: aload_2
42: invokevirtual #109
45: astore        4
47: aload_2
48: invokevirtual #112
51: istore        5
53: ldc           #29
55: invokestatic  #14
58: goto          63
61: astore        5
63: aload_3
64: invokestatic  #16
67: aload         4
69: invokestatic  #16
72: return
Exception table:
from    to  target type
47    58    61   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test015
Start line: 320
End line: 336
Method source code: 
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        double[] doubleArray3 = simplexOptimizer1.getStartPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointValuePair pointValuePair4 = simplexOptimizer1.doOptimize();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(doubleArray3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #113
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #56
44: astore        4
46: aload_2
47: invokevirtual #12
50: astore        5
52: ldc           #13
54: invokestatic  #14
57: goto          62
60: astore        5
62: aload_3
63: invokestatic  #16
66: aload         4
68: invokestatic  #16
71: return
Exception table:
from    to  target type
46    57    60   Class org/apache/commons/math3/exception/NullArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test016
Start line: 339
End line: 353
Method source code: 
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        int int3 = gaussNewtonOptimizer2.getEvaluations();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray4 = gaussNewtonOptimizer2.getTarget();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #114
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #84
29: dup
30: iconst_0
31: aload_1
32: invokespecial #85
35: astore_2
36: aload_2
37: invokevirtual #96
40: istore_3
41: aload_2
42: invokevirtual #115
45: astore        4
47: ldc           #29
49: invokestatic  #14
52: goto          57
55: astore        4
57: new           #47
60: dup
61: invokespecial #48
64: ldc           #49
66: invokevirtual #50
69: iload_3
70: invokevirtual #51
73: ldc           #52
75: invokevirtual #50
78: iconst_0
79: invokevirtual #51
82: ldc           #49
84: invokevirtual #50
87: invokevirtual #53
90: iload_3
91: ifne          98
94: iconst_1
95: goto          99
98: iconst_0
99: invokestatic  #54
102: return
Exception table:
from    to  target type
41    52    55   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test017
Start line: 356
End line: 372
Method source code: 
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        double[] doubleArray3 = gaussNewtonOptimizer2.getStartPoint();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker4 = gaussNewtonOptimizer2.getConvergenceChecker();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray5 = gaussNewtonOptimizer2.getTarget();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(pointVectorValuePairConvergenceChecker4);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #116
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #84
29: dup
30: iconst_0
31: aload_1
32: invokespecial #85
35: astore_2
36: aload_2
37: invokevirtual #108
40: astore_3
41: aload_2
42: invokevirtual #109
45: astore        4
47: aload_2
48: invokevirtual #115
51: astore        5
53: ldc           #29
55: invokestatic  #14
58: goto          63
61: astore        5
63: aload_3
64: invokestatic  #16
67: aload         4
69: invokestatic  #16
72: return
Exception table:
from    to  target type
47    58    61   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test018
Start line: 375
End line: 393
Method source code: 
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 0.8813735870195429d, 7.896296018268069E13d, 1.0d, 0.0d, 993.5494489615205d };
        org.apache.commons.math3.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math3.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker8 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer9 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker8);
        boolean boolean10 = arrayRealVector6.equals((java.lang.Object) gaussNewtonOptimizer9);
        org.apache.commons.math3.linear.RealVectorPreservingVisitor realVectorPreservingVisitor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double14 = arrayRealVector6.walkInDefaultOrder(realVectorPreservingVisitor11, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #117
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: anewarray     #118
28: dup
29: iconst_0
30: ldc2_w        #119
33: invokestatic  #121
36: aastore
37: dup
38: iconst_1
39: ldc2_w        #122
42: invokestatic  #121
45: aastore
46: dup
47: iconst_2
48: dconst_1
49: invokestatic  #121
52: aastore
53: dup
54: iconst_3
55: dconst_0
56: invokestatic  #121
59: aastore
60: dup
61: iconst_4
62: ldc2_w        #124
65: invokestatic  #121
68: aastore
69: astore_1
70: new           #126
73: dup
74: aload_1
75: invokespecial #127
78: astore_2
79: aconst_null
80: astore_3
81: new           #84
84: dup
85: iconst_0
86: aload_3
87: invokespecial #85
90: astore        4
92: aload_2
93: aload         4
95: invokevirtual #128
98: istore        5
100: aconst_null
101: astore        6
103: aload_2
104: aload         6
106: iconst_0
107: iconst_0
108: invokevirtual #129
111: dstore        7
113: ldc           #29
115: invokestatic  #14
118: goto          123
121: astore        7
123: aload_1
124: invokestatic  #70
127: new           #47
130: dup
131: invokespecial #48
134: ldc           #49
136: invokevirtual #50
139: iload         5
141: invokevirtual #75
144: ldc           #52
146: invokevirtual #50
149: iconst_0
150: invokevirtual #75
153: ldc           #49
155: invokevirtual #50
158: invokevirtual #53
161: iload         5
163: ifne          170
166: iconst_1
167: goto          171
170: iconst_0
171: invokestatic  #54
174: return
Exception table:
from    to  target type
103   118   121   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test019
Start line: 396
End line: 409
Method source code: 
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        double[] doubleArray3 = simplexOptimizer1.getLowerBound();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker4 = simplexOptimizer1.getConvergenceChecker();
        double[] doubleArray5 = simplexOptimizer1.getStartPoint();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(pointValuePairConvergenceChecker4);
        org.junit.Assert.assertNull(doubleArray5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #130
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #27
44: astore        4
46: aload_2
47: invokevirtual #131
50: astore        5
52: aload_2
53: invokevirtual #56
56: astore        6
58: aload_3
59: invokestatic  #16
62: aload         4
64: invokestatic  #16
67: aload         5
69: invokestatic  #16
72: aload         6
74: invokestatic  #16
77: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test020
Start line: 412
End line: 429
Method source code: 
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 0.8813735870195429d, 7.896296018268069E13d, 1.0d, 0.0d, 993.5494489615205d };
        org.apache.commons.math3.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math3.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker8 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer9 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker8);
        boolean boolean10 = arrayRealVector6.equals((java.lang.Object) gaussNewtonOptimizer9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.linear.RealMatrix realMatrix11 = gaussNewtonOptimizer9.getWeightSquareRoot();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #132
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: anewarray     #118
28: dup
29: iconst_0
30: ldc2_w        #119
33: invokestatic  #121
36: aastore
37: dup
38: iconst_1
39: ldc2_w        #122
42: invokestatic  #121
45: aastore
46: dup
47: iconst_2
48: dconst_1
49: invokestatic  #121
52: aastore
53: dup
54: iconst_3
55: dconst_0
56: invokestatic  #121
59: aastore
60: dup
61: iconst_4
62: ldc2_w        #124
65: invokestatic  #121
68: aastore
69: astore_1
70: new           #126
73: dup
74: aload_1
75: invokespecial #127
78: astore_2
79: aconst_null
80: astore_3
81: new           #84
84: dup
85: iconst_0
86: aload_3
87: invokespecial #85
90: astore        4
92: aload_2
93: aload         4
95: invokevirtual #128
98: istore        5
100: aload         4
102: invokevirtual #133
105: astore        6
107: ldc           #29
109: invokestatic  #14
112: goto          117
115: astore        6
117: aload_1
118: invokestatic  #70
121: new           #47
124: dup
125: invokespecial #48
128: ldc           #49
130: invokevirtual #50
133: iload         5
135: invokevirtual #75
138: ldc           #52
140: invokevirtual #50
143: iconst_0
144: invokevirtual #75
147: ldc           #49
149: invokevirtual #50
152: invokevirtual #53
155: iload         5
157: ifne          164
160: iconst_1
161: goto          165
164: iconst_0
165: invokestatic  #54
168: return
Exception table:
from    to  target type
100   112   115   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test021
Start line: 432
End line: 439
Method source code: 
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer(pointVectorValuePairConvergenceChecker0);
        double double2 = levenbergMarquardtOptimizer1.getChiSquare();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #134
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #32
29: dup
30: aload_1
31: invokespecial #135
34: astore_2
35: aload_2
36: invokevirtual #136
39: dstore_3
40: new           #47
43: dup
44: invokespecial #48
47: ldc           #49
49: invokevirtual #50
52: dload_3
53: invokevirtual #106
56: ldc           #52
58: invokevirtual #50
61: dconst_0
62: invokevirtual #106
65: ldc           #49
67: invokevirtual #50
70: invokevirtual #53
73: dload_3
74: dconst_0
75: dcmpl
76: ifne          83
79: iconst_1
80: goto          84
83: iconst_0
84: invokestatic  #54
87: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test022
Start line: 442
End line: 456
Method source code: 
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((double) (byte) -1, pointVectorValuePairConvergenceChecker1, 2.147483647E9d, (double) (-127), (-1.0d), 0.0d);
        double double7 = levenbergMarquardtOptimizer6.getChiSquare();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = levenbergMarquardtOptimizer6.getRMS();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #137
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #32
29: dup
30: ldc2_w        #21
33: aload_1
34: ldc2_w        #33
37: ldc2_w        #35
40: ldc2_w        #21
43: dconst_0
44: invokespecial #37
47: astore_2
48: aload_2
49: invokevirtual #136
52: dstore_3
53: aload_2
54: invokevirtual #138
57: dstore        5
59: ldc           #29
61: invokestatic  #14
64: goto          69
67: astore        5
69: new           #47
72: dup
73: invokespecial #48
76: ldc           #49
78: invokevirtual #50
81: dload_3
82: invokevirtual #106
85: ldc           #52
87: invokevirtual #50
90: dconst_0
91: invokevirtual #106
94: ldc           #49
96: invokevirtual #50
99: invokevirtual #53
102: dload_3
103: dconst_0
104: dcmpl
105: ifne          112
108: iconst_1
109: goto          113
112: iconst_0
113: invokestatic  #54
116: return
Exception table:
from    to  target type
53    64    67   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test023
Start line: 459
End line: 476
Method source code: 
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        double[] doubleArray4 = simplexOptimizer1.getLowerBound();
        int int5 = simplexOptimizer1.getMaxIterations();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType6 = simplexOptimizer1.getGoalType();
        int int7 = simplexOptimizer1.getMaxEvaluations();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNull(goalType6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #139
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #11
44: astore        4
46: aload_2
47: invokevirtual #27
50: astore        5
52: aload_2
53: invokevirtual #140
56: istore        6
58: aload_2
59: invokevirtual #11
62: astore        7
64: aload_2
65: invokevirtual #94
68: istore        8
70: aload_3
71: invokestatic  #16
74: aload         4
76: invokestatic  #16
79: aload         5
81: invokestatic  #16
84: new           #47
87: dup
88: invokespecial #48
91: ldc           #49
93: invokevirtual #50
96: iload         6
98: invokevirtual #51
101: ldc           #52
103: invokevirtual #50
106: ldc           #141
108: invokevirtual #51
111: ldc           #49
113: invokevirtual #50
116: invokevirtual #53
119: iload         6
121: ldc           #141
123: if_icmpne     130
126: iconst_1
127: goto          131
130: iconst_0
131: invokestatic  #54
134: aload         7
136: invokestatic  #16
139: new           #47
142: dup
143: invokespecial #48
146: ldc           #49
148: invokevirtual #50
151: iload         8
153: invokevirtual #51
156: ldc           #52
158: invokevirtual #50
161: iconst_0
162: invokevirtual #51
165: ldc           #49
167: invokevirtual #50
170: invokevirtual #53
173: iload         8
175: ifne          182
178: iconst_1
179: goto          183
182: iconst_0
183: invokestatic  #54
186: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test024
Start line: 479
End line: 491
Method source code: 
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer(pointVectorValuePairConvergenceChecker0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.linear.RealMatrix realMatrix2 = levenbergMarquardtOptimizer1.getWeightSquareRoot();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #142
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #32
29: dup
30: aload_1
31: invokespecial #135
34: astore_2
35: aload_2
36: invokevirtual #143
39: astore_3
40: ldc           #29
42: invokestatic  #14
45: goto          49
48: astore_3
49: return
Exception table:
from    to  target type
35    45    48   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test025
Start line: 494
End line: 507
Method source code: 
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        double[] doubleArray3 = gaussNewtonOptimizer2.getStartPoint();
        double[] doubleArray4 = gaussNewtonOptimizer2.getLowerBound();
        double[] doubleArray5 = gaussNewtonOptimizer2.getStartPoint();
        int int6 = gaussNewtonOptimizer2.getMaxIterations();
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2147483647 + "'", int6 == 2147483647);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #144
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #84
29: dup
30: iconst_0
31: aload_1
32: invokespecial #85
35: astore_2
36: aload_2
37: invokevirtual #108
40: astore_3
41: aload_2
42: invokevirtual #145
45: astore        4
47: aload_2
48: invokevirtual #108
51: astore        5
53: aload_2
54: invokevirtual #146
57: istore        6
59: aload_3
60: invokestatic  #16
63: aload         4
65: invokestatic  #16
68: aload         5
70: invokestatic  #16
73: new           #47
76: dup
77: invokespecial #48
80: ldc           #49
82: invokevirtual #50
85: iload         6
87: invokevirtual #51
90: ldc           #52
92: invokevirtual #50
95: ldc           #141
97: invokevirtual #51
100: ldc           #49
102: invokevirtual #50
105: invokevirtual #53
108: iload         6
110: ldc           #141
112: if_icmpne     119
115: iconst_1
116: goto          120
119: iconst_0
120: invokestatic  #54
123: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test026
Start line: 510
End line: 528
Method source code: 
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        int int3 = simplexOptimizer1.getMaxEvaluations();
        int int4 = simplexOptimizer1.getMaxIterations();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointValuePair pointValuePair5 = simplexOptimizer1.doOptimize();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #147
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #94
44: istore        4
46: aload_2
47: invokevirtual #140
50: istore        5
52: aload_2
53: invokevirtual #12
56: astore        6
58: ldc           #13
60: invokestatic  #14
63: goto          68
66: astore        6
68: aload_3
69: invokestatic  #16
72: new           #47
75: dup
76: invokespecial #48
79: ldc           #49
81: invokevirtual #50
84: iload         4
86: invokevirtual #51
89: ldc           #52
91: invokevirtual #50
94: iconst_0
95: invokevirtual #51
98: ldc           #49
100: invokevirtual #50
103: invokevirtual #53
106: iload         4
108: ifne          115
111: iconst_1
112: goto          116
115: iconst_0
116: invokestatic  #54
119: new           #47
122: dup
123: invokespecial #48
126: ldc           #49
128: invokevirtual #50
131: iload         5
133: invokevirtual #51
136: ldc           #52
138: invokevirtual #50
141: ldc           #141
143: invokevirtual #51
146: ldc           #49
148: invokevirtual #50
151: invokevirtual #53
154: iload         5
156: ldc           #141
158: if_icmpne     165
161: iconst_1
162: goto          166
165: iconst_0
166: invokestatic  #54
169: return
Exception table:
from    to  target type
52    63    66   Class org/apache/commons/math3/exception/NullArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test027
Start line: 531
End line: 544
Method source code: 
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker simpleUnivariateValueChecker4 = new org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker(0.0d, (double) 1L);
        double double5 = simpleUnivariateValueChecker4.getAbsoluteThreshold();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer6 = new org.apache.commons.math3.optim.univariate.BrentOptimizer(0.8860960807053615d, Double.NEGATIVE_INFINITY, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair>) simpleUnivariateValueChecker4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -? is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #148
19: aastore
20: invokevirtual #7
23: pop
24: new           #149
27: dup
28: dconst_0
29: dconst_1
30: invokespecial #150
33: astore_1
34: aload_1
35: invokevirtual #151
38: dstore_2
39: new           #18
42: dup
43: ldc2_w        #152
46: ldc2_w        #154
49: aload_1
50: invokespecial #156
53: astore        4
55: ldc           #157
57: invokestatic  #14
60: goto          65
63: astore        4
65: new           #47
68: dup
69: invokespecial #48
72: ldc           #49
74: invokevirtual #50
77: dload_2
78: invokevirtual #106
81: ldc           #52
83: invokevirtual #50
86: dconst_1
87: invokevirtual #106
90: ldc           #49
92: invokevirtual #50
95: invokevirtual #53
98: dload_2
99: dconst_1
100: dcmpl
101: ifne          108
104: iconst_1
105: goto          109
108: iconst_0
109: invokestatic  #54
112: return
Exception table:
from    to  target type
39    60    63   Class org/apache/commons/math3/exception/NotStrictlyPositiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test028
Start line: 547
End line: 621
Method source code: 
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        double[] doubleArray4 = simplexOptimizer1.getLowerBound();
        double[] doubleArray5 = simplexOptimizer1.getLowerBound();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker6 = simplexOptimizer1.getConvergenceChecker();
        int int7 = simplexOptimizer1.getIterations();
        org.apache.commons.math3.optim.univariate.SearchInterval searchInterval10 = new org.apache.commons.math3.optim.univariate.SearchInterval(100.0d, 6.8719476736E12d);
        double double11 = searchInterval10.getStartValue();
        org.apache.commons.math3.optim.SimpleBounds simpleBounds13 = org.apache.commons.math3.optim.SimpleBounds.unbounded((int) (byte) 10);
        double[] doubleArray15 = new double[] { 0.0f };
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair18 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray16, doubleArray17);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair19 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray15, doubleArray16);
        double[] doubleArray20 = doubleArrayPair19.getKey();
        double[] doubleArray22 = new double[] { 0.0f };
        double[] doubleArray23 = new double[] {};
        double[] doubleArray24 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair25 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray23, doubleArray24);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair26 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray22, doubleArray23);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection27 = null;
        boolean boolean30 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray22, orderDirection27, true, true);
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair31 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray20, doubleArray22);
        org.apache.commons.math3.optim.nonlinear.vector.Target target32 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray22);
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType33 = org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE;
        double[] doubleArray37 = new double[] { 2147483647, 57.29577951308232d, (short) 100 };
        org.apache.commons.math3.util.MathUtils.checkFinite(doubleArray37);
        double[] doubleArray45 = new double[] { 1L, Double.NEGATIVE_INFINITY, 10.0d, ' ', (-1.0f), (-100) };
        org.apache.commons.math3.optim.PointValuePair pointValuePair47 = new org.apache.commons.math3.optim.PointValuePair(doubleArray45, (double) ' ');
        org.apache.commons.math3.linear.RealMatrix realMatrix48 = org.apache.commons.math3.linear.MatrixUtils.createColumnRealMatrix(doubleArray45);
        org.apache.commons.math3.optim.SimpleBounds simpleBounds49 = new org.apache.commons.math3.optim.SimpleBounds(doubleArray37, doubleArray45);
        org.apache.commons.math3.optim.MaxEval maxEval50 = org.apache.commons.math3.optim.MaxEval.unlimited();
        int int51 = maxEval50.getMaxEval();
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray52 = new org.apache.commons.math3.optim.OptimizationData[] { searchInterval10, simpleBounds13, target32, goalType33, simpleBounds49, maxEval50 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointValuePair pointValuePair53 = simplexOptimizer1.optimize(optimizationDataArray52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertNull(pointValuePairConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 3.43597383685E12d + "'", double11 == 3.43597383685E12d);
        org.junit.Assert.assertNotNull(simpleBounds13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + goalType33 + "' != '" + org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE + "'", goalType33.equals(org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[2.147483647E9, 57.29577951308232, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[1.0, -Infinity, 10.0, 32.0, -1.0, -100.0]");
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(maxEval50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2147483647 + "'", int51 == 2147483647);
        org.junit.Assert.assertNotNull(optimizationDataArray52);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #158
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #11
44: astore        4
46: aload_2
47: invokevirtual #27
50: astore        5
52: aload_2
53: invokevirtual #27
56: astore        6
58: aload_2
59: invokevirtual #131
62: astore        7
64: aload_2
65: invokevirtual #159
68: istore        8
70: new           #99
73: dup
74: ldc2_w        #43
77: ldc2_w        #100
80: invokespecial #102
83: astore        9
85: aload         9
87: invokevirtual #160
90: dstore        10
92: bipush        10
94: invokestatic  #161
97: astore        12
99: iconst_1
100: newarray       double
102: dup
103: iconst_0
104: dconst_0
105: dastore
106: astore        13
108: iconst_0
109: newarray       double
111: astore        14
113: aconst_null
114: astore        15
116: new           #61
119: dup
120: aload         14
122: aload         15
124: invokespecial #62
127: astore        16
129: new           #63
132: dup
133: aload         13
135: aload         14
137: invokespecial #64
140: astore        17
142: aload         17
144: invokevirtual #162
147: checkcast     #163
150: astore        18
152: iconst_1
153: newarray       double
155: dup
156: iconst_0
157: dconst_0
158: dastore
159: astore        19
161: iconst_0
162: newarray       double
164: astore        20
166: aconst_null
167: astore        21
169: new           #61
172: dup
173: aload         20
175: aload         21
177: invokespecial #62
180: astore        22
182: new           #63
185: dup
186: aload         19
188: aload         20
190: invokespecial #64
193: astore        23
195: aconst_null
196: astore        24
198: aload         19
200: aload         24
202: iconst_1
203: iconst_1
204: invokestatic  #65
207: istore        25
209: new           #61
212: dup
213: aload         18
215: aload         19
217: invokespecial #62
220: astore        26
222: new           #66
225: dup
226: aload         19
228: invokespecial #67
231: astore        27
233: getstatic     #164
236: astore        28
238: iconst_3
239: newarray       double
241: dup
242: iconst_0
243: ldc2_w        #33
246: dastore
247: dup
248: iconst_1
249: ldc2_w        #165
252: dastore
253: dup
254: iconst_2
255: ldc2_w        #43
258: dastore
259: astore        29
261: aload         29
263: invokestatic  #167
266: bipush        6
268: newarray       double
270: dup
271: iconst_0
272: dconst_1
273: dastore
274: dup
275: iconst_1
276: ldc2_w        #154
279: dastore
280: dup
281: iconst_2
282: ldc2_w        #19
285: dastore
286: dup
287: iconst_3
288: ldc2_w        #79
291: dastore
292: dup
293: iconst_4
294: ldc2_w        #21
297: dastore
298: dup
299: iconst_5
300: ldc2_w        #77
303: dastore
304: astore        30
306: new           #168
309: dup
310: aload         30
312: ldc2_w        #79
315: invokespecial #169
318: astore        31
320: aload         30
322: invokestatic  #170
325: astore        32
327: new           #171
330: dup
331: aload         29
333: aload         30
335: invokespecial #172
338: astore        33
340: invokestatic  #60
343: astore        34
345: aload         34
347: invokevirtual #173
350: istore        35
352: bipush        6
354: anewarray     #68
357: dup
358: iconst_0
359: aload         9
361: aastore
362: dup
363: iconst_1
364: aload         12
366: aastore
367: dup
368: iconst_2
369: aload         27
371: aastore
372: dup
373: iconst_3
374: aload         28
376: aastore
377: dup
378: iconst_4
379: aload         33
381: aastore
382: dup
383: iconst_5
384: aload         34
386: aastore
387: astore        36
389: aload_2
390: aload         36
392: invokevirtual #28
395: astore        37
397: ldc           #13
399: invokestatic  #14
402: goto          407
405: astore        37
407: aload_3
408: invokestatic  #16
411: aload         4
413: invokestatic  #16
416: aload         5
418: invokestatic  #16
421: aload         6
423: invokestatic  #16
426: aload         7
428: invokestatic  #16
431: new           #47
434: dup
435: invokespecial #48
438: ldc           #49
440: invokevirtual #50
443: iload         8
445: invokevirtual #51
448: ldc           #52
450: invokevirtual #50
453: iconst_0
454: invokevirtual #51
457: ldc           #49
459: invokevirtual #50
462: invokevirtual #53
465: iload         8
467: ifne          474
470: iconst_1
471: goto          475
474: iconst_0
475: invokestatic  #54
478: new           #47
481: dup
482: invokespecial #48
485: ldc           #49
487: invokevirtual #50
490: dload         10
492: invokevirtual #106
495: ldc           #52
497: invokevirtual #50
500: ldc2_w        #174
503: invokevirtual #106
506: ldc           #49
508: invokevirtual #50
511: invokevirtual #53
514: dload         10
516: ldc2_w        #174
519: dcmpl
520: ifne          527
523: iconst_1
524: goto          528
527: iconst_0
528: invokestatic  #54
531: aload         12
533: invokestatic  #70
536: aload         13
538: invokestatic  #70
541: aload         13
543: invokestatic  #71
546: ldc           #72
548: invokestatic  #73
551: aload         14
553: invokestatic  #70
556: aload         14
558: invokestatic  #71
561: ldc           #74
563: invokestatic  #73
566: aload         18
568: invokestatic  #70
571: aload         18
573: invokestatic  #71
576: ldc           #72
578: invokestatic  #73
581: aload         19
583: invokestatic  #70
586: aload         19
588: invokestatic  #71
591: ldc           #72
593: invokestatic  #73
596: aload         20
598: invokestatic  #70
601: aload         20
603: invokestatic  #71
606: ldc           #74
608: invokestatic  #73
611: new           #47
614: dup
615: invokespecial #48
618: ldc           #49
620: invokevirtual #50
623: iload         25
625: invokevirtual #75
628: ldc           #52
630: invokevirtual #50
633: iconst_1
634: invokevirtual #75
637: ldc           #49
639: invokevirtual #50
642: invokevirtual #53
645: iload         25
647: iconst_1
648: if_icmpne     655
651: iconst_1
652: goto          656
655: iconst_0
656: invokestatic  #54
659: new           #47
662: dup
663: invokespecial #48
666: ldc           #49
668: invokevirtual #50
671: aload         28
673: invokevirtual #176
676: ldc           #52
678: invokevirtual #50
681: getstatic     #164
684: invokevirtual #176
687: ldc           #49
689: invokevirtual #50
692: invokevirtual #53
695: aload         28
697: getstatic     #164
700: invokevirtual #177
703: invokestatic  #54
706: aload         29
708: invokestatic  #70
711: aload         29
713: invokestatic  #71
716: ldc           #178
718: invokestatic  #73
721: aload         30
723: invokestatic  #70
726: aload         30
728: invokestatic  #71
731: ldc           #179
733: invokestatic  #73
736: aload         32
738: invokestatic  #70
741: aload         34
743: invokestatic  #70
746: new           #47
749: dup
750: invokespecial #48
753: ldc           #49
755: invokevirtual #50
758: iload         35
760: invokevirtual #51
763: ldc           #52
765: invokevirtual #50
768: ldc           #141
770: invokevirtual #51
773: ldc           #49
775: invokevirtual #50
778: invokevirtual #53
781: iload         35
783: ldc           #141
785: if_icmpne     792
788: iconst_1
789: goto          793
792: iconst_0
793: invokestatic  #54
796: aload         36
798: invokestatic  #70
801: return
Exception table:
from    to  target type
389   402   405   Class org/apache/commons/math3/exception/NullArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test029
Start line: 624
End line: 670
Method source code: 
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        double[] doubleArray3 = simplexOptimizer1.getLowerBound();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker4 = simplexOptimizer1.getConvergenceChecker();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker5 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer6 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker5);
        double[] doubleArray7 = simplexOptimizer6.getUpperBound();
        double[] doubleArray8 = simplexOptimizer6.getStartPoint();
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction9 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction10 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction9);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction11 = objectiveFunction10.getObjectiveFunction();
        org.apache.commons.math3.optim.MaxEval maxEval12 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray14 = new double[] { 0.0f };
        double[] doubleArray15 = new double[] {};
        double[] doubleArray16 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair17 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray15, doubleArray16);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair18 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray14, doubleArray15);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection19 = null;
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray14, orderDirection19, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target23 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray14);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray24 = new org.apache.commons.math3.optim.OptimizationData[] { objectiveFunction10, maxEval12, target23 };
        simplexOptimizer6.parseOptimizationData(optimizationDataArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointValuePair pointValuePair26 = simplexOptimizer1.optimize(optimizationDataArray24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(pointValuePairConvergenceChecker4);
        org.junit.Assert.assertNull(doubleArray7);
        org.junit.Assert.assertNull(doubleArray8);
        org.junit.Assert.assertNull(multivariateFunction11);
        org.junit.Assert.assertNotNull(maxEval12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray24);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #180
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #27
44: astore        4
46: aload_2
47: invokevirtual #131
50: astore        5
52: aconst_null
53: astore        6
55: new           #8
58: dup
59: aload         6
61: invokespecial #9
64: astore        7
66: aload         7
68: invokevirtual #10
71: astore        8
73: aload         7
75: invokevirtual #56
78: astore        9
80: aconst_null
81: astore        10
83: new           #57
86: dup
87: aload         10
89: invokespecial #58
92: astore        11
94: aload         11
96: invokevirtual #59
99: astore        12
101: invokestatic  #60
104: astore        13
106: iconst_1
107: newarray       double
109: dup
110: iconst_0
111: dconst_0
112: dastore
113: astore        14
115: iconst_0
116: newarray       double
118: astore        15
120: aconst_null
121: astore        16
123: new           #61
126: dup
127: aload         15
129: aload         16
131: invokespecial #62
134: astore        17
136: new           #63
139: dup
140: aload         14
142: aload         15
144: invokespecial #64
147: astore        18
149: aconst_null
150: astore        19
152: aload         14
154: aload         19
156: iconst_0
157: iconst_1
158: invokestatic  #65
161: istore        20
163: new           #66
166: dup
167: aload         14
169: invokespecial #67
172: astore        21
174: iconst_3
175: anewarray     #68
178: dup
179: iconst_0
180: aload         11
182: aastore
183: dup
184: iconst_1
185: aload         13
187: aastore
188: dup
189: iconst_2
190: aload         21
192: aastore
193: astore        22
195: aload         7
197: aload         22
199: invokevirtual #69
202: aload_2
203: aload         22
205: invokevirtual #28
208: astore        23
210: ldc           #13
212: invokestatic  #14
215: goto          220
218: astore        23
220: aload_3
221: invokestatic  #16
224: aload         4
226: invokestatic  #16
229: aload         5
231: invokestatic  #16
234: aload         8
236: invokestatic  #16
239: aload         9
241: invokestatic  #16
244: aload         12
246: invokestatic  #16
249: aload         13
251: invokestatic  #70
254: aload         14
256: invokestatic  #70
259: aload         14
261: invokestatic  #71
264: ldc           #72
266: invokestatic  #73
269: aload         15
271: invokestatic  #70
274: aload         15
276: invokestatic  #71
279: ldc           #74
281: invokestatic  #73
284: new           #47
287: dup
288: invokespecial #48
291: ldc           #49
293: invokevirtual #50
296: iload         20
298: invokevirtual #75
301: ldc           #52
303: invokevirtual #50
306: iconst_1
307: invokevirtual #75
310: ldc           #49
312: invokevirtual #50
315: invokevirtual #53
318: iload         20
320: iconst_1
321: if_icmpne     328
324: iconst_1
325: goto          329
328: iconst_0
329: invokestatic  #54
332: aload         22
334: invokestatic  #70
337: return
Exception table:
from    to  target type
202   215   218   Class org/apache/commons/math3/exception/NullArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test030
Start line: 673
End line: 691
Method source code: 
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 0.8813735870195429d, 7.896296018268069E13d, 1.0d, 0.0d, 993.5494489615205d };
        org.apache.commons.math3.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math3.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker8 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer9 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker8);
        boolean boolean10 = arrayRealVector6.equals((java.lang.Object) gaussNewtonOptimizer9);
        org.apache.commons.math3.linear.RealVector realVector11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.linear.ArrayRealVector arrayRealVector12 = arrayRealVector6.subtract(realVector11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #181
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: anewarray     #118
28: dup
29: iconst_0
30: ldc2_w        #119
33: invokestatic  #121
36: aastore
37: dup
38: iconst_1
39: ldc2_w        #122
42: invokestatic  #121
45: aastore
46: dup
47: iconst_2
48: dconst_1
49: invokestatic  #121
52: aastore
53: dup
54: iconst_3
55: dconst_0
56: invokestatic  #121
59: aastore
60: dup
61: iconst_4
62: ldc2_w        #124
65: invokestatic  #121
68: aastore
69: astore_1
70: new           #126
73: dup
74: aload_1
75: invokespecial #127
78: astore_2
79: aconst_null
80: astore_3
81: new           #84
84: dup
85: iconst_0
86: aload_3
87: invokespecial #85
90: astore        4
92: aload_2
93: aload         4
95: invokevirtual #128
98: istore        5
100: aconst_null
101: astore        6
103: aload_2
104: aload         6
106: invokevirtual #182
109: astore        7
111: ldc           #29
113: invokestatic  #14
116: goto          121
119: astore        7
121: aload_1
122: invokestatic  #70
125: new           #47
128: dup
129: invokespecial #48
132: ldc           #49
134: invokevirtual #50
137: iload         5
139: invokevirtual #75
142: ldc           #52
144: invokevirtual #50
147: iconst_0
148: invokevirtual #75
151: ldc           #49
153: invokevirtual #50
156: invokevirtual #53
159: iload         5
161: ifne          168
164: iconst_1
165: goto          169
168: iconst_0
169: invokestatic  #54
172: return
Exception table:
from    to  target type
103   116   119   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test031
Start line: 694
End line: 711
Method source code: 
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        double[] doubleArray4 = simplexOptimizer1.getLowerBound();
        double[] doubleArray5 = simplexOptimizer1.getLowerBound();
        double[] doubleArray6 = simplexOptimizer1.getUpperBound();
        int int7 = simplexOptimizer1.getIterations();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #183
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #11
44: astore        4
46: aload_2
47: invokevirtual #27
50: astore        5
52: aload_2
53: invokevirtual #27
56: astore        6
58: aload_2
59: invokevirtual #10
62: astore        7
64: aload_2
65: invokevirtual #159
68: istore        8
70: aload_3
71: invokestatic  #16
74: aload         4
76: invokestatic  #16
79: aload         5
81: invokestatic  #16
84: aload         6
86: invokestatic  #16
89: aload         7
91: invokestatic  #16
94: new           #47
97: dup
98: invokespecial #48
101: ldc           #49
103: invokevirtual #50
106: iload         8
108: invokevirtual #51
111: ldc           #52
113: invokevirtual #50
116: iconst_0
117: invokevirtual #51
120: ldc           #49
122: invokevirtual #50
125: invokevirtual #53
128: iload         8
130: ifne          137
133: iconst_1
134: goto          138
137: iconst_0
138: invokestatic  #54
141: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test032
Start line: 714
End line: 729
Method source code: 
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer(pointVectorValuePairConvergenceChecker0);
        int int2 = levenbergMarquardtOptimizer1.getEvaluations();
        double[] doubleArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray5 = levenbergMarquardtOptimizer1.computeCovariances(doubleArray3, (double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #184
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #32
29: dup
30: aload_1
31: invokespecial #135
34: astore_2
35: aload_2
36: invokevirtual #185
39: istore_3
40: aconst_null
41: astore        4
43: aload_2
44: aload         4
46: dconst_1
47: invokevirtual #186
50: astore        5
52: ldc           #29
54: invokestatic  #14
57: goto          62
60: astore        5
62: new           #47
65: dup
66: invokespecial #48
69: ldc           #49
71: invokevirtual #50
74: iload_3
75: invokevirtual #51
78: ldc           #52
80: invokevirtual #50
83: iconst_0
84: invokevirtual #51
87: ldc           #49
89: invokevirtual #50
92: invokevirtual #53
95: iload_3
96: ifne          103
99: iconst_1
100: goto          104
103: iconst_0
104: invokestatic  #54
107: return
Exception table:
from    to  target type
43    57    60   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test033
Start line: 732
End line: 744
Method source code: 
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointValuePair pointValuePair2 = simplexOptimizer1.doOptimize();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #187
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #12
39: astore_3
40: ldc           #13
42: invokestatic  #14
45: goto          49
48: astore_3
49: return
Exception table:
from    to  target type
35    45    48   Class org/apache/commons/math3/exception/NullArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test034
Start line: 747
End line: 762
Method source code: 
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        int int3 = gaussNewtonOptimizer2.getEvaluations();
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair5 = gaussNewtonOptimizer2.optimize(optimizationDataArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #188
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #84
29: dup
30: iconst_0
31: aload_1
32: invokespecial #85
35: astore_2
36: aload_2
37: invokevirtual #96
40: istore_3
41: aconst_null
42: astore        4
44: aload_2
45: aload         4
47: invokevirtual #103
50: astore        5
52: ldc           #29
54: invokestatic  #14
57: goto          62
60: astore        5
62: new           #47
65: dup
66: invokespecial #48
69: ldc           #49
71: invokevirtual #50
74: iload_3
75: invokevirtual #51
78: ldc           #52
80: invokevirtual #50
83: iconst_0
84: invokevirtual #51
87: ldc           #49
89: invokevirtual #50
92: invokevirtual #53
95: iload_3
96: ifne          103
99: iconst_1
100: goto          104
103: iconst_0
104: invokestatic  #54
107: return
Exception table:
from    to  target type
44    57    60   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test035
Start line: 765
End line: 778
Method source code: 
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        double[] doubleArray3 = gaussNewtonOptimizer2.getStartPoint();
        double[] doubleArray4 = gaussNewtonOptimizer2.getLowerBound();
        double[] doubleArray5 = gaussNewtonOptimizer2.getLowerBound();
        double[] doubleArray6 = gaussNewtonOptimizer2.getStartPoint();
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertNull(doubleArray6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #189
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #84
29: dup
30: iconst_0
31: aload_1
32: invokespecial #85
35: astore_2
36: aload_2
37: invokevirtual #108
40: astore_3
41: aload_2
42: invokevirtual #145
45: astore        4
47: aload_2
48: invokevirtual #145
51: astore        5
53: aload_2
54: invokevirtual #108
57: astore        6
59: aload_3
60: invokestatic  #16
63: aload         4
65: invokestatic  #16
68: aload         5
70: invokestatic  #16
73: aload         6
75: invokestatic  #16
78: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test036
Start line: 781
End line: 791
Method source code: 
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer powellOptimizer2 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer((-0.5872139151569291d), (-0.5872139151569291d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -0.587 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #190
19: aastore
20: invokevirtual #7
23: pop
24: new           #40
27: dup
28: ldc2_w        #191
31: ldc2_w        #191
34: invokespecial #193
37: astore_1
38: ldc           #194
40: invokestatic  #14
43: goto          47
46: astore_1
47: return
Exception table:
from    to  target type
24    43    46   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test037
Start line: 794
End line: 798
Method source code: 
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer2 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(23.140692632779267d, 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #195
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: ldc2_w        #196
31: dconst_0
32: invokespecial #198
35: astore_1
36: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test038
Start line: 801
End line: 808
Method source code: 
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getLowerBound();
        org.junit.Assert.assertNull(doubleArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #199
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #27
39: astore_3
40: aload_3
41: invokestatic  #16
44: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test039
Start line: 811
End line: 827
Method source code: 
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        int int3 = gaussNewtonOptimizer2.getEvaluations();
        double double4 = gaussNewtonOptimizer2.getChiSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.linear.RealMatrix realMatrix5 = gaussNewtonOptimizer2.getWeightSquareRoot();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #200
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #84
29: dup
30: iconst_0
31: aload_1
32: invokespecial #85
35: astore_2
36: aload_2
37: invokevirtual #96
40: istore_3
41: aload_2
42: invokevirtual #201
45: dstore        4
47: aload_2
48: invokevirtual #133
51: astore        6
53: ldc           #29
55: invokestatic  #14
58: goto          63
61: astore        6
63: new           #47
66: dup
67: invokespecial #48
70: ldc           #49
72: invokevirtual #50
75: iload_3
76: invokevirtual #51
79: ldc           #52
81: invokevirtual #50
84: iconst_0
85: invokevirtual #51
88: ldc           #49
90: invokevirtual #50
93: invokevirtual #53
96: iload_3
97: ifne          104
100: iconst_1
101: goto          105
104: iconst_0
105: invokestatic  #54
108: new           #47
111: dup
112: invokespecial #48
115: ldc           #49
117: invokevirtual #50
120: dload         4
122: invokevirtual #106
125: ldc           #52
127: invokevirtual #50
130: dconst_0
131: invokevirtual #106
134: ldc           #49
136: invokevirtual #50
139: invokevirtual #53
142: dload         4
144: dconst_0
145: dcmpl
146: ifne          153
149: iconst_1
150: goto          154
153: iconst_0
154: invokestatic  #54
157: return
Exception table:
from    to  target type
47    58    61   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test040
Start line: 830
End line: 841
Method source code: 
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        double[] doubleArray3 = simplexOptimizer1.getLowerBound();
        int int4 = simplexOptimizer1.getMaxEvaluations();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #202
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #27
44: astore        4
46: aload_2
47: invokevirtual #94
50: istore        5
52: aload_3
53: invokestatic  #16
56: aload         4
58: invokestatic  #16
61: new           #47
64: dup
65: invokespecial #48
68: ldc           #49
70: invokevirtual #50
73: iload         5
75: invokevirtual #51
78: ldc           #52
80: invokevirtual #50
83: iconst_0
84: invokevirtual #51
87: ldc           #49
89: invokevirtual #50
92: invokevirtual #53
95: iload         5
97: ifne          104
100: iconst_1
101: goto          105
104: iconst_0
105: invokestatic  #54
108: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test041
Start line: 844
End line: 857
Method source code: 
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        double[] doubleArray4 = simplexOptimizer1.getLowerBound();
        int int5 = simplexOptimizer1.getMaxEvaluations();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #203
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #11
44: astore        4
46: aload_2
47: invokevirtual #27
50: astore        5
52: aload_2
53: invokevirtual #94
56: istore        6
58: aload_3
59: invokestatic  #16
62: aload         4
64: invokestatic  #16
67: aload         5
69: invokestatic  #16
72: new           #47
75: dup
76: invokespecial #48
79: ldc           #49
81: invokevirtual #50
84: iload         6
86: invokevirtual #51
89: ldc           #52
91: invokevirtual #50
94: iconst_0
95: invokevirtual #51
98: ldc           #49
100: invokevirtual #50
103: invokevirtual #53
106: iload         6
108: ifne          115
111: iconst_1
112: goto          116
115: iconst_0
116: invokestatic  #54
119: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test042
Start line: 860
End line: 878
Method source code: 
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        double[] doubleArray3 = gaussNewtonOptimizer2.getStartPoint();
        double[] doubleArray4 = gaussNewtonOptimizer2.getLowerBound();
        double[] doubleArray5 = gaussNewtonOptimizer2.getLowerBound();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = gaussNewtonOptimizer2.getTargetSize();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #204
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #84
29: dup
30: iconst_0
31: aload_1
32: invokespecial #85
35: astore_2
36: aload_2
37: invokevirtual #108
40: astore_3
41: aload_2
42: invokevirtual #145
45: astore        4
47: aload_2
48: invokevirtual #145
51: astore        5
53: aload_2
54: invokevirtual #112
57: istore        6
59: ldc           #29
61: invokestatic  #14
64: goto          69
67: astore        6
69: aload_3
70: invokestatic  #16
73: aload         4
75: invokestatic  #16
78: aload         5
80: invokestatic  #16
83: return
Exception table:
from    to  target type
53    64    67   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test043
Start line: 881
End line: 890
Method source code: 
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer(pointVectorValuePairConvergenceChecker0);
        int int2 = levenbergMarquardtOptimizer1.getEvaluations();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker3 = levenbergMarquardtOptimizer1.getConvergenceChecker();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(pointVectorValuePairConvergenceChecker3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #205
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #32
29: dup
30: aload_1
31: invokespecial #135
34: astore_2
35: aload_2
36: invokevirtual #185
39: istore_3
40: aload_2
41: invokevirtual #206
44: astore        4
46: new           #47
49: dup
50: invokespecial #48
53: ldc           #49
55: invokevirtual #50
58: iload_3
59: invokevirtual #51
62: ldc           #52
64: invokevirtual #50
67: iconst_0
68: invokevirtual #51
71: ldc           #49
73: invokevirtual #50
76: invokevirtual #53
79: iload_3
80: ifne          87
83: iconst_1
84: goto          88
87: iconst_0
88: invokestatic  #54
91: aload         4
93: invokestatic  #16
96: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test044
Start line: 893
End line: 906
Method source code: 
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        int int3 = simplexOptimizer1.getMaxEvaluations();
        int int4 = simplexOptimizer1.getMaxIterations();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType5 = simplexOptimizer1.getGoalType();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNull(goalType5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #207
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #94
44: istore        4
46: aload_2
47: invokevirtual #140
50: istore        5
52: aload_2
53: invokevirtual #11
56: astore        6
58: aload_3
59: invokestatic  #16
62: new           #47
65: dup
66: invokespecial #48
69: ldc           #49
71: invokevirtual #50
74: iload         4
76: invokevirtual #51
79: ldc           #52
81: invokevirtual #50
84: iconst_0
85: invokevirtual #51
88: ldc           #49
90: invokevirtual #50
93: invokevirtual #53
96: iload         4
98: ifne          105
101: iconst_1
102: goto          106
105: iconst_0
106: invokestatic  #54
109: new           #47
112: dup
113: invokespecial #48
116: ldc           #49
118: invokevirtual #50
121: iload         5
123: invokevirtual #51
126: ldc           #52
128: invokevirtual #50
131: ldc           #141
133: invokevirtual #51
136: ldc           #49
138: invokevirtual #50
141: invokevirtual #53
144: iload         5
146: ldc           #141
148: if_icmpne     155
151: iconst_1
152: goto          156
155: iconst_0
156: invokestatic  #54
159: aload         6
161: invokestatic  #16
164: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test045
Start line: 909
End line: 925
Method source code: 
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((double) (byte) -1, pointVectorValuePairConvergenceChecker1, 2.147483647E9d, (double) (-127), (-1.0d), 0.0d);
        double double7 = levenbergMarquardtOptimizer6.getChiSquare();
        double double8 = levenbergMarquardtOptimizer6.getChiSquare();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.linear.RealMatrix realMatrix9 = levenbergMarquardtOptimizer6.getWeightSquareRoot();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #208
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #32
29: dup
30: ldc2_w        #21
33: aload_1
34: ldc2_w        #33
37: ldc2_w        #35
40: ldc2_w        #21
43: dconst_0
44: invokespecial #37
47: astore_2
48: aload_2
49: invokevirtual #136
52: dstore_3
53: aload_2
54: invokevirtual #136
57: dstore        5
59: aload_2
60: invokevirtual #143
63: astore        7
65: ldc           #29
67: invokestatic  #14
70: goto          75
73: astore        7
75: new           #47
78: dup
79: invokespecial #48
82: ldc           #49
84: invokevirtual #50
87: dload_3
88: invokevirtual #106
91: ldc           #52
93: invokevirtual #50
96: dconst_0
97: invokevirtual #106
100: ldc           #49
102: invokevirtual #50
105: invokevirtual #53
108: dload_3
109: dconst_0
110: dcmpl
111: ifne          118
114: iconst_1
115: goto          119
118: iconst_0
119: invokestatic  #54
122: new           #47
125: dup
126: invokespecial #48
129: ldc           #49
131: invokevirtual #50
134: dload         5
136: invokevirtual #106
139: ldc           #52
141: invokevirtual #50
144: dconst_0
145: invokevirtual #106
148: ldc           #49
150: invokevirtual #50
153: invokevirtual #53
156: dload         5
158: dconst_0
159: dcmpl
160: ifne          167
163: iconst_1
164: goto          168
167: iconst_0
168: invokestatic  #54
171: return
Exception table:
from    to  target type
59    70    73   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test046
Start line: 928
End line: 936
Method source code: 
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer();
        int int1 = levenbergMarquardtOptimizer0.getEvaluations();
        int int2 = levenbergMarquardtOptimizer0.getIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #209
19: aastore
20: invokevirtual #7
23: pop
24: new           #32
27: dup
28: invokespecial #210
31: astore_1
32: aload_1
33: invokevirtual #185
36: istore_2
37: aload_1
38: invokevirtual #211
41: istore_3
42: new           #47
45: dup
46: invokespecial #48
49: ldc           #49
51: invokevirtual #50
54: iload_2
55: invokevirtual #51
58: ldc           #52
60: invokevirtual #50
63: iconst_0
64: invokevirtual #51
67: ldc           #49
69: invokevirtual #50
72: invokevirtual #53
75: iload_2
76: ifne          83
79: iconst_1
80: goto          84
83: iconst_0
84: invokestatic  #54
87: new           #47
90: dup
91: invokespecial #48
94: ldc           #49
96: invokevirtual #50
99: iload_3
100: invokevirtual #51
103: ldc           #52
105: invokevirtual #50
108: iconst_0
109: invokevirtual #51
112: ldc           #49
114: invokevirtual #50
117: invokevirtual #53
120: iload_3
121: ifne          128
124: iconst_1
125: goto          129
128: iconst_0
129: invokestatic  #54
132: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test047
Start line: 939
End line: 943
Method source code: 
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer2 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(0.0d, (-1.0d));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #212
19: aastore
20: invokevirtual #7
23: pop
24: new           #8
27: dup
28: dconst_0
29: ldc2_w        #21
32: invokespecial #198
35: astore_1
36: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test048
Start line: 946
End line: 983
Method source code: 
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        int int3 = simplexOptimizer1.getMaxEvaluations();
        int int4 = simplexOptimizer1.getMaxIterations();
        org.apache.commons.math3.optim.SimpleBounds simpleBounds6 = org.apache.commons.math3.optim.SimpleBounds.unbounded(0);
        double[] doubleArray10 = new double[] { 2147483647, 57.29577951308232d, (short) 100 };
        org.apache.commons.math3.util.MathUtils.checkFinite(doubleArray10);
        double[] doubleArray18 = new double[] { 1L, Double.NEGATIVE_INFINITY, 10.0d, ' ', (-1.0f), (-100) };
        org.apache.commons.math3.optim.PointValuePair pointValuePair20 = new org.apache.commons.math3.optim.PointValuePair(doubleArray18, (double) ' ');
        org.apache.commons.math3.linear.RealMatrix realMatrix21 = org.apache.commons.math3.linear.MatrixUtils.createColumnRealMatrix(doubleArray18);
        org.apache.commons.math3.optim.SimpleBounds simpleBounds22 = new org.apache.commons.math3.optim.SimpleBounds(doubleArray10, doubleArray18);
        double[] doubleArray23 = simpleBounds22.getLower();
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex multiDirectionalSimplex24 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex(doubleArray23);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray25 = new org.apache.commons.math3.optim.OptimizationData[] { simpleBounds6, multiDirectionalSimplex24 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointValuePair pointValuePair26 = simplexOptimizer1.optimize(optimizationDataArray25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.MathUnsupportedOperationException; message: constraint");
        } catch (org.apache.commons.math3.exception.MathUnsupportedOperationException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNotNull(simpleBounds6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[2.147483647E9, 57.29577951308232, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, -Infinity, 10.0, 32.0, -1.0, -100.0]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[2.147483647E9, 57.29577951308232, 100.0]");
        org.junit.Assert.assertNotNull(optimizationDataArray25);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #213
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #94
44: istore        4
46: aload_2
47: invokevirtual #140
50: istore        5
52: iconst_0
53: invokestatic  #161
56: astore        6
58: iconst_3
59: newarray       double
61: dup
62: iconst_0
63: ldc2_w        #33
66: dastore
67: dup
68: iconst_1
69: ldc2_w        #165
72: dastore
73: dup
74: iconst_2
75: ldc2_w        #43
78: dastore
79: astore        7
81: aload         7
83: invokestatic  #167
86: bipush        6
88: newarray       double
90: dup
91: iconst_0
92: dconst_1
93: dastore
94: dup
95: iconst_1
96: ldc2_w        #154
99: dastore
100: dup
101: iconst_2
102: ldc2_w        #19
105: dastore
106: dup
107: iconst_3
108: ldc2_w        #79
111: dastore
112: dup
113: iconst_4
114: ldc2_w        #21
117: dastore
118: dup
119: iconst_5
120: ldc2_w        #77
123: dastore
124: astore        8
126: new           #168
129: dup
130: aload         8
132: ldc2_w        #79
135: invokespecial #169
138: astore        9
140: aload         8
142: invokestatic  #170
145: astore        10
147: new           #171
150: dup
151: aload         7
153: aload         8
155: invokespecial #172
158: astore        11
160: aload         11
162: invokevirtual #214
165: astore        12
167: new           #215
170: dup
171: aload         12
173: invokespecial #216
176: astore        13
178: iconst_2
179: anewarray     #68
182: dup
183: iconst_0
184: aload         6
186: aastore
187: dup
188: iconst_1
189: aload         13
191: aastore
192: astore        14
194: aload_2
195: aload         14
197: invokevirtual #28
200: astore        15
202: ldc           #217
204: invokestatic  #14
207: goto          212
210: astore        15
212: aload_3
213: invokestatic  #16
216: new           #47
219: dup
220: invokespecial #48
223: ldc           #49
225: invokevirtual #50
228: iload         4
230: invokevirtual #51
233: ldc           #52
235: invokevirtual #50
238: iconst_0
239: invokevirtual #51
242: ldc           #49
244: invokevirtual #50
247: invokevirtual #53
250: iload         4
252: ifne          259
255: iconst_1
256: goto          260
259: iconst_0
260: invokestatic  #54
263: new           #47
266: dup
267: invokespecial #48
270: ldc           #49
272: invokevirtual #50
275: iload         5
277: invokevirtual #51
280: ldc           #52
282: invokevirtual #50
285: ldc           #141
287: invokevirtual #51
290: ldc           #49
292: invokevirtual #50
295: invokevirtual #53
298: iload         5
300: ldc           #141
302: if_icmpne     309
305: iconst_1
306: goto          310
309: iconst_0
310: invokestatic  #54
313: aload         6
315: invokestatic  #70
318: aload         7
320: invokestatic  #70
323: aload         7
325: invokestatic  #71
328: ldc           #178
330: invokestatic  #73
333: aload         8
335: invokestatic  #70
338: aload         8
340: invokestatic  #71
343: ldc           #179
345: invokestatic  #73
348: aload         10
350: invokestatic  #70
353: aload         12
355: invokestatic  #70
358: aload         12
360: invokestatic  #71
363: ldc           #178
365: invokestatic  #73
368: aload         14
370: invokestatic  #70
373: return
Exception table:
from    to  target type
194   207   210   Class org/apache/commons/math3/exception/MathUnsupportedOperationException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test049
Start line: 986
End line: 1006
Method source code: 
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        double[] doubleArray3 = gaussNewtonOptimizer2.getStartPoint();
        double[] doubleArray4 = gaussNewtonOptimizer2.getLowerBound();
        double[] doubleArray5 = gaussNewtonOptimizer2.getStartPoint();
        int int6 = gaussNewtonOptimizer2.getMaxEvaluations();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = gaussNewtonOptimizer2.getRMS();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #219
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #84
29: dup
30: iconst_0
31: aload_1
32: invokespecial #85
35: astore_2
36: aload_2
37: invokevirtual #108
40: astore_3
41: aload_2
42: invokevirtual #145
45: astore        4
47: aload_2
48: invokevirtual #108
51: astore        5
53: aload_2
54: invokevirtual #220
57: istore        6
59: aload_2
60: invokevirtual #221
63: dstore        7
65: ldc           #29
67: invokestatic  #14
70: goto          75
73: astore        7
75: aload_3
76: invokestatic  #16
79: aload         4
81: invokestatic  #16
84: aload         5
86: invokestatic  #16
89: new           #47
92: dup
93: invokespecial #48
96: ldc           #49
98: invokevirtual #50
101: iload         6
103: invokevirtual #51
106: ldc           #52
108: invokevirtual #50
111: iconst_0
112: invokevirtual #51
115: ldc           #49
117: invokevirtual #50
120: invokevirtual #53
123: iload         6
125: ifne          132
128: iconst_1
129: goto          133
132: iconst_0
133: invokestatic  #54
136: return
Exception table:
from    to  target type
59    70    73   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test050
Start line: 1009
End line: 1028
Method source code: 
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((double) (byte) -1, pointVectorValuePairConvergenceChecker1, 2.147483647E9d, (double) (-127), (-1.0d), 0.0d);
        double double7 = levenbergMarquardtOptimizer6.getChiSquare();
        org.apache.commons.math3.optim.SimpleBounds simpleBounds9 = org.apache.commons.math3.optim.SimpleBounds.unbounded((int) 'a');
        double[] doubleArray10 = simpleBounds9.getUpper();
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray12 = levenbergMarquardtOptimizer6.computeCovariances(doubleArray10, (double) 6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNotNull(simpleBounds9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity, Infinity]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #222
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #32
29: dup
30: ldc2_w        #21
33: aload_1
34: ldc2_w        #33
37: ldc2_w        #35
40: ldc2_w        #21
43: dconst_0
44: invokespecial #37
47: astore_2
48: aload_2
49: invokevirtual #136
52: dstore_3
53: bipush        97
55: invokestatic  #161
58: astore        5
60: aload         5
62: invokevirtual #223
65: astore        6
67: aload_2
68: aload         6
70: ldc2_w        #224
73: invokevirtual #186
76: astore        7
78: ldc           #29
80: invokestatic  #14
83: goto          88
86: astore        7
88: new           #47
91: dup
92: invokespecial #48
95: ldc           #49
97: invokevirtual #50
100: dload_3
101: invokevirtual #106
104: ldc           #52
106: invokevirtual #50
109: dconst_0
110: invokevirtual #106
113: ldc           #49
115: invokevirtual #50
118: invokevirtual #53
121: dload_3
122: dconst_0
123: dcmpl
124: ifne          131
127: iconst_1
128: goto          132
131: iconst_0
132: invokestatic  #54
135: aload         5
137: invokestatic  #70
140: aload         6
142: invokestatic  #70
145: aload         6
147: invokestatic  #71
150: ldc           #226
152: invokestatic  #73
155: return
Exception table:
from    to  target type
67    83    86   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test051
Start line: 1031
End line: 1073
Method source code: 
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 0.8813735870195429d, 7.896296018268069E13d, 1.0d, 0.0d, 993.5494489615205d };
        org.apache.commons.math3.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math3.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker8 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer9 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker8);
        boolean boolean10 = arrayRealVector6.equals((java.lang.Object) gaussNewtonOptimizer9);
        double[] doubleArray12 = new double[] { 0.0f };
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair15 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray13, doubleArray14);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair16 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray12, doubleArray13);
        double[] doubleArray17 = doubleArrayPair16.getKey();
        double[] doubleArray19 = new double[] { 0.0f };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair22 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray20, doubleArray21);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair23 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray19, doubleArray20);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection24 = null;
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19, orderDirection24, true, true);
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair28 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray17, doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray30 = gaussNewtonOptimizer9.computeCovariances(doubleArray17, 7.896296018367611E13d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #227
19: aastore
20: invokevirtual #7
23: pop
24: iconst_5
25: anewarray     #118
28: dup
29: iconst_0
30: ldc2_w        #119
33: invokestatic  #121
36: aastore
37: dup
38: iconst_1
39: ldc2_w        #122
42: invokestatic  #121
45: aastore
46: dup
47: iconst_2
48: dconst_1
49: invokestatic  #121
52: aastore
53: dup
54: iconst_3
55: dconst_0
56: invokestatic  #121
59: aastore
60: dup
61: iconst_4
62: ldc2_w        #124
65: invokestatic  #121
68: aastore
69: astore_1
70: new           #126
73: dup
74: aload_1
75: invokespecial #127
78: astore_2
79: aconst_null
80: astore_3
81: new           #84
84: dup
85: iconst_0
86: aload_3
87: invokespecial #85
90: astore        4
92: aload_2
93: aload         4
95: invokevirtual #128
98: istore        5
100: iconst_1
101: newarray       double
103: dup
104: iconst_0
105: dconst_0
106: dastore
107: astore        6
109: iconst_0
110: newarray       double
112: astore        7
114: aconst_null
115: astore        8
117: new           #61
120: dup
121: aload         7
123: aload         8
125: invokespecial #62
128: astore        9
130: new           #63
133: dup
134: aload         6
136: aload         7
138: invokespecial #64
141: astore        10
143: aload         10
145: invokevirtual #162
148: checkcast     #163
151: astore        11
153: iconst_1
154: newarray       double
156: dup
157: iconst_0
158: dconst_0
159: dastore
160: astore        12
162: iconst_0
163: newarray       double
165: astore        13
167: aconst_null
168: astore        14
170: new           #61
173: dup
174: aload         13
176: aload         14
178: invokespecial #62
181: astore        15
183: new           #63
186: dup
187: aload         12
189: aload         13
191: invokespecial #64
194: astore        16
196: aconst_null
197: astore        17
199: aload         12
201: aload         17
203: iconst_1
204: iconst_1
205: invokestatic  #65
208: istore        18
210: new           #61
213: dup
214: aload         11
216: aload         12
218: invokespecial #62
221: astore        19
223: aload         4
225: aload         11
227: ldc2_w        #228
230: invokevirtual #230
233: astore        20
235: ldc           #29
237: invokestatic  #14
240: goto          245
243: astore        20
245: aload_1
246: invokestatic  #70
249: new           #47
252: dup
253: invokespecial #48
256: ldc           #49
258: invokevirtual #50
261: iload         5
263: invokevirtual #75
266: ldc           #52
268: invokevirtual #50
271: iconst_0
272: invokevirtual #75
275: ldc           #49
277: invokevirtual #50
280: invokevirtual #53
283: iload         5
285: ifne          292
288: iconst_1
289: goto          293
292: iconst_0
293: invokestatic  #54
296: aload         6
298: invokestatic  #70
301: aload         6
303: invokestatic  #71
306: ldc           #72
308: invokestatic  #73
311: aload         7
313: invokestatic  #70
316: aload         7
318: invokestatic  #71
321: ldc           #74
323: invokestatic  #73
326: aload         11
328: invokestatic  #70
331: aload         11
333: invokestatic  #71
336: ldc           #72
338: invokestatic  #73
341: aload         12
343: invokestatic  #70
346: aload         12
348: invokestatic  #71
351: ldc           #72
353: invokestatic  #73
356: aload         13
358: invokestatic  #70
361: aload         13
363: invokestatic  #71
366: ldc           #74
368: invokestatic  #73
371: new           #47
374: dup
375: invokespecial #48
378: ldc           #49
380: invokevirtual #50
383: iload         18
385: invokevirtual #75
388: ldc           #52
390: invokevirtual #50
393: iconst_1
394: invokevirtual #75
397: ldc           #49
399: invokevirtual #50
402: invokevirtual #53
405: iload         18
407: iconst_1
408: if_icmpne     415
411: iconst_1
412: goto          416
415: iconst_0
416: invokestatic  #54
419: return
Exception table:
from    to  target type
223   240   243   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test052
Start line: 1076
End line: 1093
Method source code: 
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        double[] doubleArray4 = simplexOptimizer1.getLowerBound();
        double[] doubleArray5 = simplexOptimizer1.getLowerBound();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker6 = simplexOptimizer1.getConvergenceChecker();
        double[] doubleArray7 = simplexOptimizer1.getStartPoint();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertNull(pointValuePairConvergenceChecker6);
        org.junit.Assert.assertNull(doubleArray7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #231
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #8
29: dup
30: aload_1
31: invokespecial #9
34: astore_2
35: aload_2
36: invokevirtual #10
39: astore_3
40: aload_2
41: invokevirtual #11
44: astore        4
46: aload_2
47: invokevirtual #27
50: astore        5
52: aload_2
53: invokevirtual #27
56: astore        6
58: aload_2
59: invokevirtual #131
62: astore        7
64: aload_2
65: invokevirtual #56
68: astore        8
70: aload_3
71: invokestatic  #16
74: aload         4
76: invokestatic  #16
79: aload         5
81: invokestatic  #16
84: aload         6
86: invokestatic  #16
89: aload         7
91: invokestatic  #16
94: aload         8
96: invokestatic  #16
99: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test053
Start line: 1096
End line: 1102
Method source code: 
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer3 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer(1.5707963267948966d, 1.0019203836877835d, (double) (-1L));
        int int4 = levenbergMarquardtOptimizer3.getIterations();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #232
19: aastore
20: invokevirtual #7
23: pop
24: new           #32
27: dup
28: ldc2_w        #233
31: ldc2_w        #235
34: ldc2_w        #21
37: invokespecial #237
40: astore_1
41: aload_1
42: invokevirtual #211
45: istore_2
46: new           #47
49: dup
50: invokespecial #48
53: ldc           #49
55: invokevirtual #50
58: iload_2
59: invokevirtual #51
62: ldc           #52
64: invokevirtual #50
67: iconst_0
68: invokevirtual #51
71: ldc           #49
73: invokevirtual #50
76: invokevirtual #53
79: iload_2
80: ifne          87
83: iconst_1
84: goto          88
87: iconst_0
88: invokestatic  #54
91: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test054
Start line: 1105
End line: 1125
Method source code: 
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer(0.0d, pointVectorValuePairConvergenceChecker1, (double) 4L, 0.0d, (-0.5872139151569291d), 97.0d);
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex nelderMeadSimplex8 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex(6);
        int int9 = nelderMeadSimplex8.getDimension();
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex nelderMeadSimplex11 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex((int) (short) 100);
        org.apache.commons.math3.optim.MaxEval maxEval12 = org.apache.commons.math3.optim.MaxEval.unlimited();
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray13 = new org.apache.commons.math3.optim.OptimizationData[] { nelderMeadSimplex8, nelderMeadSimplex11, maxEval12 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair14 = levenbergMarquardtOptimizer6.optimize(optimizationDataArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6 + "'", int9 == 6);
        org.junit.Assert.assertNotNull(maxEval12);
        org.junit.Assert.assertNotNull(optimizationDataArray13);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #238
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #32
29: dup
30: dconst_0
31: aload_1
32: ldc2_w        #239
35: dconst_0
36: ldc2_w        #191
39: ldc2_w        #241
42: invokespecial #37
45: astore_2
46: new           #97
49: dup
50: bipush        6
52: invokespecial #98
55: astore_3
56: aload_3
57: invokevirtual #243
60: istore        4
62: new           #97
65: dup
66: bipush        100
68: invokespecial #98
71: astore        5
73: invokestatic  #60
76: astore        6
78: iconst_3
79: anewarray     #68
82: dup
83: iconst_0
84: aload_3
85: aastore
86: dup
87: iconst_1
88: aload         5
90: aastore
91: dup
92: iconst_2
93: aload         6
95: aastore
96: astore        7
98: aload_2
99: aload         7
101: invokevirtual #244
104: astore        8
106: ldc           #29
108: invokestatic  #14
111: goto          116
114: astore        8
116: new           #47
119: dup
120: invokespecial #48
123: ldc           #49
125: invokevirtual #50
128: iload         4
130: invokevirtual #51
133: ldc           #52
135: invokevirtual #50
138: bipush        6
140: invokevirtual #51
143: ldc           #49
145: invokevirtual #50
148: invokevirtual #53
151: iload         4
153: bipush        6
155: if_icmpne     162
158: iconst_1
159: goto          163
162: iconst_0
163: invokestatic  #54
166: aload         6
168: invokestatic  #70
171: aload         7
173: invokestatic  #70
176: return
Exception table:
from    to  target type
98   111   114   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test055
Start line: 1128
End line: 1136
Method source code: 
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer();
        int int1 = levenbergMarquardtOptimizer0.getEvaluations();
        int int2 = levenbergMarquardtOptimizer0.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2147483647 + "'", int2 == 2147483647);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #245
19: aastore
20: invokevirtual #7
23: pop
24: new           #32
27: dup
28: invokespecial #210
31: astore_1
32: aload_1
33: invokevirtual #185
36: istore_2
37: aload_1
38: invokevirtual #246
41: istore_3
42: new           #47
45: dup
46: invokespecial #48
49: ldc           #49
51: invokevirtual #50
54: iload_2
55: invokevirtual #51
58: ldc           #52
60: invokevirtual #50
63: iconst_0
64: invokevirtual #51
67: ldc           #49
69: invokevirtual #50
72: invokevirtual #53
75: iload_2
76: ifne          83
79: iconst_1
80: goto          84
83: iconst_0
84: invokestatic  #54
87: new           #47
90: dup
91: invokespecial #48
94: ldc           #49
96: invokevirtual #50
99: iload_3
100: invokevirtual #51
103: ldc           #52
105: invokevirtual #50
108: ldc           #141
110: invokevirtual #51
113: ldc           #49
115: invokevirtual #50
118: invokevirtual #53
121: iload_3
122: ldc           #141
124: if_icmpne     131
127: iconst_1
128: goto          132
131: iconst_0
132: invokestatic  #54
135: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test056
Start line: 1139
End line: 1143
Method source code: 
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer3 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((double) ' ', 0.0d, 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #247
19: aastore
20: invokevirtual #7
23: pop
24: new           #32
27: dup
28: ldc2_w        #79
31: dconst_0
32: dconst_0
33: invokespecial #237
36: astore_1
37: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test057
Start line: 1146
End line: 1166
Method source code: 
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        double[] doubleArray3 = gaussNewtonOptimizer2.getStartPoint();
        double[] doubleArray4 = gaussNewtonOptimizer2.getLowerBound();
        double[] doubleArray5 = gaussNewtonOptimizer2.getStartPoint();
        int int6 = gaussNewtonOptimizer2.getMaxEvaluations();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair7 = gaussNewtonOptimizer2.doOptimize();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #248
19: aastore
20: invokevirtual #7
23: pop
24: aconst_null
25: astore_1
26: new           #84
29: dup
30: iconst_0
31: aload_1
32: invokespecial #85
35: astore_2
36: aload_2
37: invokevirtual #108
40: astore_3
41: aload_2
42: invokevirtual #145
45: astore        4
47: aload_2
48: invokevirtual #108
51: astore        5
53: aload_2
54: invokevirtual #220
57: istore        6
59: aload_2
60: invokevirtual #86
63: astore        7
65: ldc           #13
67: invokestatic  #14
70: goto          75
73: astore        7
75: aload_3
76: invokestatic  #16
79: aload         4
81: invokestatic  #16
84: aload         5
86: invokestatic  #16
89: new           #47
92: dup
93: invokespecial #48
96: ldc           #49
98: invokevirtual #50
101: iload         6
103: invokevirtual #51
106: ldc           #52
108: invokevirtual #50
111: iconst_0
112: invokevirtual #51
115: ldc           #49
117: invokevirtual #50
120: invokevirtual #53
123: iload         6
125: ifne          132
128: iconst_1
129: goto          133
132: iconst_0
133: invokestatic  #54
136: return
Exception table:
from    to  target type
59    70    73   Class org/apache/commons/math3/exception/NullArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test058
Start line: 1169
End line: 1214
Method source code: 
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker simpleUnivariateValueChecker4 = new org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker((double) (-1.0f), 0.0d);
        org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer5 = new org.apache.commons.math3.optim.univariate.BrentOptimizer(0.125d, 9.99999999999998d, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair>) simpleUnivariateValueChecker4);
        int int6 = brentOptimizer5.getIterations();
        org.apache.commons.math3.exception.TooManyIterationsException tooManyIterationsException8 = new org.apache.commons.math3.exception.TooManyIterationsException((java.lang.Number) 4L);
        org.apache.commons.math3.exception.util.Localizable localizable9 = null;
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker10 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer11 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker10);
        double[] doubleArray12 = simplexOptimizer11.getUpperBound();
        double[] doubleArray13 = simplexOptimizer11.getStartPoint();
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction14 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction15 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction14);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction16 = objectiveFunction15.getObjectiveFunction();
        org.apache.commons.math3.optim.MaxEval maxEval17 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray19 = new double[] { 0.0f };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair22 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray20, doubleArray21);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair23 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray19, doubleArray20);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection24 = null;
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19, orderDirection24, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target28 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray19);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray29 = new org.apache.commons.math3.optim.OptimizationData[] { objectiveFunction15, maxEval17, target28 };
        simplexOptimizer11.parseOptimizationData(optimizationDataArray29);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) tooManyIterationsException8, localizable9, (java.lang.Object[]) optimizationDataArray29);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.univariate.UnivariatePointValuePair univariatePointValuePair32 = brentOptimizer5.optimize(optimizationDataArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertNull(multivariateFunction16);
        org.junit.Assert.assertNotNull(maxEval17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray29);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          24
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc           #249
19: aastore
20: invokevirtual #7
23: pop
24: new           #149
27: dup
28: ldc2_w        #21
31: dconst_0
32: invokespecial #150
35: astore_1
36: new           #18
39: dup
40: ldc2_w        #250
43: ldc2_w        #252
46: aload_1
47: invokespecial #156
50: astore_2
51: aload_2
52: invokevirtual #254
55: istore_3
56: new           #255
59: dup
60: ldc2_w        #256
63: invokestatic  #258
66: invokespecial #259
69: astore        4
71: aconst_null
72: astore        5
74: aconst_null
75: astore        6
77: new           #8
80: dup
81: aload         6
83: invokespecial #9
86: astore        7
88: aload         7
90: invokevirtual #10
93: astore        8
95: aload         7
97: invokevirtual #56
100: astore        9
102: aconst_null
103: astore        10
105: new           #57
108: dup
109: aload         10
111: invokespecial #58
114: astore        11
116: aload         11
118: invokevirtual #59
121: astore        12
123: invokestatic  #60
126: astore        13
128: iconst_1
129: newarray       double
131: dup
132: iconst_0
133: dconst_0
134: dastore
135: astore        14
137: iconst_0
138: newarray       double
140: astore        15
142: aconst_null
143: astore        16
145: new           #61
148: dup
149: aload         15
151: aload         16
153: invokespecial #62
156: astore        17
158: new           #63
161: dup
162: aload         14
164: aload         15
166: invokespecial #64
169: astore        18
171: aconst_null
172: astore        19
174: aload         14
176: aload         19
178: iconst_0
179: iconst_1
180: invokestatic  #65
183: istore        20
185: new           #66
188: dup
189: aload         14
191: invokespecial #67
194: astore        21
196: iconst_3
197: anewarray     #68
200: dup
201: iconst_0
202: aload         11
204: aastore
205: dup
206: iconst_1
207: aload         13
209: aastore
210: dup
211: iconst_2
212: aload         21
214: aastore
215: astore        22
217: aload         7
219: aload         22
221: invokevirtual #69
224: new           #260
227: dup
228: aload         4
230: aload         5
232: aload         22
234: checkcast     #261
237: invokespecial #262
240: astore        23
242: aload_2
243: aload         22
245: invokevirtual #263
248: astore        24
250: ldc           #29
252: invokestatic  #14
255: goto          260
258: astore        24
260: new           #47
263: dup
264: invokespecial #48
267: ldc           #49
269: invokevirtual #50
272: iload_3
273: invokevirtual #51
276: ldc           #52
278: invokevirtual #50
281: iconst_0
282: invokevirtual #51
285: ldc           #49
287: invokevirtual #50
290: invokevirtual #53
293: iload_3
294: ifne          301
297: iconst_1
298: goto          302
301: iconst_0
302: invokestatic  #54
305: aload         8
307: invokestatic  #16
310: aload         9
312: invokestatic  #16
315: aload         12
317: invokestatic  #16
320: aload         13
322: invokestatic  #70
325: aload         14
327: invokestatic  #70
330: aload         14
332: invokestatic  #71
335: ldc           #72
337: invokestatic  #73
340: aload         15
342: invokestatic  #70
345: aload         15
347: invokestatic  #71
350: ldc           #74
352: invokestatic  #73
355: new           #47
358: dup
359: invokespecial #48
362: ldc           #49
364: invokevirtual #50
367: iload         20
369: invokevirtual #75
372: ldc           #52
374: invokevirtual #50
377: iconst_1
378: invokevirtual #75
381: ldc           #49
383: invokevirtual #50
386: invokevirtual #53
389: iload         20
391: iconst_1
392: if_icmpne     399
395: iconst_1
396: goto          400
399: iconst_0
400: invokestatic  #54
403: aload         22
405: invokestatic  #70
408: return
Exception table:
from    to  target type
242   255   258   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test059
Start line: 1217
End line: 1234
Method source code: 
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        double[] doubleArray4 = simplexOptimizer1.getLowerBound();
        int int5 = simplexOptimizer1.getMaxIterations();
        int int6 = simplexOptimizer1.getEvaluations();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker7 = simplexOptimizer1.getConvergenceChecker();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(pointValuePairConvergenceChecker7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #264
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #10
40: astore_3
41: aload_2
42: invokevirtual #11
45: astore        4
47: aload_2
48: invokevirtual #27
51: astore        5
53: aload_2
54: invokevirtual #140
57: istore        6
59: aload_2
60: invokevirtual #265
63: istore        7
65: aload_2
66: invokevirtual #131
69: astore        8
71: aload_3
72: invokestatic  #16
75: aload         4
77: invokestatic  #16
80: aload         5
82: invokestatic  #16
85: new           #47
88: dup
89: invokespecial #48
92: ldc           #49
94: invokevirtual #50
97: iload         6
99: invokevirtual #51
102: ldc           #52
104: invokevirtual #50
107: ldc           #141
109: invokevirtual #51
112: ldc           #49
114: invokevirtual #50
117: invokevirtual #53
120: iload         6
122: ldc           #141
124: if_icmpne     131
127: iconst_1
128: goto          132
131: iconst_0
132: invokestatic  #54
135: new           #47
138: dup
139: invokespecial #48
142: ldc           #49
144: invokevirtual #50
147: iload         7
149: invokevirtual #51
152: ldc           #52
154: invokevirtual #50
157: iconst_0
158: invokevirtual #51
161: ldc           #49
163: invokevirtual #50
166: invokevirtual #53
169: iload         7
171: ifne          178
174: iconst_1
175: goto          179
178: iconst_0
179: invokestatic  #54
182: aload         8
184: invokestatic  #16
187: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test060
Start line: 1237
End line: 1241
Method source code: 
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer powellOptimizer2 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer(99.0d, 7.896296018268069E15d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #266
20: aastore
21: invokevirtual #7
24: pop
25: new           #40
28: dup
29: ldc2_w        #267
32: ldc2_w        #269
35: invokespecial #193
38: astore_1
39: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test061
Start line: 1244
End line: 1254
Method source code: 
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.Formula formula0 = null;
        org.apache.commons.math3.optim.SimpleValueChecker simpleValueChecker3 = new org.apache.commons.math3.optim.SimpleValueChecker((double) 2147483647, (double) (-1L));
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer nonLinearConjugateGradientOptimizer4 = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer(formula0, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair>) simpleValueChecker3);
        double[] doubleArray5 = nonLinearConjugateGradientOptimizer4.getStartPoint();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType6 = nonLinearConjugateGradientOptimizer4.getGoalType();
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertNull(goalType6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #271
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #88
30: dup
31: ldc2_w        #33
34: ldc2_w        #21
37: invokespecial #89
40: astore_2
41: new           #90
44: dup
45: aload_1
46: aload_2
47: invokespecial #91
50: astore_3
51: aload_3
52: invokevirtual #272
55: astore        4
57: aload_3
58: invokevirtual #273
61: astore        5
63: aload         4
65: invokestatic  #16
68: aload         5
70: invokestatic  #16
73: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test062
Start line: 1257
End line: 1265
Method source code: 
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer powellOptimizer4 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer((double) 10, (double) '#', (double) 1, (double) (byte) 100);
        int int5 = powellOptimizer4.getMaxIterations();
        double[] doubleArray6 = powellOptimizer4.getLowerBound();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNull(doubleArray6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #274
20: aastore
21: invokevirtual #7
24: pop
25: new           #40
28: dup
29: ldc2_w        #19
32: ldc2_w        #41
35: dconst_1
36: ldc2_w        #43
39: invokespecial #45
42: astore_1
43: aload_1
44: invokevirtual #275
47: istore_2
48: aload_1
49: invokevirtual #276
52: astore_3
53: new           #47
56: dup
57: invokespecial #48
60: ldc           #49
62: invokevirtual #50
65: iload_2
66: invokevirtual #51
69: ldc           #52
71: invokevirtual #50
74: ldc           #141
76: invokevirtual #51
79: ldc           #49
81: invokevirtual #50
84: invokevirtual #53
87: iload_2
88: ldc           #141
90: if_icmpne     97
93: iconst_1
94: goto          98
97: iconst_0
98: invokestatic  #54
101: aload_3
102: invokestatic  #16
105: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test063
Start line: 1268
End line: 1274
Method source code: 
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer5 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer(2.319776824715853d, 26.233044433154664d, (double) 100.00001f, (-0.5872139151569291d), (double) (-127));
        double[] doubleArray6 = levenbergMarquardtOptimizer5.getLowerBound();
        org.junit.Assert.assertNull(doubleArray6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #277
20: aastore
21: invokevirtual #7
24: pop
25: new           #32
28: dup
29: ldc2_w        #278
32: ldc2_w        #280
35: ldc2_w        #282
38: ldc2_w        #191
41: ldc2_w        #35
44: invokespecial #284
47: astore_1
48: aload_1
49: invokevirtual #285
52: astore_2
53: aload_2
54: invokestatic  #16
57: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test064
Start line: 1277
End line: 1287
Method source code: 
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer powellOptimizer4 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer(1.5461883904E11d, 0.0d, 3.43597383685E12d, 0.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: 0 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #286
20: aastore
21: invokevirtual #7
24: pop
25: new           #40
28: dup
29: ldc2_w        #287
32: dconst_0
33: ldc2_w        #174
36: dconst_0
37: invokespecial #45
40: astore_1
41: ldc_w         #289
44: invokestatic  #14
47: goto          51
50: astore_1
51: return
Exception table:
from    to  target type
25    47    50   Class org/apache/commons/math3/exception/NotStrictlyPositiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test065
Start line: 1290
End line: 1294
Method source code: 
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer5 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer(7.730941927072679E10d, (double) 5, Double.NEGATIVE_INFINITY, (double) (byte) 1, 3.435973846377535E12d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #290
20: aastore
21: invokevirtual #7
24: pop
25: new           #32
28: dup
29: ldc2_w        #291
32: ldc2_w        #293
35: ldc2_w        #154
38: dconst_1
39: ldc2_w        #295
42: invokespecial #284
45: astore_1
46: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test066
Start line: 1297
End line: 1303
Method source code: 
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer powellOptimizer2 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer((double) 10L, 4.493409235724848d);
        double[] doubleArray3 = powellOptimizer2.getLowerBound();
        org.junit.Assert.assertNull(doubleArray3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #297
20: aastore
21: invokevirtual #7
24: pop
25: new           #40
28: dup
29: ldc2_w        #19
32: ldc2_w        #298
35: invokespecial #193
38: astore_1
39: aload_1
40: invokevirtual #276
43: astore_2
44: aload_2
45: invokestatic  #16
48: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test067
Start line: 1306
End line: 1358
Method source code: 
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        int int4 = simplexOptimizer1.getMaxIterations();
        double[] doubleArray5 = simplexOptimizer1.getUpperBound();
        double[] doubleArray6 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.exception.util.Localizable localizable7 = null;
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker8 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer9 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker8);
        double[] doubleArray10 = simplexOptimizer9.getUpperBound();
        double[] doubleArray11 = simplexOptimizer9.getStartPoint();
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction12 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction13 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction12);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction14 = objectiveFunction13.getObjectiveFunction();
        org.apache.commons.math3.optim.MaxEval maxEval15 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray17 = new double[] { 0.0f };
        double[] doubleArray18 = new double[] {};
        double[] doubleArray19 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair20 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray18, doubleArray19);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair21 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray17, doubleArray18);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection22 = null;
        boolean boolean25 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray17, orderDirection22, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target26 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray17);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray27 = new org.apache.commons.math3.optim.OptimizationData[] { objectiveFunction13, maxEval15, target26 };
        simplexOptimizer9.parseOptimizationData(optimizationDataArray27);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException29 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable7, (java.lang.Object[]) optimizationDataArray27);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointValuePair pointValuePair30 = simplexOptimizer1.optimize(optimizationDataArray27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertNull(doubleArray6);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(multivariateFunction14);
        org.junit.Assert.assertNotNull(maxEval15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray27);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #300
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #10
40: astore_3
41: aload_2
42: invokevirtual #11
45: astore        4
47: aload_2
48: invokevirtual #140
51: istore        5
53: aload_2
54: invokevirtual #10
57: astore        6
59: aload_2
60: invokevirtual #10
63: astore        7
65: aconst_null
66: astore        8
68: aconst_null
69: astore        9
71: new           #8
74: dup
75: aload         9
77: invokespecial #9
80: astore        10
82: aload         10
84: invokevirtual #10
87: astore        11
89: aload         10
91: invokevirtual #56
94: astore        12
96: aconst_null
97: astore        13
99: new           #57
102: dup
103: aload         13
105: invokespecial #58
108: astore        14
110: aload         14
112: invokevirtual #59
115: astore        15
117: invokestatic  #60
120: astore        16
122: iconst_1
123: newarray       double
125: dup
126: iconst_0
127: dconst_0
128: dastore
129: astore        17
131: iconst_0
132: newarray       double
134: astore        18
136: aconst_null
137: astore        19
139: new           #61
142: dup
143: aload         18
145: aload         19
147: invokespecial #62
150: astore        20
152: new           #63
155: dup
156: aload         17
158: aload         18
160: invokespecial #64
163: astore        21
165: aconst_null
166: astore        22
168: aload         17
170: aload         22
172: iconst_0
173: iconst_1
174: invokestatic  #65
177: istore        23
179: new           #66
182: dup
183: aload         17
185: invokespecial #67
188: astore        24
190: iconst_3
191: anewarray     #68
194: dup
195: iconst_0
196: aload         14
198: aastore
199: dup
200: iconst_1
201: aload         16
203: aastore
204: dup
205: iconst_2
206: aload         24
208: aastore
209: astore        25
211: aload         10
213: aload         25
215: invokevirtual #69
218: new           #260
221: dup
222: aload         8
224: aload         25
226: checkcast     #261
229: invokespecial #301
232: astore        26
234: aload_2
235: aload         25
237: invokevirtual #28
240: astore        27
242: ldc           #13
244: invokestatic  #14
247: goto          252
250: astore        27
252: aload_3
253: invokestatic  #16
256: aload         4
258: invokestatic  #16
261: new           #47
264: dup
265: invokespecial #48
268: ldc           #49
270: invokevirtual #50
273: iload         5
275: invokevirtual #51
278: ldc           #52
280: invokevirtual #50
283: ldc           #141
285: invokevirtual #51
288: ldc           #49
290: invokevirtual #50
293: invokevirtual #53
296: iload         5
298: ldc           #141
300: if_icmpne     307
303: iconst_1
304: goto          308
307: iconst_0
308: invokestatic  #54
311: aload         6
313: invokestatic  #16
316: aload         7
318: invokestatic  #16
321: aload         11
323: invokestatic  #16
326: aload         12
328: invokestatic  #16
331: aload         15
333: invokestatic  #16
336: aload         16
338: invokestatic  #70
341: aload         17
343: invokestatic  #70
346: aload         17
348: invokestatic  #71
351: ldc           #72
353: invokestatic  #73
356: aload         18
358: invokestatic  #70
361: aload         18
363: invokestatic  #71
366: ldc           #74
368: invokestatic  #73
371: new           #47
374: dup
375: invokespecial #48
378: ldc           #49
380: invokevirtual #50
383: iload         23
385: invokevirtual #75
388: ldc           #52
390: invokevirtual #50
393: iconst_1
394: invokevirtual #75
397: ldc           #49
399: invokevirtual #50
402: invokevirtual #53
405: iload         23
407: iconst_1
408: if_icmpne     415
411: iconst_1
412: goto          416
415: iconst_0
416: invokestatic  #54
419: aload         25
421: invokestatic  #70
424: return
Exception table:
from    to  target type
234   247   250   Class org/apache/commons/math3/exception/NullArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test068
Start line: 1361
End line: 1373
Method source code: 
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer5 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((double) 0L, (double) 3, 1.0E-14d, (double) 10.0f, (-0.7615941559557649d));
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker6 = levenbergMarquardtOptimizer5.getConvergenceChecker();
        int int7 = levenbergMarquardtOptimizer5.getMaxEvaluations();
        double double8 = levenbergMarquardtOptimizer5.getChiSquare();
        double[] doubleArray9 = levenbergMarquardtOptimizer5.getStartPoint();
        org.junit.Assert.assertNull(pointVectorValuePairConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNull(doubleArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #302
20: aastore
21: invokevirtual #7
24: pop
25: new           #32
28: dup
29: dconst_0
30: ldc2_w        #303
33: ldc2_w        #305
36: ldc2_w        #19
39: ldc2_w        #307
42: invokespecial #284
45: astore_1
46: aload_1
47: invokevirtual #206
50: astore_2
51: aload_1
52: invokevirtual #309
55: istore_3
56: aload_1
57: invokevirtual #136
60: dstore        4
62: aload_1
63: invokevirtual #310
66: astore        6
68: aload_2
69: invokestatic  #16
72: new           #47
75: dup
76: invokespecial #48
79: ldc           #49
81: invokevirtual #50
84: iload_3
85: invokevirtual #51
88: ldc           #52
90: invokevirtual #50
93: iconst_0
94: invokevirtual #51
97: ldc           #49
99: invokevirtual #50
102: invokevirtual #53
105: iload_3
106: ifne          113
109: iconst_1
110: goto          114
113: iconst_0
114: invokestatic  #54
117: new           #47
120: dup
121: invokespecial #48
124: ldc           #49
126: invokevirtual #50
129: dload         4
131: invokevirtual #106
134: ldc           #52
136: invokevirtual #50
139: dconst_0
140: invokevirtual #106
143: ldc           #49
145: invokevirtual #50
148: invokevirtual #53
151: dload         4
153: dconst_0
154: dcmpl
155: ifne          162
158: iconst_1
159: goto          163
162: iconst_0
163: invokestatic  #54
166: aload         6
168: invokestatic  #16
171: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test069
Start line: 1376
End line: 1387
Method source code: 
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker simpleUnivariateValueChecker4 = new org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker((double) (-1.0f), 0.0d);
        org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer5 = new org.apache.commons.math3.optim.univariate.BrentOptimizer(0.125d, 9.99999999999998d, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair>) simpleUnivariateValueChecker4);
        int int6 = brentOptimizer5.getIterations();
        double double7 = brentOptimizer5.getMax();
        double double8 = brentOptimizer5.getMax();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #311
20: aastore
21: invokevirtual #7
24: pop
25: new           #149
28: dup
29: ldc2_w        #21
32: dconst_0
33: invokespecial #150
36: astore_1
37: new           #18
40: dup
41: ldc2_w        #250
44: ldc2_w        #252
47: aload_1
48: invokespecial #156
51: astore_2
52: aload_2
53: invokevirtual #254
56: istore_3
57: aload_2
58: invokevirtual #312
61: dstore        4
63: aload_2
64: invokevirtual #312
67: dstore        6
69: new           #47
72: dup
73: invokespecial #48
76: ldc           #49
78: invokevirtual #50
81: iload_3
82: invokevirtual #51
85: ldc           #52
87: invokevirtual #50
90: iconst_0
91: invokevirtual #51
94: ldc           #49
96: invokevirtual #50
99: invokevirtual #53
102: iload_3
103: ifne          110
106: iconst_1
107: goto          111
110: iconst_0
111: invokestatic  #54
114: new           #47
117: dup
118: invokespecial #48
121: ldc           #49
123: invokevirtual #50
126: dload         4
128: invokevirtual #106
131: ldc           #52
133: invokevirtual #50
136: dconst_0
137: invokevirtual #106
140: ldc           #49
142: invokevirtual #50
145: invokevirtual #53
148: dload         4
150: dconst_0
151: dcmpl
152: ifne          159
155: iconst_1
156: goto          160
159: iconst_0
160: invokestatic  #54
163: new           #47
166: dup
167: invokespecial #48
170: ldc           #49
172: invokevirtual #50
175: dload         6
177: invokevirtual #106
180: ldc           #52
182: invokevirtual #50
185: dconst_0
186: invokevirtual #106
189: ldc           #49
191: invokevirtual #50
194: invokevirtual #53
197: dload         6
199: dconst_0
200: dcmpl
201: ifne          208
204: iconst_1
205: goto          209
208: iconst_0
209: invokestatic  #54
212: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test070
Start line: 1390
End line: 1433
Method source code: 
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.Formula formula0 = null;
        org.apache.commons.math3.optim.SimpleValueChecker simpleValueChecker3 = new org.apache.commons.math3.optim.SimpleValueChecker((double) 2147483647, (double) (-1L));
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer nonLinearConjugateGradientOptimizer4 = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer(formula0, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair>) simpleValueChecker3);
        double[] doubleArray5 = nonLinearConjugateGradientOptimizer4.getStartPoint();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker6 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer7 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker6);
        double[] doubleArray8 = simplexOptimizer7.getUpperBound();
        double[] doubleArray9 = simplexOptimizer7.getStartPoint();
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction10 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction11 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction10);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction12 = objectiveFunction11.getObjectiveFunction();
        org.apache.commons.math3.optim.MaxEval maxEval13 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray15 = new double[] { 0.0f };
        double[] doubleArray16 = new double[] {};
        double[] doubleArray17 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair18 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray16, doubleArray17);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair19 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray15, doubleArray16);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection20 = null;
        boolean boolean23 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray15, orderDirection20, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target24 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray15);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray25 = new org.apache.commons.math3.optim.OptimizationData[] { objectiveFunction11, maxEval13, target24 };
        simplexOptimizer7.parseOptimizationData(optimizationDataArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointValuePair pointValuePair27 = nonLinearConjugateGradientOptimizer4.optimize(optimizationDataArray25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertNull(doubleArray8);
        org.junit.Assert.assertNull(doubleArray9);
        org.junit.Assert.assertNull(multivariateFunction12);
        org.junit.Assert.assertNotNull(maxEval13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray25);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #313
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #88
30: dup
31: ldc2_w        #33
34: ldc2_w        #21
37: invokespecial #89
40: astore_2
41: new           #90
44: dup
45: aload_1
46: aload_2
47: invokespecial #91
50: astore_3
51: aload_3
52: invokevirtual #272
55: astore        4
57: aconst_null
58: astore        5
60: new           #8
63: dup
64: aload         5
66: invokespecial #9
69: astore        6
71: aload         6
73: invokevirtual #10
76: astore        7
78: aload         6
80: invokevirtual #56
83: astore        8
85: aconst_null
86: astore        9
88: new           #57
91: dup
92: aload         9
94: invokespecial #58
97: astore        10
99: aload         10
101: invokevirtual #59
104: astore        11
106: invokestatic  #60
109: astore        12
111: iconst_1
112: newarray       double
114: dup
115: iconst_0
116: dconst_0
117: dastore
118: astore        13
120: iconst_0
121: newarray       double
123: astore        14
125: aconst_null
126: astore        15
128: new           #61
131: dup
132: aload         14
134: aload         15
136: invokespecial #62
139: astore        16
141: new           #63
144: dup
145: aload         13
147: aload         14
149: invokespecial #64
152: astore        17
154: aconst_null
155: astore        18
157: aload         13
159: aload         18
161: iconst_0
162: iconst_1
163: invokestatic  #65
166: istore        19
168: new           #66
171: dup
172: aload         13
174: invokespecial #67
177: astore        20
179: iconst_3
180: anewarray     #68
183: dup
184: iconst_0
185: aload         10
187: aastore
188: dup
189: iconst_1
190: aload         12
192: aastore
193: dup
194: iconst_2
195: aload         20
197: aastore
198: astore        21
200: aload         6
202: aload         21
204: invokevirtual #69
207: aload_3
208: aload         21
210: invokevirtual #92
213: astore        22
215: ldc           #29
217: invokestatic  #14
220: goto          225
223: astore        22
225: aload         4
227: invokestatic  #16
230: aload         7
232: invokestatic  #16
235: aload         8
237: invokestatic  #16
240: aload         11
242: invokestatic  #16
245: aload         12
247: invokestatic  #70
250: aload         13
252: invokestatic  #70
255: aload         13
257: invokestatic  #71
260: ldc           #72
262: invokestatic  #73
265: aload         14
267: invokestatic  #70
270: aload         14
272: invokestatic  #71
275: ldc           #74
277: invokestatic  #73
280: new           #47
283: dup
284: invokespecial #48
287: ldc           #49
289: invokevirtual #50
292: iload         19
294: invokevirtual #75
297: ldc           #52
299: invokevirtual #50
302: iconst_1
303: invokevirtual #75
306: ldc           #49
308: invokevirtual #50
311: invokevirtual #53
314: iload         19
316: iconst_1
317: if_icmpne     324
320: iconst_1
321: goto          325
324: iconst_0
325: invokestatic  #54
328: aload         21
330: invokestatic  #70
333: return
Exception table:
from    to  target type
207   220   223   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test071
Start line: 1436
End line: 1453
Method source code: 
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        int int4 = simplexOptimizer1.getMaxIterations();
        double[] doubleArray5 = simplexOptimizer1.getUpperBound();
        double[] doubleArray6 = simplexOptimizer1.getUpperBound();
        int int7 = simplexOptimizer1.getIterations();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #314
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #10
40: astore_3
41: aload_2
42: invokevirtual #11
45: astore        4
47: aload_2
48: invokevirtual #140
51: istore        5
53: aload_2
54: invokevirtual #10
57: astore        6
59: aload_2
60: invokevirtual #10
63: astore        7
65: aload_2
66: invokevirtual #159
69: istore        8
71: aload_3
72: invokestatic  #16
75: aload         4
77: invokestatic  #16
80: new           #47
83: dup
84: invokespecial #48
87: ldc           #49
89: invokevirtual #50
92: iload         5
94: invokevirtual #51
97: ldc           #52
99: invokevirtual #50
102: ldc           #141
104: invokevirtual #51
107: ldc           #49
109: invokevirtual #50
112: invokevirtual #53
115: iload         5
117: ldc           #141
119: if_icmpne     126
122: iconst_1
123: goto          127
126: iconst_0
127: invokestatic  #54
130: aload         6
132: invokestatic  #16
135: aload         7
137: invokestatic  #16
140: new           #47
143: dup
144: invokespecial #48
147: ldc           #49
149: invokevirtual #50
152: iload         8
154: invokevirtual #51
157: ldc           #52
159: invokevirtual #50
162: iconst_0
163: invokevirtual #51
166: ldc           #49
168: invokevirtual #50
171: invokevirtual #53
174: iload         8
176: ifne          183
179: iconst_1
180: goto          184
183: iconst_0
184: invokestatic  #54
187: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test072
Start line: 1456
End line: 1468
Method source code: 
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer();
        int int1 = levenbergMarquardtOptimizer0.getEvaluations();
        int int2 = levenbergMarquardtOptimizer0.getMaxEvaluations();
        double[] doubleArray3 = levenbergMarquardtOptimizer0.getLowerBound();
        int int4 = levenbergMarquardtOptimizer0.getEvaluations();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #315
20: aastore
21: invokevirtual #7
24: pop
25: new           #32
28: dup
29: invokespecial #210
32: astore_1
33: aload_1
34: invokevirtual #185
37: istore_2
38: aload_1
39: invokevirtual #309
42: istore_3
43: aload_1
44: invokevirtual #285
47: astore        4
49: aload_1
50: invokevirtual #185
53: istore        5
55: new           #47
58: dup
59: invokespecial #48
62: ldc           #49
64: invokevirtual #50
67: iload_2
68: invokevirtual #51
71: ldc           #52
73: invokevirtual #50
76: iconst_0
77: invokevirtual #51
80: ldc           #49
82: invokevirtual #50
85: invokevirtual #53
88: iload_2
89: ifne          96
92: iconst_1
93: goto          97
96: iconst_0
97: invokestatic  #54
100: new           #47
103: dup
104: invokespecial #48
107: ldc           #49
109: invokevirtual #50
112: iload_3
113: invokevirtual #51
116: ldc           #52
118: invokevirtual #50
121: iconst_0
122: invokevirtual #51
125: ldc           #49
127: invokevirtual #50
130: invokevirtual #53
133: iload_3
134: ifne          141
137: iconst_1
138: goto          142
141: iconst_0
142: invokestatic  #54
145: aload         4
147: invokestatic  #16
150: new           #47
153: dup
154: invokespecial #48
157: ldc           #49
159: invokevirtual #50
162: iload         5
164: invokevirtual #51
167: ldc           #52
169: invokevirtual #50
172: iconst_0
173: invokevirtual #51
176: ldc           #49
178: invokevirtual #50
181: invokevirtual #53
184: iload         5
186: ifne          193
189: iconst_1
190: goto          194
193: iconst_0
194: invokestatic  #54
197: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test073
Start line: 1471
End line: 1515
Method source code: 
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer5 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((double) 6, (double) '4', (double) (byte) 100, (double) (byte) -1, 0.0d);
        int int6 = levenbergMarquardtOptimizer5.getMaxEvaluations();
        org.apache.commons.math3.exception.TooManyIterationsException tooManyIterationsException8 = new org.apache.commons.math3.exception.TooManyIterationsException((java.lang.Number) 4L);
        org.apache.commons.math3.exception.util.Localizable localizable9 = null;
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker10 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer11 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker10);
        double[] doubleArray12 = simplexOptimizer11.getUpperBound();
        double[] doubleArray13 = simplexOptimizer11.getStartPoint();
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction14 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction15 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction14);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction16 = objectiveFunction15.getObjectiveFunction();
        org.apache.commons.math3.optim.MaxEval maxEval17 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray19 = new double[] { 0.0f };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair22 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray20, doubleArray21);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair23 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray19, doubleArray20);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection24 = null;
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19, orderDirection24, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target28 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray19);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray29 = new org.apache.commons.math3.optim.OptimizationData[] { objectiveFunction15, maxEval17, target28 };
        simplexOptimizer11.parseOptimizationData(optimizationDataArray29);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) tooManyIterationsException8, localizable9, (java.lang.Object[]) optimizationDataArray29);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair32 = levenbergMarquardtOptimizer5.optimize(optimizationDataArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertNull(multivariateFunction16);
        org.junit.Assert.assertNotNull(maxEval17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray29);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #316
20: aastore
21: invokevirtual #7
24: pop
25: new           #32
28: dup
29: ldc2_w        #224
32: ldc2_w        #317
35: ldc2_w        #43
38: ldc2_w        #21
41: dconst_0
42: invokespecial #284
45: astore_1
46: aload_1
47: invokevirtual #309
50: istore_2
51: new           #255
54: dup
55: ldc2_w        #256
58: invokestatic  #258
61: invokespecial #259
64: astore_3
65: aconst_null
66: astore        4
68: aconst_null
69: astore        5
71: new           #8
74: dup
75: aload         5
77: invokespecial #9
80: astore        6
82: aload         6
84: invokevirtual #10
87: astore        7
89: aload         6
91: invokevirtual #56
94: astore        8
96: aconst_null
97: astore        9
99: new           #57
102: dup
103: aload         9
105: invokespecial #58
108: astore        10
110: aload         10
112: invokevirtual #59
115: astore        11
117: invokestatic  #60
120: astore        12
122: iconst_1
123: newarray       double
125: dup
126: iconst_0
127: dconst_0
128: dastore
129: astore        13
131: iconst_0
132: newarray       double
134: astore        14
136: aconst_null
137: astore        15
139: new           #61
142: dup
143: aload         14
145: aload         15
147: invokespecial #62
150: astore        16
152: new           #63
155: dup
156: aload         13
158: aload         14
160: invokespecial #64
163: astore        17
165: aconst_null
166: astore        18
168: aload         13
170: aload         18
172: iconst_0
173: iconst_1
174: invokestatic  #65
177: istore        19
179: new           #66
182: dup
183: aload         13
185: invokespecial #67
188: astore        20
190: iconst_3
191: anewarray     #68
194: dup
195: iconst_0
196: aload         10
198: aastore
199: dup
200: iconst_1
201: aload         12
203: aastore
204: dup
205: iconst_2
206: aload         20
208: aastore
209: astore        21
211: aload         6
213: aload         21
215: invokevirtual #69
218: new           #260
221: dup
222: aload_3
223: aload         4
225: aload         21
227: checkcast     #261
230: invokespecial #262
233: astore        22
235: aload_1
236: aload         21
238: invokevirtual #244
241: astore        23
243: ldc           #29
245: invokestatic  #14
248: goto          253
251: astore        23
253: new           #47
256: dup
257: invokespecial #48
260: ldc           #49
262: invokevirtual #50
265: iload_2
266: invokevirtual #51
269: ldc           #52
271: invokevirtual #50
274: iconst_0
275: invokevirtual #51
278: ldc           #49
280: invokevirtual #50
283: invokevirtual #53
286: iload_2
287: ifne          294
290: iconst_1
291: goto          295
294: iconst_0
295: invokestatic  #54
298: aload         7
300: invokestatic  #16
303: aload         8
305: invokestatic  #16
308: aload         11
310: invokestatic  #16
313: aload         12
315: invokestatic  #70
318: aload         13
320: invokestatic  #70
323: aload         13
325: invokestatic  #71
328: ldc           #72
330: invokestatic  #73
333: aload         14
335: invokestatic  #70
338: aload         14
340: invokestatic  #71
343: ldc           #74
345: invokestatic  #73
348: new           #47
351: dup
352: invokespecial #48
355: ldc           #49
357: invokevirtual #50
360: iload         19
362: invokevirtual #75
365: ldc           #52
367: invokevirtual #50
370: iconst_1
371: invokevirtual #75
374: ldc           #49
376: invokevirtual #50
379: invokevirtual #53
382: iload         19
384: iconst_1
385: if_icmpne     392
388: iconst_1
389: goto          393
392: iconst_0
393: invokestatic  #54
396: aload         21
398: invokestatic  #70
401: return
Exception table:
from    to  target type
235   248   251   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test074
Start line: 1518
End line: 1529
Method source code: 
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker simpleUnivariateValueChecker4 = new org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker((double) (-1.0f), 0.0d);
        org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer5 = new org.apache.commons.math3.optim.univariate.BrentOptimizer(0.125d, 9.99999999999998d, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair>) simpleUnivariateValueChecker4);
        int int6 = brentOptimizer5.getIterations();
        double double7 = brentOptimizer5.getMax();
        double double8 = brentOptimizer5.getStartValue();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #319
20: aastore
21: invokevirtual #7
24: pop
25: new           #149
28: dup
29: ldc2_w        #21
32: dconst_0
33: invokespecial #150
36: astore_1
37: new           #18
40: dup
41: ldc2_w        #250
44: ldc2_w        #252
47: aload_1
48: invokespecial #156
51: astore_2
52: aload_2
53: invokevirtual #254
56: istore_3
57: aload_2
58: invokevirtual #312
61: dstore        4
63: aload_2
64: invokevirtual #320
67: dstore        6
69: new           #47
72: dup
73: invokespecial #48
76: ldc           #49
78: invokevirtual #50
81: iload_3
82: invokevirtual #51
85: ldc           #52
87: invokevirtual #50
90: iconst_0
91: invokevirtual #51
94: ldc           #49
96: invokevirtual #50
99: invokevirtual #53
102: iload_3
103: ifne          110
106: iconst_1
107: goto          111
110: iconst_0
111: invokestatic  #54
114: new           #47
117: dup
118: invokespecial #48
121: ldc           #49
123: invokevirtual #50
126: dload         4
128: invokevirtual #106
131: ldc           #52
133: invokevirtual #50
136: dconst_0
137: invokevirtual #106
140: ldc           #49
142: invokevirtual #50
145: invokevirtual #53
148: dload         4
150: dconst_0
151: dcmpl
152: ifne          159
155: iconst_1
156: goto          160
159: iconst_0
160: invokestatic  #54
163: new           #47
166: dup
167: invokespecial #48
170: ldc           #49
172: invokevirtual #50
175: dload         6
177: invokevirtual #106
180: ldc           #52
182: invokevirtual #50
185: dconst_0
186: invokevirtual #106
189: ldc           #49
191: invokevirtual #50
194: invokevirtual #53
197: dload         6
199: dconst_0
200: dcmpl
201: ifne          208
204: iconst_1
205: goto          209
208: iconst_0
209: invokestatic  #54
212: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test075
Start line: 1532
End line: 1542
Method source code: 
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optim.univariate.BrentOptimizer(0.0d, (double) 35.0f);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: 0 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #321
20: aastore
21: invokevirtual #7
24: pop
25: new           #18
28: dup
29: dconst_0
30: ldc2_w        #41
33: invokespecial #23
36: astore_1
37: ldc_w         #322
40: invokestatic  #14
43: goto          47
46: astore_1
47: return
Exception table:
from    to  target type
25    43    46   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test076
Start line: 1545
End line: 1552
Method source code: 
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.math3.optim.SimpleVectorValueChecker simpleVectorValueChecker3 = new org.apache.commons.math3.optim.SimpleVectorValueChecker(58.16189775112006d, 10.0d, (int) (byte) 10);
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer4 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair>) simpleVectorValueChecker3);
        double double5 = simpleVectorValueChecker3.getAbsoluteThreshold();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #323
20: aastore
21: invokevirtual #7
24: pop
25: new           #324
28: dup
29: ldc2_w        #325
32: ldc2_w        #19
35: bipush        10
37: invokespecial #327
40: astore_1
41: new           #32
44: dup
45: aload_1
46: invokespecial #135
49: astore_2
50: aload_1
51: invokevirtual #328
54: dstore_3
55: new           #47
58: dup
59: invokespecial #48
62: ldc           #49
64: invokevirtual #50
67: dload_3
68: invokevirtual #106
71: ldc           #52
73: invokevirtual #50
76: ldc2_w        #19
79: invokevirtual #106
82: ldc           #49
84: invokevirtual #50
87: invokevirtual #53
90: dload_3
91: ldc2_w        #19
94: dcmpl
95: ifne          102
98: iconst_1
99: goto          103
102: iconst_0
103: invokestatic  #54
106: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test077
Start line: 1555
End line: 1574
Method source code: 
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        double[] doubleArray4 = simplexOptimizer1.getLowerBound();
        double[] doubleArray5 = simplexOptimizer1.getLowerBound();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker6 = simplexOptimizer1.getConvergenceChecker();
        int int7 = simplexOptimizer1.getIterations();
        int int8 = simplexOptimizer1.getEvaluations();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertNull(pointValuePairConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #329
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #10
40: astore_3
41: aload_2
42: invokevirtual #11
45: astore        4
47: aload_2
48: invokevirtual #27
51: astore        5
53: aload_2
54: invokevirtual #27
57: astore        6
59: aload_2
60: invokevirtual #131
63: astore        7
65: aload_2
66: invokevirtual #159
69: istore        8
71: aload_2
72: invokevirtual #265
75: istore        9
77: aload_3
78: invokestatic  #16
81: aload         4
83: invokestatic  #16
86: aload         5
88: invokestatic  #16
91: aload         6
93: invokestatic  #16
96: aload         7
98: invokestatic  #16
101: new           #47
104: dup
105: invokespecial #48
108: ldc           #49
110: invokevirtual #50
113: iload         8
115: invokevirtual #51
118: ldc           #52
120: invokevirtual #50
123: iconst_0
124: invokevirtual #51
127: ldc           #49
129: invokevirtual #50
132: invokevirtual #53
135: iload         8
137: ifne          144
140: iconst_1
141: goto          145
144: iconst_0
145: invokestatic  #54
148: new           #47
151: dup
152: invokespecial #48
155: ldc           #49
157: invokevirtual #50
160: iload         9
162: invokevirtual #51
165: ldc           #52
167: invokevirtual #50
170: iconst_0
171: invokevirtual #51
174: ldc           #49
176: invokevirtual #50
179: invokevirtual #53
182: iload         9
184: ifne          191
187: iconst_1
188: goto          192
191: iconst_0
192: invokestatic  #54
195: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test078
Start line: 1577
End line: 1581
Method source code: 
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer5 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((double) '#', (double) 1473161751, (double) '4', (double) (-8.4226917E18f), (-1.5574077246549023d));
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #330
20: aastore
21: invokevirtual #7
24: pop
25: new           #32
28: dup
29: ldc2_w        #41
32: ldc2_w        #331
35: ldc2_w        #317
38: ldc2_w        #333
41: ldc2_w        #335
44: invokespecial #284
47: astore_1
48: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test079
Start line: 1584
End line: 1594
Method source code: 
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.Formula formula0 = null;
        org.apache.commons.math3.optim.SimpleValueChecker simpleValueChecker3 = new org.apache.commons.math3.optim.SimpleValueChecker((double) 2147483647, (double) (-1L));
        org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer nonLinearConjugateGradientOptimizer4 = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer(formula0, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair>) simpleValueChecker3);
        double[] doubleArray5 = nonLinearConjugateGradientOptimizer4.getStartPoint();
        int int6 = nonLinearConjugateGradientOptimizer4.getIterations();
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #337
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #88
30: dup
31: ldc2_w        #33
34: ldc2_w        #21
37: invokespecial #89
40: astore_2
41: new           #90
44: dup
45: aload_1
46: aload_2
47: invokespecial #91
50: astore_3
51: aload_3
52: invokevirtual #272
55: astore        4
57: aload_3
58: invokevirtual #338
61: istore        5
63: aload         4
65: invokestatic  #16
68: new           #47
71: dup
72: invokespecial #48
75: ldc           #49
77: invokevirtual #50
80: iload         5
82: invokevirtual #51
85: ldc           #52
87: invokevirtual #50
90: iconst_0
91: invokevirtual #51
94: ldc           #49
96: invokevirtual #50
99: invokevirtual #53
102: iload         5
104: ifne          111
107: iconst_1
108: goto          112
111: iconst_0
112: invokestatic  #54
115: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test080
Start line: 1597
End line: 1607
Method source code: 
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer powellOptimizer2 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer((double) (-51), 26.233044433154664d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -51 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #339
20: aastore
21: invokevirtual #7
24: pop
25: new           #40
28: dup
29: ldc2_w        #340
32: ldc2_w        #280
35: invokespecial #193
38: astore_1
39: ldc_w         #342
42: invokestatic  #14
45: goto          49
48: astore_1
49: return
Exception table:
from    to  target type
25    45    48   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test081
Start line: 1610
End line: 1631
Method source code: 
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer5 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer(9.860761315262648E-32d, 97.0d, 1.966463646E9d, 2.319776824715853d, 0.0d);
        double[] doubleArray7 = new double[] { 0.0f };
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair10 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray8, doubleArray9);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair11 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray7, doubleArray8);
        org.apache.commons.math3.optim.PointValuePair pointValuePair13 = new org.apache.commons.math3.optim.PointValuePair(doubleArray8, (double) 6);
        // The following exception was thrown during execution in test generation
        try {
            double[][] doubleArray15 = levenbergMarquardtOptimizer5.computeCovariances(doubleArray8, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #343
20: aastore
21: invokevirtual #7
24: pop
25: new           #32
28: dup
29: ldc2_w        #344
32: ldc2_w        #241
35: ldc2_w        #346
38: ldc2_w        #278
41: dconst_0
42: invokespecial #284
45: astore_1
46: iconst_1
47: newarray       double
49: dup
50: iconst_0
51: dconst_0
52: dastore
53: astore_2
54: iconst_0
55: newarray       double
57: astore_3
58: aconst_null
59: astore        4
61: new           #61
64: dup
65: aload_3
66: aload         4
68: invokespecial #62
71: astore        5
73: new           #63
76: dup
77: aload_2
78: aload_3
79: invokespecial #64
82: astore        6
84: new           #168
87: dup
88: aload_3
89: ldc2_w        #224
92: invokespecial #169
95: astore        7
97: aload_1
98: aload_3
99: dconst_0
100: invokevirtual #186
103: astore        8
105: ldc           #29
107: invokestatic  #14
110: goto          115
113: astore        8
115: aload_2
116: invokestatic  #70
119: aload_2
120: invokestatic  #71
123: ldc           #72
125: invokestatic  #73
128: aload_3
129: invokestatic  #70
132: aload_3
133: invokestatic  #71
136: ldc           #74
138: invokestatic  #73
141: return
Exception table:
from    to  target type
97   110   113   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test082
Start line: 1634
End line: 1642
Method source code: 
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.apache.commons.math3.optim.SimpleVectorValueChecker simpleVectorValueChecker5 = new org.apache.commons.math3.optim.SimpleVectorValueChecker((double) (-10.0f), 993.5494489615205d, 10);
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer6 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair>) simpleVectorValueChecker5);
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer7 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair>) simpleVectorValueChecker5);
        int int8 = gaussNewtonOptimizer7.getEvaluations();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #348
20: aastore
21: invokevirtual #7
24: pop
25: new           #324
28: dup
29: ldc2_w        #349
32: ldc2_w        #124
35: bipush        10
37: invokespecial #327
40: astore_1
41: new           #84
44: dup
45: iconst_0
46: aload_1
47: invokespecial #85
50: astore_2
51: new           #84
54: dup
55: iconst_0
56: aload_1
57: invokespecial #85
60: astore_3
61: aload_3
62: invokevirtual #96
65: istore        4
67: new           #47
70: dup
71: invokespecial #48
74: ldc           #49
76: invokevirtual #50
79: iload         4
81: invokevirtual #51
84: ldc           #52
86: invokevirtual #50
89: iconst_0
90: invokevirtual #51
93: ldc           #49
95: invokevirtual #50
98: invokevirtual #53
101: iload         4
103: ifne          110
106: iconst_1
107: goto          111
110: iconst_0
111: invokestatic  #54
114: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test083
Start line: 1645
End line: 1696
Method source code: 
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        double[] doubleArray3 = simplexOptimizer1.getLowerBound();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker4 = simplexOptimizer1.getConvergenceChecker();
        int int5 = simplexOptimizer1.getMaxEvaluations();
        org.apache.commons.math3.exception.TooManyIterationsException tooManyIterationsException7 = new org.apache.commons.math3.exception.TooManyIterationsException((java.lang.Number) 4L);
        org.apache.commons.math3.exception.util.Localizable localizable8 = null;
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker9 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer10 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker9);
        double[] doubleArray11 = simplexOptimizer10.getUpperBound();
        double[] doubleArray12 = simplexOptimizer10.getStartPoint();
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction13 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction14 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction13);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction15 = objectiveFunction14.getObjectiveFunction();
        org.apache.commons.math3.optim.MaxEval maxEval16 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray18 = new double[] { 0.0f };
        double[] doubleArray19 = new double[] {};
        double[] doubleArray20 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair21 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray19, doubleArray20);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair22 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray18, doubleArray19);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection23 = null;
        boolean boolean26 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray18, orderDirection23, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target27 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray18);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray28 = new org.apache.commons.math3.optim.OptimizationData[] { objectiveFunction14, maxEval16, target27 };
        simplexOptimizer10.parseOptimizationData(optimizationDataArray28);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException30 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) tooManyIterationsException7, localizable8, (java.lang.Object[]) optimizationDataArray28);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointValuePair pointValuePair31 = simplexOptimizer1.optimize(optimizationDataArray28);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(pointValuePairConvergenceChecker4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNull(multivariateFunction15);
        org.junit.Assert.assertNotNull(maxEval16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray28);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #351
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #10
40: astore_3
41: aload_2
42: invokevirtual #27
45: astore        4
47: aload_2
48: invokevirtual #131
51: astore        5
53: aload_2
54: invokevirtual #94
57: istore        6
59: new           #255
62: dup
63: ldc2_w        #256
66: invokestatic  #258
69: invokespecial #259
72: astore        7
74: aconst_null
75: astore        8
77: aconst_null
78: astore        9
80: new           #8
83: dup
84: aload         9
86: invokespecial #9
89: astore        10
91: aload         10
93: invokevirtual #10
96: astore        11
98: aload         10
100: invokevirtual #56
103: astore        12
105: aconst_null
106: astore        13
108: new           #57
111: dup
112: aload         13
114: invokespecial #58
117: astore        14
119: aload         14
121: invokevirtual #59
124: astore        15
126: invokestatic  #60
129: astore        16
131: iconst_1
132: newarray       double
134: dup
135: iconst_0
136: dconst_0
137: dastore
138: astore        17
140: iconst_0
141: newarray       double
143: astore        18
145: aconst_null
146: astore        19
148: new           #61
151: dup
152: aload         18
154: aload         19
156: invokespecial #62
159: astore        20
161: new           #63
164: dup
165: aload         17
167: aload         18
169: invokespecial #64
172: astore        21
174: aconst_null
175: astore        22
177: aload         17
179: aload         22
181: iconst_0
182: iconst_1
183: invokestatic  #65
186: istore        23
188: new           #66
191: dup
192: aload         17
194: invokespecial #67
197: astore        24
199: iconst_3
200: anewarray     #68
203: dup
204: iconst_0
205: aload         14
207: aastore
208: dup
209: iconst_1
210: aload         16
212: aastore
213: dup
214: iconst_2
215: aload         24
217: aastore
218: astore        25
220: aload         10
222: aload         25
224: invokevirtual #69
227: new           #260
230: dup
231: aload         7
233: aload         8
235: aload         25
237: checkcast     #261
240: invokespecial #262
243: astore        26
245: aload_2
246: aload         25
248: invokevirtual #28
251: astore        27
253: ldc           #13
255: invokestatic  #14
258: goto          263
261: astore        27
263: aload_3
264: invokestatic  #16
267: aload         4
269: invokestatic  #16
272: aload         5
274: invokestatic  #16
277: new           #47
280: dup
281: invokespecial #48
284: ldc           #49
286: invokevirtual #50
289: iload         6
291: invokevirtual #51
294: ldc           #52
296: invokevirtual #50
299: iconst_0
300: invokevirtual #51
303: ldc           #49
305: invokevirtual #50
308: invokevirtual #53
311: iload         6
313: ifne          320
316: iconst_1
317: goto          321
320: iconst_0
321: invokestatic  #54
324: aload         11
326: invokestatic  #16
329: aload         12
331: invokestatic  #16
334: aload         15
336: invokestatic  #16
339: aload         16
341: invokestatic  #70
344: aload         17
346: invokestatic  #70
349: aload         17
351: invokestatic  #71
354: ldc           #72
356: invokestatic  #73
359: aload         18
361: invokestatic  #70
364: aload         18
366: invokestatic  #71
369: ldc           #74
371: invokestatic  #73
374: new           #47
377: dup
378: invokespecial #48
381: ldc           #49
383: invokevirtual #50
386: iload         23
388: invokevirtual #75
391: ldc           #52
393: invokevirtual #50
396: iconst_1
397: invokevirtual #75
400: ldc           #49
402: invokevirtual #50
405: invokevirtual #53
408: iload         23
410: iconst_1
411: if_icmpne     418
414: iconst_1
415: goto          419
418: iconst_0
419: invokestatic  #54
422: aload         25
424: invokestatic  #70
427: return
Exception table:
from    to  target type
245   258   261   Class org/apache/commons/math3/exception/NullArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test084
Start line: 1699
End line: 1710
Method source code: 
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker simpleUnivariateValueChecker4 = new org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker((double) (-1.0f), 0.0d);
        org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer5 = new org.apache.commons.math3.optim.univariate.BrentOptimizer(0.125d, 9.99999999999998d, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair>) simpleUnivariateValueChecker4);
        double double6 = brentOptimizer5.getMin();
        double double7 = brentOptimizer5.getStartValue();
        double double8 = brentOptimizer5.getMax();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #352
20: aastore
21: invokevirtual #7
24: pop
25: new           #149
28: dup
29: ldc2_w        #21
32: dconst_0
33: invokespecial #150
36: astore_1
37: new           #18
40: dup
41: ldc2_w        #250
44: ldc2_w        #252
47: aload_1
48: invokespecial #156
51: astore_2
52: aload_2
53: invokevirtual #353
56: dstore_3
57: aload_2
58: invokevirtual #320
61: dstore        5
63: aload_2
64: invokevirtual #312
67: dstore        7
69: new           #47
72: dup
73: invokespecial #48
76: ldc           #49
78: invokevirtual #50
81: dload_3
82: invokevirtual #106
85: ldc           #52
87: invokevirtual #50
90: dconst_0
91: invokevirtual #106
94: ldc           #49
96: invokevirtual #50
99: invokevirtual #53
102: dload_3
103: dconst_0
104: dcmpl
105: ifne          112
108: iconst_1
109: goto          113
112: iconst_0
113: invokestatic  #54
116: new           #47
119: dup
120: invokespecial #48
123: ldc           #49
125: invokevirtual #50
128: dload         5
130: invokevirtual #106
133: ldc           #52
135: invokevirtual #50
138: dconst_0
139: invokevirtual #106
142: ldc           #49
144: invokevirtual #50
147: invokevirtual #53
150: dload         5
152: dconst_0
153: dcmpl
154: ifne          161
157: iconst_1
158: goto          162
161: iconst_0
162: invokestatic  #54
165: new           #47
168: dup
169: invokespecial #48
172: ldc           #49
174: invokevirtual #50
177: dload         7
179: invokevirtual #106
182: ldc           #52
184: invokevirtual #50
187: dconst_0
188: invokevirtual #106
191: ldc           #49
193: invokevirtual #50
196: invokevirtual #53
199: dload         7
201: dconst_0
202: dcmpl
203: ifne          210
206: iconst_1
207: goto          211
210: iconst_0
211: invokestatic  #54
214: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test085
Start line: 1713
End line: 1726
Method source code: 
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        double[] doubleArray3 = simplexOptimizer1.getLowerBound();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker4 = simplexOptimizer1.getConvergenceChecker();
        int int5 = simplexOptimizer1.getIterations();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(pointValuePairConvergenceChecker4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #354
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #10
40: astore_3
41: aload_2
42: invokevirtual #27
45: astore        4
47: aload_2
48: invokevirtual #131
51: astore        5
53: aload_2
54: invokevirtual #159
57: istore        6
59: aload_3
60: invokestatic  #16
63: aload         4
65: invokestatic  #16
68: aload         5
70: invokestatic  #16
73: new           #47
76: dup
77: invokespecial #48
80: ldc           #49
82: invokevirtual #50
85: iload         6
87: invokevirtual #51
90: ldc           #52
92: invokevirtual #50
95: iconst_0
96: invokevirtual #51
99: ldc           #49
101: invokevirtual #50
104: invokevirtual #53
107: iload         6
109: ifne          116
112: iconst_1
113: goto          117
116: iconst_0
117: invokestatic  #54
120: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test086
Start line: 1729
End line: 1736
Method source code: 
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer(0.0d, pointVectorValuePairConvergenceChecker1, (double) 4L, 0.0d, (-0.5872139151569291d), 97.0d);
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker7 = levenbergMarquardtOptimizer6.getConvergenceChecker();
        org.junit.Assert.assertNull(pointVectorValuePairConvergenceChecker7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #355
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #32
30: dup
31: dconst_0
32: aload_1
33: ldc2_w        #239
36: dconst_0
37: ldc2_w        #191
40: ldc2_w        #241
43: invokespecial #37
46: astore_2
47: aload_2
48: invokevirtual #206
51: astore_3
52: aload_3
53: invokestatic  #16
56: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test087
Start line: 1739
End line: 1760
Method source code: 
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((double) (byte) -1, pointVectorValuePairConvergenceChecker1, 2.147483647E9d, (double) (-127), (-1.0d), 0.0d);
        double[] doubleArray7 = levenbergMarquardtOptimizer6.getUpperBound();
        org.apache.commons.math3.optim.SimpleBounds simpleBounds9 = org.apache.commons.math3.optim.SimpleBounds.unbounded((int) 'a');
        double[] doubleArray10 = simpleBounds9.getLower();
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray11 = new org.apache.commons.math3.optim.OptimizationData[] { simpleBounds9 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair12 = levenbergMarquardtOptimizer6.optimize(optimizationDataArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray7);
        org.junit.Assert.assertNotNull(simpleBounds9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity, -Infinity]");
        org.junit.Assert.assertNotNull(optimizationDataArray11);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #356
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #32
30: dup
31: ldc2_w        #21
34: aload_1
35: ldc2_w        #33
38: ldc2_w        #35
41: ldc2_w        #21
44: dconst_0
45: invokespecial #37
48: astore_2
49: aload_2
50: invokevirtual #357
53: astore_3
54: bipush        97
56: invokestatic  #161
59: astore        4
61: aload         4
63: invokevirtual #214
66: astore        5
68: iconst_1
69: anewarray     #68
72: dup
73: iconst_0
74: aload         4
76: aastore
77: astore        6
79: aload_2
80: aload         6
82: invokevirtual #244
85: astore        7
87: ldc           #29
89: invokestatic  #14
92: goto          97
95: astore        7
97: aload_3
98: invokestatic  #16
101: aload         4
103: invokestatic  #70
106: aload         5
108: invokestatic  #70
111: aload         5
113: invokestatic  #71
116: ldc_w         #358
119: invokestatic  #73
122: aload         6
124: invokestatic  #70
127: return
Exception table:
from    to  target type
79    92    95   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test088
Start line: 1763
End line: 1772
Method source code: 
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((double) (byte) -1, pointVectorValuePairConvergenceChecker1, 2.147483647E9d, (double) (-127), (-1.0d), 0.0d);
        double[] doubleArray7 = levenbergMarquardtOptimizer6.getUpperBound();
        int int8 = levenbergMarquardtOptimizer6.getEvaluations();
        org.junit.Assert.assertNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #359
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #32
30: dup
31: ldc2_w        #21
34: aload_1
35: ldc2_w        #33
38: ldc2_w        #35
41: ldc2_w        #21
44: dconst_0
45: invokespecial #37
48: astore_2
49: aload_2
50: invokevirtual #357
53: astore_3
54: aload_2
55: invokevirtual #185
58: istore        4
60: aload_3
61: invokestatic  #16
64: new           #47
67: dup
68: invokespecial #48
71: ldc           #49
73: invokevirtual #50
76: iload         4
78: invokevirtual #51
81: ldc           #52
83: invokevirtual #50
86: iconst_0
87: invokevirtual #51
90: ldc           #49
92: invokevirtual #50
95: invokevirtual #53
98: iload         4
100: ifne          107
103: iconst_1
104: goto          108
107: iconst_0
108: invokestatic  #54
111: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test089
Start line: 1775
End line: 1789
Method source code: 
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((double) (byte) -1, pointVectorValuePairConvergenceChecker1, 2.147483647E9d, (double) (-127), (-1.0d), 0.0d);
        double[] doubleArray7 = levenbergMarquardtOptimizer6.getUpperBound();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = levenbergMarquardtOptimizer6.getRMS();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #360
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #32
30: dup
31: ldc2_w        #21
34: aload_1
35: ldc2_w        #33
38: ldc2_w        #35
41: ldc2_w        #21
44: dconst_0
45: invokespecial #37
48: astore_2
49: aload_2
50: invokevirtual #357
53: astore_3
54: aload_2
55: invokevirtual #138
58: dstore        4
60: ldc           #29
62: invokestatic  #14
65: goto          70
68: astore        4
70: aload_3
71: invokestatic  #16
74: return
Exception table:
from    to  target type
54    65    68   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test090
Start line: 1792
End line: 1930
Method source code: 
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        double[] doubleArray3 = gaussNewtonOptimizer2.getStartPoint();
        double[] doubleArray4 = gaussNewtonOptimizer2.getLowerBound();
        double double5 = gaussNewtonOptimizer2.getChiSquare();
        double[] doubleArray7 = new double[] { 0.0f };
        double[] doubleArray8 = new double[] {};
        double[] doubleArray9 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair10 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray8, doubleArray9);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair11 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray7, doubleArray8);
        double[] doubleArray12 = doubleArrayPair11.getKey();
        double[] doubleArray14 = new double[] { 0.0f };
        double[] doubleArray15 = new double[] {};
        double[] doubleArray16 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair17 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray15, doubleArray16);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair18 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray14, doubleArray15);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection19 = null;
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray14, orderDirection19, true, true);
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair23 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray12, doubleArray14);
        org.apache.commons.math3.optim.nonlinear.vector.Target target24 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray14);
        double[] doubleArray25 = target24.getTarget();
        org.apache.commons.math3.optim.univariate.BracketFinder bracketFinder26 = new org.apache.commons.math3.optim.univariate.BracketFinder();
        int int27 = bracketFinder26.getEvaluations();
        double double28 = bracketFinder26.getFMid();
        org.apache.commons.math3.analysis.function.Sinc sinc30 = new org.apache.commons.math3.analysis.function.Sinc(false);
        org.apache.commons.math3.analysis.UnivariateFunction univariateFunction31 = sinc30.derivative();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType32 = org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE;
        bracketFinder26.search(univariateFunction31, goalType32, (double) (-100), (double) 199);
        double double36 = bracketFinder26.getFHi();
        org.apache.commons.math3.analysis.function.Sinc sinc38 = new org.apache.commons.math3.analysis.function.Sinc(false);
        org.apache.commons.math3.analysis.UnivariateFunction univariateFunction39 = sinc38.derivative();
        org.apache.commons.math3.optim.univariate.BracketFinder bracketFinder40 = new org.apache.commons.math3.optim.univariate.BracketFinder();
        int int41 = bracketFinder40.getEvaluations();
        double double42 = bracketFinder40.getLo();
        double double43 = bracketFinder40.getFMid();
        double double44 = bracketFinder40.getFMid();
        double double45 = bracketFinder40.getFLo();
        org.apache.commons.math3.analysis.function.Sinc sinc47 = new org.apache.commons.math3.analysis.function.Sinc(true);
        org.apache.commons.math3.optim.univariate.BracketFinder bracketFinder48 = new org.apache.commons.math3.optim.univariate.BracketFinder();
        int int49 = bracketFinder48.getEvaluations();
        double double50 = bracketFinder48.getFMid();
        org.apache.commons.math3.analysis.function.Sinc sinc52 = new org.apache.commons.math3.analysis.function.Sinc(false);
        org.apache.commons.math3.analysis.UnivariateFunction univariateFunction53 = sinc52.derivative();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType54 = org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE;
        bracketFinder48.search(univariateFunction53, goalType54, (double) (-100), (double) 199);
        bracketFinder40.search((org.apache.commons.math3.analysis.UnivariateFunction) sinc47, goalType54, 0.0d, 0.9587823055625926d);
        bracketFinder26.search((org.apache.commons.math3.analysis.UnivariateFunction) sinc38, goalType54, (double) (-1L), 1.8171205928321397d);
        double[] doubleArray65 = new double[] { 0.0f };
        double[] doubleArray66 = new double[] {};
        double[] doubleArray67 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair68 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray66, doubleArray67);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair69 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray65, doubleArray66);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection70 = null;
        boolean boolean73 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray65, orderDirection70, false, true);
        org.apache.commons.math3.linear.RealVector realVector74 = org.apache.commons.math3.linear.MatrixUtils.createRealVector(doubleArray65);
        double[] doubleArray76 = new double[] { 0.0f };
        double[] doubleArray77 = new double[] {};
        double[] doubleArray78 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair79 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray77, doubleArray78);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair80 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray76, doubleArray77);
        double[] doubleArray81 = doubleArrayPair80.getKey();
        double[] doubleArray83 = new double[] { 0.0f };
        double[] doubleArray84 = new double[] {};
        double[] doubleArray85 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair86 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray84, doubleArray85);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair87 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray83, doubleArray84);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection88 = null;
        boolean boolean91 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray83, orderDirection88, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target92 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray83);
        boolean boolean93 = org.apache.commons.math3.util.MathArrays.equalsIncludingNaN(doubleArray81, doubleArray83);
        double[] doubleArray94 = org.apache.commons.math3.util.MathArrays.ebeSubtract(doubleArray65, doubleArray81);
        org.apache.commons.math3.linear.DiagonalMatrix diagonalMatrix95 = new org.apache.commons.math3.linear.DiagonalMatrix(doubleArray65);
        org.apache.commons.math3.optim.nonlinear.vector.Weight weight96 = new org.apache.commons.math3.optim.nonlinear.vector.Weight(doubleArray65);
        org.apache.commons.math3.linear.RealMatrix realMatrix97 = weight96.getWeight();
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray98 = new org.apache.commons.math3.optim.OptimizationData[] { target24, goalType54, weight96 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair99 = gaussNewtonOptimizer2.optimize(optimizationDataArray98);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(univariateFunction31);
        org.junit.Assert.assertTrue("'" + goalType32 + "' != '" + org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE + "'", goalType32.equals(org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-0.0023477113697986103d) + "'", double36 == (-0.0023477113697986103d));
        org.junit.Assert.assertNotNull(univariateFunction39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.0d + "'", double42 == 0.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 0.0d + "'", double44 == 0.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(univariateFunction53);
        org.junit.Assert.assertTrue("'" + goalType54 + "' != '" + org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE + "'", goalType54.equals(org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[]");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[0.0]");
        org.junit.Assert.assertNotNull(realMatrix97);
        org.junit.Assert.assertNotNull(optimizationDataArray98);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #361
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #84
30: dup
31: iconst_0
32: aload_1
33: invokespecial #85
36: astore_2
37: aload_2
38: invokevirtual #108
41: astore_3
42: aload_2
43: invokevirtual #145
46: astore        4
48: aload_2
49: invokevirtual #201
52: dstore        5
54: iconst_1
55: newarray       double
57: dup
58: iconst_0
59: dconst_0
60: dastore
61: astore        7
63: iconst_0
64: newarray       double
66: astore        8
68: aconst_null
69: astore        9
71: new           #61
74: dup
75: aload         8
77: aload         9
79: invokespecial #62
82: astore        10
84: new           #63
87: dup
88: aload         7
90: aload         8
92: invokespecial #64
95: astore        11
97: aload         11
99: invokevirtual #162
102: checkcast     #163
105: astore        12
107: iconst_1
108: newarray       double
110: dup
111: iconst_0
112: dconst_0
113: dastore
114: astore        13
116: iconst_0
117: newarray       double
119: astore        14
121: aconst_null
122: astore        15
124: new           #61
127: dup
128: aload         14
130: aload         15
132: invokespecial #62
135: astore        16
137: new           #63
140: dup
141: aload         13
143: aload         14
145: invokespecial #64
148: astore        17
150: aconst_null
151: astore        18
153: aload         13
155: aload         18
157: iconst_1
158: iconst_1
159: invokestatic  #65
162: istore        19
164: new           #61
167: dup
168: aload         12
170: aload         13
172: invokespecial #62
175: astore        20
177: new           #66
180: dup
181: aload         13
183: invokespecial #67
186: astore        21
188: aload         21
190: invokevirtual #362
193: astore        22
195: new           #363
198: dup
199: invokespecial #364
202: astore        23
204: aload         23
206: invokevirtual #365
209: istore        24
211: aload         23
213: invokevirtual #366
216: dstore        25
218: new           #367
221: dup
222: iconst_0
223: invokespecial #368
226: astore        27
228: aload         27
230: invokevirtual #369
233: astore        28
235: getstatic     #164
238: astore        29
240: aload         23
242: aload         28
244: aload         29
246: ldc2_w        #77
249: ldc2_w        #370
252: invokevirtual #372
255: aload         23
257: invokevirtual #373
260: dstore        30
262: new           #367
265: dup
266: iconst_0
267: invokespecial #368
270: astore        32
272: aload         32
274: invokevirtual #369
277: astore        33
279: new           #363
282: dup
283: invokespecial #364
286: astore        34
288: aload         34
290: invokevirtual #365
293: istore        35
295: aload         34
297: invokevirtual #374
300: dstore        36
302: aload         34
304: invokevirtual #366
307: dstore        38
309: aload         34
311: invokevirtual #366
314: dstore        40
316: aload         34
318: invokevirtual #375
321: dstore        42
323: new           #367
326: dup
327: iconst_1
328: invokespecial #368
331: astore        44
333: new           #363
336: dup
337: invokespecial #364
340: astore        45
342: aload         45
344: invokevirtual #365
347: istore        46
349: aload         45
351: invokevirtual #366
354: dstore        47
356: new           #367
359: dup
360: iconst_0
361: invokespecial #368
364: astore        49
366: aload         49
368: invokevirtual #369
371: astore        50
373: getstatic     #164
376: astore        51
378: aload         45
380: aload         50
382: aload         51
384: ldc2_w        #77
387: ldc2_w        #370
390: invokevirtual #372
393: aload         34
395: aload         44
397: aload         51
399: dconst_0
400: ldc2_w        #376
403: invokevirtual #372
406: aload         23
408: aload         32
410: aload         51
412: ldc2_w        #21
415: ldc2_w        #378
418: invokevirtual #372
421: iconst_1
422: newarray       double
424: dup
425: iconst_0
426: dconst_0
427: dastore
428: astore        52
430: iconst_0
431: newarray       double
433: astore        53
435: aconst_null
436: astore        54
438: new           #61
441: dup
442: aload         53
444: aload         54
446: invokespecial #62
449: astore        55
451: new           #63
454: dup
455: aload         52
457: aload         53
459: invokespecial #64
462: astore        56
464: aconst_null
465: astore        57
467: aload         52
469: aload         57
471: iconst_0
472: iconst_1
473: invokestatic  #65
476: istore        58
478: aload         52
480: invokestatic  #380
483: astore        59
485: iconst_1
486: newarray       double
488: dup
489: iconst_0
490: dconst_0
491: dastore
492: astore        60
494: iconst_0
495: newarray       double
497: astore        61
499: aconst_null
500: astore        62
502: new           #61
505: dup
506: aload         61
508: aload         62
510: invokespecial #62
513: astore        63
515: new           #63
518: dup
519: aload         60
521: aload         61
523: invokespecial #64
526: astore        64
528: aload         64
530: invokevirtual #162
533: checkcast     #163
536: astore        65
538: iconst_1
539: newarray       double
541: dup
542: iconst_0
543: dconst_0
544: dastore
545: astore        66
547: iconst_0
548: newarray       double
550: astore        67
552: aconst_null
553: astore        68
555: new           #61
558: dup
559: aload         67
561: aload         68
563: invokespecial #62
566: astore        69
568: new           #63
571: dup
572: aload         66
574: aload         67
576: invokespecial #64
579: astore        70
581: aconst_null
582: astore        71
584: aload         66
586: aload         71
588: iconst_0
589: iconst_1
590: invokestatic  #65
593: istore        72
595: new           #66
598: dup
599: aload         66
601: invokespecial #67
604: astore        73
606: aload         65
608: aload         66
610: invokestatic  #381
613: istore        74
615: aload         52
617: aload         65
619: invokestatic  #382
622: astore        75
624: new           #383
627: dup
628: aload         52
630: invokespecial #384
633: astore        76
635: new           #385
638: dup
639: aload         52
641: invokespecial #386
644: astore        77
646: aload         77
648: invokevirtual #387
651: astore        78
653: iconst_3
654: anewarray     #68
657: dup
658: iconst_0
659: aload         21
661: aastore
662: dup
663: iconst_1
664: aload         51
666: aastore
667: dup
668: iconst_2
669: aload         77
671: aastore
672: astore        79
674: aload_2
675: aload         79
677: invokevirtual #103
680: astore        80
682: ldc           #13
684: invokestatic  #14
687: goto          692
690: astore        80
692: aload_3
693: invokestatic  #16
696: aload         4
698: invokestatic  #16
701: new           #47
704: dup
705: invokespecial #48
708: ldc           #49
710: invokevirtual #50
713: dload         5
715: invokevirtual #106
718: ldc           #52
720: invokevirtual #50
723: dconst_0
724: invokevirtual #106
727: ldc           #49
729: invokevirtual #50
732: invokevirtual #53
735: dload         5
737: dconst_0
738: dcmpl
739: ifne          746
742: iconst_1
743: goto          747
746: iconst_0
747: invokestatic  #54
750: aload         7
752: invokestatic  #70
755: aload         7
757: invokestatic  #71
760: ldc           #72
762: invokestatic  #73
765: aload         8
767: invokestatic  #70
770: aload         8
772: invokestatic  #71
775: ldc           #74
777: invokestatic  #73
780: aload         12
782: invokestatic  #70
785: aload         12
787: invokestatic  #71
790: ldc           #72
792: invokestatic  #73
795: aload         13
797: invokestatic  #70
800: aload         13
802: invokestatic  #71
805: ldc           #72
807: invokestatic  #73
810: aload         14
812: invokestatic  #70
815: aload         14
817: invokestatic  #71
820: ldc           #74
822: invokestatic  #73
825: new           #47
828: dup
829: invokespecial #48
832: ldc           #49
834: invokevirtual #50
837: iload         19
839: invokevirtual #75
842: ldc           #52
844: invokevirtual #50
847: iconst_1
848: invokevirtual #75
851: ldc           #49
853: invokevirtual #50
856: invokevirtual #53
859: iload         19
861: iconst_1
862: if_icmpne     869
865: iconst_1
866: goto          870
869: iconst_0
870: invokestatic  #54
873: aload         22
875: invokestatic  #70
878: aload         22
880: invokestatic  #71
883: ldc           #72
885: invokestatic  #73
888: new           #47
891: dup
892: invokespecial #48
895: ldc           #49
897: invokevirtual #50
900: iload         24
902: invokevirtual #51
905: ldc           #52
907: invokevirtual #50
910: iconst_0
911: invokevirtual #51
914: ldc           #49
916: invokevirtual #50
919: invokevirtual #53
922: iload         24
924: ifne          931
927: iconst_1
928: goto          932
931: iconst_0
932: invokestatic  #54
935: new           #47
938: dup
939: invokespecial #48
942: ldc           #49
944: invokevirtual #50
947: dload         25
949: invokevirtual #106
952: ldc           #52
954: invokevirtual #50
957: dconst_0
958: invokevirtual #106
961: ldc           #49
963: invokevirtual #50
966: invokevirtual #53
969: dload         25
971: dconst_0
972: dcmpl
973: ifne          980
976: iconst_1
977: goto          981
980: iconst_0
981: invokestatic  #54
984: aload         28
986: invokestatic  #70
989: new           #47
992: dup
993: invokespecial #48
996: ldc           #49
998: invokevirtual #50
1001: aload         29
1003: invokevirtual #176
1006: ldc           #52
1008: invokevirtual #50
1011: getstatic     #164
1014: invokevirtual #176
1017: ldc           #49
1019: invokevirtual #50
1022: invokevirtual #53
1025: aload         29
1027: getstatic     #164
1030: invokevirtual #177
1033: invokestatic  #54
1036: new           #47
1039: dup
1040: invokespecial #48
1043: ldc           #49
1045: invokevirtual #50
1048: dload         30
1050: invokevirtual #106
1053: ldc           #52
1055: invokevirtual #50
1058: ldc2_w        #388
1061: invokevirtual #106
1064: ldc           #49
1066: invokevirtual #50
1069: invokevirtual #53
1072: dload         30
1074: ldc2_w        #388
1077: dcmpl
1078: ifne          1085
1081: iconst_1
1082: goto          1086
1085: iconst_0
1086: invokestatic  #54
1089: aload         33
1091: invokestatic  #70
1094: new           #47
1097: dup
1098: invokespecial #48
1101: ldc           #49
1103: invokevirtual #50
1106: iload         35
1108: invokevirtual #51
1111: ldc           #52
1113: invokevirtual #50
1116: iconst_0
1117: invokevirtual #51
1120: ldc           #49
1122: invokevirtual #50
1125: invokevirtual #53
1128: iload         35
1130: ifne          1137
1133: iconst_1
1134: goto          1138
1137: iconst_0
1138: invokestatic  #54
1141: new           #47
1144: dup
1145: invokespecial #48
1148: ldc           #49
1150: invokevirtual #50
1153: dload         36
1155: invokevirtual #106
1158: ldc           #52
1160: invokevirtual #50
1163: dconst_0
1164: invokevirtual #106
1167: ldc           #49
1169: invokevirtual #50
1172: invokevirtual #53
1175: dload         36
1177: dconst_0
1178: dcmpl
1179: ifne          1186
1182: iconst_1
1183: goto          1187
1186: iconst_0
1187: invokestatic  #54
1190: new           #47
1193: dup
1194: invokespecial #48
1197: ldc           #49
1199: invokevirtual #50
1202: dload         38
1204: invokevirtual #106
1207: ldc           #52
1209: invokevirtual #50
1212: dconst_0
1213: invokevirtual #106
1216: ldc           #49
1218: invokevirtual #50
1221: invokevirtual #53
1224: dload         38
1226: dconst_0
1227: dcmpl
1228: ifne          1235
1231: iconst_1
1232: goto          1236
1235: iconst_0
1236: invokestatic  #54
1239: new           #47
1242: dup
1243: invokespecial #48
1246: ldc           #49
1248: invokevirtual #50
1251: dload         40
1253: invokevirtual #106
1256: ldc           #52
1258: invokevirtual #50
1261: dconst_0
1262: invokevirtual #106
1265: ldc           #49
1267: invokevirtual #50
1270: invokevirtual #53
1273: dload         40
1275: dconst_0
1276: dcmpl
1277: ifne          1284
1280: iconst_1
1281: goto          1285
1284: iconst_0
1285: invokestatic  #54
1288: new           #47
1291: dup
1292: invokespecial #48
1295: ldc           #49
1297: invokevirtual #50
1300: dload         42
1302: invokevirtual #106
1305: ldc           #52
1307: invokevirtual #50
1310: dconst_0
1311: invokevirtual #106
1314: ldc           #49
1316: invokevirtual #50
1319: invokevirtual #53
1322: dload         42
1324: dconst_0
1325: dcmpl
1326: ifne          1333
1329: iconst_1
1330: goto          1334
1333: iconst_0
1334: invokestatic  #54
1337: new           #47
1340: dup
1341: invokespecial #48
1344: ldc           #49
1346: invokevirtual #50
1349: iload         46
1351: invokevirtual #51
1354: ldc           #52
1356: invokevirtual #50
1359: iconst_0
1360: invokevirtual #51
1363: ldc           #49
1365: invokevirtual #50
1368: invokevirtual #53
1371: iload         46
1373: ifne          1380
1376: iconst_1
1377: goto          1381
1380: iconst_0
1381: invokestatic  #54
1384: new           #47
1387: dup
1388: invokespecial #48
1391: ldc           #49
1393: invokevirtual #50
1396: dload         47
1398: invokevirtual #106
1401: ldc           #52
1403: invokevirtual #50
1406: dconst_0
1407: invokevirtual #106
1410: ldc           #49
1412: invokevirtual #50
1415: invokevirtual #53
1418: dload         47
1420: dconst_0
1421: dcmpl
1422: ifne          1429
1425: iconst_1
1426: goto          1430
1429: iconst_0
1430: invokestatic  #54
1433: aload         50
1435: invokestatic  #70
1438: new           #47
1441: dup
1442: invokespecial #48
1445: ldc           #49
1447: invokevirtual #50
1450: aload         51
1452: invokevirtual #176
1455: ldc           #52
1457: invokevirtual #50
1460: getstatic     #164
1463: invokevirtual #176
1466: ldc           #49
1468: invokevirtual #50
1471: invokevirtual #53
1474: aload         51
1476: getstatic     #164
1479: invokevirtual #177
1482: invokestatic  #54
1485: aload         52
1487: invokestatic  #70
1490: aload         52
1492: invokestatic  #71
1495: ldc           #72
1497: invokestatic  #73
1500: aload         53
1502: invokestatic  #70
1505: aload         53
1507: invokestatic  #71
1510: ldc           #74
1512: invokestatic  #73
1515: new           #47
1518: dup
1519: invokespecial #48
1522: ldc           #49
1524: invokevirtual #50
1527: iload         58
1529: invokevirtual #75
1532: ldc           #52
1534: invokevirtual #50
1537: iconst_1
1538: invokevirtual #75
1541: ldc           #49
1543: invokevirtual #50
1546: invokevirtual #53
1549: iload         58
1551: iconst_1
1552: if_icmpne     1559
1555: iconst_1
1556: goto          1560
1559: iconst_0
1560: invokestatic  #54
1563: aload         59
1565: invokestatic  #70
1568: aload         60
1570: invokestatic  #70
1573: aload         60
1575: invokestatic  #71
1578: ldc           #72
1580: invokestatic  #73
1583: aload         61
1585: invokestatic  #70
1588: aload         61
1590: invokestatic  #71
1593: ldc           #74
1595: invokestatic  #73
1598: aload         65
1600: invokestatic  #70
1603: aload         65
1605: invokestatic  #71
1608: ldc           #72
1610: invokestatic  #73
1613: aload         66
1615: invokestatic  #70
1618: aload         66
1620: invokestatic  #71
1623: ldc           #72
1625: invokestatic  #73
1628: aload         67
1630: invokestatic  #70
1633: aload         67
1635: invokestatic  #71
1638: ldc           #74
1640: invokestatic  #73
1643: new           #47
1646: dup
1647: invokespecial #48
1650: ldc           #49
1652: invokevirtual #50
1655: iload         72
1657: invokevirtual #75
1660: ldc           #52
1662: invokevirtual #50
1665: iconst_1
1666: invokevirtual #75
1669: ldc           #49
1671: invokevirtual #50
1674: invokevirtual #53
1677: iload         72
1679: iconst_1
1680: if_icmpne     1687
1683: iconst_1
1684: goto          1688
1687: iconst_0
1688: invokestatic  #54
1691: new           #47
1694: dup
1695: invokespecial #48
1698: ldc           #49
1700: invokevirtual #50
1703: iload         74
1705: invokevirtual #75
1708: ldc           #52
1710: invokevirtual #50
1713: iconst_1
1714: invokevirtual #75
1717: ldc           #49
1719: invokevirtual #50
1722: invokevirtual #53
1725: iload         74
1727: iconst_1
1728: if_icmpne     1735
1731: iconst_1
1732: goto          1736
1735: iconst_0
1736: invokestatic  #54
1739: aload         75
1741: invokestatic  #70
1744: aload         75
1746: invokestatic  #71
1749: ldc           #72
1751: invokestatic  #73
1754: aload         78
1756: invokestatic  #70
1759: aload         79
1761: invokestatic  #70
1764: return
Exception table:
from    to  target type
674   687   690   Class org/apache/commons/math3/exception/NullArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test091
Start line: 1933
End line: 1939
Method source code: 
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.apache.commons.math3.optim.SimpleVectorValueChecker simpleVectorValueChecker3 = new org.apache.commons.math3.optim.SimpleVectorValueChecker(58.16189775112006d, 10.0d, (int) (byte) 10);
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer4 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair>) simpleVectorValueChecker3);
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer5 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair>) simpleVectorValueChecker3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #390
20: aastore
21: invokevirtual #7
24: pop
25: new           #324
28: dup
29: ldc2_w        #325
32: ldc2_w        #19
35: bipush        10
37: invokespecial #327
40: astore_1
41: new           #32
44: dup
45: aload_1
46: invokespecial #135
49: astore_2
50: new           #32
53: dup
54: aload_1
55: invokespecial #135
58: astore_3
59: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test092
Start line: 1942
End line: 1947
Method source code: 
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.apache.commons.math3.optim.SimpleVectorValueChecker simpleVectorValueChecker4 = new org.apache.commons.math3.optim.SimpleVectorValueChecker((double) 32, 0.0d, (int) 'a');
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer9 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer(1.4901161193847656E-8d, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair>) simpleVectorValueChecker4, 99.0d, 31.0d, 7.896296018367611E13d, 1.5707963267948966d);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #391
20: aastore
21: invokevirtual #7
24: pop
25: new           #324
28: dup
29: ldc2_w        #79
32: dconst_0
33: bipush        97
35: invokespecial #327
38: astore_1
39: new           #32
42: dup
43: ldc2_w        #392
46: aload_1
47: ldc2_w        #267
50: ldc2_w        #394
53: ldc2_w        #228
56: ldc2_w        #233
59: invokespecial #37
62: astore_2
63: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test093
Start line: 1950
End line: 2005
Method source code: 
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((double) (byte) -1, pointVectorValuePairConvergenceChecker1, 2.147483647E9d, (double) (-127), (-1.0d), 0.0d);
        double double7 = levenbergMarquardtOptimizer6.getChiSquare();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker8 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer9 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker8);
        double[] doubleArray10 = simplexOptimizer9.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType11 = simplexOptimizer9.getGoalType();
        double[] doubleArray12 = simplexOptimizer9.getLowerBound();
        double[] doubleArray13 = simplexOptimizer9.getLowerBound();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker14 = simplexOptimizer9.getConvergenceChecker();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker15 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer16 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker15);
        double[] doubleArray17 = simplexOptimizer16.getUpperBound();
        double[] doubleArray18 = simplexOptimizer16.getStartPoint();
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction19 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction20 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction19);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction21 = objectiveFunction20.getObjectiveFunction();
        org.apache.commons.math3.optim.MaxEval maxEval22 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray24 = new double[] { 0.0f };
        double[] doubleArray25 = new double[] {};
        double[] doubleArray26 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair27 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray25, doubleArray26);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair28 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray24, doubleArray25);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection29 = null;
        boolean boolean32 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray24, orderDirection29, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target33 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray24);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray34 = new org.apache.commons.math3.optim.OptimizationData[] { objectiveFunction20, maxEval22, target33 };
        simplexOptimizer16.parseOptimizationData(optimizationDataArray34);
        simplexOptimizer9.parseOptimizationData(optimizationDataArray34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair37 = levenbergMarquardtOptimizer6.optimize(optimizationDataArray34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNull(goalType11);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertNull(pointValuePairConvergenceChecker14);
        org.junit.Assert.assertNull(doubleArray17);
        org.junit.Assert.assertNull(doubleArray18);
        org.junit.Assert.assertNull(multivariateFunction21);
        org.junit.Assert.assertNotNull(maxEval22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray34);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #396
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #32
30: dup
31: ldc2_w        #21
34: aload_1
35: ldc2_w        #33
38: ldc2_w        #35
41: ldc2_w        #21
44: dconst_0
45: invokespecial #37
48: astore_2
49: aload_2
50: invokevirtual #136
53: dstore_3
54: aconst_null
55: astore        5
57: new           #8
60: dup
61: aload         5
63: invokespecial #9
66: astore        6
68: aload         6
70: invokevirtual #10
73: astore        7
75: aload         6
77: invokevirtual #11
80: astore        8
82: aload         6
84: invokevirtual #27
87: astore        9
89: aload         6
91: invokevirtual #27
94: astore        10
96: aload         6
98: invokevirtual #131
101: astore        11
103: aconst_null
104: astore        12
106: new           #8
109: dup
110: aload         12
112: invokespecial #9
115: astore        13
117: aload         13
119: invokevirtual #10
122: astore        14
124: aload         13
126: invokevirtual #56
129: astore        15
131: aconst_null
132: astore        16
134: new           #57
137: dup
138: aload         16
140: invokespecial #58
143: astore        17
145: aload         17
147: invokevirtual #59
150: astore        18
152: invokestatic  #60
155: astore        19
157: iconst_1
158: newarray       double
160: dup
161: iconst_0
162: dconst_0
163: dastore
164: astore        20
166: iconst_0
167: newarray       double
169: astore        21
171: aconst_null
172: astore        22
174: new           #61
177: dup
178: aload         21
180: aload         22
182: invokespecial #62
185: astore        23
187: new           #63
190: dup
191: aload         20
193: aload         21
195: invokespecial #64
198: astore        24
200: aconst_null
201: astore        25
203: aload         20
205: aload         25
207: iconst_0
208: iconst_1
209: invokestatic  #65
212: istore        26
214: new           #66
217: dup
218: aload         20
220: invokespecial #67
223: astore        27
225: iconst_3
226: anewarray     #68
229: dup
230: iconst_0
231: aload         17
233: aastore
234: dup
235: iconst_1
236: aload         19
238: aastore
239: dup
240: iconst_2
241: aload         27
243: aastore
244: astore        28
246: aload         13
248: aload         28
250: invokevirtual #69
253: aload         6
255: aload         28
257: invokevirtual #69
260: aload_2
261: aload         28
263: invokevirtual #244
266: astore        29
268: ldc           #29
270: invokestatic  #14
273: goto          278
276: astore        29
278: new           #47
281: dup
282: invokespecial #48
285: ldc           #49
287: invokevirtual #50
290: dload_3
291: invokevirtual #106
294: ldc           #52
296: invokevirtual #50
299: dconst_0
300: invokevirtual #106
303: ldc           #49
305: invokevirtual #50
308: invokevirtual #53
311: dload_3
312: dconst_0
313: dcmpl
314: ifne          321
317: iconst_1
318: goto          322
321: iconst_0
322: invokestatic  #54
325: aload         7
327: invokestatic  #16
330: aload         8
332: invokestatic  #16
335: aload         9
337: invokestatic  #16
340: aload         10
342: invokestatic  #16
345: aload         11
347: invokestatic  #16
350: aload         14
352: invokestatic  #16
355: aload         15
357: invokestatic  #16
360: aload         18
362: invokestatic  #16
365: aload         19
367: invokestatic  #70
370: aload         20
372: invokestatic  #70
375: aload         20
377: invokestatic  #71
380: ldc           #72
382: invokestatic  #73
385: aload         21
387: invokestatic  #70
390: aload         21
392: invokestatic  #71
395: ldc           #74
397: invokestatic  #73
400: new           #47
403: dup
404: invokespecial #48
407: ldc           #49
409: invokevirtual #50
412: iload         26
414: invokevirtual #75
417: ldc           #52
419: invokevirtual #50
422: iconst_1
423: invokevirtual #75
426: ldc           #49
428: invokevirtual #50
431: invokevirtual #53
434: iload         26
436: iconst_1
437: if_icmpne     444
440: iconst_1
441: goto          445
444: iconst_0
445: invokestatic  #54
448: aload         28
450: invokestatic  #70
453: return
Exception table:
from    to  target type
260   273   276   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test094
Start line: 2008
End line: 2026
Method source code: 
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        double[] doubleArray3 = gaussNewtonOptimizer2.getStartPoint();
        double[] doubleArray4 = gaussNewtonOptimizer2.getLowerBound();
        double[] doubleArray5 = gaussNewtonOptimizer2.getLowerBound();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair6 = gaussNewtonOptimizer2.doOptimize();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #397
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #84
30: dup
31: iconst_0
32: aload_1
33: invokespecial #85
36: astore_2
37: aload_2
38: invokevirtual #108
41: astore_3
42: aload_2
43: invokevirtual #145
46: astore        4
48: aload_2
49: invokevirtual #145
52: astore        5
54: aload_2
55: invokevirtual #86
58: astore        6
60: ldc           #13
62: invokestatic  #14
65: goto          70
68: astore        6
70: aload_3
71: invokestatic  #16
74: aload         4
76: invokestatic  #16
79: aload         5
81: invokestatic  #16
84: return
Exception table:
from    to  target type
54    65    68   Class org/apache/commons/math3/exception/NullArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test095
Start line: 2029
End line: 2038
Method source code: 
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer(pointVectorValuePairConvergenceChecker0);
        int int2 = levenbergMarquardtOptimizer1.getEvaluations();
        int int3 = levenbergMarquardtOptimizer1.getIterations();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #398
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #32
30: dup
31: aload_1
32: invokespecial #135
35: astore_2
36: aload_2
37: invokevirtual #185
40: istore_3
41: aload_2
42: invokevirtual #211
45: istore        4
47: new           #47
50: dup
51: invokespecial #48
54: ldc           #49
56: invokevirtual #50
59: iload_3
60: invokevirtual #51
63: ldc           #52
65: invokevirtual #50
68: iconst_0
69: invokevirtual #51
72: ldc           #49
74: invokevirtual #50
77: invokevirtual #53
80: iload_3
81: ifne          88
84: iconst_1
85: goto          89
88: iconst_0
89: invokestatic  #54
92: new           #47
95: dup
96: invokespecial #48
99: ldc           #49
101: invokevirtual #50
104: iload         4
106: invokevirtual #51
109: ldc           #52
111: invokevirtual #50
114: iconst_0
115: invokevirtual #51
118: ldc           #49
120: invokevirtual #50
123: invokevirtual #53
126: iload         4
128: ifne          135
131: iconst_1
132: goto          136
135: iconst_0
136: invokestatic  #54
139: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test096
Start line: 2041
End line: 2056
Method source code: 
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker simpleUnivariateValueChecker4 = new org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker((double) (-1.0f), 0.0d);
        org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer5 = new org.apache.commons.math3.optim.univariate.BrentOptimizer(0.125d, 9.99999999999998d, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair>) simpleUnivariateValueChecker4);
        double double6 = brentOptimizer5.getMin();
        int int7 = brentOptimizer5.getMaxEvaluations();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType8 = brentOptimizer5.getGoalType();
        int int9 = brentOptimizer5.getIterations();
        int int10 = brentOptimizer5.getIterations();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(goalType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #399
20: aastore
21: invokevirtual #7
24: pop
25: new           #149
28: dup
29: ldc2_w        #21
32: dconst_0
33: invokespecial #150
36: astore_1
37: new           #18
40: dup
41: ldc2_w        #250
44: ldc2_w        #252
47: aload_1
48: invokespecial #156
51: astore_2
52: aload_2
53: invokevirtual #353
56: dstore_3
57: aload_2
58: invokevirtual #400
61: istore        5
63: aload_2
64: invokevirtual #401
67: astore        6
69: aload_2
70: invokevirtual #254
73: istore        7
75: aload_2
76: invokevirtual #254
79: istore        8
81: new           #47
84: dup
85: invokespecial #48
88: ldc           #49
90: invokevirtual #50
93: dload_3
94: invokevirtual #106
97: ldc           #52
99: invokevirtual #50
102: dconst_0
103: invokevirtual #106
106: ldc           #49
108: invokevirtual #50
111: invokevirtual #53
114: dload_3
115: dconst_0
116: dcmpl
117: ifne          124
120: iconst_1
121: goto          125
124: iconst_0
125: invokestatic  #54
128: new           #47
131: dup
132: invokespecial #48
135: ldc           #49
137: invokevirtual #50
140: iload         5
142: invokevirtual #51
145: ldc           #52
147: invokevirtual #50
150: iconst_0
151: invokevirtual #51
154: ldc           #49
156: invokevirtual #50
159: invokevirtual #53
162: iload         5
164: ifne          171
167: iconst_1
168: goto          172
171: iconst_0
172: invokestatic  #54
175: aload         6
177: invokestatic  #16
180: new           #47
183: dup
184: invokespecial #48
187: ldc           #49
189: invokevirtual #50
192: iload         7
194: invokevirtual #51
197: ldc           #52
199: invokevirtual #50
202: iconst_0
203: invokevirtual #51
206: ldc           #49
208: invokevirtual #50
211: invokevirtual #53
214: iload         7
216: ifne          223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #54
227: new           #47
230: dup
231: invokespecial #48
234: ldc           #49
236: invokevirtual #50
239: iload         8
241: invokevirtual #51
244: ldc           #52
246: invokevirtual #50
249: iconst_0
250: invokevirtual #51
253: ldc           #49
255: invokevirtual #50
258: invokevirtual #53
261: iload         8
263: ifne          270
266: iconst_1
267: goto          271
270: iconst_0
271: invokestatic  #54
274: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test097
Start line: 2059
End line: 2070
Method source code: 
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker simpleUnivariateValueChecker4 = new org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker(6.283185307179586d, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer5 = new org.apache.commons.math3.optim.univariate.BrentOptimizer((double) '4', (-2.0d), (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair>) simpleUnivariateValueChecker4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NotStrictlyPositiveException; message: -2 is smaller than, or equal to, the minimum (0)");
        } catch (org.apache.commons.math3.exception.NotStrictlyPositiveException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #402
20: aastore
21: invokevirtual #7
24: pop
25: new           #149
28: dup
29: ldc2_w        #403
32: dconst_0
33: invokespecial #150
36: astore_1
37: new           #18
40: dup
41: ldc2_w        #317
44: ldc2_w        #405
47: aload_1
48: invokespecial #156
51: astore_2
52: ldc_w         #407
55: invokestatic  #14
58: goto          62
61: astore_2
62: return
Exception table:
from    to  target type
37    58    61   Class org/apache/commons/math3/exception/NotStrictlyPositiveException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test098
Start line: 2073
End line: 2083
Method source code: 
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optim.univariate.BrentOptimizer((-0.0023477113697986103d), 0.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -0.002 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #408
20: aastore
21: invokevirtual #7
24: pop
25: new           #18
28: dup
29: ldc2_w        #388
32: dconst_0
33: invokespecial #23
36: astore_1
37: ldc_w         #409
40: invokestatic  #14
43: goto          47
46: astore_1
47: return
Exception table:
from    to  target type
25    43    46   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test099
Start line: 2086
End line: 2103
Method source code: 
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        double[] doubleArray4 = simplexOptimizer1.getLowerBound();
        int int5 = simplexOptimizer1.getMaxIterations();
        int int6 = simplexOptimizer1.getEvaluations();
        int int7 = simplexOptimizer1.getMaxIterations();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #410
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #10
40: astore_3
41: aload_2
42: invokevirtual #11
45: astore        4
47: aload_2
48: invokevirtual #27
51: astore        5
53: aload_2
54: invokevirtual #140
57: istore        6
59: aload_2
60: invokevirtual #265
63: istore        7
65: aload_2
66: invokevirtual #140
69: istore        8
71: aload_3
72: invokestatic  #16
75: aload         4
77: invokestatic  #16
80: aload         5
82: invokestatic  #16
85: new           #47
88: dup
89: invokespecial #48
92: ldc           #49
94: invokevirtual #50
97: iload         6
99: invokevirtual #51
102: ldc           #52
104: invokevirtual #50
107: ldc           #141
109: invokevirtual #51
112: ldc           #49
114: invokevirtual #50
117: invokevirtual #53
120: iload         6
122: ldc           #141
124: if_icmpne     131
127: iconst_1
128: goto          132
131: iconst_0
132: invokestatic  #54
135: new           #47
138: dup
139: invokespecial #48
142: ldc           #49
144: invokevirtual #50
147: iload         7
149: invokevirtual #51
152: ldc           #52
154: invokevirtual #50
157: iconst_0
158: invokevirtual #51
161: ldc           #49
163: invokevirtual #50
166: invokevirtual #53
169: iload         7
171: ifne          178
174: iconst_1
175: goto          179
178: iconst_0
179: invokestatic  #54
182: new           #47
185: dup
186: invokespecial #48
189: ldc           #49
191: invokevirtual #50
194: iload         8
196: invokevirtual #51
199: ldc           #52
201: invokevirtual #50
204: ldc           #141
206: invokevirtual #51
209: ldc           #49
211: invokevirtual #50
214: invokevirtual #53
217: iload         8
219: ldc           #141
221: if_icmpne     228
224: iconst_1
225: goto          229
228: iconst_0
229: invokestatic  #54
232: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test100
Start line: 2106
End line: 2113
Method source code: 
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer6 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((-13.499996185302734d), pointVectorValuePairConvergenceChecker1, (double) 0.0f, (-13.499996185302733d), (double) 5L, (double) 5);
        int int7 = levenbergMarquardtOptimizer6.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #411
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #32
30: dup
31: ldc2_w        #412
34: aload_1
35: dconst_0
36: ldc2_w        #414
39: ldc2_w        #293
42: ldc2_w        #293
45: invokespecial #37
48: astore_2
49: aload_2
50: invokevirtual #246
53: istore_3
54: new           #47
57: dup
58: invokespecial #48
61: ldc           #49
63: invokevirtual #50
66: iload_3
67: invokevirtual #51
70: ldc           #52
72: invokevirtual #50
75: ldc           #141
77: invokevirtual #51
80: ldc           #49
82: invokevirtual #50
85: invokevirtual #53
88: iload_3
89: ldc           #141
91: if_icmpne     98
94: iconst_1
95: goto          99
98: iconst_0
99: invokestatic  #54
102: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test101
Start line: 2116
End line: 2131
Method source code: 
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        double[] doubleArray3 = gaussNewtonOptimizer2.getStartPoint();
        double[] doubleArray4 = gaussNewtonOptimizer2.getLowerBound();
        double[] doubleArray5 = gaussNewtonOptimizer2.getStartPoint();
        int int6 = gaussNewtonOptimizer2.getMaxEvaluations();
        int int7 = gaussNewtonOptimizer2.getEvaluations();
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #416
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #84
30: dup
31: iconst_0
32: aload_1
33: invokespecial #85
36: astore_2
37: aload_2
38: invokevirtual #108
41: astore_3
42: aload_2
43: invokevirtual #145
46: astore        4
48: aload_2
49: invokevirtual #108
52: astore        5
54: aload_2
55: invokevirtual #220
58: istore        6
60: aload_2
61: invokevirtual #96
64: istore        7
66: aload_3
67: invokestatic  #16
70: aload         4
72: invokestatic  #16
75: aload         5
77: invokestatic  #16
80: new           #47
83: dup
84: invokespecial #48
87: ldc           #49
89: invokevirtual #50
92: iload         6
94: invokevirtual #51
97: ldc           #52
99: invokevirtual #50
102: iconst_0
103: invokevirtual #51
106: ldc           #49
108: invokevirtual #50
111: invokevirtual #53
114: iload         6
116: ifne          123
119: iconst_1
120: goto          124
123: iconst_0
124: invokestatic  #54
127: new           #47
130: dup
131: invokespecial #48
134: ldc           #49
136: invokevirtual #50
139: iload         7
141: invokevirtual #51
144: ldc           #52
146: invokevirtual #50
149: iconst_0
150: invokevirtual #51
153: ldc           #49
155: invokevirtual #50
158: invokevirtual #53
161: iload         7
163: ifne          170
166: iconst_1
167: goto          171
170: iconst_0
171: invokestatic  #54
174: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test102
Start line: 2134
End line: 2194
Method source code: 
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer powellOptimizer4 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer((double) 10, (double) '#', (double) 1, (double) (byte) 100);
        double[] doubleArray5 = powellOptimizer4.getStartPoint();
        int int6 = powellOptimizer4.getMaxEvaluations();
        int int7 = powellOptimizer4.getMaxEvaluations();
        org.apache.commons.math3.exception.util.Localizable localizable8 = null;
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker9 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer10 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker9);
        double[] doubleArray11 = simplexOptimizer10.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType12 = simplexOptimizer10.getGoalType();
        double[] doubleArray13 = simplexOptimizer10.getLowerBound();
        double[] doubleArray14 = simplexOptimizer10.getLowerBound();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker15 = simplexOptimizer10.getConvergenceChecker();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker16 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer17 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker16);
        double[] doubleArray18 = simplexOptimizer17.getUpperBound();
        double[] doubleArray19 = simplexOptimizer17.getStartPoint();
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction20 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction21 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction20);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction22 = objectiveFunction21.getObjectiveFunction();
        org.apache.commons.math3.optim.MaxEval maxEval23 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray25 = new double[] { 0.0f };
        double[] doubleArray26 = new double[] {};
        double[] doubleArray27 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair28 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray26, doubleArray27);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair29 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray25, doubleArray26);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection30 = null;
        boolean boolean33 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray25, orderDirection30, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target34 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray25);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray35 = new org.apache.commons.math3.optim.OptimizationData[] { objectiveFunction21, maxEval23, target34 };
        simplexOptimizer17.parseOptimizationData(optimizationDataArray35);
        simplexOptimizer10.parseOptimizationData(optimizationDataArray35);
        org.apache.commons.math3.exception.MathArithmeticException mathArithmeticException38 = new org.apache.commons.math3.exception.MathArithmeticException(localizable8, (java.lang.Object[]) optimizationDataArray35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointValuePair pointValuePair39 = powellOptimizer4.optimize(optimizationDataArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(doubleArray11);
        org.junit.Assert.assertNull(goalType12);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNull(pointValuePairConvergenceChecker15);
        org.junit.Assert.assertNull(doubleArray18);
        org.junit.Assert.assertNull(doubleArray19);
        org.junit.Assert.assertNull(multivariateFunction22);
        org.junit.Assert.assertNotNull(maxEval23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray35);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #417
20: aastore
21: invokevirtual #7
24: pop
25: new           #40
28: dup
29: ldc2_w        #19
32: ldc2_w        #41
35: dconst_1
36: ldc2_w        #43
39: invokespecial #45
42: astore_1
43: aload_1
44: invokevirtual #418
47: astore_2
48: aload_1
49: invokevirtual #419
52: istore_3
53: aload_1
54: invokevirtual #419
57: istore        4
59: aconst_null
60: astore        5
62: aconst_null
63: astore        6
65: new           #8
68: dup
69: aload         6
71: invokespecial #9
74: astore        7
76: aload         7
78: invokevirtual #10
81: astore        8
83: aload         7
85: invokevirtual #11
88: astore        9
90: aload         7
92: invokevirtual #27
95: astore        10
97: aload         7
99: invokevirtual #27
102: astore        11
104: aload         7
106: invokevirtual #131
109: astore        12
111: aconst_null
112: astore        13
114: new           #8
117: dup
118: aload         13
120: invokespecial #9
123: astore        14
125: aload         14
127: invokevirtual #10
130: astore        15
132: aload         14
134: invokevirtual #56
137: astore        16
139: aconst_null
140: astore        17
142: new           #57
145: dup
146: aload         17
148: invokespecial #58
151: astore        18
153: aload         18
155: invokevirtual #59
158: astore        19
160: invokestatic  #60
163: astore        20
165: iconst_1
166: newarray       double
168: dup
169: iconst_0
170: dconst_0
171: dastore
172: astore        21
174: iconst_0
175: newarray       double
177: astore        22
179: aconst_null
180: astore        23
182: new           #61
185: dup
186: aload         22
188: aload         23
190: invokespecial #62
193: astore        24
195: new           #63
198: dup
199: aload         21
201: aload         22
203: invokespecial #64
206: astore        25
208: aconst_null
209: astore        26
211: aload         21
213: aload         26
215: iconst_0
216: iconst_1
217: invokestatic  #65
220: istore        27
222: new           #66
225: dup
226: aload         21
228: invokespecial #67
231: astore        28
233: iconst_3
234: anewarray     #68
237: dup
238: iconst_0
239: aload         18
241: aastore
242: dup
243: iconst_1
244: aload         20
246: aastore
247: dup
248: iconst_2
249: aload         28
251: aastore
252: astore        29
254: aload         14
256: aload         29
258: invokevirtual #69
261: aload         7
263: aload         29
265: invokevirtual #69
268: new           #420
271: dup
272: aload         5
274: aload         29
276: checkcast     #261
279: invokespecial #421
282: astore        30
284: aload_1
285: aload         29
287: invokevirtual #422
290: astore        31
292: ldc           #29
294: invokestatic  #14
297: goto          302
300: astore        31
302: aload_2
303: invokestatic  #16
306: new           #47
309: dup
310: invokespecial #48
313: ldc           #49
315: invokevirtual #50
318: iload_3
319: invokevirtual #51
322: ldc           #52
324: invokevirtual #50
327: iconst_0
328: invokevirtual #51
331: ldc           #49
333: invokevirtual #50
336: invokevirtual #53
339: iload_3
340: ifne          347
343: iconst_1
344: goto          348
347: iconst_0
348: invokestatic  #54
351: new           #47
354: dup
355: invokespecial #48
358: ldc           #49
360: invokevirtual #50
363: iload         4
365: invokevirtual #51
368: ldc           #52
370: invokevirtual #50
373: iconst_0
374: invokevirtual #51
377: ldc           #49
379: invokevirtual #50
382: invokevirtual #53
385: iload         4
387: ifne          394
390: iconst_1
391: goto          395
394: iconst_0
395: invokestatic  #54
398: aload         8
400: invokestatic  #16
403: aload         9
405: invokestatic  #16
408: aload         10
410: invokestatic  #16
413: aload         11
415: invokestatic  #16
418: aload         12
420: invokestatic  #16
423: aload         15
425: invokestatic  #16
428: aload         16
430: invokestatic  #16
433: aload         19
435: invokestatic  #16
438: aload         20
440: invokestatic  #70
443: aload         21
445: invokestatic  #70
448: aload         21
450: invokestatic  #71
453: ldc           #72
455: invokestatic  #73
458: aload         22
460: invokestatic  #70
463: aload         22
465: invokestatic  #71
468: ldc           #74
470: invokestatic  #73
473: new           #47
476: dup
477: invokespecial #48
480: ldc           #49
482: invokevirtual #50
485: iload         27
487: invokevirtual #75
490: ldc           #52
492: invokevirtual #50
495: iconst_1
496: invokevirtual #75
499: ldc           #49
501: invokevirtual #50
504: invokevirtual #53
507: iload         27
509: iconst_1
510: if_icmpne     517
513: iconst_1
514: goto          518
517: iconst_0
518: invokestatic  #54
521: aload         29
523: invokestatic  #70
526: return
Exception table:
from    to  target type
284   297   300   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test103
Start line: 2197
End line: 2210
Method source code: 
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker simpleUnivariateValueChecker4 = new org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker((double) (-1.0f), 0.0d);
        org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer5 = new org.apache.commons.math3.optim.univariate.BrentOptimizer(0.125d, 9.99999999999998d, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair>) simpleUnivariateValueChecker4);
        int int6 = brentOptimizer5.getIterations();
        int int7 = brentOptimizer5.getMaxIterations();
        double double8 = brentOptimizer5.getMax();
        int int9 = brentOptimizer5.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2147483647 + "'", int7 == 2147483647);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #423
20: aastore
21: invokevirtual #7
24: pop
25: new           #149
28: dup
29: ldc2_w        #21
32: dconst_0
33: invokespecial #150
36: astore_1
37: new           #18
40: dup
41: ldc2_w        #250
44: ldc2_w        #252
47: aload_1
48: invokespecial #156
51: astore_2
52: aload_2
53: invokevirtual #254
56: istore_3
57: aload_2
58: invokevirtual #424
61: istore        4
63: aload_2
64: invokevirtual #312
67: dstore        5
69: aload_2
70: invokevirtual #400
73: istore        7
75: new           #47
78: dup
79: invokespecial #48
82: ldc           #49
84: invokevirtual #50
87: iload_3
88: invokevirtual #51
91: ldc           #52
93: invokevirtual #50
96: iconst_0
97: invokevirtual #51
100: ldc           #49
102: invokevirtual #50
105: invokevirtual #53
108: iload_3
109: ifne          116
112: iconst_1
113: goto          117
116: iconst_0
117: invokestatic  #54
120: new           #47
123: dup
124: invokespecial #48
127: ldc           #49
129: invokevirtual #50
132: iload         4
134: invokevirtual #51
137: ldc           #52
139: invokevirtual #50
142: ldc           #141
144: invokevirtual #51
147: ldc           #49
149: invokevirtual #50
152: invokevirtual #53
155: iload         4
157: ldc           #141
159: if_icmpne     166
162: iconst_1
163: goto          167
166: iconst_0
167: invokestatic  #54
170: new           #47
173: dup
174: invokespecial #48
177: ldc           #49
179: invokevirtual #50
182: dload         5
184: invokevirtual #106
187: ldc           #52
189: invokevirtual #50
192: dconst_0
193: invokevirtual #106
196: ldc           #49
198: invokevirtual #50
201: invokevirtual #53
204: dload         5
206: dconst_0
207: dcmpl
208: ifne          215
211: iconst_1
212: goto          216
215: iconst_0
216: invokestatic  #54
219: new           #47
222: dup
223: invokespecial #48
226: ldc           #49
228: invokevirtual #50
231: iload         7
233: invokevirtual #51
236: ldc           #52
238: invokevirtual #50
241: iconst_0
242: invokevirtual #51
245: ldc           #49
247: invokevirtual #50
250: invokevirtual #53
253: iload         7
255: ifne          262
258: iconst_1
259: goto          263
262: iconst_0
263: invokestatic  #54
266: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test104
Start line: 2213
End line: 2220
Method source code: 
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        double[] doubleArray3 = gaussNewtonOptimizer2.getLowerBound();
        org.junit.Assert.assertNull(doubleArray3);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #425
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #84
30: dup
31: iconst_0
32: aload_1
33: invokespecial #85
36: astore_2
37: aload_2
38: invokevirtual #145
41: astore_3
42: aload_3
43: invokestatic  #16
46: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test105
Start line: 2223
End line: 2276
Method source code: 
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        int int4 = simplexOptimizer1.getMaxIterations();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker5 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer6 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker5);
        double[] doubleArray7 = simplexOptimizer6.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType8 = simplexOptimizer6.getGoalType();
        double[] doubleArray9 = simplexOptimizer6.getLowerBound();
        double[] doubleArray10 = simplexOptimizer6.getLowerBound();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker11 = simplexOptimizer6.getConvergenceChecker();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker12 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer13 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker12);
        double[] doubleArray14 = simplexOptimizer13.getUpperBound();
        double[] doubleArray15 = simplexOptimizer13.getStartPoint();
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction16 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction17 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction16);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction18 = objectiveFunction17.getObjectiveFunction();
        org.apache.commons.math3.optim.MaxEval maxEval19 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray21 = new double[] { 0.0f };
        double[] doubleArray22 = new double[] {};
        double[] doubleArray23 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair24 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray22, doubleArray23);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair25 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray21, doubleArray22);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection26 = null;
        boolean boolean29 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray21, orderDirection26, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target30 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray21);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray31 = new org.apache.commons.math3.optim.OptimizationData[] { objectiveFunction17, maxEval19, target30 };
        simplexOptimizer13.parseOptimizationData(optimizationDataArray31);
        simplexOptimizer6.parseOptimizationData(optimizationDataArray31);
        simplexOptimizer1.parseOptimizationData(optimizationDataArray31);
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNull(doubleArray7);
        org.junit.Assert.assertNull(goalType8);
        org.junit.Assert.assertNull(doubleArray9);
        org.junit.Assert.assertNull(doubleArray10);
        org.junit.Assert.assertNull(pointValuePairConvergenceChecker11);
        org.junit.Assert.assertNull(doubleArray14);
        org.junit.Assert.assertNull(doubleArray15);
        org.junit.Assert.assertNull(multivariateFunction18);
        org.junit.Assert.assertNotNull(maxEval19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray31);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #426
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #10
40: astore_3
41: aload_2
42: invokevirtual #11
45: astore        4
47: aload_2
48: invokevirtual #140
51: istore        5
53: aconst_null
54: astore        6
56: new           #8
59: dup
60: aload         6
62: invokespecial #9
65: astore        7
67: aload         7
69: invokevirtual #10
72: astore        8
74: aload         7
76: invokevirtual #11
79: astore        9
81: aload         7
83: invokevirtual #27
86: astore        10
88: aload         7
90: invokevirtual #27
93: astore        11
95: aload         7
97: invokevirtual #131
100: astore        12
102: aconst_null
103: astore        13
105: new           #8
108: dup
109: aload         13
111: invokespecial #9
114: astore        14
116: aload         14
118: invokevirtual #10
121: astore        15
123: aload         14
125: invokevirtual #56
128: astore        16
130: aconst_null
131: astore        17
133: new           #57
136: dup
137: aload         17
139: invokespecial #58
142: astore        18
144: aload         18
146: invokevirtual #59
149: astore        19
151: invokestatic  #60
154: astore        20
156: iconst_1
157: newarray       double
159: dup
160: iconst_0
161: dconst_0
162: dastore
163: astore        21
165: iconst_0
166: newarray       double
168: astore        22
170: aconst_null
171: astore        23
173: new           #61
176: dup
177: aload         22
179: aload         23
181: invokespecial #62
184: astore        24
186: new           #63
189: dup
190: aload         21
192: aload         22
194: invokespecial #64
197: astore        25
199: aconst_null
200: astore        26
202: aload         21
204: aload         26
206: iconst_0
207: iconst_1
208: invokestatic  #65
211: istore        27
213: new           #66
216: dup
217: aload         21
219: invokespecial #67
222: astore        28
224: iconst_3
225: anewarray     #68
228: dup
229: iconst_0
230: aload         18
232: aastore
233: dup
234: iconst_1
235: aload         20
237: aastore
238: dup
239: iconst_2
240: aload         28
242: aastore
243: astore        29
245: aload         14
247: aload         29
249: invokevirtual #69
252: aload         7
254: aload         29
256: invokevirtual #69
259: aload_2
260: aload         29
262: invokevirtual #69
265: aload_3
266: invokestatic  #16
269: aload         4
271: invokestatic  #16
274: new           #47
277: dup
278: invokespecial #48
281: ldc           #49
283: invokevirtual #50
286: iload         5
288: invokevirtual #51
291: ldc           #52
293: invokevirtual #50
296: ldc           #141
298: invokevirtual #51
301: ldc           #49
303: invokevirtual #50
306: invokevirtual #53
309: iload         5
311: ldc           #141
313: if_icmpne     320
316: iconst_1
317: goto          321
320: iconst_0
321: invokestatic  #54
324: aload         8
326: invokestatic  #16
329: aload         9
331: invokestatic  #16
334: aload         10
336: invokestatic  #16
339: aload         11
341: invokestatic  #16
344: aload         12
346: invokestatic  #16
349: aload         15
351: invokestatic  #16
354: aload         16
356: invokestatic  #16
359: aload         19
361: invokestatic  #16
364: aload         20
366: invokestatic  #70
369: aload         21
371: invokestatic  #70
374: aload         21
376: invokestatic  #71
379: ldc           #72
381: invokestatic  #73
384: aload         22
386: invokestatic  #70
389: aload         22
391: invokestatic  #71
394: ldc           #74
396: invokestatic  #73
399: new           #47
402: dup
403: invokespecial #48
406: ldc           #49
408: invokevirtual #50
411: iload         27
413: invokevirtual #75
416: ldc           #52
418: invokevirtual #50
421: iconst_1
422: invokevirtual #75
425: ldc           #49
427: invokevirtual #50
430: invokevirtual #53
433: iload         27
435: iconst_1
436: if_icmpne     443
439: iconst_1
440: goto          444
443: iconst_0
444: invokestatic  #54
447: aload         29
449: invokestatic  #70
452: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test106
Start line: 2279
End line: 2288
Method source code: 
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        int int2 = simplexOptimizer1.getMaxIterations();
        int int3 = simplexOptimizer1.getEvaluations();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2147483647 + "'", int2 == 2147483647);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #427
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #140
40: istore_3
41: aload_2
42: invokevirtual #265
45: istore        4
47: new           #47
50: dup
51: invokespecial #48
54: ldc           #49
56: invokevirtual #50
59: iload_3
60: invokevirtual #51
63: ldc           #52
65: invokevirtual #50
68: ldc           #141
70: invokevirtual #51
73: ldc           #49
75: invokevirtual #50
78: invokevirtual #53
81: iload_3
82: ldc           #141
84: if_icmpne     91
87: iconst_1
88: goto          92
91: iconst_0
92: invokestatic  #54
95: new           #47
98: dup
99: invokespecial #48
102: ldc           #49
104: invokevirtual #50
107: iload         4
109: invokevirtual #51
112: ldc           #52
114: invokevirtual #50
117: iconst_0
118: invokevirtual #51
121: ldc           #49
123: invokevirtual #50
126: invokevirtual #53
129: iload         4
131: ifne          138
134: iconst_1
135: goto          139
138: iconst_0
139: invokestatic  #54
142: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test107
Start line: 2291
End line: 2299
Method source code: 
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer5 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((double) 6, (double) '4', (double) (byte) 100, (double) (byte) -1, 0.0d);
        int int6 = levenbergMarquardtOptimizer5.getMaxEvaluations();
        int int7 = levenbergMarquardtOptimizer5.getEvaluations();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #428
20: aastore
21: invokevirtual #7
24: pop
25: new           #32
28: dup
29: ldc2_w        #224
32: ldc2_w        #317
35: ldc2_w        #43
38: ldc2_w        #21
41: dconst_0
42: invokespecial #284
45: astore_1
46: aload_1
47: invokevirtual #309
50: istore_2
51: aload_1
52: invokevirtual #185
55: istore_3
56: new           #47
59: dup
60: invokespecial #48
63: ldc           #49
65: invokevirtual #50
68: iload_2
69: invokevirtual #51
72: ldc           #52
74: invokevirtual #50
77: iconst_0
78: invokevirtual #51
81: ldc           #49
83: invokevirtual #50
86: invokevirtual #53
89: iload_2
90: ifne          97
93: iconst_1
94: goto          98
97: iconst_0
98: invokestatic  #54
101: new           #47
104: dup
105: invokespecial #48
108: ldc           #49
110: invokevirtual #50
113: iload_3
114: invokevirtual #51
117: ldc           #52
119: invokevirtual #50
122: iconst_0
123: invokevirtual #51
126: ldc           #49
128: invokevirtual #50
131: invokevirtual #53
134: iload_3
135: ifne          142
138: iconst_1
139: goto          143
142: iconst_0
143: invokestatic  #54
146: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test108
Start line: 2302
End line: 2337
Method source code: 
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        double[] doubleArray3 = simplexOptimizer1.getStartPoint();
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction4 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction5 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction4);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction6 = objectiveFunction5.getObjectiveFunction();
        org.apache.commons.math3.optim.MaxEval maxEval7 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray9 = new double[] { 0.0f };
        double[] doubleArray10 = new double[] {};
        double[] doubleArray11 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair12 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray10, doubleArray11);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair13 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray9, doubleArray10);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection14 = null;
        boolean boolean17 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray9, orderDirection14, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target18 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray9);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray19 = new org.apache.commons.math3.optim.OptimizationData[] { objectiveFunction5, maxEval7, target18 };
        simplexOptimizer1.parseOptimizationData(optimizationDataArray19);
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType21 = simplexOptimizer1.getGoalType();
        double[] doubleArray22 = simplexOptimizer1.getUpperBound();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(multivariateFunction6);
        org.junit.Assert.assertNotNull(maxEval7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray19);
        org.junit.Assert.assertNull(goalType21);
        org.junit.Assert.assertNull(doubleArray22);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #429
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #10
40: astore_3
41: aload_2
42: invokevirtual #56
45: astore        4
47: aconst_null
48: astore        5
50: new           #57
53: dup
54: aload         5
56: invokespecial #58
59: astore        6
61: aload         6
63: invokevirtual #59
66: astore        7
68: invokestatic  #60
71: astore        8
73: iconst_1
74: newarray       double
76: dup
77: iconst_0
78: dconst_0
79: dastore
80: astore        9
82: iconst_0
83: newarray       double
85: astore        10
87: aconst_null
88: astore        11
90: new           #61
93: dup
94: aload         10
96: aload         11
98: invokespecial #62
101: astore        12
103: new           #63
106: dup
107: aload         9
109: aload         10
111: invokespecial #64
114: astore        13
116: aconst_null
117: astore        14
119: aload         9
121: aload         14
123: iconst_0
124: iconst_1
125: invokestatic  #65
128: istore        15
130: new           #66
133: dup
134: aload         9
136: invokespecial #67
139: astore        16
141: iconst_3
142: anewarray     #68
145: dup
146: iconst_0
147: aload         6
149: aastore
150: dup
151: iconst_1
152: aload         8
154: aastore
155: dup
156: iconst_2
157: aload         16
159: aastore
160: astore        17
162: aload_2
163: aload         17
165: invokevirtual #69
168: aload_2
169: invokevirtual #11
172: astore        18
174: aload_2
175: invokevirtual #10
178: astore        19
180: aload_3
181: invokestatic  #16
184: aload         4
186: invokestatic  #16
189: aload         7
191: invokestatic  #16
194: aload         8
196: invokestatic  #70
199: aload         9
201: invokestatic  #70
204: aload         9
206: invokestatic  #71
209: ldc           #72
211: invokestatic  #73
214: aload         10
216: invokestatic  #70
219: aload         10
221: invokestatic  #71
224: ldc           #74
226: invokestatic  #73
229: new           #47
232: dup
233: invokespecial #48
236: ldc           #49
238: invokevirtual #50
241: iload         15
243: invokevirtual #75
246: ldc           #52
248: invokevirtual #50
251: iconst_1
252: invokevirtual #75
255: ldc           #49
257: invokevirtual #50
260: invokevirtual #53
263: iload         15
265: iconst_1
266: if_icmpne     273
269: iconst_1
270: goto          274
273: iconst_0
274: invokestatic  #54
277: aload         17
279: invokestatic  #70
282: aload         18
284: invokestatic  #16
287: aload         19
289: invokestatic  #16
292: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test109
Start line: 2340
End line: 2350
Method source code: 
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer2 = new org.apache.commons.math3.optim.univariate.BrentOptimizer(0.0d, 0.3087182731898984d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: 0 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #430
20: aastore
21: invokevirtual #7
24: pop
25: new           #18
28: dup
29: dconst_0
30: ldc2_w        #431
33: invokespecial #23
36: astore_1
37: ldc_w         #322
40: invokestatic  #14
43: goto          47
46: astore_1
47: return
Exception table:
from    to  target type
25    43    46   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test110
Start line: 2353
End line: 2372
Method source code: 
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        double[] doubleArray3 = gaussNewtonOptimizer2.getStartPoint();
        double[] doubleArray4 = gaussNewtonOptimizer2.getLowerBound();
        double[] doubleArray5 = gaussNewtonOptimizer2.getLowerBound();
        double[] doubleArray6 = null;
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = gaussNewtonOptimizer2.computeSigma(doubleArray6, 4.440892098500627E-16d);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #433
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #84
30: dup
31: iconst_0
32: aload_1
33: invokespecial #85
36: astore_2
37: aload_2
38: invokevirtual #108
41: astore_3
42: aload_2
43: invokevirtual #145
46: astore        4
48: aload_2
49: invokevirtual #145
52: astore        5
54: aconst_null
55: astore        6
57: aload_2
58: aload         6
60: ldc2_w        #434
63: invokevirtual #436
66: astore        7
68: ldc           #29
70: invokestatic  #14
73: goto          78
76: astore        7
78: aload_3
79: invokestatic  #16
82: aload         4
84: invokestatic  #16
87: aload         5
89: invokestatic  #16
92: return
Exception table:
from    to  target type
57    73    76   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test111
Start line: 2375
End line: 2386
Method source code: 
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker simpleUnivariateValueChecker4 = new org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker(1.966463646E9d, (double) (-1.0f));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer5 = new org.apache.commons.math3.optim.univariate.BrentOptimizer((-25.81779890939383d), 7.896296018268038E14d, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair>) simpleUnivariateValueChecker4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: -25.818 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #437
20: aastore
21: invokevirtual #7
24: pop
25: new           #149
28: dup
29: ldc2_w        #346
32: ldc2_w        #21
35: invokespecial #150
38: astore_1
39: new           #18
42: dup
43: ldc2_w        #438
46: ldc2_w        #440
49: aload_1
50: invokespecial #156
53: astore_2
54: ldc_w         #442
57: invokestatic  #14
60: goto          64
63: astore_2
64: return
Exception table:
from    to  target type
39    60    63   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test112
Start line: 2389
End line: 2409
Method source code: 
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        double[] doubleArray4 = simplexOptimizer1.getLowerBound();
        double[] doubleArray5 = simplexOptimizer1.getStartPoint();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointValuePair pointValuePair6 = simplexOptimizer1.doOptimize();
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NullArgumentException; message: null is not allowed");
        } catch (org.apache.commons.math3.exception.NullArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #443
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #10
40: astore_3
41: aload_2
42: invokevirtual #11
45: astore        4
47: aload_2
48: invokevirtual #27
51: astore        5
53: aload_2
54: invokevirtual #56
57: astore        6
59: aload_2
60: invokevirtual #12
63: astore        7
65: ldc           #13
67: invokestatic  #14
70: goto          75
73: astore        7
75: aload_3
76: invokestatic  #16
79: aload         4
81: invokestatic  #16
84: aload         5
86: invokestatic  #16
89: aload         6
91: invokestatic  #16
94: return
Exception table:
from    to  target type
59    70    73   Class org/apache/commons/math3/exception/NullArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test113
Start line: 2412
End line: 2419
Method source code: 
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer1 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer(pointVectorValuePairConvergenceChecker0);
        double[] doubleArray2 = levenbergMarquardtOptimizer1.getLowerBound();
        org.junit.Assert.assertNull(doubleArray2);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #444
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #32
30: dup
31: aload_1
32: invokespecial #135
35: astore_2
36: aload_2
37: invokevirtual #285
40: astore_3
41: aload_3
42: invokestatic  #16
45: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test114
Start line: 2422
End line: 2433
Method source code: 
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.apache.commons.math3.optim.SimpleValueChecker simpleValueChecker5 = new org.apache.commons.math3.optim.SimpleValueChecker(0.77132064549269d, 1.3591409142295225d, 1966463646);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer powellOptimizer6 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer(0.0d, 1000.0d, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair>) simpleValueChecker5);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: 0 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #445
20: aastore
21: invokevirtual #7
24: pop
25: new           #88
28: dup
29: ldc2_w        #446
32: ldc2_w        #448
35: ldc_w         #450
38: invokespecial #451
41: astore_1
42: new           #40
45: dup
46: dconst_0
47: ldc2_w        #452
50: aload_1
51: invokespecial #454
54: astore_2
55: ldc_w         #322
58: invokestatic  #14
61: goto          65
64: astore_2
65: return
Exception table:
from    to  target type
42    61    64   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test115
Start line: 2436
End line: 2457
Method source code: 
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        double[] doubleArray4 = simplexOptimizer1.getLowerBound();
        double[] doubleArray5 = simplexOptimizer1.getLowerBound();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker6 = simplexOptimizer1.getConvergenceChecker();
        int int7 = simplexOptimizer1.getIterations();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType8 = simplexOptimizer1.getGoalType();
        double[] doubleArray9 = simplexOptimizer1.getStartPoint();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertNull(pointValuePairConvergenceChecker6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(goalType8);
        org.junit.Assert.assertNull(doubleArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #455
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #10
40: astore_3
41: aload_2
42: invokevirtual #11
45: astore        4
47: aload_2
48: invokevirtual #27
51: astore        5
53: aload_2
54: invokevirtual #27
57: astore        6
59: aload_2
60: invokevirtual #131
63: astore        7
65: aload_2
66: invokevirtual #159
69: istore        8
71: aload_2
72: invokevirtual #11
75: astore        9
77: aload_2
78: invokevirtual #56
81: astore        10
83: aload_3
84: invokestatic  #16
87: aload         4
89: invokestatic  #16
92: aload         5
94: invokestatic  #16
97: aload         6
99: invokestatic  #16
102: aload         7
104: invokestatic  #16
107: new           #47
110: dup
111: invokespecial #48
114: ldc           #49
116: invokevirtual #50
119: iload         8
121: invokevirtual #51
124: ldc           #52
126: invokevirtual #50
129: iconst_0
130: invokevirtual #51
133: ldc           #49
135: invokevirtual #50
138: invokevirtual #53
141: iload         8
143: ifne          150
146: iconst_1
147: goto          151
150: iconst_0
151: invokestatic  #54
154: aload         9
156: invokestatic  #16
159: aload         10
161: invokestatic  #16
164: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test116
Start line: 2460
End line: 2500
Method source code: 
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.apache.commons.math3.optim.SimpleVectorValueChecker simpleVectorValueChecker3 = new org.apache.commons.math3.optim.SimpleVectorValueChecker(58.16189775112006d, 10.0d, (int) (byte) 10);
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer4 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair>) simpleVectorValueChecker3);
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker5 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer6 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker5);
        double[] doubleArray7 = simplexOptimizer6.getUpperBound();
        double[] doubleArray8 = simplexOptimizer6.getStartPoint();
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction9 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction10 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction9);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction11 = objectiveFunction10.getObjectiveFunction();
        org.apache.commons.math3.optim.MaxEval maxEval12 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray14 = new double[] { 0.0f };
        double[] doubleArray15 = new double[] {};
        double[] doubleArray16 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair17 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray15, doubleArray16);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair18 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray14, doubleArray15);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection19 = null;
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray14, orderDirection19, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target23 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray14);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray24 = new org.apache.commons.math3.optim.OptimizationData[] { objectiveFunction10, maxEval12, target23 };
        simplexOptimizer6.parseOptimizationData(optimizationDataArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair26 = levenbergMarquardtOptimizer4.optimize(optimizationDataArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(doubleArray7);
        org.junit.Assert.assertNull(doubleArray8);
        org.junit.Assert.assertNull(multivariateFunction11);
        org.junit.Assert.assertNotNull(maxEval12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray24);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #456
20: aastore
21: invokevirtual #7
24: pop
25: new           #324
28: dup
29: ldc2_w        #325
32: ldc2_w        #19
35: bipush        10
37: invokespecial #327
40: astore_1
41: new           #32
44: dup
45: aload_1
46: invokespecial #135
49: astore_2
50: aconst_null
51: astore_3
52: new           #8
55: dup
56: aload_3
57: invokespecial #9
60: astore        4
62: aload         4
64: invokevirtual #10
67: astore        5
69: aload         4
71: invokevirtual #56
74: astore        6
76: aconst_null
77: astore        7
79: new           #57
82: dup
83: aload         7
85: invokespecial #58
88: astore        8
90: aload         8
92: invokevirtual #59
95: astore        9
97: invokestatic  #60
100: astore        10
102: iconst_1
103: newarray       double
105: dup
106: iconst_0
107: dconst_0
108: dastore
109: astore        11
111: iconst_0
112: newarray       double
114: astore        12
116: aconst_null
117: astore        13
119: new           #61
122: dup
123: aload         12
125: aload         13
127: invokespecial #62
130: astore        14
132: new           #63
135: dup
136: aload         11
138: aload         12
140: invokespecial #64
143: astore        15
145: aconst_null
146: astore        16
148: aload         11
150: aload         16
152: iconst_0
153: iconst_1
154: invokestatic  #65
157: istore        17
159: new           #66
162: dup
163: aload         11
165: invokespecial #67
168: astore        18
170: iconst_3
171: anewarray     #68
174: dup
175: iconst_0
176: aload         8
178: aastore
179: dup
180: iconst_1
181: aload         10
183: aastore
184: dup
185: iconst_2
186: aload         18
188: aastore
189: astore        19
191: aload         4
193: aload         19
195: invokevirtual #69
198: aload_2
199: aload         19
201: invokevirtual #244
204: astore        20
206: ldc           #29
208: invokestatic  #14
211: goto          216
214: astore        20
216: aload         5
218: invokestatic  #16
221: aload         6
223: invokestatic  #16
226: aload         9
228: invokestatic  #16
231: aload         10
233: invokestatic  #70
236: aload         11
238: invokestatic  #70
241: aload         11
243: invokestatic  #71
246: ldc           #72
248: invokestatic  #73
251: aload         12
253: invokestatic  #70
256: aload         12
258: invokestatic  #71
261: ldc           #74
263: invokestatic  #73
266: new           #47
269: dup
270: invokespecial #48
273: ldc           #49
275: invokevirtual #50
278: iload         17
280: invokevirtual #75
283: ldc           #52
285: invokevirtual #50
288: iconst_1
289: invokevirtual #75
292: ldc           #49
294: invokevirtual #50
297: invokevirtual #53
300: iload         17
302: iconst_1
303: if_icmpne     310
306: iconst_1
307: goto          311
310: iconst_0
311: invokestatic  #54
314: aload         19
316: invokestatic  #70
319: return
Exception table:
from    to  target type
198   211   214   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test117
Start line: 2503
End line: 2518
Method source code: 
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker simpleUnivariateValueChecker4 = new org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker((double) (-1.0f), 0.0d);
        org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer5 = new org.apache.commons.math3.optim.univariate.BrentOptimizer(0.125d, 9.99999999999998d, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair>) simpleUnivariateValueChecker4);
        double double6 = brentOptimizer5.getMin();
        int int7 = brentOptimizer5.getMaxEvaluations();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType8 = brentOptimizer5.getGoalType();
        int int9 = brentOptimizer5.getIterations();
        int int10 = brentOptimizer5.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(goalType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #457
20: aastore
21: invokevirtual #7
24: pop
25: new           #149
28: dup
29: ldc2_w        #21
32: dconst_0
33: invokespecial #150
36: astore_1
37: new           #18
40: dup
41: ldc2_w        #250
44: ldc2_w        #252
47: aload_1
48: invokespecial #156
51: astore_2
52: aload_2
53: invokevirtual #353
56: dstore_3
57: aload_2
58: invokevirtual #400
61: istore        5
63: aload_2
64: invokevirtual #401
67: astore        6
69: aload_2
70: invokevirtual #254
73: istore        7
75: aload_2
76: invokevirtual #400
79: istore        8
81: new           #47
84: dup
85: invokespecial #48
88: ldc           #49
90: invokevirtual #50
93: dload_3
94: invokevirtual #106
97: ldc           #52
99: invokevirtual #50
102: dconst_0
103: invokevirtual #106
106: ldc           #49
108: invokevirtual #50
111: invokevirtual #53
114: dload_3
115: dconst_0
116: dcmpl
117: ifne          124
120: iconst_1
121: goto          125
124: iconst_0
125: invokestatic  #54
128: new           #47
131: dup
132: invokespecial #48
135: ldc           #49
137: invokevirtual #50
140: iload         5
142: invokevirtual #51
145: ldc           #52
147: invokevirtual #50
150: iconst_0
151: invokevirtual #51
154: ldc           #49
156: invokevirtual #50
159: invokevirtual #53
162: iload         5
164: ifne          171
167: iconst_1
168: goto          172
171: iconst_0
172: invokestatic  #54
175: aload         6
177: invokestatic  #16
180: new           #47
183: dup
184: invokespecial #48
187: ldc           #49
189: invokevirtual #50
192: iload         7
194: invokevirtual #51
197: ldc           #52
199: invokevirtual #50
202: iconst_0
203: invokevirtual #51
206: ldc           #49
208: invokevirtual #50
211: invokevirtual #53
214: iload         7
216: ifne          223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #54
227: new           #47
230: dup
231: invokespecial #48
234: ldc           #49
236: invokevirtual #50
239: iload         8
241: invokevirtual #51
244: ldc           #52
246: invokevirtual #50
249: iconst_0
250: invokevirtual #51
253: ldc           #49
255: invokevirtual #50
258: invokevirtual #53
261: iload         8
263: ifne          270
266: iconst_1
267: goto          271
270: iconst_0
271: invokestatic  #54
274: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test118
Start line: 2521
End line: 2540
Method source code: 
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        int int4 = simplexOptimizer1.getMaxIterations();
        double[] doubleArray5 = simplexOptimizer1.getUpperBound();
        double[] doubleArray6 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType7 = simplexOptimizer1.getGoalType();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType8 = simplexOptimizer1.getGoalType();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2147483647 + "'", int4 == 2147483647);
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertNull(doubleArray6);
        org.junit.Assert.assertNull(goalType7);
        org.junit.Assert.assertNull(goalType8);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #458
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #10
40: astore_3
41: aload_2
42: invokevirtual #11
45: astore        4
47: aload_2
48: invokevirtual #140
51: istore        5
53: aload_2
54: invokevirtual #10
57: astore        6
59: aload_2
60: invokevirtual #10
63: astore        7
65: aload_2
66: invokevirtual #11
69: astore        8
71: aload_2
72: invokevirtual #11
75: astore        9
77: aload_3
78: invokestatic  #16
81: aload         4
83: invokestatic  #16
86: new           #47
89: dup
90: invokespecial #48
93: ldc           #49
95: invokevirtual #50
98: iload         5
100: invokevirtual #51
103: ldc           #52
105: invokevirtual #50
108: ldc           #141
110: invokevirtual #51
113: ldc           #49
115: invokevirtual #50
118: invokevirtual #53
121: iload         5
123: ldc           #141
125: if_icmpne     132
128: iconst_1
129: goto          133
132: iconst_0
133: invokestatic  #54
136: aload         6
138: invokestatic  #16
141: aload         7
143: invokestatic  #16
146: aload         8
148: invokestatic  #16
151: aload         9
153: invokestatic  #16
156: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test119
Start line: 2543
End line: 2551
Method source code: 
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer levenbergMarquardtOptimizer5 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer((double) 0L, (double) 3, 1.0E-14d, (double) 10.0f, (-0.7615941559557649d));
        double[] doubleArray6 = levenbergMarquardtOptimizer5.getLowerBound();
        int int7 = levenbergMarquardtOptimizer5.getEvaluations();
        org.junit.Assert.assertNull(doubleArray6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #459
20: aastore
21: invokevirtual #7
24: pop
25: new           #32
28: dup
29: dconst_0
30: ldc2_w        #303
33: ldc2_w        #305
36: ldc2_w        #19
39: ldc2_w        #307
42: invokespecial #284
45: astore_1
46: aload_1
47: invokevirtual #285
50: astore_2
51: aload_1
52: invokevirtual #185
55: istore_3
56: aload_2
57: invokestatic  #16
60: new           #47
63: dup
64: invokespecial #48
67: ldc           #49
69: invokevirtual #50
72: iload_3
73: invokevirtual #51
76: ldc           #52
78: invokevirtual #50
81: iconst_0
82: invokevirtual #51
85: ldc           #49
87: invokevirtual #50
90: invokevirtual #53
93: iload_3
94: ifne          101
97: iconst_1
98: goto          102
101: iconst_0
102: invokestatic  #54
105: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test120
Start line: 2554
End line: 2569
Method source code: 
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        double[] doubleArray4 = simplexOptimizer1.getLowerBound();
        double[] doubleArray5 = simplexOptimizer1.getStartPoint();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker6 = simplexOptimizer1.getConvergenceChecker();
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertNull(pointValuePairConvergenceChecker6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #460
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #10
40: astore_3
41: aload_2
42: invokevirtual #11
45: astore        4
47: aload_2
48: invokevirtual #27
51: astore        5
53: aload_2
54: invokevirtual #56
57: astore        6
59: aload_2
60: invokevirtual #131
63: astore        7
65: aload_3
66: invokestatic  #16
69: aload         4
71: invokestatic  #16
74: aload         5
76: invokestatic  #16
79: aload         6
81: invokestatic  #16
84: aload         7
86: invokestatic  #16
89: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test121
Start line: 2572
End line: 2580
Method source code: 
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer powellOptimizer4 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer((double) 10, (double) '#', (double) 1, (double) (byte) 100);
        int int5 = powellOptimizer4.getMaxIterations();
        double[] doubleArray6 = powellOptimizer4.getStartPoint();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNull(doubleArray6);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #461
20: aastore
21: invokevirtual #7
24: pop
25: new           #40
28: dup
29: ldc2_w        #19
32: ldc2_w        #41
35: dconst_1
36: ldc2_w        #43
39: invokespecial #45
42: astore_1
43: aload_1
44: invokevirtual #275
47: istore_2
48: aload_1
49: invokevirtual #418
52: astore_3
53: new           #47
56: dup
57: invokespecial #48
60: ldc           #49
62: invokevirtual #50
65: iload_2
66: invokevirtual #51
69: ldc           #52
71: invokevirtual #50
74: ldc           #141
76: invokevirtual #51
79: ldc           #49
81: invokevirtual #50
84: invokevirtual #53
87: iload_2
88: ldc           #141
90: if_icmpne     97
93: iconst_1
94: goto          98
97: iconst_0
98: invokestatic  #54
101: aload_3
102: invokestatic  #16
105: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test122
Start line: 2583
End line: 2592
Method source code: 
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker simpleUnivariateValueChecker4 = new org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker((double) (-1.0f), 0.0d);
        org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer5 = new org.apache.commons.math3.optim.univariate.BrentOptimizer(0.125d, 9.99999999999998d, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair>) simpleUnivariateValueChecker4);
        int int6 = brentOptimizer5.getIterations();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType7 = brentOptimizer5.getGoalType();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(goalType7);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #462
20: aastore
21: invokevirtual #7
24: pop
25: new           #149
28: dup
29: ldc2_w        #21
32: dconst_0
33: invokespecial #150
36: astore_1
37: new           #18
40: dup
41: ldc2_w        #250
44: ldc2_w        #252
47: aload_1
48: invokespecial #156
51: astore_2
52: aload_2
53: invokevirtual #254
56: istore_3
57: aload_2
58: invokevirtual #401
61: astore        4
63: new           #47
66: dup
67: invokespecial #48
70: ldc           #49
72: invokevirtual #50
75: iload_3
76: invokevirtual #51
79: ldc           #52
81: invokevirtual #50
84: iconst_0
85: invokevirtual #51
88: ldc           #49
90: invokevirtual #50
93: invokevirtual #53
96: iload_3
97: ifne          104
100: iconst_1
101: goto          105
104: iconst_0
105: invokestatic  #54
108: aload         4
110: invokestatic  #16
113: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test123
Start line: 2595
End line: 2645
Method source code: 
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType3 = simplexOptimizer1.getGoalType();
        double[] doubleArray4 = simplexOptimizer1.getLowerBound();
        int int5 = simplexOptimizer1.getMaxIterations();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType6 = simplexOptimizer1.getGoalType();
        org.apache.commons.math3.optim.nonlinear.scalar.GoalType goalType7 = simplexOptimizer1.getGoalType();
        int int8 = simplexOptimizer1.getMaxIterations();
        org.apache.commons.math3.exception.util.Localizable localizable9 = null;
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker10 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer11 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker10);
        double[] doubleArray12 = simplexOptimizer11.getUpperBound();
        double[] doubleArray13 = simplexOptimizer11.getStartPoint();
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction14 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction15 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction14);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction16 = objectiveFunction15.getObjectiveFunction();
        org.apache.commons.math3.optim.MaxEval maxEval17 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray19 = new double[] { 0.0f };
        double[] doubleArray20 = new double[] {};
        double[] doubleArray21 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair22 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray20, doubleArray21);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair23 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray19, doubleArray20);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection24 = null;
        boolean boolean27 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray19, orderDirection24, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target28 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray19);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray29 = new org.apache.commons.math3.optim.OptimizationData[] { objectiveFunction15, maxEval17, target28 };
        simplexOptimizer11.parseOptimizationData(optimizationDataArray29);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException31 = new org.apache.commons.math3.exception.MathIllegalStateException(localizable9, (java.lang.Object[]) optimizationDataArray29);
        simplexOptimizer1.parseOptimizationData(optimizationDataArray29);
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertNull(goalType3);
        org.junit.Assert.assertNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2147483647 + "'", int5 == 2147483647);
        org.junit.Assert.assertNull(goalType6);
        org.junit.Assert.assertNull(goalType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2147483647 + "'", int8 == 2147483647);
        org.junit.Assert.assertNull(doubleArray12);
        org.junit.Assert.assertNull(doubleArray13);
        org.junit.Assert.assertNull(multivariateFunction16);
        org.junit.Assert.assertNotNull(maxEval17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray29);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #463
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #10
40: astore_3
41: aload_2
42: invokevirtual #11
45: astore        4
47: aload_2
48: invokevirtual #27
51: astore        5
53: aload_2
54: invokevirtual #140
57: istore        6
59: aload_2
60: invokevirtual #11
63: astore        7
65: aload_2
66: invokevirtual #11
69: astore        8
71: aload_2
72: invokevirtual #140
75: istore        9
77: aconst_null
78: astore        10
80: aconst_null
81: astore        11
83: new           #8
86: dup
87: aload         11
89: invokespecial #9
92: astore        12
94: aload         12
96: invokevirtual #10
99: astore        13
101: aload         12
103: invokevirtual #56
106: astore        14
108: aconst_null
109: astore        15
111: new           #57
114: dup
115: aload         15
117: invokespecial #58
120: astore        16
122: aload         16
124: invokevirtual #59
127: astore        17
129: invokestatic  #60
132: astore        18
134: iconst_1
135: newarray       double
137: dup
138: iconst_0
139: dconst_0
140: dastore
141: astore        19
143: iconst_0
144: newarray       double
146: astore        20
148: aconst_null
149: astore        21
151: new           #61
154: dup
155: aload         20
157: aload         21
159: invokespecial #62
162: astore        22
164: new           #63
167: dup
168: aload         19
170: aload         20
172: invokespecial #64
175: astore        23
177: aconst_null
178: astore        24
180: aload         19
182: aload         24
184: iconst_0
185: iconst_1
186: invokestatic  #65
189: istore        25
191: new           #66
194: dup
195: aload         19
197: invokespecial #67
200: astore        26
202: iconst_3
203: anewarray     #68
206: dup
207: iconst_0
208: aload         16
210: aastore
211: dup
212: iconst_1
213: aload         18
215: aastore
216: dup
217: iconst_2
218: aload         26
220: aastore
221: astore        27
223: aload         12
225: aload         27
227: invokevirtual #69
230: new           #260
233: dup
234: aload         10
236: aload         27
238: checkcast     #261
241: invokespecial #301
244: astore        28
246: aload_2
247: aload         27
249: invokevirtual #69
252: aload_3
253: invokestatic  #16
256: aload         4
258: invokestatic  #16
261: aload         5
263: invokestatic  #16
266: new           #47
269: dup
270: invokespecial #48
273: ldc           #49
275: invokevirtual #50
278: iload         6
280: invokevirtual #51
283: ldc           #52
285: invokevirtual #50
288: ldc           #141
290: invokevirtual #51
293: ldc           #49
295: invokevirtual #50
298: invokevirtual #53
301: iload         6
303: ldc           #141
305: if_icmpne     312
308: iconst_1
309: goto          313
312: iconst_0
313: invokestatic  #54
316: aload         7
318: invokestatic  #16
321: aload         8
323: invokestatic  #16
326: new           #47
329: dup
330: invokespecial #48
333: ldc           #49
335: invokevirtual #50
338: iload         9
340: invokevirtual #51
343: ldc           #52
345: invokevirtual #50
348: ldc           #141
350: invokevirtual #51
353: ldc           #49
355: invokevirtual #50
358: invokevirtual #53
361: iload         9
363: ldc           #141
365: if_icmpne     372
368: iconst_1
369: goto          373
372: iconst_0
373: invokestatic  #54
376: aload         13
378: invokestatic  #16
381: aload         14
383: invokestatic  #16
386: aload         17
388: invokestatic  #16
391: aload         18
393: invokestatic  #70
396: aload         19
398: invokestatic  #70
401: aload         19
403: invokestatic  #71
406: ldc           #72
408: invokestatic  #73
411: aload         20
413: invokestatic  #70
416: aload         20
418: invokestatic  #71
421: ldc           #74
423: invokestatic  #73
426: new           #47
429: dup
430: invokespecial #48
433: ldc           #49
435: invokevirtual #50
438: iload         25
440: invokevirtual #75
443: ldc           #52
445: invokevirtual #50
448: iconst_1
449: invokevirtual #75
452: ldc           #49
454: invokevirtual #50
457: invokevirtual #53
460: iload         25
462: iconst_1
463: if_icmpne     470
466: iconst_1
467: goto          471
470: iconst_0
471: invokestatic  #54
474: aload         27
476: invokestatic  #70
479: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test124
Start line: 2648
End line: 2658
Method source code: 
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer powellOptimizer4 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer(0.0d, (-0.18920062382698205d), 6.283185307179586d, (double) 1689602031);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math3.exception.NumberIsTooSmallException; message: 0 is smaller than the minimum (0)");
        } catch (org.apache.commons.math3.exception.NumberIsTooSmallException e) {
        // Expected exception.
        }
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #464
20: aastore
21: invokevirtual #7
24: pop
25: new           #40
28: dup
29: dconst_0
30: ldc2_w        #465
33: ldc2_w        #403
36: ldc2_w        #467
39: invokespecial #45
42: astore_1
43: ldc_w         #322
46: invokestatic  #14
49: goto          53
52: astore_1
53: return
Exception table:
from    to  target type
25    49    52   Class org/apache/commons/math3/exception/NumberIsTooSmallException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test125
Start line: 2661
End line: 2670
Method source code: 
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        int int2 = simplexOptimizer1.getMaxEvaluations();
        int int3 = simplexOptimizer1.getMaxEvaluations();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #469
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #94
40: istore_3
41: aload_2
42: invokevirtual #94
45: istore        4
47: new           #47
50: dup
51: invokespecial #48
54: ldc           #49
56: invokevirtual #50
59: iload_3
60: invokevirtual #51
63: ldc           #52
65: invokevirtual #50
68: iconst_0
69: invokevirtual #51
72: ldc           #49
74: invokevirtual #50
77: invokevirtual #53
80: iload_3
81: ifne          88
84: iconst_1
85: goto          89
88: iconst_0
89: invokestatic  #54
92: new           #47
95: dup
96: invokespecial #48
99: ldc           #49
101: invokevirtual #50
104: iload         4
106: invokevirtual #51
109: ldc           #52
111: invokevirtual #50
114: iconst_0
115: invokevirtual #51
118: ldc           #49
120: invokevirtual #50
123: invokevirtual #53
126: iload         4
128: ifne          135
131: iconst_1
132: goto          136
135: iconst_0
136: invokestatic  #54
139: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test126
Start line: 2673
End line: 2709
Method source code: 
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.apache.commons.math3.exception.TooManyIterationsException tooManyIterationsException1 = new org.apache.commons.math3.exception.TooManyIterationsException((java.lang.Number) 4L);
        org.apache.commons.math3.exception.util.Localizable localizable2 = null;
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker3 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer4 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker3);
        double[] doubleArray5 = simplexOptimizer4.getUpperBound();
        double[] doubleArray6 = simplexOptimizer4.getStartPoint();
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction7 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction8 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction7);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction9 = objectiveFunction8.getObjectiveFunction();
        org.apache.commons.math3.optim.MaxEval maxEval10 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray12 = new double[] { 0.0f };
        double[] doubleArray13 = new double[] {};
        double[] doubleArray14 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair15 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray13, doubleArray14);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair16 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray12, doubleArray13);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection17 = null;
        boolean boolean20 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray12, orderDirection17, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target21 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray12);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray22 = new org.apache.commons.math3.optim.OptimizationData[] { objectiveFunction8, maxEval10, target21 };
        simplexOptimizer4.parseOptimizationData(optimizationDataArray22);
        org.apache.commons.math3.exception.MathIllegalStateException mathIllegalStateException24 = new org.apache.commons.math3.exception.MathIllegalStateException((java.lang.Throwable) tooManyIterationsException1, localizable2, (java.lang.Object[]) optimizationDataArray22);
        org.apache.commons.math3.exception.util.ExceptionContext exceptionContext25 = mathIllegalStateException24.getContext();
        org.junit.Assert.assertNull(doubleArray5);
        org.junit.Assert.assertNull(doubleArray6);
        org.junit.Assert.assertNull(multivariateFunction9);
        org.junit.Assert.assertNotNull(maxEval10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray22);
        org.junit.Assert.assertNotNull(exceptionContext25);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #470
20: aastore
21: invokevirtual #7
24: pop
25: new           #255
28: dup
29: ldc2_w        #256
32: invokestatic  #258
35: invokespecial #259
38: astore_1
39: aconst_null
40: astore_2
41: aconst_null
42: astore_3
43: new           #8
46: dup
47: aload_3
48: invokespecial #9
51: astore        4
53: aload         4
55: invokevirtual #10
58: astore        5
60: aload         4
62: invokevirtual #56
65: astore        6
67: aconst_null
68: astore        7
70: new           #57
73: dup
74: aload         7
76: invokespecial #58
79: astore        8
81: aload         8
83: invokevirtual #59
86: astore        9
88: invokestatic  #60
91: astore        10
93: iconst_1
94: newarray       double
96: dup
97: iconst_0
98: dconst_0
99: dastore
100: astore        11
102: iconst_0
103: newarray       double
105: astore        12
107: aconst_null
108: astore        13
110: new           #61
113: dup
114: aload         12
116: aload         13
118: invokespecial #62
121: astore        14
123: new           #63
126: dup
127: aload         11
129: aload         12
131: invokespecial #64
134: astore        15
136: aconst_null
137: astore        16
139: aload         11
141: aload         16
143: iconst_0
144: iconst_1
145: invokestatic  #65
148: istore        17
150: new           #66
153: dup
154: aload         11
156: invokespecial #67
159: astore        18
161: iconst_3
162: anewarray     #68
165: dup
166: iconst_0
167: aload         8
169: aastore
170: dup
171: iconst_1
172: aload         10
174: aastore
175: dup
176: iconst_2
177: aload         18
179: aastore
180: astore        19
182: aload         4
184: aload         19
186: invokevirtual #69
189: new           #260
192: dup
193: aload_1
194: aload_2
195: aload         19
197: checkcast     #261
200: invokespecial #262
203: astore        20
205: aload         20
207: invokevirtual #471
210: astore        21
212: aload         5
214: invokestatic  #16
217: aload         6
219: invokestatic  #16
222: aload         9
224: invokestatic  #16
227: aload         10
229: invokestatic  #70
232: aload         11
234: invokestatic  #70
237: aload         11
239: invokestatic  #71
242: ldc           #72
244: invokestatic  #73
247: aload         12
249: invokestatic  #70
252: aload         12
254: invokestatic  #71
257: ldc           #74
259: invokestatic  #73
262: new           #47
265: dup
266: invokespecial #48
269: ldc           #49
271: invokevirtual #50
274: iload         17
276: invokevirtual #75
279: ldc           #52
281: invokevirtual #50
284: iconst_1
285: invokevirtual #75
288: ldc           #49
290: invokevirtual #50
293: invokevirtual #53
296: iload         17
298: iconst_1
299: if_icmpne     306
302: iconst_1
303: goto          307
306: iconst_0
307: invokestatic  #54
310: aload         19
312: invokestatic  #70
315: aload         21
317: invokestatic  #70
320: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test127
Start line: 2712
End line: 2731
Method source code: 
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker1 = null;
        org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer gaussNewtonOptimizer2 = new org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer(false, pointVectorValuePairConvergenceChecker1);
        int int3 = gaussNewtonOptimizer2.getEvaluations();
        double double4 = gaussNewtonOptimizer2.getChiSquare();
        double double5 = gaussNewtonOptimizer2.getChiSquare();
        double[] doubleArray6 = gaussNewtonOptimizer2.getLowerBound();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair> pointVectorValuePairConvergenceChecker7 = gaussNewtonOptimizer2.getConvergenceChecker();
        double[] doubleArray8 = gaussNewtonOptimizer2.getLowerBound();
        double[] doubleArray9 = gaussNewtonOptimizer2.getLowerBound();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertNull(doubleArray6);
        org.junit.Assert.assertNull(pointVectorValuePairConvergenceChecker7);
        org.junit.Assert.assertNull(doubleArray8);
        org.junit.Assert.assertNull(doubleArray9);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #472
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #84
30: dup
31: iconst_0
32: aload_1
33: invokespecial #85
36: astore_2
37: aload_2
38: invokevirtual #96
41: istore_3
42: aload_2
43: invokevirtual #201
46: dstore        4
48: aload_2
49: invokevirtual #201
52: dstore        6
54: aload_2
55: invokevirtual #145
58: astore        8
60: aload_2
61: invokevirtual #109
64: astore        9
66: aload_2
67: invokevirtual #145
70: astore        10
72: aload_2
73: invokevirtual #145
76: astore        11
78: new           #47
81: dup
82: invokespecial #48
85: ldc           #49
87: invokevirtual #50
90: iload_3
91: invokevirtual #51
94: ldc           #52
96: invokevirtual #50
99: iconst_0
100: invokevirtual #51
103: ldc           #49
105: invokevirtual #50
108: invokevirtual #53
111: iload_3
112: ifne          119
115: iconst_1
116: goto          120
119: iconst_0
120: invokestatic  #54
123: new           #47
126: dup
127: invokespecial #48
130: ldc           #49
132: invokevirtual #50
135: dload         4
137: invokevirtual #106
140: ldc           #52
142: invokevirtual #50
145: dconst_0
146: invokevirtual #106
149: ldc           #49
151: invokevirtual #50
154: invokevirtual #53
157: dload         4
159: dconst_0
160: dcmpl
161: ifne          168
164: iconst_1
165: goto          169
168: iconst_0
169: invokestatic  #54
172: new           #47
175: dup
176: invokespecial #48
179: ldc           #49
181: invokevirtual #50
184: dload         6
186: invokevirtual #106
189: ldc           #52
191: invokevirtual #50
194: dconst_0
195: invokevirtual #106
198: ldc           #49
200: invokevirtual #50
203: invokevirtual #53
206: dload         6
208: dconst_0
209: dcmpl
210: ifne          217
213: iconst_1
214: goto          218
217: iconst_0
218: invokestatic  #54
221: aload         8
223: invokestatic  #16
226: aload         9
228: invokestatic  #16
231: aload         10
233: invokestatic  #16
236: aload         11
238: invokestatic  #16
241: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test128
Start line: 2734
End line: 2743
Method source code: 
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker simpleUnivariateValueChecker4 = new org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker((double) (-1.0f), 0.0d);
        org.apache.commons.math3.optim.univariate.BrentOptimizer brentOptimizer5 = new org.apache.commons.math3.optim.univariate.BrentOptimizer(0.125d, 9.99999999999998d, (org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.univariate.UnivariatePointValuePair>) simpleUnivariateValueChecker4);
        int int6 = brentOptimizer5.getEvaluations();
        int int7 = brentOptimizer5.getIterations();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #473
20: aastore
21: invokevirtual #7
24: pop
25: new           #149
28: dup
29: ldc2_w        #21
32: dconst_0
33: invokespecial #150
36: astore_1
37: new           #18
40: dup
41: ldc2_w        #250
44: ldc2_w        #252
47: aload_1
48: invokespecial #156
51: astore_2
52: aload_2
53: invokevirtual #474
56: istore_3
57: aload_2
58: invokevirtual #254
61: istore        4
63: new           #47
66: dup
67: invokespecial #48
70: ldc           #49
72: invokevirtual #50
75: iload_3
76: invokevirtual #51
79: ldc           #52
81: invokevirtual #50
84: iconst_0
85: invokevirtual #51
88: ldc           #49
90: invokevirtual #50
93: invokevirtual #53
96: iload_3
97: ifne          104
100: iconst_1
101: goto          105
104: iconst_0
105: invokestatic  #54
108: new           #47
111: dup
112: invokespecial #48
115: ldc           #49
117: invokevirtual #50
120: iload         4
122: invokevirtual #51
125: ldc           #52
127: invokevirtual #50
130: iconst_0
131: invokevirtual #51
134: ldc           #49
136: invokevirtual #50
139: invokevirtual #53
142: iload         4
144: ifne          151
147: iconst_1
148: goto          152
151: iconst_0
152: invokestatic  #54
155: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/RegressionTest0.class
Class name: RegressionTest0
Method name: test129
Start line: 2746
End line: 2786
Method source code: 
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker0 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer1 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker0);
        double[] doubleArray2 = simplexOptimizer1.getUpperBound();
        int int3 = simplexOptimizer1.getMaxEvaluations();
        int int4 = simplexOptimizer1.getMaxEvaluations();
        org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> pointValuePairConvergenceChecker5 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer simplexOptimizer6 = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer(pointValuePairConvergenceChecker5);
        double[] doubleArray7 = simplexOptimizer6.getUpperBound();
        double[] doubleArray8 = simplexOptimizer6.getStartPoint();
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction9 = null;
        org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction objectiveFunction10 = new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(multivariateFunction9);
        org.apache.commons.math3.analysis.MultivariateFunction multivariateFunction11 = objectiveFunction10.getObjectiveFunction();
        org.apache.commons.math3.optim.MaxEval maxEval12 = org.apache.commons.math3.optim.MaxEval.unlimited();
        double[] doubleArray14 = new double[] { 0.0f };
        double[] doubleArray15 = new double[] {};
        double[] doubleArray16 = null;
        org.apache.commons.math3.optim.PointVectorValuePair pointVectorValuePair17 = new org.apache.commons.math3.optim.PointVectorValuePair(doubleArray15, doubleArray16);
        org.apache.commons.math3.util.Pair<double[], double[]> doubleArrayPair18 = new org.apache.commons.math3.util.Pair<double[], double[]>(doubleArray14, doubleArray15);
        org.apache.commons.math3.util.MathArrays.OrderDirection orderDirection19 = null;
        boolean boolean22 = org.apache.commons.math3.util.MathArrays.checkOrder(doubleArray14, orderDirection19, false, true);
        org.apache.commons.math3.optim.nonlinear.vector.Target target23 = new org.apache.commons.math3.optim.nonlinear.vector.Target(doubleArray14);
        org.apache.commons.math3.optim.OptimizationData[] optimizationDataArray24 = new org.apache.commons.math3.optim.OptimizationData[] { objectiveFunction10, maxEval12, target23 };
        simplexOptimizer6.parseOptimizationData(optimizationDataArray24);
        simplexOptimizer1.parseOptimizationData(optimizationDataArray24);
        org.junit.Assert.assertNull(doubleArray2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(doubleArray7);
        org.junit.Assert.assertNull(doubleArray8);
        org.junit.Assert.assertNull(multivariateFunction11);
        org.junit.Assert.assertNotNull(maxEval12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(optimizationDataArray24);
    }
Method byte code: 
0: getstatic     #2
3: ifeq          25
6: getstatic     #3
9: ldc           #4
11: iconst_1
12: anewarray     #5
15: dup
16: iconst_0
17: ldc_w         #475
20: aastore
21: invokevirtual #7
24: pop
25: aconst_null
26: astore_1
27: new           #8
30: dup
31: aload_1
32: invokespecial #9
35: astore_2
36: aload_2
37: invokevirtual #10
40: astore_3
41: aload_2
42: invokevirtual #94
45: istore        4
47: aload_2
48: invokevirtual #94
51: istore        5
53: aconst_null
54: astore        6
56: new           #8
59: dup
60: aload         6
62: invokespecial #9
65: astore        7
67: aload         7
69: invokevirtual #10
72: astore        8
74: aload         7
76: invokevirtual #56
79: astore        9
81: aconst_null
82: astore        10
84: new           #57
87: dup
88: aload         10
90: invokespecial #58
93: astore        11
95: aload         11
97: invokevirtual #59
100: astore        12
102: invokestatic  #60
105: astore        13
107: iconst_1
108: newarray       double
110: dup
111: iconst_0
112: dconst_0
113: dastore
114: astore        14
116: iconst_0
117: newarray       double
119: astore        15
121: aconst_null
122: astore        16
124: new           #61
127: dup
128: aload         15
130: aload         16
132: invokespecial #62
135: astore        17
137: new           #63
140: dup
141: aload         14
143: aload         15
145: invokespecial #64
148: astore        18
150: aconst_null
151: astore        19
153: aload         14
155: aload         19
157: iconst_0
158: iconst_1
159: invokestatic  #65
162: istore        20
164: new           #66
167: dup
168: aload         14
170: invokespecial #67
173: astore        21
175: iconst_3
176: anewarray     #68
179: dup
180: iconst_0
181: aload         11
183: aastore
184: dup
185: iconst_1
186: aload         13
188: aastore
189: dup
190: iconst_2
191: aload         21
193: aastore
194: astore        22
196: aload         7
198: aload         22
200: invokevirtual #69
203: aload_2
204: aload         22
206: invokevirtual #69
209: aload_3
210: invokestatic  #16
213: new           #47
216: dup
217: invokespecial #48
220: ldc           #49
222: invokevirtual #50
225: iload         4
227: invokevirtual #51
230: ldc           #52
232: invokevirtual #50
235: iconst_0
236: invokevirtual #51
239: ldc           #49
241: invokevirtual #50
244: invokevirtual #53
247: iload         4
249: ifne          256
252: iconst_1
253: goto          257
256: iconst_0
257: invokestatic  #54
260: new           #47
263: dup
264: invokespecial #48
267: ldc           #49
269: invokevirtual #50
272: iload         5
274: invokevirtual #51
277: ldc           #52
279: invokevirtual #50
282: iconst_0
283: invokevirtual #51
286: ldc           #49
288: invokevirtual #50
291: invokevirtual #53
294: iload         5
296: ifne          303
299: iconst_1
300: goto          304
303: iconst_0
304: invokestatic  #54
307: aload         8
309: invokestatic  #16
312: aload         9
314: invokestatic  #16
317: aload         12
319: invokestatic  #16
322: aload         13
324: invokestatic  #70
327: aload         14
329: invokestatic  #70
332: aload         14
334: invokestatic  #71
337: ldc           #72
339: invokestatic  #73
342: aload         15
344: invokestatic  #70
347: aload         15
349: invokestatic  #71
352: ldc           #74
354: invokestatic  #73
357: new           #47
360: dup
361: invokespecial #48
364: ldc           #49
366: invokevirtual #50
369: iload         20
371: invokevirtual #75
374: ldc           #52
376: invokevirtual #50
379: iconst_1
380: invokevirtual #75
383: ldc           #49
385: invokevirtual #50
388: invokevirtual #53
391: iload         20
393: iconst_1
394: if_icmpne     401
397: iconst_1
398: goto          402
401: iconst_0
402: invokestatic  #54
405: aload         22
407: invokestatic  #70
410: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testTrivial
Start line: 102
End line: 112
Method source code: 
    public void testTrivial() {
        LinearProblem problem =
            new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });
        NonLinearConjugateGradientOptimizer optimizer =
            new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,
                                                    new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum =
            optimizer.optimize(100, problem, GoalType.MINIMIZE, new double[] { 0 });
        Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);
        Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);
    }
Method byte code: 
0: new           #2
3: dup
4: iconst_1
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_1
11: newarray       double
13: dup
14: iconst_0
15: ldc2_w        #4
18: dastore
19: aastore
20: iconst_1
21: newarray       double
23: dup
24: iconst_0
25: ldc2_w        #6
28: dastore
29: invokespecial #8
32: astore_1
33: new           #9
36: dup
37: getstatic     #10
40: new           #11
43: dup
44: ldc2_w        #12
47: ldc2_w        #12
50: invokespecial #14
53: invokespecial #15
56: astore_2
57: aload_2
58: bipush        100
60: aload_1
61: getstatic     #16
64: iconst_1
65: newarray       double
67: dup
68: iconst_0
69: dconst_0
70: dastore
71: invokevirtual #17
74: astore_3
75: ldc2_w        #18
78: aload_3
79: invokevirtual #20
82: iconst_0
83: daload
84: ldc2_w        #21
87: invokestatic  #23
90: dconst_0
91: aload_3
92: invokevirtual #24
95: checkcast     #25
98: invokevirtual #26
101: ldc2_w        #21
104: invokestatic  #23
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testColumnsPermutation
Start line: 115
End line: 129
Method source code: 
    public void testColumnsPermutation() {
        LinearProblem problem =
            new LinearProblem(new double[][] { { 1.0, -1.0 }, { 0.0, 2.0 }, { 1.0, -2.0 } },
                              new double[] { 4.0, 6.0, 1.0 });

        NonLinearConjugateGradientOptimizer optimizer =
            new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,
                                                    new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum =
            optimizer.optimize(100, problem, GoalType.MINIMIZE, new double[] { 0, 0 });
        Assert.assertEquals(7.0, optimum.getPoint()[0], 1.0e-10);
        Assert.assertEquals(3.0, optimum.getPoint()[1], 1.0e-10);
        Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);

    }
Method byte code: 
0: new           #2
3: dup
4: iconst_3
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_2
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: ldc2_w        #27
22: dastore
23: aastore
24: dup
25: iconst_1
26: iconst_2
27: newarray       double
29: dup
30: iconst_0
31: dconst_0
32: dastore
33: dup
34: iconst_1
35: ldc2_w        #4
38: dastore
39: aastore
40: dup
41: iconst_2
42: iconst_2
43: newarray       double
45: dup
46: iconst_0
47: dconst_1
48: dastore
49: dup
50: iconst_1
51: ldc2_w        #29
54: dastore
55: aastore
56: iconst_3
57: newarray       double
59: dup
60: iconst_0
61: ldc2_w        #31
64: dastore
65: dup
66: iconst_1
67: ldc2_w        #33
70: dastore
71: dup
72: iconst_2
73: dconst_1
74: dastore
75: invokespecial #8
78: astore_1
79: new           #9
82: dup
83: getstatic     #10
86: new           #11
89: dup
90: ldc2_w        #12
93: ldc2_w        #12
96: invokespecial #14
99: invokespecial #15
102: astore_2
103: aload_2
104: bipush        100
106: aload_1
107: getstatic     #16
110: iconst_2
111: newarray       double
113: dup
114: iconst_0
115: dconst_0
116: dastore
117: dup
118: iconst_1
119: dconst_0
120: dastore
121: invokevirtual #17
124: astore_3
125: ldc2_w        #35
128: aload_3
129: invokevirtual #20
132: iconst_0
133: daload
134: ldc2_w        #21
137: invokestatic  #23
140: ldc2_w        #6
143: aload_3
144: invokevirtual #20
147: iconst_1
148: daload
149: ldc2_w        #21
152: invokestatic  #23
155: dconst_0
156: aload_3
157: invokevirtual #24
160: checkcast     #25
163: invokevirtual #26
166: ldc2_w        #21
169: invokestatic  #23
172: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testNoDependency
Start line: 132
End line: 149
Method source code: 
    public void testNoDependency() {
        LinearProblem problem = new LinearProblem(new double[][] {
                { 2, 0, 0, 0, 0, 0 },
                { 0, 2, 0, 0, 0, 0 },
                { 0, 0, 2, 0, 0, 0 },
                { 0, 0, 0, 2, 0, 0 },
                { 0, 0, 0, 0, 2, 0 },
                { 0, 0, 0, 0, 0, 2 }
        }, new double[] { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 });
        NonLinearConjugateGradientOptimizer optimizer =
            new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,
                                                    new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum =
            optimizer.optimize(100, problem, GoalType.MINIMIZE, new double[] { 0, 0, 0, 0, 0, 0 });
        for (int i = 0; i < problem.target.length; ++i) {
            Assert.assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);
        }
    }
Method byte code: 
0: new           #2
3: dup
4: bipush        6
6: anewarray     #3
9: dup
10: iconst_0
11: bipush        6
13: newarray       double
15: dup
16: iconst_0
17: ldc2_w        #4
20: dastore
21: dup
22: iconst_1
23: dconst_0
24: dastore
25: dup
26: iconst_2
27: dconst_0
28: dastore
29: dup
30: iconst_3
31: dconst_0
32: dastore
33: dup
34: iconst_4
35: dconst_0
36: dastore
37: dup
38: iconst_5
39: dconst_0
40: dastore
41: aastore
42: dup
43: iconst_1
44: bipush        6
46: newarray       double
48: dup
49: iconst_0
50: dconst_0
51: dastore
52: dup
53: iconst_1
54: ldc2_w        #4
57: dastore
58: dup
59: iconst_2
60: dconst_0
61: dastore
62: dup
63: iconst_3
64: dconst_0
65: dastore
66: dup
67: iconst_4
68: dconst_0
69: dastore
70: dup
71: iconst_5
72: dconst_0
73: dastore
74: aastore
75: dup
76: iconst_2
77: bipush        6
79: newarray       double
81: dup
82: iconst_0
83: dconst_0
84: dastore
85: dup
86: iconst_1
87: dconst_0
88: dastore
89: dup
90: iconst_2
91: ldc2_w        #4
94: dastore
95: dup
96: iconst_3
97: dconst_0
98: dastore
99: dup
100: iconst_4
101: dconst_0
102: dastore
103: dup
104: iconst_5
105: dconst_0
106: dastore
107: aastore
108: dup
109: iconst_3
110: bipush        6
112: newarray       double
114: dup
115: iconst_0
116: dconst_0
117: dastore
118: dup
119: iconst_1
120: dconst_0
121: dastore
122: dup
123: iconst_2
124: dconst_0
125: dastore
126: dup
127: iconst_3
128: ldc2_w        #4
131: dastore
132: dup
133: iconst_4
134: dconst_0
135: dastore
136: dup
137: iconst_5
138: dconst_0
139: dastore
140: aastore
141: dup
142: iconst_4
143: bipush        6
145: newarray       double
147: dup
148: iconst_0
149: dconst_0
150: dastore
151: dup
152: iconst_1
153: dconst_0
154: dastore
155: dup
156: iconst_2
157: dconst_0
158: dastore
159: dup
160: iconst_3
161: dconst_0
162: dastore
163: dup
164: iconst_4
165: ldc2_w        #4
168: dastore
169: dup
170: iconst_5
171: dconst_0
172: dastore
173: aastore
174: dup
175: iconst_5
176: bipush        6
178: newarray       double
180: dup
181: iconst_0
182: dconst_0
183: dastore
184: dup
185: iconst_1
186: dconst_0
187: dastore
188: dup
189: iconst_2
190: dconst_0
191: dastore
192: dup
193: iconst_3
194: dconst_0
195: dastore
196: dup
197: iconst_4
198: dconst_0
199: dastore
200: dup
201: iconst_5
202: ldc2_w        #4
205: dastore
206: aastore
207: bipush        6
209: newarray       double
211: dup
212: iconst_0
213: dconst_0
214: dastore
215: dup
216: iconst_1
217: ldc2_w        #37
220: dastore
221: dup
222: iconst_2
223: ldc2_w        #39
226: dastore
227: dup
228: iconst_3
229: ldc2_w        #41
232: dastore
233: dup
234: iconst_4
235: ldc2_w        #43
238: dastore
239: dup
240: iconst_5
241: ldc2_w        #45
244: dastore
245: invokespecial #8
248: astore_1
249: new           #9
252: dup
253: getstatic     #10
256: new           #11
259: dup
260: ldc2_w        #12
263: ldc2_w        #12
266: invokespecial #14
269: invokespecial #15
272: astore_2
273: aload_2
274: bipush        100
276: aload_1
277: getstatic     #16
280: bipush        6
282: newarray       double
284: dup
285: iconst_0
286: dconst_0
287: dastore
288: dup
289: iconst_1
290: dconst_0
291: dastore
292: dup
293: iconst_2
294: dconst_0
295: dastore
296: dup
297: iconst_3
298: dconst_0
299: dastore
300: dup
301: iconst_4
302: dconst_0
303: dastore
304: dup
305: iconst_5
306: dconst_0
307: dastore
308: invokevirtual #17
311: astore_3
312: iconst_0
313: istore        4
315: iload         4
317: aload_1
318: getfield      #47
321: arraylength
322: if_icmpge     351
325: ldc2_w        #48
328: iload         4
330: i2d
331: dmul
332: aload_3
333: invokevirtual #20
336: iload         4
338: daload
339: ldc2_w        #21
342: invokestatic  #23
345: iinc          4, 1
348: goto          315
351: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testOneSet
Start line: 152
End line: 167
Method source code: 
    public void testOneSet() {
        LinearProblem problem = new LinearProblem(new double[][] {
                {  1,  0, 0 },
                { -1,  1, 0 },
                {  0, -1, 1 }
        }, new double[] { 1, 1, 1});
        NonLinearConjugateGradientOptimizer optimizer =
            new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,
                                                    new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum =
            optimizer.optimize(100, problem, GoalType.MINIMIZE, new double[] { 0, 0, 0 });
        Assert.assertEquals(1.0, optimum.getPoint()[0], 1.0e-10);
        Assert.assertEquals(2.0, optimum.getPoint()[1], 1.0e-10);
        Assert.assertEquals(3.0, optimum.getPoint()[2], 1.0e-10);

    }
Method byte code: 
0: new           #2
3: dup
4: iconst_3
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_3
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: dconst_0
20: dastore
21: dup
22: iconst_2
23: dconst_0
24: dastore
25: aastore
26: dup
27: iconst_1
28: iconst_3
29: newarray       double
31: dup
32: iconst_0
33: ldc2_w        #27
36: dastore
37: dup
38: iconst_1
39: dconst_1
40: dastore
41: dup
42: iconst_2
43: dconst_0
44: dastore
45: aastore
46: dup
47: iconst_2
48: iconst_3
49: newarray       double
51: dup
52: iconst_0
53: dconst_0
54: dastore
55: dup
56: iconst_1
57: ldc2_w        #27
60: dastore
61: dup
62: iconst_2
63: dconst_1
64: dastore
65: aastore
66: iconst_3
67: newarray       double
69: dup
70: iconst_0
71: dconst_1
72: dastore
73: dup
74: iconst_1
75: dconst_1
76: dastore
77: dup
78: iconst_2
79: dconst_1
80: dastore
81: invokespecial #8
84: astore_1
85: new           #9
88: dup
89: getstatic     #10
92: new           #11
95: dup
96: ldc2_w        #12
99: ldc2_w        #12
102: invokespecial #14
105: invokespecial #15
108: astore_2
109: aload_2
110: bipush        100
112: aload_1
113: getstatic     #16
116: iconst_3
117: newarray       double
119: dup
120: iconst_0
121: dconst_0
122: dastore
123: dup
124: iconst_1
125: dconst_0
126: dastore
127: dup
128: iconst_2
129: dconst_0
130: dastore
131: invokevirtual #17
134: astore_3
135: dconst_1
136: aload_3
137: invokevirtual #20
140: iconst_0
141: daload
142: ldc2_w        #21
145: invokestatic  #23
148: ldc2_w        #4
151: aload_3
152: invokevirtual #20
155: iconst_1
156: daload
157: ldc2_w        #21
160: invokestatic  #23
163: ldc2_w        #6
166: aload_3
167: invokevirtual #20
170: iconst_2
171: daload
172: ldc2_w        #21
175: invokestatic  #23
178: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testTwoSets
Start line: 170
End line: 210
Method source code: 
    public void testTwoSets() {
        final double epsilon = 1.0e-7;
        LinearProblem problem = new LinearProblem(new double[][] {
                {  2,  1,   0,  4,       0, 0 },
                { -4, -2,   3, -7,       0, 0 },
                {  4,  1,  -2,  8,       0, 0 },
                {  0, -3, -12, -1,       0, 0 },
                {  0,  0,   0,  0, epsilon, 1 },
                {  0,  0,   0,  0,       1, 1 }
        }, new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2});

        final Preconditioner preconditioner
            = new Preconditioner() {
                    public double[] precondition(double[] point, double[] r) {
                        double[] d = r.clone();
                        d[0] /=  72.0;
                        d[1] /=  30.0;
                        d[2] /= 314.0;
                        d[3] /= 260.0;
                        d[4] /= 2 * (1 + epsilon * epsilon);
                        d[5] /= 4.0;
                        return d;
                    }
                };

        NonLinearConjugateGradientOptimizer optimizer =
            new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,
                                                    new SimpleValueChecker(1e-13, 1e-13),
                                                    new BrentSolver(),
                                                    preconditioner);
                                                    
        PointValuePair optimum =
            optimizer.optimize(100, problem, GoalType.MINIMIZE, new double[] { 0, 0, 0, 0, 0, 0 });
        Assert.assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);
        Assert.assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);
        Assert.assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);
        Assert.assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);
        Assert.assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);
        Assert.assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);

    }
Method byte code: 
0: ldc2_w        #50
3: dstore_1
4: new           #2
7: dup
8: bipush        6
10: anewarray     #3
13: dup
14: iconst_0
15: bipush        6
17: newarray       double
19: dup
20: iconst_0
21: ldc2_w        #4
24: dastore
25: dup
26: iconst_1
27: dconst_1
28: dastore
29: dup
30: iconst_2
31: dconst_0
32: dastore
33: dup
34: iconst_3
35: ldc2_w        #31
38: dastore
39: dup
40: iconst_4
41: dconst_0
42: dastore
43: dup
44: iconst_5
45: dconst_0
46: dastore
47: aastore
48: dup
49: iconst_1
50: bipush        6
52: newarray       double
54: dup
55: iconst_0
56: ldc2_w        #52
59: dastore
60: dup
61: iconst_1
62: ldc2_w        #29
65: dastore
66: dup
67: iconst_2
68: ldc2_w        #6
71: dastore
72: dup
73: iconst_3
74: ldc2_w        #54
77: dastore
78: dup
79: iconst_4
80: dconst_0
81: dastore
82: dup
83: iconst_5
84: dconst_0
85: dastore
86: aastore
87: dup
88: iconst_2
89: bipush        6
91: newarray       double
93: dup
94: iconst_0
95: ldc2_w        #31
98: dastore
99: dup
100: iconst_1
101: dconst_1
102: dastore
103: dup
104: iconst_2
105: ldc2_w        #29
108: dastore
109: dup
110: iconst_3
111: ldc2_w        #56
114: dastore
115: dup
116: iconst_4
117: dconst_0
118: dastore
119: dup
120: iconst_5
121: dconst_0
122: dastore
123: aastore
124: dup
125: iconst_3
126: bipush        6
128: newarray       double
130: dup
131: iconst_0
132: dconst_0
133: dastore
134: dup
135: iconst_1
136: ldc2_w        #58
139: dastore
140: dup
141: iconst_2
142: ldc2_w        #60
145: dastore
146: dup
147: iconst_3
148: ldc2_w        #27
151: dastore
152: dup
153: iconst_4
154: dconst_0
155: dastore
156: dup
157: iconst_5
158: dconst_0
159: dastore
160: aastore
161: dup
162: iconst_4
163: bipush        6
165: newarray       double
167: dup
168: iconst_0
169: dconst_0
170: dastore
171: dup
172: iconst_1
173: dconst_0
174: dastore
175: dup
176: iconst_2
177: dconst_0
178: dastore
179: dup
180: iconst_3
181: dconst_0
182: dastore
183: dup
184: iconst_4
185: ldc2_w        #50
188: dastore
189: dup
190: iconst_5
191: dconst_1
192: dastore
193: aastore
194: dup
195: iconst_5
196: bipush        6
198: newarray       double
200: dup
201: iconst_0
202: dconst_0
203: dastore
204: dup
205: iconst_1
206: dconst_0
207: dastore
208: dup
209: iconst_2
210: dconst_0
211: dastore
212: dup
213: iconst_3
214: dconst_0
215: dastore
216: dup
217: iconst_4
218: dconst_1
219: dastore
220: dup
221: iconst_5
222: dconst_1
223: dastore
224: aastore
225: bipush        6
227: newarray       double
229: dup
230: iconst_0
231: ldc2_w        #4
234: dastore
235: dup
236: iconst_1
237: ldc2_w        #62
240: dastore
241: dup
242: iconst_2
243: ldc2_w        #4
246: dastore
247: dup
248: iconst_3
249: ldc2_w        #4
252: dastore
253: dup
254: iconst_4
255: ldc2_w        #64
258: dastore
259: dup
260: iconst_5
261: ldc2_w        #4
264: dastore
265: invokespecial #8
268: astore_3
269: new           #66
272: dup
273: aload_0
274: invokespecial #67
277: astore        4
279: new           #9
282: dup
283: getstatic     #10
286: new           #11
289: dup
290: ldc2_w        #68
293: ldc2_w        #68
296: invokespecial #14
299: new           #70
302: dup
303: invokespecial #71
306: aload         4
308: invokespecial #72
311: astore        5
313: aload         5
315: bipush        100
317: aload_3
318: getstatic     #16
321: bipush        6
323: newarray       double
325: dup
326: iconst_0
327: dconst_0
328: dastore
329: dup
330: iconst_1
331: dconst_0
332: dastore
333: dup
334: iconst_2
335: dconst_0
336: dastore
337: dup
338: iconst_3
339: dconst_0
340: dastore
341: dup
342: iconst_4
343: dconst_0
344: dastore
345: dup
346: iconst_5
347: dconst_0
348: dastore
349: invokevirtual #17
352: astore        6
354: ldc2_w        #6
357: aload         6
359: invokevirtual #20
362: iconst_0
363: daload
364: ldc2_w        #21
367: invokestatic  #23
370: ldc2_w        #31
373: aload         6
375: invokevirtual #20
378: iconst_1
379: daload
380: ldc2_w        #21
383: invokestatic  #23
386: ldc2_w        #27
389: aload         6
391: invokevirtual #20
394: iconst_2
395: daload
396: ldc2_w        #21
399: invokestatic  #23
402: ldc2_w        #29
405: aload         6
407: invokevirtual #20
410: iconst_3
411: daload
412: ldc2_w        #21
415: invokestatic  #23
418: ldc2_w        #73
421: aload         6
423: invokevirtual #20
426: iconst_4
427: daload
428: ldc2_w        #21
431: invokestatic  #23
434: ldc2_w        #75
437: aload         6
439: invokevirtual #20
442: iconst_5
443: daload
444: ldc2_w        #21
447: invokestatic  #23
450: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testNonInversible
Start line: 213
End line: 225
Method source code: 
    public void testNonInversible() {
        LinearProblem problem = new LinearProblem(new double[][] {
                {  1, 2, -3 },
                {  2, 1,  3 },
                { -3, 0, -9 }
        }, new double[] { 1, 1, 1 });
        NonLinearConjugateGradientOptimizer optimizer =
            new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,
                                                    new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum =
                optimizer.optimize(100, problem, GoalType.MINIMIZE, new double[] { 0, 0, 0 });
        Assert.assertTrue(optimum.getValue() > 0.5);
    }
Method byte code: 
0: new           #2
3: dup
4: iconst_3
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_3
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: ldc2_w        #4
22: dastore
23: dup
24: iconst_2
25: ldc2_w        #58
28: dastore
29: aastore
30: dup
31: iconst_1
32: iconst_3
33: newarray       double
35: dup
36: iconst_0
37: ldc2_w        #4
40: dastore
41: dup
42: iconst_1
43: dconst_1
44: dastore
45: dup
46: iconst_2
47: ldc2_w        #6
50: dastore
51: aastore
52: dup
53: iconst_2
54: iconst_3
55: newarray       double
57: dup
58: iconst_0
59: ldc2_w        #58
62: dastore
63: dup
64: iconst_1
65: dconst_0
66: dastore
67: dup
68: iconst_2
69: ldc2_w        #62
72: dastore
73: aastore
74: iconst_3
75: newarray       double
77: dup
78: iconst_0
79: dconst_1
80: dastore
81: dup
82: iconst_1
83: dconst_1
84: dastore
85: dup
86: iconst_2
87: dconst_1
88: dastore
89: invokespecial #8
92: astore_1
93: new           #9
96: dup
97: getstatic     #10
100: new           #11
103: dup
104: ldc2_w        #12
107: ldc2_w        #12
110: invokespecial #14
113: invokespecial #15
116: astore_2
117: aload_2
118: bipush        100
120: aload_1
121: getstatic     #16
124: iconst_3
125: newarray       double
127: dup
128: iconst_0
129: dconst_0
130: dastore
131: dup
132: iconst_1
133: dconst_0
134: dastore
135: dup
136: iconst_2
137: dconst_0
138: dastore
139: invokevirtual #17
142: astore_3
143: aload_3
144: invokevirtual #24
147: checkcast     #25
150: invokevirtual #26
153: ldc2_w        #77
156: dcmpl
157: ifle          164
160: iconst_1
161: goto          165
164: iconst_0
165: invokestatic  #79
168: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testIllConditioned
Start line: 228
End line: 259
Method source code: 
    public void testIllConditioned() {
        LinearProblem problem1 = new LinearProblem(new double[][] {
                { 10.0, 7.0,  8.0,  7.0 },
                {  7.0, 5.0,  6.0,  5.0 },
                {  8.0, 6.0, 10.0,  9.0 },
                {  7.0, 5.0,  9.0, 10.0 }
        }, new double[] { 32, 23, 33, 31 });
        NonLinearConjugateGradientOptimizer optimizer =
            new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,
                                                    new SimpleValueChecker(1e-13, 1e-13),
                                                    new BrentSolver(1e-15, 1e-15));
        PointValuePair optimum1 =
            optimizer.optimize(200, problem1, GoalType.MINIMIZE, new double[] { 0, 1, 2, 3 });
        Assert.assertEquals(1.0, optimum1.getPoint()[0], 1.0e-4);
        Assert.assertEquals(1.0, optimum1.getPoint()[1], 1.0e-4);
        Assert.assertEquals(1.0, optimum1.getPoint()[2], 1.0e-4);
        Assert.assertEquals(1.0, optimum1.getPoint()[3], 1.0e-4);

        LinearProblem problem2 = new LinearProblem(new double[][] {
                { 10.00, 7.00, 8.10, 7.20 },
                {  7.08, 5.04, 6.00, 5.00 },
                {  8.00, 5.98, 9.89, 9.00 },
                {  6.99, 4.99, 9.00, 9.98 }
        }, new double[] { 32, 23, 33, 31 });
        PointValuePair optimum2 =
            optimizer.optimize(200, problem2, GoalType.MINIMIZE, new double[] { 0, 1, 2, 3 });
        Assert.assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-1);
        Assert.assertEquals(137.0, optimum2.getPoint()[1], 1.0e-1);
        Assert.assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-1);
        Assert.assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-1);

    }
Method byte code: 
0: new           #2
3: dup
4: iconst_4
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_4
11: newarray       double
13: dup
14: iconst_0
15: ldc2_w        #80
18: dastore
19: dup
20: iconst_1
21: ldc2_w        #35
24: dastore
25: dup
26: iconst_2
27: ldc2_w        #56
30: dastore
31: dup
32: iconst_3
33: ldc2_w        #35
36: dastore
37: aastore
38: dup
39: iconst_1
40: iconst_4
41: newarray       double
43: dup
44: iconst_0
45: ldc2_w        #35
48: dastore
49: dup
50: iconst_1
51: ldc2_w        #82
54: dastore
55: dup
56: iconst_2
57: ldc2_w        #33
60: dastore
61: dup
62: iconst_3
63: ldc2_w        #82
66: dastore
67: aastore
68: dup
69: iconst_2
70: iconst_4
71: newarray       double
73: dup
74: iconst_0
75: ldc2_w        #56
78: dastore
79: dup
80: iconst_1
81: ldc2_w        #33
84: dastore
85: dup
86: iconst_2
87: ldc2_w        #80
90: dastore
91: dup
92: iconst_3
93: ldc2_w        #84
96: dastore
97: aastore
98: dup
99: iconst_3
100: iconst_4
101: newarray       double
103: dup
104: iconst_0
105: ldc2_w        #35
108: dastore
109: dup
110: iconst_1
111: ldc2_w        #82
114: dastore
115: dup
116: iconst_2
117: ldc2_w        #84
120: dastore
121: dup
122: iconst_3
123: ldc2_w        #80
126: dastore
127: aastore
128: iconst_4
129: newarray       double
131: dup
132: iconst_0
133: ldc2_w        #86
136: dastore
137: dup
138: iconst_1
139: ldc2_w        #88
142: dastore
143: dup
144: iconst_2
145: ldc2_w        #90
148: dastore
149: dup
150: iconst_3
151: ldc2_w        #92
154: dastore
155: invokespecial #8
158: astore_1
159: new           #9
162: dup
163: getstatic     #10
166: new           #11
169: dup
170: ldc2_w        #68
173: ldc2_w        #68
176: invokespecial #14
179: new           #70
182: dup
183: ldc2_w        #94
186: ldc2_w        #94
189: invokespecial #96
192: invokespecial #97
195: astore_2
196: aload_2
197: sipush        200
200: aload_1
201: getstatic     #16
204: iconst_4
205: newarray       double
207: dup
208: iconst_0
209: dconst_0
210: dastore
211: dup
212: iconst_1
213: dconst_1
214: dastore
215: dup
216: iconst_2
217: ldc2_w        #4
220: dastore
221: dup
222: iconst_3
223: ldc2_w        #6
226: dastore
227: invokevirtual #17
230: astore_3
231: dconst_1
232: aload_3
233: invokevirtual #20
236: iconst_0
237: daload
238: ldc2_w        #98
241: invokestatic  #23
244: dconst_1
245: aload_3
246: invokevirtual #20
249: iconst_1
250: daload
251: ldc2_w        #98
254: invokestatic  #23
257: dconst_1
258: aload_3
259: invokevirtual #20
262: iconst_2
263: daload
264: ldc2_w        #98
267: invokestatic  #23
270: dconst_1
271: aload_3
272: invokevirtual #20
275: iconst_3
276: daload
277: ldc2_w        #98
280: invokestatic  #23
283: new           #2
286: dup
287: iconst_4
288: anewarray     #3
291: dup
292: iconst_0
293: iconst_4
294: newarray       double
296: dup
297: iconst_0
298: ldc2_w        #80
301: dastore
302: dup
303: iconst_1
304: ldc2_w        #35
307: dastore
308: dup
309: iconst_2
310: ldc2_w        #100
313: dastore
314: dup
315: iconst_3
316: ldc2_w        #102
319: dastore
320: aastore
321: dup
322: iconst_1
323: iconst_4
324: newarray       double
326: dup
327: iconst_0
328: ldc2_w        #104
331: dastore
332: dup
333: iconst_1
334: ldc2_w        #106
337: dastore
338: dup
339: iconst_2
340: ldc2_w        #33
343: dastore
344: dup
345: iconst_3
346: ldc2_w        #82
349: dastore
350: aastore
351: dup
352: iconst_2
353: iconst_4
354: newarray       double
356: dup
357: iconst_0
358: ldc2_w        #56
361: dastore
362: dup
363: iconst_1
364: ldc2_w        #108
367: dastore
368: dup
369: iconst_2
370: ldc2_w        #110
373: dastore
374: dup
375: iconst_3
376: ldc2_w        #84
379: dastore
380: aastore
381: dup
382: iconst_3
383: iconst_4
384: newarray       double
386: dup
387: iconst_0
388: ldc2_w        #112
391: dastore
392: dup
393: iconst_1
394: ldc2_w        #114
397: dastore
398: dup
399: iconst_2
400: ldc2_w        #84
403: dastore
404: dup
405: iconst_3
406: ldc2_w        #116
409: dastore
410: aastore
411: iconst_4
412: newarray       double
414: dup
415: iconst_0
416: ldc2_w        #86
419: dastore
420: dup
421: iconst_1
422: ldc2_w        #88
425: dastore
426: dup
427: iconst_2
428: ldc2_w        #90
431: dastore
432: dup
433: iconst_3
434: ldc2_w        #92
437: dastore
438: invokespecial #8
441: astore        4
443: aload_2
444: sipush        200
447: aload         4
449: getstatic     #16
452: iconst_4
453: newarray       double
455: dup
456: iconst_0
457: dconst_0
458: dastore
459: dup
460: iconst_1
461: dconst_1
462: dastore
463: dup
464: iconst_2
465: ldc2_w        #4
468: dastore
469: dup
470: iconst_3
471: ldc2_w        #6
474: dastore
475: invokevirtual #17
478: astore        5
480: ldc2_w        #118
483: aload         5
485: invokevirtual #20
488: iconst_0
489: daload
490: ldc2_w        #120
493: invokestatic  #23
496: ldc2_w        #122
499: aload         5
501: invokevirtual #20
504: iconst_1
505: daload
506: ldc2_w        #120
509: invokestatic  #23
512: ldc2_w        #124
515: aload         5
517: invokevirtual #20
520: iconst_2
521: daload
522: ldc2_w        #120
525: invokestatic  #23
528: ldc2_w        #126
531: aload         5
533: invokevirtual #20
536: iconst_3
537: daload
538: ldc2_w        #120
541: invokestatic  #23
544: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testMoreEstimatedParametersSimple
Start line: 262
End line: 276
Method source code: 
    public void testMoreEstimatedParametersSimple() {
        LinearProblem problem = new LinearProblem(new double[][] {
                { 3.0, 2.0,  0.0, 0.0 },
                { 0.0, 1.0, -1.0, 1.0 },
                { 2.0, 0.0,  1.0, 0.0 }
        }, new double[] { 7.0, 3.0, 5.0 });

        NonLinearConjugateGradientOptimizer optimizer =
            new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,
                                                    new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum =
            optimizer.optimize(100, problem, GoalType.MINIMIZE, new double[] { 7, 6, 5, 4 });
        Assert.assertEquals(0, optimum.getValue(), 1.0e-10);

    }
Method byte code: 
0: new           #2
3: dup
4: iconst_3
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_4
11: newarray       double
13: dup
14: iconst_0
15: ldc2_w        #6
18: dastore
19: dup
20: iconst_1
21: ldc2_w        #4
24: dastore
25: dup
26: iconst_2
27: dconst_0
28: dastore
29: dup
30: iconst_3
31: dconst_0
32: dastore
33: aastore
34: dup
35: iconst_1
36: iconst_4
37: newarray       double
39: dup
40: iconst_0
41: dconst_0
42: dastore
43: dup
44: iconst_1
45: dconst_1
46: dastore
47: dup
48: iconst_2
49: ldc2_w        #27
52: dastore
53: dup
54: iconst_3
55: dconst_1
56: dastore
57: aastore
58: dup
59: iconst_2
60: iconst_4
61: newarray       double
63: dup
64: iconst_0
65: ldc2_w        #4
68: dastore
69: dup
70: iconst_1
71: dconst_0
72: dastore
73: dup
74: iconst_2
75: dconst_1
76: dastore
77: dup
78: iconst_3
79: dconst_0
80: dastore
81: aastore
82: iconst_3
83: newarray       double
85: dup
86: iconst_0
87: ldc2_w        #35
90: dastore
91: dup
92: iconst_1
93: ldc2_w        #6
96: dastore
97: dup
98: iconst_2
99: ldc2_w        #82
102: dastore
103: invokespecial #8
106: astore_1
107: new           #9
110: dup
111: getstatic     #10
114: new           #11
117: dup
118: ldc2_w        #12
121: ldc2_w        #12
124: invokespecial #14
127: invokespecial #15
130: astore_2
131: aload_2
132: bipush        100
134: aload_1
135: getstatic     #16
138: iconst_4
139: newarray       double
141: dup
142: iconst_0
143: ldc2_w        #35
146: dastore
147: dup
148: iconst_1
149: ldc2_w        #33
152: dastore
153: dup
154: iconst_2
155: ldc2_w        #82
158: dastore
159: dup
160: iconst_3
161: ldc2_w        #31
164: dastore
165: invokevirtual #17
168: astore_3
169: dconst_0
170: aload_3
171: invokevirtual #24
174: checkcast     #25
177: invokevirtual #26
180: ldc2_w        #21
183: invokestatic  #23
186: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testMoreEstimatedParametersUnsorted
Start line: 279
End line: 293
Method source code: 
    public void testMoreEstimatedParametersUnsorted() {
        LinearProblem problem = new LinearProblem(new double[][] {
                 { 1.0, 1.0,  0.0,  0.0, 0.0,  0.0 },
                 { 0.0, 0.0,  1.0,  1.0, 1.0,  0.0 },
                 { 0.0, 0.0,  0.0,  0.0, 1.0, -1.0 },
                 { 0.0, 0.0, -1.0,  1.0, 0.0,  1.0 },
                 { 0.0, 0.0,  0.0, -1.0, 1.0,  0.0 }
        }, new double[] { 3.0, 12.0, -1.0, 7.0, 1.0 });
        NonLinearConjugateGradientOptimizer optimizer =
            new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,
                                                    new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum =
            optimizer.optimize(100, problem, GoalType.MINIMIZE, new double[] { 2, 2, 2, 2, 2, 2 });
        Assert.assertEquals(0, optimum.getValue(), 1.0e-10);
    }
Method byte code: 
0: new           #2
3: dup
4: iconst_5
5: anewarray     #3
8: dup
9: iconst_0
10: bipush        6
12: newarray       double
14: dup
15: iconst_0
16: dconst_1
17: dastore
18: dup
19: iconst_1
20: dconst_1
21: dastore
22: dup
23: iconst_2
24: dconst_0
25: dastore
26: dup
27: iconst_3
28: dconst_0
29: dastore
30: dup
31: iconst_4
32: dconst_0
33: dastore
34: dup
35: iconst_5
36: dconst_0
37: dastore
38: aastore
39: dup
40: iconst_1
41: bipush        6
43: newarray       double
45: dup
46: iconst_0
47: dconst_0
48: dastore
49: dup
50: iconst_1
51: dconst_0
52: dastore
53: dup
54: iconst_2
55: dconst_1
56: dastore
57: dup
58: iconst_3
59: dconst_1
60: dastore
61: dup
62: iconst_4
63: dconst_1
64: dastore
65: dup
66: iconst_5
67: dconst_0
68: dastore
69: aastore
70: dup
71: iconst_2
72: bipush        6
74: newarray       double
76: dup
77: iconst_0
78: dconst_0
79: dastore
80: dup
81: iconst_1
82: dconst_0
83: dastore
84: dup
85: iconst_2
86: dconst_0
87: dastore
88: dup
89: iconst_3
90: dconst_0
91: dastore
92: dup
93: iconst_4
94: dconst_1
95: dastore
96: dup
97: iconst_5
98: ldc2_w        #27
101: dastore
102: aastore
103: dup
104: iconst_3
105: bipush        6
107: newarray       double
109: dup
110: iconst_0
111: dconst_0
112: dastore
113: dup
114: iconst_1
115: dconst_0
116: dastore
117: dup
118: iconst_2
119: ldc2_w        #27
122: dastore
123: dup
124: iconst_3
125: dconst_1
126: dastore
127: dup
128: iconst_4
129: dconst_0
130: dastore
131: dup
132: iconst_5
133: dconst_1
134: dastore
135: aastore
136: dup
137: iconst_4
138: bipush        6
140: newarray       double
142: dup
143: iconst_0
144: dconst_0
145: dastore
146: dup
147: iconst_1
148: dconst_0
149: dastore
150: dup
151: iconst_2
152: dconst_0
153: dastore
154: dup
155: iconst_3
156: ldc2_w        #27
159: dastore
160: dup
161: iconst_4
162: dconst_1
163: dastore
164: dup
165: iconst_5
166: dconst_0
167: dastore
168: aastore
169: iconst_5
170: newarray       double
172: dup
173: iconst_0
174: ldc2_w        #6
177: dastore
178: dup
179: iconst_1
180: ldc2_w        #128
183: dastore
184: dup
185: iconst_2
186: ldc2_w        #27
189: dastore
190: dup
191: iconst_3
192: ldc2_w        #35
195: dastore
196: dup
197: iconst_4
198: dconst_1
199: dastore
200: invokespecial #8
203: astore_1
204: new           #9
207: dup
208: getstatic     #10
211: new           #11
214: dup
215: ldc2_w        #12
218: ldc2_w        #12
221: invokespecial #14
224: invokespecial #15
227: astore_2
228: aload_2
229: bipush        100
231: aload_1
232: getstatic     #16
235: bipush        6
237: newarray       double
239: dup
240: iconst_0
241: ldc2_w        #4
244: dastore
245: dup
246: iconst_1
247: ldc2_w        #4
250: dastore
251: dup
252: iconst_2
253: ldc2_w        #4
256: dastore
257: dup
258: iconst_3
259: ldc2_w        #4
262: dastore
263: dup
264: iconst_4
265: ldc2_w        #4
268: dastore
269: dup
270: iconst_5
271: ldc2_w        #4
274: dastore
275: invokevirtual #17
278: astore_3
279: dconst_0
280: aload_3
281: invokevirtual #24
284: checkcast     #25
287: invokevirtual #26
290: ldc2_w        #21
293: invokestatic  #23
296: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testRedundantEquations
Start line: 296
End line: 311
Method source code: 
    public void testRedundantEquations() {
        LinearProblem problem = new LinearProblem(new double[][] {
                { 1.0,  1.0 },
                { 1.0, -1.0 },
                { 1.0,  3.0 }
        }, new double[] { 3.0, 1.0, 5.0 });

        NonLinearConjugateGradientOptimizer optimizer =
            new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,
                                                    new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum =
            optimizer.optimize(100, problem, GoalType.MINIMIZE, new double[] { 1, 1 });
        Assert.assertEquals(2.0, optimum.getPoint()[0], 1.0e-8);
        Assert.assertEquals(1.0, optimum.getPoint()[1], 1.0e-8);

    }
Method byte code: 
0: new           #2
3: dup
4: iconst_3
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_2
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: dconst_1
20: dastore
21: aastore
22: dup
23: iconst_1
24: iconst_2
25: newarray       double
27: dup
28: iconst_0
29: dconst_1
30: dastore
31: dup
32: iconst_1
33: ldc2_w        #27
36: dastore
37: aastore
38: dup
39: iconst_2
40: iconst_2
41: newarray       double
43: dup
44: iconst_0
45: dconst_1
46: dastore
47: dup
48: iconst_1
49: ldc2_w        #6
52: dastore
53: aastore
54: iconst_3
55: newarray       double
57: dup
58: iconst_0
59: ldc2_w        #6
62: dastore
63: dup
64: iconst_1
65: dconst_1
66: dastore
67: dup
68: iconst_2
69: ldc2_w        #82
72: dastore
73: invokespecial #8
76: astore_1
77: new           #9
80: dup
81: getstatic     #10
84: new           #11
87: dup
88: ldc2_w        #12
91: ldc2_w        #12
94: invokespecial #14
97: invokespecial #15
100: astore_2
101: aload_2
102: bipush        100
104: aload_1
105: getstatic     #16
108: iconst_2
109: newarray       double
111: dup
112: iconst_0
113: dconst_1
114: dastore
115: dup
116: iconst_1
117: dconst_1
118: dastore
119: invokevirtual #17
122: astore_3
123: ldc2_w        #4
126: aload_3
127: invokevirtual #20
130: iconst_0
131: daload
132: ldc2_w        #130
135: invokestatic  #23
138: dconst_1
139: aload_3
140: invokevirtual #20
143: iconst_1
144: daload
145: ldc2_w        #130
148: invokestatic  #23
151: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testInconsistentEquations
Start line: 314
End line: 328
Method source code: 
    public void testInconsistentEquations() {
        LinearProblem problem = new LinearProblem(new double[][] {
                { 1.0,  1.0 },
                { 1.0, -1.0 },
                { 1.0,  3.0 }
        }, new double[] { 3.0, 1.0, 4.0 });

        NonLinearConjugateGradientOptimizer optimizer =
            new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,
                                                    new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum =
            optimizer.optimize(100, problem, GoalType.MINIMIZE, new double[] { 1, 1 });
        Assert.assertTrue(optimum.getValue() > 0.1);

    }
Method byte code: 
0: new           #2
3: dup
4: iconst_3
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_2
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: dconst_1
20: dastore
21: aastore
22: dup
23: iconst_1
24: iconst_2
25: newarray       double
27: dup
28: iconst_0
29: dconst_1
30: dastore
31: dup
32: iconst_1
33: ldc2_w        #27
36: dastore
37: aastore
38: dup
39: iconst_2
40: iconst_2
41: newarray       double
43: dup
44: iconst_0
45: dconst_1
46: dastore
47: dup
48: iconst_1
49: ldc2_w        #6
52: dastore
53: aastore
54: iconst_3
55: newarray       double
57: dup
58: iconst_0
59: ldc2_w        #6
62: dastore
63: dup
64: iconst_1
65: dconst_1
66: dastore
67: dup
68: iconst_2
69: ldc2_w        #31
72: dastore
73: invokespecial #8
76: astore_1
77: new           #9
80: dup
81: getstatic     #10
84: new           #11
87: dup
88: ldc2_w        #12
91: ldc2_w        #12
94: invokespecial #14
97: invokespecial #15
100: astore_2
101: aload_2
102: bipush        100
104: aload_1
105: getstatic     #16
108: iconst_2
109: newarray       double
111: dup
112: iconst_0
113: dconst_1
114: dastore
115: dup
116: iconst_1
117: dconst_1
118: dastore
119: invokevirtual #17
122: astore_3
123: aload_3
124: invokevirtual #24
127: checkcast     #25
130: invokevirtual #26
133: ldc2_w        #120
136: dcmpl
137: ifle          144
140: iconst_1
141: goto          145
144: iconst_0
145: invokestatic  #79
148: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testCircleFitting
Start line: 331
End line: 348
Method source code: 
    public void testCircleFitting() {
        CircleScalar circle = new CircleScalar();
        circle.addPoint( 30.0,  68.0);
        circle.addPoint( 50.0,  -6.0);
        circle.addPoint(110.0, -20.0);
        circle.addPoint( 35.0,  15.0);
        circle.addPoint( 45.0,  97.0);
        NonLinearConjugateGradientOptimizer optimizer =
            new NonLinearConjugateGradientOptimizer(ConjugateGradientFormula.POLAK_RIBIERE,
                                                    new SimpleValueChecker(1e-30, 1e-30),
                                                    new BrentSolver(1e-15, 1e-13));
        PointValuePair optimum =
            optimizer.optimize(100, circle, GoalType.MINIMIZE, new double[] { 98.680, 47.345 });
        Vector2D center = new Vector2D(optimum.getPointRef()[0], optimum.getPointRef()[1]);
        Assert.assertEquals(69.960161753, circle.getRadius(center), 1.0e-8);
        Assert.assertEquals(96.075902096, center.getX(), 1.0e-8);
        Assert.assertEquals(48.135167894, center.getY(), 1.0e-8);
    }
Method byte code: 
0: new           #132
3: dup
4: invokespecial #133
7: astore_1
8: aload_1
9: ldc2_w        #134
12: ldc2_w        #136
15: invokevirtual #138
18: aload_1
19: ldc2_w        #139
22: ldc2_w        #141
25: invokevirtual #138
28: aload_1
29: ldc2_w        #143
32: ldc2_w        #145
35: invokevirtual #138
38: aload_1
39: ldc2_w        #147
42: ldc2_w        #149
45: invokevirtual #138
48: aload_1
49: ldc2_w        #151
52: ldc2_w        #153
55: invokevirtual #138
58: new           #9
61: dup
62: getstatic     #10
65: new           #11
68: dup
69: ldc2_w        #155
72: ldc2_w        #155
75: invokespecial #14
78: new           #70
81: dup
82: ldc2_w        #94
85: ldc2_w        #68
88: invokespecial #96
91: invokespecial #97
94: astore_2
95: aload_2
96: bipush        100
98: aload_1
99: getstatic     #16
102: iconst_2
103: newarray       double
105: dup
106: iconst_0
107: ldc2_w        #157
110: dastore
111: dup
112: iconst_1
113: ldc2_w        #159
116: dastore
117: invokevirtual #17
120: astore_3
121: new           #161
124: dup
125: aload_3
126: invokevirtual #162
129: iconst_0
130: daload
131: aload_3
132: invokevirtual #162
135: iconst_1
136: daload
137: invokespecial #163
140: astore        4
142: ldc2_w        #164
145: aload_1
146: aload         4
148: invokevirtual #166
151: ldc2_w        #130
154: invokestatic  #23
157: ldc2_w        #167
160: aload         4
162: invokevirtual #169
165: ldc2_w        #130
168: invokestatic  #23
171: ldc2_w        #170
174: aload         4
176: invokevirtual #172
179: ldc2_w        #130
182: invokestatic  #23
185: return
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/GaussNewtonOptimizerTest.class
Class name: GaussNewtonOptimizerTest
Method name: testMaxEvaluations
Start line: 115
End line: 129
Method source code: 
    public void testMaxEvaluations() throws Exception {
        CircleVectorial circle = new CircleVectorial();
        circle.addPoint( 30.0,  68.0);
        circle.addPoint( 50.0,  -6.0);
        circle.addPoint(110.0, -20.0);
        circle.addPoint( 35.0,  15.0);
        circle.addPoint( 45.0,  97.0);

        GaussNewtonOptimizer optimizer
            = new GaussNewtonOptimizer(new SimpleVectorValueChecker(1.0e-30, 1.0e-30));

        optimizer.optimize(100, circle, new double[] { 0, 0, 0, 0, 0 },
                           new double[] { 1, 1, 1, 1, 1 },
                           new double[] { 98.680, 47.345 });
    }
Method byte code: 
0: new           #10
3: dup
4: invokespecial #11
7: astore_1
8: aload_1
9: ldc2_w        #12
12: ldc2_w        #14
15: invokevirtual #16
18: aload_1
19: ldc2_w        #17
22: ldc2_w        #19
25: invokevirtual #16
28: aload_1
29: ldc2_w        #21
32: ldc2_w        #23
35: invokevirtual #16
38: aload_1
39: ldc2_w        #25
42: ldc2_w        #27
45: invokevirtual #16
48: aload_1
49: ldc2_w        #29
52: ldc2_w        #31
55: invokevirtual #16
58: new           #2
61: dup
62: new           #3
65: dup
66: ldc2_w        #33
69: ldc2_w        #33
72: invokespecial #6
75: invokespecial #7
78: astore_2
79: aload_2
80: bipush        100
82: aload_1
83: iconst_5
84: newarray       double
86: dup
87: iconst_0
88: dconst_0
89: dastore
90: dup
91: iconst_1
92: dconst_0
93: dastore
94: dup
95: iconst_2
96: dconst_0
97: dastore
98: dup
99: iconst_3
100: dconst_0
101: dastore
102: dup
103: iconst_4
104: dconst_0
105: dastore
106: iconst_5
107: newarray       double
109: dup
110: iconst_0
111: dconst_1
112: dastore
113: dup
114: iconst_1
115: dconst_1
116: dastore
117: dup
118: iconst_2
119: dconst_1
120: dastore
121: dup
122: iconst_3
123: dconst_1
124: dastore
125: dup
126: iconst_4
127: dconst_1
128: dastore
129: iconst_2
130: newarray       double
132: dup
133: iconst_0
134: ldc2_w        #35
137: dastore
138: dup
139: iconst_1
140: ldc2_w        #37
143: dastore
144: invokevirtual #39
147: pop
148: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.class
Class name: LevenbergMarquardtOptimizerTest
Method name: testControlParameters
Start line: 127
End line: 139
Method source code: 
    public void testControlParameters() {
        CircleVectorial circle = new CircleVectorial();
        circle.addPoint( 30.0,  68.0);
        circle.addPoint( 50.0,  -6.0);
        circle.addPoint(110.0, -20.0);
        circle.addPoint( 35.0,  15.0);
        circle.addPoint( 45.0,  97.0);
        checkEstimate(circle, 0.1, 10, 1.0e-14, 1.0e-16, 1.0e-10, false);
        checkEstimate(circle, 0.1, 10, 1.0e-15, 1.0e-17, 1.0e-10, true);
        checkEstimate(circle, 0.1,  5, 1.0e-15, 1.0e-16, 1.0e-10, true);
        circle.addPoint(300, -300);
        checkEstimate(circle, 0.1, 20, 1.0e-18, 1.0e-16, 1.0e-10, true);
    }
Method byte code: 
0: new           #27
3: dup
4: invokespecial #28
7: astore_1
8: aload_1
9: ldc2_w        #29
12: ldc2_w        #31
15: invokevirtual #33
18: aload_1
19: ldc2_w        #34
22: ldc2_w        #36
25: invokevirtual #33
28: aload_1
29: ldc2_w        #38
32: ldc2_w        #40
35: invokevirtual #33
38: aload_1
39: ldc2_w        #42
42: ldc2_w        #44
45: invokevirtual #33
48: aload_1
49: ldc2_w        #46
52: ldc2_w        #48
55: invokevirtual #33
58: aload_0
59: aload_1
60: ldc2_w        #50
63: bipush        10
65: ldc2_w        #52
68: ldc2_w        #54
71: ldc2_w        #56
74: iconst_0
75: invokespecial #58
78: aload_0
79: aload_1
80: ldc2_w        #50
83: bipush        10
85: ldc2_w        #59
88: ldc2_w        #61
91: ldc2_w        #56
94: iconst_1
95: invokespecial #58
98: aload_0
99: aload_1
100: ldc2_w        #50
103: iconst_5
104: ldc2_w        #59
107: ldc2_w        #54
110: ldc2_w        #56
113: iconst_1
114: invokespecial #58
117: aload_1
118: ldc2_w        #63
121: ldc2_w        #65
124: invokevirtual #33
127: aload_0
128: aload_1
129: ldc2_w        #50
132: bipush        20
134: ldc2_w        #67
137: ldc2_w        #54
140: ldc2_w        #56
143: iconst_1
144: invokespecial #58
147: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.class
Class name: LevenbergMarquardtOptimizerTest
Method name: testBevington
Start line: 193
End line: 259
Method source code: 
    public void testBevington() {
        final double[][] dataPoints = {
            // column 1 = times
            { 15, 30, 45, 60, 75, 90, 105, 120, 135, 150,
              165, 180, 195, 210, 225, 240, 255, 270, 285, 300,
              315, 330, 345, 360, 375, 390, 405, 420, 435, 450,
              465, 480, 495, 510, 525, 540, 555, 570, 585, 600,
              615, 630, 645, 660, 675, 690, 705, 720, 735, 750,
              765, 780, 795, 810, 825, 840, 855, 870, 885, },
            // column 2 = measured counts
            { 775, 479, 380, 302, 185, 157, 137, 119, 110, 89,
              74, 61, 66, 68, 48, 54, 51, 46, 55, 29,
              28, 37, 49, 26, 35, 29, 31, 24, 25, 35,
              24, 30, 26, 28, 21, 18, 20, 27, 17, 17,
              14, 17, 24, 11, 22, 17, 12, 10, 13, 16,
              9, 9, 14, 21, 17, 13, 12, 18, 10, },
        };

        final BevingtonProblem problem = new BevingtonProblem();

        final int len = dataPoints[0].length;
        final double[] weights = new double[len];
        for (int i = 0; i < len; i++) {
            problem.addPoint(dataPoints[0][i],
                             dataPoints[1][i]);

            weights[i] = 1 / dataPoints[1][i];
        }

        final LevenbergMarquardtOptimizer optimizer
            = new LevenbergMarquardtOptimizer();

        final PointVectorValuePair optimum
            = optimizer.optimize(100, problem, dataPoints[1], weights,
                               new double[] { 10, 900, 80, 27, 225 });

        final double[] solution = optimum.getPoint();
        final double[] expectedSolution = { 10.4, 958.3, 131.4, 33.9, 205.0 };

        final double[][] covarMatrix = optimizer.computeCovariances(solution, 1e-14);
        final double[][] expectedCovarMatrix = {
            { 3.38, -3.69, 27.98, -2.34, -49.24 },
            { -3.69, 2492.26, 81.89, -69.21, -8.9 },
            { 27.98, 81.89, 468.99, -44.22, -615.44 },
            { -2.34, -69.21, -44.22, 6.39, 53.80 },
            { -49.24, -8.9, -615.44, 53.8, 929.45 }
        };

        final int numParams = expectedSolution.length;

        // Check that the computed solution is within the reference error range.
        for (int i = 0; i < numParams; i++) {
            final double error = FastMath.sqrt(expectedCovarMatrix[i][i]);
            Assert.assertEquals("Parameter " + i, expectedSolution[i], solution[i], error);
        }

        // Check that each entry of the computed covariance matrix is within 10%
        // of the reference matrix entry.
        for (int i = 0; i < numParams; i++) {
            for (int j = 0; j < numParams; j++) {
                Assert.assertEquals("Covariance matrix [" + i + "][" + j + "]",
                                    expectedCovarMatrix[i][j],
                                    covarMatrix[i][j],
                                    FastMath.abs(0.1 * expectedCovarMatrix[i][j]));
            }
        }
    }
Method byte code: 
0: iconst_2
1: anewarray     #5
4: dup
5: iconst_0
6: bipush        59
8: newarray       double
10: dup
11: iconst_0
12: ldc2_w        #44
15: dastore
16: dup
17: iconst_1
18: ldc2_w        #29
21: dastore
22: dup
23: iconst_2
24: ldc2_w        #46
27: dastore
28: dup
29: iconst_3
30: ldc2_w        #100
33: dastore
34: dup
35: iconst_4
36: ldc2_w        #102
39: dastore
40: dup
41: iconst_5
42: ldc2_w        #104
45: dastore
46: dup
47: bipush        6
49: ldc2_w        #106
52: dastore
53: dup
54: bipush        7
56: ldc2_w        #108
59: dastore
60: dup
61: bipush        8
63: ldc2_w        #110
66: dastore
67: dup
68: bipush        9
70: ldc2_w        #112
73: dastore
74: dup
75: bipush        10
77: ldc2_w        #114
80: dastore
81: dup
82: bipush        11
84: ldc2_w        #116
87: dastore
88: dup
89: bipush        12
91: ldc2_w        #118
94: dastore
95: dup
96: bipush        13
98: ldc2_w        #120
101: dastore
102: dup
103: bipush        14
105: ldc2_w        #122
108: dastore
109: dup
110: bipush        15
112: ldc2_w        #124
115: dastore
116: dup
117: bipush        16
119: ldc2_w        #126
122: dastore
123: dup
124: bipush        17
126: ldc2_w        #128
129: dastore
130: dup
131: bipush        18
133: ldc2_w        #130
136: dastore
137: dup
138: bipush        19
140: ldc2_w        #63
143: dastore
144: dup
145: bipush        20
147: ldc2_w        #132
150: dastore
151: dup
152: bipush        21
154: ldc2_w        #134
157: dastore
158: dup
159: bipush        22
161: ldc2_w        #136
164: dastore
165: dup
166: bipush        23
168: ldc2_w        #138
171: dastore
172: dup
173: bipush        24
175: ldc2_w        #140
178: dastore
179: dup
180: bipush        25
182: ldc2_w        #142
185: dastore
186: dup
187: bipush        26
189: ldc2_w        #144
192: dastore
193: dup
194: bipush        27
196: ldc2_w        #146
199: dastore
200: dup
201: bipush        28
203: ldc2_w        #148
206: dastore
207: dup
208: bipush        29
210: ldc2_w        #150
213: dastore
214: dup
215: bipush        30
217: ldc2_w        #152
220: dastore
221: dup
222: bipush        31
224: ldc2_w        #154
227: dastore
228: dup
229: bipush        32
231: ldc2_w        #156
234: dastore
235: dup
236: bipush        33
238: ldc2_w        #158
241: dastore
242: dup
243: bipush        34
245: ldc2_w        #160
248: dastore
249: dup
250: bipush        35
252: ldc2_w        #162
255: dastore
256: dup
257: bipush        36
259: ldc2_w        #164
262: dastore
263: dup
264: bipush        37
266: ldc2_w        #166
269: dastore
270: dup
271: bipush        38
273: ldc2_w        #168
276: dastore
277: dup
278: bipush        39
280: ldc2_w        #170
283: dastore
284: dup
285: bipush        40
287: ldc2_w        #172
290: dastore
291: dup
292: bipush        41
294: ldc2_w        #174
297: dastore
298: dup
299: bipush        42
301: ldc2_w        #176
304: dastore
305: dup
306: bipush        43
308: ldc2_w        #178
311: dastore
312: dup
313: bipush        44
315: ldc2_w        #180
318: dastore
319: dup
320: bipush        45
322: ldc2_w        #182
325: dastore
326: dup
327: bipush        46
329: ldc2_w        #184
332: dastore
333: dup
334: bipush        47
336: ldc2_w        #186
339: dastore
340: dup
341: bipush        48
343: ldc2_w        #188
346: dastore
347: dup
348: bipush        49
350: ldc2_w        #190
353: dastore
354: dup
355: bipush        50
357: ldc2_w        #192
360: dastore
361: dup
362: bipush        51
364: ldc2_w        #194
367: dastore
368: dup
369: bipush        52
371: ldc2_w        #196
374: dastore
375: dup
376: bipush        53
378: ldc2_w        #198
381: dastore
382: dup
383: bipush        54
385: ldc2_w        #200
388: dastore
389: dup
390: bipush        55
392: ldc2_w        #202
395: dastore
396: dup
397: bipush        56
399: ldc2_w        #204
402: dastore
403: dup
404: bipush        57
406: ldc2_w        #206
409: dastore
410: dup
411: bipush        58
413: ldc2_w        #208
416: dastore
417: aastore
418: dup
419: iconst_1
420: bipush        59
422: newarray       double
424: dup
425: iconst_0
426: ldc2_w        #210
429: dastore
430: dup
431: iconst_1
432: ldc2_w        #212
435: dastore
436: dup
437: iconst_2
438: ldc2_w        #214
441: dastore
442: dup
443: iconst_3
444: ldc2_w        #216
447: dastore
448: dup
449: iconst_4
450: ldc2_w        #218
453: dastore
454: dup
455: iconst_5
456: ldc2_w        #220
459: dastore
460: dup
461: bipush        6
463: ldc2_w        #222
466: dastore
467: dup
468: bipush        7
470: ldc2_w        #224
473: dastore
474: dup
475: bipush        8
477: ldc2_w        #38
480: dastore
481: dup
482: bipush        9
484: ldc2_w        #226
487: dastore
488: dup
489: bipush        10
491: ldc2_w        #228
494: dastore
495: dup
496: bipush        11
498: ldc2_w        #230
501: dastore
502: dup
503: bipush        12
505: ldc2_w        #232
508: dastore
509: dup
510: bipush        13
512: ldc2_w        #31
515: dastore
516: dup
517: bipush        14
519: ldc2_w        #234
522: dastore
523: dup
524: bipush        15
526: ldc2_w        #236
529: dastore
530: dup
531: bipush        16
533: ldc2_w        #238
536: dastore
537: dup
538: bipush        17
540: ldc2_w        #240
543: dastore
544: dup
545: bipush        18
547: ldc2_w        #242
550: dastore
551: dup
552: bipush        19
554: ldc2_w        #244
557: dastore
558: dup
559: bipush        20
561: ldc2_w        #246
564: dastore
565: dup
566: bipush        21
568: ldc2_w        #248
571: dastore
572: dup
573: bipush        22
575: ldc2_w        #250
578: dastore
579: dup
580: bipush        23
582: ldc2_w        #252
585: dastore
586: dup
587: bipush        24
589: ldc2_w        #42
592: dastore
593: dup
594: bipush        25
596: ldc2_w        #244
599: dastore
600: dup
601: bipush        26
603: ldc2_w        #254
606: dastore
607: dup
608: bipush        27
610: ldc2_w        #256
613: dastore
614: dup
615: bipush        28
617: ldc2_w        #258
620: dastore
621: dup
622: bipush        29
624: ldc2_w        #42
627: dastore
628: dup
629: bipush        30
631: ldc2_w        #256
634: dastore
635: dup
636: bipush        31
638: ldc2_w        #29
641: dastore
642: dup
643: bipush        32
645: ldc2_w        #252
648: dastore
649: dup
650: bipush        33
652: ldc2_w        #246
655: dastore
656: dup
657: bipush        34
659: ldc2_w        #260
662: dastore
663: dup
664: bipush        35
666: ldc2_w        #262
669: dastore
670: dup
671: bipush        36
673: ldc2_w        #264
676: dastore
677: dup
678: bipush        37
680: ldc2_w        #266
683: dastore
684: dup
685: bipush        38
687: ldc2_w        #268
690: dastore
691: dup
692: bipush        39
694: ldc2_w        #268
697: dastore
698: dup
699: bipush        40
701: ldc2_w        #270
704: dastore
705: dup
706: bipush        41
708: ldc2_w        #268
711: dastore
712: dup
713: bipush        42
715: ldc2_w        #256
718: dastore
719: dup
720: bipush        43
722: ldc2_w        #272
725: dastore
726: dup
727: bipush        44
729: ldc2_w        #274
732: dastore
733: dup
734: bipush        45
736: ldc2_w        #268
739: dastore
740: dup
741: bipush        46
743: ldc2_w        #276
746: dastore
747: dup
748: bipush        47
750: ldc2_w        #278
753: dastore
754: dup
755: bipush        48
757: ldc2_w        #280
760: dastore
761: dup
762: bipush        49
764: ldc2_w        #282
767: dastore
768: dup
769: bipush        50
771: ldc2_w        #284
774: dastore
775: dup
776: bipush        51
778: ldc2_w        #284
781: dastore
782: dup
783: bipush        52
785: ldc2_w        #270
788: dastore
789: dup
790: bipush        53
792: ldc2_w        #260
795: dastore
796: dup
797: bipush        54
799: ldc2_w        #268
802: dastore
803: dup
804: bipush        55
806: ldc2_w        #280
809: dastore
810: dup
811: bipush        56
813: ldc2_w        #276
816: dastore
817: dup
818: bipush        57
820: ldc2_w        #262
823: dastore
824: dup
825: bipush        58
827: ldc2_w        #278
830: dastore
831: aastore
832: astore_1
833: new           #286
836: dup
837: invokespecial #287
840: astore_2
841: aload_1
842: iconst_0
843: aaload
844: arraylength
845: istore_3
846: iload_3
847: newarray       double
849: astore        4
851: iconst_0
852: istore        5
854: iload         5
856: iload_3
857: if_icmpge     895
860: aload_2
861: aload_1
862: iconst_0
863: aaload
864: iload         5
866: daload
867: aload_1
868: iconst_1
869: aaload
870: iload         5
872: daload
873: invokevirtual #288
876: aload         4
878: iload         5
880: dconst_1
881: aload_1
882: iconst_1
883: aaload
884: iload         5
886: daload
887: ddiv
888: dastore
889: iinc          5, 1
892: goto          854
895: new           #2
898: dup
899: invokespecial #3
902: astore        5
904: aload         5
906: bipush        100
908: aload_2
909: aload_1
910: iconst_1
911: aaload
912: aload         4
914: iconst_5
915: newarray       double
917: dup
918: iconst_0
919: ldc2_w        #278
922: dastore
923: dup
924: iconst_1
925: ldc2_w        #289
928: dastore
929: dup
930: iconst_2
931: ldc2_w        #291
934: dastore
935: dup
936: iconst_3
937: ldc2_w        #266
940: dastore
941: dup
942: iconst_4
943: ldc2_w        #122
946: dastore
947: invokevirtual #75
950: astore        6
952: aload         6
954: invokevirtual #23
957: astore        7
959: iconst_5
960: newarray       double
962: dup
963: iconst_0
964: ldc2_w        #293
967: dastore
968: dup
969: iconst_1
970: ldc2_w        #295
973: dastore
974: dup
975: iconst_2
976: ldc2_w        #297
979: dastore
980: dup
981: iconst_3
982: ldc2_w        #299
985: dastore
986: dup
987: iconst_4
988: ldc2_w        #301
991: dastore
992: astore        8
994: aload         5
996: aload         7
998: ldc2_w        #52
1001: invokevirtual #303
1004: astore        9
1006: iconst_5
1007: anewarray     #5
1010: dup
1011: iconst_0
1012: iconst_5
1013: newarray       double
1015: dup
1016: iconst_0
1017: ldc2_w        #304
1020: dastore
1021: dup
1022: iconst_1
1023: ldc2_w        #306
1026: dastore
1027: dup
1028: iconst_2
1029: ldc2_w        #308
1032: dastore
1033: dup
1034: iconst_3
1035: ldc2_w        #310
1038: dastore
1039: dup
1040: iconst_4
1041: ldc2_w        #312
1044: dastore
1045: aastore
1046: dup
1047: iconst_1
1048: iconst_5
1049: newarray       double
1051: dup
1052: iconst_0
1053: ldc2_w        #306
1056: dastore
1057: dup
1058: iconst_1
1059: ldc2_w        #314
1062: dastore
1063: dup
1064: iconst_2
1065: ldc2_w        #316
1068: dastore
1069: dup
1070: iconst_3
1071: ldc2_w        #318
1074: dastore
1075: dup
1076: iconst_4
1077: ldc2_w        #320
1080: dastore
1081: aastore
1082: dup
1083: iconst_2
1084: iconst_5
1085: newarray       double
1087: dup
1088: iconst_0
1089: ldc2_w        #308
1092: dastore
1093: dup
1094: iconst_1
1095: ldc2_w        #316
1098: dastore
1099: dup
1100: iconst_2
1101: ldc2_w        #322
1104: dastore
1105: dup
1106: iconst_3
1107: ldc2_w        #324
1110: dastore
1111: dup
1112: iconst_4
1113: ldc2_w        #326
1116: dastore
1117: aastore
1118: dup
1119: iconst_3
1120: iconst_5
1121: newarray       double
1123: dup
1124: iconst_0
1125: ldc2_w        #310
1128: dastore
1129: dup
1130: iconst_1
1131: ldc2_w        #318
1134: dastore
1135: dup
1136: iconst_2
1137: ldc2_w        #324
1140: dastore
1141: dup
1142: iconst_3
1143: ldc2_w        #328
1146: dastore
1147: dup
1148: iconst_4
1149: ldc2_w        #330
1152: dastore
1153: aastore
1154: dup
1155: iconst_4
1156: iconst_5
1157: newarray       double
1159: dup
1160: iconst_0
1161: ldc2_w        #312
1164: dastore
1165: dup
1166: iconst_1
1167: ldc2_w        #320
1170: dastore
1171: dup
1172: iconst_2
1173: ldc2_w        #326
1176: dastore
1177: dup
1178: iconst_3
1179: ldc2_w        #330
1182: dastore
1183: dup
1184: iconst_4
1185: ldc2_w        #332
1188: dastore
1189: aastore
1190: astore        10
1192: aload         8
1194: arraylength
1195: istore        11
1197: iconst_0
1198: istore        12
1200: iload         12
1202: iload         11
1204: if_icmpge     1262
1207: aload         10
1209: iload         12
1211: aaload
1212: iload         12
1214: daload
1215: invokestatic  #18
1218: dstore        13
1220: new           #334
1223: dup
1224: invokespecial #335
1227: ldc_w         #336
1230: invokevirtual #337
1233: iload         12
1235: invokevirtual #338
1238: invokevirtual #339
1241: aload         8
1243: iload         12
1245: daload
1246: aload         7
1248: iload         12
1250: daload
1251: dload         13
1253: invokestatic  #340
1256: iinc          12, 1
1259: goto          1200
1262: iconst_0
1263: istore        12
1265: iload         12
1267: iload         11
1269: if_icmpge     1366
1272: iconst_0
1273: istore        13
1275: iload         13
1277: iload         11
1279: if_icmpge     1360
1282: new           #334
1285: dup
1286: invokespecial #335
1289: ldc_w         #341
1292: invokevirtual #337
1295: iload         12
1297: invokevirtual #338
1300: ldc_w         #342
1303: invokevirtual #337
1306: iload         13
1308: invokevirtual #338
1311: ldc_w         #343
1314: invokevirtual #337
1317: invokevirtual #339
1320: aload         10
1322: iload         12
1324: aaload
1325: iload         13
1327: daload
1328: aload         9
1330: iload         12
1332: aaload
1333: iload         13
1335: daload
1336: ldc2_w        #50
1339: aload         10
1341: iload         12
1343: aaload
1344: iload         13
1346: daload
1347: dmul
1348: invokestatic  #344
1351: invokestatic  #340
1354: iinc          13, 1
1357: goto          1275
1360: iinc          12, 1
1363: goto          1265
1366: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizerTest.class
Class name: LevenbergMarquardtOptimizerTest
Method name: testCircleFitting2
Start line: 262
End line: 310
Method source code: 
    public void testCircleFitting2() {
        final double xCenter = 123.456;
        final double yCenter = 654.321;
        final double xSigma = 10;
        final double ySigma = 15;
        final double radius = 111.111;
        // The test is extremely sensitive to the seed.
        final long seed = 59421061L;
        final RandomCirclePointGenerator factory
            = new RandomCirclePointGenerator(xCenter, yCenter, radius,
                                             xSigma, ySigma,
                                             seed);
        final CircleProblem circle = new CircleProblem(xSigma, ySigma);

        final int numPoints = 10;
        for (Vector2D p : factory.generate(numPoints)) {
            circle.addPoint(p);
            // System.out.println(p.x + " " + p.y);
        }

        // First guess for the center's coordinates and radius.
        final double[] init = { 90, 659, 115 };

        final LevenbergMarquardtOptimizer optimizer
            = new LevenbergMarquardtOptimizer();
        final PointVectorValuePair optimum = optimizer.optimize(100, circle,
                                                                circle.target(), circle.weight(),
                                                                init);

        final double[] paramFound = optimum.getPoint();

        // Retrieve errors estimation.
        final double[][] covMatrix = optimizer.computeCovariances(paramFound, 1e-14);
        final double[] asymptoticStandardErrorFound = optimizer.guessParametersErrors();
        final double[] sigmaFound = new double[covMatrix.length];
        for (int i = 0; i < covMatrix.length; i++) {
            sigmaFound[i] = FastMath.sqrt(covMatrix[i][i]);
//             System.out.println("i=" + i + " value=" + paramFound[i]
//                                + " sigma=" + sigmaFound[i]
//                                + " ase=" + asymptoticStandardErrorFound[i]);
        }

        // System.out.println("chi2=" + optimizer.getChiSquare());

        // Check that the parameters are found within the assumed error bars.
        Assert.assertEquals(xCenter, paramFound[0], asymptoticStandardErrorFound[0]);
        Assert.assertEquals(yCenter, paramFound[1], asymptoticStandardErrorFound[1]);
        Assert.assertEquals(radius, paramFound[2], asymptoticStandardErrorFound[2]);
    }
Method byte code: 
0: ldc2_w        #345
3: dstore_1
4: ldc2_w        #347
7: dstore_3
8: ldc2_w        #278
11: dstore        5
13: ldc2_w        #44
16: dstore        7
18: ldc2_w        #349
21: dstore        9
23: ldc2_w        #351
26: lstore        11
28: new           #353
31: dup
32: ldc2_w        #345
35: ldc2_w        #347
38: ldc2_w        #349
41: ldc2_w        #278
44: ldc2_w        #44
47: ldc2_w        #351
50: invokespecial #354
53: astore        13
55: new           #355
58: dup
59: ldc2_w        #278
62: ldc2_w        #44
65: invokespecial #356
68: astore        14
70: bipush        10
72: istore        15
74: aload         13
76: bipush        10
78: invokevirtual #357
81: astore        16
83: aload         16
85: arraylength
86: istore        17
88: iconst_0
89: istore        18
91: iload         18
93: iload         17
95: if_icmpge     118
98: aload         16
100: iload         18
102: aaload
103: astore        19
105: aload         14
107: aload         19
109: invokevirtual #358
112: iinc          18, 1
115: goto          91
118: iconst_3
119: newarray       double
121: dup
122: iconst_0
123: ldc2_w        #104
126: dastore
127: dup
128: iconst_1
129: ldc2_w        #359
132: dastore
133: dup
134: iconst_2
135: ldc2_w        #361
138: dastore
139: astore        16
141: new           #2
144: dup
145: invokespecial #3
148: astore        17
150: aload         17
152: bipush        100
154: aload         14
156: aload         14
158: invokevirtual #363
161: aload         14
163: invokevirtual #364
166: aload         16
168: invokevirtual #75
171: astore        18
173: aload         18
175: invokevirtual #23
178: astore        19
180: aload         17
182: aload         19
184: ldc2_w        #52
187: invokevirtual #303
190: astore        20
192: aload         17
194: invokevirtual #365
197: astore        21
199: aload         20
201: arraylength
202: newarray       double
204: astore        22
206: iconst_0
207: istore        23
209: iload         23
211: aload         20
213: arraylength
214: if_icmpge     239
217: aload         22
219: iload         23
221: aload         20
223: iload         23
225: aaload
226: iload         23
228: daload
229: invokestatic  #18
232: dastore
233: iinc          23, 1
236: goto          209
239: ldc2_w        #345
242: aload         19
244: iconst_0
245: daload
246: aload         21
248: iconst_0
249: daload
250: invokestatic  #366
253: ldc2_w        #347
256: aload         19
258: iconst_1
259: daload
260: aload         21
262: iconst_1
263: daload
264: invokestatic  #366
267: ldc2_w        #349
270: aload         19
272: iconst_2
273: daload
274: aload         21
276: iconst_2
277: daload
278: invokestatic  #366
281: return
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testInitOutofbounds1
Start line: 52
End line: 61
Method source code: 
    public void testInitOutofbounds1() {
        double[] startPoint = point(DIM,3);
        double[] insigma = point(DIM, 0.3);
        double[][] boundaries = boundaries(DIM,-1,2);
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #3
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #6
14: invokestatic  #5
17: astore_2
18: bipush        13
20: ldc2_w        #8
23: ldc2_w        #10
26: invokestatic  #12
29: astore_3
30: new           #13
33: dup
34: bipush        13
36: dconst_1
37: invokestatic  #5
40: dconst_0
41: invokespecial #14
44: astore        4
46: aload_0
47: new           #15
50: dup
51: aconst_null
52: invokespecial #16
55: aload_1
56: aload_2
57: aload_3
58: getstatic     #17
61: getstatic     #18
64: iconst_1
65: iconst_0
66: ldc2_w        #19
69: ldc2_w        #19
72: ldc2_w        #21
75: ldc           #23
77: aload         4
79: invokespecial #24
82: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testInitOutofbounds2
Start line: 63
End line: 72
Method source code: 
    public void testInitOutofbounds2() {
        double[] startPoint = point(DIM, -2);
        double[] insigma = point(DIM, 0.3);
        double[][] boundaries = boundaries(DIM,-1,2);
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #25
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #6
14: invokestatic  #5
17: astore_2
18: bipush        13
20: ldc2_w        #8
23: ldc2_w        #10
26: invokestatic  #12
29: astore_3
30: new           #13
33: dup
34: bipush        13
36: dconst_1
37: invokestatic  #5
40: dconst_0
41: invokespecial #14
44: astore        4
46: aload_0
47: new           #15
50: dup
51: aconst_null
52: invokespecial #16
55: aload_1
56: aload_2
57: aload_3
58: getstatic     #17
61: getstatic     #18
64: iconst_1
65: iconst_0
66: ldc2_w        #19
69: ldc2_w        #19
72: ldc2_w        #21
75: ldc           #23
77: aload         4
79: invokespecial #24
82: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testBoundariesDimensionMismatch
Start line: 75
End line: 84
Method source code: 
    public void testBoundariesDimensionMismatch() {
        double[] startPoint = point(DIM,0.5);
        double[] insigma = point(DIM, 0.3);
        double[][] boundaries = boundaries(DIM+1,-1,2);
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #27
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #6
14: invokestatic  #5
17: astore_2
18: bipush        14
20: ldc2_w        #8
23: ldc2_w        #10
26: invokestatic  #12
29: astore_3
30: new           #13
33: dup
34: bipush        13
36: dconst_1
37: invokestatic  #5
40: dconst_0
41: invokespecial #14
44: astore        4
46: aload_0
47: new           #15
50: dup
51: aconst_null
52: invokespecial #16
55: aload_1
56: aload_2
57: aload_3
58: getstatic     #17
61: getstatic     #18
64: iconst_1
65: iconst_0
66: ldc2_w        #19
69: ldc2_w        #19
72: ldc2_w        #21
75: ldc           #23
77: aload         4
79: invokespecial #24
82: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testInputSigmaNegative
Start line: 87
End line: 96
Method source code: 
    public void testInputSigmaNegative() {
        double[] startPoint = point(DIM,0.5);
        double[] insigma = point(DIM,-0.5);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #27
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #29
14: invokestatic  #5
17: astore_2
18: aconst_null
19: checkcast     #31
22: astore_3
23: new           #13
26: dup
27: bipush        13
29: dconst_1
30: invokestatic  #5
33: dconst_0
34: invokespecial #14
37: astore        4
39: aload_0
40: new           #15
43: dup
44: aconst_null
45: invokespecial #16
48: aload_1
49: aload_2
50: aload_3
51: getstatic     #17
54: getstatic     #18
57: iconst_1
58: iconst_0
59: ldc2_w        #19
62: ldc2_w        #19
65: ldc2_w        #21
68: ldc           #23
70: aload         4
72: invokespecial #24
75: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testInputSigmaOutOfRange
Start line: 99
End line: 108
Method source code: 
    public void testInputSigmaOutOfRange() {
        double[] startPoint = point(DIM,0.5);
        double[] insigma = point(DIM, 1.1);
        double[][] boundaries = boundaries(DIM,-0.5,0.5);
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #27
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #32
14: invokestatic  #5
17: astore_2
18: bipush        13
20: ldc2_w        #29
23: ldc2_w        #27
26: invokestatic  #12
29: astore_3
30: new           #13
33: dup
34: bipush        13
36: dconst_1
37: invokestatic  #5
40: dconst_0
41: invokespecial #14
44: astore        4
46: aload_0
47: new           #15
50: dup
51: aconst_null
52: invokespecial #16
55: aload_1
56: aload_2
57: aload_3
58: getstatic     #17
61: getstatic     #18
64: iconst_1
65: iconst_0
66: ldc2_w        #19
69: ldc2_w        #19
72: ldc2_w        #21
75: ldc           #23
77: aload         4
79: invokespecial #24
82: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testInputSigmaDimensionMismatch
Start line: 111
End line: 120
Method source code: 
    public void testInputSigmaDimensionMismatch() {
        double[] startPoint = point(DIM,0.5);
        double[] insigma = point(DIM + 1, 0.5);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #27
5: invokestatic  #5
8: astore_1
9: bipush        14
11: ldc2_w        #27
14: invokestatic  #5
17: astore_2
18: aconst_null
19: checkcast     #31
22: astore_3
23: new           #13
26: dup
27: bipush        13
29: dconst_1
30: invokestatic  #5
33: dconst_0
34: invokespecial #14
37: astore        4
39: aload_0
40: new           #15
43: dup
44: aconst_null
45: invokespecial #16
48: aload_1
49: aload_2
50: aload_3
51: getstatic     #17
54: getstatic     #18
57: iconst_1
58: iconst_0
59: ldc2_w        #19
62: ldc2_w        #19
65: ldc2_w        #21
68: ldc           #23
70: aload         4
72: invokespecial #24
75: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testRosen
Start line: 124
End line: 136
Method source code: 
    public void testRosen() {
        double[] startPoint = point(DIM,0.1);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #34
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #34
14: invokestatic  #5
17: astore_2
18: aconst_null
19: checkcast     #31
22: astore_3
23: new           #13
26: dup
27: bipush        13
29: dconst_1
30: invokestatic  #5
33: dconst_0
34: invokespecial #14
37: astore        4
39: aload_0
40: new           #15
43: dup
44: aconst_null
45: invokespecial #16
48: aload_1
49: aload_2
50: aload_3
51: getstatic     #17
54: getstatic     #18
57: iconst_1
58: iconst_0
59: ldc2_w        #19
62: ldc2_w        #19
65: ldc2_w        #21
68: ldc           #23
70: aload         4
72: invokespecial #24
75: aload_0
76: new           #15
79: dup
80: aconst_null
81: invokespecial #16
84: aload_1
85: aload_2
86: aload_3
87: getstatic     #17
90: getstatic     #18
93: iconst_0
94: iconst_0
95: ldc2_w        #19
98: ldc2_w        #19
101: ldc2_w        #21
104: ldc           #23
106: aload         4
108: invokespecial #24
111: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testMaximize
Start line: 140
End line: 769
Method source code: 
    public void testMaximize() {}
// Defects4J: flaky method
//     public void testMaximize() {
//         double[] startPoint = point(DIM,1.0);
//         double[] insigma = point(DIM,0.1);
//         double[][] boundaries = null;
//         PointValuePair expected =
//             new PointValuePair(point(DIM,0.0),1.0);
//         doTest(new MinusElli(), startPoint, insigma, boundaries,
//                 GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,
//                 2e-10, 5e-6, 100000, expected);
//         doTest(new MinusElli(), startPoint, insigma, boundaries,
//                 GoalType.MAXIMIZE, LAMBDA, false, 0, 1.0-1e-13,
//                 2e-10, 5e-6, 100000, expected);
//         boundaries = boundaries(DIM,-0.3,0.3); 
//         startPoint = point(DIM,0.1);
//         doTest(new MinusElli(), startPoint, insigma, boundaries,
//                 GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,
//                 2e-10, 5e-6, 100000, expected);
//     }

    @Test
    public void testEllipse() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Elli(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Elli(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }

    @Test
    public void testElliRotated() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new ElliRotated(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new ElliRotated(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }

    @Test
    public void testCigar() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }

    @Test
    public void testCigarWithBoundaries() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = boundaries(DIM, -1e100, Double.POSITIVE_INFINITY);
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }

    @Test
    public void testTwoAxes() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new TwoAxes(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new TwoAxes(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-8, 1e-3, 200000, expected);
    }

    @Test
    public void testCigTab() {}
// Defects4J: flaky method
//     @Test
//     public void testCigTab() {
//         double[] startPoint = point(DIM,1.0);
//         double[] insigma = point(DIM,0.3);
//         double[][] boundaries = null;
//         PointValuePair expected =
//             new PointValuePair(point(DIM,0.0),0.0);
//         doTest(new CigTab(), startPoint, insigma, boundaries,
//                 GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
//                 1e-13, 5e-5, 100000, expected);
//         doTest(new CigTab(), startPoint, insigma, boundaries,
//                 GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
//                 1e-13, 5e-5, 100000, expected);
//     }

    @Test
    public void testSphere() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Sphere(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Sphere(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }

    @Test
    public void testTablet() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Tablet(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Tablet(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }

    @Test
    public void testDiffPow() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new DiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, true, 0, 1e-13,
                1e-8, 1e-1, 100000, expected);
        doTest(new DiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, false, 0, 1e-13,
                1e-8, 2e-1, 100000, expected);
    }

    @Test
    public void testSsDiffPow() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new SsDiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, true, 0, 1e-13,
                1e-4, 1e-1, 200000, expected);
        doTest(new SsDiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, false, 0, 1e-13,
                1e-4, 1e-1, 200000, expected);
    }

    @Test
    public void testAckley() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,1.0);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Ackley(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-9, 1e-5, 100000, expected);
        doTest(new Ackley(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-9, 1e-5, 100000, expected);
    }

    @Test
    public void testRastrigin() {
        double[] startPoint = point(DIM,0.1);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Rastrigin(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new Rastrigin(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), false, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
    }

    @Test
    public void testConstrainedRosen() {
        double[] startPoint = point(DIM, 0.1);
        double[] insigma = point(DIM, 0.1);
        double[][] boundaries = boundaries(DIM, -1, 2);
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }

    @Test
    public void testDiagonalRosen() {}
// Defects4J: flaky method
//     @Test
//     public void testDiagonalRosen() {
//         double[] startPoint = point(DIM,0.1);
//         double[] insigma = point(DIM,0.1);
//         double[][] boundaries = null;
//         PointValuePair expected =
//             new PointValuePair(point(DIM,1.0),0.0);
//         doTest(new Rosen(), startPoint, insigma, boundaries,
//                 GoalType.MINIMIZE, LAMBDA, false, 1, 1e-13,
//                 1e-10, 1e-4, 1000000, expected);
//      }

    @Test
    public void testMath864() {
        final CMAESOptimizer optimizer = new CMAESOptimizer();
        final MultivariateFunction fitnessFunction = new MultivariateFunction() {
                public double value(double[] parameters) {
                    final double target = 1;
                    final double error = target - parameters[0];
                    return error * error;
                }
            };

        final double[] start = { 0 };
        final double[] lower = { -1e6 };
        final double[] upper = { 1.5 };
        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,
                                                   start, lower, upper).getPoint();
        Assert.assertTrue("Out of bounds (" + result[0] + " > " + upper[0] + ")",
                          result[0] <= upper[0]);
    }

    /**
     * Cf. MATH-867
     */
    @Test
    public void testFitAccuracyDependsOnBoundary() {
        final CMAESOptimizer optimizer = new CMAESOptimizer();
        final MultivariateFunction fitnessFunction = new MultivariateFunction() {
                public double value(double[] parameters) {
                    final double target = 11.1;
                    final double error = target - parameters[0];
                    return error * error;
                }
            };

        final double[] start = { 1 };
 
        // No bounds.
        PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
                                                   start);
        final double resNoBound = result.getPoint()[0];

        // Optimum is near the lower bound.
        final double[] lower = { -20 };
        final double[] upper = { 5e16 };
        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
                                    start, lower, upper);
        final double resNearLo = result.getPoint()[0];

        // Optimum is near the upper bound.
        lower[0] = -5e16;
        upper[0] = 20;
        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
                                    start, lower, upper);
        final double resNearHi = result.getPoint()[0];

        // System.out.println("resNoBound=" + resNoBound +
        //                    " resNearLo=" + resNearLo +
        //                    " resNearHi=" + resNearHi);

        // The two values currently differ by a substantial amount, indicating that
        // the bounds definition can prevent reaching the optimum.
        Assert.assertEquals(resNoBound, resNearLo, 1e-3);
        Assert.assertEquals(resNoBound, resNearHi, 1e-3);
    }
 
    /**
     * @param func Function to optimize.
     * @param startPoint Starting point.
     * @param inSigma Individual input sigma.
     * @param boundaries Upper / lower point limit.
     * @param goal Minimization or maximization.
     * @param lambda Population size used for offspring.
     * @param isActive Covariance update mechanism.
     * @param diagonalOnly Simplified covariance update.
     * @param stopValue Termination criteria for optimization.
     * @param fTol Tolerance relative error on the objective function.
     * @param pointTol Tolerance for checking that the optimum is correct.
     * @param maxEvaluations Maximum number of evaluations.
     * @param expected Expected point / value.
     */
    private void doTest(MultivariateFunction func,
            double[] startPoint,
            double[] inSigma,
            double[][] boundaries,
            GoalType goal,
            int lambda,
            boolean isActive,
            int diagonalOnly, 
            double stopValue,
            double fTol,
            double pointTol,
            int maxEvaluations,
            PointValuePair expected) {
        int dim = startPoint.length;
        // test diagonalOnly = 0 - slow but normally fewer feval#
        CMAESOptimizer optim = new CMAESOptimizer(30000, stopValue, isActive, diagonalOnly,
                                                  0, new MersenneTwister(), false, null);
        final double[] lB = boundaries == null ? null : boundaries[0];
        final double[] uB = boundaries == null ? null : boundaries[1];
        PointValuePair result = boundaries == null ?
            optim.optimize(maxEvaluations, func, goal,
                           new InitialGuess(startPoint),
                           new CMAESOptimizer.Sigma(inSigma),
                           new CMAESOptimizer.PopulationSize(lambda)) :
            optim.optimize(maxEvaluations, func, goal,
                           new InitialGuess(startPoint),
                           new SimpleBounds(lB, uB),
                           new CMAESOptimizer.Sigma(inSigma),
                           new CMAESOptimizer.PopulationSize(lambda));
        // System.out.println("sol=" + Arrays.toString(result.getPoint()));
        Assert.assertEquals(expected.getValue(), result.getValue(), fTol);
        for (int i = 0; i < dim; i++) {
            Assert.assertEquals(expected.getPoint()[i], result.getPoint()[i], pointTol);
        }
    }

    private static double[] point(int n, double value) {
        double[] ds = new double[n];
        Arrays.fill(ds, value);
        return ds;
    }

    private static double[][] boundaries(int dim,
            double lower, double upper) {
        double[][] boundaries = new double[2][dim];
        for (int i = 0; i < dim; i++)
            boundaries[0][i] = lower;
        for (int i = 0; i < dim; i++)
            boundaries[1][i] = upper;
        return boundaries;
    }

    private static class Sphere implements MultivariateFunction {

        public double value(double[] x) {
            double f = 0;
            for (int i = 0; i < x.length; ++i)
                f += x[i] * x[i];
            return f;
        }
    }

    private static class Cigar implements MultivariateFunction {
        private double factor;

        Cigar() {
            this(1e3);
        }

        Cigar(double axisratio) {
            factor = axisratio * axisratio;
        }

        public double value(double[] x) {
            double f = x[0] * x[0];
            for (int i = 1; i < x.length; ++i)
                f += factor * x[i] * x[i];
            return f;
        }
    }

    private static class Tablet implements MultivariateFunction {
        private double factor;

        Tablet() {
            this(1e3);
        }

        Tablet(double axisratio) {
            factor = axisratio * axisratio;
        }

        public double value(double[] x) {
            double f = factor * x[0] * x[0];
            for (int i = 1; i < x.length; ++i)
                f += x[i] * x[i];
            return f;
        }
    }

    private static class CigTab implements MultivariateFunction {
        private double factor;

        CigTab() {
            this(1e4);
        }

        CigTab(double axisratio) {
            factor = axisratio;
        }

        public double value(double[] x) {
            int end = x.length - 1;
            double f = x[0] * x[0] / factor + factor * x[end] * x[end];
            for (int i = 1; i < end; ++i)
                f += x[i] * x[i];
            return f;
        }
    }

    private static class TwoAxes implements MultivariateFunction {

        private double factor;

        TwoAxes() {
            this(1e6);
        }

        TwoAxes(double axisratio) {
            factor = axisratio * axisratio;
        }

        public double value(double[] x) {
            double f = 0;
            for (int i = 0; i < x.length; ++i)
                f += (i < x.length / 2 ? factor : 1) * x[i] * x[i];
            return f;
        }
    }

    private static class ElliRotated implements MultivariateFunction {
        private Basis B = new Basis();
        private double factor;

        ElliRotated() {
            this(1e3);
        }

        ElliRotated(double axisratio) {
            factor = axisratio * axisratio;
        }

        public double value(double[] x) {
            double f = 0;
            x = B.Rotate(x);
            for (int i = 0; i < x.length; ++i)
                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];
            return f;
        }
    }

    private static class Elli implements MultivariateFunction {

        private double factor;

        Elli() {
            this(1e3);
        }

        Elli(double axisratio) {
            factor = axisratio * axisratio;
        }

        public double value(double[] x) {
            double f = 0;
            for (int i = 0; i < x.length; ++i)
                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];
            return f;
        }
    }

    private static class MinusElli implements MultivariateFunction {

        public double value(double[] x) {
            return 1.0-(new Elli().value(x));
        }
    }

    private static class DiffPow implements MultivariateFunction {

        public double value(double[] x) {
            double f = 0;
            for (int i = 0; i < x.length; ++i)
                f += Math.pow(Math.abs(x[i]), 2. + 10 * (double) i
                        / (x.length - 1.));
            return f;
        }
    }

    private static class SsDiffPow implements MultivariateFunction {

        public double value(double[] x) {
            double f = Math.pow(new DiffPow().value(x), 0.25);
            return f;
        }
    }

    private static class Rosen implements MultivariateFunction {

        public double value(double[] x) {
            double f = 0;
            for (int i = 0; i < x.length - 1; ++i)
                f += 1e2 * (x[i] * x[i] - x[i + 1]) * (x[i] * x[i] - x[i + 1])
                + (x[i] - 1.) * (x[i] - 1.);
            return f;
        }
    }

    private static class Ackley implements MultivariateFunction {
        private double axisratio;

        Ackley(double axra) {
            axisratio = axra;
        }

        public Ackley() {
            this(1);
        }

        public double value(double[] x) {
            double f = 0;
            double res2 = 0;
            double fac = 0;
            for (int i = 0; i < x.length; ++i) {
                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));
                f += fac * fac * x[i] * x[i];
                res2 += Math.cos(2. * Math.PI * fac * x[i]);
            }
            f = (20. - 20. * Math.exp(-0.2 * Math.sqrt(f / x.length))
                    + Math.exp(1.) - Math.exp(res2 / x.length));
            return f;
        }
    }

    private static class Rastrigin implements MultivariateFunction {

        private double axisratio;
        private double amplitude;

        Rastrigin() {
            this(1, 10);
        }

        Rastrigin(double axisratio, double amplitude) {
            this.axisratio = axisratio;
            this.amplitude = amplitude;
        }

        public double value(double[] x) {
            double f = 0;
            double fac;
            for (int i = 0; i < x.length; ++i) {
                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));
                if (i == 0 && x[i] < 0)
                    fac *= 1.;
                f += fac * fac * x[i] * x[i] + amplitude
                * (1. - Math.cos(2. * Math.PI * fac * x[i]));
            }
            return f;
        }
    }

    private static class Basis {
        double[][] basis;
        Random rand = new Random(2); // use not always the same basis

        double[] Rotate(double[] x) {
            GenBasis(x.length);
            double[] y = new double[x.length];
            for (int i = 0; i < x.length; ++i) {
                y[i] = 0;
                for (int j = 0; j < x.length; ++j)
                    y[i] += basis[i][j] * x[j];
            }
            return y;
        }

        void GenBasis(int DIM) {
            if (basis != null ? basis.length == DIM : false)
                return;

            double sp;
            int i, j, k;

            /* generate orthogonal basis */
            basis = new double[DIM][DIM];
            for (i = 0; i < DIM; ++i) {
                /* sample components gaussian */
                for (j = 0; j < DIM; ++j)
                    basis[i][j] = rand.nextGaussian();
                /* substract projection of previous vectors */
                for (j = i - 1; j >= 0; --j) {
                    for (sp = 0., k = 0; k < DIM; ++k)
                        sp += basis[i][k] * basis[j][k]; /* scalar product */
                    for (k = 0; k < DIM; ++k)
                        basis[i][k] -= sp * basis[j][k]; /* substract */
                }
                /* normalize */
                for (sp = 0., k = 0; k < DIM; ++k)
                    sp += basis[i][k] * basis[i][k]; /* squared norm */
                for (k = 0; k < DIM; ++k)
                    basis[i][k] /= Math.sqrt(sp);
            }
        }
    }
}
Method byte code: 
0: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testEllipse
Start line: 162
End line: 174
Method source code: 
    public void testEllipse() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Elli(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Elli(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #36
41: dup
42: invokespecial #37
45: aload_1
46: aload_2
47: aload_3
48: getstatic     #17
51: getstatic     #18
54: iconst_1
55: iconst_0
56: ldc2_w        #19
59: ldc2_w        #19
62: ldc2_w        #21
65: ldc           #23
67: aload         4
69: invokespecial #24
72: aload_0
73: new           #36
76: dup
77: invokespecial #37
80: aload_1
81: aload_2
82: aload_3
83: getstatic     #17
86: getstatic     #18
89: iconst_0
90: iconst_0
91: ldc2_w        #19
94: ldc2_w        #19
97: ldc2_w        #21
100: ldc           #23
102: aload         4
104: invokespecial #24
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testElliRotated
Start line: 177
End line: 189
Method source code: 
    public void testElliRotated() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new ElliRotated(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new ElliRotated(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #38
41: dup
42: invokespecial #39
45: aload_1
46: aload_2
47: aload_3
48: getstatic     #17
51: getstatic     #18
54: iconst_1
55: iconst_0
56: ldc2_w        #19
59: ldc2_w        #19
62: ldc2_w        #21
65: ldc           #23
67: aload         4
69: invokespecial #24
72: aload_0
73: new           #38
76: dup
77: invokespecial #39
80: aload_1
81: aload_2
82: aload_3
83: getstatic     #17
86: getstatic     #18
89: iconst_0
90: iconst_0
91: ldc2_w        #19
94: ldc2_w        #19
97: ldc2_w        #21
100: ldc           #23
102: aload         4
104: invokespecial #24
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testCigar
Start line: 192
End line: 204
Method source code: 
    public void testCigar() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #40
41: dup
42: invokespecial #41
45: aload_1
46: aload_2
47: aload_3
48: getstatic     #17
51: getstatic     #18
54: iconst_1
55: iconst_0
56: ldc2_w        #19
59: ldc2_w        #19
62: ldc2_w        #21
65: ldc           #42
67: aload         4
69: invokespecial #24
72: aload_0
73: new           #40
76: dup
77: invokespecial #41
80: aload_1
81: aload_2
82: aload_3
83: getstatic     #17
86: getstatic     #18
89: iconst_0
90: iconst_0
91: ldc2_w        #19
94: ldc2_w        #19
97: ldc2_w        #21
100: ldc           #23
102: aload         4
104: invokespecial #24
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testCigarWithBoundaries
Start line: 207
End line: 219
Method source code: 
    public void testCigarWithBoundaries() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = boundaries(DIM, -1e100, Double.POSITIVE_INFINITY);
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: bipush        13
18: ldc2_w        #43
21: ldc2_w        #46
24: invokestatic  #12
27: astore_3
28: new           #13
31: dup
32: bipush        13
34: dconst_0
35: invokestatic  #5
38: dconst_0
39: invokespecial #14
42: astore        4
44: aload_0
45: new           #40
48: dup
49: invokespecial #41
52: aload_1
53: aload_2
54: aload_3
55: getstatic     #17
58: getstatic     #18
61: iconst_1
62: iconst_0
63: ldc2_w        #19
66: ldc2_w        #19
69: ldc2_w        #21
72: ldc           #42
74: aload         4
76: invokespecial #24
79: aload_0
80: new           #40
83: dup
84: invokespecial #41
87: aload_1
88: aload_2
89: aload_3
90: getstatic     #17
93: getstatic     #18
96: iconst_0
97: iconst_0
98: ldc2_w        #19
101: ldc2_w        #19
104: ldc2_w        #21
107: ldc           #23
109: aload         4
111: invokespecial #24
114: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testTwoAxes
Start line: 222
End line: 234
Method source code: 
    public void testTwoAxes() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new TwoAxes(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new TwoAxes(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-8, 1e-3, 200000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #48
41: dup
42: invokespecial #49
45: aload_1
46: aload_2
47: aload_3
48: getstatic     #17
51: iconst_2
52: getstatic     #18
55: imul
56: iconst_1
57: iconst_0
58: ldc2_w        #19
61: ldc2_w        #19
64: ldc2_w        #21
67: ldc           #42
69: aload         4
71: invokespecial #24
74: aload_0
75: new           #48
78: dup
79: invokespecial #49
82: aload_1
83: aload_2
84: aload_3
85: getstatic     #17
88: iconst_2
89: getstatic     #18
92: imul
93: iconst_0
94: iconst_0
95: ldc2_w        #19
98: ldc2_w        #50
101: ldc2_w        #52
104: ldc           #42
106: aload         4
108: invokespecial #24
111: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testCigTab
Start line: 237
End line: 769
Method source code: 
    public void testCigTab() {}
// Defects4J: flaky method
//     @Test
//     public void testCigTab() {
//         double[] startPoint = point(DIM,1.0);
//         double[] insigma = point(DIM,0.3);
//         double[][] boundaries = null;
//         PointValuePair expected =
//             new PointValuePair(point(DIM,0.0),0.0);
//         doTest(new CigTab(), startPoint, insigma, boundaries,
//                 GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
//                 1e-13, 5e-5, 100000, expected);
//         doTest(new CigTab(), startPoint, insigma, boundaries,
//                 GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
//                 1e-13, 5e-5, 100000, expected);
//     }

    @Test
    public void testSphere() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Sphere(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Sphere(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }

    @Test
    public void testTablet() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Tablet(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Tablet(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }

    @Test
    public void testDiffPow() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new DiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, true, 0, 1e-13,
                1e-8, 1e-1, 100000, expected);
        doTest(new DiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, false, 0, 1e-13,
                1e-8, 2e-1, 100000, expected);
    }

    @Test
    public void testSsDiffPow() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new SsDiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, true, 0, 1e-13,
                1e-4, 1e-1, 200000, expected);
        doTest(new SsDiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, false, 0, 1e-13,
                1e-4, 1e-1, 200000, expected);
    }

    @Test
    public void testAckley() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,1.0);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Ackley(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-9, 1e-5, 100000, expected);
        doTest(new Ackley(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-9, 1e-5, 100000, expected);
    }

    @Test
    public void testRastrigin() {
        double[] startPoint = point(DIM,0.1);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Rastrigin(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new Rastrigin(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), false, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
    }

    @Test
    public void testConstrainedRosen() {
        double[] startPoint = point(DIM, 0.1);
        double[] insigma = point(DIM, 0.1);
        double[][] boundaries = boundaries(DIM, -1, 2);
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }

    @Test
    public void testDiagonalRosen() {}
// Defects4J: flaky method
//     @Test
//     public void testDiagonalRosen() {
//         double[] startPoint = point(DIM,0.1);
//         double[] insigma = point(DIM,0.1);
//         double[][] boundaries = null;
//         PointValuePair expected =
//             new PointValuePair(point(DIM,1.0),0.0);
//         doTest(new Rosen(), startPoint, insigma, boundaries,
//                 GoalType.MINIMIZE, LAMBDA, false, 1, 1e-13,
//                 1e-10, 1e-4, 1000000, expected);
//      }

    @Test
    public void testMath864() {
        final CMAESOptimizer optimizer = new CMAESOptimizer();
        final MultivariateFunction fitnessFunction = new MultivariateFunction() {
                public double value(double[] parameters) {
                    final double target = 1;
                    final double error = target - parameters[0];
                    return error * error;
                }
            };

        final double[] start = { 0 };
        final double[] lower = { -1e6 };
        final double[] upper = { 1.5 };
        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,
                                                   start, lower, upper).getPoint();
        Assert.assertTrue("Out of bounds (" + result[0] + " > " + upper[0] + ")",
                          result[0] <= upper[0]);
    }

    /**
     * Cf. MATH-867
     */
    @Test
    public void testFitAccuracyDependsOnBoundary() {
        final CMAESOptimizer optimizer = new CMAESOptimizer();
        final MultivariateFunction fitnessFunction = new MultivariateFunction() {
                public double value(double[] parameters) {
                    final double target = 11.1;
                    final double error = target - parameters[0];
                    return error * error;
                }
            };

        final double[] start = { 1 };
 
        // No bounds.
        PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
                                                   start);
        final double resNoBound = result.getPoint()[0];

        // Optimum is near the lower bound.
        final double[] lower = { -20 };
        final double[] upper = { 5e16 };
        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
                                    start, lower, upper);
        final double resNearLo = result.getPoint()[0];

        // Optimum is near the upper bound.
        lower[0] = -5e16;
        upper[0] = 20;
        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
                                    start, lower, upper);
        final double resNearHi = result.getPoint()[0];

        // System.out.println("resNoBound=" + resNoBound +
        //                    " resNearLo=" + resNearLo +
        //                    " resNearHi=" + resNearHi);

        // The two values currently differ by a substantial amount, indicating that
        // the bounds definition can prevent reaching the optimum.
        Assert.assertEquals(resNoBound, resNearLo, 1e-3);
        Assert.assertEquals(resNoBound, resNearHi, 1e-3);
    }
 
    /**
     * @param func Function to optimize.
     * @param startPoint Starting point.
     * @param inSigma Individual input sigma.
     * @param boundaries Upper / lower point limit.
     * @param goal Minimization or maximization.
     * @param lambda Population size used for offspring.
     * @param isActive Covariance update mechanism.
     * @param diagonalOnly Simplified covariance update.
     * @param stopValue Termination criteria for optimization.
     * @param fTol Tolerance relative error on the objective function.
     * @param pointTol Tolerance for checking that the optimum is correct.
     * @param maxEvaluations Maximum number of evaluations.
     * @param expected Expected point / value.
     */
    private void doTest(MultivariateFunction func,
            double[] startPoint,
            double[] inSigma,
            double[][] boundaries,
            GoalType goal,
            int lambda,
            boolean isActive,
            int diagonalOnly, 
            double stopValue,
            double fTol,
            double pointTol,
            int maxEvaluations,
            PointValuePair expected) {
        int dim = startPoint.length;
        // test diagonalOnly = 0 - slow but normally fewer feval#
        CMAESOptimizer optim = new CMAESOptimizer(30000, stopValue, isActive, diagonalOnly,
                                                  0, new MersenneTwister(), false, null);
        final double[] lB = boundaries == null ? null : boundaries[0];
        final double[] uB = boundaries == null ? null : boundaries[1];
        PointValuePair result = boundaries == null ?
            optim.optimize(maxEvaluations, func, goal,
                           new InitialGuess(startPoint),
                           new CMAESOptimizer.Sigma(inSigma),
                           new CMAESOptimizer.PopulationSize(lambda)) :
            optim.optimize(maxEvaluations, func, goal,
                           new InitialGuess(startPoint),
                           new SimpleBounds(lB, uB),
                           new CMAESOptimizer.Sigma(inSigma),
                           new CMAESOptimizer.PopulationSize(lambda));
        // System.out.println("sol=" + Arrays.toString(result.getPoint()));
        Assert.assertEquals(expected.getValue(), result.getValue(), fTol);
        for (int i = 0; i < dim; i++) {
            Assert.assertEquals(expected.getPoint()[i], result.getPoint()[i], pointTol);
        }
    }

    private static double[] point(int n, double value) {
        double[] ds = new double[n];
        Arrays.fill(ds, value);
        return ds;
    }

    private static double[][] boundaries(int dim,
            double lower, double upper) {
        double[][] boundaries = new double[2][dim];
        for (int i = 0; i < dim; i++)
            boundaries[0][i] = lower;
        for (int i = 0; i < dim; i++)
            boundaries[1][i] = upper;
        return boundaries;
    }

    private static class Sphere implements MultivariateFunction {

        public double value(double[] x) {
            double f = 0;
            for (int i = 0; i < x.length; ++i)
                f += x[i] * x[i];
            return f;
        }
    }

    private static class Cigar implements MultivariateFunction {
        private double factor;

        Cigar() {
            this(1e3);
        }

        Cigar(double axisratio) {
            factor = axisratio * axisratio;
        }

        public double value(double[] x) {
            double f = x[0] * x[0];
            for (int i = 1; i < x.length; ++i)
                f += factor * x[i] * x[i];
            return f;
        }
    }

    private static class Tablet implements MultivariateFunction {
        private double factor;

        Tablet() {
            this(1e3);
        }

        Tablet(double axisratio) {
            factor = axisratio * axisratio;
        }

        public double value(double[] x) {
            double f = factor * x[0] * x[0];
            for (int i = 1; i < x.length; ++i)
                f += x[i] * x[i];
            return f;
        }
    }

    private static class CigTab implements MultivariateFunction {
        private double factor;

        CigTab() {
            this(1e4);
        }

        CigTab(double axisratio) {
            factor = axisratio;
        }

        public double value(double[] x) {
            int end = x.length - 1;
            double f = x[0] * x[0] / factor + factor * x[end] * x[end];
            for (int i = 1; i < end; ++i)
                f += x[i] * x[i];
            return f;
        }
    }

    private static class TwoAxes implements MultivariateFunction {

        private double factor;

        TwoAxes() {
            this(1e6);
        }

        TwoAxes(double axisratio) {
            factor = axisratio * axisratio;
        }

        public double value(double[] x) {
            double f = 0;
            for (int i = 0; i < x.length; ++i)
                f += (i < x.length / 2 ? factor : 1) * x[i] * x[i];
            return f;
        }
    }

    private static class ElliRotated implements MultivariateFunction {
        private Basis B = new Basis();
        private double factor;

        ElliRotated() {
            this(1e3);
        }

        ElliRotated(double axisratio) {
            factor = axisratio * axisratio;
        }

        public double value(double[] x) {
            double f = 0;
            x = B.Rotate(x);
            for (int i = 0; i < x.length; ++i)
                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];
            return f;
        }
    }

    private static class Elli implements MultivariateFunction {

        private double factor;

        Elli() {
            this(1e3);
        }

        Elli(double axisratio) {
            factor = axisratio * axisratio;
        }

        public double value(double[] x) {
            double f = 0;
            for (int i = 0; i < x.length; ++i)
                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];
            return f;
        }
    }

    private static class MinusElli implements MultivariateFunction {

        public double value(double[] x) {
            return 1.0-(new Elli().value(x));
        }
    }

    private static class DiffPow implements MultivariateFunction {

        public double value(double[] x) {
            double f = 0;
            for (int i = 0; i < x.length; ++i)
                f += Math.pow(Math.abs(x[i]), 2. + 10 * (double) i
                        / (x.length - 1.));
            return f;
        }
    }

    private static class SsDiffPow implements MultivariateFunction {

        public double value(double[] x) {
            double f = Math.pow(new DiffPow().value(x), 0.25);
            return f;
        }
    }

    private static class Rosen implements MultivariateFunction {

        public double value(double[] x) {
            double f = 0;
            for (int i = 0; i < x.length - 1; ++i)
                f += 1e2 * (x[i] * x[i] - x[i + 1]) * (x[i] * x[i] - x[i + 1])
                + (x[i] - 1.) * (x[i] - 1.);
            return f;
        }
    }

    private static class Ackley implements MultivariateFunction {
        private double axisratio;

        Ackley(double axra) {
            axisratio = axra;
        }

        public Ackley() {
            this(1);
        }

        public double value(double[] x) {
            double f = 0;
            double res2 = 0;
            double fac = 0;
            for (int i = 0; i < x.length; ++i) {
                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));
                f += fac * fac * x[i] * x[i];
                res2 += Math.cos(2. * Math.PI * fac * x[i]);
            }
            f = (20. - 20. * Math.exp(-0.2 * Math.sqrt(f / x.length))
                    + Math.exp(1.) - Math.exp(res2 / x.length));
            return f;
        }
    }

    private static class Rastrigin implements MultivariateFunction {

        private double axisratio;
        private double amplitude;

        Rastrigin() {
            this(1, 10);
        }

        Rastrigin(double axisratio, double amplitude) {
            this.axisratio = axisratio;
            this.amplitude = amplitude;
        }

        public double value(double[] x) {
            double f = 0;
            double fac;
            for (int i = 0; i < x.length; ++i) {
                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));
                if (i == 0 && x[i] < 0)
                    fac *= 1.;
                f += fac * fac * x[i] * x[i] + amplitude
                * (1. - Math.cos(2. * Math.PI * fac * x[i]));
            }
            return f;
        }
    }

    private static class Basis {
        double[][] basis;
        Random rand = new Random(2); // use not always the same basis

        double[] Rotate(double[] x) {
            GenBasis(x.length);
            double[] y = new double[x.length];
            for (int i = 0; i < x.length; ++i) {
                y[i] = 0;
                for (int j = 0; j < x.length; ++j)
                    y[i] += basis[i][j] * x[j];
            }
            return y;
        }

        void GenBasis(int DIM) {
            if (basis != null ? basis.length == DIM : false)
                return;

            double sp;
            int i, j, k;

            /* generate orthogonal basis */
            basis = new double[DIM][DIM];
            for (i = 0; i < DIM; ++i) {
                /* sample components gaussian */
                for (j = 0; j < DIM; ++j)
                    basis[i][j] = rand.nextGaussian();
                /* substract projection of previous vectors */
                for (j = i - 1; j >= 0; --j) {
                    for (sp = 0., k = 0; k < DIM; ++k)
                        sp += basis[i][k] * basis[j][k]; /* scalar product */
                    for (k = 0; k < DIM; ++k)
                        basis[i][k] -= sp * basis[j][k]; /* substract */
                }
                /* normalize */
                for (sp = 0., k = 0; k < DIM; ++k)
                    sp += basis[i][k] * basis[i][k]; /* squared norm */
                for (k = 0; k < DIM; ++k)
                    basis[i][k] /= Math.sqrt(sp);
            }
        }
    }
}
Method byte code: 
0: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testSphere
Start line: 255
End line: 267
Method source code: 
    public void testSphere() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Sphere(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Sphere(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #54
41: dup
42: aconst_null
43: invokespecial #55
46: aload_1
47: aload_2
48: aload_3
49: getstatic     #17
52: getstatic     #18
55: iconst_1
56: iconst_0
57: ldc2_w        #19
60: ldc2_w        #19
63: ldc2_w        #21
66: ldc           #23
68: aload         4
70: invokespecial #24
73: aload_0
74: new           #54
77: dup
78: aconst_null
79: invokespecial #55
82: aload_1
83: aload_2
84: aload_3
85: getstatic     #17
88: getstatic     #18
91: iconst_0
92: iconst_0
93: ldc2_w        #19
96: ldc2_w        #19
99: ldc2_w        #21
102: ldc           #23
104: aload         4
106: invokespecial #24
109: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testTablet
Start line: 270
End line: 282
Method source code: 
    public void testTablet() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Tablet(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Tablet(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #56
41: dup
42: invokespecial #57
45: aload_1
46: aload_2
47: aload_3
48: getstatic     #17
51: getstatic     #18
54: iconst_1
55: iconst_0
56: ldc2_w        #19
59: ldc2_w        #19
62: ldc2_w        #21
65: ldc           #23
67: aload         4
69: invokespecial #24
72: aload_0
73: new           #56
76: dup
77: invokespecial #57
80: aload_1
81: aload_2
82: aload_3
83: getstatic     #17
86: getstatic     #18
89: iconst_0
90: iconst_0
91: ldc2_w        #19
94: ldc2_w        #19
97: ldc2_w        #21
100: ldc           #23
102: aload         4
104: invokespecial #24
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testDiffPow
Start line: 285
End line: 297
Method source code: 
    public void testDiffPow() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new DiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, true, 0, 1e-13,
                1e-8, 1e-1, 100000, expected);
        doTest(new DiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, false, 0, 1e-13,
                1e-8, 2e-1, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #58
41: dup
42: aconst_null
43: invokespecial #59
46: aload_1
47: aload_2
48: aload_3
49: getstatic     #17
52: bipush        10
54: iconst_1
55: iconst_0
56: ldc2_w        #19
59: ldc2_w        #50
62: ldc2_w        #34
65: ldc           #23
67: aload         4
69: invokespecial #24
72: aload_0
73: new           #58
76: dup
77: aconst_null
78: invokespecial #59
81: aload_1
82: aload_2
83: aload_3
84: getstatic     #17
87: bipush        10
89: iconst_0
90: iconst_0
91: ldc2_w        #19
94: ldc2_w        #50
97: ldc2_w        #60
100: ldc           #23
102: aload         4
104: invokespecial #24
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testSsDiffPow
Start line: 300
End line: 312
Method source code: 
    public void testSsDiffPow() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new SsDiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, true, 0, 1e-13,
                1e-4, 1e-1, 200000, expected);
        doTest(new SsDiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, false, 0, 1e-13,
                1e-4, 1e-1, 200000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #62
41: dup
42: aconst_null
43: invokespecial #63
46: aload_1
47: aload_2
48: aload_3
49: getstatic     #17
52: bipush        10
54: iconst_1
55: iconst_0
56: ldc2_w        #19
59: ldc2_w        #64
62: ldc2_w        #34
65: ldc           #42
67: aload         4
69: invokespecial #24
72: aload_0
73: new           #62
76: dup
77: aconst_null
78: invokespecial #63
81: aload_1
82: aload_2
83: aload_3
84: getstatic     #17
87: bipush        10
89: iconst_0
90: iconst_0
91: ldc2_w        #19
94: ldc2_w        #64
97: ldc2_w        #34
100: ldc           #42
102: aload         4
104: invokespecial #24
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testAckley
Start line: 315
End line: 327
Method source code: 
    public void testAckley() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,1.0);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Ackley(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-9, 1e-5, 100000, expected);
        doTest(new Ackley(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-9, 1e-5, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: dconst_1
10: invokestatic  #5
13: astore_2
14: aconst_null
15: checkcast     #31
18: astore_3
19: new           #13
22: dup
23: bipush        13
25: dconst_0
26: invokestatic  #5
29: dconst_0
30: invokespecial #14
33: astore        4
35: aload_0
36: new           #66
39: dup
40: invokespecial #67
43: aload_1
44: aload_2
45: aload_3
46: getstatic     #17
49: iconst_2
50: getstatic     #18
53: imul
54: iconst_1
55: iconst_0
56: ldc2_w        #19
59: ldc2_w        #68
62: ldc2_w        #70
65: ldc           #23
67: aload         4
69: invokespecial #24
72: aload_0
73: new           #66
76: dup
77: invokespecial #67
80: aload_1
81: aload_2
82: aload_3
83: getstatic     #17
86: iconst_2
87: getstatic     #18
90: imul
91: iconst_0
92: iconst_0
93: ldc2_w        #19
96: ldc2_w        #68
99: ldc2_w        #70
102: ldc           #23
104: aload         4
106: invokespecial #24
109: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testRastrigin
Start line: 330
End line: 342
Method source code: 
    public void testRastrigin() {
        double[] startPoint = point(DIM,0.1);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Rastrigin(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new Rastrigin(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), false, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #34
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #34
14: invokestatic  #5
17: astore_2
18: aconst_null
19: checkcast     #31
22: astore_3
23: new           #13
26: dup
27: bipush        13
29: dconst_0
30: invokestatic  #5
33: dconst_0
34: invokespecial #14
37: astore        4
39: aload_0
40: new           #72
43: dup
44: invokespecial #73
47: aload_1
48: aload_2
49: aload_3
50: getstatic     #17
53: ldc2_w        #74
56: ldc2_w        #76
59: invokestatic  #78
62: dmul
63: d2i
64: iconst_1
65: iconst_0
66: ldc2_w        #19
69: ldc2_w        #19
72: ldc2_w        #21
75: ldc           #42
77: aload         4
79: invokespecial #24
82: aload_0
83: new           #72
86: dup
87: invokespecial #73
90: aload_1
91: aload_2
92: aload_3
93: getstatic     #17
96: ldc2_w        #74
99: ldc2_w        #76
102: invokestatic  #78
105: dmul
106: d2i
107: iconst_0
108: iconst_0
109: ldc2_w        #19
112: ldc2_w        #19
115: ldc2_w        #21
118: ldc           #42
120: aload         4
122: invokespecial #24
125: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testConstrainedRosen
Start line: 345
End line: 357
Method source code: 
    public void testConstrainedRosen() {
        double[] startPoint = point(DIM, 0.1);
        double[] insigma = point(DIM, 0.1);
        double[][] boundaries = boundaries(DIM, -1, 2);
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #34
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #34
14: invokestatic  #5
17: astore_2
18: bipush        13
20: ldc2_w        #8
23: ldc2_w        #10
26: invokestatic  #12
29: astore_3
30: new           #13
33: dup
34: bipush        13
36: dconst_1
37: invokestatic  #5
40: dconst_0
41: invokespecial #14
44: astore        4
46: aload_0
47: new           #15
50: dup
51: aconst_null
52: invokespecial #16
55: aload_1
56: aload_2
57: aload_3
58: getstatic     #17
61: iconst_2
62: getstatic     #18
65: imul
66: iconst_1
67: iconst_0
68: ldc2_w        #19
71: ldc2_w        #19
74: ldc2_w        #21
77: ldc           #23
79: aload         4
81: invokespecial #24
84: aload_0
85: new           #15
88: dup
89: aconst_null
90: invokespecial #16
93: aload_1
94: aload_2
95: aload_3
96: getstatic     #17
99: iconst_2
100: getstatic     #18
103: imul
104: iconst_0
105: iconst_0
106: ldc2_w        #19
109: ldc2_w        #19
112: ldc2_w        #21
115: ldc           #23
117: aload         4
119: invokespecial #24
122: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testDiagonalRosen
Start line: 360
End line: 769
Method source code: 
    public void testDiagonalRosen() {}
// Defects4J: flaky method
//     @Test
//     public void testDiagonalRosen() {
//         double[] startPoint = point(DIM,0.1);
//         double[] insigma = point(DIM,0.1);
//         double[][] boundaries = null;
//         PointValuePair expected =
//             new PointValuePair(point(DIM,1.0),0.0);
//         doTest(new Rosen(), startPoint, insigma, boundaries,
//                 GoalType.MINIMIZE, LAMBDA, false, 1, 1e-13,
//                 1e-10, 1e-4, 1000000, expected);
//      }

    @Test
    public void testMath864() {
        final CMAESOptimizer optimizer = new CMAESOptimizer();
        final MultivariateFunction fitnessFunction = new MultivariateFunction() {
                public double value(double[] parameters) {
                    final double target = 1;
                    final double error = target - parameters[0];
                    return error * error;
                }
            };

        final double[] start = { 0 };
        final double[] lower = { -1e6 };
        final double[] upper = { 1.5 };
        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,
                                                   start, lower, upper).getPoint();
        Assert.assertTrue("Out of bounds (" + result[0] + " > " + upper[0] + ")",
                          result[0] <= upper[0]);
    }

    /**
     * Cf. MATH-867
     */
    @Test
    public void testFitAccuracyDependsOnBoundary() {
        final CMAESOptimizer optimizer = new CMAESOptimizer();
        final MultivariateFunction fitnessFunction = new MultivariateFunction() {
                public double value(double[] parameters) {
                    final double target = 11.1;
                    final double error = target - parameters[0];
                    return error * error;
                }
            };

        final double[] start = { 1 };
 
        // No bounds.
        PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
                                                   start);
        final double resNoBound = result.getPoint()[0];

        // Optimum is near the lower bound.
        final double[] lower = { -20 };
        final double[] upper = { 5e16 };
        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
                                    start, lower, upper);
        final double resNearLo = result.getPoint()[0];

        // Optimum is near the upper bound.
        lower[0] = -5e16;
        upper[0] = 20;
        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
                                    start, lower, upper);
        final double resNearHi = result.getPoint()[0];

        // System.out.println("resNoBound=" + resNoBound +
        //                    " resNearLo=" + resNearLo +
        //                    " resNearHi=" + resNearHi);

        // The two values currently differ by a substantial amount, indicating that
        // the bounds definition can prevent reaching the optimum.
        Assert.assertEquals(resNoBound, resNearLo, 1e-3);
        Assert.assertEquals(resNoBound, resNearHi, 1e-3);
    }
 
    /**
     * @param func Function to optimize.
     * @param startPoint Starting point.
     * @param inSigma Individual input sigma.
     * @param boundaries Upper / lower point limit.
     * @param goal Minimization or maximization.
     * @param lambda Population size used for offspring.
     * @param isActive Covariance update mechanism.
     * @param diagonalOnly Simplified covariance update.
     * @param stopValue Termination criteria for optimization.
     * @param fTol Tolerance relative error on the objective function.
     * @param pointTol Tolerance for checking that the optimum is correct.
     * @param maxEvaluations Maximum number of evaluations.
     * @param expected Expected point / value.
     */
    private void doTest(MultivariateFunction func,
            double[] startPoint,
            double[] inSigma,
            double[][] boundaries,
            GoalType goal,
            int lambda,
            boolean isActive,
            int diagonalOnly, 
            double stopValue,
            double fTol,
            double pointTol,
            int maxEvaluations,
            PointValuePair expected) {
        int dim = startPoint.length;
        // test diagonalOnly = 0 - slow but normally fewer feval#
        CMAESOptimizer optim = new CMAESOptimizer(30000, stopValue, isActive, diagonalOnly,
                                                  0, new MersenneTwister(), false, null);
        final double[] lB = boundaries == null ? null : boundaries[0];
        final double[] uB = boundaries == null ? null : boundaries[1];
        PointValuePair result = boundaries == null ?
            optim.optimize(maxEvaluations, func, goal,
                           new InitialGuess(startPoint),
                           new CMAESOptimizer.Sigma(inSigma),
                           new CMAESOptimizer.PopulationSize(lambda)) :
            optim.optimize(maxEvaluations, func, goal,
                           new InitialGuess(startPoint),
                           new SimpleBounds(lB, uB),
                           new CMAESOptimizer.Sigma(inSigma),
                           new CMAESOptimizer.PopulationSize(lambda));
        // System.out.println("sol=" + Arrays.toString(result.getPoint()));
        Assert.assertEquals(expected.getValue(), result.getValue(), fTol);
        for (int i = 0; i < dim; i++) {
            Assert.assertEquals(expected.getPoint()[i], result.getPoint()[i], pointTol);
        }
    }

    private static double[] point(int n, double value) {
        double[] ds = new double[n];
        Arrays.fill(ds, value);
        return ds;
    }

    private static double[][] boundaries(int dim,
            double lower, double upper) {
        double[][] boundaries = new double[2][dim];
        for (int i = 0; i < dim; i++)
            boundaries[0][i] = lower;
        for (int i = 0; i < dim; i++)
            boundaries[1][i] = upper;
        return boundaries;
    }

    private static class Sphere implements MultivariateFunction {

        public double value(double[] x) {
            double f = 0;
            for (int i = 0; i < x.length; ++i)
                f += x[i] * x[i];
            return f;
        }
    }

    private static class Cigar implements MultivariateFunction {
        private double factor;

        Cigar() {
            this(1e3);
        }

        Cigar(double axisratio) {
            factor = axisratio * axisratio;
        }

        public double value(double[] x) {
            double f = x[0] * x[0];
            for (int i = 1; i < x.length; ++i)
                f += factor * x[i] * x[i];
            return f;
        }
    }

    private static class Tablet implements MultivariateFunction {
        private double factor;

        Tablet() {
            this(1e3);
        }

        Tablet(double axisratio) {
            factor = axisratio * axisratio;
        }

        public double value(double[] x) {
            double f = factor * x[0] * x[0];
            for (int i = 1; i < x.length; ++i)
                f += x[i] * x[i];
            return f;
        }
    }

    private static class CigTab implements MultivariateFunction {
        private double factor;

        CigTab() {
            this(1e4);
        }

        CigTab(double axisratio) {
            factor = axisratio;
        }

        public double value(double[] x) {
            int end = x.length - 1;
            double f = x[0] * x[0] / factor + factor * x[end] * x[end];
            for (int i = 1; i < end; ++i)
                f += x[i] * x[i];
            return f;
        }
    }

    private static class TwoAxes implements MultivariateFunction {

        private double factor;

        TwoAxes() {
            this(1e6);
        }

        TwoAxes(double axisratio) {
            factor = axisratio * axisratio;
        }

        public double value(double[] x) {
            double f = 0;
            for (int i = 0; i < x.length; ++i)
                f += (i < x.length / 2 ? factor : 1) * x[i] * x[i];
            return f;
        }
    }

    private static class ElliRotated implements MultivariateFunction {
        private Basis B = new Basis();
        private double factor;

        ElliRotated() {
            this(1e3);
        }

        ElliRotated(double axisratio) {
            factor = axisratio * axisratio;
        }

        public double value(double[] x) {
            double f = 0;
            x = B.Rotate(x);
            for (int i = 0; i < x.length; ++i)
                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];
            return f;
        }
    }

    private static class Elli implements MultivariateFunction {

        private double factor;

        Elli() {
            this(1e3);
        }

        Elli(double axisratio) {
            factor = axisratio * axisratio;
        }

        public double value(double[] x) {
            double f = 0;
            for (int i = 0; i < x.length; ++i)
                f += Math.pow(factor, i / (x.length - 1.)) * x[i] * x[i];
            return f;
        }
    }

    private static class MinusElli implements MultivariateFunction {

        public double value(double[] x) {
            return 1.0-(new Elli().value(x));
        }
    }

    private static class DiffPow implements MultivariateFunction {

        public double value(double[] x) {
            double f = 0;
            for (int i = 0; i < x.length; ++i)
                f += Math.pow(Math.abs(x[i]), 2. + 10 * (double) i
                        / (x.length - 1.));
            return f;
        }
    }

    private static class SsDiffPow implements MultivariateFunction {

        public double value(double[] x) {
            double f = Math.pow(new DiffPow().value(x), 0.25);
            return f;
        }
    }

    private static class Rosen implements MultivariateFunction {

        public double value(double[] x) {
            double f = 0;
            for (int i = 0; i < x.length - 1; ++i)
                f += 1e2 * (x[i] * x[i] - x[i + 1]) * (x[i] * x[i] - x[i + 1])
                + (x[i] - 1.) * (x[i] - 1.);
            return f;
        }
    }

    private static class Ackley implements MultivariateFunction {
        private double axisratio;

        Ackley(double axra) {
            axisratio = axra;
        }

        public Ackley() {
            this(1);
        }

        public double value(double[] x) {
            double f = 0;
            double res2 = 0;
            double fac = 0;
            for (int i = 0; i < x.length; ++i) {
                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));
                f += fac * fac * x[i] * x[i];
                res2 += Math.cos(2. * Math.PI * fac * x[i]);
            }
            f = (20. - 20. * Math.exp(-0.2 * Math.sqrt(f / x.length))
                    + Math.exp(1.) - Math.exp(res2 / x.length));
            return f;
        }
    }

    private static class Rastrigin implements MultivariateFunction {

        private double axisratio;
        private double amplitude;

        Rastrigin() {
            this(1, 10);
        }

        Rastrigin(double axisratio, double amplitude) {
            this.axisratio = axisratio;
            this.amplitude = amplitude;
        }

        public double value(double[] x) {
            double f = 0;
            double fac;
            for (int i = 0; i < x.length; ++i) {
                fac = Math.pow(axisratio, (i - 1.) / (x.length - 1.));
                if (i == 0 && x[i] < 0)
                    fac *= 1.;
                f += fac * fac * x[i] * x[i] + amplitude
                * (1. - Math.cos(2. * Math.PI * fac * x[i]));
            }
            return f;
        }
    }

    private static class Basis {
        double[][] basis;
        Random rand = new Random(2); // use not always the same basis

        double[] Rotate(double[] x) {
            GenBasis(x.length);
            double[] y = new double[x.length];
            for (int i = 0; i < x.length; ++i) {
                y[i] = 0;
                for (int j = 0; j < x.length; ++j)
                    y[i] += basis[i][j] * x[j];
            }
            return y;
        }

        void GenBasis(int DIM) {
            if (basis != null ? basis.length == DIM : false)
                return;

            double sp;
            int i, j, k;

            /* generate orthogonal basis */
            basis = new double[DIM][DIM];
            for (i = 0; i < DIM; ++i) {
                /* sample components gaussian */
                for (j = 0; j < DIM; ++j)
                    basis[i][j] = rand.nextGaussian();
                /* substract projection of previous vectors */
                for (j = i - 1; j >= 0; --j) {
                    for (sp = 0., k = 0; k < DIM; ++k)
                        sp += basis[i][k] * basis[j][k]; /* scalar product */
                    for (k = 0; k < DIM; ++k)
                        basis[i][k] -= sp * basis[j][k]; /* substract */
                }
                /* normalize */
                for (sp = 0., k = 0; k < DIM; ++k)
                    sp += basis[i][k] * basis[i][k]; /* squared norm */
                for (k = 0; k < DIM; ++k)
                    basis[i][k] /= Math.sqrt(sp);
            }
        }
    }
}
Method byte code: 
0: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testMath864
Start line: 375
End line: 392
Method source code: 
    public void testMath864() {
        final CMAESOptimizer optimizer = new CMAESOptimizer();
        final MultivariateFunction fitnessFunction = new MultivariateFunction() {
                public double value(double[] parameters) {
                    final double target = 1;
                    final double error = target - parameters[0];
                    return error * error;
                }
            };

        final double[] start = { 0 };
        final double[] lower = { -1e6 };
        final double[] upper = { 1.5 };
        final double[] result = optimizer.optimize(10000, fitnessFunction, GoalType.MINIMIZE,
                                                   start, lower, upper).getPoint();
        Assert.assertTrue("Out of bounds (" + result[0] + " > " + upper[0] + ")",
                          result[0] <= upper[0]);
    }
Method byte code: 
0: new           #79
3: dup
4: invokespecial #80
7: astore_1
8: new           #81
11: dup
12: aload_0
13: invokespecial #82
16: astore_2
17: iconst_1
18: newarray       double
20: dup
21: iconst_0
22: dconst_0
23: dastore
24: astore_3
25: iconst_1
26: newarray       double
28: dup
29: iconst_0
30: ldc2_w        #83
33: dastore
34: astore        4
36: iconst_1
37: newarray       double
39: dup
40: iconst_0
41: ldc2_w        #85
44: dastore
45: astore        5
47: aload_1
48: sipush        10000
51: aload_2
52: getstatic     #17
55: aload_3
56: aload         4
58: aload         5
60: invokevirtual #87
63: invokevirtual #88
66: astore        6
68: new           #89
71: dup
72: invokespecial #90
75: ldc           #91
77: invokevirtual #92
80: aload         6
82: iconst_0
83: daload
84: invokevirtual #93
87: ldc           #94
89: invokevirtual #92
92: aload         5
94: iconst_0
95: daload
96: invokevirtual #93
99: ldc           #95
101: invokevirtual #92
104: invokevirtual #96
107: aload         6
109: iconst_0
110: daload
111: aload         5
113: iconst_0
114: daload
115: dcmpg
116: ifgt          123
119: iconst_1
120: goto          124
123: iconst_0
124: invokestatic  #97
127: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testFitAccuracyDependsOnBoundary
Start line: 398
End line: 437
Method source code: 
    public void testFitAccuracyDependsOnBoundary() {
        final CMAESOptimizer optimizer = new CMAESOptimizer();
        final MultivariateFunction fitnessFunction = new MultivariateFunction() {
                public double value(double[] parameters) {
                    final double target = 11.1;
                    final double error = target - parameters[0];
                    return error * error;
                }
            };

        final double[] start = { 1 };
 
        // No bounds.
        PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
                                                   start);
        final double resNoBound = result.getPoint()[0];

        // Optimum is near the lower bound.
        final double[] lower = { -20 };
        final double[] upper = { 5e16 };
        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
                                    start, lower, upper);
        final double resNearLo = result.getPoint()[0];

        // Optimum is near the upper bound.
        lower[0] = -5e16;
        upper[0] = 20;
        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,
                                    start, lower, upper);
        final double resNearHi = result.getPoint()[0];

        // System.out.println("resNoBound=" + resNoBound +
        //                    " resNearLo=" + resNearLo +
        //                    " resNearHi=" + resNearHi);

        // The two values currently differ by a substantial amount, indicating that
        // the bounds definition can prevent reaching the optimum.
        Assert.assertEquals(resNoBound, resNearLo, 1e-3);
        Assert.assertEquals(resNoBound, resNearHi, 1e-3);
    }
Method byte code: 
0: new           #79
3: dup
4: invokespecial #80
7: astore_1
8: new           #98
11: dup
12: aload_0
13: invokespecial #99
16: astore_2
17: iconst_1
18: newarray       double
20: dup
21: iconst_0
22: dconst_1
23: dastore
24: astore_3
25: aload_1
26: ldc           #23
28: aload_2
29: getstatic     #17
32: aload_3
33: invokevirtual #100
36: astore        4
38: aload         4
40: invokevirtual #88
43: iconst_0
44: daload
45: dstore        5
47: iconst_1
48: newarray       double
50: dup
51: iconst_0
52: ldc2_w        #101
55: dastore
56: astore        7
58: iconst_1
59: newarray       double
61: dup
62: iconst_0
63: ldc2_w        #103
66: dastore
67: astore        8
69: aload_1
70: ldc           #23
72: aload_2
73: getstatic     #17
76: aload_3
77: aload         7
79: aload         8
81: invokevirtual #87
84: astore        4
86: aload         4
88: invokevirtual #88
91: iconst_0
92: daload
93: dstore        9
95: aload         7
97: iconst_0
98: ldc2_w        #105
101: dastore
102: aload         8
104: iconst_0
105: ldc2_w        #107
108: dastore
109: aload_1
110: ldc           #23
112: aload_2
113: getstatic     #17
116: aload_3
117: aload         7
119: aload         8
121: invokevirtual #87
124: astore        4
126: aload         4
128: invokevirtual #88
131: iconst_0
132: daload
133: dstore        11
135: dload         5
137: dload         9
139: ldc2_w        #52
142: invokestatic  #109
145: dload         5
147: dload         11
149: ldc2_w        #52
152: invokestatic  #109
155: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.class
Class name: SimplexOptimizerMultiDirectionalTest
Method name: testMinimize1
Start line: 29
End line: 41
Method source code: 
    public void testMinimize1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        optimizer.setSimplex(new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(200, fourExtrema, GoalType.MINIMIZE, new double[] { -3, 0 });
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6);
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);
        Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);
        Assert.assertTrue(optimizer.getEvaluations() > 120);
        Assert.assertTrue(optimizer.getEvaluations() < 150);
    }
Method byte code: 
0: new           #3
3: dup
4: ldc2_w        #4
7: ldc2_w        #6
10: invokespecial #8
13: astore_1
14: aload_1
15: new           #9
18: dup
19: iconst_2
20: newarray       double
22: dup
23: iconst_0
24: ldc2_w        #10
27: dastore
28: dup
29: iconst_1
30: ldc2_w        #10
33: dastore
34: invokespecial #12
37: invokevirtual #13
40: new           #14
43: dup
44: aconst_null
45: invokespecial #15
48: astore_2
49: aload_1
50: sipush        200
53: aload_2
54: getstatic     #16
57: iconst_2
58: newarray       double
60: dup
61: iconst_0
62: ldc2_w        #17
65: dastore
66: dup
67: iconst_1
68: dconst_0
69: dastore
70: invokevirtual #19
73: astore_3
74: aload_2
75: invokevirtual #20
78: pop
79: ldc2_w        #21
82: aload_3
83: invokevirtual #23
86: iconst_0
87: daload
88: ldc2_w        #24
91: invokestatic  #26
94: aload_2
95: invokevirtual #20
98: pop
99: ldc2_w        #27
102: aload_3
103: invokevirtual #23
106: iconst_1
107: daload
108: ldc2_w        #29
111: invokestatic  #26
114: aload_2
115: invokevirtual #20
118: pop
119: ldc2_w        #31
122: aload_3
123: invokevirtual #33
126: checkcast     #34
129: invokevirtual #35
132: ldc2_w        #36
135: invokestatic  #26
138: aload_1
139: invokevirtual #38
142: bipush        120
144: if_icmple     151
147: iconst_1
148: goto          152
151: iconst_0
152: invokestatic  #39
155: aload_1
156: invokevirtual #38
159: sipush        150
162: if_icmpge     169
165: iconst_1
166: goto          170
169: iconst_0
170: invokestatic  #39
173: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.class
Class name: SimplexOptimizerMultiDirectionalTest
Method name: testMinimize2
Start line: 44
End line: 56
Method source code: 
    public void testMinimize2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        optimizer.setSimplex(new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            =  optimizer.optimize(200, fourExtrema, GoalType.MINIMIZE, new double[] { 1, 0 });
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);
        Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);
        Assert.assertTrue(optimizer.getEvaluations() > 120);
        Assert.assertTrue(optimizer.getEvaluations() < 150);
    }
Method byte code: 
0: new           #3
3: dup
4: ldc2_w        #4
7: ldc2_w        #6
10: invokespecial #8
13: astore_1
14: aload_1
15: new           #9
18: dup
19: iconst_2
20: newarray       double
22: dup
23: iconst_0
24: ldc2_w        #10
27: dastore
28: dup
29: iconst_1
30: ldc2_w        #10
33: dastore
34: invokespecial #12
37: invokevirtual #13
40: new           #14
43: dup
44: aconst_null
45: invokespecial #15
48: astore_2
49: aload_1
50: sipush        200
53: aload_2
54: getstatic     #16
57: iconst_2
58: newarray       double
60: dup
61: iconst_0
62: dconst_1
63: dastore
64: dup
65: iconst_1
66: dconst_0
67: dastore
68: invokevirtual #19
71: astore_3
72: aload_2
73: invokevirtual #20
76: pop
77: ldc2_w        #40
80: aload_3
81: invokevirtual #23
84: iconst_0
85: daload
86: ldc2_w        #42
89: invokestatic  #26
92: aload_2
93: invokevirtual #20
96: pop
97: ldc2_w        #44
100: aload_3
101: invokevirtual #23
104: iconst_1
105: daload
106: ldc2_w        #29
109: invokestatic  #26
112: aload_2
113: invokevirtual #20
116: pop
117: ldc2_w        #46
120: aload_3
121: invokevirtual #33
124: checkcast     #34
127: invokevirtual #35
130: ldc2_w        #48
133: invokestatic  #26
136: aload_1
137: invokevirtual #38
140: bipush        120
142: if_icmple     149
145: iconst_1
146: goto          150
149: iconst_0
150: invokestatic  #39
153: aload_1
154: invokevirtual #38
157: sipush        150
160: if_icmpge     167
163: iconst_1
164: goto          168
167: iconst_0
168: invokestatic  #39
171: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.class
Class name: SimplexOptimizerMultiDirectionalTest
Method name: testMaximize1
Start line: 59
End line: 71
Method source code: 
    public void testMaximize1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        optimizer.setSimplex(new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(200, fourExtrema, GoalType.MAXIMIZE, new double[] { -3.0, 0.0 });
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7);
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7);
        Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);
        Assert.assertTrue(optimizer.getEvaluations() > 120);
        Assert.assertTrue(optimizer.getEvaluations() < 150);
    }
Method byte code: 
0: new           #3
3: dup
4: ldc2_w        #4
7: ldc2_w        #6
10: invokespecial #8
13: astore_1
14: aload_1
15: new           #9
18: dup
19: iconst_2
20: newarray       double
22: dup
23: iconst_0
24: ldc2_w        #10
27: dastore
28: dup
29: iconst_1
30: ldc2_w        #10
33: dastore
34: invokespecial #12
37: invokevirtual #13
40: new           #14
43: dup
44: aconst_null
45: invokespecial #15
48: astore_2
49: aload_1
50: sipush        200
53: aload_2
54: getstatic     #50
57: iconst_2
58: newarray       double
60: dup
61: iconst_0
62: ldc2_w        #17
65: dastore
66: dup
67: iconst_1
68: dconst_0
69: dastore
70: invokevirtual #19
73: astore_3
74: aload_2
75: invokevirtual #20
78: pop
79: ldc2_w        #21
82: aload_3
83: invokevirtual #23
86: iconst_0
87: daload
88: ldc2_w        #51
91: invokestatic  #26
94: aload_2
95: invokevirtual #20
98: pop
99: ldc2_w        #44
102: aload_3
103: invokevirtual #23
106: iconst_1
107: daload
108: ldc2_w        #53
111: invokestatic  #26
114: aload_2
115: invokevirtual #20
118: pop
119: ldc2_w        #55
122: aload_3
123: invokevirtual #33
126: checkcast     #34
129: invokevirtual #35
132: ldc2_w        #57
135: invokestatic  #26
138: aload_1
139: invokevirtual #38
142: bipush        120
144: if_icmple     151
147: iconst_1
148: goto          152
151: iconst_0
152: invokestatic  #39
155: aload_1
156: invokevirtual #38
159: sipush        150
162: if_icmpge     169
165: iconst_1
166: goto          170
169: iconst_0
170: invokestatic  #39
173: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.class
Class name: SimplexOptimizerMultiDirectionalTest
Method name: testMaximize2
Start line: 74
End line: 86
Method source code: 
    public void testMaximize2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));
        optimizer.setSimplex(new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(200, fourExtrema, GoalType.MAXIMIZE, new double[] { 1, 0 });
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);
        Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12);
        Assert.assertTrue(optimizer.getEvaluations() > 180);
        Assert.assertTrue(optimizer.getEvaluations() < 220);
    }
Method byte code: 
0: new           #3
3: dup
4: new           #59
7: dup
8: ldc2_w        #60
11: ldc2_w        #6
14: invokespecial #62
17: invokespecial #63
20: astore_1
21: aload_1
22: new           #9
25: dup
26: iconst_2
27: newarray       double
29: dup
30: iconst_0
31: ldc2_w        #10
34: dastore
35: dup
36: iconst_1
37: ldc2_w        #10
40: dastore
41: invokespecial #12
44: invokevirtual #13
47: new           #14
50: dup
51: aconst_null
52: invokespecial #15
55: astore_2
56: aload_1
57: sipush        200
60: aload_2
61: getstatic     #50
64: iconst_2
65: newarray       double
67: dup
68: iconst_0
69: dconst_1
70: dastore
71: dup
72: iconst_1
73: dconst_0
74: dastore
75: invokevirtual #19
78: astore_3
79: aload_2
80: invokevirtual #20
83: pop
84: ldc2_w        #40
87: aload_3
88: invokevirtual #23
91: iconst_0
92: daload
93: ldc2_w        #42
96: invokestatic  #26
99: aload_2
100: invokevirtual #20
103: pop
104: ldc2_w        #27
107: aload_3
108: invokevirtual #23
111: iconst_1
112: daload
113: ldc2_w        #29
116: invokestatic  #26
119: aload_2
120: invokevirtual #20
123: pop
124: ldc2_w        #64
127: aload_3
128: invokevirtual #33
131: checkcast     #34
134: invokevirtual #35
137: ldc2_w        #48
140: invokestatic  #26
143: aload_1
144: invokevirtual #38
147: sipush        180
150: if_icmple     157
153: iconst_1
154: goto          158
157: iconst_0
158: invokestatic  #39
161: aload_1
162: invokevirtual #38
165: sipush        220
168: if_icmpge     175
171: iconst_1
172: goto          176
175: iconst_0
176: invokestatic  #39
179: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.class
Class name: SimplexOptimizerMultiDirectionalTest
Method name: testRosenbrock
Start line: 89
End line: 112
Method source code: 
    public void testRosenbrock() {
        MultivariateFunction rosenbrock =
            new MultivariateFunction() {
                public double value(double[] x) {
                    ++count;
                    double a = x[1] - x[0] * x[0];
                    double b = 1.0 - x[0];
                    return 100 * a * a + b * b;
                }
            };

        count = 0;
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);
        optimizer.setSimplex(new MultiDirectionalSimplex(new double[][] {
                    { -1.2,  1.0 }, { 0.9, 1.2 } , {  3.5, -2.3 }
                }));
        PointValuePair optimum =
            optimizer.optimize(100, rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1 });

        Assert.assertEquals(count, optimizer.getEvaluations());
        Assert.assertTrue(optimizer.getEvaluations() > 50);
        Assert.assertTrue(optimizer.getEvaluations() < 100);
        Assert.assertTrue(optimum.getValue() > 1e-2);
    }
Method byte code: 
0: new           #66
3: dup
4: aload_0
5: invokespecial #67
8: astore_1
9: aload_0
10: iconst_0
11: putfield      #1
14: new           #3
17: dup
18: ldc2_w        #68
21: ldc2_w        #70
24: invokespecial #8
27: astore_2
28: aload_2
29: new           #9
32: dup
33: iconst_3
34: anewarray     #72
37: dup
38: iconst_0
39: iconst_2
40: newarray       double
42: dup
43: iconst_0
44: ldc2_w        #73
47: dastore
48: dup
49: iconst_1
50: dconst_1
51: dastore
52: aastore
53: dup
54: iconst_1
55: iconst_2
56: newarray       double
58: dup
59: iconst_0
60: ldc2_w        #75
63: dastore
64: dup
65: iconst_1
66: ldc2_w        #77
69: dastore
70: aastore
71: dup
72: iconst_2
73: iconst_2
74: newarray       double
76: dup
77: iconst_0
78: ldc2_w        #79
81: dastore
82: dup
83: iconst_1
84: ldc2_w        #81
87: dastore
88: aastore
89: invokespecial #83
92: invokevirtual #13
95: aload_2
96: bipush        100
98: aload_1
99: getstatic     #16
102: iconst_2
103: newarray       double
105: dup
106: iconst_0
107: ldc2_w        #73
110: dastore
111: dup
112: iconst_1
113: dconst_1
114: dastore
115: invokevirtual #19
118: astore_3
119: aload_0
120: getfield      #1
123: i2l
124: aload_2
125: invokevirtual #38
128: i2l
129: invokestatic  #84
132: aload_2
133: invokevirtual #38
136: bipush        50
138: if_icmple     145
141: iconst_1
142: goto          146
145: iconst_0
146: invokestatic  #39
149: aload_2
150: invokevirtual #38
153: bipush        100
155: if_icmpge     162
158: iconst_1
159: goto          163
162: iconst_0
163: invokestatic  #39
166: aload_3
167: invokevirtual #33
170: checkcast     #34
173: invokevirtual #35
176: ldc2_w        #85
179: dcmpl
180: ifle          187
183: iconst_1
184: goto          188
187: iconst_0
188: invokestatic  #39
191: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.class
Class name: SimplexOptimizerMultiDirectionalTest
Method name: testPowell
Start line: 115
End line: 137
Method source code: 
    public void testPowell() {
        MultivariateFunction powell =
            new MultivariateFunction() {
                public double value(double[] x) {
                    ++count;
                    double a = x[0] + 10 * x[1];
                    double b = x[2] - x[3];
                    double c = x[1] - 2 * x[2];
                    double d = x[0] - x[3];
                    return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;
                }
            };

        count = 0;
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);
        optimizer.setSimplex(new MultiDirectionalSimplex(4));
        PointValuePair optimum =
            optimizer.optimize(1000, powell, GoalType.MINIMIZE, new double[] { 3, -1, 0, 1 });
        Assert.assertEquals(count, optimizer.getEvaluations());
        Assert.assertTrue(optimizer.getEvaluations() > 800);
        Assert.assertTrue(optimizer.getEvaluations() < 900);
        Assert.assertTrue(optimum.getValue() > 1e-2);
    }
Method byte code: 
0: new           #87
3: dup
4: aload_0
5: invokespecial #88
8: astore_1
9: aload_0
10: iconst_0
11: putfield      #1
14: new           #3
17: dup
18: ldc2_w        #68
21: ldc2_w        #70
24: invokespecial #8
27: astore_2
28: aload_2
29: new           #9
32: dup
33: iconst_4
34: invokespecial #89
37: invokevirtual #13
40: aload_2
41: sipush        1000
44: aload_1
45: getstatic     #16
48: iconst_4
49: newarray       double
51: dup
52: iconst_0
53: ldc2_w        #90
56: dastore
57: dup
58: iconst_1
59: ldc2_w        #68
62: dastore
63: dup
64: iconst_2
65: dconst_0
66: dastore
67: dup
68: iconst_3
69: dconst_1
70: dastore
71: invokevirtual #19
74: astore_3
75: aload_0
76: getfield      #1
79: i2l
80: aload_2
81: invokevirtual #38
84: i2l
85: invokestatic  #84
88: aload_2
89: invokevirtual #38
92: sipush        800
95: if_icmple     102
98: iconst_1
99: goto          103
102: iconst_0
103: invokestatic  #39
106: aload_2
107: invokevirtual #38
110: sipush        900
113: if_icmpge     120
116: iconst_1
117: goto          121
120: iconst_0
121: invokestatic  #39
124: aload_3
125: invokevirtual #33
128: checkcast     #34
131: invokevirtual #35
134: ldc2_w        #85
137: dcmpl
138: ifle          145
141: iconst_1
142: goto          146
145: iconst_0
146: invokestatic  #39
149: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerMultiDirectionalTest.class
Class name: SimplexOptimizerMultiDirectionalTest
Method name: testMath283
Start line: 140
End line: 157
Method source code: 
    public void testMath283() {
        // fails because MultiDirectional.iterateSimplex is looping forever
        // the while(true) should be replaced with a convergence check
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-14, 1e-14);
        optimizer.setSimplex(new MultiDirectionalSimplex(2));
        final Gaussian2D function = new Gaussian2D(0, 0, 1);
        PointValuePair estimate = optimizer.optimize(1000, function,
                                                         GoalType.MAXIMIZE, function.getMaximumPosition());
        final double EPSILON = 1e-5;
        final double expectedMaximum = function.getMaximum();
        final double actualMaximum = estimate.getValue();
        Assert.assertEquals(expectedMaximum, actualMaximum, EPSILON);

        final double[] expectedPosition = function.getMaximumPosition();
        final double[] actualPosition = estimate.getPoint();
        Assert.assertEquals(expectedPosition[0], actualPosition[0], EPSILON );
        Assert.assertEquals(expectedPosition[1], actualPosition[1], EPSILON );
    }
Method byte code: 
0: new           #3
3: dup
4: ldc2_w        #92
7: ldc2_w        #92
10: invokespecial #8
13: astore_1
14: aload_1
15: new           #9
18: dup
19: iconst_2
20: invokespecial #89
23: invokevirtual #13
26: new           #94
29: dup
30: dconst_0
31: dconst_0
32: dconst_1
33: invokespecial #95
36: astore_2
37: aload_1
38: sipush        1000
41: aload_2
42: getstatic     #50
45: aload_2
46: invokevirtual #96
49: invokevirtual #19
52: astore_3
53: ldc2_w        #97
56: dstore        4
58: aload_2
59: invokevirtual #99
62: dstore        6
64: aload_3
65: invokevirtual #33
68: checkcast     #34
71: invokevirtual #35
74: dstore        8
76: dload         6
78: dload         8
80: ldc2_w        #97
83: invokestatic  #26
86: aload_2
87: invokevirtual #96
90: astore        10
92: aload_3
93: invokevirtual #23
96: astore        11
98: aload         10
100: iconst_0
101: daload
102: aload         11
104: iconst_0
105: daload
106: ldc2_w        #97
109: invokestatic  #26
112: aload         10
114: iconst_1
115: daload
116: aload         11
118: iconst_1
119: daload
120: ldc2_w        #97
123: invokestatic  #26
126: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.class
Class name: PowellOptimizerTest
Method name: testSumSinc
Start line: 33
End line: 58
Method source code: 
    public void testSumSinc() {
        final MultivariateFunction func = new SumSincFunction(-1);

        int dim = 2;
        final double[] minPoint = new double[dim];
        for (int i = 0; i < dim; i++) {
            minPoint[i] = 0;
        }

        double[] init = new double[dim];

        // Initial is minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i];
        }
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);

        // Initial is far from minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i] + 3;
        }
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);
        // More stringent line search tolerance enhances the precision
        // of the result.
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);
    }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #3
7: invokespecial #5
10: astore_1
11: iconst_2
12: istore_2
13: iload_2
14: newarray       double
16: astore_3
17: iconst_0
18: istore        4
20: iload         4
22: iload_2
23: if_icmpge     37
26: aload_3
27: iload         4
29: dconst_0
30: dastore
31: iinc          4, 1
34: goto          20
37: iload_2
38: newarray       double
40: astore        4
42: iconst_0
43: istore        5
45: iload         5
47: iload_2
48: if_icmpge     66
51: aload         4
53: iload         5
55: aload_3
56: iload         5
58: daload
59: dastore
60: iinc          5, 1
63: goto          45
66: aload_0
67: aload_1
68: aload_3
69: aload         4
71: getstatic     #6
74: ldc2_w        #7
77: ldc2_w        #7
80: invokespecial #9
83: iconst_0
84: istore        5
86: iload         5
88: iload_2
89: if_icmpge     111
92: aload         4
94: iload         5
96: aload_3
97: iload         5
99: daload
100: ldc2_w        #10
103: dadd
104: dastore
105: iinc          5, 1
108: goto          86
111: aload_0
112: aload_1
113: aload_3
114: aload         4
116: getstatic     #6
119: ldc2_w        #7
122: ldc2_w        #12
125: invokespecial #9
128: aload_0
129: aload_1
130: aload_3
131: aload         4
133: getstatic     #6
136: ldc2_w        #7
139: ldc2_w        #7
142: ldc2_w        #14
145: invokespecial #16
148: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.class
Class name: PowellOptimizerTest
Method name: testQuadratic
Start line: 61
End line: 89
Method source code: 
    public void testQuadratic() {
        final MultivariateFunction func = new MultivariateFunction() {
                public double value(double[] x) {
                    final double a = x[0] - 1;
                    final double b = x[1] - 1;
                    return a * a + b * b + 1;
                }
            };

        int dim = 2;
        final double[] minPoint = new double[dim];
        for (int i = 0; i < dim; i++) {
            minPoint[i] = 1;
        }

        double[] init = new double[dim];

        // Initial is minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i];
        }
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-8);

        // Initial is far from minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i] - 20;
        }
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-8);
    }
Method byte code: 
0: new           #17
3: dup
4: aload_0
5: invokespecial #18
8: astore_1
9: iconst_2
10: istore_2
11: iload_2
12: newarray       double
14: astore_3
15: iconst_0
16: istore        4
18: iload         4
20: iload_2
21: if_icmpge     35
24: aload_3
25: iload         4
27: dconst_1
28: dastore
29: iinc          4, 1
32: goto          18
35: iload_2
36: newarray       double
38: astore        4
40: iconst_0
41: istore        5
43: iload         5
45: iload_2
46: if_icmpge     64
49: aload         4
51: iload         5
53: aload_3
54: iload         5
56: daload
57: dastore
58: iinc          5, 1
61: goto          43
64: aload_0
65: aload_1
66: aload_3
67: aload         4
69: getstatic     #6
72: ldc2_w        #7
75: ldc2_w        #19
78: invokespecial #9
81: iconst_0
82: istore        5
84: iload         5
86: iload_2
87: if_icmpge     109
90: aload         4
92: iload         5
94: aload_3
95: iload         5
97: daload
98: ldc2_w        #21
101: dsub
102: dastore
103: iinc          5, 1
106: goto          84
109: aload_0
110: aload_1
111: aload_3
112: aload         4
114: getstatic     #6
117: ldc2_w        #7
120: ldc2_w        #19
123: invokespecial #9
126: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.class
Class name: PowellOptimizerTest
Method name: testMaximizeQuadratic
Start line: 92
End line: 120
Method source code: 
    public void testMaximizeQuadratic() {
        final MultivariateFunction func = new MultivariateFunction() {
                public double value(double[] x) {
                    final double a = x[0] - 1;
                    final double b = x[1] - 1;
                    return -a * a - b * b + 1;
                }
            };

        int dim = 2;
        final double[] maxPoint = new double[dim];
        for (int i = 0; i < dim; i++) {
            maxPoint[i] = 1;
        }

        double[] init = new double[dim];

        // Initial is minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = maxPoint[i];
        }
        doTest(func, maxPoint, init,  GoalType.MAXIMIZE, 1e-9, 1e-8);

        // Initial is far from minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = maxPoint[i] - 20;
        }
        doTest(func, maxPoint, init, GoalType.MAXIMIZE, 1e-9, 1e-8);
    }
Method byte code: 
0: new           #23
3: dup
4: aload_0
5: invokespecial #24
8: astore_1
9: iconst_2
10: istore_2
11: iload_2
12: newarray       double
14: astore_3
15: iconst_0
16: istore        4
18: iload         4
20: iload_2
21: if_icmpge     35
24: aload_3
25: iload         4
27: dconst_1
28: dastore
29: iinc          4, 1
32: goto          18
35: iload_2
36: newarray       double
38: astore        4
40: iconst_0
41: istore        5
43: iload         5
45: iload_2
46: if_icmpge     64
49: aload         4
51: iload         5
53: aload_3
54: iload         5
56: daload
57: dastore
58: iinc          5, 1
61: goto          43
64: aload_0
65: aload_1
66: aload_3
67: aload         4
69: getstatic     #25
72: ldc2_w        #7
75: ldc2_w        #19
78: invokespecial #9
81: iconst_0
82: istore        5
84: iload         5
86: iload_2
87: if_icmpge     109
90: aload         4
92: iload         5
94: aload_3
95: iload         5
97: daload
98: ldc2_w        #21
101: dsub
102: dastore
103: iinc          5, 1
106: goto          84
109: aload_0
110: aload_1
111: aload_3
112: aload         4
114: getstatic     #25
117: ldc2_w        #7
120: ldc2_w        #19
123: invokespecial #9
126: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/PowellOptimizerTest.class
Class name: PowellOptimizerTest
Method name: testRelativeToleranceOnScaledValues
Start line: 130
End line: 179
Method source code: 
    public void testRelativeToleranceOnScaledValues() {
        final MultivariateFunction func = new MultivariateFunction() {
                public double value(double[] x) {
                    final double a = x[0] - 1;
                    final double b = x[1] - 1;
                    return a * a * FastMath.sqrt(FastMath.abs(a)) + b * b + 1;
                }
            };

        int dim = 2;
        final double[] minPoint = new double[dim];
        for (int i = 0; i < dim; i++) {
            minPoint[i] = 1;
        }

        double[] init = new double[dim];
        // Initial is far from minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i] - 20;
        }

        final double relTol = 1e-10;

        final int maxEval = 1000;
        // Very small absolute tolerance to rely solely on the relative
        // tolerance as a stopping criterion
        final MultivariateOptimizer optim = new PowellOptimizer(relTol, 1e-100);

        final PointValuePair funcResult = optim.optimize(maxEval, func, GoalType.MINIMIZE, init);
        final double funcValue = func.value(funcResult.getPoint());
        final int funcEvaluations = optim.getEvaluations();

        final double scale = 1e10;
        final MultivariateFunction funcScaled = new MultivariateFunction() {
                public double value(double[] x) {
                    return scale * func.value(x);
                }
            };

        final PointValuePair funcScaledResult = optim.optimize(maxEval, funcScaled, GoalType.MINIMIZE, init);
        final double funcScaledValue = funcScaled.value(funcScaledResult.getPoint());
        final int funcScaledEvaluations = optim.getEvaluations();

        // Check that both minima provide the same objective funciton values,
        // within the relative function tolerance.
        Assert.assertEquals(1, funcScaledValue / (scale * funcValue), relTol);

        // Check that the numbers of evaluations are the same.
        Assert.assertEquals(funcEvaluations, funcScaledEvaluations);
    }
Method byte code: 
0: new           #26
3: dup
4: aload_0
5: invokespecial #27
8: astore_1
9: iconst_2
10: istore_2
11: iload_2
12: newarray       double
14: astore_3
15: iconst_0
16: istore        4
18: iload         4
20: iload_2
21: if_icmpge     35
24: aload_3
25: iload         4
27: dconst_1
28: dastore
29: iinc          4, 1
32: goto          18
35: iload_2
36: newarray       double
38: astore        4
40: iconst_0
41: istore        5
43: iload         5
45: iload_2
46: if_icmpge     68
49: aload         4
51: iload         5
53: aload_3
54: iload         5
56: daload
57: ldc2_w        #21
60: dsub
61: dastore
62: iinc          5, 1
65: goto          43
68: ldc2_w        #28
71: dstore        5
73: sipush        1000
76: istore        7
78: new           #30
81: dup
82: ldc2_w        #28
85: ldc2_w        #31
88: invokespecial #33
91: astore        8
93: aload         8
95: sipush        1000
98: aload_1
99: getstatic     #6
102: aload         4
104: invokeinterface #34,  5
109: astore        9
111: aload_1
112: aload         9
114: invokevirtual #35
117: invokeinterface #36,  2
122: dstore        10
124: aload         8
126: invokeinterface #37,  1
131: istore        12
133: ldc2_w        #38
136: dstore        13
138: new           #40
141: dup
142: aload_0
143: aload_1
144: invokespecial #41
147: astore        15
149: aload         8
151: sipush        1000
154: aload         15
156: getstatic     #6
159: aload         4
161: invokeinterface #34,  5
166: astore        16
168: aload         15
170: aload         16
172: invokevirtual #35
175: invokeinterface #36,  2
180: dstore        17
182: aload         8
184: invokeinterface #37,  1
189: istore        19
191: dconst_1
192: dload         17
194: ldc2_w        #38
197: dload         10
199: dmul
200: ddiv
201: ldc2_w        #28
204: invokestatic  #42
207: iload         12
209: i2l
210: iload         19
212: i2l
213: invokestatic  #43
216: return
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testMinimize1
Start line: 34
End line: 46
Method source code: 
    public void testMinimize1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        optimizer.setSimplex(new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(100, fourExtrema, GoalType.MINIMIZE, new double[] { -3, 0 });
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);
        Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 90);
    }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #3
7: ldc2_w        #5
10: invokespecial #7
13: astore_1
14: aload_1
15: new           #8
18: dup
19: iconst_2
20: newarray       double
22: dup
23: iconst_0
24: ldc2_w        #9
27: dastore
28: dup
29: iconst_1
30: ldc2_w        #9
33: dastore
34: invokespecial #11
37: invokevirtual #12
40: new           #13
43: dup
44: aconst_null
45: invokespecial #14
48: astore_2
49: aload_1
50: bipush        100
52: aload_2
53: getstatic     #15
56: iconst_2
57: newarray       double
59: dup
60: iconst_0
61: ldc2_w        #16
64: dastore
65: dup
66: iconst_1
67: dconst_0
68: dastore
69: invokevirtual #18
72: astore_3
73: aload_2
74: invokevirtual #19
77: pop
78: ldc2_w        #20
81: aload_3
82: invokevirtual #22
85: iconst_0
86: daload
87: ldc2_w        #23
90: invokestatic  #25
93: aload_2
94: invokevirtual #19
97: pop
98: ldc2_w        #26
101: aload_3
102: invokevirtual #22
105: iconst_1
106: daload
107: ldc2_w        #28
110: invokestatic  #25
113: aload_2
114: invokevirtual #19
117: pop
118: ldc2_w        #30
121: aload_3
122: invokevirtual #32
125: checkcast     #33
128: invokevirtual #34
131: ldc2_w        #35
134: invokestatic  #25
137: aload_1
138: invokevirtual #37
141: bipush        60
143: if_icmple     150
146: iconst_1
147: goto          151
150: iconst_0
151: invokestatic  #38
154: aload_1
155: invokevirtual #37
158: bipush        90
160: if_icmpge     167
163: iconst_1
164: goto          168
167: iconst_0
168: invokestatic  #38
171: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testMinimize2
Start line: 49
End line: 61
Method source code: 
    public void testMinimize2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        optimizer.setSimplex(new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(100, fourExtrema, GoalType.MINIMIZE, new double[] { 1, 0 });
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);
        Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 90);
    }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #3
7: ldc2_w        #5
10: invokespecial #7
13: astore_1
14: aload_1
15: new           #8
18: dup
19: iconst_2
20: newarray       double
22: dup
23: iconst_0
24: ldc2_w        #9
27: dastore
28: dup
29: iconst_1
30: ldc2_w        #9
33: dastore
34: invokespecial #11
37: invokevirtual #12
40: new           #13
43: dup
44: aconst_null
45: invokespecial #14
48: astore_2
49: aload_1
50: bipush        100
52: aload_2
53: getstatic     #15
56: iconst_2
57: newarray       double
59: dup
60: iconst_0
61: dconst_1
62: dastore
63: dup
64: iconst_1
65: dconst_0
66: dastore
67: invokevirtual #18
70: astore_3
71: aload_2
72: invokevirtual #19
75: pop
76: ldc2_w        #39
79: aload_3
80: invokevirtual #22
83: iconst_0
84: daload
85: ldc2_w        #41
88: invokestatic  #25
91: aload_2
92: invokevirtual #19
95: pop
96: ldc2_w        #43
99: aload_3
100: invokevirtual #22
103: iconst_1
104: daload
105: ldc2_w        #45
108: invokestatic  #25
111: aload_2
112: invokevirtual #19
115: pop
116: ldc2_w        #47
119: aload_3
120: invokevirtual #32
123: checkcast     #33
126: invokevirtual #34
129: ldc2_w        #49
132: invokestatic  #25
135: aload_1
136: invokevirtual #37
139: bipush        60
141: if_icmple     148
144: iconst_1
145: goto          149
148: iconst_0
149: invokestatic  #38
152: aload_1
153: invokevirtual #37
156: bipush        90
158: if_icmpge     165
161: iconst_1
162: goto          166
165: iconst_0
166: invokestatic  #38
169: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testMaximize1
Start line: 64
End line: 76
Method source code: 
    public void testMaximize1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        optimizer.setSimplex(new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(100, fourExtrema, GoalType.MAXIMIZE, new double[] { -3, 0 });
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);
        Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 90);
    }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #3
7: ldc2_w        #5
10: invokespecial #7
13: astore_1
14: aload_1
15: new           #8
18: dup
19: iconst_2
20: newarray       double
22: dup
23: iconst_0
24: ldc2_w        #9
27: dastore
28: dup
29: iconst_1
30: ldc2_w        #9
33: dastore
34: invokespecial #11
37: invokevirtual #12
40: new           #13
43: dup
44: aconst_null
45: invokespecial #14
48: astore_2
49: aload_1
50: bipush        100
52: aload_2
53: getstatic     #51
56: iconst_2
57: newarray       double
59: dup
60: iconst_0
61: ldc2_w        #16
64: dastore
65: dup
66: iconst_1
67: dconst_0
68: dastore
69: invokevirtual #18
72: astore_3
73: aload_2
74: invokevirtual #19
77: pop
78: ldc2_w        #20
81: aload_3
82: invokevirtual #22
85: iconst_0
86: daload
87: ldc2_w        #52
90: invokestatic  #25
93: aload_2
94: invokevirtual #19
97: pop
98: ldc2_w        #43
101: aload_3
102: invokevirtual #22
105: iconst_1
106: daload
107: ldc2_w        #54
110: invokestatic  #25
113: aload_2
114: invokevirtual #19
117: pop
118: ldc2_w        #56
121: aload_3
122: invokevirtual #32
125: checkcast     #33
128: invokevirtual #34
131: ldc2_w        #58
134: invokestatic  #25
137: aload_1
138: invokevirtual #37
141: bipush        60
143: if_icmple     150
146: iconst_1
147: goto          151
150: iconst_0
151: invokestatic  #38
154: aload_1
155: invokevirtual #37
158: bipush        90
160: if_icmpge     167
163: iconst_1
164: goto          168
167: iconst_0
168: invokestatic  #38
171: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testMaximize2
Start line: 79
End line: 91
Method source code: 
    public void testMaximize2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        optimizer.setSimplex(new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(100, fourExtrema, GoalType.MAXIMIZE, new double[] { 1, 0 });
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);
        Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 90);
    }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #3
7: ldc2_w        #5
10: invokespecial #7
13: astore_1
14: aload_1
15: new           #8
18: dup
19: iconst_2
20: newarray       double
22: dup
23: iconst_0
24: ldc2_w        #9
27: dastore
28: dup
29: iconst_1
30: ldc2_w        #9
33: dastore
34: invokespecial #11
37: invokevirtual #12
40: new           #13
43: dup
44: aconst_null
45: invokespecial #14
48: astore_2
49: aload_1
50: bipush        100
52: aload_2
53: getstatic     #51
56: iconst_2
57: newarray       double
59: dup
60: iconst_0
61: dconst_1
62: dastore
63: dup
64: iconst_1
65: dconst_0
66: dastore
67: invokevirtual #18
70: astore_3
71: aload_2
72: invokevirtual #19
75: pop
76: ldc2_w        #39
79: aload_3
80: invokevirtual #22
83: iconst_0
84: daload
85: ldc2_w        #60
88: invokestatic  #25
91: aload_2
92: invokevirtual #19
95: pop
96: ldc2_w        #26
99: aload_3
100: invokevirtual #22
103: iconst_1
104: daload
105: ldc2_w        #41
108: invokestatic  #25
111: aload_2
112: invokevirtual #19
115: pop
116: ldc2_w        #62
119: aload_3
120: invokevirtual #32
123: checkcast     #33
126: invokevirtual #34
129: ldc2_w        #64
132: invokestatic  #25
135: aload_1
136: invokevirtual #37
139: bipush        60
141: if_icmple     148
144: iconst_1
145: goto          149
148: iconst_0
149: invokestatic  #38
152: aload_1
153: invokevirtual #37
156: bipush        90
158: if_icmpge     165
161: iconst_1
162: goto          166
165: iconst_0
166: invokestatic  #38
169: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testRosenbrock
Start line: 94
End line: 108
Method source code: 
    public void testRosenbrock() {

        Rosenbrock rosenbrock = new Rosenbrock();
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);
        optimizer.setSimplex(new NelderMeadSimplex(new double[][] {
                    { -1.2,  1 }, { 0.9, 1.2 } , {  3.5, -2.3 }
                }));
        PointValuePair optimum =
            optimizer.optimize(100, rosenbrock, GoalType.MINIMIZE, new double[] { -1.2, 1 });

        Assert.assertEquals(rosenbrock.getCount(), optimizer.getEvaluations());
        Assert.assertTrue(optimizer.getEvaluations() > 40);
        Assert.assertTrue(optimizer.getEvaluations() < 50);
        Assert.assertTrue(optimum.getValue() < 8e-4);
    }
Method byte code: 
0: new           #66
3: dup
4: invokespecial #67
7: astore_1
8: new           #2
11: dup
12: ldc2_w        #68
15: ldc2_w        #70
18: invokespecial #7
21: astore_2
22: aload_2
23: new           #8
26: dup
27: iconst_3
28: anewarray     #72
31: dup
32: iconst_0
33: iconst_2
34: newarray       double
36: dup
37: iconst_0
38: ldc2_w        #73
41: dastore
42: dup
43: iconst_1
44: dconst_1
45: dastore
46: aastore
47: dup
48: iconst_1
49: iconst_2
50: newarray       double
52: dup
53: iconst_0
54: ldc2_w        #75
57: dastore
58: dup
59: iconst_1
60: ldc2_w        #77
63: dastore
64: aastore
65: dup
66: iconst_2
67: iconst_2
68: newarray       double
70: dup
71: iconst_0
72: ldc2_w        #79
75: dastore
76: dup
77: iconst_1
78: ldc2_w        #81
81: dastore
82: aastore
83: invokespecial #83
86: invokevirtual #12
89: aload_2
90: bipush        100
92: aload_1
93: getstatic     #15
96: iconst_2
97: newarray       double
99: dup
100: iconst_0
101: ldc2_w        #73
104: dastore
105: dup
106: iconst_1
107: dconst_1
108: dastore
109: invokevirtual #18
112: astore_3
113: aload_1
114: invokevirtual #84
117: i2l
118: aload_2
119: invokevirtual #37
122: i2l
123: invokestatic  #85
126: aload_2
127: invokevirtual #37
130: bipush        40
132: if_icmple     139
135: iconst_1
136: goto          140
139: iconst_0
140: invokestatic  #38
143: aload_2
144: invokevirtual #37
147: bipush        50
149: if_icmpge     156
152: iconst_1
153: goto          157
156: iconst_0
157: invokestatic  #38
160: aload_3
161: invokevirtual #32
164: checkcast     #33
167: invokevirtual #34
170: ldc2_w        #86
173: dcmpg
174: ifge          181
177: iconst_1
178: goto          182
181: iconst_0
182: invokestatic  #38
185: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testPowell
Start line: 111
End line: 122
Method source code: 
    public void testPowell() {

        Powell powell = new Powell();
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);
        optimizer.setSimplex(new NelderMeadSimplex(4));
        PointValuePair optimum =
            optimizer.optimize(200, powell, GoalType.MINIMIZE, new double[] { 3, -1, 0, 1 });
        Assert.assertEquals(powell.getCount(), optimizer.getEvaluations());
        Assert.assertTrue(optimizer.getEvaluations() > 110);
        Assert.assertTrue(optimizer.getEvaluations() < 130);
        Assert.assertTrue(optimum.getValue() < 2e-3);
    }
Method byte code: 
0: new           #88
3: dup
4: invokespecial #89
7: astore_1
8: new           #2
11: dup
12: ldc2_w        #68
15: ldc2_w        #70
18: invokespecial #7
21: astore_2
22: aload_2
23: new           #8
26: dup
27: iconst_4
28: invokespecial #90
31: invokevirtual #12
34: aload_2
35: sipush        200
38: aload_1
39: getstatic     #15
42: iconst_4
43: newarray       double
45: dup
46: iconst_0
47: ldc2_w        #91
50: dastore
51: dup
52: iconst_1
53: ldc2_w        #68
56: dastore
57: dup
58: iconst_2
59: dconst_0
60: dastore
61: dup
62: iconst_3
63: dconst_1
64: dastore
65: invokevirtual #18
68: astore_3
69: aload_1
70: invokevirtual #93
73: i2l
74: aload_2
75: invokevirtual #37
78: i2l
79: invokestatic  #85
82: aload_2
83: invokevirtual #37
86: bipush        110
88: if_icmple     95
91: iconst_1
92: goto          96
95: iconst_0
96: invokestatic  #38
99: aload_2
100: invokevirtual #37
103: sipush        130
106: if_icmpge     113
109: iconst_1
110: goto          114
113: iconst_0
114: invokestatic  #38
117: aload_3
118: invokevirtual #32
121: checkcast     #33
124: invokevirtual #34
127: ldc2_w        #94
130: dcmpg
131: ifge          138
134: iconst_1
135: goto          139
138: iconst_0
139: invokestatic  #38
142: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testLeastSquares1
Start line: 125
End line: 146
Method source code: 
    public void testLeastSquares1() {

        final RealMatrix factors =
            new Array2DRowRealMatrix(new double[][] {
                    { 1, 0 },
                    { 0, 1 }
                }, false);
        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() {
                public double[] value(double[] variables) {
                    return factors.operate(variables);
                }
            }, new double[] { 2.0, -3.0 });
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6);
        optimizer.setSimplex(new NelderMeadSimplex(2));
        PointValuePair optimum =
            optimizer.optimize(200, ls, GoalType.MINIMIZE, new double[] { 10, 10 });
        Assert.assertEquals( 2, optimum.getPointRef()[0], 3e-5);
        Assert.assertEquals(-3, optimum.getPointRef()[1], 4e-4);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 80);
        Assert.assertTrue(optimum.getValue() < 1.0e-6);
    }
Method byte code: 
0: new           #96
3: dup
4: iconst_2
5: anewarray     #72
8: dup
9: iconst_0
10: iconst_2
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: dconst_0
20: dastore
21: aastore
22: dup
23: iconst_1
24: iconst_2
25: newarray       double
27: dup
28: iconst_0
29: dconst_0
30: dastore
31: dup
32: iconst_1
33: dconst_1
34: dastore
35: aastore
36: iconst_0
37: invokespecial #97
40: astore_1
41: new           #98
44: dup
45: new           #99
48: dup
49: aload_0
50: aload_1
51: invokespecial #100
54: iconst_2
55: newarray       double
57: dup
58: iconst_0
59: ldc2_w        #101
62: dastore
63: dup
64: iconst_1
65: ldc2_w        #16
68: dastore
69: invokespecial #103
72: astore_2
73: new           #2
76: dup
77: ldc2_w        #68
80: ldc2_w        #104
83: invokespecial #7
86: astore_3
87: aload_3
88: new           #8
91: dup
92: iconst_2
93: invokespecial #90
96: invokevirtual #12
99: aload_3
100: sipush        200
103: aload_2
104: getstatic     #15
107: iconst_2
108: newarray       double
110: dup
111: iconst_0
112: ldc2_w        #106
115: dastore
116: dup
117: iconst_1
118: ldc2_w        #106
121: dastore
122: invokevirtual #18
125: astore        4
127: ldc2_w        #101
130: aload         4
132: invokevirtual #108
135: iconst_0
136: daload
137: ldc2_w        #109
140: invokestatic  #25
143: ldc2_w        #16
146: aload         4
148: invokevirtual #108
151: iconst_1
152: daload
153: ldc2_w        #111
156: invokestatic  #25
159: aload_3
160: invokevirtual #37
163: bipush        60
165: if_icmple     172
168: iconst_1
169: goto          173
172: iconst_0
173: invokestatic  #38
176: aload_3
177: invokevirtual #37
180: bipush        80
182: if_icmpge     189
185: iconst_1
186: goto          190
189: iconst_0
190: invokestatic  #38
193: aload         4
195: invokevirtual #32
198: checkcast     #33
201: invokevirtual #34
204: ldc2_w        #104
207: dcmpg
208: ifge          215
211: iconst_1
212: goto          216
215: iconst_0
216: invokestatic  #38
219: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testLeastSquares2
Start line: 149
End line: 170
Method source code: 
    public void testLeastSquares2() {

        final RealMatrix factors =
            new Array2DRowRealMatrix(new double[][] {
                    { 1, 0 },
                    { 0, 1 }
                }, false);
        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() {
                public double[] value(double[] variables) {
                    return factors.operate(variables);
                }
            }, new double[] { 2, -3 }, new double[] { 10, 0.1 });
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6);
        optimizer.setSimplex(new NelderMeadSimplex(2));
        PointValuePair optimum =
            optimizer.optimize(200, ls, GoalType.MINIMIZE, new double[] { 10, 10 });
        Assert.assertEquals( 2, optimum.getPointRef()[0], 5e-5);
        Assert.assertEquals(-3, optimum.getPointRef()[1], 8e-4);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 80);
        Assert.assertTrue(optimum.getValue() < 1e-6);
    }
Method byte code: 
0: new           #96
3: dup
4: iconst_2
5: anewarray     #72
8: dup
9: iconst_0
10: iconst_2
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: dconst_0
20: dastore
21: aastore
22: dup
23: iconst_1
24: iconst_2
25: newarray       double
27: dup
28: iconst_0
29: dconst_0
30: dastore
31: dup
32: iconst_1
33: dconst_1
34: dastore
35: aastore
36: iconst_0
37: invokespecial #97
40: astore_1
41: new           #98
44: dup
45: new           #113
48: dup
49: aload_0
50: aload_1
51: invokespecial #114
54: iconst_2
55: newarray       double
57: dup
58: iconst_0
59: ldc2_w        #101
62: dastore
63: dup
64: iconst_1
65: ldc2_w        #16
68: dastore
69: iconst_2
70: newarray       double
72: dup
73: iconst_0
74: ldc2_w        #106
77: dastore
78: dup
79: iconst_1
80: ldc2_w        #115
83: dastore
84: invokespecial #117
87: astore_2
88: new           #2
91: dup
92: ldc2_w        #68
95: ldc2_w        #104
98: invokespecial #7
101: astore_3
102: aload_3
103: new           #8
106: dup
107: iconst_2
108: invokespecial #90
111: invokevirtual #12
114: aload_3
115: sipush        200
118: aload_2
119: getstatic     #15
122: iconst_2
123: newarray       double
125: dup
126: iconst_0
127: ldc2_w        #106
130: dastore
131: dup
132: iconst_1
133: ldc2_w        #106
136: dastore
137: invokevirtual #18
140: astore        4
142: ldc2_w        #101
145: aload         4
147: invokevirtual #108
150: iconst_0
151: daload
152: ldc2_w        #118
155: invokestatic  #25
158: ldc2_w        #16
161: aload         4
163: invokevirtual #108
166: iconst_1
167: daload
168: ldc2_w        #86
171: invokestatic  #25
174: aload_3
175: invokevirtual #37
178: bipush        60
180: if_icmple     187
183: iconst_1
184: goto          188
187: iconst_0
188: invokestatic  #38
191: aload_3
192: invokevirtual #37
195: bipush        80
197: if_icmpge     204
200: iconst_1
201: goto          205
204: iconst_0
205: invokestatic  #38
208: aload         4
210: invokevirtual #32
213: checkcast     #33
216: invokevirtual #34
219: ldc2_w        #104
222: dcmpg
223: ifge          230
226: iconst_1
227: goto          231
230: iconst_0
231: invokestatic  #38
234: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testLeastSquares3
Start line: 173
End line: 196
Method source code: 
    public void testLeastSquares3() {

        final RealMatrix factors =
            new Array2DRowRealMatrix(new double[][] {
                    { 1, 0 },
                    { 0, 1 }
                }, false);
        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() {
                public double[] value(double[] variables) {
                    return factors.operate(variables);
                }
            }, new double[] { 2, -3 }, new Array2DRowRealMatrix(new double [][] {
                    { 1, 1.2 }, { 1.2, 2 }
                }));
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6);
        optimizer.setSimplex(new NelderMeadSimplex(2));
        PointValuePair optimum =
            optimizer.optimize(200, ls, GoalType.MINIMIZE, new double[] { 10, 10 });
        Assert.assertEquals( 2, optimum.getPointRef()[0], 2e-3);
        Assert.assertEquals(-3, optimum.getPointRef()[1], 8e-4);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 80);
        Assert.assertTrue(optimum.getValue() < 1e-6);
    }
Method byte code: 
0: new           #96
3: dup
4: iconst_2
5: anewarray     #72
8: dup
9: iconst_0
10: iconst_2
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: dconst_0
20: dastore
21: aastore
22: dup
23: iconst_1
24: iconst_2
25: newarray       double
27: dup
28: iconst_0
29: dconst_0
30: dastore
31: dup
32: iconst_1
33: dconst_1
34: dastore
35: aastore
36: iconst_0
37: invokespecial #97
40: astore_1
41: new           #98
44: dup
45: new           #120
48: dup
49: aload_0
50: aload_1
51: invokespecial #121
54: iconst_2
55: newarray       double
57: dup
58: iconst_0
59: ldc2_w        #101
62: dastore
63: dup
64: iconst_1
65: ldc2_w        #16
68: dastore
69: new           #96
72: dup
73: iconst_2
74: anewarray     #72
77: dup
78: iconst_0
79: iconst_2
80: newarray       double
82: dup
83: iconst_0
84: dconst_1
85: dastore
86: dup
87: iconst_1
88: ldc2_w        #77
91: dastore
92: aastore
93: dup
94: iconst_1
95: iconst_2
96: newarray       double
98: dup
99: iconst_0
100: ldc2_w        #77
103: dastore
104: dup
105: iconst_1
106: ldc2_w        #101
109: dastore
110: aastore
111: invokespecial #122
114: invokespecial #123
117: astore_2
118: new           #2
121: dup
122: ldc2_w        #68
125: ldc2_w        #104
128: invokespecial #7
131: astore_3
132: aload_3
133: new           #8
136: dup
137: iconst_2
138: invokespecial #90
141: invokevirtual #12
144: aload_3
145: sipush        200
148: aload_2
149: getstatic     #15
152: iconst_2
153: newarray       double
155: dup
156: iconst_0
157: ldc2_w        #106
160: dastore
161: dup
162: iconst_1
163: ldc2_w        #106
166: dastore
167: invokevirtual #18
170: astore        4
172: ldc2_w        #101
175: aload         4
177: invokevirtual #108
180: iconst_0
181: daload
182: ldc2_w        #94
185: invokestatic  #25
188: ldc2_w        #16
191: aload         4
193: invokevirtual #108
196: iconst_1
197: daload
198: ldc2_w        #86
201: invokestatic  #25
204: aload_3
205: invokevirtual #37
208: bipush        60
210: if_icmple     217
213: iconst_1
214: goto          218
217: iconst_0
218: invokestatic  #38
221: aload_3
222: invokevirtual #37
225: bipush        80
227: if_icmpge     234
230: iconst_1
231: goto          235
234: iconst_0
235: invokestatic  #38
238: aload         4
240: invokevirtual #32
243: checkcast     #33
246: invokevirtual #34
249: ldc2_w        #104
252: dcmpg
253: ifge          260
256: iconst_1
257: goto          261
260: iconst_0
261: invokestatic  #38
264: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optimization/direct/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testMaxIterations
Start line: 199
End line: 204
Method source code: 
    public void testMaxIterations() {
        Powell powell = new Powell();
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);
        optimizer.setSimplex(new NelderMeadSimplex(4));
        optimizer.optimize(20, powell, GoalType.MINIMIZE, new double[] { 3, -1, 0, 1 });
    }
Method byte code: 
0: new           #88
3: dup
4: invokespecial #89
7: astore_1
8: new           #2
11: dup
12: ldc2_w        #68
15: ldc2_w        #70
18: invokespecial #7
21: astore_2
22: aload_2
23: new           #8
26: dup
27: iconst_4
28: invokespecial #90
31: invokevirtual #12
34: aload_2
35: bipush        20
37: aload_1
38: getstatic     #15
41: iconst_4
42: newarray       double
44: dup
45: iconst_0
46: ldc2_w        #91
49: dastore
50: dup
51: iconst_1
52: ldc2_w        #68
55: dastore
56: dup
57: iconst_2
58: dconst_0
59: dastore
60: dup
61: iconst_3
62: dconst_1
63: dastore
64: invokevirtual #18
67: pop
68: return
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/BaseOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/BaseOptimizer_ESTest.class
Class name: BaseOptimizer_ESTest
Method name: test0
Start line: 23
End line: 27
Method source code: 
  public void test0()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      int int0 = simplexSolver0.getIterations();
      assertEquals(0, int0);
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: astore_1
8: aload_1
9: invokevirtual #4
12: istore_2
13: lconst_0
14: iload_2
15: i2l
16: invokestatic  #5
19: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/BaseOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/BaseOptimizer_ESTest.class
Class name: BaseOptimizer_ESTest
Method name: test1
Start line: 30
End line: 34
Method source code: 
  public void test1()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      int int0 = simplexSolver0.getEvaluations();
      assertEquals(0, int0);
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: astore_1
8: aload_1
9: invokevirtual #6
12: istore_2
13: lconst_0
14: iload_2
15: i2l
16: invokestatic  #5
19: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/BaseOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/BaseOptimizer_ESTest.class
Class name: BaseOptimizer_ESTest
Method name: test2
Start line: 37
End line: 41
Method source code: 
  public void test2()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver((-1.0));
      int int0 = simplexSolver0.getMaxIterations();
      assertEquals(Integer.MAX_VALUE, int0);
  }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #7
7: invokespecial #9
10: astore_1
11: aload_1
12: invokevirtual #10
15: istore_2
16: ldc2_w        #12
19: iload_2
20: i2l
21: invokestatic  #5
24: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/BaseOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/BaseOptimizer_ESTest.class
Class name: BaseOptimizer_ESTest
Method name: test3
Start line: 44
End line: 57
Method source code: 
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2611.339077, 2611.339077);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[0];
      try { 
        brentOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
      }
  }
Method byte code: 
0: new           #14
3: dup
4: ldc2_w        #15
7: ldc2_w        #15
10: invokespecial #17
13: astore_1
14: iconst_0
15: anewarray     #18
18: astore_2
19: aload_1
20: aload_2
21: invokevirtual #19
24: pop
25: ldc           #20
27: invokestatic  #21
30: goto          40
33: astore_3
34: ldc           #23
36: aload_3
37: invokestatic  #24
40: return
Exception table:
from    to  target type
19    30    33   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/BaseOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/BaseOptimizer_ESTest.class
Class name: BaseOptimizer_ESTest
Method name: test4
Start line: 60
End line: 64
Method source code: 
  public void test4()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      int int0 = simplexSolver0.getMaxEvaluations();
      assertEquals(0, int0);
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #3
7: astore_1
8: aload_1
9: invokevirtual #25
12: istore_2
13: lconst_0
14: iload_2
15: i2l
16: invokestatic  #5
19: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/BaseOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/BaseOptimizer_ESTest.class
Class name: BaseOptimizer_ESTest
Method name: test5
Start line: 67
End line: 81
Method source code: 
  public void test5()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver(0.0, Integer.MAX_VALUE, 0.0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[1];
      // Undeclared exception!
      try { 
        simplexSolver0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: dconst_0
5: ldc           #26
7: dconst_0
8: invokespecial #27
11: astore_1
12: iconst_1
13: anewarray     #18
16: astore_2
17: aload_1
18: aload_2
19: invokevirtual #28
22: pop
23: ldc           #29
25: invokestatic  #21
28: goto          38
31: astore_3
32: ldc           #31
34: aload_3
35: invokestatic  #24
38: return
Exception table:
from    to  target type
17    28    31   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/BaseOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/BaseOptimizer_ESTest.class
Class name: BaseOptimizer_ESTest
Method name: test6
Start line: 84
End line: 102
Method source code: 
  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(486.0, 1.6358907222747803);
      MersenneTwister mersenneTwister0 = new MersenneTwister((long) 5);
      MultiStartUnivariateOptimizer multiStartUnivariateOptimizer0 = new MultiStartUnivariateOptimizer(brentOptimizer0, 5, mersenneTwister0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[1];
      MaxEval maxEval0 = MaxEval.unlimited();
      optimizationDataArray0[0] = (OptimizationData) maxEval0;
      // Undeclared exception!
      try { 
        multiStartUnivariateOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state
         //
         verifyException("org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer", e);
      }
  }
Method byte code: 
0: new           #14
3: dup
4: ldc2_w        #32
7: ldc2_w        #34
10: invokespecial #17
13: astore_1
14: new           #36
17: dup
18: ldc2_w        #37
21: invokespecial #39
24: astore_2
25: new           #40
28: dup
29: aload_1
30: iconst_5
31: aload_2
32: invokespecial #41
35: astore_3
36: iconst_1
37: anewarray     #18
40: astore        4
42: invokestatic  #42
45: astore        5
47: aload         4
49: iconst_0
50: aload         5
52: aastore
53: aload_3
54: aload         4
56: invokevirtual #43
59: pop
60: ldc           #20
62: invokestatic  #21
65: goto          77
68: astore        6
70: ldc           #44
72: aload         6
74: invokestatic  #24
77: return
Exception table:
from    to  target type
53    65    68   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/BaseOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/BaseOptimizer_ESTest.class
Class name: BaseOptimizer_ESTest
Method name: test7
Start line: 105
End line: 121
Method source code: 
  public void test7()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver(0.0, Integer.MAX_VALUE, 0.0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[1];
      MaxIter maxIter0 = MaxIter.unlimited();
      optimizationDataArray0[0] = (OptimizationData) maxIter0;
      // Undeclared exception!
      try { 
        simplexSolver0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: dconst_0
5: ldc           #26
7: dconst_0
8: invokespecial #27
11: astore_1
12: iconst_1
13: anewarray     #18
16: astore_2
17: invokestatic  #45
20: astore_3
21: aload_2
22: iconst_0
23: aload_3
24: aastore
25: aload_1
26: aload_2
27: invokevirtual #28
30: pop
31: ldc           #29
33: invokestatic  #21
36: goto          48
39: astore        4
41: ldc           #31
43: aload         4
45: invokestatic  #24
48: return
Exception table:
from    to  target type
25    36    39   Class java/lang/NullPointerException
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer_ESTest.class
Class name: GaussNewtonOptimizer_ESTest
Method name: test0
Start line: 20
End line: 34
Method source code: 
  public void test0()  throws Throwable  {
      SimplePointChecker<PointVectorValuePair> simplePointChecker0 = new SimplePointChecker<PointVectorValuePair>(0.0, 0.0);
      GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer(simplePointChecker0);
      // Undeclared exception!
      try { 
        gaussNewtonOptimizer0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: dconst_0
5: dconst_0
6: invokespecial #3
9: astore_1
10: new           #4
13: dup
14: aload_1
15: invokespecial #5
18: astore_2
19: aload_2
20: invokevirtual #6
23: pop
24: ldc           #7
26: invokestatic  #8
29: goto          39
32: astore_3
33: ldc           #10
35: aload_3
36: invokestatic  #11
39: return
Exception table:
from    to  target type
19    29    32   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer_ESTest.class
Class name: GaussNewtonOptimizer_ESTest
Method name: test1
Start line: 37
End line: 50
Method source code: 
  public void test1()  throws Throwable  {
      GaussNewtonOptimizer gaussNewtonOptimizer0 = new GaussNewtonOptimizer((ConvergenceChecker<PointVectorValuePair>) null);
      // Undeclared exception!
      try { 
        gaussNewtonOptimizer0.doOptimize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer", e);
      }
  }
Method byte code: 
0: new           #4
3: dup
4: aconst_null
5: checkcast     #12
8: invokespecial #5
11: astore_1
12: aload_1
13: invokevirtual #6
16: pop
17: ldc           #13
19: invokestatic  #8
22: goto          32
25: astore_2
26: ldc           #15
28: aload_2
29: invokestatic  #11
32: return
Exception table:
from    to  target type
12    22    25   Class java/lang/IllegalArgumentException
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.class
Class name: GaussNewtonOptimizerTest
Method name: testConstraintsUnsupported
Start line: 104
End line: 111
Method source code: 
    public void testConstraintsUnsupported() {
        createOptimizer().optimize(new MaxEval(100),
                                   new Target(new double[] { 2 }),
                                   new Weight(new double[] { 1 }),
                                   new InitialGuess(new double[] { 1, 2 }),
                                   new SimpleBounds(new double[] { -10, 0 },
                                                    new double[] { 20, 30 }));
    }
Method byte code: 
0: aload_0
1: invokevirtual #8
4: iconst_5
5: anewarray     #9
8: dup
9: iconst_0
10: new           #10
13: dup
14: bipush        100
16: invokespecial #11
19: aastore
20: dup
21: iconst_1
22: new           #12
25: dup
26: iconst_1
27: newarray       double
29: dup
30: iconst_0
31: ldc2_w        #13
34: dastore
35: invokespecial #15
38: aastore
39: dup
40: iconst_2
41: new           #16
44: dup
45: iconst_1
46: newarray       double
48: dup
49: iconst_0
50: dconst_1
51: dastore
52: invokespecial #17
55: aastore
56: dup
57: iconst_3
58: new           #18
61: dup
62: iconst_2
63: newarray       double
65: dup
66: iconst_0
67: dconst_1
68: dastore
69: dup
70: iconst_1
71: ldc2_w        #13
74: dastore
75: invokespecial #19
78: aastore
79: dup
80: iconst_4
81: new           #20
84: dup
85: iconst_2
86: newarray       double
88: dup
89: iconst_0
90: ldc2_w        #21
93: dastore
94: dup
95: iconst_1
96: dconst_0
97: dastore
98: iconst_2
99: newarray       double
101: dup
102: iconst_0
103: ldc2_w        #23
106: dastore
107: dup
108: iconst_1
109: ldc2_w        #25
112: dastore
113: invokespecial #27
116: aastore
117: invokevirtual #28
120: pop
121: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.class
Class name: GaussNewtonOptimizerTest
Method name: testMaxEvaluations
Start line: 132
End line: 149
Method source code: 
    public void testMaxEvaluations() throws Exception {
        CircleVectorial circle = new CircleVectorial();
        circle.addPoint( 30.0,  68.0);
        circle.addPoint( 50.0,  -6.0);
        circle.addPoint(110.0, -20.0);
        circle.addPoint( 35.0,  15.0);
        circle.addPoint( 45.0,  97.0);

        GaussNewtonOptimizer optimizer
            = new GaussNewtonOptimizer(new SimpleVectorValueChecker(1e-30, 1e-30));

        optimizer.optimize(new MaxEval(100),
                           circle.getModelFunction(),
                           circle.getModelFunctionJacobian(),
                           new Target(new double[] { 0, 0, 0, 0, 0 }),
                           new Weight(new double[] { 1, 1, 1, 1, 1 }),
                           new InitialGuess(new double[] { 98.680, 47.345 }));
    }
Method byte code: 
0: new           #31
3: dup
4: invokespecial #32
7: astore_1
8: aload_1
9: ldc2_w        #25
12: ldc2_w        #33
15: invokevirtual #35
18: aload_1
19: ldc2_w        #36
22: ldc2_w        #38
25: invokevirtual #35
28: aload_1
29: ldc2_w        #40
32: ldc2_w        #42
35: invokevirtual #35
38: aload_1
39: ldc2_w        #44
42: ldc2_w        #46
45: invokevirtual #35
48: aload_1
49: ldc2_w        #48
52: ldc2_w        #50
55: invokevirtual #35
58: new           #2
61: dup
62: new           #3
65: dup
66: ldc2_w        #52
69: ldc2_w        #52
72: invokespecial #6
75: invokespecial #7
78: astore_2
79: aload_2
80: bipush        6
82: anewarray     #9
85: dup
86: iconst_0
87: new           #10
90: dup
91: bipush        100
93: invokespecial #11
96: aastore
97: dup
98: iconst_1
99: aload_1
100: invokevirtual #54
103: aastore
104: dup
105: iconst_2
106: aload_1
107: invokevirtual #55
110: aastore
111: dup
112: iconst_3
113: new           #12
116: dup
117: iconst_5
118: newarray       double
120: dup
121: iconst_0
122: dconst_0
123: dastore
124: dup
125: iconst_1
126: dconst_0
127: dastore
128: dup
129: iconst_2
130: dconst_0
131: dastore
132: dup
133: iconst_3
134: dconst_0
135: dastore
136: dup
137: iconst_4
138: dconst_0
139: dastore
140: invokespecial #15
143: aastore
144: dup
145: iconst_4
146: new           #16
149: dup
150: iconst_5
151: newarray       double
153: dup
154: iconst_0
155: dconst_1
156: dastore
157: dup
158: iconst_1
159: dconst_1
160: dastore
161: dup
162: iconst_2
163: dconst_1
164: dastore
165: dup
166: iconst_3
167: dconst_1
168: dastore
169: dup
170: iconst_4
171: dconst_1
172: dastore
173: invokespecial #17
176: aastore
177: dup
178: iconst_5
179: new           #18
182: dup
183: iconst_2
184: newarray       double
186: dup
187: iconst_0
188: ldc2_w        #56
191: dastore
192: dup
193: iconst_1
194: ldc2_w        #58
197: dastore
198: invokespecial #19
201: aastore
202: invokevirtual #60
205: pop
206: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer_ESTest.class
Class name: LevenbergMarquardtOptimizer_ESTest
Method name: test0
Start line: 19
End line: 22
Method source code: 
  public void test0()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((ConvergenceChecker<PointVectorValuePair>) null);
      assertEquals(0.0, levenbergMarquardtOptimizer0.getChiSquare(), 0.01);
  }
Method byte code: 
0: new           #2
3: dup
4: aconst_null
5: checkcast     #3
8: invokespecial #4
11: astore_1
12: dconst_0
13: aload_1
14: invokevirtual #5
17: ldc2_w        #6
20: invokestatic  #8
23: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer_ESTest.class
Class name: LevenbergMarquardtOptimizer_ESTest
Method name: test1
Start line: 25
End line: 28
Method source code: 
  public void test1()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer((-1.0), (-1.0), (-1.0));
      assertEquals(0.0, levenbergMarquardtOptimizer0.getChiSquare(), 0.01);
  }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #9
7: ldc2_w        #9
10: ldc2_w        #9
13: invokespecial #11
16: astore_1
17: dconst_0
18: aload_1
19: invokevirtual #5
22: ldc2_w        #6
25: invokestatic  #8
28: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer_ESTest.class
Class name: LevenbergMarquardtOptimizer_ESTest
Method name: test2
Start line: 31
End line: 44
Method source code: 
  public void test2()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      // Undeclared exception!
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: invokespecial #12
7: astore_1
8: aload_1
9: invokevirtual #13
12: pop
13: ldc           #14
15: invokestatic  #15
18: goto          28
21: astore_2
22: ldc           #17
24: aload_2
25: invokestatic  #18
28: return
Exception table:
from    to  target type
8    18    21   Class java/lang/NullPointerException
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.class
Class name: LevenbergMarquardtOptimizerTest
Method name: testConstraintsUnsupported
Start line: 114
End line: 121
Method source code: 
    public void testConstraintsUnsupported() {
        createOptimizer().optimize(new MaxEval(100),
                                   new Target(new double[] { 2 }),
                                   new Weight(new double[] { 1 }),
                                   new InitialGuess(new double[] { 1, 2 }),
                                   new SimpleBounds(new double[] { -10, 0 },
                                                    new double[] { 20, 30 }));
    }
Method byte code: 
0: aload_0
1: invokevirtual #4
4: iconst_5
5: anewarray     #5
8: dup
9: iconst_0
10: new           #6
13: dup
14: bipush        100
16: invokespecial #7
19: aastore
20: dup
21: iconst_1
22: new           #8
25: dup
26: iconst_1
27: newarray       double
29: dup
30: iconst_0
31: ldc2_w        #9
34: dastore
35: invokespecial #11
38: aastore
39: dup
40: iconst_2
41: new           #12
44: dup
45: iconst_1
46: newarray       double
48: dup
49: iconst_0
50: dconst_1
51: dastore
52: invokespecial #13
55: aastore
56: dup
57: iconst_3
58: new           #14
61: dup
62: iconst_2
63: newarray       double
65: dup
66: iconst_0
67: dconst_1
68: dastore
69: dup
70: iconst_1
71: ldc2_w        #9
74: dastore
75: invokespecial #15
78: aastore
79: dup
80: iconst_4
81: new           #16
84: dup
85: iconst_2
86: newarray       double
88: dup
89: iconst_0
90: ldc2_w        #17
93: dastore
94: dup
95: iconst_1
96: dconst_0
97: dastore
98: iconst_2
99: newarray       double
101: dup
102: iconst_0
103: ldc2_w        #19
106: dastore
107: dup
108: iconst_1
109: ldc2_w        #21
112: dastore
113: invokespecial #23
116: aastore
117: invokevirtual #24
120: pop
121: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.class
Class name: LevenbergMarquardtOptimizerTest
Method name: testControlParameters
Start line: 150
End line: 170
Method source code: 
    public void testControlParameters() {
        CircleVectorial circle = new CircleVectorial();
        circle.addPoint( 30.0,  68.0);
        circle.addPoint( 50.0,  -6.0);
        circle.addPoint(110.0, -20.0);
        circle.addPoint( 35.0,  15.0);
        circle.addPoint( 45.0,  97.0);
        checkEstimate(circle.getModelFunction(),
                      circle.getModelFunctionJacobian(),
                      0.1, 10, 1.0e-14, 1.0e-16, 1.0e-10, false);
        checkEstimate(circle.getModelFunction(),
                      circle.getModelFunctionJacobian(),
                      0.1, 10, 1.0e-15, 1.0e-17, 1.0e-10, true);
        checkEstimate(circle.getModelFunction(),
                      circle.getModelFunctionJacobian(),
                      0.1,  5, 1.0e-15, 1.0e-16, 1.0e-10, true);
        circle.addPoint(300, -300);
        checkEstimate(circle.getModelFunction(),
                      circle.getModelFunctionJacobian(),
                      0.1, 20, 1.0e-18, 1.0e-16, 1.0e-10, true);
    }
Method byte code: 
0: new           #47
3: dup
4: invokespecial #48
7: astore_1
8: aload_1
9: ldc2_w        #21
12: ldc2_w        #49
15: invokevirtual #51
18: aload_1
19: ldc2_w        #52
22: ldc2_w        #54
25: invokevirtual #51
28: aload_1
29: ldc2_w        #56
32: ldc2_w        #58
35: invokevirtual #51
38: aload_1
39: ldc2_w        #60
42: ldc2_w        #62
45: invokevirtual #51
48: aload_1
49: ldc2_w        #64
52: ldc2_w        #66
55: invokevirtual #51
58: aload_0
59: aload_1
60: invokevirtual #68
63: aload_1
64: invokevirtual #69
67: ldc2_w        #70
70: bipush        10
72: ldc2_w        #72
75: ldc2_w        #74
78: ldc2_w        #76
81: iconst_0
82: invokespecial #78
85: aload_0
86: aload_1
87: invokevirtual #68
90: aload_1
91: invokevirtual #69
94: ldc2_w        #70
97: bipush        10
99: ldc2_w        #79
102: ldc2_w        #81
105: ldc2_w        #76
108: iconst_1
109: invokespecial #78
112: aload_0
113: aload_1
114: invokevirtual #68
117: aload_1
118: invokevirtual #69
121: ldc2_w        #70
124: iconst_5
125: ldc2_w        #79
128: ldc2_w        #74
131: ldc2_w        #76
134: iconst_1
135: invokespecial #78
138: aload_1
139: ldc2_w        #83
142: ldc2_w        #85
145: invokevirtual #51
148: aload_0
149: aload_1
150: invokevirtual #68
153: aload_1
154: invokevirtual #69
157: ldc2_w        #70
160: bipush        20
162: ldc2_w        #87
165: ldc2_w        #74
168: ldc2_w        #76
171: iconst_1
172: invokespecial #78
175: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.class
Class name: LevenbergMarquardtOptimizerTest
Method name: testBevington
Start line: 206
End line: 276
Method source code: 
    public void testBevington() {
        final double[][] dataPoints = {
            // column 1 = times
            { 15, 30, 45, 60, 75, 90, 105, 120, 135, 150,
              165, 180, 195, 210, 225, 240, 255, 270, 285, 300,
              315, 330, 345, 360, 375, 390, 405, 420, 435, 450,
              465, 480, 495, 510, 525, 540, 555, 570, 585, 600,
              615, 630, 645, 660, 675, 690, 705, 720, 735, 750,
              765, 780, 795, 810, 825, 840, 855, 870, 885, },
            // column 2 = measured counts
            { 775, 479, 380, 302, 185, 157, 137, 119, 110, 89,
              74, 61, 66, 68, 48, 54, 51, 46, 55, 29,
              28, 37, 49, 26, 35, 29, 31, 24, 25, 35,
              24, 30, 26, 28, 21, 18, 20, 27, 17, 17,
              14, 17, 24, 11, 22, 17, 12, 10, 13, 16,
              9, 9, 14, 21, 17, 13, 12, 18, 10, },
        };

        final BevingtonProblem problem = new BevingtonProblem();

        final int len = dataPoints[0].length;
        final double[] weights = new double[len];
        for (int i = 0; i < len; i++) {
            problem.addPoint(dataPoints[0][i],
                             dataPoints[1][i]);

            weights[i] = 1 / dataPoints[1][i];
        }

        final LevenbergMarquardtOptimizer optimizer
            = new LevenbergMarquardtOptimizer();

        final PointVectorValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getModelFunction(),
                                 problem.getModelFunctionJacobian(),
                                 new Target(dataPoints[1]),
                                 new Weight(weights),
                                 new InitialGuess(new double[] { 10, 900, 80, 27, 225 }));

        final double[] solution = optimum.getPoint();
        final double[] expectedSolution = { 10.4, 958.3, 131.4, 33.9, 205.0 };

        final double[][] covarMatrix = optimizer.computeCovariances(solution, 1e-14);
        final double[][] expectedCovarMatrix = {
            { 3.38, -3.69, 27.98, -2.34, -49.24 },
            { -3.69, 2492.26, 81.89, -69.21, -8.9 },
            { 27.98, 81.89, 468.99, -44.22, -615.44 },
            { -2.34, -69.21, -44.22, 6.39, 53.80 },
            { -49.24, -8.9, -615.44, 53.8, 929.45 }
        };

        final int numParams = expectedSolution.length;

        // Check that the computed solution is within the reference error range.
        for (int i = 0; i < numParams; i++) {
            final double error = FastMath.sqrt(expectedCovarMatrix[i][i]);
            Assert.assertEquals("Parameter " + i, expectedSolution[i], solution[i], error);
        }

        // Check that each entry of the computed covariance matrix is within 10%
        // of the reference matrix entry.
        for (int i = 0; i < numParams; i++) {
            for (int j = 0; j < numParams; j++) {
                Assert.assertEquals("Covariance matrix [" + i + "][" + j + "]",
                                    expectedCovarMatrix[i][j],
                                    covarMatrix[i][j],
                                    FastMath.abs(0.1 * expectedCovarMatrix[i][j]));
            }
        }
    }
Method byte code: 
0: iconst_2
1: anewarray     #26
4: dup
5: iconst_0
6: bipush        59
8: newarray       double
10: dup
11: iconst_0
12: ldc2_w        #62
15: dastore
16: dup
17: iconst_1
18: ldc2_w        #21
21: dastore
22: dup
23: iconst_2
24: ldc2_w        #64
27: dastore
28: dup
29: iconst_3
30: ldc2_w        #98
33: dastore
34: dup
35: iconst_4
36: ldc2_w        #100
39: dastore
40: dup
41: iconst_5
42: ldc2_w        #102
45: dastore
46: dup
47: bipush        6
49: ldc2_w        #104
52: dastore
53: dup
54: bipush        7
56: ldc2_w        #106
59: dastore
60: dup
61: bipush        8
63: ldc2_w        #108
66: dastore
67: dup
68: bipush        9
70: ldc2_w        #110
73: dastore
74: dup
75: bipush        10
77: ldc2_w        #112
80: dastore
81: dup
82: bipush        11
84: ldc2_w        #114
87: dastore
88: dup
89: bipush        12
91: ldc2_w        #116
94: dastore
95: dup
96: bipush        13
98: ldc2_w        #118
101: dastore
102: dup
103: bipush        14
105: ldc2_w        #120
108: dastore
109: dup
110: bipush        15
112: ldc2_w        #122
115: dastore
116: dup
117: bipush        16
119: ldc2_w        #124
122: dastore
123: dup
124: bipush        17
126: ldc2_w        #126
129: dastore
130: dup
131: bipush        18
133: ldc2_w        #128
136: dastore
137: dup
138: bipush        19
140: ldc2_w        #83
143: dastore
144: dup
145: bipush        20
147: ldc2_w        #130
150: dastore
151: dup
152: bipush        21
154: ldc2_w        #132
157: dastore
158: dup
159: bipush        22
161: ldc2_w        #134
164: dastore
165: dup
166: bipush        23
168: ldc2_w        #136
171: dastore
172: dup
173: bipush        24
175: ldc2_w        #138
178: dastore
179: dup
180: bipush        25
182: ldc2_w        #140
185: dastore
186: dup
187: bipush        26
189: ldc2_w        #142
192: dastore
193: dup
194: bipush        27
196: ldc2_w        #144
199: dastore
200: dup
201: bipush        28
203: ldc2_w        #146
206: dastore
207: dup
208: bipush        29
210: ldc2_w        #148
213: dastore
214: dup
215: bipush        30
217: ldc2_w        #150
220: dastore
221: dup
222: bipush        31
224: ldc2_w        #152
227: dastore
228: dup
229: bipush        32
231: ldc2_w        #154
234: dastore
235: dup
236: bipush        33
238: ldc2_w        #156
241: dastore
242: dup
243: bipush        34
245: ldc2_w        #158
248: dastore
249: dup
250: bipush        35
252: ldc2_w        #160
255: dastore
256: dup
257: bipush        36
259: ldc2_w        #162
262: dastore
263: dup
264: bipush        37
266: ldc2_w        #164
269: dastore
270: dup
271: bipush        38
273: ldc2_w        #166
276: dastore
277: dup
278: bipush        39
280: ldc2_w        #168
283: dastore
284: dup
285: bipush        40
287: ldc2_w        #170
290: dastore
291: dup
292: bipush        41
294: ldc2_w        #172
297: dastore
298: dup
299: bipush        42
301: ldc2_w        #174
304: dastore
305: dup
306: bipush        43
308: ldc2_w        #176
311: dastore
312: dup
313: bipush        44
315: ldc2_w        #178
318: dastore
319: dup
320: bipush        45
322: ldc2_w        #180
325: dastore
326: dup
327: bipush        46
329: ldc2_w        #182
332: dastore
333: dup
334: bipush        47
336: ldc2_w        #184
339: dastore
340: dup
341: bipush        48
343: ldc2_w        #186
346: dastore
347: dup
348: bipush        49
350: ldc2_w        #188
353: dastore
354: dup
355: bipush        50
357: ldc2_w        #190
360: dastore
361: dup
362: bipush        51
364: ldc2_w        #192
367: dastore
368: dup
369: bipush        52
371: ldc2_w        #194
374: dastore
375: dup
376: bipush        53
378: ldc2_w        #196
381: dastore
382: dup
383: bipush        54
385: ldc2_w        #198
388: dastore
389: dup
390: bipush        55
392: ldc2_w        #200
395: dastore
396: dup
397: bipush        56
399: ldc2_w        #202
402: dastore
403: dup
404: bipush        57
406: ldc2_w        #204
409: dastore
410: dup
411: bipush        58
413: ldc2_w        #206
416: dastore
417: aastore
418: dup
419: iconst_1
420: bipush        59
422: newarray       double
424: dup
425: iconst_0
426: ldc2_w        #208
429: dastore
430: dup
431: iconst_1
432: ldc2_w        #210
435: dastore
436: dup
437: iconst_2
438: ldc2_w        #212
441: dastore
442: dup
443: iconst_3
444: ldc2_w        #214
447: dastore
448: dup
449: iconst_4
450: ldc2_w        #216
453: dastore
454: dup
455: iconst_5
456: ldc2_w        #218
459: dastore
460: dup
461: bipush        6
463: ldc2_w        #220
466: dastore
467: dup
468: bipush        7
470: ldc2_w        #222
473: dastore
474: dup
475: bipush        8
477: ldc2_w        #56
480: dastore
481: dup
482: bipush        9
484: ldc2_w        #224
487: dastore
488: dup
489: bipush        10
491: ldc2_w        #226
494: dastore
495: dup
496: bipush        11
498: ldc2_w        #228
501: dastore
502: dup
503: bipush        12
505: ldc2_w        #230
508: dastore
509: dup
510: bipush        13
512: ldc2_w        #49
515: dastore
516: dup
517: bipush        14
519: ldc2_w        #232
522: dastore
523: dup
524: bipush        15
526: ldc2_w        #234
529: dastore
530: dup
531: bipush        16
533: ldc2_w        #236
536: dastore
537: dup
538: bipush        17
540: ldc2_w        #238
543: dastore
544: dup
545: bipush        18
547: ldc2_w        #240
550: dastore
551: dup
552: bipush        19
554: ldc2_w        #242
557: dastore
558: dup
559: bipush        20
561: ldc2_w        #244
564: dastore
565: dup
566: bipush        21
568: ldc2_w        #246
571: dastore
572: dup
573: bipush        22
575: ldc2_w        #248
578: dastore
579: dup
580: bipush        23
582: ldc2_w        #250
585: dastore
586: dup
587: bipush        24
589: ldc2_w        #60
592: dastore
593: dup
594: bipush        25
596: ldc2_w        #242
599: dastore
600: dup
601: bipush        26
603: ldc2_w        #252
606: dastore
607: dup
608: bipush        27
610: ldc2_w        #254
613: dastore
614: dup
615: bipush        28
617: ldc2_w        #256
620: dastore
621: dup
622: bipush        29
624: ldc2_w        #60
627: dastore
628: dup
629: bipush        30
631: ldc2_w        #254
634: dastore
635: dup
636: bipush        31
638: ldc2_w        #21
641: dastore
642: dup
643: bipush        32
645: ldc2_w        #250
648: dastore
649: dup
650: bipush        33
652: ldc2_w        #244
655: dastore
656: dup
657: bipush        34
659: ldc2_w        #258
662: dastore
663: dup
664: bipush        35
666: ldc2_w        #260
669: dastore
670: dup
671: bipush        36
673: ldc2_w        #19
676: dastore
677: dup
678: bipush        37
680: ldc2_w        #262
683: dastore
684: dup
685: bipush        38
687: ldc2_w        #264
690: dastore
691: dup
692: bipush        39
694: ldc2_w        #264
697: dastore
698: dup
699: bipush        40
701: ldc2_w        #266
704: dastore
705: dup
706: bipush        41
708: ldc2_w        #264
711: dastore
712: dup
713: bipush        42
715: ldc2_w        #254
718: dastore
719: dup
720: bipush        43
722: ldc2_w        #268
725: dastore
726: dup
727: bipush        44
729: ldc2_w        #270
732: dastore
733: dup
734: bipush        45
736: ldc2_w        #264
739: dastore
740: dup
741: bipush        46
743: ldc2_w        #272
746: dastore
747: dup
748: bipush        47
750: ldc2_w        #274
753: dastore
754: dup
755: bipush        48
757: ldc2_w        #276
760: dastore
761: dup
762: bipush        49
764: ldc2_w        #278
767: dastore
768: dup
769: bipush        50
771: ldc2_w        #280
774: dastore
775: dup
776: bipush        51
778: ldc2_w        #280
781: dastore
782: dup
783: bipush        52
785: ldc2_w        #266
788: dastore
789: dup
790: bipush        53
792: ldc2_w        #258
795: dastore
796: dup
797: bipush        54
799: ldc2_w        #264
802: dastore
803: dup
804: bipush        55
806: ldc2_w        #276
809: dastore
810: dup
811: bipush        56
813: ldc2_w        #272
816: dastore
817: dup
818: bipush        57
820: ldc2_w        #260
823: dastore
824: dup
825: bipush        58
827: ldc2_w        #274
830: dastore
831: aastore
832: astore_1
833: new           #282
836: dup
837: invokespecial #283
840: astore_2
841: aload_1
842: iconst_0
843: aaload
844: arraylength
845: istore_3
846: iload_3
847: newarray       double
849: astore        4
851: iconst_0
852: istore        5
854: iload         5
856: iload_3
857: if_icmpge     895
860: aload_2
861: aload_1
862: iconst_0
863: aaload
864: iload         5
866: daload
867: aload_1
868: iconst_1
869: aaload
870: iload         5
872: daload
873: invokevirtual #284
876: aload         4
878: iload         5
880: dconst_1
881: aload_1
882: iconst_1
883: aaload
884: iload         5
886: daload
887: ddiv
888: dastore
889: iinc          5, 1
892: goto          854
895: new           #2
898: dup
899: invokespecial #3
902: astore        5
904: aload         5
906: bipush        6
908: anewarray     #5
911: dup
912: iconst_0
913: new           #6
916: dup
917: bipush        100
919: invokespecial #7
922: aastore
923: dup
924: iconst_1
925: aload_2
926: invokevirtual #285
929: aastore
930: dup
931: iconst_2
932: aload_2
933: invokevirtual #286
936: aastore
937: dup
938: iconst_3
939: new           #8
942: dup
943: aload_1
944: iconst_1
945: aaload
946: invokespecial #11
949: aastore
950: dup
951: iconst_4
952: new           #12
955: dup
956: aload         4
958: invokespecial #13
961: aastore
962: dup
963: iconst_5
964: new           #14
967: dup
968: iconst_5
969: newarray       double
971: dup
972: iconst_0
973: ldc2_w        #274
976: dastore
977: dup
978: iconst_1
979: ldc2_w        #287
982: dastore
983: dup
984: iconst_2
985: ldc2_w        #289
988: dastore
989: dup
990: iconst_3
991: ldc2_w        #262
994: dastore
995: dup
996: iconst_4
997: ldc2_w        #120
1000: dastore
1001: invokespecial #15
1004: aastore
1005: invokevirtual #95
1008: astore        6
1010: aload         6
1012: invokevirtual #43
1015: astore        7
1017: iconst_5
1018: newarray       double
1020: dup
1021: iconst_0
1022: ldc2_w        #291
1025: dastore
1026: dup
1027: iconst_1
1028: ldc2_w        #293
1031: dastore
1032: dup
1033: iconst_2
1034: ldc2_w        #295
1037: dastore
1038: dup
1039: iconst_3
1040: ldc2_w        #297
1043: dastore
1044: dup
1045: iconst_4
1046: ldc2_w        #299
1049: dastore
1050: astore        8
1052: aload         5
1054: aload         7
1056: ldc2_w        #72
1059: invokevirtual #301
1062: astore        9
1064: iconst_5
1065: anewarray     #26
1068: dup
1069: iconst_0
1070: iconst_5
1071: newarray       double
1073: dup
1074: iconst_0
1075: ldc2_w        #302
1078: dastore
1079: dup
1080: iconst_1
1081: ldc2_w        #304
1084: dastore
1085: dup
1086: iconst_2
1087: ldc2_w        #306
1090: dastore
1091: dup
1092: iconst_3
1093: ldc2_w        #308
1096: dastore
1097: dup
1098: iconst_4
1099: ldc2_w        #310
1102: dastore
1103: aastore
1104: dup
1105: iconst_1
1106: iconst_5
1107: newarray       double
1109: dup
1110: iconst_0
1111: ldc2_w        #304
1114: dastore
1115: dup
1116: iconst_1
1117: ldc2_w        #312
1120: dastore
1121: dup
1122: iconst_2
1123: ldc2_w        #314
1126: dastore
1127: dup
1128: iconst_3
1129: ldc2_w        #316
1132: dastore
1133: dup
1134: iconst_4
1135: ldc2_w        #318
1138: dastore
1139: aastore
1140: dup
1141: iconst_2
1142: iconst_5
1143: newarray       double
1145: dup
1146: iconst_0
1147: ldc2_w        #306
1150: dastore
1151: dup
1152: iconst_1
1153: ldc2_w        #314
1156: dastore
1157: dup
1158: iconst_2
1159: ldc2_w        #320
1162: dastore
1163: dup
1164: iconst_3
1165: ldc2_w        #322
1168: dastore
1169: dup
1170: iconst_4
1171: ldc2_w        #324
1174: dastore
1175: aastore
1176: dup
1177: iconst_3
1178: iconst_5
1179: newarray       double
1181: dup
1182: iconst_0
1183: ldc2_w        #308
1186: dastore
1187: dup
1188: iconst_1
1189: ldc2_w        #316
1192: dastore
1193: dup
1194: iconst_2
1195: ldc2_w        #322
1198: dastore
1199: dup
1200: iconst_3
1201: ldc2_w        #326
1204: dastore
1205: dup
1206: iconst_4
1207: ldc2_w        #328
1210: dastore
1211: aastore
1212: dup
1213: iconst_4
1214: iconst_5
1215: newarray       double
1217: dup
1218: iconst_0
1219: ldc2_w        #310
1222: dastore
1223: dup
1224: iconst_1
1225: ldc2_w        #318
1228: dastore
1229: dup
1230: iconst_2
1231: ldc2_w        #324
1234: dastore
1235: dup
1236: iconst_3
1237: ldc2_w        #328
1240: dastore
1241: dup
1242: iconst_4
1243: ldc2_w        #330
1246: dastore
1247: aastore
1248: astore        10
1250: aload         8
1252: arraylength
1253: istore        11
1255: iconst_0
1256: istore        12
1258: iload         12
1260: iload         11
1262: if_icmpge     1320
1265: aload         10
1267: iload         12
1269: aaload
1270: iload         12
1272: daload
1273: invokestatic  #38
1276: dstore        13
1278: new           #332
1281: dup
1282: invokespecial #333
1285: ldc_w         #334
1288: invokevirtual #335
1291: iload         12
1293: invokevirtual #336
1296: invokevirtual #337
1299: aload         8
1301: iload         12
1303: daload
1304: aload         7
1306: iload         12
1308: daload
1309: dload         13
1311: invokestatic  #338
1314: iinc          12, 1
1317: goto          1258
1320: iconst_0
1321: istore        12
1323: iload         12
1325: iload         11
1327: if_icmpge     1424
1330: iconst_0
1331: istore        13
1333: iload         13
1335: iload         11
1337: if_icmpge     1418
1340: new           #332
1343: dup
1344: invokespecial #333
1347: ldc_w         #339
1350: invokevirtual #335
1353: iload         12
1355: invokevirtual #336
1358: ldc_w         #340
1361: invokevirtual #335
1364: iload         13
1366: invokevirtual #336
1369: ldc_w         #341
1372: invokevirtual #335
1375: invokevirtual #337
1378: aload         10
1380: iload         12
1382: aaload
1383: iload         13
1385: daload
1386: aload         9
1388: iload         12
1390: aaload
1391: iload         13
1393: daload
1394: ldc2_w        #70
1397: aload         10
1399: iload         12
1401: aaload
1402: iload         13
1404: daload
1405: dmul
1406: invokestatic  #342
1409: invokestatic  #338
1412: iinc          13, 1
1415: goto          1333
1418: iinc          12, 1
1421: goto          1323
1424: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.class
Class name: LevenbergMarquardtOptimizerTest
Method name: testCircleFitting2
Start line: 279
End line: 319
Method source code: 
    public void testCircleFitting2() {
        final double xCenter = 123.456;
        final double yCenter = 654.321;
        final double xSigma = 10;
        final double ySigma = 15;
        final double radius = 111.111;
        // The test is extremely sensitive to the seed.
        final long seed = 59421061L;
        final RandomCirclePointGenerator factory
            = new RandomCirclePointGenerator(xCenter, yCenter, radius,
                                             xSigma, ySigma,
                                             seed);
        final CircleProblem circle = new CircleProblem(xSigma, ySigma);

        final int numPoints = 10;
        for (Vector2D p : factory.generate(numPoints)) {
            circle.addPoint(p.getX(), p.getY());
        }

        // First guess for the center's coordinates and radius.
        final double[] init = { 90, 659, 115 };

        final LevenbergMarquardtOptimizer optimizer
            = new LevenbergMarquardtOptimizer();
        final PointVectorValuePair optimum = optimizer.optimize(new MaxEval(100),
                                                                circle.getModelFunction(),
                                                                circle.getModelFunctionJacobian(),
                                                                new Target(circle.target()),
                                                                new Weight(circle.weight()),
                                                                new InitialGuess(init));

        final double[] paramFound = optimum.getPoint();

        // Retrieve errors estimation.
        final double[] asymptoticStandardErrorFound = optimizer.computeSigma(paramFound, 1e-14);

        // Check that the parameters are found within the assumed error bars.
        Assert.assertEquals(xCenter, paramFound[0], asymptoticStandardErrorFound[0]);
        Assert.assertEquals(yCenter, paramFound[1], asymptoticStandardErrorFound[1]);
        Assert.assertEquals(radius, paramFound[2], asymptoticStandardErrorFound[2]);
    }
Method byte code: 
0: ldc2_w        #343
3: dstore_1
4: ldc2_w        #345
7: dstore_3
8: ldc2_w        #274
11: dstore        5
13: ldc2_w        #62
16: dstore        7
18: ldc2_w        #347
21: dstore        9
23: ldc2_w        #349
26: lstore        11
28: new           #351
31: dup
32: ldc2_w        #343
35: ldc2_w        #345
38: ldc2_w        #347
41: ldc2_w        #274
44: ldc2_w        #62
47: ldc2_w        #349
50: invokespecial #352
53: astore        13
55: new           #353
58: dup
59: ldc2_w        #274
62: ldc2_w        #62
65: invokespecial #354
68: astore        14
70: bipush        10
72: istore        15
74: aload         13
76: bipush        10
78: invokevirtual #355
81: astore        16
83: aload         16
85: arraylength
86: istore        17
88: iconst_0
89: istore        18
91: iload         18
93: iload         17
95: if_icmpge     126
98: aload         16
100: iload         18
102: aaload
103: astore        19
105: aload         14
107: aload         19
109: invokevirtual #356
112: aload         19
114: invokevirtual #357
117: invokevirtual #358
120: iinc          18, 1
123: goto          91
126: iconst_3
127: newarray       double
129: dup
130: iconst_0
131: ldc2_w        #102
134: dastore
135: dup
136: iconst_1
137: ldc2_w        #359
140: dastore
141: dup
142: iconst_2
143: ldc2_w        #361
146: dastore
147: astore        16
149: new           #2
152: dup
153: invokespecial #3
156: astore        17
158: aload         17
160: bipush        6
162: anewarray     #5
165: dup
166: iconst_0
167: new           #6
170: dup
171: bipush        100
173: invokespecial #7
176: aastore
177: dup
178: iconst_1
179: aload         14
181: invokevirtual #363
184: aastore
185: dup
186: iconst_2
187: aload         14
189: invokevirtual #364
192: aastore
193: dup
194: iconst_3
195: new           #8
198: dup
199: aload         14
201: invokevirtual #365
204: invokespecial #11
207: aastore
208: dup
209: iconst_4
210: new           #12
213: dup
214: aload         14
216: invokevirtual #366
219: invokespecial #13
222: aastore
223: dup
224: iconst_5
225: new           #14
228: dup
229: aload         16
231: invokespecial #15
234: aastore
235: invokevirtual #95
238: astore        18
240: aload         18
242: invokevirtual #43
245: astore        19
247: aload         17
249: aload         19
251: ldc2_w        #72
254: invokevirtual #367
257: astore        20
259: ldc2_w        #343
262: aload         19
264: iconst_0
265: daload
266: aload         20
268: iconst_0
269: daload
270: invokestatic  #368
273: ldc2_w        #345
276: aload         19
278: iconst_1
279: daload
280: aload         20
282: iconst_1
283: daload
284: invokestatic  #368
287: ldc2_w        #347
290: aload         19
292: iconst_2
293: daload
294: aload         20
296: iconst_2
297: daload
298: invokestatic  #368
301: return
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testInitOutofbounds1
Start line: 53
End line: 62
Method source code: 
    public void testInitOutofbounds1() {
        double[] startPoint = point(DIM,3);
        double[] insigma = point(DIM, 0.3);
        double[][] boundaries = boundaries(DIM,-1,2);
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #3
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #6
14: invokestatic  #5
17: astore_2
18: bipush        13
20: ldc2_w        #8
23: ldc2_w        #10
26: invokestatic  #12
29: astore_3
30: new           #13
33: dup
34: bipush        13
36: dconst_1
37: invokestatic  #5
40: dconst_0
41: invokespecial #14
44: astore        4
46: aload_0
47: new           #15
50: dup
51: aconst_null
52: invokespecial #16
55: aload_1
56: aload_2
57: aload_3
58: getstatic     #17
61: getstatic     #18
64: iconst_1
65: iconst_0
66: ldc2_w        #19
69: ldc2_w        #19
72: ldc2_w        #21
75: ldc           #23
77: aload         4
79: invokespecial #24
82: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testInitOutofbounds2
Start line: 64
End line: 73
Method source code: 
    public void testInitOutofbounds2() {
        double[] startPoint = point(DIM, -2);
        double[] insigma = point(DIM, 0.3);
        double[][] boundaries = boundaries(DIM,-1,2);
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #25
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #6
14: invokestatic  #5
17: astore_2
18: bipush        13
20: ldc2_w        #8
23: ldc2_w        #10
26: invokestatic  #12
29: astore_3
30: new           #13
33: dup
34: bipush        13
36: dconst_1
37: invokestatic  #5
40: dconst_0
41: invokespecial #14
44: astore        4
46: aload_0
47: new           #15
50: dup
51: aconst_null
52: invokespecial #16
55: aload_1
56: aload_2
57: aload_3
58: getstatic     #17
61: getstatic     #18
64: iconst_1
65: iconst_0
66: ldc2_w        #19
69: ldc2_w        #19
72: ldc2_w        #21
75: ldc           #23
77: aload         4
79: invokespecial #24
82: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testBoundariesDimensionMismatch
Start line: 76
End line: 85
Method source code: 
    public void testBoundariesDimensionMismatch() {
        double[] startPoint = point(DIM,0.5);
        double[] insigma = point(DIM, 0.3);
        double[][] boundaries = boundaries(DIM+1,-1,2);
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #27
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #6
14: invokestatic  #5
17: astore_2
18: bipush        14
20: ldc2_w        #8
23: ldc2_w        #10
26: invokestatic  #12
29: astore_3
30: new           #13
33: dup
34: bipush        13
36: dconst_1
37: invokestatic  #5
40: dconst_0
41: invokespecial #14
44: astore        4
46: aload_0
47: new           #15
50: dup
51: aconst_null
52: invokespecial #16
55: aload_1
56: aload_2
57: aload_3
58: getstatic     #17
61: getstatic     #18
64: iconst_1
65: iconst_0
66: ldc2_w        #19
69: ldc2_w        #19
72: ldc2_w        #21
75: ldc           #23
77: aload         4
79: invokespecial #24
82: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testInputSigmaNegative
Start line: 88
End line: 97
Method source code: 
    public void testInputSigmaNegative() {
        double[] startPoint = point(DIM,0.5);
        double[] insigma = point(DIM,-0.5);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #27
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #29
14: invokestatic  #5
17: astore_2
18: aconst_null
19: checkcast     #31
22: astore_3
23: new           #13
26: dup
27: bipush        13
29: dconst_1
30: invokestatic  #5
33: dconst_0
34: invokespecial #14
37: astore        4
39: aload_0
40: new           #15
43: dup
44: aconst_null
45: invokespecial #16
48: aload_1
49: aload_2
50: aload_3
51: getstatic     #17
54: getstatic     #18
57: iconst_1
58: iconst_0
59: ldc2_w        #19
62: ldc2_w        #19
65: ldc2_w        #21
68: ldc           #23
70: aload         4
72: invokespecial #24
75: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testInputSigmaOutOfRange
Start line: 100
End line: 109
Method source code: 
    public void testInputSigmaOutOfRange() {
        double[] startPoint = point(DIM,0.5);
        double[] insigma = point(DIM, 1.1);
        double[][] boundaries = boundaries(DIM,-0.5,0.5);
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #27
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #32
14: invokestatic  #5
17: astore_2
18: bipush        13
20: ldc2_w        #29
23: ldc2_w        #27
26: invokestatic  #12
29: astore_3
30: new           #13
33: dup
34: bipush        13
36: dconst_1
37: invokestatic  #5
40: dconst_0
41: invokespecial #14
44: astore        4
46: aload_0
47: new           #15
50: dup
51: aconst_null
52: invokespecial #16
55: aload_1
56: aload_2
57: aload_3
58: getstatic     #17
61: getstatic     #18
64: iconst_1
65: iconst_0
66: ldc2_w        #19
69: ldc2_w        #19
72: ldc2_w        #21
75: ldc           #23
77: aload         4
79: invokespecial #24
82: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testInputSigmaDimensionMismatch
Start line: 112
End line: 121
Method source code: 
    public void testInputSigmaDimensionMismatch() {
        double[] startPoint = point(DIM,0.5);
        double[] insigma = point(DIM + 1, 0.5);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #27
5: invokestatic  #5
8: astore_1
9: bipush        14
11: ldc2_w        #27
14: invokestatic  #5
17: astore_2
18: aconst_null
19: checkcast     #31
22: astore_3
23: new           #13
26: dup
27: bipush        13
29: dconst_1
30: invokestatic  #5
33: dconst_0
34: invokespecial #14
37: astore        4
39: aload_0
40: new           #15
43: dup
44: aconst_null
45: invokespecial #16
48: aload_1
49: aload_2
50: aload_3
51: getstatic     #17
54: getstatic     #18
57: iconst_1
58: iconst_0
59: ldc2_w        #19
62: ldc2_w        #19
65: ldc2_w        #21
68: ldc           #23
70: aload         4
72: invokespecial #24
75: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testRosen
Start line: 125
End line: 137
Method source code: 
    public void testRosen() {
        double[] startPoint = point(DIM,0.1);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #34
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #34
14: invokestatic  #5
17: astore_2
18: aconst_null
19: checkcast     #31
22: astore_3
23: new           #13
26: dup
27: bipush        13
29: dconst_1
30: invokestatic  #5
33: dconst_0
34: invokespecial #14
37: astore        4
39: aload_0
40: new           #15
43: dup
44: aconst_null
45: invokespecial #16
48: aload_1
49: aload_2
50: aload_3
51: getstatic     #17
54: getstatic     #18
57: iconst_1
58: iconst_0
59: ldc2_w        #19
62: ldc2_w        #19
65: ldc2_w        #21
68: ldc           #23
70: aload         4
72: invokespecial #24
75: aload_0
76: new           #15
79: dup
80: aconst_null
81: invokespecial #16
84: aload_1
85: aload_2
86: aload_3
87: getstatic     #17
90: getstatic     #18
93: iconst_0
94: iconst_0
95: ldc2_w        #19
98: ldc2_w        #19
101: ldc2_w        #21
104: ldc           #23
106: aload         4
108: invokespecial #24
111: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testMaximize
Start line: 141
End line: 158
Method source code: 
    public void testMaximize() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),1.0);
        doTest(new MinusElli(), startPoint, insigma, boundaries,
                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,
                2e-10, 5e-6, 100000, expected);
        doTest(new MinusElli(), startPoint, insigma, boundaries,
                GoalType.MAXIMIZE, LAMBDA, false, 0, 1.0-1e-13,
                2e-10, 5e-6, 100000, expected);
        boundaries = boundaries(DIM,-0.3,0.3); 
        startPoint = point(DIM,0.1);
        doTest(new MinusElli(), startPoint, insigma, boundaries,
                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,
                2e-10, 5e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_1
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #36
41: dup
42: aconst_null
43: invokespecial #37
46: aload_1
47: aload_2
48: aload_3
49: getstatic     #38
52: getstatic     #18
55: iconst_1
56: iconst_0
57: ldc2_w        #39
60: ldc2_w        #41
63: ldc2_w        #43
66: ldc           #23
68: aload         4
70: invokespecial #24
73: aload_0
74: new           #36
77: dup
78: aconst_null
79: invokespecial #37
82: aload_1
83: aload_2
84: aload_3
85: getstatic     #38
88: getstatic     #18
91: iconst_0
92: iconst_0
93: ldc2_w        #39
96: ldc2_w        #41
99: ldc2_w        #43
102: ldc           #23
104: aload         4
106: invokespecial #24
109: bipush        13
111: ldc2_w        #45
114: ldc2_w        #6
117: invokestatic  #12
120: astore_3
121: bipush        13
123: ldc2_w        #34
126: invokestatic  #5
129: astore_1
130: aload_0
131: new           #36
134: dup
135: aconst_null
136: invokespecial #37
139: aload_1
140: aload_2
141: aload_3
142: getstatic     #38
145: getstatic     #18
148: iconst_1
149: iconst_0
150: ldc2_w        #39
153: ldc2_w        #41
156: ldc2_w        #43
159: ldc           #23
161: aload         4
163: invokespecial #24
166: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testEllipse
Start line: 161
End line: 173
Method source code: 
    public void testEllipse() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Elli(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Elli(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #47
41: dup
42: invokespecial #48
45: aload_1
46: aload_2
47: aload_3
48: getstatic     #17
51: getstatic     #18
54: iconst_1
55: iconst_0
56: ldc2_w        #19
59: ldc2_w        #19
62: ldc2_w        #21
65: ldc           #23
67: aload         4
69: invokespecial #24
72: aload_0
73: new           #47
76: dup
77: invokespecial #48
80: aload_1
81: aload_2
82: aload_3
83: getstatic     #17
86: getstatic     #18
89: iconst_0
90: iconst_0
91: ldc2_w        #19
94: ldc2_w        #19
97: ldc2_w        #21
100: ldc           #23
102: aload         4
104: invokespecial #24
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testElliRotated
Start line: 176
End line: 188
Method source code: 
    public void testElliRotated() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new ElliRotated(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new ElliRotated(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #49
41: dup
42: invokespecial #50
45: aload_1
46: aload_2
47: aload_3
48: getstatic     #17
51: getstatic     #18
54: iconst_1
55: iconst_0
56: ldc2_w        #19
59: ldc2_w        #19
62: ldc2_w        #21
65: ldc           #23
67: aload         4
69: invokespecial #24
72: aload_0
73: new           #49
76: dup
77: invokespecial #50
80: aload_1
81: aload_2
82: aload_3
83: getstatic     #17
86: getstatic     #18
89: iconst_0
90: iconst_0
91: ldc2_w        #19
94: ldc2_w        #19
97: ldc2_w        #21
100: ldc           #23
102: aload         4
104: invokespecial #24
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testCigar
Start line: 191
End line: 203
Method source code: 
    public void testCigar() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #51
41: dup
42: invokespecial #52
45: aload_1
46: aload_2
47: aload_3
48: getstatic     #17
51: getstatic     #18
54: iconst_1
55: iconst_0
56: ldc2_w        #19
59: ldc2_w        #19
62: ldc2_w        #21
65: ldc           #53
67: aload         4
69: invokespecial #24
72: aload_0
73: new           #51
76: dup
77: invokespecial #52
80: aload_1
81: aload_2
82: aload_3
83: getstatic     #17
86: getstatic     #18
89: iconst_0
90: iconst_0
91: ldc2_w        #19
94: ldc2_w        #19
97: ldc2_w        #21
100: ldc           #23
102: aload         4
104: invokespecial #24
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testCigarWithBoundaries
Start line: 206
End line: 218
Method source code: 
    public void testCigarWithBoundaries() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = boundaries(DIM, -1e100, Double.POSITIVE_INFINITY);
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: bipush        13
18: ldc2_w        #54
21: ldc2_w        #57
24: invokestatic  #12
27: astore_3
28: new           #13
31: dup
32: bipush        13
34: dconst_0
35: invokestatic  #5
38: dconst_0
39: invokespecial #14
42: astore        4
44: aload_0
45: new           #51
48: dup
49: invokespecial #52
52: aload_1
53: aload_2
54: aload_3
55: getstatic     #17
58: getstatic     #18
61: iconst_1
62: iconst_0
63: ldc2_w        #19
66: ldc2_w        #19
69: ldc2_w        #21
72: ldc           #53
74: aload         4
76: invokespecial #24
79: aload_0
80: new           #51
83: dup
84: invokespecial #52
87: aload_1
88: aload_2
89: aload_3
90: getstatic     #17
93: getstatic     #18
96: iconst_0
97: iconst_0
98: ldc2_w        #19
101: ldc2_w        #19
104: ldc2_w        #21
107: ldc           #23
109: aload         4
111: invokespecial #24
114: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testTwoAxes
Start line: 221
End line: 233
Method source code: 
    public void testTwoAxes() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new TwoAxes(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new TwoAxes(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-8, 1e-3, 200000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #59
41: dup
42: invokespecial #60
45: aload_1
46: aload_2
47: aload_3
48: getstatic     #17
51: iconst_2
52: getstatic     #18
55: imul
56: iconst_1
57: iconst_0
58: ldc2_w        #19
61: ldc2_w        #19
64: ldc2_w        #21
67: ldc           #53
69: aload         4
71: invokespecial #24
74: aload_0
75: new           #59
78: dup
79: invokespecial #60
82: aload_1
83: aload_2
84: aload_3
85: getstatic     #17
88: iconst_2
89: getstatic     #18
92: imul
93: iconst_0
94: iconst_0
95: ldc2_w        #19
98: ldc2_w        #61
101: ldc2_w        #63
104: ldc           #53
106: aload         4
108: invokespecial #24
111: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testCigTab
Start line: 236
End line: 248
Method source code: 
    public void testCigTab() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.3);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new CigTab(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 5e-5, 100000, expected);
        doTest(new CigTab(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 5e-5, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #6
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #65
41: dup
42: invokespecial #66
45: aload_1
46: aload_2
47: aload_3
48: getstatic     #17
51: getstatic     #18
54: iconst_1
55: iconst_0
56: ldc2_w        #19
59: ldc2_w        #19
62: ldc2_w        #67
65: ldc           #23
67: aload         4
69: invokespecial #24
72: aload_0
73: new           #65
76: dup
77: invokespecial #66
80: aload_1
81: aload_2
82: aload_3
83: getstatic     #17
86: getstatic     #18
89: iconst_0
90: iconst_0
91: ldc2_w        #19
94: ldc2_w        #19
97: ldc2_w        #67
100: ldc           #23
102: aload         4
104: invokespecial #24
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testSphere
Start line: 251
End line: 263
Method source code: 
    public void testSphere() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Sphere(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Sphere(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #69
41: dup
42: aconst_null
43: invokespecial #70
46: aload_1
47: aload_2
48: aload_3
49: getstatic     #17
52: getstatic     #18
55: iconst_1
56: iconst_0
57: ldc2_w        #19
60: ldc2_w        #19
63: ldc2_w        #21
66: ldc           #23
68: aload         4
70: invokespecial #24
73: aload_0
74: new           #69
77: dup
78: aconst_null
79: invokespecial #70
82: aload_1
83: aload_2
84: aload_3
85: getstatic     #17
88: getstatic     #18
91: iconst_0
92: iconst_0
93: ldc2_w        #19
96: ldc2_w        #19
99: ldc2_w        #21
102: ldc           #23
104: aload         4
106: invokespecial #24
109: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testTablet
Start line: 266
End line: 278
Method source code: 
    public void testTablet() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Tablet(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Tablet(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #71
41: dup
42: invokespecial #72
45: aload_1
46: aload_2
47: aload_3
48: getstatic     #17
51: getstatic     #18
54: iconst_1
55: iconst_0
56: ldc2_w        #19
59: ldc2_w        #19
62: ldc2_w        #21
65: ldc           #23
67: aload         4
69: invokespecial #24
72: aload_0
73: new           #71
76: dup
77: invokespecial #72
80: aload_1
81: aload_2
82: aload_3
83: getstatic     #17
86: getstatic     #18
89: iconst_0
90: iconst_0
91: ldc2_w        #19
94: ldc2_w        #19
97: ldc2_w        #21
100: ldc           #23
102: aload         4
104: invokespecial #24
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testDiffPow
Start line: 281
End line: 293
Method source code: 
    public void testDiffPow() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new DiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, true, 0, 1e-13,
                1e-8, 1e-1, 100000, expected);
        doTest(new DiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, false, 0, 1e-13,
                1e-8, 2e-1, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #73
41: dup
42: aconst_null
43: invokespecial #74
46: aload_1
47: aload_2
48: aload_3
49: getstatic     #17
52: bipush        10
54: iconst_1
55: iconst_0
56: ldc2_w        #19
59: ldc2_w        #61
62: ldc2_w        #34
65: ldc           #23
67: aload         4
69: invokespecial #24
72: aload_0
73: new           #73
76: dup
77: aconst_null
78: invokespecial #74
81: aload_1
82: aload_2
83: aload_3
84: getstatic     #17
87: bipush        10
89: iconst_0
90: iconst_0
91: ldc2_w        #19
94: ldc2_w        #61
97: ldc2_w        #75
100: ldc           #23
102: aload         4
104: invokespecial #24
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testSsDiffPow
Start line: 296
End line: 308
Method source code: 
    public void testSsDiffPow() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new SsDiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, true, 0, 1e-13,
                1e-4, 1e-1, 200000, expected);
        doTest(new SsDiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, false, 0, 1e-13,
                1e-4, 1e-1, 200000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: ldc2_w        #34
12: invokestatic  #5
15: astore_2
16: aconst_null
17: checkcast     #31
20: astore_3
21: new           #13
24: dup
25: bipush        13
27: dconst_0
28: invokestatic  #5
31: dconst_0
32: invokespecial #14
35: astore        4
37: aload_0
38: new           #77
41: dup
42: aconst_null
43: invokespecial #78
46: aload_1
47: aload_2
48: aload_3
49: getstatic     #17
52: bipush        10
54: iconst_1
55: iconst_0
56: ldc2_w        #19
59: ldc2_w        #79
62: ldc2_w        #34
65: ldc           #53
67: aload         4
69: invokespecial #24
72: aload_0
73: new           #77
76: dup
77: aconst_null
78: invokespecial #78
81: aload_1
82: aload_2
83: aload_3
84: getstatic     #17
87: bipush        10
89: iconst_0
90: iconst_0
91: ldc2_w        #19
94: ldc2_w        #79
97: ldc2_w        #34
100: ldc           #53
102: aload         4
104: invokespecial #24
107: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testAckley
Start line: 311
End line: 323
Method source code: 
    public void testAckley() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,1.0);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Ackley(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-9, 1e-5, 100000, expected);
        doTest(new Ackley(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-9, 1e-5, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: dconst_1
3: invokestatic  #5
6: astore_1
7: bipush        13
9: dconst_1
10: invokestatic  #5
13: astore_2
14: aconst_null
15: checkcast     #31
18: astore_3
19: new           #13
22: dup
23: bipush        13
25: dconst_0
26: invokestatic  #5
29: dconst_0
30: invokespecial #14
33: astore        4
35: aload_0
36: new           #81
39: dup
40: invokespecial #82
43: aload_1
44: aload_2
45: aload_3
46: getstatic     #17
49: iconst_2
50: getstatic     #18
53: imul
54: iconst_1
55: iconst_0
56: ldc2_w        #19
59: ldc2_w        #83
62: ldc2_w        #85
65: ldc           #23
67: aload         4
69: invokespecial #24
72: aload_0
73: new           #81
76: dup
77: invokespecial #82
80: aload_1
81: aload_2
82: aload_3
83: getstatic     #17
86: iconst_2
87: getstatic     #18
90: imul
91: iconst_0
92: iconst_0
93: ldc2_w        #19
96: ldc2_w        #83
99: ldc2_w        #85
102: ldc           #23
104: aload         4
106: invokespecial #24
109: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testRastrigin
Start line: 326
End line: 338
Method source code: 
    public void testRastrigin() {
        double[] startPoint = point(DIM,0.1);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Rastrigin(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
        doTest(new Rastrigin(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), false, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #34
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #34
14: invokestatic  #5
17: astore_2
18: aconst_null
19: checkcast     #31
22: astore_3
23: new           #13
26: dup
27: bipush        13
29: dconst_0
30: invokestatic  #5
33: dconst_0
34: invokespecial #14
37: astore        4
39: aload_0
40: new           #87
43: dup
44: invokespecial #88
47: aload_1
48: aload_2
49: aload_3
50: getstatic     #17
53: ldc2_w        #89
56: ldc2_w        #91
59: invokestatic  #93
62: dmul
63: d2i
64: iconst_1
65: iconst_0
66: ldc2_w        #19
69: ldc2_w        #19
72: ldc2_w        #21
75: ldc           #53
77: aload         4
79: invokespecial #24
82: aload_0
83: new           #87
86: dup
87: invokespecial #88
90: aload_1
91: aload_2
92: aload_3
93: getstatic     #17
96: ldc2_w        #89
99: ldc2_w        #91
102: invokestatic  #93
105: dmul
106: d2i
107: iconst_0
108: iconst_0
109: ldc2_w        #19
112: ldc2_w        #19
115: ldc2_w        #21
118: ldc           #53
120: aload         4
122: invokespecial #24
125: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testConstrainedRosen
Start line: 341
End line: 353
Method source code: 
    public void testConstrainedRosen() {
        double[] startPoint = point(DIM, 0.1);
        double[] insigma = point(DIM, 0.1);
        double[][] boundaries = boundaries(DIM, -1, 2);
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);
    }
Method byte code: 
0: bipush        13
2: ldc2_w        #34
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #34
14: invokestatic  #5
17: astore_2
18: bipush        13
20: ldc2_w        #8
23: ldc2_w        #10
26: invokestatic  #12
29: astore_3
30: new           #13
33: dup
34: bipush        13
36: dconst_1
37: invokestatic  #5
40: dconst_0
41: invokespecial #14
44: astore        4
46: aload_0
47: new           #15
50: dup
51: aconst_null
52: invokespecial #16
55: aload_1
56: aload_2
57: aload_3
58: getstatic     #17
61: iconst_2
62: getstatic     #18
65: imul
66: iconst_1
67: iconst_0
68: ldc2_w        #19
71: ldc2_w        #19
74: ldc2_w        #21
77: ldc           #23
79: aload         4
81: invokespecial #24
84: aload_0
85: new           #15
88: dup
89: aconst_null
90: invokespecial #16
93: aload_1
94: aload_2
95: aload_3
96: getstatic     #17
99: iconst_2
100: getstatic     #18
103: imul
104: iconst_0
105: iconst_0
106: ldc2_w        #19
109: ldc2_w        #19
112: ldc2_w        #21
115: ldc           #23
117: aload         4
119: invokespecial #24
122: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testDiagonalRosen
Start line: 356
End line: 365
Method source code: 
    public void testDiagonalRosen() {
        double[] startPoint = point(DIM,0.1);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 1, 1e-13,
                1e-10, 1e-4, 1000000, expected);
     }
Method byte code: 
0: bipush        13
2: ldc2_w        #34
5: invokestatic  #5
8: astore_1
9: bipush        13
11: ldc2_w        #34
14: invokestatic  #5
17: astore_2
18: aconst_null
19: checkcast     #31
22: astore_3
23: new           #13
26: dup
27: bipush        13
29: dconst_1
30: invokestatic  #5
33: dconst_0
34: invokespecial #14
37: astore        4
39: aload_0
40: new           #15
43: dup
44: aconst_null
45: invokespecial #16
48: aload_1
49: aload_2
50: aload_3
51: getstatic     #17
54: getstatic     #18
57: iconst_0
58: iconst_1
59: ldc2_w        #19
62: ldc2_w        #94
65: ldc2_w        #79
68: ldc           #96
70: aload         4
72: invokespecial #24
75: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testMath864
Start line: 368
End line: 393
Method source code: 
    public void testMath864() {
        final CMAESOptimizer optimizer
            = new CMAESOptimizer(30000, 0, true, 10,
                                 0, new MersenneTwister(), false, null);
        final MultivariateFunction fitnessFunction = new MultivariateFunction() {
                public double value(double[] parameters) {
                    final double target = 1;
                    final double error = target - parameters[0];
                    return error * error;
                }
            };

        final double[] start = { 0 };
        final double[] lower = { -1e6 };
        final double[] upper = { 1.5 };
        final double[] sigma = { 1e-1 };
        final double[] result = optimizer.optimize(new MaxEval(10000),
                                                   new ObjectiveFunction(fitnessFunction),
                                                   GoalType.MINIMIZE,
                                                   new CMAESOptimizer.PopulationSize(5),
                                                   new CMAESOptimizer.Sigma(sigma),
                                                   new InitialGuess(start),
                                                   new SimpleBounds(lower, upper)).getPoint();
        Assert.assertTrue("Out of bounds (" + result[0] + " > " + upper[0] + ")",
                          result[0] <= upper[0]);
    }
Method byte code: 
0: new           #97
3: dup
4: sipush        30000
7: dconst_0
8: iconst_1
9: bipush        10
11: iconst_0
12: new           #98
15: dup
16: invokespecial #99
19: iconst_0
20: aconst_null
21: invokespecial #100
24: astore_1
25: new           #101
28: dup
29: aload_0
30: invokespecial #102
33: astore_2
34: iconst_1
35: newarray       double
37: dup
38: iconst_0
39: dconst_0
40: dastore
41: astore_3
42: iconst_1
43: newarray       double
45: dup
46: iconst_0
47: ldc2_w        #103
50: dastore
51: astore        4
53: iconst_1
54: newarray       double
56: dup
57: iconst_0
58: ldc2_w        #105
61: dastore
62: astore        5
64: iconst_1
65: newarray       double
67: dup
68: iconst_0
69: ldc2_w        #34
72: dastore
73: astore        6
75: aload_1
76: bipush        7
78: anewarray     #107
81: dup
82: iconst_0
83: new           #108
86: dup
87: sipush        10000
90: invokespecial #109
93: aastore
94: dup
95: iconst_1
96: new           #110
99: dup
100: aload_2
101: invokespecial #111
104: aastore
105: dup
106: iconst_2
107: getstatic     #17
110: aastore
111: dup
112: iconst_3
113: new           #112
116: dup
117: iconst_5
118: invokespecial #113
121: aastore
122: dup
123: iconst_4
124: new           #114
127: dup
128: aload         6
130: invokespecial #115
133: aastore
134: dup
135: iconst_5
136: new           #116
139: dup
140: aload_3
141: invokespecial #117
144: aastore
145: dup
146: bipush        6
148: new           #118
151: dup
152: aload         4
154: aload         5
156: invokespecial #119
159: aastore
160: invokevirtual #120
163: invokevirtual #121
166: astore        7
168: new           #122
171: dup
172: invokespecial #123
175: ldc           #124
177: invokevirtual #125
180: aload         7
182: iconst_0
183: daload
184: invokevirtual #126
187: ldc           #127
189: invokevirtual #125
192: aload         5
194: iconst_0
195: daload
196: invokevirtual #126
199: ldc           #128
201: invokevirtual #125
204: invokevirtual #129
207: aload         7
209: iconst_0
210: daload
211: aload         5
213: iconst_0
214: daload
215: dcmpg
216: ifgt          223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #130
227: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.class
Class name: CMAESOptimizerTest
Method name: testFitAccuracyDependsOnBoundary
Start line: 399
End line: 456
Method source code: 
    public void testFitAccuracyDependsOnBoundary() {
        final CMAESOptimizer optimizer
            = new CMAESOptimizer(30000, 0, true, 10,
                                 0, new MersenneTwister(), false, null);
        final MultivariateFunction fitnessFunction = new MultivariateFunction() {
                public double value(double[] parameters) {
                    final double target = 11.1;
                    final double error = target - parameters[0];
                    return error * error;
                }
            };

        final double[] start = { 1 };
 
        // No bounds.
        PointValuePair result = optimizer.optimize(new MaxEval(100000),
                                                   new ObjectiveFunction(fitnessFunction),
                                                   GoalType.MINIMIZE,
                                                   SimpleBounds.unbounded(1),
                                                   new CMAESOptimizer.PopulationSize(5),
                                                   new CMAESOptimizer.Sigma(new double[] { 1e-1 }),
                                                   new InitialGuess(start));
        final double resNoBound = result.getPoint()[0];

        // Optimum is near the lower bound.
        final double[] lower = { -20 };
        final double[] upper = { 5e16 };
        final double[] sigma = { 10 };
        result = optimizer.optimize(new MaxEval(100000),
                                    new ObjectiveFunction(fitnessFunction),
                                    GoalType.MINIMIZE,
                                    new CMAESOptimizer.PopulationSize(5),
                                    new CMAESOptimizer.Sigma(sigma),
                                    new InitialGuess(start),
                                    new SimpleBounds(lower, upper));
        final double resNearLo = result.getPoint()[0];

        // Optimum is near the upper bound.
        lower[0] = -5e16;
        upper[0] = 20;
        result = optimizer.optimize(new MaxEval(100000),
                                    new ObjectiveFunction(fitnessFunction),
                                    GoalType.MINIMIZE,
                                    new CMAESOptimizer.PopulationSize(5),
                                    new CMAESOptimizer.Sigma(sigma),
                                    new InitialGuess(start),
                                    new SimpleBounds(lower, upper));
        final double resNearHi = result.getPoint()[0];

        // System.out.println("resNoBound=" + resNoBound +
        //                    " resNearLo=" + resNearLo +
        //                    " resNearHi=" + resNearHi);

        // The two values currently differ by a substantial amount, indicating that
        // the bounds definition can prevent reaching the optimum.
        Assert.assertEquals(resNoBound, resNearLo, 1e-3);
        Assert.assertEquals(resNoBound, resNearHi, 1e-3);
    }
Method byte code: 
0: new           #97
3: dup
4: sipush        30000
7: dconst_0
8: iconst_1
9: bipush        10
11: iconst_0
12: new           #98
15: dup
16: invokespecial #99
19: iconst_0
20: aconst_null
21: invokespecial #100
24: astore_1
25: new           #131
28: dup
29: aload_0
30: invokespecial #132
33: astore_2
34: iconst_1
35: newarray       double
37: dup
38: iconst_0
39: dconst_1
40: dastore
41: astore_3
42: aload_1
43: bipush        7
45: anewarray     #107
48: dup
49: iconst_0
50: new           #108
53: dup
54: ldc           #23
56: invokespecial #109
59: aastore
60: dup
61: iconst_1
62: new           #110
65: dup
66: aload_2
67: invokespecial #111
70: aastore
71: dup
72: iconst_2
73: getstatic     #17
76: aastore
77: dup
78: iconst_3
79: iconst_1
80: invokestatic  #133
83: aastore
84: dup
85: iconst_4
86: new           #112
89: dup
90: iconst_5
91: invokespecial #113
94: aastore
95: dup
96: iconst_5
97: new           #114
100: dup
101: iconst_1
102: newarray       double
104: dup
105: iconst_0
106: ldc2_w        #34
109: dastore
110: invokespecial #115
113: aastore
114: dup
115: bipush        6
117: new           #116
120: dup
121: aload_3
122: invokespecial #117
125: aastore
126: invokevirtual #120
129: astore        4
131: aload         4
133: invokevirtual #121
136: iconst_0
137: daload
138: dstore        5
140: iconst_1
141: newarray       double
143: dup
144: iconst_0
145: ldc2_w        #134
148: dastore
149: astore        7
151: iconst_1
152: newarray       double
154: dup
155: iconst_0
156: ldc2_w        #136
159: dastore
160: astore        8
162: iconst_1
163: newarray       double
165: dup
166: iconst_0
167: ldc2_w        #138
170: dastore
171: astore        9
173: aload_1
174: bipush        7
176: anewarray     #107
179: dup
180: iconst_0
181: new           #108
184: dup
185: ldc           #23
187: invokespecial #109
190: aastore
191: dup
192: iconst_1
193: new           #110
196: dup
197: aload_2
198: invokespecial #111
201: aastore
202: dup
203: iconst_2
204: getstatic     #17
207: aastore
208: dup
209: iconst_3
210: new           #112
213: dup
214: iconst_5
215: invokespecial #113
218: aastore
219: dup
220: iconst_4
221: new           #114
224: dup
225: aload         9
227: invokespecial #115
230: aastore
231: dup
232: iconst_5
233: new           #116
236: dup
237: aload_3
238: invokespecial #117
241: aastore
242: dup
243: bipush        6
245: new           #118
248: dup
249: aload         7
251: aload         8
253: invokespecial #119
256: aastore
257: invokevirtual #120
260: astore        4
262: aload         4
264: invokevirtual #121
267: iconst_0
268: daload
269: dstore        10
271: aload         7
273: iconst_0
274: ldc2_w        #140
277: dastore
278: aload         8
280: iconst_0
281: ldc2_w        #142
284: dastore
285: aload_1
286: bipush        7
288: anewarray     #107
291: dup
292: iconst_0
293: new           #108
296: dup
297: ldc           #23
299: invokespecial #109
302: aastore
303: dup
304: iconst_1
305: new           #110
308: dup
309: aload_2
310: invokespecial #111
313: aastore
314: dup
315: iconst_2
316: getstatic     #17
319: aastore
320: dup
321: iconst_3
322: new           #112
325: dup
326: iconst_5
327: invokespecial #113
330: aastore
331: dup
332: iconst_4
333: new           #114
336: dup
337: aload         9
339: invokespecial #115
342: aastore
343: dup
344: iconst_5
345: new           #116
348: dup
349: aload_3
350: invokespecial #117
353: aastore
354: dup
355: bipush        6
357: new           #118
360: dup
361: aload         7
363: aload         8
365: invokespecial #119
368: aastore
369: invokevirtual #120
372: astore        4
374: aload         4
376: invokevirtual #121
379: iconst_0
380: daload
381: dstore        12
383: dload         5
385: dload         10
387: ldc2_w        #63
390: invokestatic  #144
393: dload         5
395: dload         12
397: ldc2_w        #63
400: invokestatic  #144
403: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.class
Class name: SimplexOptimizerMultiDirectionalTest
Method name: testBoundsUnsupported
Start line: 34
End line: 45
Method source code: 
    public void testBoundsUnsupported() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        optimizer.optimize(new MaxEval(100),
                           new ObjectiveFunction(fourExtrema),
                           GoalType.MINIMIZE,
                           new InitialGuess(new double[] { -3, 0 }),
                           new NelderMeadSimplex(new double[] { 0.2, 0.2 }),
                           new SimpleBounds(new double[] { -5, -1 },
                                            new double[] { 5, 1 }));
    }
Method byte code: 
0: new           #3
3: dup
4: ldc2_w        #4
7: ldc2_w        #6
10: invokespecial #8
13: astore_1
14: new           #9
17: dup
18: aconst_null
19: invokespecial #10
22: astore_2
23: aload_1
24: bipush        6
26: anewarray     #11
29: dup
30: iconst_0
31: new           #12
34: dup
35: bipush        100
37: invokespecial #13
40: aastore
41: dup
42: iconst_1
43: new           #14
46: dup
47: aload_2
48: invokespecial #15
51: aastore
52: dup
53: iconst_2
54: getstatic     #16
57: aastore
58: dup
59: iconst_3
60: new           #17
63: dup
64: iconst_2
65: newarray       double
67: dup
68: iconst_0
69: ldc2_w        #18
72: dastore
73: dup
74: iconst_1
75: dconst_0
76: dastore
77: invokespecial #20
80: aastore
81: dup
82: iconst_4
83: new           #21
86: dup
87: iconst_2
88: newarray       double
90: dup
91: iconst_0
92: ldc2_w        #22
95: dastore
96: dup
97: iconst_1
98: ldc2_w        #22
101: dastore
102: invokespecial #24
105: aastore
106: dup
107: iconst_5
108: new           #25
111: dup
112: iconst_2
113: newarray       double
115: dup
116: iconst_0
117: ldc2_w        #26
120: dastore
121: dup
122: iconst_1
123: ldc2_w        #28
126: dastore
127: iconst_2
128: newarray       double
130: dup
131: iconst_0
132: ldc2_w        #30
135: dastore
136: dup
137: iconst_1
138: dconst_1
139: dastore
140: invokespecial #32
143: aastore
144: invokevirtual #33
147: pop
148: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.class
Class name: SimplexOptimizerMultiDirectionalTest
Method name: testMinimize1
Start line: 48
End line: 66
Method source code: 
    public void testMinimize1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6);
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);
        Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);
        Assert.assertTrue(optimizer.getEvaluations() > 120);
        Assert.assertTrue(optimizer.getEvaluations() < 150);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }
Method byte code: 
0: new           #3
3: dup
4: ldc2_w        #34
7: ldc2_w        #6
10: invokespecial #8
13: astore_1
14: new           #9
17: dup
18: aconst_null
19: invokespecial #10
22: astore_2
23: aload_1
24: iconst_5
25: anewarray     #11
28: dup
29: iconst_0
30: new           #12
33: dup
34: sipush        200
37: invokespecial #13
40: aastore
41: dup
42: iconst_1
43: new           #14
46: dup
47: aload_2
48: invokespecial #15
51: aastore
52: dup
53: iconst_2
54: getstatic     #16
57: aastore
58: dup
59: iconst_3
60: new           #17
63: dup
64: iconst_2
65: newarray       double
67: dup
68: iconst_0
69: ldc2_w        #18
72: dastore
73: dup
74: iconst_1
75: dconst_0
76: dastore
77: invokespecial #20
80: aastore
81: dup
82: iconst_4
83: new           #36
86: dup
87: iconst_2
88: newarray       double
90: dup
91: iconst_0
92: ldc2_w        #22
95: dastore
96: dup
97: iconst_1
98: ldc2_w        #22
101: dastore
102: invokespecial #37
105: aastore
106: invokevirtual #33
109: astore_3
110: aload_2
111: invokevirtual #38
114: pop
115: ldc2_w        #39
118: aload_3
119: invokevirtual #41
122: iconst_0
123: daload
124: ldc2_w        #42
127: invokestatic  #44
130: aload_2
131: invokevirtual #38
134: pop
135: ldc2_w        #45
138: aload_3
139: invokevirtual #41
142: iconst_1
143: daload
144: ldc2_w        #47
147: invokestatic  #44
150: aload_2
151: invokevirtual #38
154: pop
155: ldc2_w        #49
158: aload_3
159: invokevirtual #51
162: checkcast     #52
165: invokevirtual #53
168: ldc2_w        #54
171: invokestatic  #44
174: aload_1
175: invokevirtual #56
178: bipush        120
180: if_icmple     187
183: iconst_1
184: goto          188
187: iconst_0
188: invokestatic  #57
191: aload_1
192: invokevirtual #56
195: sipush        150
198: if_icmpge     205
201: iconst_1
202: goto          206
205: iconst_0
206: invokestatic  #57
209: aload_1
210: invokevirtual #58
213: ifle          220
216: iconst_1
217: goto          221
220: iconst_0
221: invokestatic  #57
224: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.class
Class name: SimplexOptimizerMultiDirectionalTest
Method name: testMinimize2
Start line: 69
End line: 87
Method source code: 
    public void testMinimize2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);
        Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);
        Assert.assertTrue(optimizer.getEvaluations() > 120);
        Assert.assertTrue(optimizer.getEvaluations() < 150);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }
Method byte code: 
0: new           #3
3: dup
4: ldc2_w        #34
7: ldc2_w        #6
10: invokespecial #8
13: astore_1
14: new           #9
17: dup
18: aconst_null
19: invokespecial #10
22: astore_2
23: aload_1
24: iconst_5
25: anewarray     #11
28: dup
29: iconst_0
30: new           #12
33: dup
34: sipush        200
37: invokespecial #13
40: aastore
41: dup
42: iconst_1
43: new           #14
46: dup
47: aload_2
48: invokespecial #15
51: aastore
52: dup
53: iconst_2
54: getstatic     #16
57: aastore
58: dup
59: iconst_3
60: new           #17
63: dup
64: iconst_2
65: newarray       double
67: dup
68: iconst_0
69: dconst_1
70: dastore
71: dup
72: iconst_1
73: dconst_0
74: dastore
75: invokespecial #20
78: aastore
79: dup
80: iconst_4
81: new           #36
84: dup
85: iconst_2
86: newarray       double
88: dup
89: iconst_0
90: ldc2_w        #22
93: dastore
94: dup
95: iconst_1
96: ldc2_w        #22
99: dastore
100: invokespecial #37
103: aastore
104: invokevirtual #33
107: astore_3
108: aload_2
109: invokevirtual #38
112: pop
113: ldc2_w        #59
116: aload_3
117: invokevirtual #41
120: iconst_0
121: daload
122: ldc2_w        #61
125: invokestatic  #44
128: aload_2
129: invokevirtual #38
132: pop
133: ldc2_w        #63
136: aload_3
137: invokevirtual #41
140: iconst_1
141: daload
142: ldc2_w        #47
145: invokestatic  #44
148: aload_2
149: invokevirtual #38
152: pop
153: ldc2_w        #65
156: aload_3
157: invokevirtual #51
160: checkcast     #52
163: invokevirtual #53
166: ldc2_w        #67
169: invokestatic  #44
172: aload_1
173: invokevirtual #56
176: bipush        120
178: if_icmple     185
181: iconst_1
182: goto          186
185: iconst_0
186: invokestatic  #57
189: aload_1
190: invokevirtual #56
193: sipush        150
196: if_icmpge     203
199: iconst_1
200: goto          204
203: iconst_0
204: invokestatic  #57
207: aload_1
208: invokevirtual #58
211: ifle          218
214: iconst_1
215: goto          219
218: iconst_0
219: invokestatic  #57
222: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.class
Class name: SimplexOptimizerMultiDirectionalTest
Method name: testMaximize1
Start line: 90
End line: 108
Method source code: 
    public void testMaximize1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3.0, 0.0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7);
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7);
        Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);
        Assert.assertTrue(optimizer.getEvaluations() > 120);
        Assert.assertTrue(optimizer.getEvaluations() < 150);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }
Method byte code: 
0: new           #3
3: dup
4: ldc2_w        #34
7: ldc2_w        #6
10: invokespecial #8
13: astore_1
14: new           #9
17: dup
18: aconst_null
19: invokespecial #10
22: astore_2
23: aload_1
24: iconst_5
25: anewarray     #11
28: dup
29: iconst_0
30: new           #12
33: dup
34: sipush        200
37: invokespecial #13
40: aastore
41: dup
42: iconst_1
43: new           #14
46: dup
47: aload_2
48: invokespecial #15
51: aastore
52: dup
53: iconst_2
54: getstatic     #69
57: aastore
58: dup
59: iconst_3
60: new           #17
63: dup
64: iconst_2
65: newarray       double
67: dup
68: iconst_0
69: ldc2_w        #18
72: dastore
73: dup
74: iconst_1
75: dconst_0
76: dastore
77: invokespecial #20
80: aastore
81: dup
82: iconst_4
83: new           #36
86: dup
87: iconst_2
88: newarray       double
90: dup
91: iconst_0
92: ldc2_w        #22
95: dastore
96: dup
97: iconst_1
98: ldc2_w        #22
101: dastore
102: invokespecial #37
105: aastore
106: invokevirtual #33
109: astore_3
110: aload_2
111: invokevirtual #38
114: pop
115: ldc2_w        #39
118: aload_3
119: invokevirtual #41
122: iconst_0
123: daload
124: ldc2_w        #70
127: invokestatic  #44
130: aload_2
131: invokevirtual #38
134: pop
135: ldc2_w        #63
138: aload_3
139: invokevirtual #41
142: iconst_1
143: daload
144: ldc2_w        #72
147: invokestatic  #44
150: aload_2
151: invokevirtual #38
154: pop
155: ldc2_w        #74
158: aload_3
159: invokevirtual #51
162: checkcast     #52
165: invokevirtual #53
168: ldc2_w        #76
171: invokestatic  #44
174: aload_1
175: invokevirtual #56
178: bipush        120
180: if_icmple     187
183: iconst_1
184: goto          188
187: iconst_0
188: invokestatic  #57
191: aload_1
192: invokevirtual #56
195: sipush        150
198: if_icmpge     205
201: iconst_1
202: goto          206
205: iconst_0
206: invokestatic  #57
209: aload_1
210: invokevirtual #58
213: ifle          220
216: iconst_1
217: goto          221
220: iconst_0
221: invokestatic  #57
224: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.class
Class name: SimplexOptimizerMultiDirectionalTest
Method name: testMaximize2
Start line: 111
End line: 129
Method source code: 
    public void testMaximize2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);
        Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12);
        Assert.assertTrue(optimizer.getEvaluations() > 180);
        Assert.assertTrue(optimizer.getEvaluations() < 220);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }
Method byte code: 
0: new           #3
3: dup
4: new           #78
7: dup
8: ldc2_w        #79
11: ldc2_w        #6
14: invokespecial #81
17: invokespecial #82
20: astore_1
21: new           #9
24: dup
25: aconst_null
26: invokespecial #10
29: astore_2
30: aload_1
31: iconst_5
32: anewarray     #11
35: dup
36: iconst_0
37: new           #12
40: dup
41: sipush        200
44: invokespecial #13
47: aastore
48: dup
49: iconst_1
50: new           #14
53: dup
54: aload_2
55: invokespecial #15
58: aastore
59: dup
60: iconst_2
61: getstatic     #69
64: aastore
65: dup
66: iconst_3
67: new           #17
70: dup
71: iconst_2
72: newarray       double
74: dup
75: iconst_0
76: dconst_1
77: dastore
78: dup
79: iconst_1
80: dconst_0
81: dastore
82: invokespecial #20
85: aastore
86: dup
87: iconst_4
88: new           #36
91: dup
92: iconst_2
93: newarray       double
95: dup
96: iconst_0
97: ldc2_w        #22
100: dastore
101: dup
102: iconst_1
103: ldc2_w        #22
106: dastore
107: invokespecial #37
110: aastore
111: invokevirtual #33
114: astore_3
115: aload_2
116: invokevirtual #38
119: pop
120: ldc2_w        #59
123: aload_3
124: invokevirtual #41
127: iconst_0
128: daload
129: ldc2_w        #61
132: invokestatic  #44
135: aload_2
136: invokevirtual #38
139: pop
140: ldc2_w        #45
143: aload_3
144: invokevirtual #41
147: iconst_1
148: daload
149: ldc2_w        #47
152: invokestatic  #44
155: aload_2
156: invokevirtual #38
159: pop
160: ldc2_w        #83
163: aload_3
164: invokevirtual #51
167: checkcast     #52
170: invokevirtual #53
173: ldc2_w        #67
176: invokestatic  #44
179: aload_1
180: invokevirtual #56
183: sipush        180
186: if_icmple     193
189: iconst_1
190: goto          194
193: iconst_0
194: invokestatic  #57
197: aload_1
198: invokevirtual #56
201: sipush        220
204: if_icmpge     211
207: iconst_1
208: goto          212
211: iconst_0
212: invokestatic  #57
215: aload_1
216: invokevirtual #58
219: ifle          226
222: iconst_1
223: goto          227
226: iconst_0
227: invokestatic  #57
230: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.class
Class name: SimplexOptimizerMultiDirectionalTest
Method name: testRosenbrock
Start line: 132
End line: 159
Method source code: 
    public void testRosenbrock() {
        MultivariateFunction rosenbrock
            = new MultivariateFunction() {
                    public double value(double[] x) {
                        ++count;
                        double a = x[1] - x[0] * x[0];
                        double b = 1.0 - x[0];
                        return 100 * a * a + b * b;
                    }
                };

        count = 0;
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);
        PointValuePair optimum
           = optimizer.optimize(new MaxEval(100),
                                new ObjectiveFunction(rosenbrock),
                                GoalType.MINIMIZE,
                                new InitialGuess(new double[] { -1.2, 1 }),
                                new MultiDirectionalSimplex(new double[][] {
                                        { -1.2,  1.0 },
                                        { 0.9, 1.2 },
                                        {  3.5, -2.3 } }));

        Assert.assertEquals(count, optimizer.getEvaluations());
        Assert.assertTrue(optimizer.getEvaluations() > 50);
        Assert.assertTrue(optimizer.getEvaluations() < 100);
        Assert.assertTrue(optimum.getValue() > 1e-2);
    }
Method byte code: 
0: new           #85
3: dup
4: aload_0
5: invokespecial #86
8: astore_1
9: aload_0
10: iconst_0
11: putfield      #1
14: new           #3
17: dup
18: ldc2_w        #28
21: ldc2_w        #87
24: invokespecial #8
27: astore_2
28: aload_2
29: iconst_5
30: anewarray     #11
33: dup
34: iconst_0
35: new           #12
38: dup
39: bipush        100
41: invokespecial #13
44: aastore
45: dup
46: iconst_1
47: new           #14
50: dup
51: aload_1
52: invokespecial #15
55: aastore
56: dup
57: iconst_2
58: getstatic     #16
61: aastore
62: dup
63: iconst_3
64: new           #17
67: dup
68: iconst_2
69: newarray       double
71: dup
72: iconst_0
73: ldc2_w        #89
76: dastore
77: dup
78: iconst_1
79: dconst_1
80: dastore
81: invokespecial #20
84: aastore
85: dup
86: iconst_4
87: new           #36
90: dup
91: iconst_3
92: anewarray     #91
95: dup
96: iconst_0
97: iconst_2
98: newarray       double
100: dup
101: iconst_0
102: ldc2_w        #89
105: dastore
106: dup
107: iconst_1
108: dconst_1
109: dastore
110: aastore
111: dup
112: iconst_1
113: iconst_2
114: newarray       double
116: dup
117: iconst_0
118: ldc2_w        #92
121: dastore
122: dup
123: iconst_1
124: ldc2_w        #94
127: dastore
128: aastore
129: dup
130: iconst_2
131: iconst_2
132: newarray       double
134: dup
135: iconst_0
136: ldc2_w        #96
139: dastore
140: dup
141: iconst_1
142: ldc2_w        #98
145: dastore
146: aastore
147: invokespecial #100
150: aastore
151: invokevirtual #33
154: astore_3
155: aload_0
156: getfield      #1
159: i2l
160: aload_2
161: invokevirtual #56
164: i2l
165: invokestatic  #101
168: aload_2
169: invokevirtual #56
172: bipush        50
174: if_icmple     181
177: iconst_1
178: goto          182
181: iconst_0
182: invokestatic  #57
185: aload_2
186: invokevirtual #56
189: bipush        100
191: if_icmpge     198
194: iconst_1
195: goto          199
198: iconst_0
199: invokestatic  #57
202: aload_3
203: invokevirtual #51
206: checkcast     #52
209: invokevirtual #53
212: ldc2_w        #102
215: dcmpl
216: ifle          223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #57
227: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.class
Class name: SimplexOptimizerMultiDirectionalTest
Method name: testPowell
Start line: 162
End line: 187
Method source code: 
    public void testPowell() {
        MultivariateFunction powell
            = new MultivariateFunction() {
                    public double value(double[] x) {
                        ++count;
                        double a = x[0] + 10 * x[1];
                        double b = x[2] - x[3];
                        double c = x[1] - 2 * x[2];
                        double d = x[0] - x[3];
                        return a * a + 5 * b * b + c * c * c * c + 10 * d * d * d * d;
                    }
                };

        count = 0;
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(1000),
                                 new ObjectiveFunction(powell),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 3, -1, 0, 1 }),
                                 new MultiDirectionalSimplex(4));
        Assert.assertEquals(count, optimizer.getEvaluations());
        Assert.assertTrue(optimizer.getEvaluations() > 800);
        Assert.assertTrue(optimizer.getEvaluations() < 900);
        Assert.assertTrue(optimum.getValue() > 1e-2);
    }
Method byte code: 
0: new           #104
3: dup
4: aload_0
5: invokespecial #105
8: astore_1
9: aload_0
10: iconst_0
11: putfield      #1
14: new           #3
17: dup
18: ldc2_w        #28
21: ldc2_w        #87
24: invokespecial #8
27: astore_2
28: aload_2
29: iconst_5
30: anewarray     #11
33: dup
34: iconst_0
35: new           #12
38: dup
39: sipush        1000
42: invokespecial #13
45: aastore
46: dup
47: iconst_1
48: new           #14
51: dup
52: aload_1
53: invokespecial #15
56: aastore
57: dup
58: iconst_2
59: getstatic     #16
62: aastore
63: dup
64: iconst_3
65: new           #17
68: dup
69: iconst_4
70: newarray       double
72: dup
73: iconst_0
74: ldc2_w        #106
77: dastore
78: dup
79: iconst_1
80: ldc2_w        #28
83: dastore
84: dup
85: iconst_2
86: dconst_0
87: dastore
88: dup
89: iconst_3
90: dconst_1
91: dastore
92: invokespecial #20
95: aastore
96: dup
97: iconst_4
98: new           #36
101: dup
102: iconst_4
103: invokespecial #108
106: aastore
107: invokevirtual #33
110: astore_3
111: aload_0
112: getfield      #1
115: i2l
116: aload_2
117: invokevirtual #56
120: i2l
121: invokestatic  #101
124: aload_2
125: invokevirtual #56
128: sipush        800
131: if_icmple     138
134: iconst_1
135: goto          139
138: iconst_0
139: invokestatic  #57
142: aload_2
143: invokevirtual #56
146: sipush        900
149: if_icmpge     156
152: iconst_1
153: goto          157
156: iconst_0
157: invokestatic  #57
160: aload_3
161: invokevirtual #51
164: checkcast     #52
167: invokevirtual #53
170: ldc2_w        #102
173: dcmpl
174: ifle          181
177: iconst_1
178: goto          182
181: iconst_0
182: invokestatic  #57
185: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.class
Class name: SimplexOptimizerMultiDirectionalTest
Method name: testMath283
Start line: 190
End line: 209
Method source code: 
    public void testMath283() {
        // fails because MultiDirectional.iterateSimplex is looping forever
        // the while(true) should be replaced with a convergence check
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-14, 1e-14);
        final Gaussian2D function = new Gaussian2D(0, 0, 1);
        PointValuePair estimate = optimizer.optimize(new MaxEval(1000),
                                                     new ObjectiveFunction(function),
                                                     GoalType.MAXIMIZE,
                                                     new InitialGuess(function.getMaximumPosition()),
                                                     new MultiDirectionalSimplex(2));
        final double EPSILON = 1e-5;
        final double expectedMaximum = function.getMaximum();
        final double actualMaximum = estimate.getValue();
        Assert.assertEquals(expectedMaximum, actualMaximum, EPSILON);

        final double[] expectedPosition = function.getMaximumPosition();
        final double[] actualPosition = estimate.getPoint();
        Assert.assertEquals(expectedPosition[0], actualPosition[0], EPSILON );
        Assert.assertEquals(expectedPosition[1], actualPosition[1], EPSILON );
    }
Method byte code: 
0: new           #3
3: dup
4: ldc2_w        #109
7: ldc2_w        #109
10: invokespecial #8
13: astore_1
14: new           #111
17: dup
18: dconst_0
19: dconst_0
20: dconst_1
21: invokespecial #112
24: astore_2
25: aload_1
26: iconst_5
27: anewarray     #11
30: dup
31: iconst_0
32: new           #12
35: dup
36: sipush        1000
39: invokespecial #13
42: aastore
43: dup
44: iconst_1
45: new           #14
48: dup
49: aload_2
50: invokespecial #15
53: aastore
54: dup
55: iconst_2
56: getstatic     #69
59: aastore
60: dup
61: iconst_3
62: new           #17
65: dup
66: aload_2
67: invokevirtual #113
70: invokespecial #20
73: aastore
74: dup
75: iconst_4
76: new           #36
79: dup
80: iconst_2
81: invokespecial #108
84: aastore
85: invokevirtual #33
88: astore_3
89: ldc2_w        #114
92: dstore        4
94: aload_2
95: invokevirtual #116
98: dstore        6
100: aload_3
101: invokevirtual #51
104: checkcast     #52
107: invokevirtual #53
110: dstore        8
112: dload         6
114: dload         8
116: ldc2_w        #114
119: invokestatic  #44
122: aload_2
123: invokevirtual #113
126: astore        10
128: aload_3
129: invokevirtual #41
132: astore        11
134: aload         10
136: iconst_0
137: daload
138: aload         11
140: iconst_0
141: daload
142: ldc2_w        #114
145: invokestatic  #44
148: aload         10
150: iconst_1
151: daload
152: aload         11
154: iconst_1
155: daload
156: ldc2_w        #114
159: invokestatic  #44
162: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer_ESTest.class
Class name: SimplexOptimizer_ESTest
Method name: test0
Start line: 24
End line: 38
Method source code: 
  public void test0()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-342.45320841143075), (-342.45320841143075));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[6];
      // Undeclared exception!
      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #3
7: ldc2_w        #3
10: invokespecial #5
13: astore_1
14: bipush        6
16: anewarray     #6
19: astore_2
20: aload_1
21: aload_2
22: invokevirtual #7
25: pop
26: ldc           #8
28: invokestatic  #9
31: goto          41
34: astore_3
35: ldc           #11
37: aload_3
38: invokestatic  #12
41: return
Exception table:
from    to  target type
20    31    34   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer_ESTest.class
Class name: SimplexOptimizer_ESTest
Method name: test1
Start line: 41
End line: 68
Method source code: 
  public void test1()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-341.1957067422073), (-341.1957067422073));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[2];
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-341.1957067422073);
      doubleArray0[1] = (-341.1957067422073);
      doubleArray0[2] = (-341.1957067422073);
      doubleArray0[3] = (-341.1957067422073);
      doubleArray0[4] = (-341.1957067422073);
      doubleArray0[5] = (-341.1957067422073);
      doubleArray0[6] = 119.54710706011866;
      doubleArray0[7] = (-341.1957067422073);
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(doubleArray0, (-341.1957067422073), 3338.87393, 5044.948848206, 7.64416021682279E-9);
      optimizationDataArray0[0] = (OptimizationData) nelderMeadSimplex0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #13
7: ldc2_w        #13
10: invokespecial #5
13: astore_1
14: iconst_2
15: anewarray     #6
18: astore_2
19: bipush        8
21: newarray       double
23: astore_3
24: aload_3
25: iconst_0
26: ldc2_w        #13
29: dastore
30: aload_3
31: iconst_1
32: ldc2_w        #13
35: dastore
36: aload_3
37: iconst_2
38: ldc2_w        #13
41: dastore
42: aload_3
43: iconst_3
44: ldc2_w        #13
47: dastore
48: aload_3
49: iconst_4
50: ldc2_w        #13
53: dastore
54: aload_3
55: iconst_5
56: ldc2_w        #13
59: dastore
60: aload_3
61: bipush        6
63: ldc2_w        #15
66: dastore
67: aload_3
68: bipush        7
70: ldc2_w        #13
73: dastore
74: new           #17
77: dup
78: aload_3
79: ldc2_w        #13
82: ldc2_w        #18
85: ldc2_w        #20
88: ldc2_w        #22
91: invokespecial #24
94: astore        4
96: aload_2
97: iconst_0
98: aload         4
100: aastore
101: new           #25
104: dup
105: aload_3
106: invokespecial #26
109: astore        5
111: aload_2
112: iconst_1
113: aload         5
115: aastore
116: aload_1
117: aload_2
118: invokevirtual #7
121: pop
122: ldc           #27
124: invokestatic  #9
127: goto          139
130: astore        6
132: ldc           #29
134: aload         6
136: invokestatic  #12
139: return
Exception table:
from    to  target type
116   127   130   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer_ESTest.class
Class name: SimplexOptimizer_ESTest
Method name: test2
Start line: 71
End line: 90
Method source code: 
  public void test2()  throws Throwable  {
      MultiDirectionalSimplex multiDirectionalSimplex0 = new MultiDirectionalSimplex(8);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(8, 8);
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      optimizationDataArray0[0] = (OptimizationData) multiDirectionalSimplex0;
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(245);
      optimizationDataArray0[1] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: MathUnsupportedOperationException");
      
      } catch(MathUnsupportedOperationException e) {
         //
         // constraint
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
      }
  }
Method byte code: 
0: new           #30
3: dup
4: bipush        8
6: invokespecial #31
9: astore_1
10: new           #32
13: dup
14: ldc2_w        #33
17: ldc2_w        #33
20: invokespecial #35
23: astore_2
24: new           #2
27: dup
28: aload_2
29: invokespecial #36
32: astore_3
33: iconst_3
34: anewarray     #6
37: astore        4
39: aload         4
41: iconst_0
42: aload_1
43: aastore
44: sipush        245
47: invokestatic  #37
50: astore        5
52: aload         4
54: iconst_1
55: aload         5
57: aastore
58: aload_3
59: aload         4
61: invokevirtual #7
64: pop
65: ldc           #38
67: invokestatic  #9
70: goto          82
73: astore        6
75: ldc           #11
77: aload         6
79: invokestatic  #12
82: return
Exception table:
from    to  target type
58    70    73   Class org/apache/commons/math3/exception/MathUnsupportedOperationException
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer_ESTest.class
Class name: PowellOptimizer_ESTest
Method name: test0
Start line: 21
End line: 37
Method source code: 
  public void test0()  throws Throwable  {
      PowellOptimizer powellOptimizer0 = new PowellOptimizer(2722.51, 2722.51, 2722.51, 2722.51);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[1];
      double[] doubleArray0 = new double[2];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      try { 
        powellOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #3
7: ldc2_w        #3
10: ldc2_w        #3
13: ldc2_w        #3
16: invokespecial #5
19: astore_1
20: iconst_1
21: anewarray     #6
24: astore_2
25: iconst_2
26: newarray       double
28: astore_3
29: new           #7
32: dup
33: aload_3
34: invokespecial #8
37: astore        4
39: aload_2
40: iconst_0
41: aload         4
43: aastore
44: aload_1
45: aload_2
46: invokevirtual #9
49: pop
50: ldc           #10
52: invokestatic  #11
55: goto          67
58: astore        5
60: ldc           #13
62: aload         5
64: invokestatic  #14
67: return
Exception table:
from    to  target type
44    55    58   Class java/lang/IllegalStateException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer_ESTest.class
Class name: PowellOptimizer_ESTest
Method name: test1
Start line: 40
End line: 56
Method source code: 
  public void test1()  throws Throwable  {
      PowellOptimizer powellOptimizer0 = new PowellOptimizer(2722.51, 2722.51);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(1312);
      optimizationDataArray0[0] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
      try { 
        powellOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: MathUnsupportedOperationException");
      
      } catch(MathUnsupportedOperationException e) {
         //
         // constraint
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer", e);
      }
  }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #3
7: ldc2_w        #3
10: invokespecial #15
13: astore_1
14: iconst_3
15: anewarray     #6
18: astore_2
19: sipush        1312
22: invokestatic  #16
25: astore_3
26: aload_2
27: iconst_0
28: aload_3
29: aastore
30: aload_1
31: aload_2
32: invokevirtual #9
35: pop
36: ldc           #17
38: invokestatic  #11
41: goto          53
44: astore        4
46: ldc           #19
48: aload         4
50: invokestatic  #14
53: return
Exception table:
from    to  target type
30    41    44   Class org/apache/commons/math3/exception/MathUnsupportedOperationException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer_ESTest.class
Class name: PowellOptimizer_ESTest
Method name: test2
Start line: 59
End line: 71
Method source code: 
  public void test2()  throws Throwable  {
      PowellOptimizer powellOptimizer0 = null;
      try {
        powellOptimizer0 = new PowellOptimizer((-0.2499999997677497), (-0.2499999997677497), (-0.2499999997677497), (-0.2499999997677497));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0.25 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer", e);
      }
  }
Method byte code: 
0: aconst_null
1: astore_1
2: new           #2
5: dup
6: ldc2_w        #20
9: ldc2_w        #20
12: ldc2_w        #20
15: ldc2_w        #20
18: invokespecial #5
21: astore_1
22: ldc           #22
24: invokestatic  #11
27: goto          37
30: astore_2
31: ldc           #19
33: aload_2
34: invokestatic  #14
37: return
Exception table:
from    to  target type
2    27    30   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer_ESTest.class
Class name: PowellOptimizer_ESTest
Method name: test3
Start line: 74
End line: 86
Method source code: 
  public void test3()  throws Throwable  {
      PowellOptimizer powellOptimizer0 = null;
      try {
        powellOptimizer0 = new PowellOptimizer(1979.27610964517, (-1002.55), (-1002.55), 1979.27610964517);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,002.55 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer", e);
      }
  }
Method byte code: 
0: aconst_null
1: astore_1
2: new           #2
5: dup
6: ldc2_w        #24
9: ldc2_w        #26
12: ldc2_w        #26
15: ldc2_w        #24
18: invokespecial #5
21: astore_1
22: ldc           #22
24: invokestatic  #11
27: goto          37
30: astore_2
31: ldc           #19
33: aload_2
34: invokestatic  #14
37: return
Exception table:
from    to  target type
2    27    30   Class java/lang/IllegalArgumentException
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.class
Class name: PowellOptimizerTest
Method name: testBoundsUnsupported
Start line: 36
End line: 47
Method source code: 
    public void testBoundsUnsupported() {
        final MultivariateFunction func = new SumSincFunction(-1);
        final PowellOptimizer optim = new PowellOptimizer(1e-8, 1e-5,
                                                          1e-4, 1e-4);

        optim.optimize(new MaxEval(100),
                       new ObjectiveFunction(func),
                       GoalType.MINIMIZE,
                       new InitialGuess(new double[] { -3, 0 }),
                       new SimpleBounds(new double[] { -5, -1 },
                                        new double[] { 5, 1 }));
    }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #3
7: invokespecial #5
10: astore_1
11: new           #6
14: dup
15: ldc2_w        #7
18: ldc2_w        #9
21: ldc2_w        #11
24: ldc2_w        #11
27: invokespecial #13
30: astore_2
31: aload_2
32: iconst_5
33: anewarray     #14
36: dup
37: iconst_0
38: new           #15
41: dup
42: bipush        100
44: invokespecial #16
47: aastore
48: dup
49: iconst_1
50: new           #17
53: dup
54: aload_1
55: invokespecial #18
58: aastore
59: dup
60: iconst_2
61: getstatic     #19
64: aastore
65: dup
66: iconst_3
67: new           #20
70: dup
71: iconst_2
72: newarray       double
74: dup
75: iconst_0
76: ldc2_w        #21
79: dastore
80: dup
81: iconst_1
82: dconst_0
83: dastore
84: invokespecial #23
87: aastore
88: dup
89: iconst_4
90: new           #24
93: dup
94: iconst_2
95: newarray       double
97: dup
98: iconst_0
99: ldc2_w        #25
102: dastore
103: dup
104: iconst_1
105: ldc2_w        #3
108: dastore
109: iconst_2
110: newarray       double
112: dup
113: iconst_0
114: ldc2_w        #27
117: dastore
118: dup
119: iconst_1
120: dconst_1
121: dastore
122: invokespecial #29
125: aastore
126: invokevirtual #30
129: pop
130: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.class
Class name: PowellOptimizerTest
Method name: testSumSinc
Start line: 50
End line: 75
Method source code: 
    public void testSumSinc() {
        final MultivariateFunction func = new SumSincFunction(-1);

        int dim = 2;
        final double[] minPoint = new double[dim];
        for (int i = 0; i < dim; i++) {
            minPoint[i] = 0;
        }

        double[] init = new double[dim];

        // Initial is minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i];
        }
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);

        // Initial is far from minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i] + 3;
        }
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);
        // More stringent line search tolerance enhances the precision
        // of the result.
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);
    }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #3
7: invokespecial #5
10: astore_1
11: iconst_2
12: istore_2
13: iload_2
14: newarray       double
16: astore_3
17: iconst_0
18: istore        4
20: iload         4
22: iload_2
23: if_icmpge     37
26: aload_3
27: iload         4
29: dconst_0
30: dastore
31: iinc          4, 1
34: goto          20
37: iload_2
38: newarray       double
40: astore        4
42: iconst_0
43: istore        5
45: iload         5
47: iload_2
48: if_icmpge     66
51: aload         4
53: iload         5
55: aload_3
56: iload         5
58: daload
59: dastore
60: iinc          5, 1
63: goto          45
66: aload_0
67: aload_1
68: aload_3
69: aload         4
71: getstatic     #19
74: ldc2_w        #31
77: ldc2_w        #31
80: invokespecial #33
83: iconst_0
84: istore        5
86: iload         5
88: iload_2
89: if_icmpge     111
92: aload         4
94: iload         5
96: aload_3
97: iload         5
99: daload
100: ldc2_w        #34
103: dadd
104: dastore
105: iinc          5, 1
108: goto          86
111: aload_0
112: aload_1
113: aload_3
114: aload         4
116: getstatic     #19
119: ldc2_w        #31
122: ldc2_w        #9
125: invokespecial #33
128: aload_0
129: aload_1
130: aload_3
131: aload         4
133: getstatic     #19
136: ldc2_w        #31
139: ldc2_w        #31
142: ldc2_w        #36
145: invokespecial #38
148: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.class
Class name: PowellOptimizerTest
Method name: testQuadratic
Start line: 78
End line: 106
Method source code: 
    public void testQuadratic() {
        final MultivariateFunction func = new MultivariateFunction() {
                public double value(double[] x) {
                    final double a = x[0] - 1;
                    final double b = x[1] - 1;
                    return a * a + b * b + 1;
                }
            };

        int dim = 2;
        final double[] minPoint = new double[dim];
        for (int i = 0; i < dim; i++) {
            minPoint[i] = 1;
        }

        double[] init = new double[dim];

        // Initial is minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i];
        }
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-8);

        // Initial is far from minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i] - 20;
        }
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-8);
    }
Method byte code: 
0: new           #39
3: dup
4: aload_0
5: invokespecial #40
8: astore_1
9: iconst_2
10: istore_2
11: iload_2
12: newarray       double
14: astore_3
15: iconst_0
16: istore        4
18: iload         4
20: iload_2
21: if_icmpge     35
24: aload_3
25: iload         4
27: dconst_1
28: dastore
29: iinc          4, 1
32: goto          18
35: iload_2
36: newarray       double
38: astore        4
40: iconst_0
41: istore        5
43: iload         5
45: iload_2
46: if_icmpge     64
49: aload         4
51: iload         5
53: aload_3
54: iload         5
56: daload
57: dastore
58: iinc          5, 1
61: goto          43
64: aload_0
65: aload_1
66: aload_3
67: aload         4
69: getstatic     #19
72: ldc2_w        #31
75: ldc2_w        #7
78: invokespecial #33
81: iconst_0
82: istore        5
84: iload         5
86: iload_2
87: if_icmpge     109
90: aload         4
92: iload         5
94: aload_3
95: iload         5
97: daload
98: ldc2_w        #41
101: dsub
102: dastore
103: iinc          5, 1
106: goto          84
109: aload_0
110: aload_1
111: aload_3
112: aload         4
114: getstatic     #19
117: ldc2_w        #31
120: ldc2_w        #7
123: invokespecial #33
126: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.class
Class name: PowellOptimizerTest
Method name: testMaximizeQuadratic
Start line: 109
End line: 137
Method source code: 
    public void testMaximizeQuadratic() {
        final MultivariateFunction func = new MultivariateFunction() {
                public double value(double[] x) {
                    final double a = x[0] - 1;
                    final double b = x[1] - 1;
                    return -a * a - b * b + 1;
                }
            };

        int dim = 2;
        final double[] maxPoint = new double[dim];
        for (int i = 0; i < dim; i++) {
            maxPoint[i] = 1;
        }

        double[] init = new double[dim];

        // Initial is minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = maxPoint[i];
        }
        doTest(func, maxPoint, init,  GoalType.MAXIMIZE, 1e-9, 1e-8);

        // Initial is far from minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = maxPoint[i] - 20;
        }
        doTest(func, maxPoint, init, GoalType.MAXIMIZE, 1e-9, 1e-8);
    }
Method byte code: 
0: new           #43
3: dup
4: aload_0
5: invokespecial #44
8: astore_1
9: iconst_2
10: istore_2
11: iload_2
12: newarray       double
14: astore_3
15: iconst_0
16: istore        4
18: iload         4
20: iload_2
21: if_icmpge     35
24: aload_3
25: iload         4
27: dconst_1
28: dastore
29: iinc          4, 1
32: goto          18
35: iload_2
36: newarray       double
38: astore        4
40: iconst_0
41: istore        5
43: iload         5
45: iload_2
46: if_icmpge     64
49: aload         4
51: iload         5
53: aload_3
54: iload         5
56: daload
57: dastore
58: iinc          5, 1
61: goto          43
64: aload_0
65: aload_1
66: aload_3
67: aload         4
69: getstatic     #45
72: ldc2_w        #31
75: ldc2_w        #7
78: invokespecial #33
81: iconst_0
82: istore        5
84: iload         5
86: iload_2
87: if_icmpge     109
90: aload         4
92: iload         5
94: aload_3
95: iload         5
97: daload
98: ldc2_w        #41
101: dsub
102: dastore
103: iinc          5, 1
106: goto          84
109: aload_0
110: aload_1
111: aload_3
112: aload         4
114: getstatic     #45
117: ldc2_w        #31
120: ldc2_w        #7
123: invokespecial #33
126: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.class
Class name: PowellOptimizerTest
Method name: testRelativeToleranceOnScaledValues
Start line: 147
End line: 202
Method source code: 
    public void testRelativeToleranceOnScaledValues() {
        final MultivariateFunction func = new MultivariateFunction() {
                public double value(double[] x) {
                    final double a = x[0] - 1;
                    final double b = x[1] - 1;
                    return a * a * FastMath.sqrt(FastMath.abs(a)) + b * b + 1;
                }
            };

        int dim = 2;
        final double[] minPoint = new double[dim];
        for (int i = 0; i < dim; i++) {
            minPoint[i] = 1;
        }

        double[] init = new double[dim];
        // Initial is far from minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i] - 20;
        }

        final double relTol = 1e-10;

        final int maxEval = 1000;
        // Very small absolute tolerance to rely solely on the relative
        // tolerance as a stopping criterion
        final PowellOptimizer optim = new PowellOptimizer(relTol, 1e-100);

        final PointValuePair funcResult = optim.optimize(new MaxEval(maxEval),
                                                         new ObjectiveFunction(func),
                                                         GoalType.MINIMIZE,
                                                         new InitialGuess(init));
        final double funcValue = func.value(funcResult.getPoint());
        final int funcEvaluations = optim.getEvaluations();

        final double scale = 1e10;
        final MultivariateFunction funcScaled = new MultivariateFunction() {
                public double value(double[] x) {
                    return scale * func.value(x);
                }
            };

        final PointValuePair funcScaledResult = optim.optimize(new MaxEval(maxEval),
                                                               new ObjectiveFunction(funcScaled),
                                                               GoalType.MINIMIZE,
                                                               new InitialGuess(init));
        final double funcScaledValue = funcScaled.value(funcScaledResult.getPoint());
        final int funcScaledEvaluations = optim.getEvaluations();

        // Check that both minima provide the same objective funciton values,
        // within the relative function tolerance.
        Assert.assertEquals(1, funcScaledValue / (scale * funcValue), relTol);

        // Check that the numbers of evaluations are the same.
        Assert.assertEquals(funcEvaluations, funcScaledEvaluations);
    }
Method byte code: 
0: new           #46
3: dup
4: aload_0
5: invokespecial #47
8: astore_1
9: iconst_2
10: istore_2
11: iload_2
12: newarray       double
14: astore_3
15: iconst_0
16: istore        4
18: iload         4
20: iload_2
21: if_icmpge     35
24: aload_3
25: iload         4
27: dconst_1
28: dastore
29: iinc          4, 1
32: goto          18
35: iload_2
36: newarray       double
38: astore        4
40: iconst_0
41: istore        5
43: iload         5
45: iload_2
46: if_icmpge     68
49: aload         4
51: iload         5
53: aload_3
54: iload         5
56: daload
57: ldc2_w        #41
60: dsub
61: dastore
62: iinc          5, 1
65: goto          43
68: ldc2_w        #48
71: dstore        5
73: sipush        1000
76: istore        7
78: new           #6
81: dup
82: ldc2_w        #48
85: ldc2_w        #50
88: invokespecial #52
91: astore        8
93: aload         8
95: iconst_4
96: anewarray     #14
99: dup
100: iconst_0
101: new           #15
104: dup
105: sipush        1000
108: invokespecial #16
111: aastore
112: dup
113: iconst_1
114: new           #17
117: dup
118: aload_1
119: invokespecial #18
122: aastore
123: dup
124: iconst_2
125: getstatic     #19
128: aastore
129: dup
130: iconst_3
131: new           #20
134: dup
135: aload         4
137: invokespecial #23
140: aastore
141: invokevirtual #30
144: astore        9
146: aload_1
147: aload         9
149: invokevirtual #53
152: invokeinterface #54,  2
157: dstore        10
159: aload         8
161: invokevirtual #55
164: istore        12
166: ldc2_w        #56
169: dstore        13
171: new           #58
174: dup
175: aload_0
176: aload_1
177: invokespecial #59
180: astore        15
182: aload         8
184: iconst_4
185: anewarray     #14
188: dup
189: iconst_0
190: new           #15
193: dup
194: sipush        1000
197: invokespecial #16
200: aastore
201: dup
202: iconst_1
203: new           #17
206: dup
207: aload         15
209: invokespecial #18
212: aastore
213: dup
214: iconst_2
215: getstatic     #19
218: aastore
219: dup
220: iconst_3
221: new           #20
224: dup
225: aload         4
227: invokespecial #23
230: aastore
231: invokevirtual #30
234: astore        16
236: aload         15
238: aload         16
240: invokevirtual #53
243: invokeinterface #54,  2
248: dstore        17
250: aload         8
252: invokevirtual #55
255: istore        19
257: dconst_1
258: dload         17
260: ldc2_w        #56
263: dload         10
265: dmul
266: ddiv
267: ldc2_w        #48
270: invokestatic  #60
273: iload         12
275: i2l
276: iload         19
278: i2l
279: invokestatic  #61
282: return
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.class
Class name: CMAESOptimizer_ESTest
Method name: test00
Start line: 31
End line: 40
Method source code: 
  public void test00()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize(17);
      Well44497b well44497b0 = new Well44497b(17);
      SimpleValueChecker simpleValueChecker0 = new SimpleValueChecker(17, 17);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(17, 17, false, 17, 17, well44497b0, false, simpleValueChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_PopulationSize0;
      cMAESOptimizer0.parseOptimizationData(optimizationDataArray0);
      assertNull(cMAESOptimizer0.getGoalType());
  }
Method byte code: 
0: new           #2
3: dup
4: bipush        17
6: invokespecial #3
9: astore_1
10: new           #4
13: dup
14: bipush        17
16: invokespecial #5
19: astore_2
20: new           #6
23: dup
24: ldc2_w        #7
27: ldc2_w        #7
30: invokespecial #9
33: astore_3
34: new           #10
37: dup
38: bipush        17
40: ldc2_w        #7
43: iconst_0
44: bipush        17
46: bipush        17
48: aload_2
49: iconst_0
50: aload_3
51: invokespecial #11
54: astore        4
56: iconst_3
57: anewarray     #12
60: astore        5
62: aload         5
64: iconst_0
65: aload_1
66: aastore
67: aload         4
69: aload         5
71: invokevirtual #13
74: aload         4
76: invokevirtual #14
79: invokestatic  #15
82: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.class
Class name: CMAESOptimizer_ESTest
Method name: test01
Start line: 43
End line: 49
Method source code: 
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[17];
      Well19937c well19937c0 = new Well19937c(intArray0);
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(0, 0, false, 0, 0, well19937c0, false, (ConvergenceChecker<PointValuePair>) null);
      List<Double> list0 = cMAESOptimizer0.getStatisticsSigmaHistory();
      assertTrue(list0.isEmpty());
  }
Method byte code: 
0: bipush        17
2: newarray       int
4: astore_1
5: new           #16
8: dup
9: aload_1
10: invokespecial #17
13: astore_2
14: new           #10
17: dup
18: iconst_0
19: dconst_0
20: iconst_0
21: iconst_0
22: iconst_0
23: aload_2
24: iconst_0
25: aconst_null
26: checkcast     #18
29: invokespecial #11
32: astore_3
33: aload_3
34: invokevirtual #19
37: astore        4
39: aload         4
41: invokeinterface #20,  1
46: invokestatic  #21
49: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.class
Class name: CMAESOptimizer_ESTest
Method name: test02
Start line: 52
End line: 68
Method source code: 
  public void test02()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-2145507426), (-2145507426));
      Well1024a well1024a0 = new Well1024a((-2145507426));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-2145507426), (-2145507426), true, (-2145507426), (-2145507426), well1024a0, true, simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[3];
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }
Method byte code: 
0: new           #22
3: dup
4: ldc2_w        #23
7: ldc2_w        #23
10: invokespecial #25
13: astore_1
14: new           #26
17: dup
18: ldc           #27
20: invokespecial #28
23: astore_2
24: new           #10
27: dup
28: ldc           #27
30: ldc2_w        #23
33: iconst_1
34: ldc           #27
36: ldc           #27
38: aload_2
39: iconst_1
40: aload_1
41: invokespecial #11
44: astore_3
45: iconst_3
46: anewarray     #12
49: astore        4
51: aload_3
52: aload         4
54: invokevirtual #29
57: pop
58: ldc           #30
60: invokestatic  #31
63: goto          75
66: astore        5
68: ldc           #33
70: aload         5
72: invokestatic  #34
75: return
Exception table:
from    to  target type
51    63    66   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.class
Class name: CMAESOptimizer_ESTest
Method name: test03
Start line: 71
End line: 77
Method source code: 
  public void test03()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-2145507426), (-2145507426));
      Well1024a well1024a0 = new Well1024a((-2145507426));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-2145507426), (-2145507426), true, (-2145507426), (-2145507426), well1024a0, true, simplePointChecker0);
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsDHistory();
      assertTrue(list0.isEmpty());
  }
Method byte code: 
0: new           #22
3: dup
4: ldc2_w        #23
7: ldc2_w        #23
10: invokespecial #25
13: astore_1
14: new           #26
17: dup
18: ldc           #27
20: invokespecial #28
23: astore_2
24: new           #10
27: dup
28: ldc           #27
30: ldc2_w        #23
33: iconst_1
34: ldc           #27
36: ldc           #27
38: aload_2
39: iconst_1
40: aload_1
41: invokespecial #11
44: astore_3
45: aload_3
46: invokevirtual #35
49: astore        4
51: aload         4
53: invokeinterface #20,  1
58: invokestatic  #21
61: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.class
Class name: CMAESOptimizer_ESTest
Method name: test04
Start line: 80
End line: 87
Method source code: 
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[2];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>(0.0, (-1987.0));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-2548), 0.0, false, (-2548), 820, iSAACRandom0, false, simplePointChecker0);
      List<Double> list0 = cMAESOptimizer0.getStatisticsFitnessHistory();
      assertEquals(0, list0.size());
  }
Method byte code: 
0: iconst_2
1: newarray       int
3: astore_1
4: new           #36
7: dup
8: aload_1
9: invokespecial #37
12: astore_2
13: new           #22
16: dup
17: dconst_0
18: ldc2_w        #38
21: invokespecial #25
24: astore_3
25: new           #10
28: dup
29: sipush        -2548
32: dconst_0
33: iconst_0
34: sipush        -2548
37: sipush        820
40: aload_2
41: iconst_0
42: aload_3
43: invokespecial #11
46: astore        4
48: aload         4
50: invokevirtual #40
53: astore        5
55: lconst_0
56: aload         5
58: invokeinterface #41,  1
63: i2l
64: invokestatic  #42
67: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.class
Class name: CMAESOptimizer_ESTest
Method name: test05
Start line: 90
End line: 94
Method source code: 
  public void test05()  throws Throwable  {
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(270, 1466.4237, false, 270, 0, (RandomGenerator) null, false, (ConvergenceChecker<PointValuePair>) null);
      List<RealMatrix> list0 = cMAESOptimizer0.getStatisticsMeanHistory();
      assertTrue(list0.isEmpty());
  }
Method byte code: 
0: new           #10
3: dup
4: sipush        270
7: ldc2_w        #43
10: iconst_0
11: sipush        270
14: iconst_0
15: aconst_null
16: checkcast     #45
19: iconst_0
20: aconst_null
21: checkcast     #18
24: invokespecial #11
27: astore_1
28: aload_1
29: invokevirtual #46
32: astore_2
33: aload_2
34: invokeinterface #20,  1
39: invokestatic  #21
42: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.class
Class name: CMAESOptimizer_ESTest
Method name: test06
Start line: 97
End line: 111
Method source code: 
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2145507444);
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = null;
      try {
        cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,145,507,444 is smaller than the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$Sigma", e);
      }
  }
Method byte code: 
0: iconst_1
1: newarray       double
3: astore_1
4: aload_1
5: iconst_0
6: ldc2_w        #47
9: dastore
10: aconst_null
11: astore_2
12: new           #49
15: dup
16: aload_1
17: invokespecial #50
20: astore_2
21: ldc           #51
23: invokestatic  #31
26: goto          36
29: astore_3
30: ldc           #53
32: aload_3
33: invokestatic  #34
36: return
Exception table:
from    to  target type
12    26    29   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.class
Class name: CMAESOptimizer_ESTest
Method name: test07
Start line: 114
End line: 126
Method source code: 
  public void test07()  throws Throwable  {
      CMAESOptimizer.PopulationSize cMAESOptimizer_PopulationSize0 = null;
      try {
        cMAESOptimizer_PopulationSize0 = new CMAESOptimizer.PopulationSize((-2145507444));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,145,507,444 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer$PopulationSize", e);
      }
  }
Method byte code: 
0: aconst_null
1: astore_1
2: new           #2
5: dup
6: ldc           #54
8: invokespecial #3
11: astore_1
12: ldc           #51
14: invokestatic  #31
17: goto          27
20: astore_2
21: ldc           #55
23: aload_2
24: invokestatic  #34
27: return
Exception table:
from    to  target type
2    17    20   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.class
Class name: CMAESOptimizer_ESTest
Method name: test08
Start line: 129
End line: 150
Method source code: 
  public void test08()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-2145507426), (-81.49992397359));
      Well1024a well1024a0 = new Well1024a((-2145507426));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-2145507426), (-2145507426), true, 3, 3, well1024a0, true, simplePointChecker0);
      double[] doubleArray0 = new double[10];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      double[] doubleArray1 = new double[3];
      InitialGuess initialGuess0 = new InitialGuess(doubleArray1);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      optimizationDataArray0[0] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[1] = (OptimizationData) initialGuess0;
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 10 != 3
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }
Method byte code: 
0: new           #22
3: dup
4: ldc2_w        #23
7: ldc2_w        #56
10: invokespecial #25
13: astore_1
14: new           #26
17: dup
18: ldc           #27
20: invokespecial #28
23: astore_2
24: new           #10
27: dup
28: ldc           #27
30: ldc2_w        #23
33: iconst_1
34: iconst_3
35: iconst_3
36: aload_2
37: iconst_1
38: aload_1
39: invokespecial #11
42: astore_3
43: bipush        10
45: newarray       double
47: astore        4
49: new           #49
52: dup
53: aload         4
55: invokespecial #50
58: astore        5
60: iconst_3
61: newarray       double
63: astore        6
65: new           #58
68: dup
69: aload         6
71: invokespecial #59
74: astore        7
76: iconst_4
77: anewarray     #12
80: astore        8
82: aload         8
84: iconst_0
85: aload         5
87: aastore
88: aload         8
90: iconst_1
91: aload         7
93: aastore
94: aload_3
95: aload         8
97: invokevirtual #29
100: pop
101: ldc           #51
103: invokestatic  #31
106: goto          118
109: astore        9
111: ldc           #33
113: aload         9
115: invokestatic  #34
118: return
Exception table:
from    to  target type
94   106   109   Class java/lang/IllegalArgumentException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.class
Class name: CMAESOptimizer_ESTest
Method name: test09
Start line: 153
End line: 176
Method source code: 
  public void test09()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-2145507426), (-2145507426));
      Well1024a well1024a0 = new Well1024a((-2145507426));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer((-2145507426), (-2145507426), true, (-2145507426), (-2145507426), well1024a0, true, simplePointChecker0);
      double[] doubleArray0 = new double[10];
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[5];
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[3] = (OptimizationData) simpleBounds0;
      optimizationDataArray0[4] = (OptimizationData) cMAESOptimizer_Sigma0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }
Method byte code: 
0: new           #22
3: dup
4: ldc2_w        #23
7: ldc2_w        #23
10: invokespecial #25
13: astore_1
14: new           #26
17: dup
18: ldc           #27
20: invokespecial #28
23: astore_2
24: new           #10
27: dup
28: ldc           #27
30: ldc2_w        #23
33: iconst_1
34: ldc           #27
36: ldc           #27
38: aload_2
39: iconst_1
40: aload_1
41: invokespecial #11
44: astore_3
45: bipush        10
47: newarray       double
49: astore        4
51: new           #49
54: dup
55: aload         4
57: invokespecial #50
60: astore        5
62: new           #58
65: dup
66: aload         4
68: invokespecial #59
71: astore        6
73: iconst_5
74: anewarray     #12
77: astore        7
79: aload         7
81: iconst_0
82: aload         6
84: aastore
85: new           #60
88: dup
89: aload         4
91: aload         4
93: invokespecial #61
96: astore        8
98: aload         7
100: iconst_3
101: aload         8
103: aastore
104: aload         7
106: iconst_4
107: aload         5
109: aastore
110: aload_3
111: aload         7
113: invokevirtual #29
116: pop
117: ldc           #30
119: invokestatic  #31
122: goto          134
125: astore        9
127: ldc           #33
129: aload         9
131: invokestatic  #34
134: return
Exception table:
from    to  target type
110   122   125   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer_ESTest.class
Class name: CMAESOptimizer_ESTest
Method name: test10
Start line: 179
End line: 203
Method source code: 
  public void test10()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-2145507426), 1665.0);
      Well1024a well1024a0 = new Well1024a((-2145507426));
      CMAESOptimizer cMAESOptimizer0 = new CMAESOptimizer(30, 30.0, true, 3, 922, well1024a0, true, simplePointChecker0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 30;
      CMAESOptimizer.Sigma cMAESOptimizer_Sigma0 = new CMAESOptimizer.Sigma(doubleArray0);
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[5];
      optimizationDataArray0[0] = (OptimizationData) initialGuess0;
      optimizationDataArray0[2] = (OptimizationData) cMAESOptimizer_Sigma0;
      optimizationDataArray0[4] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
      try { 
        cMAESOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 30 out of [0, 0] range
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer", e);
      }
  }
Method byte code: 
0: new           #22
3: dup
4: ldc2_w        #23
7: ldc2_w        #62
10: invokespecial #25
13: astore_1
14: new           #26
17: dup
18: ldc           #27
20: invokespecial #28
23: astore_2
24: new           #10
27: dup
28: bipush        30
30: ldc2_w        #64
33: iconst_1
34: iconst_3
35: sipush        922
38: aload_2
39: iconst_1
40: aload_1
41: invokespecial #11
44: astore_3
45: bipush        9
47: newarray       double
49: astore        4
51: aload         4
53: iconst_0
54: ldc2_w        #64
57: dastore
58: new           #49
61: dup
62: aload         4
64: invokespecial #50
67: astore        5
69: new           #58
72: dup
73: aload         4
75: invokespecial #59
78: astore        6
80: new           #60
83: dup
84: aload         4
86: aload         4
88: invokespecial #61
91: astore        7
93: iconst_5
94: anewarray     #12
97: astore        8
99: aload         8
101: iconst_0
102: aload         6
104: aastore
105: aload         8
107: iconst_2
108: aload         5
110: aastore
111: aload         8
113: iconst_4
114: aload         7
116: aastore
117: aload_3
118: aload         8
120: invokevirtual #29
123: pop
124: ldc           #51
126: invokestatic  #31
129: goto          141
132: astore        9
134: ldc           #33
136: aload         9
138: invokestatic  #34
141: return
Exception table:
from    to  target type
117   129   132   Class java/lang/IllegalArgumentException
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testBoundsUnsupported
Start line: 39
End line: 50
Method source code: 
    public void testBoundsUnsupported() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        optimizer.optimize(new MaxEval(100),
                           new ObjectiveFunction(fourExtrema),
                           GoalType.MINIMIZE,
                           new InitialGuess(new double[] { -3, 0 }),
                           new NelderMeadSimplex(new double[] { 0.2, 0.2 }),
                           new SimpleBounds(new double[] { -5, -1 },
                                            new double[] { 5, 1 }));
    }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #3
7: ldc2_w        #5
10: invokespecial #7
13: astore_1
14: new           #8
17: dup
18: aconst_null
19: invokespecial #9
22: astore_2
23: aload_1
24: bipush        6
26: anewarray     #10
29: dup
30: iconst_0
31: new           #11
34: dup
35: bipush        100
37: invokespecial #12
40: aastore
41: dup
42: iconst_1
43: new           #13
46: dup
47: aload_2
48: invokespecial #14
51: aastore
52: dup
53: iconst_2
54: getstatic     #15
57: aastore
58: dup
59: iconst_3
60: new           #16
63: dup
64: iconst_2
65: newarray       double
67: dup
68: iconst_0
69: ldc2_w        #17
72: dastore
73: dup
74: iconst_1
75: dconst_0
76: dastore
77: invokespecial #19
80: aastore
81: dup
82: iconst_4
83: new           #20
86: dup
87: iconst_2
88: newarray       double
90: dup
91: iconst_0
92: ldc2_w        #21
95: dastore
96: dup
97: iconst_1
98: ldc2_w        #21
101: dastore
102: invokespecial #23
105: aastore
106: dup
107: iconst_5
108: new           #24
111: dup
112: iconst_2
113: newarray       double
115: dup
116: iconst_0
117: ldc2_w        #25
120: dastore
121: dup
122: iconst_1
123: ldc2_w        #27
126: dastore
127: iconst_2
128: newarray       double
130: dup
131: iconst_0
132: ldc2_w        #29
135: dastore
136: dup
137: iconst_1
138: dconst_1
139: dastore
140: invokespecial #31
143: aastore
144: invokevirtual #32
147: pop
148: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testMinimize1
Start line: 53
End line: 71
Method source code: 
    public void testMinimize1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);
        Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 90);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #3
7: ldc2_w        #5
10: invokespecial #7
13: astore_1
14: new           #8
17: dup
18: aconst_null
19: invokespecial #9
22: astore_2
23: aload_1
24: iconst_5
25: anewarray     #10
28: dup
29: iconst_0
30: new           #11
33: dup
34: bipush        100
36: invokespecial #12
39: aastore
40: dup
41: iconst_1
42: new           #13
45: dup
46: aload_2
47: invokespecial #14
50: aastore
51: dup
52: iconst_2
53: getstatic     #15
56: aastore
57: dup
58: iconst_3
59: new           #16
62: dup
63: iconst_2
64: newarray       double
66: dup
67: iconst_0
68: ldc2_w        #17
71: dastore
72: dup
73: iconst_1
74: dconst_0
75: dastore
76: invokespecial #19
79: aastore
80: dup
81: iconst_4
82: new           #20
85: dup
86: iconst_2
87: newarray       double
89: dup
90: iconst_0
91: ldc2_w        #21
94: dastore
95: dup
96: iconst_1
97: ldc2_w        #21
100: dastore
101: invokespecial #23
104: aastore
105: invokevirtual #32
108: astore_3
109: aload_2
110: invokevirtual #33
113: pop
114: ldc2_w        #34
117: aload_3
118: invokevirtual #36
121: iconst_0
122: daload
123: ldc2_w        #37
126: invokestatic  #39
129: aload_2
130: invokevirtual #33
133: pop
134: ldc2_w        #40
137: aload_3
138: invokevirtual #36
141: iconst_1
142: daload
143: ldc2_w        #42
146: invokestatic  #39
149: aload_2
150: invokevirtual #33
153: pop
154: ldc2_w        #44
157: aload_3
158: invokevirtual #46
161: checkcast     #47
164: invokevirtual #48
167: ldc2_w        #49
170: invokestatic  #39
173: aload_1
174: invokevirtual #51
177: bipush        60
179: if_icmple     186
182: iconst_1
183: goto          187
186: iconst_0
187: invokestatic  #52
190: aload_1
191: invokevirtual #51
194: bipush        90
196: if_icmpge     203
199: iconst_1
200: goto          204
203: iconst_0
204: invokestatic  #52
207: aload_1
208: invokevirtual #53
211: ifle          218
214: iconst_1
215: goto          219
218: iconst_0
219: invokestatic  #52
222: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testMinimize2
Start line: 74
End line: 92
Method source code: 
    public void testMinimize2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);
        Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 90);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #3
7: ldc2_w        #5
10: invokespecial #7
13: astore_1
14: new           #8
17: dup
18: aconst_null
19: invokespecial #9
22: astore_2
23: aload_1
24: iconst_5
25: anewarray     #10
28: dup
29: iconst_0
30: new           #11
33: dup
34: bipush        100
36: invokespecial #12
39: aastore
40: dup
41: iconst_1
42: new           #13
45: dup
46: aload_2
47: invokespecial #14
50: aastore
51: dup
52: iconst_2
53: getstatic     #15
56: aastore
57: dup
58: iconst_3
59: new           #16
62: dup
63: iconst_2
64: newarray       double
66: dup
67: iconst_0
68: dconst_1
69: dastore
70: dup
71: iconst_1
72: dconst_0
73: dastore
74: invokespecial #19
77: aastore
78: dup
79: iconst_4
80: new           #20
83: dup
84: iconst_2
85: newarray       double
87: dup
88: iconst_0
89: ldc2_w        #21
92: dastore
93: dup
94: iconst_1
95: ldc2_w        #21
98: dastore
99: invokespecial #23
102: aastore
103: invokevirtual #32
106: astore_3
107: aload_2
108: invokevirtual #33
111: pop
112: ldc2_w        #54
115: aload_3
116: invokevirtual #36
119: iconst_0
120: daload
121: ldc2_w        #56
124: invokestatic  #39
127: aload_2
128: invokevirtual #33
131: pop
132: ldc2_w        #58
135: aload_3
136: invokevirtual #36
139: iconst_1
140: daload
141: ldc2_w        #60
144: invokestatic  #39
147: aload_2
148: invokevirtual #33
151: pop
152: ldc2_w        #62
155: aload_3
156: invokevirtual #46
159: checkcast     #47
162: invokevirtual #48
165: ldc2_w        #64
168: invokestatic  #39
171: aload_1
172: invokevirtual #51
175: bipush        60
177: if_icmple     184
180: iconst_1
181: goto          185
184: iconst_0
185: invokestatic  #52
188: aload_1
189: invokevirtual #51
192: bipush        90
194: if_icmpge     201
197: iconst_1
198: goto          202
201: iconst_0
202: invokestatic  #52
205: aload_1
206: invokevirtual #53
209: ifle          216
212: iconst_1
213: goto          217
216: iconst_0
217: invokestatic  #52
220: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testMaximize1
Start line: 95
End line: 113
Method source code: 
    public void testMaximize1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);
        Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 90);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #3
7: ldc2_w        #5
10: invokespecial #7
13: astore_1
14: new           #8
17: dup
18: aconst_null
19: invokespecial #9
22: astore_2
23: aload_1
24: iconst_5
25: anewarray     #10
28: dup
29: iconst_0
30: new           #11
33: dup
34: bipush        100
36: invokespecial #12
39: aastore
40: dup
41: iconst_1
42: new           #13
45: dup
46: aload_2
47: invokespecial #14
50: aastore
51: dup
52: iconst_2
53: getstatic     #66
56: aastore
57: dup
58: iconst_3
59: new           #16
62: dup
63: iconst_2
64: newarray       double
66: dup
67: iconst_0
68: ldc2_w        #17
71: dastore
72: dup
73: iconst_1
74: dconst_0
75: dastore
76: invokespecial #19
79: aastore
80: dup
81: iconst_4
82: new           #20
85: dup
86: iconst_2
87: newarray       double
89: dup
90: iconst_0
91: ldc2_w        #21
94: dastore
95: dup
96: iconst_1
97: ldc2_w        #21
100: dastore
101: invokespecial #23
104: aastore
105: invokevirtual #32
108: astore_3
109: aload_2
110: invokevirtual #33
113: pop
114: ldc2_w        #34
117: aload_3
118: invokevirtual #36
121: iconst_0
122: daload
123: ldc2_w        #67
126: invokestatic  #39
129: aload_2
130: invokevirtual #33
133: pop
134: ldc2_w        #58
137: aload_3
138: invokevirtual #36
141: iconst_1
142: daload
143: ldc2_w        #69
146: invokestatic  #39
149: aload_2
150: invokevirtual #33
153: pop
154: ldc2_w        #71
157: aload_3
158: invokevirtual #46
161: checkcast     #47
164: invokevirtual #48
167: ldc2_w        #73
170: invokestatic  #39
173: aload_1
174: invokevirtual #51
177: bipush        60
179: if_icmple     186
182: iconst_1
183: goto          187
186: iconst_0
187: invokestatic  #52
190: aload_1
191: invokevirtual #51
194: bipush        90
196: if_icmpge     203
199: iconst_1
200: goto          204
203: iconst_0
204: invokestatic  #52
207: aload_1
208: invokevirtual #53
211: ifle          218
214: iconst_1
215: goto          219
218: iconst_0
219: invokestatic  #52
222: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testMaximize2
Start line: 116
End line: 134
Method source code: 
    public void testMaximize2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);
        Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 90);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }
Method byte code: 
0: new           #2
3: dup
4: ldc2_w        #3
7: ldc2_w        #5
10: invokespecial #7
13: astore_1
14: new           #8
17: dup
18: aconst_null
19: invokespecial #9
22: astore_2
23: aload_1
24: iconst_5
25: anewarray     #10
28: dup
29: iconst_0
30: new           #11
33: dup
34: bipush        100
36: invokespecial #12
39: aastore
40: dup
41: iconst_1
42: new           #13
45: dup
46: aload_2
47: invokespecial #14
50: aastore
51: dup
52: iconst_2
53: getstatic     #66
56: aastore
57: dup
58: iconst_3
59: new           #16
62: dup
63: iconst_2
64: newarray       double
66: dup
67: iconst_0
68: dconst_1
69: dastore
70: dup
71: iconst_1
72: dconst_0
73: dastore
74: invokespecial #19
77: aastore
78: dup
79: iconst_4
80: new           #20
83: dup
84: iconst_2
85: newarray       double
87: dup
88: iconst_0
89: ldc2_w        #21
92: dastore
93: dup
94: iconst_1
95: ldc2_w        #21
98: dastore
99: invokespecial #23
102: aastore
103: invokevirtual #32
106: astore_3
107: aload_2
108: invokevirtual #33
111: pop
112: ldc2_w        #54
115: aload_3
116: invokevirtual #36
119: iconst_0
120: daload
121: ldc2_w        #75
124: invokestatic  #39
127: aload_2
128: invokevirtual #33
131: pop
132: ldc2_w        #40
135: aload_3
136: invokevirtual #36
139: iconst_1
140: daload
141: ldc2_w        #56
144: invokestatic  #39
147: aload_2
148: invokevirtual #33
151: pop
152: ldc2_w        #77
155: aload_3
156: invokevirtual #46
159: checkcast     #47
162: invokevirtual #48
165: ldc2_w        #79
168: invokestatic  #39
171: aload_1
172: invokevirtual #51
175: bipush        60
177: if_icmple     184
180: iconst_1
181: goto          185
184: iconst_0
185: invokestatic  #52
188: aload_1
189: invokevirtual #51
192: bipush        90
194: if_icmpge     201
197: iconst_1
198: goto          202
201: iconst_0
202: invokestatic  #52
205: aload_1
206: invokevirtual #53
209: ifle          216
212: iconst_1
213: goto          217
216: iconst_0
217: invokestatic  #52
220: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testRosenbrock
Start line: 137
End line: 155
Method source code: 
    public void testRosenbrock() {

        Rosenbrock rosenbrock = new Rosenbrock();
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);
        PointValuePair optimum
        = optimizer.optimize(new MaxEval(100),
                             new ObjectiveFunction(rosenbrock),
                             GoalType.MINIMIZE,
                             new InitialGuess(new double[] { -1.2, 1 }),
                                new NelderMeadSimplex(new double[][] {
                                        { -1.2,  1 },
                                        { 0.9, 1.2 },
                                        {  3.5, -2.3 } }));

        Assert.assertEquals(rosenbrock.getCount(), optimizer.getEvaluations());
        Assert.assertTrue(optimizer.getEvaluations() > 40);
        Assert.assertTrue(optimizer.getEvaluations() < 50);
        Assert.assertTrue(optimum.getValue() < 8e-4);
    }
Method byte code: 
0: new           #81
3: dup
4: invokespecial #82
7: astore_1
8: new           #2
11: dup
12: ldc2_w        #27
15: ldc2_w        #83
18: invokespecial #7
21: astore_2
22: aload_2
23: iconst_5
24: anewarray     #10
27: dup
28: iconst_0
29: new           #11
32: dup
33: bipush        100
35: invokespecial #12
38: aastore
39: dup
40: iconst_1
41: new           #13
44: dup
45: aload_1
46: invokespecial #14
49: aastore
50: dup
51: iconst_2
52: getstatic     #15
55: aastore
56: dup
57: iconst_3
58: new           #16
61: dup
62: iconst_2
63: newarray       double
65: dup
66: iconst_0
67: ldc2_w        #85
70: dastore
71: dup
72: iconst_1
73: dconst_1
74: dastore
75: invokespecial #19
78: aastore
79: dup
80: iconst_4
81: new           #20
84: dup
85: iconst_3
86: anewarray     #87
89: dup
90: iconst_0
91: iconst_2
92: newarray       double
94: dup
95: iconst_0
96: ldc2_w        #85
99: dastore
100: dup
101: iconst_1
102: dconst_1
103: dastore
104: aastore
105: dup
106: iconst_1
107: iconst_2
108: newarray       double
110: dup
111: iconst_0
112: ldc2_w        #88
115: dastore
116: dup
117: iconst_1
118: ldc2_w        #90
121: dastore
122: aastore
123: dup
124: iconst_2
125: iconst_2
126: newarray       double
128: dup
129: iconst_0
130: ldc2_w        #92
133: dastore
134: dup
135: iconst_1
136: ldc2_w        #94
139: dastore
140: aastore
141: invokespecial #96
144: aastore
145: invokevirtual #32
148: astore_3
149: aload_1
150: invokevirtual #97
153: i2l
154: aload_2
155: invokevirtual #51
158: i2l
159: invokestatic  #98
162: aload_2
163: invokevirtual #51
166: bipush        40
168: if_icmple     175
171: iconst_1
172: goto          176
175: iconst_0
176: invokestatic  #52
179: aload_2
180: invokevirtual #51
183: bipush        50
185: if_icmpge     192
188: iconst_1
189: goto          193
192: iconst_0
193: invokestatic  #52
196: aload_3
197: invokevirtual #46
200: checkcast     #47
203: invokevirtual #48
206: ldc2_w        #99
209: dcmpg
210: ifge          217
213: iconst_1
214: goto          218
217: iconst_0
218: invokestatic  #52
221: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testPowell
Start line: 158
End line: 171
Method source code: 
    public void testPowell() {
        Powell powell = new Powell();
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);
        PointValuePair optimum =
            optimizer.optimize(new MaxEval(200),
                               new ObjectiveFunction(powell),
                               GoalType.MINIMIZE,
                               new InitialGuess(new double[] { 3, -1, 0, 1 }),
                               new NelderMeadSimplex(4));
        Assert.assertEquals(powell.getCount(), optimizer.getEvaluations());
        Assert.assertTrue(optimizer.getEvaluations() > 110);
        Assert.assertTrue(optimizer.getEvaluations() < 130);
        Assert.assertTrue(optimum.getValue() < 2e-3);
    }
Method byte code: 
0: new           #101
3: dup
4: invokespecial #102
7: astore_1
8: new           #2
11: dup
12: ldc2_w        #27
15: ldc2_w        #83
18: invokespecial #7
21: astore_2
22: aload_2
23: iconst_5
24: anewarray     #10
27: dup
28: iconst_0
29: new           #11
32: dup
33: sipush        200
36: invokespecial #12
39: aastore
40: dup
41: iconst_1
42: new           #13
45: dup
46: aload_1
47: invokespecial #14
50: aastore
51: dup
52: iconst_2
53: getstatic     #15
56: aastore
57: dup
58: iconst_3
59: new           #16
62: dup
63: iconst_4
64: newarray       double
66: dup
67: iconst_0
68: ldc2_w        #103
71: dastore
72: dup
73: iconst_1
74: ldc2_w        #27
77: dastore
78: dup
79: iconst_2
80: dconst_0
81: dastore
82: dup
83: iconst_3
84: dconst_1
85: dastore
86: invokespecial #19
89: aastore
90: dup
91: iconst_4
92: new           #20
95: dup
96: iconst_4
97: invokespecial #105
100: aastore
101: invokevirtual #32
104: astore_3
105: aload_1
106: invokevirtual #106
109: i2l
110: aload_2
111: invokevirtual #51
114: i2l
115: invokestatic  #98
118: aload_2
119: invokevirtual #51
122: bipush        110
124: if_icmple     131
127: iconst_1
128: goto          132
131: iconst_0
132: invokestatic  #52
135: aload_2
136: invokevirtual #51
139: sipush        130
142: if_icmpge     149
145: iconst_1
146: goto          150
149: iconst_0
150: invokestatic  #52
153: aload_3
154: invokevirtual #46
157: checkcast     #47
160: invokevirtual #48
163: ldc2_w        #107
166: dcmpg
167: ifge          174
170: iconst_1
171: goto          175
174: iconst_0
175: invokestatic  #52
178: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testLeastSquares1
Start line: 174
End line: 197
Method source code: 
    public void testLeastSquares1() {
        final RealMatrix factors
            = new Array2DRowRealMatrix(new double[][] {
                    { 1, 0 },
                    { 0, 1 }
                }, false);
        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() {
                public double[] value(double[] variables) {
                    return factors.operate(variables);
                }
            }, new double[] { 2.0, -3.0 });
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6);
        PointValuePair optimum =
            optimizer.optimize(new MaxEval(200),
                               new ObjectiveFunction(ls),
                               GoalType.MINIMIZE,
                               new InitialGuess(new double[] { 10, 10 }),
                               new NelderMeadSimplex(2));
        Assert.assertEquals( 2, optimum.getPointRef()[0], 3e-5);
        Assert.assertEquals(-3, optimum.getPointRef()[1], 4e-4);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 80);
        Assert.assertTrue(optimum.getValue() < 1.0e-6);
    }
Method byte code: 
0: new           #109
3: dup
4: iconst_2
5: anewarray     #87
8: dup
9: iconst_0
10: iconst_2
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: dconst_0
20: dastore
21: aastore
22: dup
23: iconst_1
24: iconst_2
25: newarray       double
27: dup
28: iconst_0
29: dconst_0
30: dastore
31: dup
32: iconst_1
33: dconst_1
34: dastore
35: aastore
36: iconst_0
37: invokespecial #110
40: astore_1
41: new           #111
44: dup
45: new           #112
48: dup
49: aload_0
50: aload_1
51: invokespecial #113
54: iconst_2
55: newarray       double
57: dup
58: iconst_0
59: ldc2_w        #114
62: dastore
63: dup
64: iconst_1
65: ldc2_w        #17
68: dastore
69: invokespecial #116
72: astore_2
73: new           #2
76: dup
77: ldc2_w        #27
80: ldc2_w        #117
83: invokespecial #7
86: astore_3
87: aload_3
88: iconst_5
89: anewarray     #10
92: dup
93: iconst_0
94: new           #11
97: dup
98: sipush        200
101: invokespecial #12
104: aastore
105: dup
106: iconst_1
107: new           #13
110: dup
111: aload_2
112: invokespecial #14
115: aastore
116: dup
117: iconst_2
118: getstatic     #15
121: aastore
122: dup
123: iconst_3
124: new           #16
127: dup
128: iconst_2
129: newarray       double
131: dup
132: iconst_0
133: ldc2_w        #119
136: dastore
137: dup
138: iconst_1
139: ldc2_w        #119
142: dastore
143: invokespecial #19
146: aastore
147: dup
148: iconst_4
149: new           #20
152: dup
153: iconst_2
154: invokespecial #105
157: aastore
158: invokevirtual #32
161: astore        4
163: ldc2_w        #114
166: aload         4
168: invokevirtual #121
171: iconst_0
172: daload
173: ldc2_w        #122
176: invokestatic  #39
179: ldc2_w        #17
182: aload         4
184: invokevirtual #121
187: iconst_1
188: daload
189: ldc2_w        #124
192: invokestatic  #39
195: aload_3
196: invokevirtual #51
199: bipush        60
201: if_icmple     208
204: iconst_1
205: goto          209
208: iconst_0
209: invokestatic  #52
212: aload_3
213: invokevirtual #51
216: bipush        80
218: if_icmpge     225
221: iconst_1
222: goto          226
225: iconst_0
226: invokestatic  #52
229: aload         4
231: invokevirtual #46
234: checkcast     #47
237: invokevirtual #48
240: ldc2_w        #117
243: dcmpg
244: ifge          251
247: iconst_1
248: goto          252
251: iconst_0
252: invokestatic  #52
255: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testLeastSquares2
Start line: 200
End line: 223
Method source code: 
    public void testLeastSquares2() {
        final RealMatrix factors
            = new Array2DRowRealMatrix(new double[][] {
                    { 1, 0 },
                    { 0, 1 }
                }, false);
        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() {
                public double[] value(double[] variables) {
                    return factors.operate(variables);
                }
            }, new double[] { 2, -3 }, new double[] { 10, 0.1 });
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6);
        PointValuePair optimum =
            optimizer.optimize(new MaxEval(200),
                               new ObjectiveFunction(ls),
                               GoalType.MINIMIZE,
                               new InitialGuess(new double[] { 10, 10 }),
                               new NelderMeadSimplex(2));
        Assert.assertEquals( 2, optimum.getPointRef()[0], 5e-5);
        Assert.assertEquals(-3, optimum.getPointRef()[1], 8e-4);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 80);
        Assert.assertTrue(optimum.getValue() < 1e-6);
    }
Method byte code: 
0: new           #109
3: dup
4: iconst_2
5: anewarray     #87
8: dup
9: iconst_0
10: iconst_2
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: dconst_0
20: dastore
21: aastore
22: dup
23: iconst_1
24: iconst_2
25: newarray       double
27: dup
28: iconst_0
29: dconst_0
30: dastore
31: dup
32: iconst_1
33: dconst_1
34: dastore
35: aastore
36: iconst_0
37: invokespecial #110
40: astore_1
41: new           #111
44: dup
45: new           #126
48: dup
49: aload_0
50: aload_1
51: invokespecial #127
54: iconst_2
55: newarray       double
57: dup
58: iconst_0
59: ldc2_w        #114
62: dastore
63: dup
64: iconst_1
65: ldc2_w        #17
68: dastore
69: iconst_2
70: newarray       double
72: dup
73: iconst_0
74: ldc2_w        #119
77: dastore
78: dup
79: iconst_1
80: ldc2_w        #128
83: dastore
84: invokespecial #130
87: astore_2
88: new           #2
91: dup
92: ldc2_w        #27
95: ldc2_w        #117
98: invokespecial #7
101: astore_3
102: aload_3
103: iconst_5
104: anewarray     #10
107: dup
108: iconst_0
109: new           #11
112: dup
113: sipush        200
116: invokespecial #12
119: aastore
120: dup
121: iconst_1
122: new           #13
125: dup
126: aload_2
127: invokespecial #14
130: aastore
131: dup
132: iconst_2
133: getstatic     #15
136: aastore
137: dup
138: iconst_3
139: new           #16
142: dup
143: iconst_2
144: newarray       double
146: dup
147: iconst_0
148: ldc2_w        #119
151: dastore
152: dup
153: iconst_1
154: ldc2_w        #119
157: dastore
158: invokespecial #19
161: aastore
162: dup
163: iconst_4
164: new           #20
167: dup
168: iconst_2
169: invokespecial #105
172: aastore
173: invokevirtual #32
176: astore        4
178: ldc2_w        #114
181: aload         4
183: invokevirtual #121
186: iconst_0
187: daload
188: ldc2_w        #131
191: invokestatic  #39
194: ldc2_w        #17
197: aload         4
199: invokevirtual #121
202: iconst_1
203: daload
204: ldc2_w        #99
207: invokestatic  #39
210: aload_3
211: invokevirtual #51
214: bipush        60
216: if_icmple     223
219: iconst_1
220: goto          224
223: iconst_0
224: invokestatic  #52
227: aload_3
228: invokevirtual #51
231: bipush        80
233: if_icmpge     240
236: iconst_1
237: goto          241
240: iconst_0
241: invokestatic  #52
244: aload         4
246: invokevirtual #46
249: checkcast     #47
252: invokevirtual #48
255: ldc2_w        #117
258: dcmpg
259: ifge          266
262: iconst_1
263: goto          267
266: iconst_0
267: invokestatic  #52
270: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testLeastSquares3
Start line: 226
End line: 251
Method source code: 
    public void testLeastSquares3() {
        final RealMatrix factors =
            new Array2DRowRealMatrix(new double[][] {
                    { 1, 0 },
                    { 0, 1 }
                }, false);
        LeastSquaresConverter ls = new LeastSquaresConverter(new MultivariateVectorFunction() {
                public double[] value(double[] variables) {
                    return factors.operate(variables);
                }
            }, new double[] { 2, -3 }, new Array2DRowRealMatrix(new double [][] {
                    { 1, 1.2 }, { 1.2, 2 }
                }));
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-6);
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(ls),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 10, 10 }),
                                 new NelderMeadSimplex(2));
        Assert.assertEquals( 2, optimum.getPointRef()[0], 2e-3);
        Assert.assertEquals(-3, optimum.getPointRef()[1], 8e-4);
        Assert.assertTrue(optimizer.getEvaluations() > 60);
        Assert.assertTrue(optimizer.getEvaluations() < 80);
        Assert.assertTrue(optimum.getValue() < 1e-6);
    }
Method byte code: 
0: new           #109
3: dup
4: iconst_2
5: anewarray     #87
8: dup
9: iconst_0
10: iconst_2
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: dconst_0
20: dastore
21: aastore
22: dup
23: iconst_1
24: iconst_2
25: newarray       double
27: dup
28: iconst_0
29: dconst_0
30: dastore
31: dup
32: iconst_1
33: dconst_1
34: dastore
35: aastore
36: iconst_0
37: invokespecial #110
40: astore_1
41: new           #111
44: dup
45: new           #133
48: dup
49: aload_0
50: aload_1
51: invokespecial #134
54: iconst_2
55: newarray       double
57: dup
58: iconst_0
59: ldc2_w        #114
62: dastore
63: dup
64: iconst_1
65: ldc2_w        #17
68: dastore
69: new           #109
72: dup
73: iconst_2
74: anewarray     #87
77: dup
78: iconst_0
79: iconst_2
80: newarray       double
82: dup
83: iconst_0
84: dconst_1
85: dastore
86: dup
87: iconst_1
88: ldc2_w        #90
91: dastore
92: aastore
93: dup
94: iconst_1
95: iconst_2
96: newarray       double
98: dup
99: iconst_0
100: ldc2_w        #90
103: dastore
104: dup
105: iconst_1
106: ldc2_w        #114
109: dastore
110: aastore
111: invokespecial #135
114: invokespecial #136
117: astore_2
118: new           #2
121: dup
122: ldc2_w        #27
125: ldc2_w        #117
128: invokespecial #7
131: astore_3
132: aload_3
133: iconst_5
134: anewarray     #10
137: dup
138: iconst_0
139: new           #11
142: dup
143: sipush        200
146: invokespecial #12
149: aastore
150: dup
151: iconst_1
152: new           #13
155: dup
156: aload_2
157: invokespecial #14
160: aastore
161: dup
162: iconst_2
163: getstatic     #15
166: aastore
167: dup
168: iconst_3
169: new           #16
172: dup
173: iconst_2
174: newarray       double
176: dup
177: iconst_0
178: ldc2_w        #119
181: dastore
182: dup
183: iconst_1
184: ldc2_w        #119
187: dastore
188: invokespecial #19
191: aastore
192: dup
193: iconst_4
194: new           #20
197: dup
198: iconst_2
199: invokespecial #105
202: aastore
203: invokevirtual #32
206: astore        4
208: ldc2_w        #114
211: aload         4
213: invokevirtual #121
216: iconst_0
217: daload
218: ldc2_w        #107
221: invokestatic  #39
224: ldc2_w        #17
227: aload         4
229: invokevirtual #121
232: iconst_1
233: daload
234: ldc2_w        #99
237: invokestatic  #39
240: aload_3
241: invokevirtual #51
244: bipush        60
246: if_icmple     253
249: iconst_1
250: goto          254
253: iconst_0
254: invokestatic  #52
257: aload_3
258: invokevirtual #51
261: bipush        80
263: if_icmpge     270
266: iconst_1
267: goto          271
270: iconst_0
271: invokestatic  #52
274: aload         4
276: invokevirtual #46
279: checkcast     #47
282: invokevirtual #48
285: ldc2_w        #117
288: dcmpg
289: ifge          296
292: iconst_1
293: goto          297
296: iconst_0
297: invokestatic  #52
300: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.class
Class name: SimplexOptimizerNelderMeadTest
Method name: testMaxIterations
Start line: 254
End line: 262
Method source code: 
    public void testMaxIterations() {
        Powell powell = new Powell();
        SimplexOptimizer optimizer = new SimplexOptimizer(-1, 1e-3);
        optimizer.optimize(new MaxEval(20),
                           new ObjectiveFunction(powell),
                           GoalType.MINIMIZE,
                           new InitialGuess(new double[] { 3, -1, 0, 1 }),
                           new NelderMeadSimplex(4));
    }
Method byte code: 
0: new           #101
3: dup
4: invokespecial #102
7: astore_1
8: new           #2
11: dup
12: ldc2_w        #27
15: ldc2_w        #83
18: invokespecial #7
21: astore_2
22: aload_2
23: iconst_5
24: anewarray     #10
27: dup
28: iconst_0
29: new           #11
32: dup
33: bipush        20
35: invokespecial #12
38: aastore
39: dup
40: iconst_1
41: new           #13
44: dup
45: aload_1
46: invokespecial #14
49: aastore
50: dup
51: iconst_2
52: getstatic     #15
55: aastore
56: dup
57: iconst_3
58: new           #16
61: dup
62: iconst_4
63: newarray       double
65: dup
66: iconst_0
67: ldc2_w        #103
70: dastore
71: dup
72: iconst_1
73: ldc2_w        #27
76: dastore
77: dup
78: iconst_2
79: dconst_0
80: dastore
81: dup
82: iconst_3
83: dconst_1
84: dastore
85: invokespecial #19
88: aastore
89: dup
90: iconst_4
91: new           #20
94: dup
95: iconst_4
96: invokespecial #105
99: aastore
100: invokevirtual #32
103: pop
104: return
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testBoundsUnsupported
Start line: 108
End line: 121
Method source code: 
    public void testBoundsUnsupported() {
        LinearProblem problem
            = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });
        NonLinearConjugateGradientOptimizer optimizer
            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                      new SimpleValueChecker(1e-6, 1e-6));
        optimizer.optimize(new MaxEval(100),
                           problem.getObjectiveFunction(),
                           problem.getObjectiveFunctionGradient(),
                           GoalType.MINIMIZE,
                           new InitialGuess(new double[] { 0 }),
                           new SimpleBounds(new double[] { -1 },
                                            new double[] { 1 }));
    }
Method byte code: 
0: new           #2
3: dup
4: iconst_1
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_1
11: newarray       double
13: dup
14: iconst_0
15: ldc2_w        #4
18: dastore
19: aastore
20: iconst_1
21: newarray       double
23: dup
24: iconst_0
25: ldc2_w        #6
28: dastore
29: invokespecial #8
32: astore_1
33: new           #9
36: dup
37: getstatic     #10
40: new           #11
43: dup
44: ldc2_w        #12
47: ldc2_w        #12
50: invokespecial #14
53: invokespecial #15
56: astore_2
57: aload_2
58: bipush        6
60: anewarray     #16
63: dup
64: iconst_0
65: new           #17
68: dup
69: bipush        100
71: invokespecial #18
74: aastore
75: dup
76: iconst_1
77: aload_1
78: invokevirtual #19
81: aastore
82: dup
83: iconst_2
84: aload_1
85: invokevirtual #20
88: aastore
89: dup
90: iconst_3
91: getstatic     #21
94: aastore
95: dup
96: iconst_4
97: new           #22
100: dup
101: iconst_1
102: newarray       double
104: dup
105: iconst_0
106: dconst_0
107: dastore
108: invokespecial #23
111: aastore
112: dup
113: iconst_5
114: new           #24
117: dup
118: iconst_1
119: newarray       double
121: dup
122: iconst_0
123: ldc2_w        #25
126: dastore
127: iconst_1
128: newarray       double
130: dup
131: iconst_0
132: dconst_1
133: dastore
134: invokespecial #27
137: aastore
138: invokevirtual #28
141: pop
142: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testTrivial
Start line: 124
End line: 141
Method source code: 
    public void testTrivial() {
        LinearProblem problem
            = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });
        NonLinearConjugateGradientOptimizer optimizer
            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                      new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getObjectiveFunction(),
                                 problem.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 0 }));
        Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);
        Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);
    }
Method byte code: 
0: new           #2
3: dup
4: iconst_1
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_1
11: newarray       double
13: dup
14: iconst_0
15: ldc2_w        #4
18: dastore
19: aastore
20: iconst_1
21: newarray       double
23: dup
24: iconst_0
25: ldc2_w        #6
28: dastore
29: invokespecial #8
32: astore_1
33: new           #9
36: dup
37: getstatic     #10
40: new           #11
43: dup
44: ldc2_w        #12
47: ldc2_w        #12
50: invokespecial #14
53: invokespecial #15
56: astore_2
57: aload_2
58: iconst_5
59: anewarray     #16
62: dup
63: iconst_0
64: new           #17
67: dup
68: bipush        100
70: invokespecial #18
73: aastore
74: dup
75: iconst_1
76: aload_1
77: invokevirtual #19
80: aastore
81: dup
82: iconst_2
83: aload_1
84: invokevirtual #20
87: aastore
88: dup
89: iconst_3
90: getstatic     #21
93: aastore
94: dup
95: iconst_4
96: new           #22
99: dup
100: iconst_1
101: newarray       double
103: dup
104: iconst_0
105: dconst_0
106: dastore
107: invokespecial #23
110: aastore
111: invokevirtual #28
114: astore_3
115: ldc2_w        #29
118: aload_3
119: invokevirtual #31
122: iconst_0
123: daload
124: ldc2_w        #32
127: invokestatic  #34
130: dconst_0
131: aload_3
132: invokevirtual #35
135: checkcast     #36
138: invokevirtual #37
141: ldc2_w        #32
144: invokestatic  #34
147: aload_2
148: invokevirtual #38
151: ifle          158
154: iconst_1
155: goto          159
158: iconst_0
159: invokestatic  #39
162: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testColumnsPermutation
Start line: 144
End line: 162
Method source code: 
    public void testColumnsPermutation() {
        LinearProblem problem
            = new LinearProblem(new double[][] { { 1.0, -1.0 }, { 0.0, 2.0 }, { 1.0, -2.0 } },
                                new double[] { 4.0, 6.0, 1.0 });

        NonLinearConjugateGradientOptimizer optimizer
            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                      new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getObjectiveFunction(),
                                 problem.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 0, 0 }));
        Assert.assertEquals(7.0, optimum.getPoint()[0], 1.0e-10);
        Assert.assertEquals(3.0, optimum.getPoint()[1], 1.0e-10);
        Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);

    }
Method byte code: 
0: new           #2
3: dup
4: iconst_3
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_2
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: ldc2_w        #25
22: dastore
23: aastore
24: dup
25: iconst_1
26: iconst_2
27: newarray       double
29: dup
30: iconst_0
31: dconst_0
32: dastore
33: dup
34: iconst_1
35: ldc2_w        #4
38: dastore
39: aastore
40: dup
41: iconst_2
42: iconst_2
43: newarray       double
45: dup
46: iconst_0
47: dconst_1
48: dastore
49: dup
50: iconst_1
51: ldc2_w        #40
54: dastore
55: aastore
56: iconst_3
57: newarray       double
59: dup
60: iconst_0
61: ldc2_w        #42
64: dastore
65: dup
66: iconst_1
67: ldc2_w        #44
70: dastore
71: dup
72: iconst_2
73: dconst_1
74: dastore
75: invokespecial #8
78: astore_1
79: new           #9
82: dup
83: getstatic     #10
86: new           #11
89: dup
90: ldc2_w        #12
93: ldc2_w        #12
96: invokespecial #14
99: invokespecial #15
102: astore_2
103: aload_2
104: iconst_5
105: anewarray     #16
108: dup
109: iconst_0
110: new           #17
113: dup
114: bipush        100
116: invokespecial #18
119: aastore
120: dup
121: iconst_1
122: aload_1
123: invokevirtual #19
126: aastore
127: dup
128: iconst_2
129: aload_1
130: invokevirtual #20
133: aastore
134: dup
135: iconst_3
136: getstatic     #21
139: aastore
140: dup
141: iconst_4
142: new           #22
145: dup
146: iconst_2
147: newarray       double
149: dup
150: iconst_0
151: dconst_0
152: dastore
153: dup
154: iconst_1
155: dconst_0
156: dastore
157: invokespecial #23
160: aastore
161: invokevirtual #28
164: astore_3
165: ldc2_w        #46
168: aload_3
169: invokevirtual #31
172: iconst_0
173: daload
174: ldc2_w        #32
177: invokestatic  #34
180: ldc2_w        #6
183: aload_3
184: invokevirtual #31
187: iconst_1
188: daload
189: ldc2_w        #32
192: invokestatic  #34
195: dconst_0
196: aload_3
197: invokevirtual #35
200: checkcast     #36
203: invokevirtual #37
206: ldc2_w        #32
209: invokestatic  #34
212: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testNoDependency
Start line: 165
End line: 186
Method source code: 
    public void testNoDependency() {
        LinearProblem problem = new LinearProblem(new double[][] {
                { 2, 0, 0, 0, 0, 0 },
                { 0, 2, 0, 0, 0, 0 },
                { 0, 0, 2, 0, 0, 0 },
                { 0, 0, 0, 2, 0, 0 },
                { 0, 0, 0, 0, 2, 0 },
                { 0, 0, 0, 0, 0, 2 }
        }, new double[] { 0.0, 1.1, 2.2, 3.3, 4.4, 5.5 });
        NonLinearConjugateGradientOptimizer optimizer
            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                      new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getObjectiveFunction(),
                                 problem.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 0, 0, 0, 0, 0, 0 }));
        for (int i = 0; i < problem.target.length; ++i) {
            Assert.assertEquals(0.55 * i, optimum.getPoint()[i], 1.0e-10);
        }
    }
Method byte code: 
0: new           #2
3: dup
4: bipush        6
6: anewarray     #3
9: dup
10: iconst_0
11: bipush        6
13: newarray       double
15: dup
16: iconst_0
17: ldc2_w        #4
20: dastore
21: dup
22: iconst_1
23: dconst_0
24: dastore
25: dup
26: iconst_2
27: dconst_0
28: dastore
29: dup
30: iconst_3
31: dconst_0
32: dastore
33: dup
34: iconst_4
35: dconst_0
36: dastore
37: dup
38: iconst_5
39: dconst_0
40: dastore
41: aastore
42: dup
43: iconst_1
44: bipush        6
46: newarray       double
48: dup
49: iconst_0
50: dconst_0
51: dastore
52: dup
53: iconst_1
54: ldc2_w        #4
57: dastore
58: dup
59: iconst_2
60: dconst_0
61: dastore
62: dup
63: iconst_3
64: dconst_0
65: dastore
66: dup
67: iconst_4
68: dconst_0
69: dastore
70: dup
71: iconst_5
72: dconst_0
73: dastore
74: aastore
75: dup
76: iconst_2
77: bipush        6
79: newarray       double
81: dup
82: iconst_0
83: dconst_0
84: dastore
85: dup
86: iconst_1
87: dconst_0
88: dastore
89: dup
90: iconst_2
91: ldc2_w        #4
94: dastore
95: dup
96: iconst_3
97: dconst_0
98: dastore
99: dup
100: iconst_4
101: dconst_0
102: dastore
103: dup
104: iconst_5
105: dconst_0
106: dastore
107: aastore
108: dup
109: iconst_3
110: bipush        6
112: newarray       double
114: dup
115: iconst_0
116: dconst_0
117: dastore
118: dup
119: iconst_1
120: dconst_0
121: dastore
122: dup
123: iconst_2
124: dconst_0
125: dastore
126: dup
127: iconst_3
128: ldc2_w        #4
131: dastore
132: dup
133: iconst_4
134: dconst_0
135: dastore
136: dup
137: iconst_5
138: dconst_0
139: dastore
140: aastore
141: dup
142: iconst_4
143: bipush        6
145: newarray       double
147: dup
148: iconst_0
149: dconst_0
150: dastore
151: dup
152: iconst_1
153: dconst_0
154: dastore
155: dup
156: iconst_2
157: dconst_0
158: dastore
159: dup
160: iconst_3
161: dconst_0
162: dastore
163: dup
164: iconst_4
165: ldc2_w        #4
168: dastore
169: dup
170: iconst_5
171: dconst_0
172: dastore
173: aastore
174: dup
175: iconst_5
176: bipush        6
178: newarray       double
180: dup
181: iconst_0
182: dconst_0
183: dastore
184: dup
185: iconst_1
186: dconst_0
187: dastore
188: dup
189: iconst_2
190: dconst_0
191: dastore
192: dup
193: iconst_3
194: dconst_0
195: dastore
196: dup
197: iconst_4
198: dconst_0
199: dastore
200: dup
201: iconst_5
202: ldc2_w        #4
205: dastore
206: aastore
207: bipush        6
209: newarray       double
211: dup
212: iconst_0
213: dconst_0
214: dastore
215: dup
216: iconst_1
217: ldc2_w        #48
220: dastore
221: dup
222: iconst_2
223: ldc2_w        #50
226: dastore
227: dup
228: iconst_3
229: ldc2_w        #52
232: dastore
233: dup
234: iconst_4
235: ldc2_w        #54
238: dastore
239: dup
240: iconst_5
241: ldc2_w        #56
244: dastore
245: invokespecial #8
248: astore_1
249: new           #9
252: dup
253: getstatic     #10
256: new           #11
259: dup
260: ldc2_w        #12
263: ldc2_w        #12
266: invokespecial #14
269: invokespecial #15
272: astore_2
273: aload_2
274: iconst_5
275: anewarray     #16
278: dup
279: iconst_0
280: new           #17
283: dup
284: bipush        100
286: invokespecial #18
289: aastore
290: dup
291: iconst_1
292: aload_1
293: invokevirtual #19
296: aastore
297: dup
298: iconst_2
299: aload_1
300: invokevirtual #20
303: aastore
304: dup
305: iconst_3
306: getstatic     #21
309: aastore
310: dup
311: iconst_4
312: new           #22
315: dup
316: bipush        6
318: newarray       double
320: dup
321: iconst_0
322: dconst_0
323: dastore
324: dup
325: iconst_1
326: dconst_0
327: dastore
328: dup
329: iconst_2
330: dconst_0
331: dastore
332: dup
333: iconst_3
334: dconst_0
335: dastore
336: dup
337: iconst_4
338: dconst_0
339: dastore
340: dup
341: iconst_5
342: dconst_0
343: dastore
344: invokespecial #23
347: aastore
348: invokevirtual #28
351: astore_3
352: iconst_0
353: istore        4
355: iload         4
357: aload_1
358: getfield      #58
361: arraylength
362: if_icmpge     391
365: ldc2_w        #59
368: iload         4
370: i2d
371: dmul
372: aload_3
373: invokevirtual #31
376: iload         4
378: daload
379: ldc2_w        #32
382: invokestatic  #34
385: iinc          4, 1
388: goto          355
391: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testOneSet
Start line: 189
End line: 208
Method source code: 
    public void testOneSet() {
        LinearProblem problem = new LinearProblem(new double[][] {
                {  1,  0, 0 },
                { -1,  1, 0 },
                {  0, -1, 1 }
        }, new double[] { 1, 1, 1});
        NonLinearConjugateGradientOptimizer optimizer
            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                      new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getObjectiveFunction(),
                                 problem.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 0, 0, 0 }));
        Assert.assertEquals(1.0, optimum.getPoint()[0], 1.0e-10);
        Assert.assertEquals(2.0, optimum.getPoint()[1], 1.0e-10);
        Assert.assertEquals(3.0, optimum.getPoint()[2], 1.0e-10);

    }
Method byte code: 
0: new           #2
3: dup
4: iconst_3
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_3
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: dconst_0
20: dastore
21: dup
22: iconst_2
23: dconst_0
24: dastore
25: aastore
26: dup
27: iconst_1
28: iconst_3
29: newarray       double
31: dup
32: iconst_0
33: ldc2_w        #25
36: dastore
37: dup
38: iconst_1
39: dconst_1
40: dastore
41: dup
42: iconst_2
43: dconst_0
44: dastore
45: aastore
46: dup
47: iconst_2
48: iconst_3
49: newarray       double
51: dup
52: iconst_0
53: dconst_0
54: dastore
55: dup
56: iconst_1
57: ldc2_w        #25
60: dastore
61: dup
62: iconst_2
63: dconst_1
64: dastore
65: aastore
66: iconst_3
67: newarray       double
69: dup
70: iconst_0
71: dconst_1
72: dastore
73: dup
74: iconst_1
75: dconst_1
76: dastore
77: dup
78: iconst_2
79: dconst_1
80: dastore
81: invokespecial #8
84: astore_1
85: new           #9
88: dup
89: getstatic     #10
92: new           #11
95: dup
96: ldc2_w        #12
99: ldc2_w        #12
102: invokespecial #14
105: invokespecial #15
108: astore_2
109: aload_2
110: iconst_5
111: anewarray     #16
114: dup
115: iconst_0
116: new           #17
119: dup
120: bipush        100
122: invokespecial #18
125: aastore
126: dup
127: iconst_1
128: aload_1
129: invokevirtual #19
132: aastore
133: dup
134: iconst_2
135: aload_1
136: invokevirtual #20
139: aastore
140: dup
141: iconst_3
142: getstatic     #21
145: aastore
146: dup
147: iconst_4
148: new           #22
151: dup
152: iconst_3
153: newarray       double
155: dup
156: iconst_0
157: dconst_0
158: dastore
159: dup
160: iconst_1
161: dconst_0
162: dastore
163: dup
164: iconst_2
165: dconst_0
166: dastore
167: invokespecial #23
170: aastore
171: invokevirtual #28
174: astore_3
175: dconst_1
176: aload_3
177: invokevirtual #31
180: iconst_0
181: daload
182: ldc2_w        #32
185: invokestatic  #34
188: ldc2_w        #4
191: aload_3
192: invokevirtual #31
195: iconst_1
196: daload
197: ldc2_w        #32
200: invokestatic  #34
203: ldc2_w        #6
206: aload_3
207: invokevirtual #31
210: iconst_2
211: daload
212: ldc2_w        #32
215: invokestatic  #34
218: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testTwoSets
Start line: 211
End line: 255
Method source code: 
    public void testTwoSets() {
        final double epsilon = 1.0e-7;
        LinearProblem problem = new LinearProblem(new double[][] {
                {  2,  1,   0,  4,       0, 0 },
                { -4, -2,   3, -7,       0, 0 },
                {  4,  1,  -2,  8,       0, 0 },
                {  0, -3, -12, -1,       0, 0 },
                {  0,  0,   0,  0, epsilon, 1 },
                {  0,  0,   0,  0,       1, 1 }
        }, new double[] { 2, -9, 2, 2, 1 + epsilon * epsilon, 2});

        final Preconditioner preconditioner
            = new Preconditioner() {
                    public double[] precondition(double[] point, double[] r) {
                        double[] d = r.clone();
                        d[0] /=  72.0;
                        d[1] /=  30.0;
                        d[2] /= 314.0;
                        d[3] /= 260.0;
                        d[4] /= 2 * (1 + epsilon * epsilon);
                        d[5] /= 4.0;
                        return d;
                    }
                };

        NonLinearConjugateGradientOptimizer optimizer
           = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                     new SimpleValueChecker(1e-13, 1e-13),
                                                     new BrentSolver(),
                                                     preconditioner);

        PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getObjectiveFunction(),
                                 problem.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 0, 0, 0, 0, 0, 0 }));
        Assert.assertEquals( 3.0, optimum.getPoint()[0], 1.0e-10);
        Assert.assertEquals( 4.0, optimum.getPoint()[1], 1.0e-10);
        Assert.assertEquals(-1.0, optimum.getPoint()[2], 1.0e-10);
        Assert.assertEquals(-2.0, optimum.getPoint()[3], 1.0e-10);
        Assert.assertEquals( 1.0 + epsilon, optimum.getPoint()[4], 1.0e-10);
        Assert.assertEquals( 1.0 - epsilon, optimum.getPoint()[5], 1.0e-10);

    }
Method byte code: 
0: ldc2_w        #61
3: dstore_1
4: new           #2
7: dup
8: bipush        6
10: anewarray     #3
13: dup
14: iconst_0
15: bipush        6
17: newarray       double
19: dup
20: iconst_0
21: ldc2_w        #4
24: dastore
25: dup
26: iconst_1
27: dconst_1
28: dastore
29: dup
30: iconst_2
31: dconst_0
32: dastore
33: dup
34: iconst_3
35: ldc2_w        #42
38: dastore
39: dup
40: iconst_4
41: dconst_0
42: dastore
43: dup
44: iconst_5
45: dconst_0
46: dastore
47: aastore
48: dup
49: iconst_1
50: bipush        6
52: newarray       double
54: dup
55: iconst_0
56: ldc2_w        #63
59: dastore
60: dup
61: iconst_1
62: ldc2_w        #40
65: dastore
66: dup
67: iconst_2
68: ldc2_w        #6
71: dastore
72: dup
73: iconst_3
74: ldc2_w        #65
77: dastore
78: dup
79: iconst_4
80: dconst_0
81: dastore
82: dup
83: iconst_5
84: dconst_0
85: dastore
86: aastore
87: dup
88: iconst_2
89: bipush        6
91: newarray       double
93: dup
94: iconst_0
95: ldc2_w        #42
98: dastore
99: dup
100: iconst_1
101: dconst_1
102: dastore
103: dup
104: iconst_2
105: ldc2_w        #40
108: dastore
109: dup
110: iconst_3
111: ldc2_w        #67
114: dastore
115: dup
116: iconst_4
117: dconst_0
118: dastore
119: dup
120: iconst_5
121: dconst_0
122: dastore
123: aastore
124: dup
125: iconst_3
126: bipush        6
128: newarray       double
130: dup
131: iconst_0
132: dconst_0
133: dastore
134: dup
135: iconst_1
136: ldc2_w        #69
139: dastore
140: dup
141: iconst_2
142: ldc2_w        #71
145: dastore
146: dup
147: iconst_3
148: ldc2_w        #25
151: dastore
152: dup
153: iconst_4
154: dconst_0
155: dastore
156: dup
157: iconst_5
158: dconst_0
159: dastore
160: aastore
161: dup
162: iconst_4
163: bipush        6
165: newarray       double
167: dup
168: iconst_0
169: dconst_0
170: dastore
171: dup
172: iconst_1
173: dconst_0
174: dastore
175: dup
176: iconst_2
177: dconst_0
178: dastore
179: dup
180: iconst_3
181: dconst_0
182: dastore
183: dup
184: iconst_4
185: ldc2_w        #61
188: dastore
189: dup
190: iconst_5
191: dconst_1
192: dastore
193: aastore
194: dup
195: iconst_5
196: bipush        6
198: newarray       double
200: dup
201: iconst_0
202: dconst_0
203: dastore
204: dup
205: iconst_1
206: dconst_0
207: dastore
208: dup
209: iconst_2
210: dconst_0
211: dastore
212: dup
213: iconst_3
214: dconst_0
215: dastore
216: dup
217: iconst_4
218: dconst_1
219: dastore
220: dup
221: iconst_5
222: dconst_1
223: dastore
224: aastore
225: bipush        6
227: newarray       double
229: dup
230: iconst_0
231: ldc2_w        #4
234: dastore
235: dup
236: iconst_1
237: ldc2_w        #73
240: dastore
241: dup
242: iconst_2
243: ldc2_w        #4
246: dastore
247: dup
248: iconst_3
249: ldc2_w        #4
252: dastore
253: dup
254: iconst_4
255: ldc2_w        #75
258: dastore
259: dup
260: iconst_5
261: ldc2_w        #4
264: dastore
265: invokespecial #8
268: astore_3
269: new           #77
272: dup
273: aload_0
274: invokespecial #78
277: astore        4
279: new           #9
282: dup
283: getstatic     #10
286: new           #11
289: dup
290: ldc2_w        #79
293: ldc2_w        #79
296: invokespecial #14
299: new           #81
302: dup
303: invokespecial #82
306: aload         4
308: invokespecial #83
311: astore        5
313: aload         5
315: iconst_5
316: anewarray     #16
319: dup
320: iconst_0
321: new           #17
324: dup
325: bipush        100
327: invokespecial #18
330: aastore
331: dup
332: iconst_1
333: aload_3
334: invokevirtual #19
337: aastore
338: dup
339: iconst_2
340: aload_3
341: invokevirtual #20
344: aastore
345: dup
346: iconst_3
347: getstatic     #21
350: aastore
351: dup
352: iconst_4
353: new           #22
356: dup
357: bipush        6
359: newarray       double
361: dup
362: iconst_0
363: dconst_0
364: dastore
365: dup
366: iconst_1
367: dconst_0
368: dastore
369: dup
370: iconst_2
371: dconst_0
372: dastore
373: dup
374: iconst_3
375: dconst_0
376: dastore
377: dup
378: iconst_4
379: dconst_0
380: dastore
381: dup
382: iconst_5
383: dconst_0
384: dastore
385: invokespecial #23
388: aastore
389: invokevirtual #28
392: astore        6
394: ldc2_w        #6
397: aload         6
399: invokevirtual #31
402: iconst_0
403: daload
404: ldc2_w        #32
407: invokestatic  #34
410: ldc2_w        #42
413: aload         6
415: invokevirtual #31
418: iconst_1
419: daload
420: ldc2_w        #32
423: invokestatic  #34
426: ldc2_w        #25
429: aload         6
431: invokevirtual #31
434: iconst_2
435: daload
436: ldc2_w        #32
439: invokestatic  #34
442: ldc2_w        #40
445: aload         6
447: invokevirtual #31
450: iconst_3
451: daload
452: ldc2_w        #32
455: invokestatic  #34
458: ldc2_w        #84
461: aload         6
463: invokevirtual #31
466: iconst_4
467: daload
468: ldc2_w        #32
471: invokestatic  #34
474: ldc2_w        #86
477: aload         6
479: invokevirtual #31
482: iconst_5
483: daload
484: ldc2_w        #32
487: invokestatic  #34
490: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testNonInversible
Start line: 258
End line: 274
Method source code: 
    public void testNonInversible() {
        LinearProblem problem = new LinearProblem(new double[][] {
                {  1, 2, -3 },
                {  2, 1,  3 },
                { -3, 0, -9 }
        }, new double[] { 1, 1, 1 });
        NonLinearConjugateGradientOptimizer optimizer
            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                      new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getObjectiveFunction(),
                                 problem.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 0, 0, 0 }));
        Assert.assertTrue(optimum.getValue() > 0.5);
    }
Method byte code: 
0: new           #2
3: dup
4: iconst_3
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_3
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: ldc2_w        #4
22: dastore
23: dup
24: iconst_2
25: ldc2_w        #69
28: dastore
29: aastore
30: dup
31: iconst_1
32: iconst_3
33: newarray       double
35: dup
36: iconst_0
37: ldc2_w        #4
40: dastore
41: dup
42: iconst_1
43: dconst_1
44: dastore
45: dup
46: iconst_2
47: ldc2_w        #6
50: dastore
51: aastore
52: dup
53: iconst_2
54: iconst_3
55: newarray       double
57: dup
58: iconst_0
59: ldc2_w        #69
62: dastore
63: dup
64: iconst_1
65: dconst_0
66: dastore
67: dup
68: iconst_2
69: ldc2_w        #73
72: dastore
73: aastore
74: iconst_3
75: newarray       double
77: dup
78: iconst_0
79: dconst_1
80: dastore
81: dup
82: iconst_1
83: dconst_1
84: dastore
85: dup
86: iconst_2
87: dconst_1
88: dastore
89: invokespecial #8
92: astore_1
93: new           #9
96: dup
97: getstatic     #10
100: new           #11
103: dup
104: ldc2_w        #12
107: ldc2_w        #12
110: invokespecial #14
113: invokespecial #15
116: astore_2
117: aload_2
118: iconst_5
119: anewarray     #16
122: dup
123: iconst_0
124: new           #17
127: dup
128: bipush        100
130: invokespecial #18
133: aastore
134: dup
135: iconst_1
136: aload_1
137: invokevirtual #19
140: aastore
141: dup
142: iconst_2
143: aload_1
144: invokevirtual #20
147: aastore
148: dup
149: iconst_3
150: getstatic     #21
153: aastore
154: dup
155: iconst_4
156: new           #22
159: dup
160: iconst_3
161: newarray       double
163: dup
164: iconst_0
165: dconst_0
166: dastore
167: dup
168: iconst_1
169: dconst_0
170: dastore
171: dup
172: iconst_2
173: dconst_0
174: dastore
175: invokespecial #23
178: aastore
179: invokevirtual #28
182: astore_3
183: aload_3
184: invokevirtual #35
187: checkcast     #36
190: invokevirtual #37
193: ldc2_w        #88
196: dcmpl
197: ifle          204
200: iconst_1
201: goto          205
204: iconst_0
205: invokestatic  #39
208: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testIllConditioned
Start line: 277
End line: 316
Method source code: 
    public void testIllConditioned() {
        LinearProblem problem1 = new LinearProblem(new double[][] {
                { 10.0, 7.0,  8.0,  7.0 },
                {  7.0, 5.0,  6.0,  5.0 },
                {  8.0, 6.0, 10.0,  9.0 },
                {  7.0, 5.0,  9.0, 10.0 }
        }, new double[] { 32, 23, 33, 31 });
        NonLinearConjugateGradientOptimizer optimizer
            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                      new SimpleValueChecker(1e-13, 1e-13),
                                                      new BrentSolver(1e-15, 1e-15));
        PointValuePair optimum1
            = optimizer.optimize(new MaxEval(200),
                                 problem1.getObjectiveFunction(),
                                 problem1.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 0, 1, 2, 3 }));
        Assert.assertEquals(1.0, optimum1.getPoint()[0], 1.0e-4);
        Assert.assertEquals(1.0, optimum1.getPoint()[1], 1.0e-4);
        Assert.assertEquals(1.0, optimum1.getPoint()[2], 1.0e-4);
        Assert.assertEquals(1.0, optimum1.getPoint()[3], 1.0e-4);

        LinearProblem problem2 = new LinearProblem(new double[][] {
                { 10.00, 7.00, 8.10, 7.20 },
                {  7.08, 5.04, 6.00, 5.00 },
                {  8.00, 5.98, 9.89, 9.00 },
                {  6.99, 4.99, 9.00, 9.98 }
        }, new double[] { 32, 23, 33, 31 });
        PointValuePair optimum2
            = optimizer.optimize(new MaxEval(200),
                                 problem2.getObjectiveFunction(),
                                 problem2.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 0, 1, 2, 3 }));
        Assert.assertEquals(-81.0, optimum2.getPoint()[0], 1.0e-1);
        Assert.assertEquals(137.0, optimum2.getPoint()[1], 1.0e-1);
        Assert.assertEquals(-34.0, optimum2.getPoint()[2], 1.0e-1);
        Assert.assertEquals( 22.0, optimum2.getPoint()[3], 1.0e-1);

    }
Method byte code: 
0: new           #2
3: dup
4: iconst_4
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_4
11: newarray       double
13: dup
14: iconst_0
15: ldc2_w        #90
18: dastore
19: dup
20: iconst_1
21: ldc2_w        #46
24: dastore
25: dup
26: iconst_2
27: ldc2_w        #67
30: dastore
31: dup
32: iconst_3
33: ldc2_w        #46
36: dastore
37: aastore
38: dup
39: iconst_1
40: iconst_4
41: newarray       double
43: dup
44: iconst_0
45: ldc2_w        #46
48: dastore
49: dup
50: iconst_1
51: ldc2_w        #92
54: dastore
55: dup
56: iconst_2
57: ldc2_w        #44
60: dastore
61: dup
62: iconst_3
63: ldc2_w        #92
66: dastore
67: aastore
68: dup
69: iconst_2
70: iconst_4
71: newarray       double
73: dup
74: iconst_0
75: ldc2_w        #67
78: dastore
79: dup
80: iconst_1
81: ldc2_w        #44
84: dastore
85: dup
86: iconst_2
87: ldc2_w        #90
90: dastore
91: dup
92: iconst_3
93: ldc2_w        #94
96: dastore
97: aastore
98: dup
99: iconst_3
100: iconst_4
101: newarray       double
103: dup
104: iconst_0
105: ldc2_w        #46
108: dastore
109: dup
110: iconst_1
111: ldc2_w        #92
114: dastore
115: dup
116: iconst_2
117: ldc2_w        #94
120: dastore
121: dup
122: iconst_3
123: ldc2_w        #90
126: dastore
127: aastore
128: iconst_4
129: newarray       double
131: dup
132: iconst_0
133: ldc2_w        #96
136: dastore
137: dup
138: iconst_1
139: ldc2_w        #98
142: dastore
143: dup
144: iconst_2
145: ldc2_w        #100
148: dastore
149: dup
150: iconst_3
151: ldc2_w        #102
154: dastore
155: invokespecial #8
158: astore_1
159: new           #9
162: dup
163: getstatic     #10
166: new           #11
169: dup
170: ldc2_w        #79
173: ldc2_w        #79
176: invokespecial #14
179: new           #81
182: dup
183: ldc2_w        #104
186: ldc2_w        #104
189: invokespecial #106
192: invokespecial #107
195: astore_2
196: aload_2
197: iconst_5
198: anewarray     #16
201: dup
202: iconst_0
203: new           #17
206: dup
207: sipush        200
210: invokespecial #18
213: aastore
214: dup
215: iconst_1
216: aload_1
217: invokevirtual #19
220: aastore
221: dup
222: iconst_2
223: aload_1
224: invokevirtual #20
227: aastore
228: dup
229: iconst_3
230: getstatic     #21
233: aastore
234: dup
235: iconst_4
236: new           #22
239: dup
240: iconst_4
241: newarray       double
243: dup
244: iconst_0
245: dconst_0
246: dastore
247: dup
248: iconst_1
249: dconst_1
250: dastore
251: dup
252: iconst_2
253: ldc2_w        #4
256: dastore
257: dup
258: iconst_3
259: ldc2_w        #6
262: dastore
263: invokespecial #23
266: aastore
267: invokevirtual #28
270: astore_3
271: dconst_1
272: aload_3
273: invokevirtual #31
276: iconst_0
277: daload
278: ldc2_w        #108
281: invokestatic  #34
284: dconst_1
285: aload_3
286: invokevirtual #31
289: iconst_1
290: daload
291: ldc2_w        #108
294: invokestatic  #34
297: dconst_1
298: aload_3
299: invokevirtual #31
302: iconst_2
303: daload
304: ldc2_w        #108
307: invokestatic  #34
310: dconst_1
311: aload_3
312: invokevirtual #31
315: iconst_3
316: daload
317: ldc2_w        #108
320: invokestatic  #34
323: new           #2
326: dup
327: iconst_4
328: anewarray     #3
331: dup
332: iconst_0
333: iconst_4
334: newarray       double
336: dup
337: iconst_0
338: ldc2_w        #90
341: dastore
342: dup
343: iconst_1
344: ldc2_w        #46
347: dastore
348: dup
349: iconst_2
350: ldc2_w        #110
353: dastore
354: dup
355: iconst_3
356: ldc2_w        #112
359: dastore
360: aastore
361: dup
362: iconst_1
363: iconst_4
364: newarray       double
366: dup
367: iconst_0
368: ldc2_w        #114
371: dastore
372: dup
373: iconst_1
374: ldc2_w        #116
377: dastore
378: dup
379: iconst_2
380: ldc2_w        #44
383: dastore
384: dup
385: iconst_3
386: ldc2_w        #92
389: dastore
390: aastore
391: dup
392: iconst_2
393: iconst_4
394: newarray       double
396: dup
397: iconst_0
398: ldc2_w        #67
401: dastore
402: dup
403: iconst_1
404: ldc2_w        #118
407: dastore
408: dup
409: iconst_2
410: ldc2_w        #120
413: dastore
414: dup
415: iconst_3
416: ldc2_w        #94
419: dastore
420: aastore
421: dup
422: iconst_3
423: iconst_4
424: newarray       double
426: dup
427: iconst_0
428: ldc2_w        #122
431: dastore
432: dup
433: iconst_1
434: ldc2_w        #124
437: dastore
438: dup
439: iconst_2
440: ldc2_w        #94
443: dastore
444: dup
445: iconst_3
446: ldc2_w        #126
449: dastore
450: aastore
451: iconst_4
452: newarray       double
454: dup
455: iconst_0
456: ldc2_w        #96
459: dastore
460: dup
461: iconst_1
462: ldc2_w        #98
465: dastore
466: dup
467: iconst_2
468: ldc2_w        #100
471: dastore
472: dup
473: iconst_3
474: ldc2_w        #102
477: dastore
478: invokespecial #8
481: astore        4
483: aload_2
484: iconst_5
485: anewarray     #16
488: dup
489: iconst_0
490: new           #17
493: dup
494: sipush        200
497: invokespecial #18
500: aastore
501: dup
502: iconst_1
503: aload         4
505: invokevirtual #19
508: aastore
509: dup
510: iconst_2
511: aload         4
513: invokevirtual #20
516: aastore
517: dup
518: iconst_3
519: getstatic     #21
522: aastore
523: dup
524: iconst_4
525: new           #22
528: dup
529: iconst_4
530: newarray       double
532: dup
533: iconst_0
534: dconst_0
535: dastore
536: dup
537: iconst_1
538: dconst_1
539: dastore
540: dup
541: iconst_2
542: ldc2_w        #4
545: dastore
546: dup
547: iconst_3
548: ldc2_w        #6
551: dastore
552: invokespecial #23
555: aastore
556: invokevirtual #28
559: astore        5
561: ldc2_w        #128
564: aload         5
566: invokevirtual #31
569: iconst_0
570: daload
571: ldc2_w        #130
574: invokestatic  #34
577: ldc2_w        #132
580: aload         5
582: invokevirtual #31
585: iconst_1
586: daload
587: ldc2_w        #130
590: invokestatic  #34
593: ldc2_w        #134
596: aload         5
598: invokevirtual #31
601: iconst_2
602: daload
603: ldc2_w        #130
606: invokestatic  #34
609: ldc2_w        #136
612: aload         5
614: invokevirtual #31
617: iconst_3
618: daload
619: ldc2_w        #130
622: invokestatic  #34
625: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testMoreEstimatedParametersSimple
Start line: 319
End line: 337
Method source code: 
    public void testMoreEstimatedParametersSimple() {
        LinearProblem problem = new LinearProblem(new double[][] {
                { 3.0, 2.0,  0.0, 0.0 },
                { 0.0, 1.0, -1.0, 1.0 },
                { 2.0, 0.0,  1.0, 0.0 }
        }, new double[] { 7.0, 3.0, 5.0 });

        NonLinearConjugateGradientOptimizer optimizer
            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                      new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getObjectiveFunction(),
                                 problem.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 7, 6, 5, 4 }));
        Assert.assertEquals(0, optimum.getValue(), 1.0e-10);

    }
Method byte code: 
0: new           #2
3: dup
4: iconst_3
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_4
11: newarray       double
13: dup
14: iconst_0
15: ldc2_w        #6
18: dastore
19: dup
20: iconst_1
21: ldc2_w        #4
24: dastore
25: dup
26: iconst_2
27: dconst_0
28: dastore
29: dup
30: iconst_3
31: dconst_0
32: dastore
33: aastore
34: dup
35: iconst_1
36: iconst_4
37: newarray       double
39: dup
40: iconst_0
41: dconst_0
42: dastore
43: dup
44: iconst_1
45: dconst_1
46: dastore
47: dup
48: iconst_2
49: ldc2_w        #25
52: dastore
53: dup
54: iconst_3
55: dconst_1
56: dastore
57: aastore
58: dup
59: iconst_2
60: iconst_4
61: newarray       double
63: dup
64: iconst_0
65: ldc2_w        #4
68: dastore
69: dup
70: iconst_1
71: dconst_0
72: dastore
73: dup
74: iconst_2
75: dconst_1
76: dastore
77: dup
78: iconst_3
79: dconst_0
80: dastore
81: aastore
82: iconst_3
83: newarray       double
85: dup
86: iconst_0
87: ldc2_w        #46
90: dastore
91: dup
92: iconst_1
93: ldc2_w        #6
96: dastore
97: dup
98: iconst_2
99: ldc2_w        #92
102: dastore
103: invokespecial #8
106: astore_1
107: new           #9
110: dup
111: getstatic     #10
114: new           #11
117: dup
118: ldc2_w        #12
121: ldc2_w        #12
124: invokespecial #14
127: invokespecial #15
130: astore_2
131: aload_2
132: iconst_5
133: anewarray     #16
136: dup
137: iconst_0
138: new           #17
141: dup
142: bipush        100
144: invokespecial #18
147: aastore
148: dup
149: iconst_1
150: aload_1
151: invokevirtual #19
154: aastore
155: dup
156: iconst_2
157: aload_1
158: invokevirtual #20
161: aastore
162: dup
163: iconst_3
164: getstatic     #21
167: aastore
168: dup
169: iconst_4
170: new           #22
173: dup
174: iconst_4
175: newarray       double
177: dup
178: iconst_0
179: ldc2_w        #46
182: dastore
183: dup
184: iconst_1
185: ldc2_w        #44
188: dastore
189: dup
190: iconst_2
191: ldc2_w        #92
194: dastore
195: dup
196: iconst_3
197: ldc2_w        #42
200: dastore
201: invokespecial #23
204: aastore
205: invokevirtual #28
208: astore_3
209: dconst_0
210: aload_3
211: invokevirtual #35
214: checkcast     #36
217: invokevirtual #37
220: ldc2_w        #32
223: invokestatic  #34
226: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testMoreEstimatedParametersUnsorted
Start line: 340
End line: 358
Method source code: 
    public void testMoreEstimatedParametersUnsorted() {
        LinearProblem problem = new LinearProblem(new double[][] {
                 { 1.0, 1.0,  0.0,  0.0, 0.0,  0.0 },
                 { 0.0, 0.0,  1.0,  1.0, 1.0,  0.0 },
                 { 0.0, 0.0,  0.0,  0.0, 1.0, -1.0 },
                 { 0.0, 0.0, -1.0,  1.0, 0.0,  1.0 },
                 { 0.0, 0.0,  0.0, -1.0, 1.0,  0.0 }
        }, new double[] { 3.0, 12.0, -1.0, 7.0, 1.0 });
        NonLinearConjugateGradientOptimizer optimizer
           = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                     new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getObjectiveFunction(),
                                 problem.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 2, 2, 2, 2, 2, 2 }));
        Assert.assertEquals(0, optimum.getValue(), 1.0e-10);
    }
Method byte code: 
0: new           #2
3: dup
4: iconst_5
5: anewarray     #3
8: dup
9: iconst_0
10: bipush        6
12: newarray       double
14: dup
15: iconst_0
16: dconst_1
17: dastore
18: dup
19: iconst_1
20: dconst_1
21: dastore
22: dup
23: iconst_2
24: dconst_0
25: dastore
26: dup
27: iconst_3
28: dconst_0
29: dastore
30: dup
31: iconst_4
32: dconst_0
33: dastore
34: dup
35: iconst_5
36: dconst_0
37: dastore
38: aastore
39: dup
40: iconst_1
41: bipush        6
43: newarray       double
45: dup
46: iconst_0
47: dconst_0
48: dastore
49: dup
50: iconst_1
51: dconst_0
52: dastore
53: dup
54: iconst_2
55: dconst_1
56: dastore
57: dup
58: iconst_3
59: dconst_1
60: dastore
61: dup
62: iconst_4
63: dconst_1
64: dastore
65: dup
66: iconst_5
67: dconst_0
68: dastore
69: aastore
70: dup
71: iconst_2
72: bipush        6
74: newarray       double
76: dup
77: iconst_0
78: dconst_0
79: dastore
80: dup
81: iconst_1
82: dconst_0
83: dastore
84: dup
85: iconst_2
86: dconst_0
87: dastore
88: dup
89: iconst_3
90: dconst_0
91: dastore
92: dup
93: iconst_4
94: dconst_1
95: dastore
96: dup
97: iconst_5
98: ldc2_w        #25
101: dastore
102: aastore
103: dup
104: iconst_3
105: bipush        6
107: newarray       double
109: dup
110: iconst_0
111: dconst_0
112: dastore
113: dup
114: iconst_1
115: dconst_0
116: dastore
117: dup
118: iconst_2
119: ldc2_w        #25
122: dastore
123: dup
124: iconst_3
125: dconst_1
126: dastore
127: dup
128: iconst_4
129: dconst_0
130: dastore
131: dup
132: iconst_5
133: dconst_1
134: dastore
135: aastore
136: dup
137: iconst_4
138: bipush        6
140: newarray       double
142: dup
143: iconst_0
144: dconst_0
145: dastore
146: dup
147: iconst_1
148: dconst_0
149: dastore
150: dup
151: iconst_2
152: dconst_0
153: dastore
154: dup
155: iconst_3
156: ldc2_w        #25
159: dastore
160: dup
161: iconst_4
162: dconst_1
163: dastore
164: dup
165: iconst_5
166: dconst_0
167: dastore
168: aastore
169: iconst_5
170: newarray       double
172: dup
173: iconst_0
174: ldc2_w        #6
177: dastore
178: dup
179: iconst_1
180: ldc2_w        #138
183: dastore
184: dup
185: iconst_2
186: ldc2_w        #25
189: dastore
190: dup
191: iconst_3
192: ldc2_w        #46
195: dastore
196: dup
197: iconst_4
198: dconst_1
199: dastore
200: invokespecial #8
203: astore_1
204: new           #9
207: dup
208: getstatic     #10
211: new           #11
214: dup
215: ldc2_w        #12
218: ldc2_w        #12
221: invokespecial #14
224: invokespecial #15
227: astore_2
228: aload_2
229: iconst_5
230: anewarray     #16
233: dup
234: iconst_0
235: new           #17
238: dup
239: bipush        100
241: invokespecial #18
244: aastore
245: dup
246: iconst_1
247: aload_1
248: invokevirtual #19
251: aastore
252: dup
253: iconst_2
254: aload_1
255: invokevirtual #20
258: aastore
259: dup
260: iconst_3
261: getstatic     #21
264: aastore
265: dup
266: iconst_4
267: new           #22
270: dup
271: bipush        6
273: newarray       double
275: dup
276: iconst_0
277: ldc2_w        #4
280: dastore
281: dup
282: iconst_1
283: ldc2_w        #4
286: dastore
287: dup
288: iconst_2
289: ldc2_w        #4
292: dastore
293: dup
294: iconst_3
295: ldc2_w        #4
298: dastore
299: dup
300: iconst_4
301: ldc2_w        #4
304: dastore
305: dup
306: iconst_5
307: ldc2_w        #4
310: dastore
311: invokespecial #23
314: aastore
315: invokevirtual #28
318: astore_3
319: dconst_0
320: aload_3
321: invokevirtual #35
324: checkcast     #36
327: invokevirtual #37
330: ldc2_w        #32
333: invokestatic  #34
336: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testRedundantEquations
Start line: 361
End line: 380
Method source code: 
    public void testRedundantEquations() {
        LinearProblem problem = new LinearProblem(new double[][] {
                { 1.0,  1.0 },
                { 1.0, -1.0 },
                { 1.0,  3.0 }
        }, new double[] { 3.0, 1.0, 5.0 });

        NonLinearConjugateGradientOptimizer optimizer
            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                      new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getObjectiveFunction(),
                                 problem.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 1 }));
        Assert.assertEquals(2.0, optimum.getPoint()[0], 1.0e-8);
        Assert.assertEquals(1.0, optimum.getPoint()[1], 1.0e-8);

    }
Method byte code: 
0: new           #2
3: dup
4: iconst_3
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_2
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: dconst_1
20: dastore
21: aastore
22: dup
23: iconst_1
24: iconst_2
25: newarray       double
27: dup
28: iconst_0
29: dconst_1
30: dastore
31: dup
32: iconst_1
33: ldc2_w        #25
36: dastore
37: aastore
38: dup
39: iconst_2
40: iconst_2
41: newarray       double
43: dup
44: iconst_0
45: dconst_1
46: dastore
47: dup
48: iconst_1
49: ldc2_w        #6
52: dastore
53: aastore
54: iconst_3
55: newarray       double
57: dup
58: iconst_0
59: ldc2_w        #6
62: dastore
63: dup
64: iconst_1
65: dconst_1
66: dastore
67: dup
68: iconst_2
69: ldc2_w        #92
72: dastore
73: invokespecial #8
76: astore_1
77: new           #9
80: dup
81: getstatic     #10
84: new           #11
87: dup
88: ldc2_w        #12
91: ldc2_w        #12
94: invokespecial #14
97: invokespecial #15
100: astore_2
101: aload_2
102: iconst_5
103: anewarray     #16
106: dup
107: iconst_0
108: new           #17
111: dup
112: bipush        100
114: invokespecial #18
117: aastore
118: dup
119: iconst_1
120: aload_1
121: invokevirtual #19
124: aastore
125: dup
126: iconst_2
127: aload_1
128: invokevirtual #20
131: aastore
132: dup
133: iconst_3
134: getstatic     #21
137: aastore
138: dup
139: iconst_4
140: new           #22
143: dup
144: iconst_2
145: newarray       double
147: dup
148: iconst_0
149: dconst_1
150: dastore
151: dup
152: iconst_1
153: dconst_1
154: dastore
155: invokespecial #23
158: aastore
159: invokevirtual #28
162: astore_3
163: ldc2_w        #4
166: aload_3
167: invokevirtual #31
170: iconst_0
171: daload
172: ldc2_w        #140
175: invokestatic  #34
178: dconst_1
179: aload_3
180: invokevirtual #31
183: iconst_1
184: daload
185: ldc2_w        #140
188: invokestatic  #34
191: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testInconsistentEquations
Start line: 383
End line: 401
Method source code: 
    public void testInconsistentEquations() {
        LinearProblem problem = new LinearProblem(new double[][] {
                { 1.0,  1.0 },
                { 1.0, -1.0 },
                { 1.0,  3.0 }
        }, new double[] { 3.0, 1.0, 4.0 });

        NonLinearConjugateGradientOptimizer optimizer
            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                      new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getObjectiveFunction(),
                                 problem.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 1 }));
        Assert.assertTrue(optimum.getValue() > 0.1);

    }
Method byte code: 
0: new           #2
3: dup
4: iconst_3
5: anewarray     #3
8: dup
9: iconst_0
10: iconst_2
11: newarray       double
13: dup
14: iconst_0
15: dconst_1
16: dastore
17: dup
18: iconst_1
19: dconst_1
20: dastore
21: aastore
22: dup
23: iconst_1
24: iconst_2
25: newarray       double
27: dup
28: iconst_0
29: dconst_1
30: dastore
31: dup
32: iconst_1
33: ldc2_w        #25
36: dastore
37: aastore
38: dup
39: iconst_2
40: iconst_2
41: newarray       double
43: dup
44: iconst_0
45: dconst_1
46: dastore
47: dup
48: iconst_1
49: ldc2_w        #6
52: dastore
53: aastore
54: iconst_3
55: newarray       double
57: dup
58: iconst_0
59: ldc2_w        #6
62: dastore
63: dup
64: iconst_1
65: dconst_1
66: dastore
67: dup
68: iconst_2
69: ldc2_w        #42
72: dastore
73: invokespecial #8
76: astore_1
77: new           #9
80: dup
81: getstatic     #10
84: new           #11
87: dup
88: ldc2_w        #12
91: ldc2_w        #12
94: invokespecial #14
97: invokespecial #15
100: astore_2
101: aload_2
102: iconst_5
103: anewarray     #16
106: dup
107: iconst_0
108: new           #17
111: dup
112: bipush        100
114: invokespecial #18
117: aastore
118: dup
119: iconst_1
120: aload_1
121: invokevirtual #19
124: aastore
125: dup
126: iconst_2
127: aload_1
128: invokevirtual #20
131: aastore
132: dup
133: iconst_3
134: getstatic     #21
137: aastore
138: dup
139: iconst_4
140: new           #22
143: dup
144: iconst_2
145: newarray       double
147: dup
148: iconst_0
149: dconst_1
150: dastore
151: dup
152: iconst_1
153: dconst_1
154: dastore
155: invokespecial #23
158: aastore
159: invokevirtual #28
162: astore_3
163: aload_3
164: invokevirtual #35
167: checkcast     #36
170: invokevirtual #37
173: ldc2_w        #130
176: dcmpl
177: ifle          184
180: iconst_1
181: goto          185
184: iconst_0
185: invokestatic  #39
188: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.class
Class name: NonLinearConjugateGradientOptimizerTest
Method name: testCircleFitting
Start line: 404
End line: 425
Method source code: 
    public void testCircleFitting() {
        CircleScalar problem = new CircleScalar();
        problem.addPoint( 30.0,  68.0);
        problem.addPoint( 50.0,  -6.0);
        problem.addPoint(110.0, -20.0);
        problem.addPoint( 35.0,  15.0);
        problem.addPoint( 45.0,  97.0);
        NonLinearConjugateGradientOptimizer optimizer
           = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                     new SimpleValueChecker(1e-30, 1e-30),
                                                     new BrentSolver(1e-15, 1e-13));
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getObjectiveFunction(),
                                 problem.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 98.680, 47.345 }));
        Vector2D center = new Vector2D(optimum.getPointRef()[0], optimum.getPointRef()[1]);
        Assert.assertEquals(69.960161753, problem.getRadius(center), 1.0e-8);
        Assert.assertEquals(96.075902096, center.getX(), 1.0e-8);
        Assert.assertEquals(48.135167894, center.getY(), 1.0e-8);
    }
Method byte code: 
0: new           #142
3: dup
4: invokespecial #143
7: astore_1
8: aload_1
9: ldc2_w        #144
12: ldc2_w        #146
15: invokevirtual #148
18: aload_1
19: ldc2_w        #149
22: ldc2_w        #151
25: invokevirtual #148
28: aload_1
29: ldc2_w        #153
32: ldc2_w        #155
35: invokevirtual #148
38: aload_1
39: ldc2_w        #157
42: ldc2_w        #159
45: invokevirtual #148
48: aload_1
49: ldc2_w        #161
52: ldc2_w        #163
55: invokevirtual #148
58: new           #9
61: dup
62: getstatic     #10
65: new           #11
68: dup
69: ldc2_w        #165
72: ldc2_w        #165
75: invokespecial #14
78: new           #81
81: dup
82: ldc2_w        #104
85: ldc2_w        #79
88: invokespecial #106
91: invokespecial #107
94: astore_2
95: aload_2
96: iconst_5
97: anewarray     #16
100: dup
101: iconst_0
102: new           #17
105: dup
106: bipush        100
108: invokespecial #18
111: aastore
112: dup
113: iconst_1
114: aload_1
115: invokevirtual #167
118: aastore
119: dup
120: iconst_2
121: aload_1
122: invokevirtual #168
125: aastore
126: dup
127: iconst_3
128: getstatic     #21
131: aastore
132: dup
133: iconst_4
134: new           #22
137: dup
138: iconst_2
139: newarray       double
141: dup
142: iconst_0
143: ldc2_w        #169
146: dastore
147: dup
148: iconst_1
149: ldc2_w        #171
152: dastore
153: invokespecial #23
156: aastore
157: invokevirtual #28
160: astore_3
161: new           #173
164: dup
165: aload_3
166: invokevirtual #174
169: iconst_0
170: daload
171: aload_3
172: invokevirtual #174
175: iconst_1
176: daload
177: invokespecial #175
180: astore        4
182: ldc2_w        #176
185: aload_1
186: aload         4
188: invokevirtual #178
191: ldc2_w        #140
194: invokestatic  #34
197: ldc2_w        #179
200: aload         4
202: invokevirtual #181
205: ldc2_w        #140
208: invokestatic  #34
211: ldc2_w        #182
214: aload         4
216: invokevirtual #184
219: ldc2_w        #140
222: invokestatic  #34
225: return
}
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer_ESTest.class
Class name: NonLinearConjugateGradientOptimizer_ESTest
Method name: test0
Start line: 23
End line: 28
Method source code: 
  public void test0()  throws Throwable  {
      NonLinearConjugateGradientOptimizer.Formula nonLinearConjugateGradientOptimizer_Formula0 = NonLinearConjugateGradientOptimizer.Formula.FLETCHER_REEVES;
      BrentSolver brentSolver0 = new BrentSolver();
      NonLinearConjugateGradientOptimizer nonLinearConjugateGradientOptimizer0 = new NonLinearConjugateGradientOptimizer(nonLinearConjugateGradientOptimizer_Formula0, (ConvergenceChecker<PointValuePair>) null, brentSolver0);
      assertNull(nonLinearConjugateGradientOptimizer0.getGoalType());
  }
Method byte code: 
0: getstatic     #2
3: astore_1
4: new           #3
7: dup
8: invokespecial #4
11: astore_2
12: new           #5
15: dup
16: aload_1
17: aconst_null
18: checkcast     #6
21: aload_2
22: invokespecial #7
25: astore_3
26: aload_3
27: invokevirtual #8
30: invokestatic  #9
33: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer_ESTest.class
Class name: NonLinearConjugateGradientOptimizer_ESTest
Method name: test1
Start line: 31
End line: 36
Method source code: 
  public void test1()  throws Throwable  {
      NonLinearConjugateGradientOptimizer.IdentityPreconditioner nonLinearConjugateGradientOptimizer_IdentityPreconditioner0 = new NonLinearConjugateGradientOptimizer.IdentityPreconditioner();
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = nonLinearConjugateGradientOptimizer_IdentityPreconditioner0.precondition(doubleArray0, doubleArray0);
      assertEquals(3, doubleArray1.length);
  }
Method byte code: 
0: new           #10
3: dup
4: invokespecial #11
7: astore_1
8: iconst_3
9: newarray       double
11: astore_2
12: aload_1
13: aload_2
14: aload_2
15: invokevirtual #12
18: astore_3
19: ldc2_w        #13
22: aload_3
23: arraylength
24: i2l
25: invokestatic  #15
28: return
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer_ESTest.class
Class name: NonLinearConjugateGradientOptimizer_ESTest
Method name: test2
Start line: 39
End line: 56
Method source code: 
  public void test2()  throws Throwable  {
      NonLinearConjugateGradientOptimizer.Formula nonLinearConjugateGradientOptimizer_Formula0 = NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE;
      NonLinearConjugateGradientOptimizer nonLinearConjugateGradientOptimizer0 = new NonLinearConjugateGradientOptimizer(nonLinearConjugateGradientOptimizer_Formula0, (ConvergenceChecker<PointValuePair>) null);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[1];
      NonLinearConjugateGradientOptimizer.BracketingStep nonLinearConjugateGradientOptimizer_BracketingStep0 = new NonLinearConjugateGradientOptimizer.BracketingStep(0.0);
      optimizationDataArray0[0] = (OptimizationData) nonLinearConjugateGradientOptimizer_BracketingStep0;
      // Undeclared exception!
      try { 
        nonLinearConjugateGradientOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer", e);
      }
  }
Method byte code: 
0: getstatic     #16
3: astore_1
4: new           #5
7: dup
8: aload_1
9: aconst_null
10: checkcast     #6
13: invokespecial #17
16: astore_2
17: iconst_1
18: anewarray     #18
21: astore_3
22: new           #19
25: dup
26: dconst_0
27: invokespecial #20
30: astore        4
32: aload_3
33: iconst_0
34: aload         4
36: aastore
37: aload_2
38: aload_3
39: invokevirtual #21
42: pop
43: ldc           #22
45: invokestatic  #23
48: goto          60
51: astore        5
53: ldc           #25
55: aload         5
57: invokestatic  #26
60: return
Exception table:
from    to  target type
37    48    51   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer_ESTest.class
Class name: NonLinearConjugateGradientOptimizer_ESTest
Method name: test3
Start line: 59
End line: 74
Method source code: 
  public void test3()  throws Throwable  {
      NonLinearConjugateGradientOptimizer.Formula nonLinearConjugateGradientOptimizer_Formula0 = NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE;
      NonLinearConjugateGradientOptimizer nonLinearConjugateGradientOptimizer0 = new NonLinearConjugateGradientOptimizer(nonLinearConjugateGradientOptimizer_Formula0, (ConvergenceChecker<PointValuePair>) null);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[6];
      // Undeclared exception!
      try { 
        nonLinearConjugateGradientOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer", e);
      }
  }
Method byte code: 
0: getstatic     #16
3: astore_1
4: new           #5
7: dup
8: aload_1
9: aconst_null
10: checkcast     #6
13: invokespecial #17
16: astore_2
17: bipush        6
19: anewarray     #18
22: astore_3
23: aload_2
24: aload_3
25: invokevirtual #21
28: pop
29: ldc           #22
31: invokestatic  #23
34: goto          46
37: astore        4
39: ldc           #25
41: aload         4
43: invokestatic  #26
46: return
Exception table:
from    to  target type
23    34    37   Class java/lang/NullPointerException
Source File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer_ESTest.java
Bytecode File: /home/ac1ie/DBT-workbench/resources/subjects/fixed/math/6/target/test-classes/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer_ESTest.class
Class name: NonLinearConjugateGradientOptimizer_ESTest
Method name: test4
Start line: 77
End line: 94
Method source code: 
  public void test4()  throws Throwable  {
      NonLinearConjugateGradientOptimizer.Formula nonLinearConjugateGradientOptimizer_Formula0 = NonLinearConjugateGradientOptimizer.Formula.FLETCHER_REEVES;
      NonLinearConjugateGradientOptimizer nonLinearConjugateGradientOptimizer0 = new NonLinearConjugateGradientOptimizer(nonLinearConjugateGradientOptimizer_Formula0, (ConvergenceChecker<PointValuePair>) null);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[1];
      SimpleBounds simpleBounds0 = SimpleBounds.unbounded(1);
      optimizationDataArray0[0] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
      try { 
        nonLinearConjugateGradientOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: MathUnsupportedOperationException");
      
      } catch(MathUnsupportedOperationException e) {
         //
         // constraint
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer", e);
      }
  }
Method byte code: 
0: getstatic     #2
3: astore_1
4: new           #5
7: dup
8: aload_1
9: aconst_null
10: checkcast     #6
13: invokespecial #17
16: astore_2
17: iconst_1
18: anewarray     #18
21: astore_3
22: iconst_1
23: invokestatic  #27
26: astore        4
28: aload_3
29: iconst_0
30: aload         4
32: aastore
33: aload_2
34: aload_3
35: invokevirtual #21
38: pop
39: ldc           #28
41: invokestatic  #23
44: goto          56
47: astore        5
49: ldc           #25
51: aload         5
53: invokestatic  #26
56: return
Exception table:
from    to  target type
33    44    47   Class org/apache/commons/math3/exception/MathUnsupportedOperationException
}
